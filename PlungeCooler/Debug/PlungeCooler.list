
PlungeCooler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b048  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800b2f8  0800b2f8  0001b2f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b368  0800b368  0001b368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b370  0800b370  0001b370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b374  0800b374  0001b374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  24000000  0800b378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001d834  24000068  0800b3e0  00020068  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2401d89c  0800b3e0  0002d89c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001acc9  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002d0e  00000000  00000000  0003ada2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000014f8  00000000  00000000  0003dab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000106c  00000000  00000000  0003efa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00032a2c  00000000  00000000  00040014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001b763  00000000  00000000  00072a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00153f36  00000000  00000000  0008e1a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006024  00000000  00000000  001e20dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  001e8100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000068 	.word	0x24000068
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800b2e0 	.word	0x0800b2e0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	0800b2e0 	.word	0x0800b2e0

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b970 	b.w	8000698 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9e08      	ldr	r6, [sp, #32]
 80003d6:	460d      	mov	r5, r1
 80003d8:	4604      	mov	r4, r0
 80003da:	460f      	mov	r7, r1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d14a      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4694      	mov	ip, r2
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0xe2>
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	b143      	cbz	r3, 80003fe <__udivmoddi4+0x2e>
 80003ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80003f0:	f1c3 0220 	rsb	r2, r3, #32
 80003f4:	409f      	lsls	r7, r3
 80003f6:	fa20 f202 	lsr.w	r2, r0, r2
 80003fa:	4317      	orrs	r7, r2
 80003fc:	409c      	lsls	r4, r3
 80003fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000402:	fa1f f58c 	uxth.w	r5, ip
 8000406:	fbb7 f1fe 	udiv	r1, r7, lr
 800040a:	0c22      	lsrs	r2, r4, #16
 800040c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000410:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000414:	fb01 f005 	mul.w	r0, r1, r5
 8000418:	4290      	cmp	r0, r2
 800041a:	d90a      	bls.n	8000432 <__udivmoddi4+0x62>
 800041c:	eb1c 0202 	adds.w	r2, ip, r2
 8000420:	f101 37ff 	add.w	r7, r1, #4294967295
 8000424:	f080 811c 	bcs.w	8000660 <__udivmoddi4+0x290>
 8000428:	4290      	cmp	r0, r2
 800042a:	f240 8119 	bls.w	8000660 <__udivmoddi4+0x290>
 800042e:	3902      	subs	r1, #2
 8000430:	4462      	add	r2, ip
 8000432:	1a12      	subs	r2, r2, r0
 8000434:	b2a4      	uxth	r4, r4
 8000436:	fbb2 f0fe 	udiv	r0, r2, lr
 800043a:	fb0e 2210 	mls	r2, lr, r0, r2
 800043e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000442:	fb00 f505 	mul.w	r5, r0, r5
 8000446:	42a5      	cmp	r5, r4
 8000448:	d90a      	bls.n	8000460 <__udivmoddi4+0x90>
 800044a:	eb1c 0404 	adds.w	r4, ip, r4
 800044e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000452:	f080 8107 	bcs.w	8000664 <__udivmoddi4+0x294>
 8000456:	42a5      	cmp	r5, r4
 8000458:	f240 8104 	bls.w	8000664 <__udivmoddi4+0x294>
 800045c:	4464      	add	r4, ip
 800045e:	3802      	subs	r0, #2
 8000460:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000464:	1b64      	subs	r4, r4, r5
 8000466:	2100      	movs	r1, #0
 8000468:	b11e      	cbz	r6, 8000472 <__udivmoddi4+0xa2>
 800046a:	40dc      	lsrs	r4, r3
 800046c:	2300      	movs	r3, #0
 800046e:	e9c6 4300 	strd	r4, r3, [r6]
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0xbc>
 800047a:	2e00      	cmp	r6, #0
 800047c:	f000 80ed 	beq.w	800065a <__udivmoddi4+0x28a>
 8000480:	2100      	movs	r1, #0
 8000482:	e9c6 0500 	strd	r0, r5, [r6]
 8000486:	4608      	mov	r0, r1
 8000488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048c:	fab3 f183 	clz	r1, r3
 8000490:	2900      	cmp	r1, #0
 8000492:	d149      	bne.n	8000528 <__udivmoddi4+0x158>
 8000494:	42ab      	cmp	r3, r5
 8000496:	d302      	bcc.n	800049e <__udivmoddi4+0xce>
 8000498:	4282      	cmp	r2, r0
 800049a:	f200 80f8 	bhi.w	800068e <__udivmoddi4+0x2be>
 800049e:	1a84      	subs	r4, r0, r2
 80004a0:	eb65 0203 	sbc.w	r2, r5, r3
 80004a4:	2001      	movs	r0, #1
 80004a6:	4617      	mov	r7, r2
 80004a8:	2e00      	cmp	r6, #0
 80004aa:	d0e2      	beq.n	8000472 <__udivmoddi4+0xa2>
 80004ac:	e9c6 4700 	strd	r4, r7, [r6]
 80004b0:	e7df      	b.n	8000472 <__udivmoddi4+0xa2>
 80004b2:	b902      	cbnz	r2, 80004b6 <__udivmoddi4+0xe6>
 80004b4:	deff      	udf	#255	; 0xff
 80004b6:	fab2 f382 	clz	r3, r2
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	f040 8090 	bne.w	80005e0 <__udivmoddi4+0x210>
 80004c0:	1a8a      	subs	r2, r1, r2
 80004c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c6:	fa1f fe8c 	uxth.w	lr, ip
 80004ca:	2101      	movs	r1, #1
 80004cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004d0:	fb07 2015 	mls	r0, r7, r5, r2
 80004d4:	0c22      	lsrs	r2, r4, #16
 80004d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004da:	fb0e f005 	mul.w	r0, lr, r5
 80004de:	4290      	cmp	r0, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x124>
 80004e2:	eb1c 0202 	adds.w	r2, ip, r2
 80004e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x122>
 80004ec:	4290      	cmp	r0, r2
 80004ee:	f200 80cb 	bhi.w	8000688 <__udivmoddi4+0x2b8>
 80004f2:	4645      	mov	r5, r8
 80004f4:	1a12      	subs	r2, r2, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000500:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000504:	fb0e fe00 	mul.w	lr, lr, r0
 8000508:	45a6      	cmp	lr, r4
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x14e>
 800050c:	eb1c 0404 	adds.w	r4, ip, r4
 8000510:	f100 32ff 	add.w	r2, r0, #4294967295
 8000514:	d202      	bcs.n	800051c <__udivmoddi4+0x14c>
 8000516:	45a6      	cmp	lr, r4
 8000518:	f200 80bb 	bhi.w	8000692 <__udivmoddi4+0x2c2>
 800051c:	4610      	mov	r0, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000526:	e79f      	b.n	8000468 <__udivmoddi4+0x98>
 8000528:	f1c1 0720 	rsb	r7, r1, #32
 800052c:	408b      	lsls	r3, r1
 800052e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000532:	ea4c 0c03 	orr.w	ip, ip, r3
 8000536:	fa05 f401 	lsl.w	r4, r5, r1
 800053a:	fa20 f307 	lsr.w	r3, r0, r7
 800053e:	40fd      	lsrs	r5, r7
 8000540:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000544:	4323      	orrs	r3, r4
 8000546:	fbb5 f8f9 	udiv	r8, r5, r9
 800054a:	fa1f fe8c 	uxth.w	lr, ip
 800054e:	fb09 5518 	mls	r5, r9, r8, r5
 8000552:	0c1c      	lsrs	r4, r3, #16
 8000554:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000558:	fb08 f50e 	mul.w	r5, r8, lr
 800055c:	42a5      	cmp	r5, r4
 800055e:	fa02 f201 	lsl.w	r2, r2, r1
 8000562:	fa00 f001 	lsl.w	r0, r0, r1
 8000566:	d90b      	bls.n	8000580 <__udivmoddi4+0x1b0>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000570:	f080 8088 	bcs.w	8000684 <__udivmoddi4+0x2b4>
 8000574:	42a5      	cmp	r5, r4
 8000576:	f240 8085 	bls.w	8000684 <__udivmoddi4+0x2b4>
 800057a:	f1a8 0802 	sub.w	r8, r8, #2
 800057e:	4464      	add	r4, ip
 8000580:	1b64      	subs	r4, r4, r5
 8000582:	b29d      	uxth	r5, r3
 8000584:	fbb4 f3f9 	udiv	r3, r4, r9
 8000588:	fb09 4413 	mls	r4, r9, r3, r4
 800058c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000590:	fb03 fe0e 	mul.w	lr, r3, lr
 8000594:	45a6      	cmp	lr, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x1da>
 8000598:	eb1c 0404 	adds.w	r4, ip, r4
 800059c:	f103 35ff 	add.w	r5, r3, #4294967295
 80005a0:	d26c      	bcs.n	800067c <__udivmoddi4+0x2ac>
 80005a2:	45a6      	cmp	lr, r4
 80005a4:	d96a      	bls.n	800067c <__udivmoddi4+0x2ac>
 80005a6:	3b02      	subs	r3, #2
 80005a8:	4464      	add	r4, ip
 80005aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ae:	fba3 9502 	umull	r9, r5, r3, r2
 80005b2:	eba4 040e 	sub.w	r4, r4, lr
 80005b6:	42ac      	cmp	r4, r5
 80005b8:	46c8      	mov	r8, r9
 80005ba:	46ae      	mov	lr, r5
 80005bc:	d356      	bcc.n	800066c <__udivmoddi4+0x29c>
 80005be:	d053      	beq.n	8000668 <__udivmoddi4+0x298>
 80005c0:	b156      	cbz	r6, 80005d8 <__udivmoddi4+0x208>
 80005c2:	ebb0 0208 	subs.w	r2, r0, r8
 80005c6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ca:	fa04 f707 	lsl.w	r7, r4, r7
 80005ce:	40ca      	lsrs	r2, r1
 80005d0:	40cc      	lsrs	r4, r1
 80005d2:	4317      	orrs	r7, r2
 80005d4:	e9c6 7400 	strd	r7, r4, [r6]
 80005d8:	4618      	mov	r0, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e0:	f1c3 0120 	rsb	r1, r3, #32
 80005e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005e8:	fa20 f201 	lsr.w	r2, r0, r1
 80005ec:	fa25 f101 	lsr.w	r1, r5, r1
 80005f0:	409d      	lsls	r5, r3
 80005f2:	432a      	orrs	r2, r5
 80005f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f8:	fa1f fe8c 	uxth.w	lr, ip
 80005fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000600:	fb07 1510 	mls	r5, r7, r0, r1
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800060a:	fb00 f50e 	mul.w	r5, r0, lr
 800060e:	428d      	cmp	r5, r1
 8000610:	fa04 f403 	lsl.w	r4, r4, r3
 8000614:	d908      	bls.n	8000628 <__udivmoddi4+0x258>
 8000616:	eb1c 0101 	adds.w	r1, ip, r1
 800061a:	f100 38ff 	add.w	r8, r0, #4294967295
 800061e:	d22f      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000620:	428d      	cmp	r5, r1
 8000622:	d92d      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000624:	3802      	subs	r0, #2
 8000626:	4461      	add	r1, ip
 8000628:	1b49      	subs	r1, r1, r5
 800062a:	b292      	uxth	r2, r2
 800062c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000630:	fb07 1115 	mls	r1, r7, r5, r1
 8000634:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000638:	fb05 f10e 	mul.w	r1, r5, lr
 800063c:	4291      	cmp	r1, r2
 800063e:	d908      	bls.n	8000652 <__udivmoddi4+0x282>
 8000640:	eb1c 0202 	adds.w	r2, ip, r2
 8000644:	f105 38ff 	add.w	r8, r5, #4294967295
 8000648:	d216      	bcs.n	8000678 <__udivmoddi4+0x2a8>
 800064a:	4291      	cmp	r1, r2
 800064c:	d914      	bls.n	8000678 <__udivmoddi4+0x2a8>
 800064e:	3d02      	subs	r5, #2
 8000650:	4462      	add	r2, ip
 8000652:	1a52      	subs	r2, r2, r1
 8000654:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000658:	e738      	b.n	80004cc <__udivmoddi4+0xfc>
 800065a:	4631      	mov	r1, r6
 800065c:	4630      	mov	r0, r6
 800065e:	e708      	b.n	8000472 <__udivmoddi4+0xa2>
 8000660:	4639      	mov	r1, r7
 8000662:	e6e6      	b.n	8000432 <__udivmoddi4+0x62>
 8000664:	4610      	mov	r0, r2
 8000666:	e6fb      	b.n	8000460 <__udivmoddi4+0x90>
 8000668:	4548      	cmp	r0, r9
 800066a:	d2a9      	bcs.n	80005c0 <__udivmoddi4+0x1f0>
 800066c:	ebb9 0802 	subs.w	r8, r9, r2
 8000670:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000674:	3b01      	subs	r3, #1
 8000676:	e7a3      	b.n	80005c0 <__udivmoddi4+0x1f0>
 8000678:	4645      	mov	r5, r8
 800067a:	e7ea      	b.n	8000652 <__udivmoddi4+0x282>
 800067c:	462b      	mov	r3, r5
 800067e:	e794      	b.n	80005aa <__udivmoddi4+0x1da>
 8000680:	4640      	mov	r0, r8
 8000682:	e7d1      	b.n	8000628 <__udivmoddi4+0x258>
 8000684:	46d0      	mov	r8, sl
 8000686:	e77b      	b.n	8000580 <__udivmoddi4+0x1b0>
 8000688:	3d02      	subs	r5, #2
 800068a:	4462      	add	r2, ip
 800068c:	e732      	b.n	80004f4 <__udivmoddi4+0x124>
 800068e:	4608      	mov	r0, r1
 8000690:	e70a      	b.n	80004a8 <__udivmoddi4+0xd8>
 8000692:	4464      	add	r4, ip
 8000694:	3802      	subs	r0, #2
 8000696:	e742      	b.n	800051e <__udivmoddi4+0x14e>

08000698 <__aeabi_idiv0>:
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80006a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	db0b      	blt.n	80006c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ae:	88fb      	ldrh	r3, [r7, #6]
 80006b0:	f003 021f 	and.w	r2, r3, #31
 80006b4:	4907      	ldr	r1, [pc, #28]	; (80006d4 <__NVIC_EnableIRQ+0x38>)
 80006b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006ba:	095b      	lsrs	r3, r3, #5
 80006bc:	2001      	movs	r0, #1
 80006be:	fa00 f202 	lsl.w	r2, r0, r2
 80006c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	e000e100 	.word	0xe000e100

080006d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	6039      	str	r1, [r7, #0]
 80006e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80006e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	db0a      	blt.n	8000702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	490c      	ldr	r1, [pc, #48]	; (8000724 <__NVIC_SetPriority+0x4c>)
 80006f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006f6:	0112      	lsls	r2, r2, #4
 80006f8:	b2d2      	uxtb	r2, r2
 80006fa:	440b      	add	r3, r1
 80006fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000700:	e00a      	b.n	8000718 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4908      	ldr	r1, [pc, #32]	; (8000728 <__NVIC_SetPriority+0x50>)
 8000708:	88fb      	ldrh	r3, [r7, #6]
 800070a:	f003 030f 	and.w	r3, r3, #15
 800070e:	3b04      	subs	r3, #4
 8000710:	0112      	lsls	r2, r2, #4
 8000712:	b2d2      	uxtb	r2, r2
 8000714:	440b      	add	r3, r1
 8000716:	761a      	strb	r2, [r3, #24]
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000e100 	.word	0xe000e100
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <HAL_UART_RxCpltCallback>:
void bad(void) {
	HAL_UART_Transmit(&huart3, tx_bad, 3, HAL_MAX_DELAY);
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
    rxBuffer[rxIndex] = received_character[0];
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <HAL_UART_RxCpltCallback+0x54>)
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <HAL_UART_RxCpltCallback+0x58>)
 800073c:	7819      	ldrb	r1, [r3, #0]
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <HAL_UART_RxCpltCallback+0x5c>)
 8000740:	5499      	strb	r1, [r3, r2]
	rxIndex++;
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <HAL_UART_RxCpltCallback+0x54>)
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	3301      	adds	r3, #1
 8000748:	b29a      	uxth	r2, r3
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <HAL_UART_RxCpltCallback+0x54>)
 800074c:	801a      	strh	r2, [r3, #0]

	if (received_character[0] == '\n' || received_character[0] == '\r') { //ie end of message, stop receiving. 
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <HAL_UART_RxCpltCallback+0x58>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b0a      	cmp	r3, #10
 8000754:	d003      	beq.n	800075e <HAL_UART_RxCpltCallback+0x32>
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <HAL_UART_RxCpltCallback+0x58>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b0d      	cmp	r3, #13
 800075c:	d105      	bne.n	800076a <HAL_UART_RxCpltCallback+0x3e>
    	rxIndex = 0;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <HAL_UART_RxCpltCallback+0x54>)
 8000760:	2200      	movs	r2, #0
 8000762:	801a      	strh	r2, [r3, #0]
    	rx_handle();
 8000764:	f000 f814 	bl	8000790 <rx_handle>
 8000768:	e005      	b.n	8000776 <HAL_UART_RxCpltCallback+0x4a>
    } else {
        HAL_UART_Receive_IT(&huart3, received_character, 1);
 800076a:	2201      	movs	r2, #1
 800076c:	4905      	ldr	r1, [pc, #20]	; (8000784 <HAL_UART_RxCpltCallback+0x58>)
 800076e:	4807      	ldr	r0, [pc, #28]	; (800078c <HAL_UART_RxCpltCallback+0x60>)
 8000770:	f007 fcc4 	bl	80080fc <HAL_UART_Receive_IT>
    }
}
 8000774:	bf00      	nop
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	2401d73c 	.word	0x2401d73c
 8000784:	2401d740 	.word	0x2401d740
 8000788:	2401d6d8 	.word	0x2401d6d8
 800078c:	24000180 	.word	0x24000180

08000790 <rx_handle>:

void rx_handle(void) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, val);
 8000796:	4b50      	ldr	r3, [pc, #320]	; (80008d8 <rx_handle+0x148>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	461a      	mov	r2, r3
 800079c:	2102      	movs	r1, #2
 800079e:	484f      	ldr	r0, [pc, #316]	; (80008dc <rx_handle+0x14c>)
 80007a0:	f003 fa66 	bl	8003c70 <HAL_GPIO_WritePin>
	if(val)
 80007a4:	4b4c      	ldr	r3, [pc, #304]	; (80008d8 <rx_handle+0x148>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d003      	beq.n	80007b4 <rx_handle+0x24>
		val = 0;
 80007ac:	4b4a      	ldr	r3, [pc, #296]	; (80008d8 <rx_handle+0x148>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	701a      	strb	r2, [r3, #0]
 80007b2:	e002      	b.n	80007ba <rx_handle+0x2a>
	else
		val = 1;
 80007b4:	4b48      	ldr	r3, [pc, #288]	; (80008d8 <rx_handle+0x148>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	701a      	strb	r2, [r3, #0]
	//sprintf(num, "RX0: %d\r\n", rxBuffer[0]);
	//HAL_UART_Transmit(&huart3, (uint8_t*)num, strlen(num), HAL_MAX_DELAY);
	switch(rxBuffer[0]) {
 80007ba:	4b49      	ldr	r3, [pc, #292]	; (80008e0 <rx_handle+0x150>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	3b32      	subs	r3, #50	; 0x32
 80007c0:	2b03      	cmp	r3, #3
 80007c2:	f200 8080 	bhi.w	80008c6 <rx_handle+0x136>
 80007c6:	a201      	add	r2, pc, #4	; (adr r2, 80007cc <rx_handle+0x3c>)
 80007c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007cc:	080007dd 	.word	0x080007dd
 80007d0:	0800087d 	.word	0x0800087d
 80007d4:	08000827 	.word	0x08000827
 80007d8:	080008c1 	.word	0x080008c1
		case PLUNGE: ;

			/* reset tracking variables */
			log_position = 0;
 80007dc:	4b41      	ldr	r3, [pc, #260]	; (80008e4 <rx_handle+0x154>)
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
			memset(posLog, 0, sizeof(posLog));
 80007e2:	f64e 2260 	movw	r2, #60000	; 0xea60
 80007e6:	2100      	movs	r1, #0
 80007e8:	483f      	ldr	r0, [pc, #252]	; (80008e8 <rx_handle+0x158>)
 80007ea:	f00a f8f5 	bl	800a9d8 <memset>
      memset(thermoLog, 0, sizeof(thermoLog));
 80007ee:	f64e 2260 	movw	r2, #60000	; 0xea60
 80007f2:	2100      	movs	r1, #0
 80007f4:	483d      	ldr	r0, [pc, #244]	; (80008ec <rx_handle+0x15c>)
 80007f6:	f00a f8ef 	bl	800a9d8 <memset>

			TIM2->CR1  |=  TIM_CR1_CEN; 	//start counter for encoder 
 80007fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6013      	str	r3, [r2, #0]

			TIM5->CR1  |= TIM_CR1_CEN; // Start TIM5 to commence data collection
 800080a:	4b39      	ldr	r3, [pc, #228]	; (80008f0 <rx_handle+0x160>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a38      	ldr	r2, [pc, #224]	; (80008f0 <rx_handle+0x160>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6013      	str	r3, [r2, #0]

      HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000816:	f04f 33ff 	mov.w	r3, #4294967295
 800081a:	2203      	movs	r2, #3
 800081c:	4935      	ldr	r1, [pc, #212]	; (80008f4 <rx_handle+0x164>)
 800081e:	4836      	ldr	r0, [pc, #216]	; (80008f8 <rx_handle+0x168>)
 8000820:	f007 fbde 	bl	8007fe0 <HAL_UART_Transmit>

			break;
 8000824:	e04f      	b.n	80008c6 <rx_handle+0x136>

    case FETCH: ; 
      HAL_ADC_Start(&hadc1);
 8000826:	4835      	ldr	r0, [pc, #212]	; (80008fc <rx_handle+0x16c>)
 8000828:	f001 fb6c 	bl	8001f04 <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800082c:	f04f 31ff 	mov.w	r1, #4294967295
 8000830:	4832      	ldr	r0, [pc, #200]	; (80008fc <rx_handle+0x16c>)
 8000832:	f001 fc21 	bl	8002078 <HAL_ADC_PollForConversion>
      nudge_temp = HAL_ADC_GetValue(&hadc1);
 8000836:	4831      	ldr	r0, [pc, #196]	; (80008fc <rx_handle+0x16c>)
 8000838:	f001 fcf6 	bl	8002228 <HAL_ADC_GetValue>
 800083c:	4603      	mov	r3, r0
 800083e:	b29a      	uxth	r2, r3
 8000840:	4b2f      	ldr	r3, [pc, #188]	; (8000900 <rx_handle+0x170>)
 8000842:	801a      	strh	r2, [r3, #0]
      char msg[10];
      sprintf(msg, "%u\n", nudge_temp);
 8000844:	4b2e      	ldr	r3, [pc, #184]	; (8000900 <rx_handle+0x170>)
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	461a      	mov	r2, r3
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	492d      	ldr	r1, [pc, #180]	; (8000904 <rx_handle+0x174>)
 800084e:	4618      	mov	r0, r3
 8000850:	f00a f8a2 	bl	800a998 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fd4a 	bl	80002f0 <strlen>
 800085c:	4603      	mov	r3, r0
 800085e:	b29a      	uxth	r2, r3
 8000860:	1d39      	adds	r1, r7, #4
 8000862:	f04f 33ff 	mov.w	r3, #4294967295
 8000866:	4824      	ldr	r0, [pc, #144]	; (80008f8 <rx_handle+0x168>)
 8000868:	f007 fbba 	bl	8007fe0 <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 800086c:	f04f 33ff 	mov.w	r3, #4294967295
 8000870:	2203      	movs	r2, #3
 8000872:	4920      	ldr	r1, [pc, #128]	; (80008f4 <rx_handle+0x164>)
 8000874:	4820      	ldr	r0, [pc, #128]	; (80008f8 <rx_handle+0x168>)
 8000876:	f007 fbb3 	bl	8007fe0 <HAL_UART_Transmit>

      break;
 800087a:	e024      	b.n	80008c6 <rx_handle+0x136>

    case END: ;
	  TIM5->CR1  |= TIM_CR1_UDIS;	// make sure update is disabled
 800087c:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <rx_handle+0x160>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a1b      	ldr	r2, [pc, #108]	; (80008f0 <rx_handle+0x160>)
 8000882:	f043 0302 	orr.w	r3, r3, #2
 8000886:	6013      	str	r3, [r2, #0]
	  TIM5->DIER &=  ~TIM_DIER_UIE; 	// update interrupt disabled
 8000888:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <rx_handle+0x160>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	4a18      	ldr	r2, [pc, #96]	; (80008f0 <rx_handle+0x160>)
 800088e:	f023 0301 	bic.w	r3, r3, #1
 8000892:	60d3      	str	r3, [r2, #12]
	  TIM2->CR1 &= ~TIM_CR1_CEN;		// disable tim2
 8000894:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800089e:	f023 0301 	bic.w	r3, r3, #1
 80008a2:	6013      	str	r3, [r2, #0]
	  TIM5->CR1  &= ~TIM_CR1_CEN; 	// disable tim5
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <rx_handle+0x160>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a11      	ldr	r2, [pc, #68]	; (80008f0 <rx_handle+0x160>)
 80008aa:	f023 0301 	bic.w	r3, r3, #1
 80008ae:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 80008b0:	f04f 33ff 	mov.w	r3, #4294967295
 80008b4:	2203      	movs	r2, #3
 80008b6:	490f      	ldr	r1, [pc, #60]	; (80008f4 <rx_handle+0x164>)
 80008b8:	480f      	ldr	r0, [pc, #60]	; (80008f8 <rx_handle+0x168>)
 80008ba:	f007 fb91 	bl	8007fe0 <HAL_UART_Transmit>
	  break;
 80008be:	e002      	b.n	80008c6 <rx_handle+0x136>

    case SEND: ;
    	plunge_done_flag = 1;
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <rx_handle+0x178>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	701a      	strb	r2, [r3, #0]


//	char b[] = "done handling\r\n";
//	HAL_UART_Transmit(&huart3, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);

    HAL_UART_Receive_IT(&huart3, received_character, 1);
 80008c6:	2201      	movs	r2, #1
 80008c8:	4910      	ldr	r1, [pc, #64]	; (800090c <rx_handle+0x17c>)
 80008ca:	480b      	ldr	r0, [pc, #44]	; (80008f8 <rx_handle+0x168>)
 80008cc:	f007 fc16 	bl	80080fc <HAL_UART_Receive_IT>
}
 80008d0:	bf00      	nop
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	24000000 	.word	0x24000000
 80008dc:	58021000 	.word	0x58021000
 80008e0:	2401d6d8 	.word	0x2401d6d8
 80008e4:	2401d6d4 	.word	0x2401d6d4
 80008e8:	24000214 	.word	0x24000214
 80008ec:	2400ec74 	.word	0x2400ec74
 80008f0:	40000c00 	.word	0x40000c00
 80008f4:	24000004 	.word	0x24000004
 80008f8:	24000180 	.word	0x24000180
 80008fc:	24000084 	.word	0x24000084
 8000900:	2401d742 	.word	0x2401d742
 8000904:	0800b2f8 	.word	0x0800b2f8
 8000908:	2401d741 	.word	0x2401d741
 800090c:	2401d740 	.word	0x2401d740

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000916:	f000 ff27 	bl	8001768 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800091a:	f000 f935 	bl	8000b88 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091e:	f000 fb31 	bl	8000f84 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000922:	f000 fa21 	bl	8000d68 <MX_TIM2_Init>
  MX_USB_OTG_HS_USB_Init();
 8000926:	f000 fb25 	bl	8000f74 <MX_USB_OTG_HS_USB_Init>
  MX_USART3_UART_Init();
 800092a:	f000 fad7 	bl	8000edc <MX_USART3_UART_Init>
  MX_TIM5_Init();
 800092e:	f000 fa87 	bl	8000e40 <MX_TIM5_Init>
  MX_ADC1_Init();
 8000932:	f000 f99f 	bl	8000c74 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* configuring encoder counter */
  TIM2->CR1  &= ~TIM_CR1_CEN;
 8000936:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000940:	f023 0301 	bic.w	r3, r3, #1
 8000944:	6013      	str	r3, [r2, #0]

  TIM2->CNT   =  100;				// 100 included here and in ARR to make sure it doesnt immediately underflow if it vibrates up
 8000946:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800094a:	2264      	movs	r2, #100	; 0x64
 800094c:	625a      	str	r2, [r3, #36]	; 0x24
  TIM2->ARR 	= 40000; 		// Counter will not roll over in entire plunge path, will be stopped and reset by usart interupt handler. 
 800094e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000952:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000956:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM2->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000958:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800095c:	691b      	ldr	r3, [r3, #16]
 800095e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000962:	f023 0301 	bic.w	r3, r3, #1
 8000966:	6113      	str	r3, [r2, #16]
  TIM2->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000968:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000972:	f023 0302 	bic.w	r3, r3, #2
 8000976:	6013      	str	r3, [r2, #0]
  TIM2->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000978:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800097c:	68db      	ldr	r3, [r3, #12]
 800097e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	60d3      	str	r3, [r2, #12]
  TIM2->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000988:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000996:	6013      	str	r3, [r2, #0]

    /* configuring data logging timer */
  TIM5->CR1  &= ~TIM_CR1_CEN; 
 8000998:	4b72      	ldr	r3, [pc, #456]	; (8000b64 <main+0x254>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a71      	ldr	r2, [pc, #452]	; (8000b64 <main+0x254>)
 800099e:	f023 0301 	bic.w	r3, r3, #1
 80009a2:	6013      	str	r3, [r2, #0]

  TIM5-> CNT  = 100;				//
 80009a4:	4b6f      	ldr	r3, [pc, #444]	; (8000b64 <main+0x254>)
 80009a6:	2264      	movs	r2, #100	; 0x64
 80009a8:	625a      	str	r2, [r3, #36]	; 0x24
  TIM5->ARR 	= CLOCKS_PER_LOG; 	// check positione interval
 80009aa:	4b6e      	ldr	r3, [pc, #440]	; (8000b64 <main+0x254>)
 80009ac:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 80009b0:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM5->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 80009b2:	4b6c      	ldr	r3, [pc, #432]	; (8000b64 <main+0x254>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a6b      	ldr	r2, [pc, #428]	; (8000b64 <main+0x254>)
 80009b8:	f023 0302 	bic.w	r3, r3, #2
 80009bc:	6013      	str	r3, [r2, #0]
  TIM5->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 80009be:	4b69      	ldr	r3, [pc, #420]	; (8000b64 <main+0x254>)
 80009c0:	68db      	ldr	r3, [r3, #12]
 80009c2:	4a68      	ldr	r2, [pc, #416]	; (8000b64 <main+0x254>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	60d3      	str	r3, [r2, #12]
  TIM5->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 80009ca:	4b66      	ldr	r3, [pc, #408]	; (8000b64 <main+0x254>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a65      	ldr	r2, [pc, #404]	; (8000b64 <main+0x254>)
 80009d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d4:	6013      	str	r3, [r2, #0]
  TIM5->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 80009d6:	4b63      	ldr	r3, [pc, #396]	; (8000b64 <main+0x254>)
 80009d8:	691b      	ldr	r3, [r3, #16]
 80009da:	4a62      	ldr	r2, [pc, #392]	; (8000b64 <main+0x254>)
 80009dc:	f023 0301 	bic.w	r3, r3, #1
 80009e0:	6113      	str	r3, [r2, #16]


  HAL_UART_Receive_IT(&huart3, received_character, 1); // initialize interrupts
 80009e2:	2201      	movs	r2, #1
 80009e4:	4960      	ldr	r1, [pc, #384]	; (8000b68 <main+0x258>)
 80009e6:	4861      	ldr	r0, [pc, #388]	; (8000b6c <main+0x25c>)
 80009e8:	f007 fb88 	bl	80080fc <HAL_UART_Receive_IT>

//  char msg[] = "program start \r\n";
//  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

  // TIM2 for encoder tick counting
  NVIC_SetPriority(TIM2_IRQn, 1); // Braking is priority as long as dispense isnt happening
 80009ec:	2101      	movs	r1, #1
 80009ee:	201c      	movs	r0, #28
 80009f0:	f7ff fe72 	bl	80006d8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 80009f4:	201c      	movs	r0, #28
 80009f6:	f7ff fe51 	bl	800069c <__NVIC_EnableIRQ>

  // TIM5 for logkeeping and speed calculations and TIM4 setup
  NVIC_SetPriority(TIM5_IRQn, 2); // Log keeping should be interruptable
 80009fa:	2102      	movs	r1, #2
 80009fc:	2032      	movs	r0, #50	; 0x32
 80009fe:	f7ff fe6b 	bl	80006d8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 8000a02:	2032      	movs	r0, #50	; 0x32
 8000a04:	f7ff fe4a 	bl	800069c <__NVIC_EnableIRQ>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1) {
	  if(plunge_done_flag) {
 8000a08:	4b59      	ldr	r3, [pc, #356]	; (8000b70 <main+0x260>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d0fb      	beq.n	8000a08 <main+0xf8>
		  char msg[10];
		  for(int i=0 ; i<log_position; i++) {
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	e018      	b.n	8000a48 <main+0x138>
			  sprintf(msg, "%u\n", posLog[i]);
 8000a16:	4a57      	ldr	r2, [pc, #348]	; (8000b74 <main+0x264>)
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	4955      	ldr	r1, [pc, #340]	; (8000b78 <main+0x268>)
 8000a24:	4618      	mov	r0, r3
 8000a26:	f009 ffb7 	bl	800a998 <siprintf>
			  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fc5f 	bl	80002f0 <strlen>
 8000a32:	4603      	mov	r3, r0
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	1d39      	adds	r1, r7, #4
 8000a38:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3c:	484b      	ldr	r0, [pc, #300]	; (8000b6c <main+0x25c>)
 8000a3e:	f007 facf 	bl	8007fe0 <HAL_UART_Transmit>
		  for(int i=0 ; i<log_position; i++) {
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	3301      	adds	r3, #1
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	697a      	ldr	r2, [r7, #20]
 8000a4a:	4b4c      	ldr	r3, [pc, #304]	; (8000b7c <main+0x26c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d3e1      	bcc.n	8000a16 <main+0x106>
		  }
		  HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
 8000a56:	2203      	movs	r2, #3
 8000a58:	4949      	ldr	r1, [pc, #292]	; (8000b80 <main+0x270>)
 8000a5a:	4844      	ldr	r0, [pc, #272]	; (8000b6c <main+0x25c>)
 8000a5c:	f007 fac0 	bl	8007fe0 <HAL_UART_Transmit>

      for(int i=0 ; i<log_position; i++) {
 8000a60:	2300      	movs	r3, #0
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	e018      	b.n	8000a98 <main+0x188>
			  sprintf(msg, "%u\n", thermoLog[i]);
 8000a66:	4a47      	ldr	r2, [pc, #284]	; (8000b84 <main+0x274>)
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	4941      	ldr	r1, [pc, #260]	; (8000b78 <main+0x268>)
 8000a74:	4618      	mov	r0, r3
 8000a76:	f009 ff8f 	bl	800a998 <siprintf>
			  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fc37 	bl	80002f0 <strlen>
 8000a82:	4603      	mov	r3, r0
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	1d39      	adds	r1, r7, #4
 8000a88:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8c:	4837      	ldr	r0, [pc, #220]	; (8000b6c <main+0x25c>)
 8000a8e:	f007 faa7 	bl	8007fe0 <HAL_UART_Transmit>
      for(int i=0 ; i<log_position; i++) {
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	3301      	adds	r3, #1
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	4b38      	ldr	r3, [pc, #224]	; (8000b7c <main+0x26c>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d3e1      	bcc.n	8000a66 <main+0x156>
		  }

      //Prepare timers for the next plunge, do not enable yet 
      TIM2->CR1  &= ~TIM_CR1_CEN;
 8000aa2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aac:	f023 0301 	bic.w	r3, r3, #1
 8000ab0:	6013      	str	r3, [r2, #0]

      TIM2->CNT   =  100;				// 100 included here and in ARR to make sure it doesnt immediately underflow if it vibrates up
 8000ab2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ab6:	2264      	movs	r2, #100	; 0x64
 8000ab8:	625a      	str	r2, [r3, #36]	; 0x24
      TIM2->ARR 	= 40000; 		// Counter will not roll over in entire plunge path, will be stopped and reset by usart interupt handler. 
 8000aba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000abe:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000ac2:	62da      	str	r2, [r3, #44]	; 0x2c
      TIM2->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000ac4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ac8:	691b      	ldr	r3, [r3, #16]
 8000aca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ace:	f023 0301 	bic.w	r3, r3, #1
 8000ad2:	6113      	str	r3, [r2, #16]
      TIM2->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000ad4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ade:	f023 0302 	bic.w	r3, r3, #2
 8000ae2:	6013      	str	r3, [r2, #0]
      TIM2->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000ae4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ae8:	68db      	ldr	r3, [r3, #12]
 8000aea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aee:	f043 0301 	orr.w	r3, r3, #1
 8000af2:	60d3      	str	r3, [r2, #12]
      TIM2->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000af4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b02:	6013      	str	r3, [r2, #0]

        /* configuring data logging timer */
      TIM5->CR1  &= ~TIM_CR1_CEN; 
 8000b04:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <main+0x254>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a16      	ldr	r2, [pc, #88]	; (8000b64 <main+0x254>)
 8000b0a:	f023 0301 	bic.w	r3, r3, #1
 8000b0e:	6013      	str	r3, [r2, #0]

      TIM5-> CNT  = 100;				
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <main+0x254>)
 8000b12:	2264      	movs	r2, #100	; 0x64
 8000b14:	625a      	str	r2, [r3, #36]	; 0x24
      TIM5->ARR 	= CLOCKS_PER_LOG; 	// check positione interval
 8000b16:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <main+0x254>)
 8000b18:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8000b1c:	62da      	str	r2, [r3, #44]	; 0x2c
      TIM5->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <main+0x254>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a10      	ldr	r2, [pc, #64]	; (8000b64 <main+0x254>)
 8000b24:	f023 0302 	bic.w	r3, r3, #2
 8000b28:	6013      	str	r3, [r2, #0]
      TIM5->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <main+0x254>)
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	4a0d      	ldr	r2, [pc, #52]	; (8000b64 <main+0x254>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	60d3      	str	r3, [r2, #12]
      TIM5->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <main+0x254>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <main+0x254>)
 8000b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b40:	6013      	str	r3, [r2, #0]
      TIM5->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <main+0x254>)
 8000b44:	691b      	ldr	r3, [r3, #16]
 8000b46:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <main+0x254>)
 8000b48:	f023 0301 	bic.w	r3, r3, #1
 8000b4c:	6113      	str	r3, [r2, #16]

      HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b52:	2203      	movs	r2, #3
 8000b54:	490a      	ldr	r1, [pc, #40]	; (8000b80 <main+0x270>)
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <main+0x25c>)
 8000b58:	f007 fa42 	bl	8007fe0 <HAL_UART_Transmit>
		  plunge_done_flag = 0;
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <main+0x260>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
	  if(plunge_done_flag) {
 8000b62:	e751      	b.n	8000a08 <main+0xf8>
 8000b64:	40000c00 	.word	0x40000c00
 8000b68:	2401d740 	.word	0x2401d740
 8000b6c:	24000180 	.word	0x24000180
 8000b70:	2401d741 	.word	0x2401d741
 8000b74:	24000214 	.word	0x24000214
 8000b78:	0800b2f8 	.word	0x0800b2f8
 8000b7c:	2401d6d4 	.word	0x2401d6d4
 8000b80:	24000004 	.word	0x24000004
 8000b84:	2400ec74 	.word	0x2400ec74

08000b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b09c      	sub	sp, #112	; 0x70
 8000b8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b92:	224c      	movs	r2, #76	; 0x4c
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f009 ff1e 	bl	800a9d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	2220      	movs	r2, #32
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f009 ff18 	bl	800a9d8 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000ba8:	4b30      	ldr	r3, [pc, #192]	; (8000c6c <SystemClock_Config+0xe4>)
 8000baa:	f04f 32ff 	mov.w	r2, #4294967295
 8000bae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000bb2:	2004      	movs	r0, #4
 8000bb4:	f003 f876 	bl	8003ca4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bb8:	2300      	movs	r3, #0
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	4b2c      	ldr	r3, [pc, #176]	; (8000c70 <SystemClock_Config+0xe8>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a2b      	ldr	r2, [pc, #172]	; (8000c70 <SystemClock_Config+0xe8>)
 8000bc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bc6:	6193      	str	r3, [r2, #24]
 8000bc8:	4b29      	ldr	r3, [pc, #164]	; (8000c70 <SystemClock_Config+0xe8>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bd4:	bf00      	nop
 8000bd6:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <SystemClock_Config+0xe8>)
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000be2:	d1f8      	bne.n	8000bd6 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000be4:	2321      	movs	r3, #33	; 0x21
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000be8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000bfe:	2318      	movs	r3, #24
 8000c00:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c02:	2302      	movs	r3, #2
 8000c04:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c06:	2304      	movs	r3, #4
 8000c08:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c0e:	230c      	movs	r3, #12
 8000c10:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f003 f89a 	bl	8003d58 <HAL_RCC_OscConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c2a:	f000 fac5 	bl	80011b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2e:	233f      	movs	r3, #63	; 0x3f
 8000c30:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c32:	2303      	movs	r3, #3
 8000c34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	2102      	movs	r1, #2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f003 fcb2 	bl	80045bc <HAL_RCC_ClockConfig>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000c5e:	f000 faab 	bl	80011b8 <Error_Handler>
  }
}
 8000c62:	bf00      	nop
 8000c64:	3770      	adds	r7, #112	; 0x70
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	58024400 	.word	0x58024400
 8000c70:	58024800 	.word	0x58024800

08000c74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	; 0x28
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c86:	463b      	mov	r3, r7
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
 8000c94:	615a      	str	r2, [r3, #20]
 8000c96:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c98:	4b30      	ldr	r3, [pc, #192]	; (8000d5c <MX_ADC1_Init+0xe8>)
 8000c9a:	4a31      	ldr	r2, [pc, #196]	; (8000d60 <MX_ADC1_Init+0xec>)
 8000c9c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c9e:	4b2f      	ldr	r3, [pc, #188]	; (8000d5c <MX_ADC1_Init+0xe8>)
 8000ca0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ca4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000ca6:	4b2d      	ldr	r3, [pc, #180]	; (8000d5c <MX_ADC1_Init+0xe8>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cac:	4b2b      	ldr	r3, [pc, #172]	; (8000d5c <MX_ADC1_Init+0xe8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cb2:	4b2a      	ldr	r3, [pc, #168]	; (8000d5c <MX_ADC1_Init+0xe8>)
 8000cb4:	2204      	movs	r2, #4
 8000cb6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cb8:	4b28      	ldr	r3, [pc, #160]	; (8000d5c <MX_ADC1_Init+0xe8>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cbe:	4b27      	ldr	r3, [pc, #156]	; (8000d5c <MX_ADC1_Init+0xe8>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000cc4:	4b25      	ldr	r3, [pc, #148]	; (8000d5c <MX_ADC1_Init+0xe8>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cca:	4b24      	ldr	r3, [pc, #144]	; (8000d5c <MX_ADC1_Init+0xe8>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cd0:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <MX_ADC1_Init+0xe8>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cd6:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <MX_ADC1_Init+0xe8>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000cdc:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <MX_ADC1_Init+0xe8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ce2:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <MX_ADC1_Init+0xe8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ce8:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <MX_ADC1_Init+0xe8>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000cee:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <MX_ADC1_Init+0xe8>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cf6:	4819      	ldr	r0, [pc, #100]	; (8000d5c <MX_ADC1_Init+0xe8>)
 8000cf8:	f000 ffaa 	bl	8001c50 <HAL_ADC_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000d02:	f000 fa59 	bl	80011b8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d0a:	f107 031c 	add.w	r3, r7, #28
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4812      	ldr	r0, [pc, #72]	; (8000d5c <MX_ADC1_Init+0xe8>)
 8000d12:	f001 feed 	bl	8002af0 <HAL_ADCEx_MultiModeConfigChannel>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000d1c:	f000 fa4c 	bl	80011b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000d20:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <MX_ADC1_Init+0xf0>)
 8000d22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d24:	2306      	movs	r3, #6
 8000d26:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d2c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d30:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d32:	2304      	movs	r3, #4
 8000d34:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d3e:	463b      	mov	r3, r7
 8000d40:	4619      	mov	r1, r3
 8000d42:	4806      	ldr	r0, [pc, #24]	; (8000d5c <MX_ADC1_Init+0xe8>)
 8000d44:	f001 fa7e 	bl	8002244 <HAL_ADC_ConfigChannel>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000d4e:	f000 fa33 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
 // HAL_ADCEx_Calibration_Start(&hadc1,
		  //ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
  /* USER CODE END ADC1_Init 2 */
}
 8000d52:	bf00      	nop
 8000d54:	3728      	adds	r7, #40	; 0x28
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	24000084 	.word	0x24000084
 8000d60:	40022000 	.word	0x40022000
 8000d64:	14f00020 	.word	0x14f00020

08000d68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08c      	sub	sp, #48	; 0x30
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d6e:	f107 030c 	add.w	r3, r7, #12
 8000d72:	2224      	movs	r2, #36	; 0x24
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f009 fe2e 	bl	800a9d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d86:	4b2d      	ldr	r3, [pc, #180]	; (8000e3c <MX_TIM2_Init+0xd4>)
 8000d88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d8e:	4b2b      	ldr	r3, [pc, #172]	; (8000e3c <MX_TIM2_Init+0xd4>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d94:	4b29      	ldr	r3, [pc, #164]	; (8000e3c <MX_TIM2_Init+0xd4>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d9a:	4b28      	ldr	r3, [pc, #160]	; (8000e3c <MX_TIM2_Init+0xd4>)
 8000d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000da0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da2:	4b26      	ldr	r3, [pc, #152]	; (8000e3c <MX_TIM2_Init+0xd4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da8:	4b24      	ldr	r3, [pc, #144]	; (8000e3c <MX_TIM2_Init+0xd4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000dae:	2301      	movs	r3, #1
 8000db0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000db6:	2301      	movs	r3, #1
 8000db8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000dd2:	f107 030c 	add.w	r3, r7, #12
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4818      	ldr	r0, [pc, #96]	; (8000e3c <MX_TIM2_Init+0xd4>)
 8000dda:	f006 fbdd 	bl	8007598 <HAL_TIM_Encoder_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000de4:	f000 f9e8 	bl	80011b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de8:	2300      	movs	r3, #0
 8000dea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000df0:	463b      	mov	r3, r7
 8000df2:	4619      	mov	r1, r3
 8000df4:	4811      	ldr	r0, [pc, #68]	; (8000e3c <MX_TIM2_Init+0xd4>)
 8000df6:	f006 fff7 	bl	8007de8 <HAL_TIMEx_MasterConfigSynchronization>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000e00:	f000 f9da 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
	TIM2->CR1  |= TIM_CR1_UDIS;	// make sure update is enabled
 8000e04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e0e:	f043 0302 	orr.w	r3, r3, #2
 8000e12:	6013      	str	r3, [r2, #0]
	TIM2->DIER &=  ~TIM_DIER_UIE; 	// update interrupt enabled
 8000e14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e1e:	f023 0301 	bic.w	r3, r3, #1
 8000e22:	60d3      	str	r3, [r2, #12]
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8000e24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e2e:	f023 0301 	bic.w	r3, r3, #1
 8000e32:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_Init 2 */

}
 8000e34:	bf00      	nop
 8000e36:	3730      	adds	r7, #48	; 0x30
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	240000e8 	.word	0x240000e8

08000e40 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e5e:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <MX_TIM5_Init+0x94>)
 8000e60:	4a1d      	ldr	r2, [pc, #116]	; (8000ed8 <MX_TIM5_Init+0x98>)
 8000e62:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e64:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <MX_TIM5_Init+0x94>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <MX_TIM5_Init+0x94>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000e70:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <MX_TIM5_Init+0x94>)
 8000e72:	f04f 32ff 	mov.w	r2, #4294967295
 8000e76:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e78:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <MX_TIM5_Init+0x94>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <MX_TIM5_Init+0x94>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e84:	4813      	ldr	r0, [pc, #76]	; (8000ed4 <MX_TIM5_Init+0x94>)
 8000e86:	f006 fb2f 	bl	80074e8 <HAL_TIM_Base_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000e90:	f000 f992 	bl	80011b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000e9a:	f107 0310 	add.w	r3, r7, #16
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <MX_TIM5_Init+0x94>)
 8000ea2:	f006 fd3f 	bl	8007924 <HAL_TIM_ConfigClockSource>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000eac:	f000 f984 	bl	80011b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_TIM5_Init+0x94>)
 8000ebe:	f006 ff93 	bl	8007de8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000ec8:	f000 f976 	bl	80011b8 <Error_Handler>
//  TIM5->DIER |= TIM_DIER_UIE; // Enable update interrupt
//  TIM5->ARR = ENC_DMA_POLL_FREQ; // Timebase

  /* USER CODE END TIM5_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	3720      	adds	r7, #32
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	24000134 	.word	0x24000134
 8000ed8:	40000c00 	.word	0x40000c00

08000edc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ee0:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <MX_USART3_UART_Init+0x90>)
 8000ee2:	4a23      	ldr	r2, [pc, #140]	; (8000f70 <MX_USART3_UART_Init+0x94>)
 8000ee4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ee6:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <MX_USART3_UART_Init+0x90>)
 8000ee8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000eee:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <MX_USART3_UART_Init+0x90>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ef4:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <MX_USART3_UART_Init+0x90>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000efa:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <MX_USART3_UART_Init+0x90>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f00:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <MX_USART3_UART_Init+0x90>)
 8000f02:	220c      	movs	r2, #12
 8000f04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f06:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <MX_USART3_UART_Init+0x90>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f0c:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <MX_USART3_UART_Init+0x90>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f12:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <MX_USART3_UART_Init+0x90>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f18:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <MX_USART3_UART_Init+0x90>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f1e:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <MX_USART3_UART_Init+0x90>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f24:	4811      	ldr	r0, [pc, #68]	; (8000f6c <MX_USART3_UART_Init+0x90>)
 8000f26:	f007 f80b 	bl	8007f40 <HAL_UART_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f30:	f000 f942 	bl	80011b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f34:	2100      	movs	r1, #0
 8000f36:	480d      	ldr	r0, [pc, #52]	; (8000f6c <MX_USART3_UART_Init+0x90>)
 8000f38:	f009 fc63 	bl	800a802 <HAL_UARTEx_SetTxFifoThreshold>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f42:	f000 f939 	bl	80011b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f46:	2100      	movs	r1, #0
 8000f48:	4808      	ldr	r0, [pc, #32]	; (8000f6c <MX_USART3_UART_Init+0x90>)
 8000f4a:	f009 fc98 	bl	800a87e <HAL_UARTEx_SetRxFifoThreshold>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f54:	f000 f930 	bl	80011b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f58:	4804      	ldr	r0, [pc, #16]	; (8000f6c <MX_USART3_UART_Init+0x90>)
 8000f5a:	f009 fc19 	bl	800a790 <HAL_UARTEx_DisableFifoMode>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f64:	f000 f928 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	24000180 	.word	0x24000180
 8000f70:	40004800 	.word	0x40004800

08000f74 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08e      	sub	sp, #56	; 0x38
 8000f88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9a:	4b80      	ldr	r3, [pc, #512]	; (800119c <MX_GPIO_Init+0x218>)
 8000f9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fa0:	4a7e      	ldr	r2, [pc, #504]	; (800119c <MX_GPIO_Init+0x218>)
 8000fa2:	f043 0304 	orr.w	r3, r3, #4
 8000fa6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000faa:	4b7c      	ldr	r3, [pc, #496]	; (800119c <MX_GPIO_Init+0x218>)
 8000fac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fb0:	f003 0304 	and.w	r3, r3, #4
 8000fb4:	623b      	str	r3, [r7, #32]
 8000fb6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fb8:	4b78      	ldr	r3, [pc, #480]	; (800119c <MX_GPIO_Init+0x218>)
 8000fba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fbe:	4a77      	ldr	r2, [pc, #476]	; (800119c <MX_GPIO_Init+0x218>)
 8000fc0:	f043 0320 	orr.w	r3, r3, #32
 8000fc4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fc8:	4b74      	ldr	r3, [pc, #464]	; (800119c <MX_GPIO_Init+0x218>)
 8000fca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fce:	f003 0320 	and.w	r3, r3, #32
 8000fd2:	61fb      	str	r3, [r7, #28]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fd6:	4b71      	ldr	r3, [pc, #452]	; (800119c <MX_GPIO_Init+0x218>)
 8000fd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fdc:	4a6f      	ldr	r2, [pc, #444]	; (800119c <MX_GPIO_Init+0x218>)
 8000fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fe2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fe6:	4b6d      	ldr	r3, [pc, #436]	; (800119c <MX_GPIO_Init+0x218>)
 8000fe8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ff0:	61bb      	str	r3, [r7, #24]
 8000ff2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff4:	4b69      	ldr	r3, [pc, #420]	; (800119c <MX_GPIO_Init+0x218>)
 8000ff6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ffa:	4a68      	ldr	r2, [pc, #416]	; (800119c <MX_GPIO_Init+0x218>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001004:	4b65      	ldr	r3, [pc, #404]	; (800119c <MX_GPIO_Init+0x218>)
 8001006:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	4b62      	ldr	r3, [pc, #392]	; (800119c <MX_GPIO_Init+0x218>)
 8001014:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001018:	4a60      	ldr	r2, [pc, #384]	; (800119c <MX_GPIO_Init+0x218>)
 800101a:	f043 0302 	orr.w	r3, r3, #2
 800101e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001022:	4b5e      	ldr	r3, [pc, #376]	; (800119c <MX_GPIO_Init+0x218>)
 8001024:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001030:	4b5a      	ldr	r3, [pc, #360]	; (800119c <MX_GPIO_Init+0x218>)
 8001032:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001036:	4a59      	ldr	r2, [pc, #356]	; (800119c <MX_GPIO_Init+0x218>)
 8001038:	f043 0308 	orr.w	r3, r3, #8
 800103c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001040:	4b56      	ldr	r3, [pc, #344]	; (800119c <MX_GPIO_Init+0x218>)
 8001042:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001046:	f003 0308 	and.w	r3, r3, #8
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800104e:	4b53      	ldr	r3, [pc, #332]	; (800119c <MX_GPIO_Init+0x218>)
 8001050:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001054:	4a51      	ldr	r2, [pc, #324]	; (800119c <MX_GPIO_Init+0x218>)
 8001056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800105a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800105e:	4b4f      	ldr	r3, [pc, #316]	; (800119c <MX_GPIO_Init+0x218>)
 8001060:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800106c:	4b4b      	ldr	r3, [pc, #300]	; (800119c <MX_GPIO_Init+0x218>)
 800106e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001072:	4a4a      	ldr	r2, [pc, #296]	; (800119c <MX_GPIO_Init+0x218>)
 8001074:	f043 0310 	orr.w	r3, r3, #16
 8001078:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800107c:	4b47      	ldr	r3, [pc, #284]	; (800119c <MX_GPIO_Init+0x218>)
 800107e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001082:	f003 0310 	and.w	r3, r3, #16
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001090:	4843      	ldr	r0, [pc, #268]	; (80011a0 <MX_GPIO_Init+0x21c>)
 8001092:	f002 fded 	bl	8003c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800109c:	4841      	ldr	r0, [pc, #260]	; (80011a4 <MX_GPIO_Init+0x220>)
 800109e:	f002 fde7 	bl	8003c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2102      	movs	r1, #2
 80010a6:	4840      	ldr	r0, [pc, #256]	; (80011a8 <MX_GPIO_Init+0x224>)
 80010a8:	f002 fde2 	bl	8003c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b2:	2300      	movs	r3, #0
 80010b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010be:	4619      	mov	r1, r3
 80010c0:	483a      	ldr	r0, [pc, #232]	; (80011ac <MX_GPIO_Init+0x228>)
 80010c2:	f002 fc25 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80010c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010dc:	4619      	mov	r1, r3
 80010de:	4830      	ldr	r0, [pc, #192]	; (80011a0 <MX_GPIO_Init+0x21c>)
 80010e0:	f002 fc16 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80010e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ea:	2301      	movs	r3, #1
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80010f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fa:	4619      	mov	r1, r3
 80010fc:	4829      	ldr	r0, [pc, #164]	; (80011a4 <MX_GPIO_Init+0x220>)
 80010fe:	f002 fc07 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001102:	2380      	movs	r3, #128	; 0x80
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001106:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001114:	4619      	mov	r1, r3
 8001116:	4826      	ldr	r0, [pc, #152]	; (80011b0 <MX_GPIO_Init+0x22c>)
 8001118:	f002 fbfa 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800111c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001122:	2300      	movs	r3, #0
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800112a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112e:	4619      	mov	r1, r3
 8001130:	4820      	ldr	r0, [pc, #128]	; (80011b4 <MX_GPIO_Init+0x230>)
 8001132:	f002 fbed 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001148:	230a      	movs	r3, #10
 800114a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800114c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001150:	4619      	mov	r1, r3
 8001152:	4818      	ldr	r0, [pc, #96]	; (80011b4 <MX_GPIO_Init+0x230>)
 8001154:	f002 fbdc 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001158:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116e:	4619      	mov	r1, r3
 8001170:	4810      	ldr	r0, [pc, #64]	; (80011b4 <MX_GPIO_Init+0x230>)
 8001172:	f002 fbcd 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001176:	2302      	movs	r3, #2
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117a:	2301      	movs	r3, #1
 800117c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118a:	4619      	mov	r1, r3
 800118c:	4806      	ldr	r0, [pc, #24]	; (80011a8 <MX_GPIO_Init+0x224>)
 800118e:	f002 fbbf 	bl	8003910 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001192:	bf00      	nop
 8001194:	3738      	adds	r7, #56	; 0x38
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	58024400 	.word	0x58024400
 80011a0:	58021400 	.word	0x58021400
 80011a4:	58020400 	.word	0x58020400
 80011a8:	58021000 	.word	0x58021000
 80011ac:	58020800 	.word	0x58020800
 80011b0:	58021800 	.word	0x58021800
 80011b4:	58020000 	.word	0x58020000

080011b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011bc:	b672      	cpsid	i
}
 80011be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <Error_Handler+0x8>
	...

080011c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <HAL_MspInit+0x30>)
 80011cc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80011d0:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <HAL_MspInit+0x30>)
 80011d2:	f043 0302 	orr.w	r3, r3, #2
 80011d6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_MspInit+0x30>)
 80011dc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	58024400 	.word	0x58024400

080011f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b0ba      	sub	sp, #232	; 0xe8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	22c0      	movs	r2, #192	; 0xc0
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f009 fbdd 	bl	800a9d8 <memset>
  if(hadc->Instance==ADC1)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a2b      	ldr	r2, [pc, #172]	; (80012d0 <HAL_ADC_MspInit+0xd8>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d14f      	bne.n	80012c8 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001228:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800122c:	f04f 0300 	mov.w	r3, #0
 8001230:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001234:	2301      	movs	r3, #1
 8001236:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8001238:	2310      	movs	r3, #16
 800123a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 800123c:	2303      	movs	r3, #3
 800123e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001240:	2302      	movs	r3, #2
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001244:	2302      	movs	r3, #2
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001248:	23c0      	movs	r3, #192	; 0xc0
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800124c:	2300      	movs	r3, #0
 800124e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001254:	2300      	movs	r3, #0
 8001256:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800125a:	f107 0310 	add.w	r3, r7, #16
 800125e:	4618      	mov	r0, r3
 8001260:	f003 fd38 	bl	8004cd4 <HAL_RCCEx_PeriphCLKConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 800126a:	f7ff ffa5 	bl	80011b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800126e:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <HAL_ADC_MspInit+0xdc>)
 8001270:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001274:	4a17      	ldr	r2, [pc, #92]	; (80012d4 <HAL_ADC_MspInit+0xdc>)
 8001276:	f043 0320 	orr.w	r3, r3, #32
 800127a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <HAL_ADC_MspInit+0xdc>)
 8001280:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001284:	f003 0320 	and.w	r3, r3, #32
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <HAL_ADC_MspInit+0xdc>)
 800128e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001292:	4a10      	ldr	r2, [pc, #64]	; (80012d4 <HAL_ADC_MspInit+0xdc>)
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800129c:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <HAL_ADC_MspInit+0xdc>)
 800129e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = THERMOCOUPLE_Pin;
 80012aa:	2302      	movs	r3, #2
 80012ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b0:	2303      	movs	r3, #3
 80012b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(THERMOCOUPLE_GPIO_Port, &GPIO_InitStruct);
 80012bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012c0:	4619      	mov	r1, r3
 80012c2:	4805      	ldr	r0, [pc, #20]	; (80012d8 <HAL_ADC_MspInit+0xe0>)
 80012c4:	f002 fb24 	bl	8003910 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012c8:	bf00      	nop
 80012ca:	37e8      	adds	r7, #232	; 0xe8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40022000 	.word	0x40022000
 80012d4:	58024400 	.word	0x58024400
 80012d8:	58020400 	.word	0x58020400

080012dc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08a      	sub	sp, #40	; 0x28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012fc:	d135      	bne.n	800136a <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <HAL_TIM_Encoder_MspInit+0x98>)
 8001300:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001304:	4a1b      	ldr	r2, [pc, #108]	; (8001374 <HAL_TIM_Encoder_MspInit+0x98>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800130e:	4b19      	ldr	r3, [pc, #100]	; (8001374 <HAL_TIM_Encoder_MspInit+0x98>)
 8001310:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131c:	4b15      	ldr	r3, [pc, #84]	; (8001374 <HAL_TIM_Encoder_MspInit+0x98>)
 800131e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001322:	4a14      	ldr	r2, [pc, #80]	; (8001374 <HAL_TIM_Encoder_MspInit+0x98>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <HAL_TIM_Encoder_MspInit+0x98>)
 800132e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PLUNGE_ENC_A_Pin|PLUNGE_ENC_B_Pin;
 800133a:	2303      	movs	r3, #3
 800133c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800134a:	2301      	movs	r3, #1
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4619      	mov	r1, r3
 8001354:	4808      	ldr	r0, [pc, #32]	; (8001378 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001356:	f002 fadb 	bl	8003910 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2100      	movs	r1, #0
 800135e:	201c      	movs	r0, #28
 8001360:	f001 fd3d 	bl	8002dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001364:	201c      	movs	r0, #28
 8001366:	f001 fd54 	bl	8002e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800136a:	bf00      	nop
 800136c:	3728      	adds	r7, #40	; 0x28
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	58024400 	.word	0x58024400
 8001378:	58020000 	.word	0x58020000

0800137c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <HAL_TIM_Base_MspInit+0x48>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d116      	bne.n	80013bc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <HAL_TIM_Base_MspInit+0x4c>)
 8001390:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001394:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <HAL_TIM_Base_MspInit+0x4c>)
 8001396:	f043 0308 	orr.w	r3, r3, #8
 800139a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <HAL_TIM_Base_MspInit+0x4c>)
 80013a0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2100      	movs	r1, #0
 80013b0:	2032      	movs	r0, #50	; 0x32
 80013b2:	f001 fd14 	bl	8002dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80013b6:	2032      	movs	r0, #50	; 0x32
 80013b8:	f001 fd2b 	bl	8002e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80013bc:	bf00      	nop
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40000c00 	.word	0x40000c00
 80013c8:	58024400 	.word	0x58024400

080013cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b0ba      	sub	sp, #232	; 0xe8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013e4:	f107 0310 	add.w	r3, r7, #16
 80013e8:	22c0      	movs	r2, #192	; 0xc0
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f009 faf3 	bl	800a9d8 <memset>
  if(huart->Instance==USART3)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a2b      	ldr	r2, [pc, #172]	; (80014a4 <HAL_UART_MspInit+0xd8>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d14e      	bne.n	800149a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013fc:	f04f 0202 	mov.w	r2, #2
 8001400:	f04f 0300 	mov.w	r3, #0
 8001404:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001408:	2300      	movs	r3, #0
 800140a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800140e:	f107 0310 	add.w	r3, r7, #16
 8001412:	4618      	mov	r0, r3
 8001414:	f003 fc5e 	bl	8004cd4 <HAL_RCCEx_PeriphCLKConfig>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800141e:	f7ff fecb 	bl	80011b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001422:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <HAL_UART_MspInit+0xdc>)
 8001424:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001428:	4a1f      	ldr	r2, [pc, #124]	; (80014a8 <HAL_UART_MspInit+0xdc>)
 800142a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800142e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001432:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <HAL_UART_MspInit+0xdc>)
 8001434:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001438:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001440:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <HAL_UART_MspInit+0xdc>)
 8001442:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001446:	4a18      	ldr	r2, [pc, #96]	; (80014a8 <HAL_UART_MspInit+0xdc>)
 8001448:	f043 0308 	orr.w	r3, r3, #8
 800144c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001450:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <HAL_UART_MspInit+0xdc>)
 8001452:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800145e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001462:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001478:	2307      	movs	r3, #7
 800147a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800147e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001482:	4619      	mov	r1, r3
 8001484:	4809      	ldr	r0, [pc, #36]	; (80014ac <HAL_UART_MspInit+0xe0>)
 8001486:	f002 fa43 	bl	8003910 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	2027      	movs	r0, #39	; 0x27
 8001490:	f001 fca5 	bl	8002dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001494:	2027      	movs	r0, #39	; 0x27
 8001496:	f001 fcbc 	bl	8002e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800149a:	bf00      	nop
 800149c:	37e8      	adds	r7, #232	; 0xe8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40004800 	.word	0x40004800
 80014a8:	58024400 	.word	0x58024400
 80014ac:	58020c00 	.word	0x58020c00

080014b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <NMI_Handler+0x4>

080014b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <HardFault_Handler+0x4>

080014bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <MemManage_Handler+0x4>

080014c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <UsageFault_Handler+0x4>

080014ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fc:	f000 f9a6 	bl	800184c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}

08001504 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <TIM2_IRQHandler+0x10>)
 800150a:	f006 f8eb 	bl	80076e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	240000e8 	.word	0x240000e8

08001518 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800151c:	4802      	ldr	r0, [pc, #8]	; (8001528 <USART3_IRQHandler+0x10>)
 800151e:	f006 fe39 	bl	8008194 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	24000180 	.word	0x24000180

0800152c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  /* always do the logging portion */
  /* TODO: Convert this datalogging to DMA to speed it up. actually a priority I think it would have big performance gains*/
  log_position += 1; // increment number of data points taken
 8001530:	4b19      	ldr	r3, [pc, #100]	; (8001598 <TIM5_IRQHandler+0x6c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	3301      	adds	r3, #1
 8001536:	4a18      	ldr	r2, [pc, #96]	; (8001598 <TIM5_IRQHandler+0x6c>)
 8001538:	6013      	str	r3, [r2, #0]
  current_pos = TIM2->CNT;
 800153a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800153e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001540:	4a16      	ldr	r2, [pc, #88]	; (800159c <TIM5_IRQHandler+0x70>)
 8001542:	6013      	str	r3, [r2, #0]
  HAL_ADC_Start(&hadc1);
 8001544:	4816      	ldr	r0, [pc, #88]	; (80015a0 <TIM5_IRQHandler+0x74>)
 8001546:	f000 fcdd 	bl	8001f04 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800154a:	f04f 31ff 	mov.w	r1, #4294967295
 800154e:	4814      	ldr	r0, [pc, #80]	; (80015a0 <TIM5_IRQHandler+0x74>)
 8001550:	f000 fd92 	bl	8002078 <HAL_ADC_PollForConversion>
  current_temp = HAL_ADC_GetValue(&hadc1);
 8001554:	4812      	ldr	r0, [pc, #72]	; (80015a0 <TIM5_IRQHandler+0x74>)
 8001556:	f000 fe67 	bl	8002228 <HAL_ADC_GetValue>
 800155a:	4603      	mov	r3, r0
 800155c:	4a11      	ldr	r2, [pc, #68]	; (80015a4 <TIM5_IRQHandler+0x78>)
 800155e:	6013      	str	r3, [r2, #0]
  posLog[log_position] = current_pos; // update log of positions
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <TIM5_IRQHandler+0x70>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <TIM5_IRQHandler+0x6c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	b291      	uxth	r1, r2
 800156a:	4a0f      	ldr	r2, [pc, #60]	; (80015a8 <TIM5_IRQHandler+0x7c>)
 800156c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  thermoLog[log_position] = current_temp; 
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <TIM5_IRQHandler+0x78>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <TIM5_IRQHandler+0x6c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	b291      	uxth	r1, r2
 800157a:	4a0c      	ldr	r2, [pc, #48]	; (80015ac <TIM5_IRQHandler+0x80>)
 800157c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

  TIM5->SR &= ~TIM_SR_UIF; // Clear the TIM5 update flag
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <TIM5_IRQHandler+0x84>)
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <TIM5_IRQHandler+0x84>)
 8001586:	f023 0301 	bic.w	r3, r3, #1
 800158a:	6113      	str	r3, [r2, #16]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800158c:	4809      	ldr	r0, [pc, #36]	; (80015b4 <TIM5_IRQHandler+0x88>)
 800158e:	f006 f8a9 	bl	80076e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	2401d6d4 	.word	0x2401d6d4
 800159c:	2401d744 	.word	0x2401d744
 80015a0:	24000084 	.word	0x24000084
 80015a4:	2401d748 	.word	0x2401d748
 80015a8:	24000214 	.word	0x24000214
 80015ac:	2400ec74 	.word	0x2400ec74
 80015b0:	40000c00 	.word	0x40000c00
 80015b4:	24000134 	.word	0x24000134

080015b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c0:	4a14      	ldr	r2, [pc, #80]	; (8001614 <_sbrk+0x5c>)
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <_sbrk+0x60>)
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <_sbrk+0x64>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d102      	bne.n	80015da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <_sbrk+0x64>)
 80015d6:	4a12      	ldr	r2, [pc, #72]	; (8001620 <_sbrk+0x68>)
 80015d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <_sbrk+0x64>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d207      	bcs.n	80015f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e8:	f009 f9fe 	bl	800a9e8 <__errno>
 80015ec:	4603      	mov	r3, r0
 80015ee:	220c      	movs	r2, #12
 80015f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295
 80015f6:	e009      	b.n	800160c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <_sbrk+0x64>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015fe:	4b07      	ldr	r3, [pc, #28]	; (800161c <_sbrk+0x64>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	4a05      	ldr	r2, [pc, #20]	; (800161c <_sbrk+0x64>)
 8001608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800160a:	68fb      	ldr	r3, [r7, #12]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	24100000 	.word	0x24100000
 8001618:	00000400 	.word	0x00000400
 800161c:	2401d74c 	.word	0x2401d74c
 8001620:	2401d8a0 	.word	0x2401d8a0

08001624 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001628:	4b32      	ldr	r3, [pc, #200]	; (80016f4 <SystemInit+0xd0>)
 800162a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800162e:	4a31      	ldr	r2, [pc, #196]	; (80016f4 <SystemInit+0xd0>)
 8001630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001634:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001638:	4b2f      	ldr	r3, [pc, #188]	; (80016f8 <SystemInit+0xd4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 030f 	and.w	r3, r3, #15
 8001640:	2b02      	cmp	r3, #2
 8001642:	d807      	bhi.n	8001654 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001644:	4b2c      	ldr	r3, [pc, #176]	; (80016f8 <SystemInit+0xd4>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f023 030f 	bic.w	r3, r3, #15
 800164c:	4a2a      	ldr	r2, [pc, #168]	; (80016f8 <SystemInit+0xd4>)
 800164e:	f043 0303 	orr.w	r3, r3, #3
 8001652:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001654:	4b29      	ldr	r3, [pc, #164]	; (80016fc <SystemInit+0xd8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a28      	ldr	r2, [pc, #160]	; (80016fc <SystemInit+0xd8>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001660:	4b26      	ldr	r3, [pc, #152]	; (80016fc <SystemInit+0xd8>)
 8001662:	2200      	movs	r2, #0
 8001664:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001666:	4b25      	ldr	r3, [pc, #148]	; (80016fc <SystemInit+0xd8>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	4924      	ldr	r1, [pc, #144]	; (80016fc <SystemInit+0xd8>)
 800166c:	4b24      	ldr	r3, [pc, #144]	; (8001700 <SystemInit+0xdc>)
 800166e:	4013      	ands	r3, r2
 8001670:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001672:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <SystemInit+0xd4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 030c 	and.w	r3, r3, #12
 800167a:	2b00      	cmp	r3, #0
 800167c:	d007      	beq.n	800168e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800167e:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <SystemInit+0xd4>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 030f 	bic.w	r3, r3, #15
 8001686:	4a1c      	ldr	r2, [pc, #112]	; (80016f8 <SystemInit+0xd4>)
 8001688:	f043 0303 	orr.w	r3, r3, #3
 800168c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800168e:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <SystemInit+0xd8>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001694:	4b19      	ldr	r3, [pc, #100]	; (80016fc <SystemInit+0xd8>)
 8001696:	2200      	movs	r2, #0
 8001698:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800169a:	4b18      	ldr	r3, [pc, #96]	; (80016fc <SystemInit+0xd8>)
 800169c:	2200      	movs	r2, #0
 800169e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80016a0:	4b16      	ldr	r3, [pc, #88]	; (80016fc <SystemInit+0xd8>)
 80016a2:	4a18      	ldr	r2, [pc, #96]	; (8001704 <SystemInit+0xe0>)
 80016a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <SystemInit+0xd8>)
 80016a8:	4a17      	ldr	r2, [pc, #92]	; (8001708 <SystemInit+0xe4>)
 80016aa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <SystemInit+0xd8>)
 80016ae:	4a17      	ldr	r2, [pc, #92]	; (800170c <SystemInit+0xe8>)
 80016b0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80016b2:	4b12      	ldr	r3, [pc, #72]	; (80016fc <SystemInit+0xd8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80016b8:	4b10      	ldr	r3, [pc, #64]	; (80016fc <SystemInit+0xd8>)
 80016ba:	4a14      	ldr	r2, [pc, #80]	; (800170c <SystemInit+0xe8>)
 80016bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80016be:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <SystemInit+0xd8>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80016c4:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <SystemInit+0xd8>)
 80016c6:	4a11      	ldr	r2, [pc, #68]	; (800170c <SystemInit+0xe8>)
 80016c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <SystemInit+0xd8>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016d0:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <SystemInit+0xd8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a09      	ldr	r2, [pc, #36]	; (80016fc <SystemInit+0xd8>)
 80016d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80016dc:	4b07      	ldr	r3, [pc, #28]	; (80016fc <SystemInit+0xd8>)
 80016de:	2200      	movs	r2, #0
 80016e0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <SystemInit+0xec>)
 80016e4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80016e8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000ed00 	.word	0xe000ed00
 80016f8:	52002000 	.word	0x52002000
 80016fc:	58024400 	.word	0x58024400
 8001700:	eaf6ed7f 	.word	0xeaf6ed7f
 8001704:	02020200 	.word	0x02020200
 8001708:	01ff0000 	.word	0x01ff0000
 800170c:	01010280 	.word	0x01010280
 8001710:	52004000 	.word	0x52004000

08001714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800174c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001718:	f7ff ff84 	bl	8001624 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800171c:	480c      	ldr	r0, [pc, #48]	; (8001750 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800171e:	490d      	ldr	r1, [pc, #52]	; (8001754 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001720:	4a0d      	ldr	r2, [pc, #52]	; (8001758 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001724:	e002      	b.n	800172c <LoopCopyDataInit>

08001726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172a:	3304      	adds	r3, #4

0800172c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 800172c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001730:	d3f9      	bcc.n	8001726 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001732:	4a0a      	ldr	r2, [pc, #40]	; (800175c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001734:	4c0a      	ldr	r4, [pc, #40]	; (8001760 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001738:	e001      	b.n	800173e <LoopFillZerobss>

0800173a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800173c:	3204      	adds	r2, #4

0800173e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001740:	d3fb      	bcc.n	800173a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001742:	f009 f957 	bl	800a9f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001746:	f7ff f8e3 	bl	8000910 <main>
  bx  lr
 800174a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800174c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001750:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001754:	24000068 	.word	0x24000068
  ldr r2, =_sidata
 8001758:	0800b378 	.word	0x0800b378
  ldr r2, =_sbss
 800175c:	24000068 	.word	0x24000068
  ldr r4, =_ebss
 8001760:	2401d89c 	.word	0x2401d89c

08001764 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC_IRQHandler>
	...

08001768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800176e:	2003      	movs	r0, #3
 8001770:	f001 fb2a 	bl	8002dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001774:	f003 f8d8 	bl	8004928 <HAL_RCC_GetSysClockFreq>
 8001778:	4602      	mov	r2, r0
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <HAL_Init+0x68>)
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	0a1b      	lsrs	r3, r3, #8
 8001780:	f003 030f 	and.w	r3, r3, #15
 8001784:	4913      	ldr	r1, [pc, #76]	; (80017d4 <HAL_Init+0x6c>)
 8001786:	5ccb      	ldrb	r3, [r1, r3]
 8001788:	f003 031f 	and.w	r3, r3, #31
 800178c:	fa22 f303 	lsr.w	r3, r2, r3
 8001790:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001792:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <HAL_Init+0x68>)
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <HAL_Init+0x6c>)
 800179c:	5cd3      	ldrb	r3, [r2, r3]
 800179e:	f003 031f 	and.w	r3, r3, #31
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	fa22 f303 	lsr.w	r3, r2, r3
 80017a8:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <HAL_Init+0x70>)
 80017aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017ac:	4a0b      	ldr	r2, [pc, #44]	; (80017dc <HAL_Init+0x74>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017b2:	2000      	movs	r0, #0
 80017b4:	f000 f814 	bl	80017e0 <HAL_InitTick>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e002      	b.n	80017c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017c2:	f7ff fcff 	bl	80011c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	58024400 	.word	0x58024400
 80017d4:	0800b2fc 	.word	0x0800b2fc
 80017d8:	2400000c 	.word	0x2400000c
 80017dc:	24000008 	.word	0x24000008

080017e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017e8:	4b15      	ldr	r3, [pc, #84]	; (8001840 <HAL_InitTick+0x60>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e021      	b.n	8001838 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017f4:	4b13      	ldr	r3, [pc, #76]	; (8001844 <HAL_InitTick+0x64>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <HAL_InitTick+0x60>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	4619      	mov	r1, r3
 80017fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001802:	fbb3 f3f1 	udiv	r3, r3, r1
 8001806:	fbb2 f3f3 	udiv	r3, r2, r3
 800180a:	4618      	mov	r0, r3
 800180c:	f001 fb0f 	bl	8002e2e <HAL_SYSTICK_Config>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e00e      	b.n	8001838 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b0f      	cmp	r3, #15
 800181e:	d80a      	bhi.n	8001836 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001820:	2200      	movs	r2, #0
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	f04f 30ff 	mov.w	r0, #4294967295
 8001828:	f001 fad9 	bl	8002dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800182c:	4a06      	ldr	r2, [pc, #24]	; (8001848 <HAL_InitTick+0x68>)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001832:	2300      	movs	r3, #0
 8001834:	e000      	b.n	8001838 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	24000014 	.word	0x24000014
 8001844:	24000008 	.word	0x24000008
 8001848:	24000010 	.word	0x24000010

0800184c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_IncTick+0x20>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_IncTick+0x24>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4413      	add	r3, r2
 800185c:	4a04      	ldr	r2, [pc, #16]	; (8001870 <HAL_IncTick+0x24>)
 800185e:	6013      	str	r3, [r2, #0]
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	24000014 	.word	0x24000014
 8001870:	2401d750 	.word	0x2401d750

08001874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return uwTick;
 8001878:	4b03      	ldr	r3, [pc, #12]	; (8001888 <HAL_GetTick+0x14>)
 800187a:	681b      	ldr	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	2401d750 	.word	0x2401d750

0800188c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	431a      	orrs	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	609a      	str	r2, [r3, #8]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	609a      	str	r2, [r3, #8]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b087      	sub	sp, #28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
 8001900:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	3360      	adds	r3, #96	; 0x60
 8001906:	461a      	mov	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	430b      	orrs	r3, r1
 8001922:	431a      	orrs	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001928:	bf00      	nop
 800192a:	371c      	adds	r7, #28
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	f003 031f 	and.w	r3, r3, #31
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	fa01 f303 	lsl.w	r3, r1, r3
 8001954:	431a      	orrs	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	611a      	str	r2, [r3, #16]
}
 800195a:	bf00      	nop
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001966:	b480      	push	{r7}
 8001968:	b087      	sub	sp, #28
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	3360      	adds	r3, #96	; 0x60
 8001976:	461a      	mov	r2, r3
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	431a      	orrs	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	601a      	str	r2, [r3, #0]
  }
}
 8001990:	bf00      	nop
 8001992:	371c      	adds	r7, #28
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80019b0:	2301      	movs	r3, #1
 80019b2:	e000      	b.n	80019b6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b087      	sub	sp, #28
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	60f8      	str	r0, [r7, #12]
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3330      	adds	r3, #48	; 0x30
 80019d2:	461a      	mov	r2, r3
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	0a1b      	lsrs	r3, r3, #8
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	f003 030c 	and.w	r3, r3, #12
 80019de:	4413      	add	r3, r2
 80019e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	f003 031f 	and.w	r3, r3, #31
 80019ec:	211f      	movs	r1, #31
 80019ee:	fa01 f303 	lsl.w	r3, r1, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	401a      	ands	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	0e9b      	lsrs	r3, r3, #26
 80019fa:	f003 011f 	and.w	r1, r3, #31
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	f003 031f 	and.w	r3, r3, #31
 8001a04:	fa01 f303 	lsl.w	r3, r1, r3
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a0e:	bf00      	nop
 8001a10:	371c      	adds	r7, #28
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b087      	sub	sp, #28
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	60f8      	str	r0, [r7, #12]
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	3314      	adds	r3, #20
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	0e5b      	lsrs	r3, r3, #25
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	4413      	add	r3, r2
 8001a38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	0d1b      	lsrs	r3, r3, #20
 8001a42:	f003 031f 	and.w	r3, r3, #31
 8001a46:	2107      	movs	r1, #7
 8001a48:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	401a      	ands	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	0d1b      	lsrs	r3, r3, #20
 8001a54:	f003 031f 	and.w	r3, r3, #31
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a64:	bf00      	nop
 8001a66:	371c      	adds	r7, #28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f003 0318 	and.w	r3, r3, #24
 8001a92:	4908      	ldr	r1, [pc, #32]	; (8001ab4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a94:	40d9      	lsrs	r1, r3
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	400b      	ands	r3, r1
 8001a9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001aa6:	bf00      	nop
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	000fffff 	.word	0x000fffff

08001ab8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 031f 	and.w	r3, r3, #31
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6093      	str	r3, [r2, #8]
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	5fffffc0 	.word	0x5fffffc0

08001b14 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b28:	d101      	bne.n	8001b2e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <LL_ADC_EnableInternalRegulator+0x24>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	6fffffc0 	.word	0x6fffffc0

08001b64 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b78:	d101      	bne.n	8001b7e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <LL_ADC_Enable+0x24>)
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	f043 0201 	orr.w	r2, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	7fffffc0 	.word	0x7fffffc0

08001bb4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d101      	bne.n	8001bcc <LL_ADC_IsEnabled+0x18>
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <LL_ADC_IsEnabled+0x1a>
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <LL_ADC_REG_StartConversion+0x24>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	f043 0204 	orr.w	r2, r3, #4
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	7fffffc0 	.word	0x7fffffc0

08001c04 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	d101      	bne.n	8001c1c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e000      	b.n	8001c1e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d101      	bne.n	8001c42 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c50:	b590      	push	{r4, r7, lr}
 8001c52:	b089      	sub	sp, #36	; 0x24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e138      	b.n	8001edc <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d109      	bne.n	8001c8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff fabd 	bl	80011f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff3f 	bl	8001b14 <LL_ADC_IsDeepPowerDownEnabled>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d004      	beq.n	8001ca6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff25 	bl	8001af0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ff5a 	bl	8001b64 <LL_ADC_IsInternalRegulatorEnabled>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d114      	bne.n	8001ce0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff ff3e 	bl	8001b3c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cc0:	4b88      	ldr	r3, [pc, #544]	; (8001ee4 <HAL_ADC_Init+0x294>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	099b      	lsrs	r3, r3, #6
 8001cc6:	4a88      	ldr	r2, [pc, #544]	; (8001ee8 <HAL_ADC_Init+0x298>)
 8001cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ccc:	099b      	lsrs	r3, r3, #6
 8001cce:	3301      	adds	r3, #1
 8001cd0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cd2:	e002      	b.n	8001cda <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1f9      	bne.n	8001cd4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff3d 	bl	8001b64 <LL_ADC_IsInternalRegulatorEnabled>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10d      	bne.n	8001d0c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf4:	f043 0210 	orr.w	r2, r3, #16
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d00:	f043 0201 	orr.w	r2, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff77 	bl	8001c04 <LL_ADC_REG_IsConversionOngoing>
 8001d16:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1c:	f003 0310 	and.w	r3, r3, #16
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f040 80d2 	bne.w	8001eca <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f040 80ce 	bne.w	8001eca <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d32:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d36:	f043 0202 	orr.w	r2, r3, #2
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff ff36 	bl	8001bb4 <LL_ADC_IsEnabled>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d110      	bne.n	8001d70 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d4e:	4867      	ldr	r0, [pc, #412]	; (8001eec <HAL_ADC_Init+0x29c>)
 8001d50:	f7ff ff30 	bl	8001bb4 <LL_ADC_IsEnabled>
 8001d54:	4604      	mov	r4, r0
 8001d56:	4866      	ldr	r0, [pc, #408]	; (8001ef0 <HAL_ADC_Init+0x2a0>)
 8001d58:	f7ff ff2c 	bl	8001bb4 <LL_ADC_IsEnabled>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	4323      	orrs	r3, r4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d105      	bne.n	8001d70 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4862      	ldr	r0, [pc, #392]	; (8001ef4 <HAL_ADC_Init+0x2a4>)
 8001d6c:	f7ff fd8e 	bl	800188c <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	7d5b      	ldrb	r3, [r3, #21]
 8001d74:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d7a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001d80:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	7f1b      	ldrb	r3, [r3, #28]
 8001d86:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	7f1b      	ldrb	r3, [r3, #28]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d106      	bne.n	8001da2 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	045b      	lsls	r3, r3, #17
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d009      	beq.n	8001dbe <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	4b4c      	ldr	r3, [pc, #304]	; (8001ef8 <HAL_ADC_Init+0x2a8>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6812      	ldr	r2, [r2, #0]
 8001dcc:	69b9      	ldr	r1, [r7, #24]
 8001dce:	430b      	orrs	r3, r1
 8001dd0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff ff14 	bl	8001c04 <LL_ADC_REG_IsConversionOngoing>
 8001ddc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff ff21 	bl	8001c2a <LL_ADC_INJ_IsConversionOngoing>
 8001de8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d14a      	bne.n	8001e86 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d147      	bne.n	8001e86 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	7d1b      	ldrb	r3, [r3, #20]
 8001dfa:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	4b3c      	ldr	r3, [pc, #240]	; (8001efc <HAL_ADC_Init+0x2ac>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	69b9      	ldr	r1, [r7, #24]
 8001e14:	430b      	orrs	r3, r1
 8001e16:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d11b      	bne.n	8001e5a <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	691a      	ldr	r2, [r3, #16]
 8001e2e:	4b34      	ldr	r3, [pc, #208]	; (8001f00 <HAL_ADC_Init+0x2b0>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e36:	3a01      	subs	r2, #1
 8001e38:	0411      	lsls	r1, r2, #16
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e3e:	4311      	orrs	r1, r2
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e44:	4311      	orrs	r1, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0201 	orr.w	r2, r2, #1
 8001e56:	611a      	str	r2, [r3, #16]
 8001e58:	e007      	b.n	8001e6a <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	691a      	ldr	r2, [r3, #16]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0201 	bic.w	r2, r2, #1
 8001e68:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 fd41 	bl	8002908 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e94:	f023 010f 	bic.w	r1, r3, #15
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	1e5a      	subs	r2, r3, #1
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ea6:	e007      	b.n	8001eb8 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 020f 	bic.w	r2, r2, #15
 8001eb6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ebc:	f023 0303 	bic.w	r3, r3, #3
 8001ec0:	f043 0201 	orr.w	r2, r3, #1
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	655a      	str	r2, [r3, #84]	; 0x54
 8001ec8:	e007      	b.n	8001eda <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ece:	f043 0210 	orr.w	r2, r3, #16
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001eda:	7ffb      	ldrb	r3, [r7, #31]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3724      	adds	r7, #36	; 0x24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd90      	pop	{r4, r7, pc}
 8001ee4:	24000008 	.word	0x24000008
 8001ee8:	053e2d63 	.word	0x053e2d63
 8001eec:	40022000 	.word	0x40022000
 8001ef0:	40022100 	.word	0x40022100
 8001ef4:	40022300 	.word	0x40022300
 8001ef8:	fff0c003 	.word	0xfff0c003
 8001efc:	ffffbffc 	.word	0xffffbffc
 8001f00:	fc00f81e 	.word	0xfc00f81e

08001f04 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f0c:	4856      	ldr	r0, [pc, #344]	; (8002068 <HAL_ADC_Start+0x164>)
 8001f0e:	f7ff fdd3 	bl	8001ab8 <LL_ADC_GetMultimode>
 8001f12:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff fe73 	bl	8001c04 <LL_ADC_REG_IsConversionOngoing>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f040 809a 	bne.w	800205a <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <HAL_ADC_Start+0x30>
 8001f30:	2302      	movs	r3, #2
 8001f32:	e095      	b.n	8002060 <HAL_ADC_Start+0x15c>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 fc67 	bl	8002810 <ADC_Enable>
 8001f42:	4603      	mov	r3, r0
 8001f44:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f46:	7dfb      	ldrb	r3, [r7, #23]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f040 8081 	bne.w	8002050 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f52:	4b46      	ldr	r3, [pc, #280]	; (800206c <HAL_ADC_Start+0x168>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a43      	ldr	r2, [pc, #268]	; (8002070 <HAL_ADC_Start+0x16c>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d002      	beq.n	8001f6e <HAL_ADC_Start+0x6a>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	e000      	b.n	8001f70 <HAL_ADC_Start+0x6c>
 8001f6e:	4b41      	ldr	r3, [pc, #260]	; (8002074 <HAL_ADC_Start+0x170>)
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6812      	ldr	r2, [r2, #0]
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d002      	beq.n	8001f7e <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d105      	bne.n	8001f8a <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f82:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f96:	d106      	bne.n	8001fa6 <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9c:	f023 0206 	bic.w	r2, r3, #6
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	659a      	str	r2, [r3, #88]	; 0x58
 8001fa4:	e002      	b.n	8001fac <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	221c      	movs	r2, #28
 8001fb2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a2b      	ldr	r2, [pc, #172]	; (8002070 <HAL_ADC_Start+0x16c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d002      	beq.n	8001fcc <HAL_ADC_Start+0xc8>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	e000      	b.n	8001fce <HAL_ADC_Start+0xca>
 8001fcc:	4b29      	ldr	r3, [pc, #164]	; (8002074 <HAL_ADC_Start+0x170>)
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d008      	beq.n	8001fe8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	2b05      	cmp	r3, #5
 8001fe0:	d002      	beq.n	8001fe8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	2b09      	cmp	r3, #9
 8001fe6:	d114      	bne.n	8002012 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d007      	beq.n	8002006 <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ffe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff fde6 	bl	8001bdc <LL_ADC_REG_StartConversion>
 8002010:	e025      	b.n	800205e <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002016:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a13      	ldr	r2, [pc, #76]	; (8002070 <HAL_ADC_Start+0x16c>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d002      	beq.n	800202e <HAL_ADC_Start+0x12a>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	e000      	b.n	8002030 <HAL_ADC_Start+0x12c>
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <HAL_ADC_Start+0x170>)
 8002030:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00f      	beq.n	800205e <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002042:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002046:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	655a      	str	r2, [r3, #84]	; 0x54
 800204e:	e006      	b.n	800205e <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002058:	e001      	b.n	800205e <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800205a:	2302      	movs	r3, #2
 800205c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800205e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40022300 	.word	0x40022300
 800206c:	fffff0fe 	.word	0xfffff0fe
 8002070:	40022100 	.word	0x40022100
 8002074:	40022000 	.word	0x40022000

08002078 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b088      	sub	sp, #32
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002082:	4866      	ldr	r0, [pc, #408]	; (800221c <HAL_ADC_PollForConversion+0x1a4>)
 8002084:	f7ff fd18 	bl	8001ab8 <LL_ADC_GetMultimode>
 8002088:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	2b08      	cmp	r3, #8
 8002090:	d102      	bne.n	8002098 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002092:	2308      	movs	r3, #8
 8002094:	61fb      	str	r3, [r7, #28]
 8002096:	e02a      	b.n	80020ee <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d005      	beq.n	80020aa <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	2b05      	cmp	r3, #5
 80020a2:	d002      	beq.n	80020aa <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	2b09      	cmp	r3, #9
 80020a8:	d111      	bne.n	80020ce <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d007      	beq.n	80020c8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020bc:	f043 0220 	orr.w	r2, r3, #32
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0a4      	b.n	8002212 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80020c8:	2304      	movs	r3, #4
 80020ca:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80020cc:	e00f      	b.n	80020ee <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80020ce:	4853      	ldr	r0, [pc, #332]	; (800221c <HAL_ADC_PollForConversion+0x1a4>)
 80020d0:	f7ff fd00 	bl	8001ad4 <LL_ADC_GetMultiDMATransfer>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d007      	beq.n	80020ea <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020de:	f043 0220 	orr.w	r2, r3, #32
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e093      	b.n	8002212 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80020ea:	2304      	movs	r3, #4
 80020ec:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80020ee:	f7ff fbc1 	bl	8001874 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80020f4:	e021      	b.n	800213a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fc:	d01d      	beq.n	800213a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80020fe:	f7ff fbb9 	bl	8001874 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d302      	bcc.n	8002114 <HAL_ADC_PollForConversion+0x9c>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d112      	bne.n	800213a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	4013      	ands	r3, r2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10b      	bne.n	800213a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002126:	f043 0204 	orr.w	r2, r3, #4
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e06b      	b.n	8002212 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	4013      	ands	r3, r2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0d6      	beq.n	80020f6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff fc1f 	bl	800199c <LL_ADC_REG_IsTriggerSourceSWStart>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d01c      	beq.n	800219e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	7d5b      	ldrb	r3, [r3, #21]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d118      	bne.n	800219e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b08      	cmp	r3, #8
 8002178:	d111      	bne.n	800219e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d105      	bne.n	800219e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002196:	f043 0201 	orr.w	r2, r3, #1
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a1f      	ldr	r2, [pc, #124]	; (8002220 <HAL_ADC_PollForConversion+0x1a8>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d002      	beq.n	80021ae <HAL_ADC_PollForConversion+0x136>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	e000      	b.n	80021b0 <HAL_ADC_PollForConversion+0x138>
 80021ae:	4b1d      	ldr	r3, [pc, #116]	; (8002224 <HAL_ADC_PollForConversion+0x1ac>)
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d008      	beq.n	80021ca <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d005      	beq.n	80021ca <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	2b05      	cmp	r3, #5
 80021c2:	d002      	beq.n	80021ca <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	2b09      	cmp	r3, #9
 80021c8:	d104      	bne.n	80021d4 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	61bb      	str	r3, [r7, #24]
 80021d2:	e00c      	b.n	80021ee <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a11      	ldr	r2, [pc, #68]	; (8002220 <HAL_ADC_PollForConversion+0x1a8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d002      	beq.n	80021e4 <HAL_ADC_PollForConversion+0x16c>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	e000      	b.n	80021e6 <HAL_ADC_PollForConversion+0x16e>
 80021e4:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <HAL_ADC_PollForConversion+0x1ac>)
 80021e6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d104      	bne.n	80021fe <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2208      	movs	r2, #8
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	e008      	b.n	8002210 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d103      	bne.n	8002210 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	220c      	movs	r2, #12
 800220e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3720      	adds	r7, #32
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40022300 	.word	0x40022300
 8002220:	40022100 	.word	0x40022100
 8002224:	40022000 	.word	0x40022000

08002228 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
	...

08002244 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002244:	b590      	push	{r4, r7, lr}
 8002246:	b0a1      	sub	sp, #132	; 0x84
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	4a9a      	ldr	r2, [pc, #616]	; (80024c8 <HAL_ADC_ConfigChannel+0x284>)
 800225e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_ADC_ConfigChannel+0x2a>
 800226a:	2302      	movs	r3, #2
 800226c:	e2bc      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x5a4>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff fcc2 	bl	8001c04 <LL_ADC_REG_IsConversionOngoing>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	f040 82a1 	bne.w	80027ca <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002290:	2b00      	cmp	r3, #0
 8002292:	d108      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x62>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	0e9b      	lsrs	r3, r3, #26
 800229a:	f003 031f 	and.w	r3, r3, #31
 800229e:	2201      	movs	r2, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	e016      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x90>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022ae:	fa93 f3a3 	rbit	r3, r3
 80022b2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022b6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80022be:	2320      	movs	r3, #32
 80022c0:	e003      	b.n	80022ca <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80022c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022c4:	fab3 f383 	clz	r3, r3
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	f003 031f 	and.w	r3, r3, #31
 80022ce:	2201      	movs	r2, #1
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6812      	ldr	r2, [r2, #0]
 80022d8:	69d1      	ldr	r1, [r2, #28]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	430b      	orrs	r3, r1
 80022e0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6818      	ldr	r0, [r3, #0]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	6859      	ldr	r1, [r3, #4]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	f7ff fb67 	bl	80019c2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fc83 	bl	8001c04 <LL_ADC_REG_IsConversionOngoing>
 80022fe:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fc90 	bl	8001c2a <LL_ADC_INJ_IsConversionOngoing>
 800230a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800230c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800230e:	2b00      	cmp	r3, #0
 8002310:	f040 80a0 	bne.w	8002454 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002314:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002316:	2b00      	cmp	r3, #0
 8002318:	f040 809c 	bne.w	8002454 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6818      	ldr	r0, [r3, #0]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	6819      	ldr	r1, [r3, #0]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	461a      	mov	r2, r3
 800232a:	f7ff fb76 	bl	8001a1a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	f003 0310 	and.w	r3, r3, #16
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10b      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x110>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	695a      	ldr	r2, [r3, #20]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	089b      	lsrs	r3, r3, #2
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	e00a      	b.n	800236a <HAL_ADC_ConfigChannel+0x126>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	695a      	ldr	r2, [r3, #20]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	089b      	lsrs	r3, r3, #2
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	2b04      	cmp	r3, #4
 8002372:	d027      	beq.n	80023c4 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6818      	ldr	r0, [r3, #0]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	6919      	ldr	r1, [r3, #16]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002382:	f7ff fab7 	bl	80018f4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6818      	ldr	r0, [r3, #0]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	6919      	ldr	r1, [r3, #16]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	7e5b      	ldrb	r3, [r3, #25]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d102      	bne.n	800239c <HAL_ADC_ConfigChannel+0x158>
 8002396:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800239a:	e000      	b.n	800239e <HAL_ADC_ConfigChannel+0x15a>
 800239c:	2300      	movs	r3, #0
 800239e:	461a      	mov	r2, r3
 80023a0:	f7ff fae1 	bl	8001966 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	6919      	ldr	r1, [r3, #16]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	7e1b      	ldrb	r3, [r3, #24]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d102      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x176>
 80023b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023b8:	e000      	b.n	80023bc <HAL_ADC_ConfigChannel+0x178>
 80023ba:	2300      	movs	r3, #0
 80023bc:	461a      	mov	r2, r3
 80023be:	f7ff fab9 	bl	8001934 <LL_ADC_SetDataRightShift>
 80023c2:	e047      	b.n	8002454 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	069b      	lsls	r3, r3, #26
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d107      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023e6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	069b      	lsls	r3, r3, #26
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d107      	bne.n	800240c <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800240a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002412:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	069b      	lsls	r3, r3, #26
 800241c:	429a      	cmp	r2, r3
 800241e:	d107      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800242e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002436:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	069b      	lsls	r3, r3, #26
 8002440:	429a      	cmp	r2, r3
 8002442:	d107      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002452:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fbab 	bl	8001bb4 <LL_ADC_IsEnabled>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	f040 81bb 	bne.w	80027dc <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	6819      	ldr	r1, [r3, #0]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	461a      	mov	r2, r3
 8002474:	f7ff fafc 	bl	8001a70 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	4a12      	ldr	r2, [pc, #72]	; (80024c8 <HAL_ADC_ConfigChannel+0x284>)
 800247e:	4293      	cmp	r3, r2
 8002480:	f040 8130 	bne.w	80026e4 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10b      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x268>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	0e9b      	lsrs	r3, r3, #26
 800249a:	3301      	adds	r3, #1
 800249c:	f003 031f 	and.w	r3, r3, #31
 80024a0:	2b09      	cmp	r3, #9
 80024a2:	bf94      	ite	ls
 80024a4:	2301      	movls	r3, #1
 80024a6:	2300      	movhi	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	e01b      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x2a0>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024b4:	fa93 f3a3 	rbit	r3, r3
 80024b8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80024ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80024be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d103      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 80024c4:	2320      	movs	r3, #32
 80024c6:	e005      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x290>
 80024c8:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 80024cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ce:	fab3 f383 	clz	r3, r3
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	3301      	adds	r3, #1
 80024d6:	f003 031f 	and.w	r3, r3, #31
 80024da:	2b09      	cmp	r3, #9
 80024dc:	bf94      	ite	ls
 80024de:	2301      	movls	r3, #1
 80024e0:	2300      	movhi	r3, #0
 80024e2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d079      	beq.n	80025dc <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d107      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x2c0>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	0e9b      	lsrs	r3, r3, #26
 80024fa:	3301      	adds	r3, #1
 80024fc:	069b      	lsls	r3, r3, #26
 80024fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002502:	e015      	b.n	8002530 <HAL_ADC_ConfigChannel+0x2ec>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800250c:	fa93 f3a3 	rbit	r3, r3
 8002510:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002514:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 800251c:	2320      	movs	r3, #32
 800251e:	e003      	b.n	8002528 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8002520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002522:	fab3 f383 	clz	r3, r3
 8002526:	b2db      	uxtb	r3, r3
 8002528:	3301      	adds	r3, #1
 800252a:	069b      	lsls	r3, r3, #26
 800252c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002538:	2b00      	cmp	r3, #0
 800253a:	d109      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x30c>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	0e9b      	lsrs	r3, r3, #26
 8002542:	3301      	adds	r3, #1
 8002544:	f003 031f 	and.w	r3, r3, #31
 8002548:	2101      	movs	r1, #1
 800254a:	fa01 f303 	lsl.w	r3, r1, r3
 800254e:	e017      	b.n	8002580 <HAL_ADC_ConfigChannel+0x33c>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002558:	fa93 f3a3 	rbit	r3, r3
 800255c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800255e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002560:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8002568:	2320      	movs	r3, #32
 800256a:	e003      	b.n	8002574 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 800256c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800256e:	fab3 f383 	clz	r3, r3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	3301      	adds	r3, #1
 8002576:	f003 031f 	and.w	r3, r3, #31
 800257a:	2101      	movs	r1, #1
 800257c:	fa01 f303 	lsl.w	r3, r1, r3
 8002580:	ea42 0103 	orr.w	r1, r2, r3
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10a      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x362>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	0e9b      	lsrs	r3, r3, #26
 8002596:	3301      	adds	r3, #1
 8002598:	f003 021f 	and.w	r2, r3, #31
 800259c:	4613      	mov	r3, r2
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	4413      	add	r3, r2
 80025a2:	051b      	lsls	r3, r3, #20
 80025a4:	e018      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x394>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ae:	fa93 f3a3 	rbit	r3, r3
 80025b2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80025b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80025b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80025be:	2320      	movs	r3, #32
 80025c0:	e003      	b.n	80025ca <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 80025c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c4:	fab3 f383 	clz	r3, r3
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	3301      	adds	r3, #1
 80025cc:	f003 021f 	and.w	r2, r3, #31
 80025d0:	4613      	mov	r3, r2
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	4413      	add	r3, r2
 80025d6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025d8:	430b      	orrs	r3, r1
 80025da:	e07e      	b.n	80026da <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d107      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x3b4>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	0e9b      	lsrs	r3, r3, #26
 80025ee:	3301      	adds	r3, #1
 80025f0:	069b      	lsls	r3, r3, #26
 80025f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025f6:	e015      	b.n	8002624 <HAL_ADC_ConfigChannel+0x3e0>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002600:	fa93 f3a3 	rbit	r3, r3
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800260a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002610:	2320      	movs	r3, #32
 8002612:	e003      	b.n	800261c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002616:	fab3 f383 	clz	r3, r3
 800261a:	b2db      	uxtb	r3, r3
 800261c:	3301      	adds	r3, #1
 800261e:	069b      	lsls	r3, r3, #26
 8002620:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800262c:	2b00      	cmp	r3, #0
 800262e:	d109      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x400>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	0e9b      	lsrs	r3, r3, #26
 8002636:	3301      	adds	r3, #1
 8002638:	f003 031f 	and.w	r3, r3, #31
 800263c:	2101      	movs	r1, #1
 800263e:	fa01 f303 	lsl.w	r3, r1, r3
 8002642:	e017      	b.n	8002674 <HAL_ADC_ConfigChannel+0x430>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	fa93 f3a3 	rbit	r3, r3
 8002650:	61bb      	str	r3, [r7, #24]
  return result;
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 800265c:	2320      	movs	r3, #32
 800265e:	e003      	b.n	8002668 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	fab3 f383 	clz	r3, r3
 8002666:	b2db      	uxtb	r3, r3
 8002668:	3301      	adds	r3, #1
 800266a:	f003 031f 	and.w	r3, r3, #31
 800266e:	2101      	movs	r1, #1
 8002670:	fa01 f303 	lsl.w	r3, r1, r3
 8002674:	ea42 0103 	orr.w	r1, r2, r3
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10d      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x45c>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	0e9b      	lsrs	r3, r3, #26
 800268a:	3301      	adds	r3, #1
 800268c:	f003 021f 	and.w	r2, r3, #31
 8002690:	4613      	mov	r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	4413      	add	r3, r2
 8002696:	3b1e      	subs	r3, #30
 8002698:	051b      	lsls	r3, r3, #20
 800269a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800269e:	e01b      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x494>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	fa93 f3a3 	rbit	r3, r3
 80026ac:	60fb      	str	r3, [r7, #12]
  return result;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 80026b8:	2320      	movs	r3, #32
 80026ba:	e003      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	fab3 f383 	clz	r3, r3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	3301      	adds	r3, #1
 80026c6:	f003 021f 	and.w	r2, r3, #31
 80026ca:	4613      	mov	r3, r2
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	4413      	add	r3, r2
 80026d0:	3b1e      	subs	r3, #30
 80026d2:	051b      	lsls	r3, r3, #20
 80026d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026d8:	430b      	orrs	r3, r1
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	6892      	ldr	r2, [r2, #8]
 80026de:	4619      	mov	r1, r3
 80026e0:	f7ff f99b 	bl	8001a1a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	da77      	bge.n	80027dc <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026ec:	4840      	ldr	r0, [pc, #256]	; (80027f0 <HAL_ADC_ConfigChannel+0x5ac>)
 80026ee:	f7ff f8f3 	bl	80018d8 <LL_ADC_GetCommonPathInternalCh>
 80026f2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026f4:	483f      	ldr	r0, [pc, #252]	; (80027f4 <HAL_ADC_ConfigChannel+0x5b0>)
 80026f6:	f7ff fa5d 	bl	8001bb4 <LL_ADC_IsEnabled>
 80026fa:	4604      	mov	r4, r0
 80026fc:	483e      	ldr	r0, [pc, #248]	; (80027f8 <HAL_ADC_ConfigChannel+0x5b4>)
 80026fe:	f7ff fa59 	bl	8001bb4 <LL_ADC_IsEnabled>
 8002702:	4603      	mov	r3, r0
 8002704:	4323      	orrs	r3, r4
 8002706:	2b00      	cmp	r3, #0
 8002708:	d155      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a3b      	ldr	r2, [pc, #236]	; (80027fc <HAL_ADC_ConfigChannel+0x5b8>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d122      	bne.n	800275a <HAL_ADC_ConfigChannel+0x516>
 8002714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002716:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d11d      	bne.n	800275a <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a35      	ldr	r2, [pc, #212]	; (80027f8 <HAL_ADC_ConfigChannel+0x5b4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d159      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800272a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800272e:	4619      	mov	r1, r3
 8002730:	482f      	ldr	r0, [pc, #188]	; (80027f0 <HAL_ADC_ConfigChannel+0x5ac>)
 8002732:	f7ff f8be 	bl	80018b2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002736:	4b32      	ldr	r3, [pc, #200]	; (8002800 <HAL_ADC_ConfigChannel+0x5bc>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	099b      	lsrs	r3, r3, #6
 800273c:	4a31      	ldr	r2, [pc, #196]	; (8002804 <HAL_ADC_ConfigChannel+0x5c0>)
 800273e:	fba2 2303 	umull	r2, r3, r2, r3
 8002742:	099b      	lsrs	r3, r3, #6
 8002744:	3301      	adds	r3, #1
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800274a:	e002      	b.n	8002752 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	3b01      	subs	r3, #1
 8002750:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1f9      	bne.n	800274c <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002758:	e040      	b.n	80027dc <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a2a      	ldr	r2, [pc, #168]	; (8002808 <HAL_ADC_ConfigChannel+0x5c4>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d111      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x544>
 8002764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002766:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10c      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a21      	ldr	r2, [pc, #132]	; (80027f8 <HAL_ADC_ConfigChannel+0x5b4>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d131      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800277a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800277e:	4619      	mov	r1, r3
 8002780:	481b      	ldr	r0, [pc, #108]	; (80027f0 <HAL_ADC_ConfigChannel+0x5ac>)
 8002782:	f7ff f896 	bl	80018b2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002786:	e029      	b.n	80027dc <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a1f      	ldr	r2, [pc, #124]	; (800280c <HAL_ADC_ConfigChannel+0x5c8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d124      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x598>
 8002792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002794:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d11f      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a15      	ldr	r2, [pc, #84]	; (80027f8 <HAL_ADC_ConfigChannel+0x5b4>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d11a      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80027a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027ac:	4619      	mov	r1, r3
 80027ae:	4810      	ldr	r0, [pc, #64]	; (80027f0 <HAL_ADC_ConfigChannel+0x5ac>)
 80027b0:	f7ff f87f 	bl	80018b2 <LL_ADC_SetCommonPathInternalCh>
 80027b4:	e012      	b.n	80027dc <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ba:	f043 0220 	orr.w	r2, r3, #32
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80027c8:	e008      	b.n	80027dc <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ce:	f043 0220 	orr.w	r2, r3, #32
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80027e4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3784      	adds	r7, #132	; 0x84
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd90      	pop	{r4, r7, pc}
 80027f0:	40022300 	.word	0x40022300
 80027f4:	40022000 	.word	0x40022000
 80027f8:	40022100 	.word	0x40022100
 80027fc:	cb840000 	.word	0xcb840000
 8002800:	24000008 	.word	0x24000008
 8002804:	053e2d63 	.word	0x053e2d63
 8002808:	bac04000 	.word	0xbac04000
 800280c:	cfb80000 	.word	0xcfb80000

08002810 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff f9c9 	bl	8001bb4 <LL_ADC_IsEnabled>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d161      	bne.n	80028ec <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	4b32      	ldr	r3, [pc, #200]	; (80028f8 <ADC_Enable+0xe8>)
 8002830:	4013      	ands	r3, r2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00d      	beq.n	8002852 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283a:	f043 0210 	orr.w	r2, r3, #16
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002846:	f043 0201 	orr.w	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e04d      	b.n	80028ee <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff f998 	bl	8001b8c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800285c:	f7ff f80a 	bl	8001874 <HAL_GetTick>
 8002860:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002862:	4826      	ldr	r0, [pc, #152]	; (80028fc <ADC_Enable+0xec>)
 8002864:	f7ff f928 	bl	8001ab8 <LL_ADC_GetMultimode>
 8002868:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a24      	ldr	r2, [pc, #144]	; (8002900 <ADC_Enable+0xf0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d002      	beq.n	800287a <ADC_Enable+0x6a>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	e000      	b.n	800287c <ADC_Enable+0x6c>
 800287a:	4b22      	ldr	r3, [pc, #136]	; (8002904 <ADC_Enable+0xf4>)
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6812      	ldr	r2, [r2, #0]
 8002880:	4293      	cmp	r3, r2
 8002882:	d02c      	beq.n	80028de <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d130      	bne.n	80028ec <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800288a:	e028      	b.n	80028de <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff f98f 	bl	8001bb4 <LL_ADC_IsEnabled>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d104      	bne.n	80028a6 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff f973 	bl	8001b8c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028a6:	f7fe ffe5 	bl	8001874 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d914      	bls.n	80028de <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d00d      	beq.n	80028de <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c6:	f043 0210 	orr.w	r2, r3, #16
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d2:	f043 0201 	orr.w	r2, r3, #1
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e007      	b.n	80028ee <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d1cf      	bne.n	800288c <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	8000003f 	.word	0x8000003f
 80028fc:	40022300 	.word	0x40022300
 8002900:	40022100 	.word	0x40022100
 8002904:	40022000 	.word	0x40022000

08002908 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002910:	4b60      	ldr	r3, [pc, #384]	; (8002a94 <ADC_ConfigureBoostMode+0x18c>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d01c      	beq.n	8002956 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800291c:	f002 f97e 	bl	8004c1c <HAL_RCC_GetHCLKFreq>
 8002920:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800292a:	d010      	beq.n	800294e <ADC_ConfigureBoostMode+0x46>
 800292c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002930:	d873      	bhi.n	8002a1a <ADC_ConfigureBoostMode+0x112>
 8002932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002936:	d002      	beq.n	800293e <ADC_ConfigureBoostMode+0x36>
 8002938:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800293c:	d16d      	bne.n	8002a1a <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	0c1b      	lsrs	r3, r3, #16
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	fbb2 f3f3 	udiv	r3, r2, r3
 800294a:	60fb      	str	r3, [r7, #12]
        break;
 800294c:	e068      	b.n	8002a20 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	089b      	lsrs	r3, r3, #2
 8002952:	60fb      	str	r3, [r7, #12]
        break;
 8002954:	e064      	b.n	8002a20 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002956:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800295a:	f04f 0100 	mov.w	r1, #0
 800295e:	f003 fb77 	bl	8006050 <HAL_RCCEx_GetPeriphCLKFreq>
 8002962:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800296c:	d051      	beq.n	8002a12 <ADC_ConfigureBoostMode+0x10a>
 800296e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002972:	d854      	bhi.n	8002a1e <ADC_ConfigureBoostMode+0x116>
 8002974:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002978:	d047      	beq.n	8002a0a <ADC_ConfigureBoostMode+0x102>
 800297a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800297e:	d84e      	bhi.n	8002a1e <ADC_ConfigureBoostMode+0x116>
 8002980:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002984:	d03d      	beq.n	8002a02 <ADC_ConfigureBoostMode+0xfa>
 8002986:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800298a:	d848      	bhi.n	8002a1e <ADC_ConfigureBoostMode+0x116>
 800298c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002990:	d033      	beq.n	80029fa <ADC_ConfigureBoostMode+0xf2>
 8002992:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002996:	d842      	bhi.n	8002a1e <ADC_ConfigureBoostMode+0x116>
 8002998:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800299c:	d029      	beq.n	80029f2 <ADC_ConfigureBoostMode+0xea>
 800299e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80029a2:	d83c      	bhi.n	8002a1e <ADC_ConfigureBoostMode+0x116>
 80029a4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80029a8:	d01a      	beq.n	80029e0 <ADC_ConfigureBoostMode+0xd8>
 80029aa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80029ae:	d836      	bhi.n	8002a1e <ADC_ConfigureBoostMode+0x116>
 80029b0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80029b4:	d014      	beq.n	80029e0 <ADC_ConfigureBoostMode+0xd8>
 80029b6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80029ba:	d830      	bhi.n	8002a1e <ADC_ConfigureBoostMode+0x116>
 80029bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029c0:	d00e      	beq.n	80029e0 <ADC_ConfigureBoostMode+0xd8>
 80029c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029c6:	d82a      	bhi.n	8002a1e <ADC_ConfigureBoostMode+0x116>
 80029c8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80029cc:	d008      	beq.n	80029e0 <ADC_ConfigureBoostMode+0xd8>
 80029ce:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80029d2:	d824      	bhi.n	8002a1e <ADC_ConfigureBoostMode+0x116>
 80029d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029d8:	d002      	beq.n	80029e0 <ADC_ConfigureBoostMode+0xd8>
 80029da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029de:	d11e      	bne.n	8002a1e <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	0c9b      	lsrs	r3, r3, #18
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ee:	60fb      	str	r3, [r7, #12]
        break;
 80029f0:	e016      	b.n	8002a20 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	091b      	lsrs	r3, r3, #4
 80029f6:	60fb      	str	r3, [r7, #12]
        break;
 80029f8:	e012      	b.n	8002a20 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	095b      	lsrs	r3, r3, #5
 80029fe:	60fb      	str	r3, [r7, #12]
        break;
 8002a00:	e00e      	b.n	8002a20 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	099b      	lsrs	r3, r3, #6
 8002a06:	60fb      	str	r3, [r7, #12]
        break;
 8002a08:	e00a      	b.n	8002a20 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	09db      	lsrs	r3, r3, #7
 8002a0e:	60fb      	str	r3, [r7, #12]
        break;
 8002a10:	e006      	b.n	8002a20 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	0a1b      	lsrs	r3, r3, #8
 8002a16:	60fb      	str	r3, [r7, #12]
        break;
 8002a18:	e002      	b.n	8002a20 <ADC_ConfigureBoostMode+0x118>
        break;
 8002a1a:	bf00      	nop
 8002a1c:	e000      	b.n	8002a20 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8002a1e:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	085b      	lsrs	r3, r3, #1
 8002a24:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4a1b      	ldr	r2, [pc, #108]	; (8002a98 <ADC_ConfigureBoostMode+0x190>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d808      	bhi.n	8002a40 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a3c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002a3e:	e025      	b.n	8002a8c <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	4a16      	ldr	r2, [pc, #88]	; (8002a9c <ADC_ConfigureBoostMode+0x194>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d80a      	bhi.n	8002a5e <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a5a:	609a      	str	r2, [r3, #8]
}
 8002a5c:	e016      	b.n	8002a8c <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4a0f      	ldr	r2, [pc, #60]	; (8002aa0 <ADC_ConfigureBoostMode+0x198>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d80a      	bhi.n	8002a7c <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a78:	609a      	str	r2, [r3, #8]
}
 8002a7a:	e007      	b.n	8002a8c <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002a8a:	609a      	str	r2, [r3, #8]
}
 8002a8c:	bf00      	nop
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40022300 	.word	0x40022300
 8002a98:	005f5e10 	.word	0x005f5e10
 8002a9c:	00bebc20 	.word	0x00bebc20
 8002aa0:	017d7840 	.word	0x017d7840

08002aa4 <LL_ADC_IsEnabled>:
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d101      	bne.n	8002abc <LL_ADC_IsEnabled+0x18>
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e000      	b.n	8002abe <LL_ADC_IsEnabled+0x1a>
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <LL_ADC_REG_IsConversionOngoing>:
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d101      	bne.n	8002ae2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e000      	b.n	8002ae4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002af0:	b590      	push	{r4, r7, lr}
 8002af2:	b09f      	sub	sp, #124	; 0x7c
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002afa:	2300      	movs	r3, #0
 8002afc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d101      	bne.n	8002b0e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e080      	b.n	8002c10 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002b16:	2300      	movs	r3, #0
 8002b18:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a3d      	ldr	r2, [pc, #244]	; (8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d102      	bne.n	8002b2e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b28:	4b3c      	ldr	r3, [pc, #240]	; (8002c1c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002b2a:	60bb      	str	r3, [r7, #8]
 8002b2c:	e001      	b.n	8002b32 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10b      	bne.n	8002b50 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3c:	f043 0220 	orr.w	r2, r3, #32
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e05f      	b.n	8002c10 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff ffb9 	bl	8002aca <LL_ADC_REG_IsConversionOngoing>
 8002b58:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff ffb3 	bl	8002aca <LL_ADC_REG_IsConversionOngoing>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d141      	bne.n	8002bee <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002b6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d13e      	bne.n	8002bee <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b70:	4b2b      	ldr	r3, [pc, #172]	; (8002c20 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002b72:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d020      	beq.n	8002bbe <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b8c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b8e:	4822      	ldr	r0, [pc, #136]	; (8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002b90:	f7ff ff88 	bl	8002aa4 <LL_ADC_IsEnabled>
 8002b94:	4604      	mov	r4, r0
 8002b96:	4821      	ldr	r0, [pc, #132]	; (8002c1c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002b98:	f7ff ff84 	bl	8002aa4 <LL_ADC_IsEnabled>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	4323      	orrs	r3, r4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d12e      	bne.n	8002c02 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	4b1e      	ldr	r3, [pc, #120]	; (8002c24 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	6811      	ldr	r1, [r2, #0]
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	6892      	ldr	r2, [r2, #8]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bba:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bbc:	e021      	b.n	8002c02 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bca:	4813      	ldr	r0, [pc, #76]	; (8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002bcc:	f7ff ff6a 	bl	8002aa4 <LL_ADC_IsEnabled>
 8002bd0:	4604      	mov	r4, r0
 8002bd2:	4812      	ldr	r0, [pc, #72]	; (8002c1c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002bd4:	f7ff ff66 	bl	8002aa4 <LL_ADC_IsEnabled>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	4323      	orrs	r3, r4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d110      	bne.n	8002c02 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	4b0f      	ldr	r3, [pc, #60]	; (8002c24 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002be6:	4013      	ands	r3, r2
 8002be8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002bea:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bec:	e009      	b.n	8002c02 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf2:	f043 0220 	orr.w	r2, r3, #32
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002c00:	e000      	b.n	8002c04 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c02:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c0c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	377c      	adds	r7, #124	; 0x7c
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd90      	pop	{r4, r7, pc}
 8002c18:	40022000 	.word	0x40022000
 8002c1c:	40022100 	.word	0x40022100
 8002c20:	40022300 	.word	0x40022300
 8002c24:	fffff0e0 	.word	0xfffff0e0

08002c28 <__NVIC_SetPriorityGrouping>:
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c38:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <__NVIC_SetPriorityGrouping+0x40>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c44:	4013      	ands	r3, r2
 8002c46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c50:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <__NVIC_SetPriorityGrouping+0x44>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c56:	4a04      	ldr	r2, [pc, #16]	; (8002c68 <__NVIC_SetPriorityGrouping+0x40>)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	60d3      	str	r3, [r2, #12]
}
 8002c5c:	bf00      	nop
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	e000ed00 	.word	0xe000ed00
 8002c6c:	05fa0000 	.word	0x05fa0000

08002c70 <__NVIC_GetPriorityGrouping>:
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c74:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <__NVIC_GetPriorityGrouping+0x18>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	0a1b      	lsrs	r3, r3, #8
 8002c7a:	f003 0307 	and.w	r3, r3, #7
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	e000ed00 	.word	0xe000ed00

08002c8c <__NVIC_EnableIRQ>:
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	db0b      	blt.n	8002cb6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c9e:	88fb      	ldrh	r3, [r7, #6]
 8002ca0:	f003 021f 	and.w	r2, r3, #31
 8002ca4:	4907      	ldr	r1, [pc, #28]	; (8002cc4 <__NVIC_EnableIRQ+0x38>)
 8002ca6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	2001      	movs	r0, #1
 8002cae:	fa00 f202 	lsl.w	r2, r0, r2
 8002cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	e000e100 	.word	0xe000e100

08002cc8 <__NVIC_SetPriority>:
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	6039      	str	r1, [r7, #0]
 8002cd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002cd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	db0a      	blt.n	8002cf2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	490c      	ldr	r1, [pc, #48]	; (8002d14 <__NVIC_SetPriority+0x4c>)
 8002ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ce6:	0112      	lsls	r2, r2, #4
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	440b      	add	r3, r1
 8002cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002cf0:	e00a      	b.n	8002d08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	4908      	ldr	r1, [pc, #32]	; (8002d18 <__NVIC_SetPriority+0x50>)
 8002cf8:	88fb      	ldrh	r3, [r7, #6]
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	3b04      	subs	r3, #4
 8002d00:	0112      	lsls	r2, r2, #4
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	440b      	add	r3, r1
 8002d06:	761a      	strb	r2, [r3, #24]
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	e000e100 	.word	0xe000e100
 8002d18:	e000ed00 	.word	0xe000ed00

08002d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b089      	sub	sp, #36	; 0x24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f1c3 0307 	rsb	r3, r3, #7
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	bf28      	it	cs
 8002d3a:	2304      	movcs	r3, #4
 8002d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	3304      	adds	r3, #4
 8002d42:	2b06      	cmp	r3, #6
 8002d44:	d902      	bls.n	8002d4c <NVIC_EncodePriority+0x30>
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	3b03      	subs	r3, #3
 8002d4a:	e000      	b.n	8002d4e <NVIC_EncodePriority+0x32>
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d50:	f04f 32ff 	mov.w	r2, #4294967295
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43da      	mvns	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	401a      	ands	r2, r3
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d64:	f04f 31ff 	mov.w	r1, #4294967295
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6e:	43d9      	mvns	r1, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d74:	4313      	orrs	r3, r2
         );
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3724      	adds	r7, #36	; 0x24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d94:	d301      	bcc.n	8002d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d96:	2301      	movs	r3, #1
 8002d98:	e00f      	b.n	8002dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d9a:	4a0a      	ldr	r2, [pc, #40]	; (8002dc4 <SysTick_Config+0x40>)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002da2:	210f      	movs	r1, #15
 8002da4:	f04f 30ff 	mov.w	r0, #4294967295
 8002da8:	f7ff ff8e 	bl	8002cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <SysTick_Config+0x40>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002db2:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <SysTick_Config+0x40>)
 8002db4:	2207      	movs	r2, #7
 8002db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	e000e010 	.word	0xe000e010

08002dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff ff29 	bl	8002c28 <__NVIC_SetPriorityGrouping>
}
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b086      	sub	sp, #24
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	4603      	mov	r3, r0
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002dec:	f7ff ff40 	bl	8002c70 <__NVIC_GetPriorityGrouping>
 8002df0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	68b9      	ldr	r1, [r7, #8]
 8002df6:	6978      	ldr	r0, [r7, #20]
 8002df8:	f7ff ff90 	bl	8002d1c <NVIC_EncodePriority>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e02:	4611      	mov	r1, r2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff ff5f 	bl	8002cc8 <__NVIC_SetPriority>
}
 8002e0a:	bf00      	nop
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b082      	sub	sp, #8
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	4603      	mov	r3, r0
 8002e1a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff ff33 	bl	8002c8c <__NVIC_EnableIRQ>
}
 8002e26:	bf00      	nop
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff ffa4 	bl	8002d84 <SysTick_Config>
 8002e3c:	4603      	mov	r3, r0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002e50:	f7fe fd10 	bl	8001874 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e2dc      	b.n	800341a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d008      	beq.n	8002e7e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2280      	movs	r2, #128	; 0x80
 8002e70:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e2cd      	b.n	800341a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a76      	ldr	r2, [pc, #472]	; (800305c <HAL_DMA_Abort+0x214>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d04a      	beq.n	8002f1e <HAL_DMA_Abort+0xd6>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a74      	ldr	r2, [pc, #464]	; (8003060 <HAL_DMA_Abort+0x218>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d045      	beq.n	8002f1e <HAL_DMA_Abort+0xd6>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a73      	ldr	r2, [pc, #460]	; (8003064 <HAL_DMA_Abort+0x21c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d040      	beq.n	8002f1e <HAL_DMA_Abort+0xd6>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a71      	ldr	r2, [pc, #452]	; (8003068 <HAL_DMA_Abort+0x220>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d03b      	beq.n	8002f1e <HAL_DMA_Abort+0xd6>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a70      	ldr	r2, [pc, #448]	; (800306c <HAL_DMA_Abort+0x224>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d036      	beq.n	8002f1e <HAL_DMA_Abort+0xd6>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a6e      	ldr	r2, [pc, #440]	; (8003070 <HAL_DMA_Abort+0x228>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d031      	beq.n	8002f1e <HAL_DMA_Abort+0xd6>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a6d      	ldr	r2, [pc, #436]	; (8003074 <HAL_DMA_Abort+0x22c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d02c      	beq.n	8002f1e <HAL_DMA_Abort+0xd6>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a6b      	ldr	r2, [pc, #428]	; (8003078 <HAL_DMA_Abort+0x230>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d027      	beq.n	8002f1e <HAL_DMA_Abort+0xd6>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a6a      	ldr	r2, [pc, #424]	; (800307c <HAL_DMA_Abort+0x234>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d022      	beq.n	8002f1e <HAL_DMA_Abort+0xd6>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a68      	ldr	r2, [pc, #416]	; (8003080 <HAL_DMA_Abort+0x238>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d01d      	beq.n	8002f1e <HAL_DMA_Abort+0xd6>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a67      	ldr	r2, [pc, #412]	; (8003084 <HAL_DMA_Abort+0x23c>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d018      	beq.n	8002f1e <HAL_DMA_Abort+0xd6>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a65      	ldr	r2, [pc, #404]	; (8003088 <HAL_DMA_Abort+0x240>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d013      	beq.n	8002f1e <HAL_DMA_Abort+0xd6>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a64      	ldr	r2, [pc, #400]	; (800308c <HAL_DMA_Abort+0x244>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d00e      	beq.n	8002f1e <HAL_DMA_Abort+0xd6>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a62      	ldr	r2, [pc, #392]	; (8003090 <HAL_DMA_Abort+0x248>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d009      	beq.n	8002f1e <HAL_DMA_Abort+0xd6>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a61      	ldr	r2, [pc, #388]	; (8003094 <HAL_DMA_Abort+0x24c>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d004      	beq.n	8002f1e <HAL_DMA_Abort+0xd6>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a5f      	ldr	r2, [pc, #380]	; (8003098 <HAL_DMA_Abort+0x250>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d101      	bne.n	8002f22 <HAL_DMA_Abort+0xda>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <HAL_DMA_Abort+0xdc>
 8002f22:	2300      	movs	r3, #0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d013      	beq.n	8002f50 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 021e 	bic.w	r2, r2, #30
 8002f36:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f46:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	e00a      	b.n	8002f66 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 020e 	bic.w	r2, r2, #14
 8002f5e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a3c      	ldr	r2, [pc, #240]	; (800305c <HAL_DMA_Abort+0x214>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d072      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a3a      	ldr	r2, [pc, #232]	; (8003060 <HAL_DMA_Abort+0x218>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d06d      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a39      	ldr	r2, [pc, #228]	; (8003064 <HAL_DMA_Abort+0x21c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d068      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a37      	ldr	r2, [pc, #220]	; (8003068 <HAL_DMA_Abort+0x220>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d063      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a36      	ldr	r2, [pc, #216]	; (800306c <HAL_DMA_Abort+0x224>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d05e      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a34      	ldr	r2, [pc, #208]	; (8003070 <HAL_DMA_Abort+0x228>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d059      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a33      	ldr	r2, [pc, #204]	; (8003074 <HAL_DMA_Abort+0x22c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d054      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a31      	ldr	r2, [pc, #196]	; (8003078 <HAL_DMA_Abort+0x230>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d04f      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a30      	ldr	r2, [pc, #192]	; (800307c <HAL_DMA_Abort+0x234>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d04a      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a2e      	ldr	r2, [pc, #184]	; (8003080 <HAL_DMA_Abort+0x238>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d045      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a2d      	ldr	r2, [pc, #180]	; (8003084 <HAL_DMA_Abort+0x23c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d040      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <HAL_DMA_Abort+0x240>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d03b      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a2a      	ldr	r2, [pc, #168]	; (800308c <HAL_DMA_Abort+0x244>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d036      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a28      	ldr	r2, [pc, #160]	; (8003090 <HAL_DMA_Abort+0x248>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d031      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a27      	ldr	r2, [pc, #156]	; (8003094 <HAL_DMA_Abort+0x24c>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d02c      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a25      	ldr	r2, [pc, #148]	; (8003098 <HAL_DMA_Abort+0x250>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d027      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a24      	ldr	r2, [pc, #144]	; (800309c <HAL_DMA_Abort+0x254>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d022      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a22      	ldr	r2, [pc, #136]	; (80030a0 <HAL_DMA_Abort+0x258>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d01d      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a21      	ldr	r2, [pc, #132]	; (80030a4 <HAL_DMA_Abort+0x25c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d018      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a1f      	ldr	r2, [pc, #124]	; (80030a8 <HAL_DMA_Abort+0x260>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d013      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a1e      	ldr	r2, [pc, #120]	; (80030ac <HAL_DMA_Abort+0x264>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d00e      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a1c      	ldr	r2, [pc, #112]	; (80030b0 <HAL_DMA_Abort+0x268>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d009      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a1b      	ldr	r2, [pc, #108]	; (80030b4 <HAL_DMA_Abort+0x26c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d004      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a19      	ldr	r2, [pc, #100]	; (80030b8 <HAL_DMA_Abort+0x270>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d132      	bne.n	80030bc <HAL_DMA_Abort+0x274>
 8003056:	2301      	movs	r3, #1
 8003058:	e031      	b.n	80030be <HAL_DMA_Abort+0x276>
 800305a:	bf00      	nop
 800305c:	40020010 	.word	0x40020010
 8003060:	40020028 	.word	0x40020028
 8003064:	40020040 	.word	0x40020040
 8003068:	40020058 	.word	0x40020058
 800306c:	40020070 	.word	0x40020070
 8003070:	40020088 	.word	0x40020088
 8003074:	400200a0 	.word	0x400200a0
 8003078:	400200b8 	.word	0x400200b8
 800307c:	40020410 	.word	0x40020410
 8003080:	40020428 	.word	0x40020428
 8003084:	40020440 	.word	0x40020440
 8003088:	40020458 	.word	0x40020458
 800308c:	40020470 	.word	0x40020470
 8003090:	40020488 	.word	0x40020488
 8003094:	400204a0 	.word	0x400204a0
 8003098:	400204b8 	.word	0x400204b8
 800309c:	58025408 	.word	0x58025408
 80030a0:	5802541c 	.word	0x5802541c
 80030a4:	58025430 	.word	0x58025430
 80030a8:	58025444 	.word	0x58025444
 80030ac:	58025458 	.word	0x58025458
 80030b0:	5802546c 	.word	0x5802546c
 80030b4:	58025480 	.word	0x58025480
 80030b8:	58025494 	.word	0x58025494
 80030bc:	2300      	movs	r3, #0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d007      	beq.n	80030d2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a6d      	ldr	r2, [pc, #436]	; (800328c <HAL_DMA_Abort+0x444>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d04a      	beq.n	8003172 <HAL_DMA_Abort+0x32a>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a6b      	ldr	r2, [pc, #428]	; (8003290 <HAL_DMA_Abort+0x448>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d045      	beq.n	8003172 <HAL_DMA_Abort+0x32a>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a6a      	ldr	r2, [pc, #424]	; (8003294 <HAL_DMA_Abort+0x44c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d040      	beq.n	8003172 <HAL_DMA_Abort+0x32a>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a68      	ldr	r2, [pc, #416]	; (8003298 <HAL_DMA_Abort+0x450>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d03b      	beq.n	8003172 <HAL_DMA_Abort+0x32a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a67      	ldr	r2, [pc, #412]	; (800329c <HAL_DMA_Abort+0x454>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d036      	beq.n	8003172 <HAL_DMA_Abort+0x32a>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a65      	ldr	r2, [pc, #404]	; (80032a0 <HAL_DMA_Abort+0x458>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d031      	beq.n	8003172 <HAL_DMA_Abort+0x32a>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a64      	ldr	r2, [pc, #400]	; (80032a4 <HAL_DMA_Abort+0x45c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d02c      	beq.n	8003172 <HAL_DMA_Abort+0x32a>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a62      	ldr	r2, [pc, #392]	; (80032a8 <HAL_DMA_Abort+0x460>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d027      	beq.n	8003172 <HAL_DMA_Abort+0x32a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a61      	ldr	r2, [pc, #388]	; (80032ac <HAL_DMA_Abort+0x464>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d022      	beq.n	8003172 <HAL_DMA_Abort+0x32a>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a5f      	ldr	r2, [pc, #380]	; (80032b0 <HAL_DMA_Abort+0x468>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d01d      	beq.n	8003172 <HAL_DMA_Abort+0x32a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a5e      	ldr	r2, [pc, #376]	; (80032b4 <HAL_DMA_Abort+0x46c>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d018      	beq.n	8003172 <HAL_DMA_Abort+0x32a>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a5c      	ldr	r2, [pc, #368]	; (80032b8 <HAL_DMA_Abort+0x470>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d013      	beq.n	8003172 <HAL_DMA_Abort+0x32a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a5b      	ldr	r2, [pc, #364]	; (80032bc <HAL_DMA_Abort+0x474>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d00e      	beq.n	8003172 <HAL_DMA_Abort+0x32a>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a59      	ldr	r2, [pc, #356]	; (80032c0 <HAL_DMA_Abort+0x478>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d009      	beq.n	8003172 <HAL_DMA_Abort+0x32a>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a58      	ldr	r2, [pc, #352]	; (80032c4 <HAL_DMA_Abort+0x47c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d004      	beq.n	8003172 <HAL_DMA_Abort+0x32a>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a56      	ldr	r2, [pc, #344]	; (80032c8 <HAL_DMA_Abort+0x480>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d108      	bne.n	8003184 <HAL_DMA_Abort+0x33c>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0201 	bic.w	r2, r2, #1
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	e007      	b.n	8003194 <HAL_DMA_Abort+0x34c>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0201 	bic.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003194:	e013      	b.n	80031be <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003196:	f7fe fb6d 	bl	8001874 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b05      	cmp	r3, #5
 80031a2:	d90c      	bls.n	80031be <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2220      	movs	r2, #32
 80031a8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2203      	movs	r2, #3
 80031ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e12d      	b.n	800341a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1e5      	bne.n	8003196 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a2f      	ldr	r2, [pc, #188]	; (800328c <HAL_DMA_Abort+0x444>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d04a      	beq.n	800326a <HAL_DMA_Abort+0x422>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a2d      	ldr	r2, [pc, #180]	; (8003290 <HAL_DMA_Abort+0x448>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d045      	beq.n	800326a <HAL_DMA_Abort+0x422>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a2c      	ldr	r2, [pc, #176]	; (8003294 <HAL_DMA_Abort+0x44c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d040      	beq.n	800326a <HAL_DMA_Abort+0x422>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a2a      	ldr	r2, [pc, #168]	; (8003298 <HAL_DMA_Abort+0x450>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d03b      	beq.n	800326a <HAL_DMA_Abort+0x422>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a29      	ldr	r2, [pc, #164]	; (800329c <HAL_DMA_Abort+0x454>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d036      	beq.n	800326a <HAL_DMA_Abort+0x422>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a27      	ldr	r2, [pc, #156]	; (80032a0 <HAL_DMA_Abort+0x458>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d031      	beq.n	800326a <HAL_DMA_Abort+0x422>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a26      	ldr	r2, [pc, #152]	; (80032a4 <HAL_DMA_Abort+0x45c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d02c      	beq.n	800326a <HAL_DMA_Abort+0x422>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a24      	ldr	r2, [pc, #144]	; (80032a8 <HAL_DMA_Abort+0x460>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d027      	beq.n	800326a <HAL_DMA_Abort+0x422>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a23      	ldr	r2, [pc, #140]	; (80032ac <HAL_DMA_Abort+0x464>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d022      	beq.n	800326a <HAL_DMA_Abort+0x422>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a21      	ldr	r2, [pc, #132]	; (80032b0 <HAL_DMA_Abort+0x468>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d01d      	beq.n	800326a <HAL_DMA_Abort+0x422>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a20      	ldr	r2, [pc, #128]	; (80032b4 <HAL_DMA_Abort+0x46c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d018      	beq.n	800326a <HAL_DMA_Abort+0x422>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a1e      	ldr	r2, [pc, #120]	; (80032b8 <HAL_DMA_Abort+0x470>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d013      	beq.n	800326a <HAL_DMA_Abort+0x422>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a1d      	ldr	r2, [pc, #116]	; (80032bc <HAL_DMA_Abort+0x474>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00e      	beq.n	800326a <HAL_DMA_Abort+0x422>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a1b      	ldr	r2, [pc, #108]	; (80032c0 <HAL_DMA_Abort+0x478>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d009      	beq.n	800326a <HAL_DMA_Abort+0x422>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a1a      	ldr	r2, [pc, #104]	; (80032c4 <HAL_DMA_Abort+0x47c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d004      	beq.n	800326a <HAL_DMA_Abort+0x422>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a18      	ldr	r2, [pc, #96]	; (80032c8 <HAL_DMA_Abort+0x480>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d101      	bne.n	800326e <HAL_DMA_Abort+0x426>
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <HAL_DMA_Abort+0x428>
 800326e:	2300      	movs	r3, #0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d02b      	beq.n	80032cc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003278:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327e:	f003 031f 	and.w	r3, r3, #31
 8003282:	223f      	movs	r2, #63	; 0x3f
 8003284:	409a      	lsls	r2, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	609a      	str	r2, [r3, #8]
 800328a:	e02a      	b.n	80032e2 <HAL_DMA_Abort+0x49a>
 800328c:	40020010 	.word	0x40020010
 8003290:	40020028 	.word	0x40020028
 8003294:	40020040 	.word	0x40020040
 8003298:	40020058 	.word	0x40020058
 800329c:	40020070 	.word	0x40020070
 80032a0:	40020088 	.word	0x40020088
 80032a4:	400200a0 	.word	0x400200a0
 80032a8:	400200b8 	.word	0x400200b8
 80032ac:	40020410 	.word	0x40020410
 80032b0:	40020428 	.word	0x40020428
 80032b4:	40020440 	.word	0x40020440
 80032b8:	40020458 	.word	0x40020458
 80032bc:	40020470 	.word	0x40020470
 80032c0:	40020488 	.word	0x40020488
 80032c4:	400204a0 	.word	0x400204a0
 80032c8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d6:	f003 031f 	and.w	r3, r3, #31
 80032da:	2201      	movs	r2, #1
 80032dc:	409a      	lsls	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a4f      	ldr	r2, [pc, #316]	; (8003424 <HAL_DMA_Abort+0x5dc>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d072      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a4d      	ldr	r2, [pc, #308]	; (8003428 <HAL_DMA_Abort+0x5e0>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d06d      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a4c      	ldr	r2, [pc, #304]	; (800342c <HAL_DMA_Abort+0x5e4>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d068      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a4a      	ldr	r2, [pc, #296]	; (8003430 <HAL_DMA_Abort+0x5e8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d063      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a49      	ldr	r2, [pc, #292]	; (8003434 <HAL_DMA_Abort+0x5ec>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d05e      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a47      	ldr	r2, [pc, #284]	; (8003438 <HAL_DMA_Abort+0x5f0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d059      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a46      	ldr	r2, [pc, #280]	; (800343c <HAL_DMA_Abort+0x5f4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d054      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a44      	ldr	r2, [pc, #272]	; (8003440 <HAL_DMA_Abort+0x5f8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d04f      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a43      	ldr	r2, [pc, #268]	; (8003444 <HAL_DMA_Abort+0x5fc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d04a      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a41      	ldr	r2, [pc, #260]	; (8003448 <HAL_DMA_Abort+0x600>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d045      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a40      	ldr	r2, [pc, #256]	; (800344c <HAL_DMA_Abort+0x604>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d040      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a3e      	ldr	r2, [pc, #248]	; (8003450 <HAL_DMA_Abort+0x608>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d03b      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a3d      	ldr	r2, [pc, #244]	; (8003454 <HAL_DMA_Abort+0x60c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d036      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a3b      	ldr	r2, [pc, #236]	; (8003458 <HAL_DMA_Abort+0x610>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d031      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a3a      	ldr	r2, [pc, #232]	; (800345c <HAL_DMA_Abort+0x614>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d02c      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a38      	ldr	r2, [pc, #224]	; (8003460 <HAL_DMA_Abort+0x618>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d027      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a37      	ldr	r2, [pc, #220]	; (8003464 <HAL_DMA_Abort+0x61c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d022      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a35      	ldr	r2, [pc, #212]	; (8003468 <HAL_DMA_Abort+0x620>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d01d      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a34      	ldr	r2, [pc, #208]	; (800346c <HAL_DMA_Abort+0x624>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d018      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a32      	ldr	r2, [pc, #200]	; (8003470 <HAL_DMA_Abort+0x628>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d013      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a31      	ldr	r2, [pc, #196]	; (8003474 <HAL_DMA_Abort+0x62c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d00e      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a2f      	ldr	r2, [pc, #188]	; (8003478 <HAL_DMA_Abort+0x630>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d009      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a2e      	ldr	r2, [pc, #184]	; (800347c <HAL_DMA_Abort+0x634>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d004      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a2c      	ldr	r2, [pc, #176]	; (8003480 <HAL_DMA_Abort+0x638>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d101      	bne.n	80033d6 <HAL_DMA_Abort+0x58e>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <HAL_DMA_Abort+0x590>
 80033d6:	2300      	movs	r3, #0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d015      	beq.n	8003408 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80033e4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00c      	beq.n	8003408 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033fc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003406:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40020010 	.word	0x40020010
 8003428:	40020028 	.word	0x40020028
 800342c:	40020040 	.word	0x40020040
 8003430:	40020058 	.word	0x40020058
 8003434:	40020070 	.word	0x40020070
 8003438:	40020088 	.word	0x40020088
 800343c:	400200a0 	.word	0x400200a0
 8003440:	400200b8 	.word	0x400200b8
 8003444:	40020410 	.word	0x40020410
 8003448:	40020428 	.word	0x40020428
 800344c:	40020440 	.word	0x40020440
 8003450:	40020458 	.word	0x40020458
 8003454:	40020470 	.word	0x40020470
 8003458:	40020488 	.word	0x40020488
 800345c:	400204a0 	.word	0x400204a0
 8003460:	400204b8 	.word	0x400204b8
 8003464:	58025408 	.word	0x58025408
 8003468:	5802541c 	.word	0x5802541c
 800346c:	58025430 	.word	0x58025430
 8003470:	58025444 	.word	0x58025444
 8003474:	58025458 	.word	0x58025458
 8003478:	5802546c 	.word	0x5802546c
 800347c:	58025480 	.word	0x58025480
 8003480:	58025494 	.word	0x58025494

08003484 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e237      	b.n	8003906 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d004      	beq.n	80034ac <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2280      	movs	r2, #128	; 0x80
 80034a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e22c      	b.n	8003906 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a5c      	ldr	r2, [pc, #368]	; (8003624 <HAL_DMA_Abort_IT+0x1a0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d04a      	beq.n	800354c <HAL_DMA_Abort_IT+0xc8>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a5b      	ldr	r2, [pc, #364]	; (8003628 <HAL_DMA_Abort_IT+0x1a4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d045      	beq.n	800354c <HAL_DMA_Abort_IT+0xc8>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a59      	ldr	r2, [pc, #356]	; (800362c <HAL_DMA_Abort_IT+0x1a8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d040      	beq.n	800354c <HAL_DMA_Abort_IT+0xc8>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a58      	ldr	r2, [pc, #352]	; (8003630 <HAL_DMA_Abort_IT+0x1ac>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d03b      	beq.n	800354c <HAL_DMA_Abort_IT+0xc8>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a56      	ldr	r2, [pc, #344]	; (8003634 <HAL_DMA_Abort_IT+0x1b0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d036      	beq.n	800354c <HAL_DMA_Abort_IT+0xc8>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a55      	ldr	r2, [pc, #340]	; (8003638 <HAL_DMA_Abort_IT+0x1b4>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d031      	beq.n	800354c <HAL_DMA_Abort_IT+0xc8>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a53      	ldr	r2, [pc, #332]	; (800363c <HAL_DMA_Abort_IT+0x1b8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d02c      	beq.n	800354c <HAL_DMA_Abort_IT+0xc8>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a52      	ldr	r2, [pc, #328]	; (8003640 <HAL_DMA_Abort_IT+0x1bc>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d027      	beq.n	800354c <HAL_DMA_Abort_IT+0xc8>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a50      	ldr	r2, [pc, #320]	; (8003644 <HAL_DMA_Abort_IT+0x1c0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d022      	beq.n	800354c <HAL_DMA_Abort_IT+0xc8>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a4f      	ldr	r2, [pc, #316]	; (8003648 <HAL_DMA_Abort_IT+0x1c4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d01d      	beq.n	800354c <HAL_DMA_Abort_IT+0xc8>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a4d      	ldr	r2, [pc, #308]	; (800364c <HAL_DMA_Abort_IT+0x1c8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d018      	beq.n	800354c <HAL_DMA_Abort_IT+0xc8>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a4c      	ldr	r2, [pc, #304]	; (8003650 <HAL_DMA_Abort_IT+0x1cc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d013      	beq.n	800354c <HAL_DMA_Abort_IT+0xc8>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a4a      	ldr	r2, [pc, #296]	; (8003654 <HAL_DMA_Abort_IT+0x1d0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d00e      	beq.n	800354c <HAL_DMA_Abort_IT+0xc8>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a49      	ldr	r2, [pc, #292]	; (8003658 <HAL_DMA_Abort_IT+0x1d4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d009      	beq.n	800354c <HAL_DMA_Abort_IT+0xc8>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a47      	ldr	r2, [pc, #284]	; (800365c <HAL_DMA_Abort_IT+0x1d8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d004      	beq.n	800354c <HAL_DMA_Abort_IT+0xc8>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a46      	ldr	r2, [pc, #280]	; (8003660 <HAL_DMA_Abort_IT+0x1dc>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d101      	bne.n	8003550 <HAL_DMA_Abort_IT+0xcc>
 800354c:	2301      	movs	r3, #1
 800354e:	e000      	b.n	8003552 <HAL_DMA_Abort_IT+0xce>
 8003550:	2300      	movs	r3, #0
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 8086 	beq.w	8003664 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2204      	movs	r2, #4
 800355c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a2f      	ldr	r2, [pc, #188]	; (8003624 <HAL_DMA_Abort_IT+0x1a0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d04a      	beq.n	8003600 <HAL_DMA_Abort_IT+0x17c>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a2e      	ldr	r2, [pc, #184]	; (8003628 <HAL_DMA_Abort_IT+0x1a4>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d045      	beq.n	8003600 <HAL_DMA_Abort_IT+0x17c>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a2c      	ldr	r2, [pc, #176]	; (800362c <HAL_DMA_Abort_IT+0x1a8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d040      	beq.n	8003600 <HAL_DMA_Abort_IT+0x17c>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a2b      	ldr	r2, [pc, #172]	; (8003630 <HAL_DMA_Abort_IT+0x1ac>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d03b      	beq.n	8003600 <HAL_DMA_Abort_IT+0x17c>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a29      	ldr	r2, [pc, #164]	; (8003634 <HAL_DMA_Abort_IT+0x1b0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d036      	beq.n	8003600 <HAL_DMA_Abort_IT+0x17c>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a28      	ldr	r2, [pc, #160]	; (8003638 <HAL_DMA_Abort_IT+0x1b4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d031      	beq.n	8003600 <HAL_DMA_Abort_IT+0x17c>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a26      	ldr	r2, [pc, #152]	; (800363c <HAL_DMA_Abort_IT+0x1b8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d02c      	beq.n	8003600 <HAL_DMA_Abort_IT+0x17c>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a25      	ldr	r2, [pc, #148]	; (8003640 <HAL_DMA_Abort_IT+0x1bc>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d027      	beq.n	8003600 <HAL_DMA_Abort_IT+0x17c>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a23      	ldr	r2, [pc, #140]	; (8003644 <HAL_DMA_Abort_IT+0x1c0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d022      	beq.n	8003600 <HAL_DMA_Abort_IT+0x17c>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a22      	ldr	r2, [pc, #136]	; (8003648 <HAL_DMA_Abort_IT+0x1c4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d01d      	beq.n	8003600 <HAL_DMA_Abort_IT+0x17c>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a20      	ldr	r2, [pc, #128]	; (800364c <HAL_DMA_Abort_IT+0x1c8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d018      	beq.n	8003600 <HAL_DMA_Abort_IT+0x17c>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1f      	ldr	r2, [pc, #124]	; (8003650 <HAL_DMA_Abort_IT+0x1cc>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d013      	beq.n	8003600 <HAL_DMA_Abort_IT+0x17c>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a1d      	ldr	r2, [pc, #116]	; (8003654 <HAL_DMA_Abort_IT+0x1d0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d00e      	beq.n	8003600 <HAL_DMA_Abort_IT+0x17c>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a1c      	ldr	r2, [pc, #112]	; (8003658 <HAL_DMA_Abort_IT+0x1d4>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d009      	beq.n	8003600 <HAL_DMA_Abort_IT+0x17c>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a1a      	ldr	r2, [pc, #104]	; (800365c <HAL_DMA_Abort_IT+0x1d8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d004      	beq.n	8003600 <HAL_DMA_Abort_IT+0x17c>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a19      	ldr	r2, [pc, #100]	; (8003660 <HAL_DMA_Abort_IT+0x1dc>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d108      	bne.n	8003612 <HAL_DMA_Abort_IT+0x18e>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0201 	bic.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	e178      	b.n	8003904 <HAL_DMA_Abort_IT+0x480>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0201 	bic.w	r2, r2, #1
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	e16f      	b.n	8003904 <HAL_DMA_Abort_IT+0x480>
 8003624:	40020010 	.word	0x40020010
 8003628:	40020028 	.word	0x40020028
 800362c:	40020040 	.word	0x40020040
 8003630:	40020058 	.word	0x40020058
 8003634:	40020070 	.word	0x40020070
 8003638:	40020088 	.word	0x40020088
 800363c:	400200a0 	.word	0x400200a0
 8003640:	400200b8 	.word	0x400200b8
 8003644:	40020410 	.word	0x40020410
 8003648:	40020428 	.word	0x40020428
 800364c:	40020440 	.word	0x40020440
 8003650:	40020458 	.word	0x40020458
 8003654:	40020470 	.word	0x40020470
 8003658:	40020488 	.word	0x40020488
 800365c:	400204a0 	.word	0x400204a0
 8003660:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 020e 	bic.w	r2, r2, #14
 8003672:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a6c      	ldr	r2, [pc, #432]	; (800382c <HAL_DMA_Abort_IT+0x3a8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d04a      	beq.n	8003714 <HAL_DMA_Abort_IT+0x290>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a6b      	ldr	r2, [pc, #428]	; (8003830 <HAL_DMA_Abort_IT+0x3ac>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d045      	beq.n	8003714 <HAL_DMA_Abort_IT+0x290>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a69      	ldr	r2, [pc, #420]	; (8003834 <HAL_DMA_Abort_IT+0x3b0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d040      	beq.n	8003714 <HAL_DMA_Abort_IT+0x290>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a68      	ldr	r2, [pc, #416]	; (8003838 <HAL_DMA_Abort_IT+0x3b4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d03b      	beq.n	8003714 <HAL_DMA_Abort_IT+0x290>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a66      	ldr	r2, [pc, #408]	; (800383c <HAL_DMA_Abort_IT+0x3b8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d036      	beq.n	8003714 <HAL_DMA_Abort_IT+0x290>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a65      	ldr	r2, [pc, #404]	; (8003840 <HAL_DMA_Abort_IT+0x3bc>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d031      	beq.n	8003714 <HAL_DMA_Abort_IT+0x290>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a63      	ldr	r2, [pc, #396]	; (8003844 <HAL_DMA_Abort_IT+0x3c0>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d02c      	beq.n	8003714 <HAL_DMA_Abort_IT+0x290>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a62      	ldr	r2, [pc, #392]	; (8003848 <HAL_DMA_Abort_IT+0x3c4>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d027      	beq.n	8003714 <HAL_DMA_Abort_IT+0x290>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a60      	ldr	r2, [pc, #384]	; (800384c <HAL_DMA_Abort_IT+0x3c8>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d022      	beq.n	8003714 <HAL_DMA_Abort_IT+0x290>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a5f      	ldr	r2, [pc, #380]	; (8003850 <HAL_DMA_Abort_IT+0x3cc>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d01d      	beq.n	8003714 <HAL_DMA_Abort_IT+0x290>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a5d      	ldr	r2, [pc, #372]	; (8003854 <HAL_DMA_Abort_IT+0x3d0>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d018      	beq.n	8003714 <HAL_DMA_Abort_IT+0x290>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a5c      	ldr	r2, [pc, #368]	; (8003858 <HAL_DMA_Abort_IT+0x3d4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d013      	beq.n	8003714 <HAL_DMA_Abort_IT+0x290>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a5a      	ldr	r2, [pc, #360]	; (800385c <HAL_DMA_Abort_IT+0x3d8>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d00e      	beq.n	8003714 <HAL_DMA_Abort_IT+0x290>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a59      	ldr	r2, [pc, #356]	; (8003860 <HAL_DMA_Abort_IT+0x3dc>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d009      	beq.n	8003714 <HAL_DMA_Abort_IT+0x290>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a57      	ldr	r2, [pc, #348]	; (8003864 <HAL_DMA_Abort_IT+0x3e0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d004      	beq.n	8003714 <HAL_DMA_Abort_IT+0x290>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a56      	ldr	r2, [pc, #344]	; (8003868 <HAL_DMA_Abort_IT+0x3e4>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d108      	bne.n	8003726 <HAL_DMA_Abort_IT+0x2a2>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0201 	bic.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	e007      	b.n	8003736 <HAL_DMA_Abort_IT+0x2b2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0201 	bic.w	r2, r2, #1
 8003734:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a3c      	ldr	r2, [pc, #240]	; (800382c <HAL_DMA_Abort_IT+0x3a8>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d072      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a3a      	ldr	r2, [pc, #232]	; (8003830 <HAL_DMA_Abort_IT+0x3ac>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d06d      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a39      	ldr	r2, [pc, #228]	; (8003834 <HAL_DMA_Abort_IT+0x3b0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d068      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a37      	ldr	r2, [pc, #220]	; (8003838 <HAL_DMA_Abort_IT+0x3b4>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d063      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a36      	ldr	r2, [pc, #216]	; (800383c <HAL_DMA_Abort_IT+0x3b8>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d05e      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a34      	ldr	r2, [pc, #208]	; (8003840 <HAL_DMA_Abort_IT+0x3bc>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d059      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a33      	ldr	r2, [pc, #204]	; (8003844 <HAL_DMA_Abort_IT+0x3c0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d054      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a31      	ldr	r2, [pc, #196]	; (8003848 <HAL_DMA_Abort_IT+0x3c4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d04f      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a30      	ldr	r2, [pc, #192]	; (800384c <HAL_DMA_Abort_IT+0x3c8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d04a      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a2e      	ldr	r2, [pc, #184]	; (8003850 <HAL_DMA_Abort_IT+0x3cc>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d045      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a2d      	ldr	r2, [pc, #180]	; (8003854 <HAL_DMA_Abort_IT+0x3d0>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d040      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a2b      	ldr	r2, [pc, #172]	; (8003858 <HAL_DMA_Abort_IT+0x3d4>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d03b      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a2a      	ldr	r2, [pc, #168]	; (800385c <HAL_DMA_Abort_IT+0x3d8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d036      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a28      	ldr	r2, [pc, #160]	; (8003860 <HAL_DMA_Abort_IT+0x3dc>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d031      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a27      	ldr	r2, [pc, #156]	; (8003864 <HAL_DMA_Abort_IT+0x3e0>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d02c      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a25      	ldr	r2, [pc, #148]	; (8003868 <HAL_DMA_Abort_IT+0x3e4>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d027      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a24      	ldr	r2, [pc, #144]	; (800386c <HAL_DMA_Abort_IT+0x3e8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d022      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a22      	ldr	r2, [pc, #136]	; (8003870 <HAL_DMA_Abort_IT+0x3ec>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d01d      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a21      	ldr	r2, [pc, #132]	; (8003874 <HAL_DMA_Abort_IT+0x3f0>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d018      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a1f      	ldr	r2, [pc, #124]	; (8003878 <HAL_DMA_Abort_IT+0x3f4>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d013      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a1e      	ldr	r2, [pc, #120]	; (800387c <HAL_DMA_Abort_IT+0x3f8>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d00e      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a1c      	ldr	r2, [pc, #112]	; (8003880 <HAL_DMA_Abort_IT+0x3fc>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d009      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a1b      	ldr	r2, [pc, #108]	; (8003884 <HAL_DMA_Abort_IT+0x400>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d004      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a19      	ldr	r2, [pc, #100]	; (8003888 <HAL_DMA_Abort_IT+0x404>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d132      	bne.n	800388c <HAL_DMA_Abort_IT+0x408>
 8003826:	2301      	movs	r3, #1
 8003828:	e031      	b.n	800388e <HAL_DMA_Abort_IT+0x40a>
 800382a:	bf00      	nop
 800382c:	40020010 	.word	0x40020010
 8003830:	40020028 	.word	0x40020028
 8003834:	40020040 	.word	0x40020040
 8003838:	40020058 	.word	0x40020058
 800383c:	40020070 	.word	0x40020070
 8003840:	40020088 	.word	0x40020088
 8003844:	400200a0 	.word	0x400200a0
 8003848:	400200b8 	.word	0x400200b8
 800384c:	40020410 	.word	0x40020410
 8003850:	40020428 	.word	0x40020428
 8003854:	40020440 	.word	0x40020440
 8003858:	40020458 	.word	0x40020458
 800385c:	40020470 	.word	0x40020470
 8003860:	40020488 	.word	0x40020488
 8003864:	400204a0 	.word	0x400204a0
 8003868:	400204b8 	.word	0x400204b8
 800386c:	58025408 	.word	0x58025408
 8003870:	5802541c 	.word	0x5802541c
 8003874:	58025430 	.word	0x58025430
 8003878:	58025444 	.word	0x58025444
 800387c:	58025458 	.word	0x58025458
 8003880:	5802546c 	.word	0x5802546c
 8003884:	58025480 	.word	0x58025480
 8003888:	58025494 	.word	0x58025494
 800388c:	2300      	movs	r3, #0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d028      	beq.n	80038e4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800389c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038a0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ac:	f003 031f 	and.w	r3, r3, #31
 80038b0:	2201      	movs	r2, #1
 80038b2:	409a      	lsls	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80038c0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00c      	beq.n	80038e4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038d8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80038e2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop

08003910 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003910:	b480      	push	{r7}
 8003912:	b089      	sub	sp, #36	; 0x24
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800391a:	2300      	movs	r3, #0
 800391c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800391e:	4b89      	ldr	r3, [pc, #548]	; (8003b44 <HAL_GPIO_Init+0x234>)
 8003920:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003922:	e194      	b.n	8003c4e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	2101      	movs	r1, #1
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	fa01 f303 	lsl.w	r3, r1, r3
 8003930:	4013      	ands	r3, r2
 8003932:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 8186 	beq.w	8003c48 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 0303 	and.w	r3, r3, #3
 8003944:	2b01      	cmp	r3, #1
 8003946:	d005      	beq.n	8003954 <HAL_GPIO_Init+0x44>
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f003 0303 	and.w	r3, r3, #3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d130      	bne.n	80039b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	2203      	movs	r2, #3
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	43db      	mvns	r3, r3
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4013      	ands	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	4313      	orrs	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800398a:	2201      	movs	r2, #1
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	43db      	mvns	r3, r3
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	4013      	ands	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	091b      	lsrs	r3, r3, #4
 80039a0:	f003 0201 	and.w	r2, r3, #1
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	2b03      	cmp	r3, #3
 80039c0:	d017      	beq.n	80039f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	2203      	movs	r2, #3
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	43db      	mvns	r3, r3
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	4013      	ands	r3, r2
 80039d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	689a      	ldr	r2, [r3, #8]
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f003 0303 	and.w	r3, r3, #3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d123      	bne.n	8003a46 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	08da      	lsrs	r2, r3, #3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3208      	adds	r2, #8
 8003a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	220f      	movs	r2, #15
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	691a      	ldr	r2, [r3, #16]
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	08da      	lsrs	r2, r3, #3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3208      	adds	r2, #8
 8003a40:	69b9      	ldr	r1, [r7, #24]
 8003a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	2203      	movs	r2, #3
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	43db      	mvns	r3, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f003 0203 	and.w	r2, r3, #3
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 80e0 	beq.w	8003c48 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a88:	4b2f      	ldr	r3, [pc, #188]	; (8003b48 <HAL_GPIO_Init+0x238>)
 8003a8a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003a8e:	4a2e      	ldr	r2, [pc, #184]	; (8003b48 <HAL_GPIO_Init+0x238>)
 8003a90:	f043 0302 	orr.w	r3, r3, #2
 8003a94:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003a98:	4b2b      	ldr	r3, [pc, #172]	; (8003b48 <HAL_GPIO_Init+0x238>)
 8003a9a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003aa6:	4a29      	ldr	r2, [pc, #164]	; (8003b4c <HAL_GPIO_Init+0x23c>)
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	089b      	lsrs	r3, r3, #2
 8003aac:	3302      	adds	r3, #2
 8003aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	220f      	movs	r2, #15
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a20      	ldr	r2, [pc, #128]	; (8003b50 <HAL_GPIO_Init+0x240>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d052      	beq.n	8003b78 <HAL_GPIO_Init+0x268>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a1f      	ldr	r2, [pc, #124]	; (8003b54 <HAL_GPIO_Init+0x244>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d031      	beq.n	8003b3e <HAL_GPIO_Init+0x22e>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a1e      	ldr	r2, [pc, #120]	; (8003b58 <HAL_GPIO_Init+0x248>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d02b      	beq.n	8003b3a <HAL_GPIO_Init+0x22a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a1d      	ldr	r2, [pc, #116]	; (8003b5c <HAL_GPIO_Init+0x24c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d025      	beq.n	8003b36 <HAL_GPIO_Init+0x226>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a1c      	ldr	r2, [pc, #112]	; (8003b60 <HAL_GPIO_Init+0x250>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d01f      	beq.n	8003b32 <HAL_GPIO_Init+0x222>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a1b      	ldr	r2, [pc, #108]	; (8003b64 <HAL_GPIO_Init+0x254>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d019      	beq.n	8003b2e <HAL_GPIO_Init+0x21e>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a1a      	ldr	r2, [pc, #104]	; (8003b68 <HAL_GPIO_Init+0x258>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d013      	beq.n	8003b2a <HAL_GPIO_Init+0x21a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a19      	ldr	r2, [pc, #100]	; (8003b6c <HAL_GPIO_Init+0x25c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d00d      	beq.n	8003b26 <HAL_GPIO_Init+0x216>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a18      	ldr	r2, [pc, #96]	; (8003b70 <HAL_GPIO_Init+0x260>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d007      	beq.n	8003b22 <HAL_GPIO_Init+0x212>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a17      	ldr	r2, [pc, #92]	; (8003b74 <HAL_GPIO_Init+0x264>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d101      	bne.n	8003b1e <HAL_GPIO_Init+0x20e>
 8003b1a:	2309      	movs	r3, #9
 8003b1c:	e02d      	b.n	8003b7a <HAL_GPIO_Init+0x26a>
 8003b1e:	230a      	movs	r3, #10
 8003b20:	e02b      	b.n	8003b7a <HAL_GPIO_Init+0x26a>
 8003b22:	2308      	movs	r3, #8
 8003b24:	e029      	b.n	8003b7a <HAL_GPIO_Init+0x26a>
 8003b26:	2307      	movs	r3, #7
 8003b28:	e027      	b.n	8003b7a <HAL_GPIO_Init+0x26a>
 8003b2a:	2306      	movs	r3, #6
 8003b2c:	e025      	b.n	8003b7a <HAL_GPIO_Init+0x26a>
 8003b2e:	2305      	movs	r3, #5
 8003b30:	e023      	b.n	8003b7a <HAL_GPIO_Init+0x26a>
 8003b32:	2304      	movs	r3, #4
 8003b34:	e021      	b.n	8003b7a <HAL_GPIO_Init+0x26a>
 8003b36:	2303      	movs	r3, #3
 8003b38:	e01f      	b.n	8003b7a <HAL_GPIO_Init+0x26a>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	e01d      	b.n	8003b7a <HAL_GPIO_Init+0x26a>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e01b      	b.n	8003b7a <HAL_GPIO_Init+0x26a>
 8003b42:	bf00      	nop
 8003b44:	58000080 	.word	0x58000080
 8003b48:	58024400 	.word	0x58024400
 8003b4c:	58000400 	.word	0x58000400
 8003b50:	58020000 	.word	0x58020000
 8003b54:	58020400 	.word	0x58020400
 8003b58:	58020800 	.word	0x58020800
 8003b5c:	58020c00 	.word	0x58020c00
 8003b60:	58021000 	.word	0x58021000
 8003b64:	58021400 	.word	0x58021400
 8003b68:	58021800 	.word	0x58021800
 8003b6c:	58021c00 	.word	0x58021c00
 8003b70:	58022000 	.word	0x58022000
 8003b74:	58022400 	.word	0x58022400
 8003b78:	2300      	movs	r3, #0
 8003b7a:	69fa      	ldr	r2, [r7, #28]
 8003b7c:	f002 0203 	and.w	r2, r2, #3
 8003b80:	0092      	lsls	r2, r2, #2
 8003b82:	4093      	lsls	r3, r2
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b8a:	4938      	ldr	r1, [pc, #224]	; (8003c6c <HAL_GPIO_Init+0x35c>)
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	089b      	lsrs	r3, r3, #2
 8003b90:	3302      	adds	r3, #2
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003bbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003bec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	4013      	ands	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	43db      	mvns	r3, r3
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	fa22 f303 	lsr.w	r3, r2, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f47f ae63 	bne.w	8003924 <HAL_GPIO_Init+0x14>
  }
}
 8003c5e:	bf00      	nop
 8003c60:	bf00      	nop
 8003c62:	3724      	adds	r7, #36	; 0x24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	58000400 	.word	0x58000400

08003c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	807b      	strh	r3, [r7, #2]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c80:	787b      	ldrb	r3, [r7, #1]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c86:	887a      	ldrh	r2, [r7, #2]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003c8c:	e003      	b.n	8003c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003c8e:	887b      	ldrh	r3, [r7, #2]
 8003c90:	041a      	lsls	r2, r3, #16
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	619a      	str	r2, [r3, #24]
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
	...

08003ca4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003cac:	4b29      	ldr	r3, [pc, #164]	; (8003d54 <HAL_PWREx_ConfigSupply+0xb0>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	2b06      	cmp	r3, #6
 8003cb6:	d00a      	beq.n	8003cce <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003cb8:	4b26      	ldr	r3, [pc, #152]	; (8003d54 <HAL_PWREx_ConfigSupply+0xb0>)
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d001      	beq.n	8003cca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e040      	b.n	8003d4c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	e03e      	b.n	8003d4c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003cce:	4b21      	ldr	r3, [pc, #132]	; (8003d54 <HAL_PWREx_ConfigSupply+0xb0>)
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003cd6:	491f      	ldr	r1, [pc, #124]	; (8003d54 <HAL_PWREx_ConfigSupply+0xb0>)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003cde:	f7fd fdc9 	bl	8001874 <HAL_GetTick>
 8003ce2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003ce4:	e009      	b.n	8003cfa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003ce6:	f7fd fdc5 	bl	8001874 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cf4:	d901      	bls.n	8003cfa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e028      	b.n	8003d4c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003cfa:	4b16      	ldr	r3, [pc, #88]	; (8003d54 <HAL_PWREx_ConfigSupply+0xb0>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d06:	d1ee      	bne.n	8003ce6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b1e      	cmp	r3, #30
 8003d0c:	d008      	beq.n	8003d20 <HAL_PWREx_ConfigSupply+0x7c>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b2e      	cmp	r3, #46	; 0x2e
 8003d12:	d005      	beq.n	8003d20 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b1d      	cmp	r3, #29
 8003d18:	d002      	beq.n	8003d20 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b2d      	cmp	r3, #45	; 0x2d
 8003d1e:	d114      	bne.n	8003d4a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003d20:	f7fd fda8 	bl	8001874 <HAL_GetTick>
 8003d24:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003d26:	e009      	b.n	8003d3c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d28:	f7fd fda4 	bl	8001874 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d36:	d901      	bls.n	8003d3c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e007      	b.n	8003d4c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003d3c:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d48:	d1ee      	bne.n	8003d28 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	58024800 	.word	0x58024800

08003d58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08c      	sub	sp, #48	; 0x30
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d102      	bne.n	8003d6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	f000 bc1f 	b.w	80045aa <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 80b3 	beq.w	8003ee0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d7a:	4b95      	ldr	r3, [pc, #596]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d84:	4b92      	ldr	r3, [pc, #584]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d88:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8c:	2b10      	cmp	r3, #16
 8003d8e:	d007      	beq.n	8003da0 <HAL_RCC_OscConfig+0x48>
 8003d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d92:	2b18      	cmp	r3, #24
 8003d94:	d112      	bne.n	8003dbc <HAL_RCC_OscConfig+0x64>
 8003d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d98:	f003 0303 	and.w	r3, r3, #3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d10d      	bne.n	8003dbc <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da0:	4b8b      	ldr	r3, [pc, #556]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 8098 	beq.w	8003ede <HAL_RCC_OscConfig+0x186>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f040 8093 	bne.w	8003ede <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e3f6      	b.n	80045aa <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc4:	d106      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x7c>
 8003dc6:	4b82      	ldr	r3, [pc, #520]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a81      	ldr	r2, [pc, #516]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	e058      	b.n	8003e86 <HAL_RCC_OscConfig+0x12e>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d112      	bne.n	8003e02 <HAL_RCC_OscConfig+0xaa>
 8003ddc:	4b7c      	ldr	r3, [pc, #496]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a7b      	ldr	r2, [pc, #492]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de6:	6013      	str	r3, [r2, #0]
 8003de8:	4b79      	ldr	r3, [pc, #484]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a78      	ldr	r2, [pc, #480]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003dee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003df2:	6013      	str	r3, [r2, #0]
 8003df4:	4b76      	ldr	r3, [pc, #472]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a75      	ldr	r2, [pc, #468]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dfe:	6013      	str	r3, [r2, #0]
 8003e00:	e041      	b.n	8003e86 <HAL_RCC_OscConfig+0x12e>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e0a:	d112      	bne.n	8003e32 <HAL_RCC_OscConfig+0xda>
 8003e0c:	4b70      	ldr	r3, [pc, #448]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a6f      	ldr	r2, [pc, #444]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003e12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e16:	6013      	str	r3, [r2, #0]
 8003e18:	4b6d      	ldr	r3, [pc, #436]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a6c      	ldr	r2, [pc, #432]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003e1e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003e22:	6013      	str	r3, [r2, #0]
 8003e24:	4b6a      	ldr	r3, [pc, #424]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a69      	ldr	r2, [pc, #420]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e2e:	6013      	str	r3, [r2, #0]
 8003e30:	e029      	b.n	8003e86 <HAL_RCC_OscConfig+0x12e>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003e3a:	d112      	bne.n	8003e62 <HAL_RCC_OscConfig+0x10a>
 8003e3c:	4b64      	ldr	r3, [pc, #400]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a63      	ldr	r2, [pc, #396]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003e42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e46:	6013      	str	r3, [r2, #0]
 8003e48:	4b61      	ldr	r3, [pc, #388]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a60      	ldr	r2, [pc, #384]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003e4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e52:	6013      	str	r3, [r2, #0]
 8003e54:	4b5e      	ldr	r3, [pc, #376]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a5d      	ldr	r2, [pc, #372]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e5e:	6013      	str	r3, [r2, #0]
 8003e60:	e011      	b.n	8003e86 <HAL_RCC_OscConfig+0x12e>
 8003e62:	4b5b      	ldr	r3, [pc, #364]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a5a      	ldr	r2, [pc, #360]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	4b58      	ldr	r3, [pc, #352]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a57      	ldr	r2, [pc, #348]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003e74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	4b55      	ldr	r3, [pc, #340]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a54      	ldr	r2, [pc, #336]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003e80:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003e84:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d013      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8e:	f7fd fcf1 	bl	8001874 <HAL_GetTick>
 8003e92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e96:	f7fd fced 	bl	8001874 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b64      	cmp	r3, #100	; 0x64
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e380      	b.n	80045aa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ea8:	4b49      	ldr	r3, [pc, #292]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0f0      	beq.n	8003e96 <HAL_RCC_OscConfig+0x13e>
 8003eb4:	e014      	b.n	8003ee0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb6:	f7fd fcdd 	bl	8001874 <HAL_GetTick>
 8003eba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ebe:	f7fd fcd9 	bl	8001874 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b64      	cmp	r3, #100	; 0x64
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e36c      	b.n	80045aa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ed0:	4b3f      	ldr	r3, [pc, #252]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1f0      	bne.n	8003ebe <HAL_RCC_OscConfig+0x166>
 8003edc:	e000      	b.n	8003ee0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ede:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 808c 	beq.w	8004006 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eee:	4b38      	ldr	r3, [pc, #224]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ef6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ef8:	4b35      	ldr	r3, [pc, #212]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efc:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <HAL_RCC_OscConfig+0x1bc>
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	2b18      	cmp	r3, #24
 8003f08:	d137      	bne.n	8003f7a <HAL_RCC_OscConfig+0x222>
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	f003 0303 	and.w	r3, r3, #3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d132      	bne.n	8003f7a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f14:	4b2e      	ldr	r3, [pc, #184]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d005      	beq.n	8003f2c <HAL_RCC_OscConfig+0x1d4>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e33e      	b.n	80045aa <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f2c:	4b28      	ldr	r3, [pc, #160]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f023 0219 	bic.w	r2, r3, #25
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	4925      	ldr	r1, [pc, #148]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3e:	f7fd fc99 	bl	8001874 <HAL_GetTick>
 8003f42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f44:	e008      	b.n	8003f58 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f46:	f7fd fc95 	bl	8001874 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e328      	b.n	80045aa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f58:	4b1d      	ldr	r3, [pc, #116]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0f0      	beq.n	8003f46 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f64:	4b1a      	ldr	r3, [pc, #104]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	061b      	lsls	r3, r3, #24
 8003f72:	4917      	ldr	r1, [pc, #92]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f78:	e045      	b.n	8004006 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d028      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f82:	4b13      	ldr	r3, [pc, #76]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f023 0219 	bic.w	r2, r3, #25
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	4910      	ldr	r1, [pc, #64]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f94:	f7fd fc6e 	bl	8001874 <HAL_GetTick>
 8003f98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f9c:	f7fd fc6a 	bl	8001874 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e2fd      	b.n	80045aa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fae:	4b08      	ldr	r3, [pc, #32]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0f0      	beq.n	8003f9c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fba:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	061b      	lsls	r3, r3, #24
 8003fc8:	4901      	ldr	r1, [pc, #4]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	604b      	str	r3, [r1, #4]
 8003fce:	e01a      	b.n	8004006 <HAL_RCC_OscConfig+0x2ae>
 8003fd0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fd4:	4b97      	ldr	r3, [pc, #604]	; (8004234 <HAL_RCC_OscConfig+0x4dc>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a96      	ldr	r2, [pc, #600]	; (8004234 <HAL_RCC_OscConfig+0x4dc>)
 8003fda:	f023 0301 	bic.w	r3, r3, #1
 8003fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe0:	f7fd fc48 	bl	8001874 <HAL_GetTick>
 8003fe4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fe8:	f7fd fc44 	bl	8001874 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e2d7      	b.n	80045aa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ffa:	4b8e      	ldr	r3, [pc, #568]	; (8004234 <HAL_RCC_OscConfig+0x4dc>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0304 	and.w	r3, r3, #4
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1f0      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0310 	and.w	r3, r3, #16
 800400e:	2b00      	cmp	r3, #0
 8004010:	d06a      	beq.n	80040e8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004012:	4b88      	ldr	r3, [pc, #544]	; (8004234 <HAL_RCC_OscConfig+0x4dc>)
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800401a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800401c:	4b85      	ldr	r3, [pc, #532]	; (8004234 <HAL_RCC_OscConfig+0x4dc>)
 800401e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004020:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	2b08      	cmp	r3, #8
 8004026:	d007      	beq.n	8004038 <HAL_RCC_OscConfig+0x2e0>
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	2b18      	cmp	r3, #24
 800402c:	d11b      	bne.n	8004066 <HAL_RCC_OscConfig+0x30e>
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f003 0303 	and.w	r3, r3, #3
 8004034:	2b01      	cmp	r3, #1
 8004036:	d116      	bne.n	8004066 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004038:	4b7e      	ldr	r3, [pc, #504]	; (8004234 <HAL_RCC_OscConfig+0x4dc>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <HAL_RCC_OscConfig+0x2f8>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	2b80      	cmp	r3, #128	; 0x80
 800404a:	d001      	beq.n	8004050 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e2ac      	b.n	80045aa <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004050:	4b78      	ldr	r3, [pc, #480]	; (8004234 <HAL_RCC_OscConfig+0x4dc>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	061b      	lsls	r3, r3, #24
 800405e:	4975      	ldr	r1, [pc, #468]	; (8004234 <HAL_RCC_OscConfig+0x4dc>)
 8004060:	4313      	orrs	r3, r2
 8004062:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004064:	e040      	b.n	80040e8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d023      	beq.n	80040b6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800406e:	4b71      	ldr	r3, [pc, #452]	; (8004234 <HAL_RCC_OscConfig+0x4dc>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a70      	ldr	r2, [pc, #448]	; (8004234 <HAL_RCC_OscConfig+0x4dc>)
 8004074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407a:	f7fd fbfb 	bl	8001874 <HAL_GetTick>
 800407e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004082:	f7fd fbf7 	bl	8001874 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e28a      	b.n	80045aa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004094:	4b67      	ldr	r3, [pc, #412]	; (8004234 <HAL_RCC_OscConfig+0x4dc>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0f0      	beq.n	8004082 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040a0:	4b64      	ldr	r3, [pc, #400]	; (8004234 <HAL_RCC_OscConfig+0x4dc>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	061b      	lsls	r3, r3, #24
 80040ae:	4961      	ldr	r1, [pc, #388]	; (8004234 <HAL_RCC_OscConfig+0x4dc>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60cb      	str	r3, [r1, #12]
 80040b4:	e018      	b.n	80040e8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80040b6:	4b5f      	ldr	r3, [pc, #380]	; (8004234 <HAL_RCC_OscConfig+0x4dc>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a5e      	ldr	r2, [pc, #376]	; (8004234 <HAL_RCC_OscConfig+0x4dc>)
 80040bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c2:	f7fd fbd7 	bl	8001874 <HAL_GetTick>
 80040c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80040ca:	f7fd fbd3 	bl	8001874 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e266      	b.n	80045aa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040dc:	4b55      	ldr	r3, [pc, #340]	; (8004234 <HAL_RCC_OscConfig+0x4dc>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1f0      	bne.n	80040ca <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0308 	and.w	r3, r3, #8
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d036      	beq.n	8004162 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d019      	beq.n	8004130 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040fc:	4b4d      	ldr	r3, [pc, #308]	; (8004234 <HAL_RCC_OscConfig+0x4dc>)
 80040fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004100:	4a4c      	ldr	r2, [pc, #304]	; (8004234 <HAL_RCC_OscConfig+0x4dc>)
 8004102:	f043 0301 	orr.w	r3, r3, #1
 8004106:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004108:	f7fd fbb4 	bl	8001874 <HAL_GetTick>
 800410c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004110:	f7fd fbb0 	bl	8001874 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e243      	b.n	80045aa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004122:	4b44      	ldr	r3, [pc, #272]	; (8004234 <HAL_RCC_OscConfig+0x4dc>)
 8004124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0f0      	beq.n	8004110 <HAL_RCC_OscConfig+0x3b8>
 800412e:	e018      	b.n	8004162 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004130:	4b40      	ldr	r3, [pc, #256]	; (8004234 <HAL_RCC_OscConfig+0x4dc>)
 8004132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004134:	4a3f      	ldr	r2, [pc, #252]	; (8004234 <HAL_RCC_OscConfig+0x4dc>)
 8004136:	f023 0301 	bic.w	r3, r3, #1
 800413a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413c:	f7fd fb9a 	bl	8001874 <HAL_GetTick>
 8004140:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004144:	f7fd fb96 	bl	8001874 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e229      	b.n	80045aa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004156:	4b37      	ldr	r3, [pc, #220]	; (8004234 <HAL_RCC_OscConfig+0x4dc>)
 8004158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1f0      	bne.n	8004144 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0320 	and.w	r3, r3, #32
 800416a:	2b00      	cmp	r3, #0
 800416c:	d036      	beq.n	80041dc <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d019      	beq.n	80041aa <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004176:	4b2f      	ldr	r3, [pc, #188]	; (8004234 <HAL_RCC_OscConfig+0x4dc>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a2e      	ldr	r2, [pc, #184]	; (8004234 <HAL_RCC_OscConfig+0x4dc>)
 800417c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004180:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004182:	f7fd fb77 	bl	8001874 <HAL_GetTick>
 8004186:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004188:	e008      	b.n	800419c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800418a:	f7fd fb73 	bl	8001874 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e206      	b.n	80045aa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800419c:	4b25      	ldr	r3, [pc, #148]	; (8004234 <HAL_RCC_OscConfig+0x4dc>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0f0      	beq.n	800418a <HAL_RCC_OscConfig+0x432>
 80041a8:	e018      	b.n	80041dc <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041aa:	4b22      	ldr	r3, [pc, #136]	; (8004234 <HAL_RCC_OscConfig+0x4dc>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a21      	ldr	r2, [pc, #132]	; (8004234 <HAL_RCC_OscConfig+0x4dc>)
 80041b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80041b6:	f7fd fb5d 	bl	8001874 <HAL_GetTick>
 80041ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041bc:	e008      	b.n	80041d0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041be:	f7fd fb59 	bl	8001874 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e1ec      	b.n	80045aa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041d0:	4b18      	ldr	r3, [pc, #96]	; (8004234 <HAL_RCC_OscConfig+0x4dc>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1f0      	bne.n	80041be <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 80af 	beq.w	8004348 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041ea:	4b13      	ldr	r3, [pc, #76]	; (8004238 <HAL_RCC_OscConfig+0x4e0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a12      	ldr	r2, [pc, #72]	; (8004238 <HAL_RCC_OscConfig+0x4e0>)
 80041f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041f6:	f7fd fb3d 	bl	8001874 <HAL_GetTick>
 80041fa:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041fe:	f7fd fb39 	bl	8001874 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b64      	cmp	r3, #100	; 0x64
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e1cc      	b.n	80045aa <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004210:	4b09      	ldr	r3, [pc, #36]	; (8004238 <HAL_RCC_OscConfig+0x4e0>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0f0      	beq.n	80041fe <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d10b      	bne.n	800423c <HAL_RCC_OscConfig+0x4e4>
 8004224:	4b03      	ldr	r3, [pc, #12]	; (8004234 <HAL_RCC_OscConfig+0x4dc>)
 8004226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004228:	4a02      	ldr	r2, [pc, #8]	; (8004234 <HAL_RCC_OscConfig+0x4dc>)
 800422a:	f043 0301 	orr.w	r3, r3, #1
 800422e:	6713      	str	r3, [r2, #112]	; 0x70
 8004230:	e05b      	b.n	80042ea <HAL_RCC_OscConfig+0x592>
 8004232:	bf00      	nop
 8004234:	58024400 	.word	0x58024400
 8004238:	58024800 	.word	0x58024800
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d112      	bne.n	800426a <HAL_RCC_OscConfig+0x512>
 8004244:	4b9d      	ldr	r3, [pc, #628]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 8004246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004248:	4a9c      	ldr	r2, [pc, #624]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 800424a:	f023 0301 	bic.w	r3, r3, #1
 800424e:	6713      	str	r3, [r2, #112]	; 0x70
 8004250:	4b9a      	ldr	r3, [pc, #616]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 8004252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004254:	4a99      	ldr	r2, [pc, #612]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 8004256:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800425a:	6713      	str	r3, [r2, #112]	; 0x70
 800425c:	4b97      	ldr	r3, [pc, #604]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 800425e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004260:	4a96      	ldr	r2, [pc, #600]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 8004262:	f023 0304 	bic.w	r3, r3, #4
 8004266:	6713      	str	r3, [r2, #112]	; 0x70
 8004268:	e03f      	b.n	80042ea <HAL_RCC_OscConfig+0x592>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	2b05      	cmp	r3, #5
 8004270:	d112      	bne.n	8004298 <HAL_RCC_OscConfig+0x540>
 8004272:	4b92      	ldr	r3, [pc, #584]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 8004274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004276:	4a91      	ldr	r2, [pc, #580]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 8004278:	f043 0304 	orr.w	r3, r3, #4
 800427c:	6713      	str	r3, [r2, #112]	; 0x70
 800427e:	4b8f      	ldr	r3, [pc, #572]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 8004280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004282:	4a8e      	ldr	r2, [pc, #568]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 8004284:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004288:	6713      	str	r3, [r2, #112]	; 0x70
 800428a:	4b8c      	ldr	r3, [pc, #560]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 800428c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428e:	4a8b      	ldr	r2, [pc, #556]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 8004290:	f043 0301 	orr.w	r3, r3, #1
 8004294:	6713      	str	r3, [r2, #112]	; 0x70
 8004296:	e028      	b.n	80042ea <HAL_RCC_OscConfig+0x592>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	2b85      	cmp	r3, #133	; 0x85
 800429e:	d112      	bne.n	80042c6 <HAL_RCC_OscConfig+0x56e>
 80042a0:	4b86      	ldr	r3, [pc, #536]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 80042a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a4:	4a85      	ldr	r2, [pc, #532]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 80042a6:	f043 0304 	orr.w	r3, r3, #4
 80042aa:	6713      	str	r3, [r2, #112]	; 0x70
 80042ac:	4b83      	ldr	r3, [pc, #524]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 80042ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b0:	4a82      	ldr	r2, [pc, #520]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 80042b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b6:	6713      	str	r3, [r2, #112]	; 0x70
 80042b8:	4b80      	ldr	r3, [pc, #512]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 80042ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042bc:	4a7f      	ldr	r2, [pc, #508]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 80042be:	f043 0301 	orr.w	r3, r3, #1
 80042c2:	6713      	str	r3, [r2, #112]	; 0x70
 80042c4:	e011      	b.n	80042ea <HAL_RCC_OscConfig+0x592>
 80042c6:	4b7d      	ldr	r3, [pc, #500]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 80042c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ca:	4a7c      	ldr	r2, [pc, #496]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 80042cc:	f023 0301 	bic.w	r3, r3, #1
 80042d0:	6713      	str	r3, [r2, #112]	; 0x70
 80042d2:	4b7a      	ldr	r3, [pc, #488]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 80042d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d6:	4a79      	ldr	r2, [pc, #484]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 80042d8:	f023 0304 	bic.w	r3, r3, #4
 80042dc:	6713      	str	r3, [r2, #112]	; 0x70
 80042de:	4b77      	ldr	r3, [pc, #476]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 80042e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e2:	4a76      	ldr	r2, [pc, #472]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 80042e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d015      	beq.n	800431e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f2:	f7fd fabf 	bl	8001874 <HAL_GetTick>
 80042f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042f8:	e00a      	b.n	8004310 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042fa:	f7fd fabb 	bl	8001874 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	f241 3288 	movw	r2, #5000	; 0x1388
 8004308:	4293      	cmp	r3, r2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e14c      	b.n	80045aa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004310:	4b6a      	ldr	r3, [pc, #424]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 8004312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0ee      	beq.n	80042fa <HAL_RCC_OscConfig+0x5a2>
 800431c:	e014      	b.n	8004348 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800431e:	f7fd faa9 	bl	8001874 <HAL_GetTick>
 8004322:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004324:	e00a      	b.n	800433c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004326:	f7fd faa5 	bl	8001874 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	f241 3288 	movw	r2, #5000	; 0x1388
 8004334:	4293      	cmp	r3, r2
 8004336:	d901      	bls.n	800433c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e136      	b.n	80045aa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800433c:	4b5f      	ldr	r3, [pc, #380]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 800433e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1ee      	bne.n	8004326 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 812b 	beq.w	80045a8 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004352:	4b5a      	ldr	r3, [pc, #360]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800435a:	2b18      	cmp	r3, #24
 800435c:	f000 80bb 	beq.w	80044d6 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	2b02      	cmp	r3, #2
 8004366:	f040 8095 	bne.w	8004494 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800436a:	4b54      	ldr	r3, [pc, #336]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a53      	ldr	r2, [pc, #332]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 8004370:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004374:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004376:	f7fd fa7d 	bl	8001874 <HAL_GetTick>
 800437a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800437c:	e008      	b.n	8004390 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800437e:	f7fd fa79 	bl	8001874 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e10c      	b.n	80045aa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004390:	4b4a      	ldr	r3, [pc, #296]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1f0      	bne.n	800437e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800439c:	4b47      	ldr	r3, [pc, #284]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 800439e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043a0:	4b47      	ldr	r3, [pc, #284]	; (80044c0 <HAL_RCC_OscConfig+0x768>)
 80043a2:	4013      	ands	r3, r2
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80043ac:	0112      	lsls	r2, r2, #4
 80043ae:	430a      	orrs	r2, r1
 80043b0:	4942      	ldr	r1, [pc, #264]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	628b      	str	r3, [r1, #40]	; 0x28
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ba:	3b01      	subs	r3, #1
 80043bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c4:	3b01      	subs	r3, #1
 80043c6:	025b      	lsls	r3, r3, #9
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d0:	3b01      	subs	r3, #1
 80043d2:	041b      	lsls	r3, r3, #16
 80043d4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80043d8:	431a      	orrs	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043de:	3b01      	subs	r3, #1
 80043e0:	061b      	lsls	r3, r3, #24
 80043e2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80043e6:	4935      	ldr	r1, [pc, #212]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80043ec:	4b33      	ldr	r3, [pc, #204]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	4a32      	ldr	r2, [pc, #200]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 80043f2:	f023 0301 	bic.w	r3, r3, #1
 80043f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80043f8:	4b30      	ldr	r3, [pc, #192]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 80043fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043fc:	4b31      	ldr	r3, [pc, #196]	; (80044c4 <HAL_RCC_OscConfig+0x76c>)
 80043fe:	4013      	ands	r3, r2
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004404:	00d2      	lsls	r2, r2, #3
 8004406:	492d      	ldr	r1, [pc, #180]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 8004408:	4313      	orrs	r3, r2
 800440a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800440c:	4b2b      	ldr	r3, [pc, #172]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 800440e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004410:	f023 020c 	bic.w	r2, r3, #12
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	4928      	ldr	r1, [pc, #160]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 800441a:	4313      	orrs	r3, r2
 800441c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800441e:	4b27      	ldr	r3, [pc, #156]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 8004420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004422:	f023 0202 	bic.w	r2, r3, #2
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442a:	4924      	ldr	r1, [pc, #144]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 800442c:	4313      	orrs	r3, r2
 800442e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004430:	4b22      	ldr	r3, [pc, #136]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 8004432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004434:	4a21      	ldr	r2, [pc, #132]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 8004436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800443a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800443c:	4b1f      	ldr	r3, [pc, #124]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	4a1e      	ldr	r2, [pc, #120]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 8004442:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004446:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004448:	4b1c      	ldr	r3, [pc, #112]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	4a1b      	ldr	r2, [pc, #108]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 800444e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004452:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004454:	4b19      	ldr	r3, [pc, #100]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 8004456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004458:	4a18      	ldr	r2, [pc, #96]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 800445a:	f043 0301 	orr.w	r3, r3, #1
 800445e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004460:	4b16      	ldr	r3, [pc, #88]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a15      	ldr	r2, [pc, #84]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 8004466:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800446a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446c:	f7fd fa02 	bl	8001874 <HAL_GetTick>
 8004470:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004474:	f7fd f9fe 	bl	8001874 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e091      	b.n	80045aa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004486:	4b0d      	ldr	r3, [pc, #52]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0f0      	beq.n	8004474 <HAL_RCC_OscConfig+0x71c>
 8004492:	e089      	b.n	80045a8 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004494:	4b09      	ldr	r3, [pc, #36]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a08      	ldr	r2, [pc, #32]	; (80044bc <HAL_RCC_OscConfig+0x764>)
 800449a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800449e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a0:	f7fd f9e8 	bl	8001874 <HAL_GetTick>
 80044a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044a6:	e00f      	b.n	80044c8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a8:	f7fd f9e4 	bl	8001874 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d908      	bls.n	80044c8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e077      	b.n	80045aa <HAL_RCC_OscConfig+0x852>
 80044ba:	bf00      	nop
 80044bc:	58024400 	.word	0x58024400
 80044c0:	fffffc0c 	.word	0xfffffc0c
 80044c4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044c8:	4b3a      	ldr	r3, [pc, #232]	; (80045b4 <HAL_RCC_OscConfig+0x85c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1e9      	bne.n	80044a8 <HAL_RCC_OscConfig+0x750>
 80044d4:	e068      	b.n	80045a8 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80044d6:	4b37      	ldr	r3, [pc, #220]	; (80045b4 <HAL_RCC_OscConfig+0x85c>)
 80044d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044da:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80044dc:	4b35      	ldr	r3, [pc, #212]	; (80045b4 <HAL_RCC_OscConfig+0x85c>)
 80044de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d031      	beq.n	800454e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	f003 0203 	and.w	r2, r3, #3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d12a      	bne.n	800454e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	091b      	lsrs	r3, r3, #4
 80044fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004504:	429a      	cmp	r2, r3
 8004506:	d122      	bne.n	800454e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004512:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004514:	429a      	cmp	r2, r3
 8004516:	d11a      	bne.n	800454e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	0a5b      	lsrs	r3, r3, #9
 800451c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004524:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004526:	429a      	cmp	r2, r3
 8004528:	d111      	bne.n	800454e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	0c1b      	lsrs	r3, r3, #16
 800452e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004538:	429a      	cmp	r2, r3
 800453a:	d108      	bne.n	800454e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	0e1b      	lsrs	r3, r3, #24
 8004540:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004548:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800454a:	429a      	cmp	r2, r3
 800454c:	d001      	beq.n	8004552 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e02b      	b.n	80045aa <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004552:	4b18      	ldr	r3, [pc, #96]	; (80045b4 <HAL_RCC_OscConfig+0x85c>)
 8004554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004556:	08db      	lsrs	r3, r3, #3
 8004558:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800455c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	429a      	cmp	r2, r3
 8004566:	d01f      	beq.n	80045a8 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004568:	4b12      	ldr	r3, [pc, #72]	; (80045b4 <HAL_RCC_OscConfig+0x85c>)
 800456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456c:	4a11      	ldr	r2, [pc, #68]	; (80045b4 <HAL_RCC_OscConfig+0x85c>)
 800456e:	f023 0301 	bic.w	r3, r3, #1
 8004572:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004574:	f7fd f97e 	bl	8001874 <HAL_GetTick>
 8004578:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800457a:	bf00      	nop
 800457c:	f7fd f97a 	bl	8001874 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	4293      	cmp	r3, r2
 8004586:	d0f9      	beq.n	800457c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004588:	4b0a      	ldr	r3, [pc, #40]	; (80045b4 <HAL_RCC_OscConfig+0x85c>)
 800458a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800458c:	4b0a      	ldr	r3, [pc, #40]	; (80045b8 <HAL_RCC_OscConfig+0x860>)
 800458e:	4013      	ands	r3, r2
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004594:	00d2      	lsls	r2, r2, #3
 8004596:	4907      	ldr	r1, [pc, #28]	; (80045b4 <HAL_RCC_OscConfig+0x85c>)
 8004598:	4313      	orrs	r3, r2
 800459a:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800459c:	4b05      	ldr	r3, [pc, #20]	; (80045b4 <HAL_RCC_OscConfig+0x85c>)
 800459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a0:	4a04      	ldr	r2, [pc, #16]	; (80045b4 <HAL_RCC_OscConfig+0x85c>)
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3730      	adds	r7, #48	; 0x30
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	58024400 	.word	0x58024400
 80045b8:	ffff0007 	.word	0xffff0007

080045bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e19c      	b.n	800490a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045d0:	4b8a      	ldr	r3, [pc, #552]	; (80047fc <HAL_RCC_ClockConfig+0x240>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 030f 	and.w	r3, r3, #15
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d910      	bls.n	8004600 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045de:	4b87      	ldr	r3, [pc, #540]	; (80047fc <HAL_RCC_ClockConfig+0x240>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f023 020f 	bic.w	r2, r3, #15
 80045e6:	4985      	ldr	r1, [pc, #532]	; (80047fc <HAL_RCC_ClockConfig+0x240>)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ee:	4b83      	ldr	r3, [pc, #524]	; (80047fc <HAL_RCC_ClockConfig+0x240>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d001      	beq.n	8004600 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e184      	b.n	800490a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	d010      	beq.n	800462e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	4b7b      	ldr	r3, [pc, #492]	; (8004800 <HAL_RCC_ClockConfig+0x244>)
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004618:	429a      	cmp	r2, r3
 800461a:	d908      	bls.n	800462e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800461c:	4b78      	ldr	r3, [pc, #480]	; (8004800 <HAL_RCC_ClockConfig+0x244>)
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	4975      	ldr	r1, [pc, #468]	; (8004800 <HAL_RCC_ClockConfig+0x244>)
 800462a:	4313      	orrs	r3, r2
 800462c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0308 	and.w	r3, r3, #8
 8004636:	2b00      	cmp	r3, #0
 8004638:	d010      	beq.n	800465c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	695a      	ldr	r2, [r3, #20]
 800463e:	4b70      	ldr	r3, [pc, #448]	; (8004800 <HAL_RCC_ClockConfig+0x244>)
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004646:	429a      	cmp	r2, r3
 8004648:	d908      	bls.n	800465c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800464a:	4b6d      	ldr	r3, [pc, #436]	; (8004800 <HAL_RCC_ClockConfig+0x244>)
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	496a      	ldr	r1, [pc, #424]	; (8004800 <HAL_RCC_ClockConfig+0x244>)
 8004658:	4313      	orrs	r3, r2
 800465a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0310 	and.w	r3, r3, #16
 8004664:	2b00      	cmp	r3, #0
 8004666:	d010      	beq.n	800468a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699a      	ldr	r2, [r3, #24]
 800466c:	4b64      	ldr	r3, [pc, #400]	; (8004800 <HAL_RCC_ClockConfig+0x244>)
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004674:	429a      	cmp	r2, r3
 8004676:	d908      	bls.n	800468a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004678:	4b61      	ldr	r3, [pc, #388]	; (8004800 <HAL_RCC_ClockConfig+0x244>)
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	495e      	ldr	r1, [pc, #376]	; (8004800 <HAL_RCC_ClockConfig+0x244>)
 8004686:	4313      	orrs	r3, r2
 8004688:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0320 	and.w	r3, r3, #32
 8004692:	2b00      	cmp	r3, #0
 8004694:	d010      	beq.n	80046b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69da      	ldr	r2, [r3, #28]
 800469a:	4b59      	ldr	r3, [pc, #356]	; (8004800 <HAL_RCC_ClockConfig+0x244>)
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d908      	bls.n	80046b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80046a6:	4b56      	ldr	r3, [pc, #344]	; (8004800 <HAL_RCC_ClockConfig+0x244>)
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	4953      	ldr	r1, [pc, #332]	; (8004800 <HAL_RCC_ClockConfig+0x244>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d010      	beq.n	80046e6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	4b4d      	ldr	r3, [pc, #308]	; (8004800 <HAL_RCC_ClockConfig+0x244>)
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	f003 030f 	and.w	r3, r3, #15
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d908      	bls.n	80046e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046d4:	4b4a      	ldr	r3, [pc, #296]	; (8004800 <HAL_RCC_ClockConfig+0x244>)
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	f023 020f 	bic.w	r2, r3, #15
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	4947      	ldr	r1, [pc, #284]	; (8004800 <HAL_RCC_ClockConfig+0x244>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d055      	beq.n	800479e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80046f2:	4b43      	ldr	r3, [pc, #268]	; (8004800 <HAL_RCC_ClockConfig+0x244>)
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	4940      	ldr	r1, [pc, #256]	; (8004800 <HAL_RCC_ClockConfig+0x244>)
 8004700:	4313      	orrs	r3, r2
 8004702:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2b02      	cmp	r3, #2
 800470a:	d107      	bne.n	800471c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800470c:	4b3c      	ldr	r3, [pc, #240]	; (8004800 <HAL_RCC_ClockConfig+0x244>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d121      	bne.n	800475c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e0f6      	b.n	800490a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b03      	cmp	r3, #3
 8004722:	d107      	bne.n	8004734 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004724:	4b36      	ldr	r3, [pc, #216]	; (8004800 <HAL_RCC_ClockConfig+0x244>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d115      	bne.n	800475c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e0ea      	b.n	800490a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d107      	bne.n	800474c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800473c:	4b30      	ldr	r3, [pc, #192]	; (8004800 <HAL_RCC_ClockConfig+0x244>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004744:	2b00      	cmp	r3, #0
 8004746:	d109      	bne.n	800475c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e0de      	b.n	800490a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800474c:	4b2c      	ldr	r3, [pc, #176]	; (8004800 <HAL_RCC_ClockConfig+0x244>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e0d6      	b.n	800490a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800475c:	4b28      	ldr	r3, [pc, #160]	; (8004800 <HAL_RCC_ClockConfig+0x244>)
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	f023 0207 	bic.w	r2, r3, #7
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	4925      	ldr	r1, [pc, #148]	; (8004800 <HAL_RCC_ClockConfig+0x244>)
 800476a:	4313      	orrs	r3, r2
 800476c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800476e:	f7fd f881 	bl	8001874 <HAL_GetTick>
 8004772:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004774:	e00a      	b.n	800478c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004776:	f7fd f87d 	bl	8001874 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	f241 3288 	movw	r2, #5000	; 0x1388
 8004784:	4293      	cmp	r3, r2
 8004786:	d901      	bls.n	800478c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e0be      	b.n	800490a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800478c:	4b1c      	ldr	r3, [pc, #112]	; (8004800 <HAL_RCC_ClockConfig+0x244>)
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	429a      	cmp	r2, r3
 800479c:	d1eb      	bne.n	8004776 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d010      	beq.n	80047cc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68da      	ldr	r2, [r3, #12]
 80047ae:	4b14      	ldr	r3, [pc, #80]	; (8004800 <HAL_RCC_ClockConfig+0x244>)
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	f003 030f 	and.w	r3, r3, #15
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d208      	bcs.n	80047cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047ba:	4b11      	ldr	r3, [pc, #68]	; (8004800 <HAL_RCC_ClockConfig+0x244>)
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	f023 020f 	bic.w	r2, r3, #15
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	490e      	ldr	r1, [pc, #56]	; (8004800 <HAL_RCC_ClockConfig+0x244>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047cc:	4b0b      	ldr	r3, [pc, #44]	; (80047fc <HAL_RCC_ClockConfig+0x240>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 030f 	and.w	r3, r3, #15
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d214      	bcs.n	8004804 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047da:	4b08      	ldr	r3, [pc, #32]	; (80047fc <HAL_RCC_ClockConfig+0x240>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f023 020f 	bic.w	r2, r3, #15
 80047e2:	4906      	ldr	r1, [pc, #24]	; (80047fc <HAL_RCC_ClockConfig+0x240>)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ea:	4b04      	ldr	r3, [pc, #16]	; (80047fc <HAL_RCC_ClockConfig+0x240>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d005      	beq.n	8004804 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e086      	b.n	800490a <HAL_RCC_ClockConfig+0x34e>
 80047fc:	52002000 	.word	0x52002000
 8004800:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	d010      	beq.n	8004832 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	691a      	ldr	r2, [r3, #16]
 8004814:	4b3f      	ldr	r3, [pc, #252]	; (8004914 <HAL_RCC_ClockConfig+0x358>)
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800481c:	429a      	cmp	r2, r3
 800481e:	d208      	bcs.n	8004832 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004820:	4b3c      	ldr	r3, [pc, #240]	; (8004914 <HAL_RCC_ClockConfig+0x358>)
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	4939      	ldr	r1, [pc, #228]	; (8004914 <HAL_RCC_ClockConfig+0x358>)
 800482e:	4313      	orrs	r3, r2
 8004830:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0308 	and.w	r3, r3, #8
 800483a:	2b00      	cmp	r3, #0
 800483c:	d010      	beq.n	8004860 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	695a      	ldr	r2, [r3, #20]
 8004842:	4b34      	ldr	r3, [pc, #208]	; (8004914 <HAL_RCC_ClockConfig+0x358>)
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800484a:	429a      	cmp	r2, r3
 800484c:	d208      	bcs.n	8004860 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800484e:	4b31      	ldr	r3, [pc, #196]	; (8004914 <HAL_RCC_ClockConfig+0x358>)
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	492e      	ldr	r1, [pc, #184]	; (8004914 <HAL_RCC_ClockConfig+0x358>)
 800485c:	4313      	orrs	r3, r2
 800485e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0310 	and.w	r3, r3, #16
 8004868:	2b00      	cmp	r3, #0
 800486a:	d010      	beq.n	800488e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	699a      	ldr	r2, [r3, #24]
 8004870:	4b28      	ldr	r3, [pc, #160]	; (8004914 <HAL_RCC_ClockConfig+0x358>)
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004878:	429a      	cmp	r2, r3
 800487a:	d208      	bcs.n	800488e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800487c:	4b25      	ldr	r3, [pc, #148]	; (8004914 <HAL_RCC_ClockConfig+0x358>)
 800487e:	69db      	ldr	r3, [r3, #28]
 8004880:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	4922      	ldr	r1, [pc, #136]	; (8004914 <HAL_RCC_ClockConfig+0x358>)
 800488a:	4313      	orrs	r3, r2
 800488c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0320 	and.w	r3, r3, #32
 8004896:	2b00      	cmp	r3, #0
 8004898:	d010      	beq.n	80048bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	69da      	ldr	r2, [r3, #28]
 800489e:	4b1d      	ldr	r3, [pc, #116]	; (8004914 <HAL_RCC_ClockConfig+0x358>)
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d208      	bcs.n	80048bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80048aa:	4b1a      	ldr	r3, [pc, #104]	; (8004914 <HAL_RCC_ClockConfig+0x358>)
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	4917      	ldr	r1, [pc, #92]	; (8004914 <HAL_RCC_ClockConfig+0x358>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80048bc:	f000 f834 	bl	8004928 <HAL_RCC_GetSysClockFreq>
 80048c0:	4602      	mov	r2, r0
 80048c2:	4b14      	ldr	r3, [pc, #80]	; (8004914 <HAL_RCC_ClockConfig+0x358>)
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	0a1b      	lsrs	r3, r3, #8
 80048c8:	f003 030f 	and.w	r3, r3, #15
 80048cc:	4912      	ldr	r1, [pc, #72]	; (8004918 <HAL_RCC_ClockConfig+0x35c>)
 80048ce:	5ccb      	ldrb	r3, [r1, r3]
 80048d0:	f003 031f 	and.w	r3, r3, #31
 80048d4:	fa22 f303 	lsr.w	r3, r2, r3
 80048d8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80048da:	4b0e      	ldr	r3, [pc, #56]	; (8004914 <HAL_RCC_ClockConfig+0x358>)
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	4a0d      	ldr	r2, [pc, #52]	; (8004918 <HAL_RCC_ClockConfig+0x35c>)
 80048e4:	5cd3      	ldrb	r3, [r2, r3]
 80048e6:	f003 031f 	and.w	r3, r3, #31
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	fa22 f303 	lsr.w	r3, r2, r3
 80048f0:	4a0a      	ldr	r2, [pc, #40]	; (800491c <HAL_RCC_ClockConfig+0x360>)
 80048f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80048f4:	4a0a      	ldr	r2, [pc, #40]	; (8004920 <HAL_RCC_ClockConfig+0x364>)
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80048fa:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <HAL_RCC_ClockConfig+0x368>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fc ff6e 	bl	80017e0 <HAL_InitTick>
 8004904:	4603      	mov	r3, r0
 8004906:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004908:	7bfb      	ldrb	r3, [r7, #15]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	58024400 	.word	0x58024400
 8004918:	0800b2fc 	.word	0x0800b2fc
 800491c:	2400000c 	.word	0x2400000c
 8004920:	24000008 	.word	0x24000008
 8004924:	24000010 	.word	0x24000010

08004928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004928:	b480      	push	{r7}
 800492a:	b089      	sub	sp, #36	; 0x24
 800492c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800492e:	4bb3      	ldr	r3, [pc, #716]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004936:	2b18      	cmp	r3, #24
 8004938:	f200 8155 	bhi.w	8004be6 <HAL_RCC_GetSysClockFreq+0x2be>
 800493c:	a201      	add	r2, pc, #4	; (adr r2, 8004944 <HAL_RCC_GetSysClockFreq+0x1c>)
 800493e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004942:	bf00      	nop
 8004944:	080049a9 	.word	0x080049a9
 8004948:	08004be7 	.word	0x08004be7
 800494c:	08004be7 	.word	0x08004be7
 8004950:	08004be7 	.word	0x08004be7
 8004954:	08004be7 	.word	0x08004be7
 8004958:	08004be7 	.word	0x08004be7
 800495c:	08004be7 	.word	0x08004be7
 8004960:	08004be7 	.word	0x08004be7
 8004964:	080049cf 	.word	0x080049cf
 8004968:	08004be7 	.word	0x08004be7
 800496c:	08004be7 	.word	0x08004be7
 8004970:	08004be7 	.word	0x08004be7
 8004974:	08004be7 	.word	0x08004be7
 8004978:	08004be7 	.word	0x08004be7
 800497c:	08004be7 	.word	0x08004be7
 8004980:	08004be7 	.word	0x08004be7
 8004984:	080049d5 	.word	0x080049d5
 8004988:	08004be7 	.word	0x08004be7
 800498c:	08004be7 	.word	0x08004be7
 8004990:	08004be7 	.word	0x08004be7
 8004994:	08004be7 	.word	0x08004be7
 8004998:	08004be7 	.word	0x08004be7
 800499c:	08004be7 	.word	0x08004be7
 80049a0:	08004be7 	.word	0x08004be7
 80049a4:	080049db 	.word	0x080049db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049a8:	4b94      	ldr	r3, [pc, #592]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0320 	and.w	r3, r3, #32
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d009      	beq.n	80049c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049b4:	4b91      	ldr	r3, [pc, #580]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	08db      	lsrs	r3, r3, #3
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	4a90      	ldr	r2, [pc, #576]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80049c0:	fa22 f303 	lsr.w	r3, r2, r3
 80049c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80049c6:	e111      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80049c8:	4b8d      	ldr	r3, [pc, #564]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80049ca:	61bb      	str	r3, [r7, #24]
      break;
 80049cc:	e10e      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80049ce:	4b8d      	ldr	r3, [pc, #564]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80049d0:	61bb      	str	r3, [r7, #24]
      break;
 80049d2:	e10b      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80049d4:	4b8c      	ldr	r3, [pc, #560]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80049d6:	61bb      	str	r3, [r7, #24]
      break;
 80049d8:	e108      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049da:	4b88      	ldr	r3, [pc, #544]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049de:	f003 0303 	and.w	r3, r3, #3
 80049e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80049e4:	4b85      	ldr	r3, [pc, #532]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e8:	091b      	lsrs	r3, r3, #4
 80049ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80049f0:	4b82      	ldr	r3, [pc, #520]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80049fa:	4b80      	ldr	r3, [pc, #512]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fe:	08db      	lsrs	r3, r3, #3
 8004a00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	fb02 f303 	mul.w	r3, r2, r3
 8004a0a:	ee07 3a90 	vmov	s15, r3
 8004a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a12:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 80e1 	beq.w	8004be0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	f000 8083 	beq.w	8004b2c <HAL_RCC_GetSysClockFreq+0x204>
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	f200 80a1 	bhi.w	8004b70 <HAL_RCC_GetSysClockFreq+0x248>
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <HAL_RCC_GetSysClockFreq+0x114>
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d056      	beq.n	8004ae8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004a3a:	e099      	b.n	8004b70 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a3c:	4b6f      	ldr	r3, [pc, #444]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0320 	and.w	r3, r3, #32
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d02d      	beq.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a48:	4b6c      	ldr	r3, [pc, #432]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	08db      	lsrs	r3, r3, #3
 8004a4e:	f003 0303 	and.w	r3, r3, #3
 8004a52:	4a6b      	ldr	r2, [pc, #428]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a54:	fa22 f303 	lsr.w	r3, r2, r3
 8004a58:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	ee07 3a90 	vmov	s15, r3
 8004a60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	ee07 3a90 	vmov	s15, r3
 8004a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a72:	4b62      	ldr	r3, [pc, #392]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a7a:	ee07 3a90 	vmov	s15, r3
 8004a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a82:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a86:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004c0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a9e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004aa2:	e087      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	ee07 3a90 	vmov	s15, r3
 8004aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004c10 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ab6:	4b51      	ldr	r3, [pc, #324]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004abe:	ee07 3a90 	vmov	s15, r3
 8004ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ac6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004aca:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004c0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ae2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ae6:	e065      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	ee07 3a90 	vmov	s15, r3
 8004aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004c14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004afa:	4b40      	ldr	r3, [pc, #256]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b02:	ee07 3a90 	vmov	s15, r3
 8004b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b0e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004c0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b2a:	e043      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	ee07 3a90 	vmov	s15, r3
 8004b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b36:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004c18 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b3e:	4b2f      	ldr	r3, [pc, #188]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b46:	ee07 3a90 	vmov	s15, r3
 8004b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b52:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004c0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b6e:	e021      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	ee07 3a90 	vmov	s15, r3
 8004b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004c14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b82:	4b1e      	ldr	r3, [pc, #120]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b8a:	ee07 3a90 	vmov	s15, r3
 8004b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b92:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b96:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004c0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004bb2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004bb4:	4b11      	ldr	r3, [pc, #68]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb8:	0a5b      	lsrs	r3, r3, #9
 8004bba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	ee07 3a90 	vmov	s15, r3
 8004bc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004bcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bd8:	ee17 3a90 	vmov	r3, s15
 8004bdc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004bde:	e005      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	61bb      	str	r3, [r7, #24]
      break;
 8004be4:	e002      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004be6:	4b07      	ldr	r3, [pc, #28]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004be8:	61bb      	str	r3, [r7, #24]
      break;
 8004bea:	bf00      	nop
  }

  return sysclockfreq;
 8004bec:	69bb      	ldr	r3, [r7, #24]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3724      	adds	r7, #36	; 0x24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	58024400 	.word	0x58024400
 8004c00:	03d09000 	.word	0x03d09000
 8004c04:	003d0900 	.word	0x003d0900
 8004c08:	007a1200 	.word	0x007a1200
 8004c0c:	46000000 	.word	0x46000000
 8004c10:	4c742400 	.word	0x4c742400
 8004c14:	4a742400 	.word	0x4a742400
 8004c18:	4af42400 	.word	0x4af42400

08004c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8004c22:	f7ff fe81 	bl	8004928 <HAL_RCC_GetSysClockFreq>
 8004c26:	4602      	mov	r2, r0
 8004c28:	4b10      	ldr	r3, [pc, #64]	; (8004c6c <HAL_RCC_GetHCLKFreq+0x50>)
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	0a1b      	lsrs	r3, r3, #8
 8004c2e:	f003 030f 	and.w	r3, r3, #15
 8004c32:	490f      	ldr	r1, [pc, #60]	; (8004c70 <HAL_RCC_GetHCLKFreq+0x54>)
 8004c34:	5ccb      	ldrb	r3, [r1, r3]
 8004c36:	f003 031f 	and.w	r3, r3, #31
 8004c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c3e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004c40:	4b0a      	ldr	r3, [pc, #40]	; (8004c6c <HAL_RCC_GetHCLKFreq+0x50>)
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	4a09      	ldr	r2, [pc, #36]	; (8004c70 <HAL_RCC_GetHCLKFreq+0x54>)
 8004c4a:	5cd3      	ldrb	r3, [r2, r3]
 8004c4c:	f003 031f 	and.w	r3, r3, #31
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	fa22 f303 	lsr.w	r3, r2, r3
 8004c56:	4a07      	ldr	r2, [pc, #28]	; (8004c74 <HAL_RCC_GetHCLKFreq+0x58>)
 8004c58:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c5a:	4a07      	ldr	r2, [pc, #28]	; (8004c78 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004c60:	4b04      	ldr	r3, [pc, #16]	; (8004c74 <HAL_RCC_GetHCLKFreq+0x58>)
 8004c62:	681b      	ldr	r3, [r3, #0]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	58024400 	.word	0x58024400
 8004c70:	0800b2fc 	.word	0x0800b2fc
 8004c74:	2400000c 	.word	0x2400000c
 8004c78:	24000008 	.word	0x24000008

08004c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004c80:	f7ff ffcc 	bl	8004c1c <HAL_RCC_GetHCLKFreq>
 8004c84:	4602      	mov	r2, r0
 8004c86:	4b06      	ldr	r3, [pc, #24]	; (8004ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	091b      	lsrs	r3, r3, #4
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	4904      	ldr	r1, [pc, #16]	; (8004ca4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c92:	5ccb      	ldrb	r3, [r1, r3]
 8004c94:	f003 031f 	and.w	r3, r3, #31
 8004c98:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	58024400 	.word	0x58024400
 8004ca4:	0800b2fc 	.word	0x0800b2fc

08004ca8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8004cac:	f7ff ffb6 	bl	8004c1c <HAL_RCC_GetHCLKFreq>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	4b06      	ldr	r3, [pc, #24]	; (8004ccc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	0a1b      	lsrs	r3, r3, #8
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	4904      	ldr	r1, [pc, #16]	; (8004cd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004cbe:	5ccb      	ldrb	r3, [r1, r3]
 8004cc0:	f003 031f 	and.w	r3, r3, #31
 8004cc4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	58024400 	.word	0x58024400
 8004cd0:	0800b2fc 	.word	0x0800b2fc

08004cd4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cd8:	b0c8      	sub	sp, #288	; 0x120
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004cf8:	2500      	movs	r5, #0
 8004cfa:	ea54 0305 	orrs.w	r3, r4, r5
 8004cfe:	d049      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004d00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d06:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d0a:	d02f      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004d0c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d10:	d828      	bhi.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004d12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d16:	d01a      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004d18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d1c:	d822      	bhi.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004d22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d26:	d007      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d28:	e01c      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d2a:	4ba7      	ldr	r3, [pc, #668]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2e:	4aa6      	ldr	r2, [pc, #664]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004d36:	e01a      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d3c:	3308      	adds	r3, #8
 8004d3e:	2102      	movs	r1, #2
 8004d40:	4618      	mov	r0, r3
 8004d42:	f002 fa6d 	bl	8007220 <RCCEx_PLL2_Config>
 8004d46:	4603      	mov	r3, r0
 8004d48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004d4c:	e00f      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d52:	3328      	adds	r3, #40	; 0x28
 8004d54:	2102      	movs	r1, #2
 8004d56:	4618      	mov	r0, r3
 8004d58:	f002 fb14 	bl	8007384 <RCCEx_PLL3_Config>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004d62:	e004      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004d6a:	e000      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004d6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d6e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10a      	bne.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004d76:	4b94      	ldr	r3, [pc, #592]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d7a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d84:	4a90      	ldr	r2, [pc, #576]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d86:	430b      	orrs	r3, r1
 8004d88:	6513      	str	r3, [r2, #80]	; 0x50
 8004d8a:	e003      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d90:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004da0:	f04f 0900 	mov.w	r9, #0
 8004da4:	ea58 0309 	orrs.w	r3, r8, r9
 8004da8:	d047      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	d82a      	bhi.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004db4:	a201      	add	r2, pc, #4	; (adr r2, 8004dbc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dba:	bf00      	nop
 8004dbc:	08004dd1 	.word	0x08004dd1
 8004dc0:	08004ddf 	.word	0x08004ddf
 8004dc4:	08004df5 	.word	0x08004df5
 8004dc8:	08004e13 	.word	0x08004e13
 8004dcc:	08004e13 	.word	0x08004e13
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dd0:	4b7d      	ldr	r3, [pc, #500]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	4a7c      	ldr	r2, [pc, #496]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004dd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ddc:	e01a      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004de2:	3308      	adds	r3, #8
 8004de4:	2100      	movs	r1, #0
 8004de6:	4618      	mov	r0, r3
 8004de8:	f002 fa1a 	bl	8007220 <RCCEx_PLL2_Config>
 8004dec:	4603      	mov	r3, r0
 8004dee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004df2:	e00f      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004df4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004df8:	3328      	adds	r3, #40	; 0x28
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f002 fac1 	bl	8007384 <RCCEx_PLL3_Config>
 8004e02:	4603      	mov	r3, r0
 8004e04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e08:	e004      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004e10:	e000      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004e12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10a      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e1c:	4b6a      	ldr	r3, [pc, #424]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e20:	f023 0107 	bic.w	r1, r3, #7
 8004e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2a:	4a67      	ldr	r2, [pc, #412]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e2c:	430b      	orrs	r3, r1
 8004e2e:	6513      	str	r3, [r2, #80]	; 0x50
 8004e30:	e003      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e32:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e36:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004e3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e42:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8004e46:	f04f 0b00 	mov.w	fp, #0
 8004e4a:	ea5a 030b 	orrs.w	r3, sl, fp
 8004e4e:	d054      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8004e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e56:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004e5a:	d036      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004e5c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004e60:	d82f      	bhi.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e66:	d032      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e6c:	d829      	bhi.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004e6e:	2bc0      	cmp	r3, #192	; 0xc0
 8004e70:	d02f      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8004e72:	2bc0      	cmp	r3, #192	; 0xc0
 8004e74:	d825      	bhi.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004e76:	2b80      	cmp	r3, #128	; 0x80
 8004e78:	d018      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004e7a:	2b80      	cmp	r3, #128	; 0x80
 8004e7c:	d821      	bhi.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d002      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004e82:	2b40      	cmp	r3, #64	; 0x40
 8004e84:	d007      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8004e86:	e01c      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e88:	4b4f      	ldr	r3, [pc, #316]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8c:	4a4e      	ldr	r2, [pc, #312]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004e94:	e01e      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e9a:	3308      	adds	r3, #8
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f002 f9be 	bl	8007220 <RCCEx_PLL2_Config>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004eaa:	e013      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eb0:	3328      	adds	r3, #40	; 0x28
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f002 fa65 	bl	8007384 <RCCEx_PLL3_Config>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004ec0:	e008      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004ec8:	e004      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004eca:	bf00      	nop
 8004ecc:	e002      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004ece:	bf00      	nop
 8004ed0:	e000      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004ed2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ed4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10a      	bne.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004edc:	4b3a      	ldr	r3, [pc, #232]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ee0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eea:	4a37      	ldr	r2, [pc, #220]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004eec:	430b      	orrs	r3, r1
 8004eee:	6513      	str	r3, [r2, #80]	; 0x50
 8004ef0:	e003      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ef6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f02:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004f06:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004f10:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004f14:	460b      	mov	r3, r1
 8004f16:	4313      	orrs	r3, r2
 8004f18:	d05c      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8004f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f20:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004f24:	d03b      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004f26:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004f2a:	d834      	bhi.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004f2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f30:	d037      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004f32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f36:	d82e      	bhi.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004f38:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004f3c:	d033      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004f3e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004f42:	d828      	bhi.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f48:	d01a      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f4e:	d822      	bhi.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f58:	d007      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004f5a:	e01c      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f5c:	4b1a      	ldr	r3, [pc, #104]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f60:	4a19      	ldr	r2, [pc, #100]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004f68:	e01e      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f6e:	3308      	adds	r3, #8
 8004f70:	2100      	movs	r1, #0
 8004f72:	4618      	mov	r0, r3
 8004f74:	f002 f954 	bl	8007220 <RCCEx_PLL2_Config>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004f7e:	e013      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f84:	3328      	adds	r3, #40	; 0x28
 8004f86:	2100      	movs	r1, #0
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f002 f9fb 	bl	8007384 <RCCEx_PLL3_Config>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004f94:	e008      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004f9c:	e004      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004f9e:	bf00      	nop
 8004fa0:	e002      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004fa2:	bf00      	nop
 8004fa4:	e000      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004fa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fa8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10d      	bne.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004fb0:	4b05      	ldr	r3, [pc, #20]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fbe:	4a02      	ldr	r2, [pc, #8]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004fc0:	430b      	orrs	r3, r1
 8004fc2:	6513      	str	r3, [r2, #80]	; 0x50
 8004fc4:	e006      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004fc6:	bf00      	nop
 8004fc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fcc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004fd0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004fd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fdc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004fe0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004fea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	d03a      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ffa:	2b30      	cmp	r3, #48	; 0x30
 8004ffc:	d01f      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004ffe:	2b30      	cmp	r3, #48	; 0x30
 8005000:	d819      	bhi.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005002:	2b20      	cmp	r3, #32
 8005004:	d00c      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005006:	2b20      	cmp	r3, #32
 8005008:	d815      	bhi.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800500a:	2b00      	cmp	r3, #0
 800500c:	d019      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800500e:	2b10      	cmp	r3, #16
 8005010:	d111      	bne.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005012:	4bae      	ldr	r3, [pc, #696]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005016:	4aad      	ldr	r2, [pc, #692]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800501c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800501e:	e011      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005020:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005024:	3308      	adds	r3, #8
 8005026:	2102      	movs	r1, #2
 8005028:	4618      	mov	r0, r3
 800502a:	f002 f8f9 	bl	8007220 <RCCEx_PLL2_Config>
 800502e:	4603      	mov	r3, r0
 8005030:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005034:	e006      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800503c:	e002      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800503e:	bf00      	nop
 8005040:	e000      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005042:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005044:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10a      	bne.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800504c:	4b9f      	ldr	r3, [pc, #636]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800504e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005050:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005054:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505a:	4a9c      	ldr	r2, [pc, #624]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800505c:	430b      	orrs	r3, r1
 800505e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005060:	e003      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005062:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005066:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800506a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800506e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005072:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005076:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800507a:	2300      	movs	r3, #0
 800507c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005080:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005084:	460b      	mov	r3, r1
 8005086:	4313      	orrs	r3, r2
 8005088:	d051      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800508a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800508e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005090:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005094:	d035      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005096:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800509a:	d82e      	bhi.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x426>
 800509c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050a0:	d031      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80050a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050a6:	d828      	bhi.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x426>
 80050a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ac:	d01a      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80050ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050b2:	d822      	bhi.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x426>
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d003      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80050b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050bc:	d007      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80050be:	e01c      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050c0:	4b82      	ldr	r3, [pc, #520]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80050c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c4:	4a81      	ldr	r2, [pc, #516]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80050c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80050cc:	e01c      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050d2:	3308      	adds	r3, #8
 80050d4:	2100      	movs	r1, #0
 80050d6:	4618      	mov	r0, r3
 80050d8:	f002 f8a2 	bl	8007220 <RCCEx_PLL2_Config>
 80050dc:	4603      	mov	r3, r0
 80050de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80050e2:	e011      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050e8:	3328      	adds	r3, #40	; 0x28
 80050ea:	2100      	movs	r1, #0
 80050ec:	4618      	mov	r0, r3
 80050ee:	f002 f949 	bl	8007384 <RCCEx_PLL3_Config>
 80050f2:	4603      	mov	r3, r0
 80050f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80050f8:	e006      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005100:	e002      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8005102:	bf00      	nop
 8005104:	e000      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8005106:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005108:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10a      	bne.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005110:	4b6e      	ldr	r3, [pc, #440]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005114:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005118:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800511c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800511e:	4a6b      	ldr	r2, [pc, #428]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005120:	430b      	orrs	r3, r1
 8005122:	6513      	str	r3, [r2, #80]	; 0x50
 8005124:	e003      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005126:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800512a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800512e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005136:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800513a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800513e:	2300      	movs	r3, #0
 8005140:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005144:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005148:	460b      	mov	r3, r1
 800514a:	4313      	orrs	r3, r2
 800514c:	d053      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800514e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005152:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005158:	d033      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800515a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800515e:	d82c      	bhi.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005160:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005164:	d02f      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8005166:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800516a:	d826      	bhi.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800516c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005170:	d02b      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005172:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005176:	d820      	bhi.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005178:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800517c:	d012      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800517e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005182:	d81a      	bhi.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005184:	2b00      	cmp	r3, #0
 8005186:	d022      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8005188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800518c:	d115      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800518e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005192:	3308      	adds	r3, #8
 8005194:	2101      	movs	r1, #1
 8005196:	4618      	mov	r0, r3
 8005198:	f002 f842 	bl	8007220 <RCCEx_PLL2_Config>
 800519c:	4603      	mov	r3, r0
 800519e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80051a2:	e015      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051a8:	3328      	adds	r3, #40	; 0x28
 80051aa:	2101      	movs	r1, #1
 80051ac:	4618      	mov	r0, r3
 80051ae:	f002 f8e9 	bl	8007384 <RCCEx_PLL3_Config>
 80051b2:	4603      	mov	r3, r0
 80051b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80051b8:	e00a      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80051c0:	e006      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80051c2:	bf00      	nop
 80051c4:	e004      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80051c6:	bf00      	nop
 80051c8:	e002      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80051ca:	bf00      	nop
 80051cc:	e000      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80051ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10a      	bne.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80051d8:	4b3c      	ldr	r3, [pc, #240]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80051da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051dc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80051e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051e6:	4a39      	ldr	r2, [pc, #228]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80051e8:	430b      	orrs	r3, r1
 80051ea:	6513      	str	r3, [r2, #80]	; 0x50
 80051ec:	e003      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80051f2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80051f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fe:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005202:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005206:	2300      	movs	r3, #0
 8005208:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800520c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005210:	460b      	mov	r3, r1
 8005212:	4313      	orrs	r3, r2
 8005214:	d060      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005216:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800521a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800521e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005222:	d039      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8005224:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005228:	d832      	bhi.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800522a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800522e:	d035      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005230:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005234:	d82c      	bhi.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800523a:	d031      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800523c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005240:	d826      	bhi.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005242:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005246:	d02d      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005248:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800524c:	d820      	bhi.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800524e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005252:	d012      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005258:	d81a      	bhi.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800525a:	2b00      	cmp	r3, #0
 800525c:	d024      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800525e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005262:	d115      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005264:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005268:	3308      	adds	r3, #8
 800526a:	2101      	movs	r1, #1
 800526c:	4618      	mov	r0, r3
 800526e:	f001 ffd7 	bl	8007220 <RCCEx_PLL2_Config>
 8005272:	4603      	mov	r3, r0
 8005274:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005278:	e017      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800527a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800527e:	3328      	adds	r3, #40	; 0x28
 8005280:	2101      	movs	r1, #1
 8005282:	4618      	mov	r0, r3
 8005284:	f002 f87e 	bl	8007384 <RCCEx_PLL3_Config>
 8005288:	4603      	mov	r3, r0
 800528a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800528e:	e00c      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005296:	e008      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005298:	bf00      	nop
 800529a:	e006      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800529c:	bf00      	nop
 800529e:	e004      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80052a0:	bf00      	nop
 80052a2:	e002      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80052a4:	bf00      	nop
 80052a6:	e000      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80052a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10e      	bne.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80052b2:	4b06      	ldr	r3, [pc, #24]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80052b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80052ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052c2:	4a02      	ldr	r2, [pc, #8]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80052c4:	430b      	orrs	r3, r1
 80052c6:	6593      	str	r3, [r2, #88]	; 0x58
 80052c8:	e006      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80052ca:	bf00      	nop
 80052cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80052d4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80052d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80052e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052e8:	2300      	movs	r3, #0
 80052ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80052ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80052f2:	460b      	mov	r3, r1
 80052f4:	4313      	orrs	r3, r2
 80052f6:	d037      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80052f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005302:	d00e      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005304:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005308:	d816      	bhi.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800530a:	2b00      	cmp	r3, #0
 800530c:	d018      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800530e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005312:	d111      	bne.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005314:	4bc4      	ldr	r3, [pc, #784]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005318:	4ac3      	ldr	r2, [pc, #780]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800531a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800531e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005320:	e00f      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005322:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005326:	3308      	adds	r3, #8
 8005328:	2101      	movs	r1, #1
 800532a:	4618      	mov	r0, r3
 800532c:	f001 ff78 	bl	8007220 <RCCEx_PLL2_Config>
 8005330:	4603      	mov	r3, r0
 8005332:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005336:	e004      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800533e:	e000      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005340:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005342:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10a      	bne.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800534a:	4bb7      	ldr	r3, [pc, #732]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800534c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800534e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005352:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005356:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005358:	4ab3      	ldr	r2, [pc, #716]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800535a:	430b      	orrs	r3, r1
 800535c:	6513      	str	r3, [r2, #80]	; 0x50
 800535e:	e003      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005360:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005364:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005368:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800536c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005370:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005374:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005378:	2300      	movs	r3, #0
 800537a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800537e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005382:	460b      	mov	r3, r1
 8005384:	4313      	orrs	r3, r2
 8005386:	d039      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005388:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800538c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800538e:	2b03      	cmp	r3, #3
 8005390:	d81c      	bhi.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005392:	a201      	add	r2, pc, #4	; (adr r2, 8005398 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005398:	080053d5 	.word	0x080053d5
 800539c:	080053a9 	.word	0x080053a9
 80053a0:	080053b7 	.word	0x080053b7
 80053a4:	080053d5 	.word	0x080053d5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053a8:	4b9f      	ldr	r3, [pc, #636]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80053aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ac:	4a9e      	ldr	r2, [pc, #632]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80053ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80053b4:	e00f      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80053b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053ba:	3308      	adds	r3, #8
 80053bc:	2102      	movs	r1, #2
 80053be:	4618      	mov	r0, r3
 80053c0:	f001 ff2e 	bl	8007220 <RCCEx_PLL2_Config>
 80053c4:	4603      	mov	r3, r0
 80053c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80053ca:	e004      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80053d2:	e000      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80053d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10a      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80053de:	4b92      	ldr	r3, [pc, #584]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80053e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053e2:	f023 0103 	bic.w	r1, r3, #3
 80053e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ec:	4a8e      	ldr	r2, [pc, #568]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80053ee:	430b      	orrs	r3, r1
 80053f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053f2:	e003      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80053f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005404:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005408:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800540c:	2300      	movs	r3, #0
 800540e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005412:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005416:	460b      	mov	r3, r1
 8005418:	4313      	orrs	r3, r2
 800541a:	f000 8099 	beq.w	8005550 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800541e:	4b83      	ldr	r3, [pc, #524]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a82      	ldr	r2, [pc, #520]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005428:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800542a:	f7fc fa23 	bl	8001874 <HAL_GetTick>
 800542e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005432:	e00b      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005434:	f7fc fa1e 	bl	8001874 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b64      	cmp	r3, #100	; 0x64
 8005442:	d903      	bls.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800544a:	e005      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800544c:	4b77      	ldr	r3, [pc, #476]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0ed      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005458:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800545c:	2b00      	cmp	r3, #0
 800545e:	d173      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005460:	4b71      	ldr	r3, [pc, #452]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005462:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005464:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005468:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800546c:	4053      	eors	r3, r2
 800546e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005472:	2b00      	cmp	r3, #0
 8005474:	d015      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005476:	4b6c      	ldr	r3, [pc, #432]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800547e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005482:	4b69      	ldr	r3, [pc, #420]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005486:	4a68      	ldr	r2, [pc, #416]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800548c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800548e:	4b66      	ldr	r3, [pc, #408]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005492:	4a65      	ldr	r2, [pc, #404]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005498:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800549a:	4a63      	ldr	r2, [pc, #396]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800549c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054a0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80054a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80054aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ae:	d118      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b0:	f7fc f9e0 	bl	8001874 <HAL_GetTick>
 80054b4:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054b8:	e00d      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ba:	f7fc f9db 	bl	8001874 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80054c4:	1ad2      	subs	r2, r2, r3
 80054c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d903      	bls.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80054d4:	e005      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054d6:	4b54      	ldr	r3, [pc, #336]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d0eb      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80054e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d129      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80054f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054fa:	d10e      	bne.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x846>
 80054fc:	4b4a      	ldr	r3, [pc, #296]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005504:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005508:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800550c:	091a      	lsrs	r2, r3, #4
 800550e:	4b48      	ldr	r3, [pc, #288]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005510:	4013      	ands	r3, r2
 8005512:	4a45      	ldr	r2, [pc, #276]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005514:	430b      	orrs	r3, r1
 8005516:	6113      	str	r3, [r2, #16]
 8005518:	e005      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800551a:	4b43      	ldr	r3, [pc, #268]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	4a42      	ldr	r2, [pc, #264]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005520:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005524:	6113      	str	r3, [r2, #16]
 8005526:	4b40      	ldr	r3, [pc, #256]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005528:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800552a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800552e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005536:	4a3c      	ldr	r2, [pc, #240]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005538:	430b      	orrs	r3, r1
 800553a:	6713      	str	r3, [r2, #112]	; 0x70
 800553c:	e008      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800553e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005542:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8005546:	e003      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005548:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800554c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005550:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005558:	f002 0301 	and.w	r3, r2, #1
 800555c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005560:	2300      	movs	r3, #0
 8005562:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005566:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800556a:	460b      	mov	r3, r1
 800556c:	4313      	orrs	r3, r2
 800556e:	f000 8090 	beq.w	8005692 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005572:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800557a:	2b28      	cmp	r3, #40	; 0x28
 800557c:	d870      	bhi.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800557e:	a201      	add	r2, pc, #4	; (adr r2, 8005584 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005584:	08005669 	.word	0x08005669
 8005588:	08005661 	.word	0x08005661
 800558c:	08005661 	.word	0x08005661
 8005590:	08005661 	.word	0x08005661
 8005594:	08005661 	.word	0x08005661
 8005598:	08005661 	.word	0x08005661
 800559c:	08005661 	.word	0x08005661
 80055a0:	08005661 	.word	0x08005661
 80055a4:	08005635 	.word	0x08005635
 80055a8:	08005661 	.word	0x08005661
 80055ac:	08005661 	.word	0x08005661
 80055b0:	08005661 	.word	0x08005661
 80055b4:	08005661 	.word	0x08005661
 80055b8:	08005661 	.word	0x08005661
 80055bc:	08005661 	.word	0x08005661
 80055c0:	08005661 	.word	0x08005661
 80055c4:	0800564b 	.word	0x0800564b
 80055c8:	08005661 	.word	0x08005661
 80055cc:	08005661 	.word	0x08005661
 80055d0:	08005661 	.word	0x08005661
 80055d4:	08005661 	.word	0x08005661
 80055d8:	08005661 	.word	0x08005661
 80055dc:	08005661 	.word	0x08005661
 80055e0:	08005661 	.word	0x08005661
 80055e4:	08005669 	.word	0x08005669
 80055e8:	08005661 	.word	0x08005661
 80055ec:	08005661 	.word	0x08005661
 80055f0:	08005661 	.word	0x08005661
 80055f4:	08005661 	.word	0x08005661
 80055f8:	08005661 	.word	0x08005661
 80055fc:	08005661 	.word	0x08005661
 8005600:	08005661 	.word	0x08005661
 8005604:	08005669 	.word	0x08005669
 8005608:	08005661 	.word	0x08005661
 800560c:	08005661 	.word	0x08005661
 8005610:	08005661 	.word	0x08005661
 8005614:	08005661 	.word	0x08005661
 8005618:	08005661 	.word	0x08005661
 800561c:	08005661 	.word	0x08005661
 8005620:	08005661 	.word	0x08005661
 8005624:	08005669 	.word	0x08005669
 8005628:	58024400 	.word	0x58024400
 800562c:	58024800 	.word	0x58024800
 8005630:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005634:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005638:	3308      	adds	r3, #8
 800563a:	2101      	movs	r1, #1
 800563c:	4618      	mov	r0, r3
 800563e:	f001 fdef 	bl	8007220 <RCCEx_PLL2_Config>
 8005642:	4603      	mov	r3, r0
 8005644:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005648:	e00f      	b.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800564a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800564e:	3328      	adds	r3, #40	; 0x28
 8005650:	2101      	movs	r1, #1
 8005652:	4618      	mov	r0, r3
 8005654:	f001 fe96 	bl	8007384 <RCCEx_PLL3_Config>
 8005658:	4603      	mov	r3, r0
 800565a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800565e:	e004      	b.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005666:	e000      	b.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800566a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10b      	bne.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005672:	4bc0      	ldr	r3, [pc, #768]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005676:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800567a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800567e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005682:	4abc      	ldr	r2, [pc, #752]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005684:	430b      	orrs	r3, r1
 8005686:	6553      	str	r3, [r2, #84]	; 0x54
 8005688:	e003      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800568a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800568e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005692:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569a:	f002 0302 	and.w	r3, r2, #2
 800569e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056a2:	2300      	movs	r3, #0
 80056a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80056a8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80056ac:	460b      	mov	r3, r1
 80056ae:	4313      	orrs	r3, r2
 80056b0:	d043      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80056b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056ba:	2b05      	cmp	r3, #5
 80056bc:	d824      	bhi.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80056be:	a201      	add	r2, pc, #4	; (adr r2, 80056c4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80056c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c4:	08005711 	.word	0x08005711
 80056c8:	080056dd 	.word	0x080056dd
 80056cc:	080056f3 	.word	0x080056f3
 80056d0:	08005711 	.word	0x08005711
 80056d4:	08005711 	.word	0x08005711
 80056d8:	08005711 	.word	0x08005711
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056e0:	3308      	adds	r3, #8
 80056e2:	2101      	movs	r1, #1
 80056e4:	4618      	mov	r0, r3
 80056e6:	f001 fd9b 	bl	8007220 <RCCEx_PLL2_Config>
 80056ea:	4603      	mov	r3, r0
 80056ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80056f0:	e00f      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056f6:	3328      	adds	r3, #40	; 0x28
 80056f8:	2101      	movs	r1, #1
 80056fa:	4618      	mov	r0, r3
 80056fc:	f001 fe42 	bl	8007384 <RCCEx_PLL3_Config>
 8005700:	4603      	mov	r3, r0
 8005702:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005706:	e004      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800570e:	e000      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8005710:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005712:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10b      	bne.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800571a:	4b96      	ldr	r3, [pc, #600]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800571c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571e:	f023 0107 	bic.w	r1, r3, #7
 8005722:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800572a:	4a92      	ldr	r2, [pc, #584]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800572c:	430b      	orrs	r3, r1
 800572e:	6553      	str	r3, [r2, #84]	; 0x54
 8005730:	e003      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005732:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005736:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800573a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800573e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005742:	f002 0304 	and.w	r3, r2, #4
 8005746:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800574a:	2300      	movs	r3, #0
 800574c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005750:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005754:	460b      	mov	r3, r1
 8005756:	4313      	orrs	r3, r2
 8005758:	d043      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800575a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800575e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005762:	2b05      	cmp	r3, #5
 8005764:	d824      	bhi.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005766:	a201      	add	r2, pc, #4	; (adr r2, 800576c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8005768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576c:	080057b9 	.word	0x080057b9
 8005770:	08005785 	.word	0x08005785
 8005774:	0800579b 	.word	0x0800579b
 8005778:	080057b9 	.word	0x080057b9
 800577c:	080057b9 	.word	0x080057b9
 8005780:	080057b9 	.word	0x080057b9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005784:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005788:	3308      	adds	r3, #8
 800578a:	2101      	movs	r1, #1
 800578c:	4618      	mov	r0, r3
 800578e:	f001 fd47 	bl	8007220 <RCCEx_PLL2_Config>
 8005792:	4603      	mov	r3, r0
 8005794:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005798:	e00f      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800579a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800579e:	3328      	adds	r3, #40	; 0x28
 80057a0:	2101      	movs	r1, #1
 80057a2:	4618      	mov	r0, r3
 80057a4:	f001 fdee 	bl	8007384 <RCCEx_PLL3_Config>
 80057a8:	4603      	mov	r3, r0
 80057aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80057ae:	e004      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80057b6:	e000      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80057b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10b      	bne.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057c2:	4b6c      	ldr	r3, [pc, #432]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80057c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c6:	f023 0107 	bic.w	r1, r3, #7
 80057ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057d2:	4a68      	ldr	r2, [pc, #416]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80057d4:	430b      	orrs	r3, r1
 80057d6:	6593      	str	r3, [r2, #88]	; 0x58
 80057d8:	e003      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80057de:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ea:	f002 0320 	and.w	r3, r2, #32
 80057ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80057f2:	2300      	movs	r3, #0
 80057f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80057fc:	460b      	mov	r3, r1
 80057fe:	4313      	orrs	r3, r2
 8005800:	d055      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005802:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005806:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800580a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800580e:	d033      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005810:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005814:	d82c      	bhi.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800581a:	d02f      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800581c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005820:	d826      	bhi.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005822:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005826:	d02b      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005828:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800582c:	d820      	bhi.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800582e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005832:	d012      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005838:	d81a      	bhi.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800583a:	2b00      	cmp	r3, #0
 800583c:	d022      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800583e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005842:	d115      	bne.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005844:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005848:	3308      	adds	r3, #8
 800584a:	2100      	movs	r1, #0
 800584c:	4618      	mov	r0, r3
 800584e:	f001 fce7 	bl	8007220 <RCCEx_PLL2_Config>
 8005852:	4603      	mov	r3, r0
 8005854:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005858:	e015      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800585a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800585e:	3328      	adds	r3, #40	; 0x28
 8005860:	2102      	movs	r1, #2
 8005862:	4618      	mov	r0, r3
 8005864:	f001 fd8e 	bl	8007384 <RCCEx_PLL3_Config>
 8005868:	4603      	mov	r3, r0
 800586a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800586e:	e00a      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005876:	e006      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005878:	bf00      	nop
 800587a:	e004      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800587c:	bf00      	nop
 800587e:	e002      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005880:	bf00      	nop
 8005882:	e000      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005886:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10b      	bne.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800588e:	4b39      	ldr	r3, [pc, #228]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005892:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005896:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800589a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800589e:	4a35      	ldr	r2, [pc, #212]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80058a0:	430b      	orrs	r3, r1
 80058a2:	6553      	str	r3, [r2, #84]	; 0x54
 80058a4:	e003      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80058aa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80058ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80058ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058be:	2300      	movs	r3, #0
 80058c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80058c4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80058c8:	460b      	mov	r3, r1
 80058ca:	4313      	orrs	r3, r2
 80058cc:	d058      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80058ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80058d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80058da:	d033      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80058dc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80058e0:	d82c      	bhi.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80058e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058e6:	d02f      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80058e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ec:	d826      	bhi.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80058ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058f2:	d02b      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80058f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058f8:	d820      	bhi.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80058fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058fe:	d012      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8005900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005904:	d81a      	bhi.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005906:	2b00      	cmp	r3, #0
 8005908:	d022      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800590a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800590e:	d115      	bne.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005910:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005914:	3308      	adds	r3, #8
 8005916:	2100      	movs	r1, #0
 8005918:	4618      	mov	r0, r3
 800591a:	f001 fc81 	bl	8007220 <RCCEx_PLL2_Config>
 800591e:	4603      	mov	r3, r0
 8005920:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005924:	e015      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005926:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800592a:	3328      	adds	r3, #40	; 0x28
 800592c:	2102      	movs	r1, #2
 800592e:	4618      	mov	r0, r3
 8005930:	f001 fd28 	bl	8007384 <RCCEx_PLL3_Config>
 8005934:	4603      	mov	r3, r0
 8005936:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800593a:	e00a      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005942:	e006      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005944:	bf00      	nop
 8005946:	e004      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005948:	bf00      	nop
 800594a:	e002      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800594c:	bf00      	nop
 800594e:	e000      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005950:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005952:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10e      	bne.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800595a:	4b06      	ldr	r3, [pc, #24]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800595c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800595e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005962:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005966:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800596a:	4a02      	ldr	r2, [pc, #8]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800596c:	430b      	orrs	r3, r1
 800596e:	6593      	str	r3, [r2, #88]	; 0x58
 8005970:	e006      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8005972:	bf00      	nop
 8005974:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005978:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800597c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005980:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005988:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800598c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005990:	2300      	movs	r3, #0
 8005992:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005996:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800599a:	460b      	mov	r3, r1
 800599c:	4313      	orrs	r3, r2
 800599e:	d055      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80059a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80059a8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80059ac:	d033      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80059ae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80059b2:	d82c      	bhi.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80059b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059b8:	d02f      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80059ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059be:	d826      	bhi.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80059c0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80059c4:	d02b      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80059c6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80059ca:	d820      	bhi.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80059cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059d0:	d012      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80059d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059d6:	d81a      	bhi.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d022      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80059dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059e0:	d115      	bne.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059e6:	3308      	adds	r3, #8
 80059e8:	2100      	movs	r1, #0
 80059ea:	4618      	mov	r0, r3
 80059ec:	f001 fc18 	bl	8007220 <RCCEx_PLL2_Config>
 80059f0:	4603      	mov	r3, r0
 80059f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80059f6:	e015      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059fc:	3328      	adds	r3, #40	; 0x28
 80059fe:	2102      	movs	r1, #2
 8005a00:	4618      	mov	r0, r3
 8005a02:	f001 fcbf 	bl	8007384 <RCCEx_PLL3_Config>
 8005a06:	4603      	mov	r3, r0
 8005a08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005a0c:	e00a      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005a14:	e006      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005a16:	bf00      	nop
 8005a18:	e004      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005a1a:	bf00      	nop
 8005a1c:	e002      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005a1e:	bf00      	nop
 8005a20:	e000      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005a22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a24:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10b      	bne.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005a2c:	4ba1      	ldr	r3, [pc, #644]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a30:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005a34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a38:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005a3c:	4a9d      	ldr	r2, [pc, #628]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005a3e:	430b      	orrs	r3, r1
 8005a40:	6593      	str	r3, [r2, #88]	; 0x58
 8005a42:	e003      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a48:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a54:	f002 0308 	and.w	r3, r2, #8
 8005a58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005a62:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005a66:	460b      	mov	r3, r1
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	d01e      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a78:	d10c      	bne.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005a7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a7e:	3328      	adds	r3, #40	; 0x28
 8005a80:	2102      	movs	r1, #2
 8005a82:	4618      	mov	r0, r3
 8005a84:	f001 fc7e 	bl	8007384 <RCCEx_PLL3_Config>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d002      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005a94:	4b87      	ldr	r3, [pc, #540]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a98:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aa4:	4a83      	ldr	r2, [pc, #524]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005aa6:	430b      	orrs	r3, r1
 8005aa8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab2:	f002 0310 	and.w	r3, r2, #16
 8005ab6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005aba:	2300      	movs	r3, #0
 8005abc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005ac0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	d01e      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005aca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ace:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ad6:	d10c      	bne.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005adc:	3328      	adds	r3, #40	; 0x28
 8005ade:	2102      	movs	r1, #2
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f001 fc4f 	bl	8007384 <RCCEx_PLL3_Config>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005af2:	4b70      	ldr	r3, [pc, #448]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005afa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005afe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005b02:	4a6c      	ldr	r2, [pc, #432]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005b04:	430b      	orrs	r3, r1
 8005b06:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b10:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005b14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b18:	2300      	movs	r3, #0
 8005b1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b1e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005b22:	460b      	mov	r3, r1
 8005b24:	4313      	orrs	r3, r2
 8005b26:	d03e      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b34:	d022      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8005b36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b3a:	d81b      	bhi.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d003      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8005b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b44:	d00b      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8005b46:	e015      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b4c:	3308      	adds	r3, #8
 8005b4e:	2100      	movs	r1, #0
 8005b50:	4618      	mov	r0, r3
 8005b52:	f001 fb65 	bl	8007220 <RCCEx_PLL2_Config>
 8005b56:	4603      	mov	r3, r0
 8005b58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005b5c:	e00f      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b62:	3328      	adds	r3, #40	; 0x28
 8005b64:	2102      	movs	r1, #2
 8005b66:	4618      	mov	r0, r3
 8005b68:	f001 fc0c 	bl	8007384 <RCCEx_PLL3_Config>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005b72:	e004      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005b7a:	e000      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8005b7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b7e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10b      	bne.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b86:	4b4b      	ldr	r3, [pc, #300]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b8a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b96:	4a47      	ldr	r2, [pc, #284]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005b98:	430b      	orrs	r3, r1
 8005b9a:	6593      	str	r3, [r2, #88]	; 0x58
 8005b9c:	e003      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b9e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005ba2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bae:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005bb2:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005bb8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	d03b      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bce:	d01f      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8005bd0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bd4:	d818      	bhi.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005bd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bda:	d003      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8005bdc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005be0:	d007      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8005be2:	e011      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005be4:	4b33      	ldr	r3, [pc, #204]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be8:	4a32      	ldr	r2, [pc, #200]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005bea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005bf0:	e00f      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bf6:	3328      	adds	r3, #40	; 0x28
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f001 fbc2 	bl	8007384 <RCCEx_PLL3_Config>
 8005c00:	4603      	mov	r3, r0
 8005c02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8005c06:	e004      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005c0e:	e000      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8005c10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c12:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10b      	bne.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c1a:	4b26      	ldr	r3, [pc, #152]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c1e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005c22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c2a:	4a22      	ldr	r2, [pc, #136]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c2c:	430b      	orrs	r3, r1
 8005c2e:	6553      	str	r3, [r2, #84]	; 0x54
 8005c30:	e003      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c32:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c36:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c42:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005c46:	673b      	str	r3, [r7, #112]	; 0x70
 8005c48:	2300      	movs	r3, #0
 8005c4a:	677b      	str	r3, [r7, #116]	; 0x74
 8005c4c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005c50:	460b      	mov	r3, r1
 8005c52:	4313      	orrs	r3, r2
 8005c54:	d034      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d003      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8005c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c64:	d007      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8005c66:	e011      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c68:	4b12      	ldr	r3, [pc, #72]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6c:	4a11      	ldr	r2, [pc, #68]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005c74:	e00e      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c7a:	3308      	adds	r3, #8
 8005c7c:	2102      	movs	r1, #2
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f001 face 	bl	8007220 <RCCEx_PLL2_Config>
 8005c84:	4603      	mov	r3, r0
 8005c86:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005c8a:	e003      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005c92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c94:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10d      	bne.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005c9c:	4b05      	ldr	r3, [pc, #20]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005caa:	4a02      	ldr	r2, [pc, #8]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005cac:	430b      	orrs	r3, r1
 8005cae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005cb0:	e006      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8005cb2:	bf00      	nop
 8005cb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005cbc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005cc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005ccc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cce:	2300      	movs	r3, #0
 8005cd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005cd2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	d00c      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ce0:	3328      	adds	r3, #40	; 0x28
 8005ce2:	2102      	movs	r1, #2
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f001 fb4d 	bl	8007384 <RCCEx_PLL3_Config>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfe:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005d02:	663b      	str	r3, [r7, #96]	; 0x60
 8005d04:	2300      	movs	r3, #0
 8005d06:	667b      	str	r3, [r7, #100]	; 0x64
 8005d08:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	d038      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005d12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d1e:	d018      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8005d20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d24:	d811      	bhi.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005d26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d2a:	d014      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8005d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d30:	d80b      	bhi.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d011      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8005d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d3a:	d106      	bne.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d3c:	4bc3      	ldr	r3, [pc, #780]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d40:	4ac2      	ldr	r2, [pc, #776]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005d42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005d48:	e008      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005d50:	e004      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005d52:	bf00      	nop
 8005d54:	e002      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005d56:	bf00      	nop
 8005d58:	e000      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005d5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d5c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10b      	bne.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d64:	4bb9      	ldr	r3, [pc, #740]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d68:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d74:	4ab5      	ldr	r2, [pc, #724]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005d76:	430b      	orrs	r3, r1
 8005d78:	6553      	str	r3, [r2, #84]	; 0x54
 8005d7a:	e003      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d7c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d80:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005d84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005d90:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d92:	2300      	movs	r3, #0
 8005d94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d96:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	d009      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005da0:	4baa      	ldr	r3, [pc, #680]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005da8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dae:	4aa7      	ldr	r2, [pc, #668]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005db0:	430b      	orrs	r3, r1
 8005db2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005db4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbc:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005dc0:	653b      	str	r3, [r7, #80]	; 0x50
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	657b      	str	r3, [r7, #84]	; 0x54
 8005dc6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005dca:	460b      	mov	r3, r1
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	d009      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005dd0:	4b9e      	ldr	r3, [pc, #632]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dd4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005dd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dde:	4a9b      	ldr	r2, [pc, #620]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005de0:	430b      	orrs	r3, r1
 8005de2:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dec:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005df0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005df2:	2300      	movs	r3, #0
 8005df4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005df6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	d009      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005e00:	4b92      	ldr	r3, [pc, #584]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e04:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8005e08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e0e:	4a8f      	ldr	r2, [pc, #572]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005e10:	430b      	orrs	r3, r1
 8005e12:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005e20:	643b      	str	r3, [r7, #64]	; 0x40
 8005e22:	2300      	movs	r3, #0
 8005e24:	647b      	str	r3, [r7, #68]	; 0x44
 8005e26:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	d00e      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e30:	4b86      	ldr	r3, [pc, #536]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	4a85      	ldr	r2, [pc, #532]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005e36:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e3a:	6113      	str	r3, [r2, #16]
 8005e3c:	4b83      	ldr	r3, [pc, #524]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005e3e:	6919      	ldr	r1, [r3, #16]
 8005e40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e44:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005e48:	4a80      	ldr	r2, [pc, #512]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005e4a:	430b      	orrs	r3, r1
 8005e4c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e56:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005e5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e60:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005e64:	460b      	mov	r3, r1
 8005e66:	4313      	orrs	r3, r2
 8005e68:	d009      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005e6a:	4b78      	ldr	r3, [pc, #480]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e6e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e78:	4a74      	ldr	r2, [pc, #464]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005e7a:	430b      	orrs	r3, r1
 8005e7c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e86:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005e8a:	633b      	str	r3, [r7, #48]	; 0x30
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8005e90:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005e94:	460b      	mov	r3, r1
 8005e96:	4313      	orrs	r3, r2
 8005e98:	d00a      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005e9a:	4b6c      	ldr	r3, [pc, #432]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e9e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eaa:	4a68      	ldr	r2, [pc, #416]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005eac:	430b      	orrs	r3, r1
 8005eae:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb8:	2100      	movs	r1, #0
 8005eba:	62b9      	str	r1, [r7, #40]	; 0x28
 8005ebc:	f003 0301 	and.w	r3, r3, #1
 8005ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ec2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	d011      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ecc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ed0:	3308      	adds	r3, #8
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f001 f9a3 	bl	8007220 <RCCEx_PLL2_Config>
 8005eda:	4603      	mov	r3, r0
 8005edc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005ee0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d003      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005eec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef8:	2100      	movs	r1, #0
 8005efa:	6239      	str	r1, [r7, #32]
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	627b      	str	r3, [r7, #36]	; 0x24
 8005f02:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005f06:	460b      	mov	r3, r1
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	d011      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f10:	3308      	adds	r3, #8
 8005f12:	2101      	movs	r1, #1
 8005f14:	4618      	mov	r0, r3
 8005f16:	f001 f983 	bl	8007220 <RCCEx_PLL2_Config>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005f20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d003      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f2c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f38:	2100      	movs	r1, #0
 8005f3a:	61b9      	str	r1, [r7, #24]
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	61fb      	str	r3, [r7, #28]
 8005f42:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005f46:	460b      	mov	r3, r1
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	d011      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f50:	3308      	adds	r3, #8
 8005f52:	2102      	movs	r1, #2
 8005f54:	4618      	mov	r0, r3
 8005f56:	f001 f963 	bl	8007220 <RCCEx_PLL2_Config>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005f60:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d003      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f6c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	2100      	movs	r1, #0
 8005f7a:	6139      	str	r1, [r7, #16]
 8005f7c:	f003 0308 	and.w	r3, r3, #8
 8005f80:	617b      	str	r3, [r7, #20]
 8005f82:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005f86:	460b      	mov	r3, r1
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	d011      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f90:	3328      	adds	r3, #40	; 0x28
 8005f92:	2100      	movs	r1, #0
 8005f94:	4618      	mov	r0, r3
 8005f96:	f001 f9f5 	bl	8007384 <RCCEx_PLL3_Config>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8005fa0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d003      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005fac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb8:	2100      	movs	r1, #0
 8005fba:	60b9      	str	r1, [r7, #8]
 8005fbc:	f003 0310 	and.w	r3, r3, #16
 8005fc0:	60fb      	str	r3, [r7, #12]
 8005fc2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	d011      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fd0:	3328      	adds	r3, #40	; 0x28
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f001 f9d5 	bl	8007384 <RCCEx_PLL3_Config>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005fe0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fe8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005fec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005ff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	6039      	str	r1, [r7, #0]
 8005ffc:	f003 0320 	and.w	r3, r3, #32
 8006000:	607b      	str	r3, [r7, #4]
 8006002:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006006:	460b      	mov	r3, r1
 8006008:	4313      	orrs	r3, r2
 800600a:	d011      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800600c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006010:	3328      	adds	r3, #40	; 0x28
 8006012:	2102      	movs	r1, #2
 8006014:	4618      	mov	r0, r3
 8006016:	f001 f9b5 	bl	8007384 <RCCEx_PLL3_Config>
 800601a:	4603      	mov	r3, r0
 800601c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006020:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006024:	2b00      	cmp	r3, #0
 8006026:	d003      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006028:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800602c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8006030:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8006034:	2b00      	cmp	r3, #0
 8006036:	d101      	bne.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8006038:	2300      	movs	r3, #0
 800603a:	e000      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
}
 800603e:	4618      	mov	r0, r3
 8006040:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8006044:	46bd      	mov	sp, r7
 8006046:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800604a:	bf00      	nop
 800604c:	58024400 	.word	0x58024400

08006050 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b090      	sub	sp, #64	; 0x40
 8006054:	af00      	add	r7, sp, #0
 8006056:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800605a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800605e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006062:	430b      	orrs	r3, r1
 8006064:	f040 8094 	bne.w	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006068:	4b97      	ldr	r3, [pc, #604]	; (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800606a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800606c:	f003 0307 	and.w	r3, r3, #7
 8006070:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006074:	2b04      	cmp	r3, #4
 8006076:	f200 8087 	bhi.w	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800607a:	a201      	add	r2, pc, #4	; (adr r2, 8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800607c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006080:	08006095 	.word	0x08006095
 8006084:	080060bd 	.word	0x080060bd
 8006088:	080060e5 	.word	0x080060e5
 800608c:	08006181 	.word	0x08006181
 8006090:	0800610d 	.word	0x0800610d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006094:	4b8c      	ldr	r3, [pc, #560]	; (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800609c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060a0:	d108      	bne.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060a6:	4618      	mov	r0, r3
 80060a8:	f000 ff68 	bl	8006f7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80060ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060b0:	f000 bc97 	b.w	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80060b4:	2300      	movs	r3, #0
 80060b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060b8:	f000 bc93 	b.w	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80060bc:	4b82      	ldr	r3, [pc, #520]	; (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060c8:	d108      	bne.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060ca:	f107 0318 	add.w	r3, r7, #24
 80060ce:	4618      	mov	r0, r3
 80060d0:	f000 fcac 	bl	8006a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060d8:	f000 bc83 	b.w	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80060dc:	2300      	movs	r3, #0
 80060de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060e0:	f000 bc7f 	b.w	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80060e4:	4b78      	ldr	r3, [pc, #480]	; (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060f0:	d108      	bne.n	8006104 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060f2:	f107 030c 	add.w	r3, r7, #12
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 fdec 	bl	8006cd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006100:	f000 bc6f 	b.w	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006104:	2300      	movs	r3, #0
 8006106:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006108:	f000 bc6b 	b.w	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800610c:	4b6e      	ldr	r3, [pc, #440]	; (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800610e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006110:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006114:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006116:	4b6c      	ldr	r3, [pc, #432]	; (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0304 	and.w	r3, r3, #4
 800611e:	2b04      	cmp	r3, #4
 8006120:	d10c      	bne.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006124:	2b00      	cmp	r3, #0
 8006126:	d109      	bne.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006128:	4b67      	ldr	r3, [pc, #412]	; (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	08db      	lsrs	r3, r3, #3
 800612e:	f003 0303 	and.w	r3, r3, #3
 8006132:	4a66      	ldr	r2, [pc, #408]	; (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006134:	fa22 f303 	lsr.w	r3, r2, r3
 8006138:	63fb      	str	r3, [r7, #60]	; 0x3c
 800613a:	e01f      	b.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800613c:	4b62      	ldr	r3, [pc, #392]	; (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006148:	d106      	bne.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800614a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800614c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006150:	d102      	bne.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006152:	4b5f      	ldr	r3, [pc, #380]	; (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006154:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006156:	e011      	b.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006158:	4b5b      	ldr	r3, [pc, #364]	; (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006160:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006164:	d106      	bne.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006168:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800616c:	d102      	bne.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800616e:	4b59      	ldr	r3, [pc, #356]	; (80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006170:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006172:	e003      	b.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006174:	2300      	movs	r3, #0
 8006176:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006178:	f000 bc33 	b.w	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800617c:	f000 bc31 	b.w	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006180:	4b55      	ldr	r3, [pc, #340]	; (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006184:	f000 bc2d 	b.w	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8006188:	2300      	movs	r3, #0
 800618a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800618c:	f000 bc29 	b.w	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8006190:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006194:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006198:	430b      	orrs	r3, r1
 800619a:	f040 809f 	bne.w	80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800619e:	4b4a      	ldr	r3, [pc, #296]	; (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80061a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061a2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80061a6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80061a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061ae:	d04d      	beq.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80061b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061b6:	f200 8084 	bhi.w	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80061ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061bc:	2bc0      	cmp	r3, #192	; 0xc0
 80061be:	d07d      	beq.n	80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 80061c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c2:	2bc0      	cmp	r3, #192	; 0xc0
 80061c4:	d87d      	bhi.n	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	2b80      	cmp	r3, #128	; 0x80
 80061ca:	d02d      	beq.n	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 80061cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ce:	2b80      	cmp	r3, #128	; 0x80
 80061d0:	d877      	bhi.n	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80061d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d003      	beq.n	80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 80061d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061da:	2b40      	cmp	r3, #64	; 0x40
 80061dc:	d012      	beq.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80061de:	e070      	b.n	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80061e0:	4b39      	ldr	r3, [pc, #228]	; (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061ec:	d107      	bne.n	80061fe <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 fec2 	bl	8006f7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80061f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061fc:	e3f1      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80061fe:	2300      	movs	r3, #0
 8006200:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006202:	e3ee      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006204:	4b30      	ldr	r3, [pc, #192]	; (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800620c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006210:	d107      	bne.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006212:	f107 0318 	add.w	r3, r7, #24
 8006216:	4618      	mov	r0, r3
 8006218:	f000 fc08 	bl	8006a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006220:	e3df      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006222:	2300      	movs	r3, #0
 8006224:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006226:	e3dc      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006228:	4b27      	ldr	r3, [pc, #156]	; (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006234:	d107      	bne.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006236:	f107 030c 	add.w	r3, r7, #12
 800623a:	4618      	mov	r0, r3
 800623c:	f000 fd4a 	bl	8006cd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006244:	e3cd      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006246:	2300      	movs	r3, #0
 8006248:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800624a:	e3ca      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800624c:	4b1e      	ldr	r3, [pc, #120]	; (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800624e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006250:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006254:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006256:	4b1c      	ldr	r3, [pc, #112]	; (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0304 	and.w	r3, r3, #4
 800625e:	2b04      	cmp	r3, #4
 8006260:	d10c      	bne.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8006262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006264:	2b00      	cmp	r3, #0
 8006266:	d109      	bne.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006268:	4b17      	ldr	r3, [pc, #92]	; (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	08db      	lsrs	r3, r3, #3
 800626e:	f003 0303 	and.w	r3, r3, #3
 8006272:	4a16      	ldr	r2, [pc, #88]	; (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006274:	fa22 f303 	lsr.w	r3, r2, r3
 8006278:	63fb      	str	r3, [r7, #60]	; 0x3c
 800627a:	e01e      	b.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800627c:	4b12      	ldr	r3, [pc, #72]	; (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006288:	d106      	bne.n	8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800628a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800628c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006290:	d102      	bne.n	8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006292:	4b0f      	ldr	r3, [pc, #60]	; (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006294:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006296:	e010      	b.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006298:	4b0b      	ldr	r3, [pc, #44]	; (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062a4:	d106      	bne.n	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80062a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062ac:	d102      	bne.n	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80062ae:	4b09      	ldr	r3, [pc, #36]	; (80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80062b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062b2:	e002      	b.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80062b4:	2300      	movs	r3, #0
 80062b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80062b8:	e393      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80062ba:	e392      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80062bc:	4b06      	ldr	r3, [pc, #24]	; (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80062be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062c0:	e38f      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80062c2:	2300      	movs	r3, #0
 80062c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062c6:	e38c      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80062c8:	58024400 	.word	0x58024400
 80062cc:	03d09000 	.word	0x03d09000
 80062d0:	003d0900 	.word	0x003d0900
 80062d4:	007a1200 	.word	0x007a1200
 80062d8:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80062dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062e0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80062e4:	430b      	orrs	r3, r1
 80062e6:	f040 809c 	bne.w	8006422 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 80062ea:	4b9e      	ldr	r3, [pc, #632]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80062ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ee:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80062f2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80062f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062fa:	d054      	beq.n	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 80062fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006302:	f200 808b 	bhi.w	800641c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006308:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800630c:	f000 8083 	beq.w	8006416 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8006310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006312:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006316:	f200 8081 	bhi.w	800641c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006320:	d02f      	beq.n	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8006322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006328:	d878      	bhi.n	800641c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	2b00      	cmp	r3, #0
 800632e:	d004      	beq.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8006330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006336:	d012      	beq.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8006338:	e070      	b.n	800641c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800633a:	4b8a      	ldr	r3, [pc, #552]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006342:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006346:	d107      	bne.n	8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800634c:	4618      	mov	r0, r3
 800634e:	f000 fe15 	bl	8006f7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006354:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006356:	e344      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006358:	2300      	movs	r3, #0
 800635a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800635c:	e341      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800635e:	4b81      	ldr	r3, [pc, #516]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006366:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800636a:	d107      	bne.n	800637c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800636c:	f107 0318 	add.w	r3, r7, #24
 8006370:	4618      	mov	r0, r3
 8006372:	f000 fb5b 	bl	8006a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800637a:	e332      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800637c:	2300      	movs	r3, #0
 800637e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006380:	e32f      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006382:	4b78      	ldr	r3, [pc, #480]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800638a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800638e:	d107      	bne.n	80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006390:	f107 030c 	add.w	r3, r7, #12
 8006394:	4618      	mov	r0, r3
 8006396:	f000 fc9d 	bl	8006cd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800639e:	e320      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80063a0:	2300      	movs	r3, #0
 80063a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063a4:	e31d      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80063a6:	4b6f      	ldr	r3, [pc, #444]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80063a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80063ae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80063b0:	4b6c      	ldr	r3, [pc, #432]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0304 	and.w	r3, r3, #4
 80063b8:	2b04      	cmp	r3, #4
 80063ba:	d10c      	bne.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80063bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d109      	bne.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063c2:	4b68      	ldr	r3, [pc, #416]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	08db      	lsrs	r3, r3, #3
 80063c8:	f003 0303 	and.w	r3, r3, #3
 80063cc:	4a66      	ldr	r2, [pc, #408]	; (8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80063ce:	fa22 f303 	lsr.w	r3, r2, r3
 80063d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063d4:	e01e      	b.n	8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80063d6:	4b63      	ldr	r3, [pc, #396]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063e2:	d106      	bne.n	80063f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80063e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063ea:	d102      	bne.n	80063f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80063ec:	4b5f      	ldr	r3, [pc, #380]	; (800656c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80063ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063f0:	e010      	b.n	8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80063f2:	4b5c      	ldr	r3, [pc, #368]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063fe:	d106      	bne.n	800640e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006402:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006406:	d102      	bne.n	800640e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006408:	4b59      	ldr	r3, [pc, #356]	; (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800640a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800640c:	e002      	b.n	8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800640e:	2300      	movs	r3, #0
 8006410:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 8006412:	e2e6      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006414:	e2e5      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006416:	4b57      	ldr	r3, [pc, #348]	; (8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006418:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800641a:	e2e2      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800641c:	2300      	movs	r3, #0
 800641e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006420:	e2df      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006422:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006426:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800642a:	430b      	orrs	r3, r1
 800642c:	f040 80a7 	bne.w	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006430:	4b4c      	ldr	r3, [pc, #304]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006434:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006438:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800643a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006440:	d055      	beq.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8006442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006444:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006448:	f200 8096 	bhi.w	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800644c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006452:	f000 8084 	beq.w	800655e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8006456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006458:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800645c:	f200 808c 	bhi.w	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006466:	d030      	beq.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8006468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800646e:	f200 8083 	bhi.w	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006474:	2b00      	cmp	r3, #0
 8006476:	d004      	beq.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8006478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800647e:	d012      	beq.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8006480:	e07a      	b.n	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006482:	4b38      	ldr	r3, [pc, #224]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800648a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800648e:	d107      	bne.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006494:	4618      	mov	r0, r3
 8006496:	f000 fd71 	bl	8006f7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800649a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800649e:	e2a0      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80064a0:	2300      	movs	r3, #0
 80064a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064a4:	e29d      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064a6:	4b2f      	ldr	r3, [pc, #188]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064b2:	d107      	bne.n	80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064b4:	f107 0318 	add.w	r3, r7, #24
 80064b8:	4618      	mov	r0, r3
 80064ba:	f000 fab7 	bl	8006a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064c2:	e28e      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80064c4:	2300      	movs	r3, #0
 80064c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064c8:	e28b      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80064ca:	4b26      	ldr	r3, [pc, #152]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064d6:	d107      	bne.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064d8:	f107 030c 	add.w	r3, r7, #12
 80064dc:	4618      	mov	r0, r3
 80064de:	f000 fbf9 	bl	8006cd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064e6:	e27c      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80064e8:	2300      	movs	r3, #0
 80064ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064ec:	e279      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80064ee:	4b1d      	ldr	r3, [pc, #116]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80064f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80064f6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064f8:	4b1a      	ldr	r3, [pc, #104]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0304 	and.w	r3, r3, #4
 8006500:	2b04      	cmp	r3, #4
 8006502:	d10c      	bne.n	800651e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8006504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006506:	2b00      	cmp	r3, #0
 8006508:	d109      	bne.n	800651e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800650a:	4b16      	ldr	r3, [pc, #88]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	08db      	lsrs	r3, r3, #3
 8006510:	f003 0303 	and.w	r3, r3, #3
 8006514:	4a14      	ldr	r2, [pc, #80]	; (8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8006516:	fa22 f303 	lsr.w	r3, r2, r3
 800651a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800651c:	e01e      	b.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800651e:	4b11      	ldr	r3, [pc, #68]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800652a:	d106      	bne.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800652c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800652e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006532:	d102      	bne.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006534:	4b0d      	ldr	r3, [pc, #52]	; (800656c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8006536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006538:	e010      	b.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800653a:	4b0a      	ldr	r3, [pc, #40]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006542:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006546:	d106      	bne.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800654e:	d102      	bne.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006550:	4b07      	ldr	r3, [pc, #28]	; (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8006552:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006554:	e002      	b.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006556:	2300      	movs	r3, #0
 8006558:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800655a:	e242      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800655c:	e241      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800655e:	4b05      	ldr	r3, [pc, #20]	; (8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006560:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006562:	e23e      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006564:	58024400 	.word	0x58024400
 8006568:	03d09000 	.word	0x03d09000
 800656c:	003d0900 	.word	0x003d0900
 8006570:	007a1200 	.word	0x007a1200
 8006574:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8006578:	2300      	movs	r3, #0
 800657a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800657c:	e231      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800657e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006582:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006586:	430b      	orrs	r3, r1
 8006588:	f040 8085 	bne.w	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800658c:	4b9c      	ldr	r3, [pc, #624]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800658e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006590:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006594:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800659c:	d06b      	beq.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800659e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065a4:	d874      	bhi.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80065a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065ac:	d056      	beq.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 80065ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065b4:	d86c      	bhi.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80065b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065bc:	d03b      	beq.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 80065be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065c4:	d864      	bhi.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80065c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065cc:	d021      	beq.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 80065ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065d4:	d85c      	bhi.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80065d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d004      	beq.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 80065dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065e2:	d004      	beq.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 80065e4:	e054      	b.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80065e6:	f7fe fb49 	bl	8004c7c <HAL_RCC_GetPCLK1Freq>
 80065ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80065ec:	e1f9      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065ee:	4b84      	ldr	r3, [pc, #528]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065fa:	d107      	bne.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065fc:	f107 0318 	add.w	r3, r7, #24
 8006600:	4618      	mov	r0, r3
 8006602:	f000 fa13 	bl	8006a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800660a:	e1ea      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800660c:	2300      	movs	r3, #0
 800660e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006610:	e1e7      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006612:	4b7b      	ldr	r3, [pc, #492]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800661a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800661e:	d107      	bne.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006620:	f107 030c 	add.w	r3, r7, #12
 8006624:	4618      	mov	r0, r3
 8006626:	f000 fb55 	bl	8006cd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800662e:	e1d8      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006630:	2300      	movs	r3, #0
 8006632:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006634:	e1d5      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006636:	4b72      	ldr	r3, [pc, #456]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0304 	and.w	r3, r3, #4
 800663e:	2b04      	cmp	r3, #4
 8006640:	d109      	bne.n	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006642:	4b6f      	ldr	r3, [pc, #444]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	08db      	lsrs	r3, r3, #3
 8006648:	f003 0303 	and.w	r3, r3, #3
 800664c:	4a6d      	ldr	r2, [pc, #436]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800664e:	fa22 f303 	lsr.w	r3, r2, r3
 8006652:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006654:	e1c5      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006656:	2300      	movs	r3, #0
 8006658:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800665a:	e1c2      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800665c:	4b68      	ldr	r3, [pc, #416]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006668:	d102      	bne.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800666a:	4b67      	ldr	r3, [pc, #412]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800666c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800666e:	e1b8      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006670:	2300      	movs	r3, #0
 8006672:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006674:	e1b5      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006676:	4b62      	ldr	r3, [pc, #392]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800667e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006682:	d102      	bne.n	800668a <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8006684:	4b61      	ldr	r3, [pc, #388]	; (800680c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8006686:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006688:	e1ab      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800668a:	2300      	movs	r3, #0
 800668c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800668e:	e1a8      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8006690:	2300      	movs	r3, #0
 8006692:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006694:	e1a5      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006696:	e9d7 2300 	ldrd	r2, r3, [r7]
 800669a:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800669e:	430b      	orrs	r3, r1
 80066a0:	d173      	bne.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80066a2:	4b57      	ldr	r3, [pc, #348]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80066a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80066aa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80066ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066b2:	d02f      	beq.n	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 80066b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066ba:	d863      	bhi.n	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80066bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d004      	beq.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80066c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066c8:	d012      	beq.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 80066ca:	e05b      	b.n	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066cc:	4b4c      	ldr	r3, [pc, #304]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066d8:	d107      	bne.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066da:	f107 0318 	add.w	r3, r7, #24
 80066de:	4618      	mov	r0, r3
 80066e0:	f000 f9a4 	bl	8006a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066e8:	e17b      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80066ea:	2300      	movs	r3, #0
 80066ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066ee:	e178      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80066f0:	4b43      	ldr	r3, [pc, #268]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066fc:	d107      	bne.n	800670e <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066fe:	f107 030c 	add.w	r3, r7, #12
 8006702:	4618      	mov	r0, r3
 8006704:	f000 fae6 	bl	8006cd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800670c:	e169      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800670e:	2300      	movs	r3, #0
 8006710:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006712:	e166      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006714:	4b3a      	ldr	r3, [pc, #232]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006718:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800671c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800671e:	4b38      	ldr	r3, [pc, #224]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0304 	and.w	r3, r3, #4
 8006726:	2b04      	cmp	r3, #4
 8006728:	d10c      	bne.n	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800672a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800672c:	2b00      	cmp	r3, #0
 800672e:	d109      	bne.n	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006730:	4b33      	ldr	r3, [pc, #204]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	08db      	lsrs	r3, r3, #3
 8006736:	f003 0303 	and.w	r3, r3, #3
 800673a:	4a32      	ldr	r2, [pc, #200]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800673c:	fa22 f303 	lsr.w	r3, r2, r3
 8006740:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006742:	e01e      	b.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006744:	4b2e      	ldr	r3, [pc, #184]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800674c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006750:	d106      	bne.n	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8006752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006754:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006758:	d102      	bne.n	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800675a:	4b2b      	ldr	r3, [pc, #172]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800675c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800675e:	e010      	b.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006760:	4b27      	ldr	r3, [pc, #156]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006768:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800676c:	d106      	bne.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800676e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006770:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006774:	d102      	bne.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006776:	4b25      	ldr	r3, [pc, #148]	; (800680c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8006778:	63fb      	str	r3, [r7, #60]	; 0x3c
 800677a:	e002      	b.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800677c:	2300      	movs	r3, #0
 800677e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006780:	e12f      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006782:	e12e      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006784:	2300      	movs	r3, #0
 8006786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006788:	e12b      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800678a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800678e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006792:	430b      	orrs	r3, r1
 8006794:	d13c      	bne.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006796:	4b1a      	ldr	r3, [pc, #104]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800679a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800679e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80067a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d004      	beq.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 80067a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067ac:	d012      	beq.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80067ae:	e023      	b.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80067b0:	4b13      	ldr	r3, [pc, #76]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067bc:	d107      	bne.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 fbda 	bl	8006f7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067cc:	e109      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80067ce:	2300      	movs	r3, #0
 80067d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067d2:	e106      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067d4:	4b0a      	ldr	r3, [pc, #40]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067e0:	d107      	bne.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067e2:	f107 0318 	add.w	r3, r7, #24
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 f920 	bl	8006a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80067ec:	6a3b      	ldr	r3, [r7, #32]
 80067ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067f0:	e0f7      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80067f2:	2300      	movs	r3, #0
 80067f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067f6:	e0f4      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80067f8:	2300      	movs	r3, #0
 80067fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067fc:	e0f1      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80067fe:	bf00      	nop
 8006800:	58024400 	.word	0x58024400
 8006804:	03d09000 	.word	0x03d09000
 8006808:	003d0900 	.word	0x003d0900
 800680c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006810:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006814:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006818:	430b      	orrs	r3, r1
 800681a:	f040 8091 	bne.w	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800681e:	4b73      	ldr	r3, [pc, #460]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006822:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006826:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800682e:	f000 8081 	beq.w	8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006834:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006838:	d87f      	bhi.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800683a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006840:	d06b      	beq.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8006842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006844:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006848:	d877      	bhi.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800684a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006850:	d056      	beq.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8006852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006858:	d86f      	bhi.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800685a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006860:	d03b      	beq.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8006862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006864:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006868:	d867      	bhi.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800686a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006870:	d021      	beq.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8006872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006874:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006878:	d85f      	bhi.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800687a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687c:	2b00      	cmp	r3, #0
 800687e:	d004      	beq.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006882:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006886:	d004      	beq.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8006888:	e057      	b.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800688a:	f000 f8b9 	bl	8006a00 <HAL_RCCEx_GetD3PCLK1Freq>
 800688e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006890:	e0a7      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006892:	4b56      	ldr	r3, [pc, #344]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800689a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800689e:	d107      	bne.n	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068a0:	f107 0318 	add.w	r3, r7, #24
 80068a4:	4618      	mov	r0, r3
 80068a6:	f000 f8c1 	bl	8006a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068ae:	e098      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80068b0:	2300      	movs	r3, #0
 80068b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068b4:	e095      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068b6:	4b4d      	ldr	r3, [pc, #308]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068c2:	d107      	bne.n	80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068c4:	f107 030c 	add.w	r3, r7, #12
 80068c8:	4618      	mov	r0, r3
 80068ca:	f000 fa03 	bl	8006cd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068d2:	e086      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80068d4:	2300      	movs	r3, #0
 80068d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068d8:	e083      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068da:	4b44      	ldr	r3, [pc, #272]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0304 	and.w	r3, r3, #4
 80068e2:	2b04      	cmp	r3, #4
 80068e4:	d109      	bne.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068e6:	4b41      	ldr	r3, [pc, #260]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	08db      	lsrs	r3, r3, #3
 80068ec:	f003 0303 	and.w	r3, r3, #3
 80068f0:	4a3f      	ldr	r2, [pc, #252]	; (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80068f2:	fa22 f303 	lsr.w	r3, r2, r3
 80068f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068f8:	e073      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80068fa:	2300      	movs	r3, #0
 80068fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068fe:	e070      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006900:	4b3a      	ldr	r3, [pc, #232]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006908:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800690c:	d102      	bne.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800690e:	4b39      	ldr	r3, [pc, #228]	; (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8006910:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006912:	e066      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006914:	2300      	movs	r3, #0
 8006916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006918:	e063      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800691a:	4b34      	ldr	r3, [pc, #208]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006922:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006926:	d102      	bne.n	800692e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8006928:	4b33      	ldr	r3, [pc, #204]	; (80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800692a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800692c:	e059      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800692e:	2300      	movs	r3, #0
 8006930:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006932:	e056      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006934:	4b31      	ldr	r3, [pc, #196]	; (80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8006936:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006938:	e053      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800693a:	2300      	movs	r3, #0
 800693c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800693e:	e050      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006940:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006944:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006948:	430b      	orrs	r3, r1
 800694a:	d148      	bne.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800694c:	4b27      	ldr	r3, [pc, #156]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800694e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006950:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006954:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800695c:	d02a      	beq.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800695e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006960:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006964:	d838      	bhi.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006968:	2b00      	cmp	r3, #0
 800696a:	d004      	beq.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800696c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006972:	d00d      	beq.n	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8006974:	e030      	b.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006976:	4b1d      	ldr	r3, [pc, #116]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800697e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006982:	d102      	bne.n	800698a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8006984:	4b1c      	ldr	r3, [pc, #112]	; (80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006986:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006988:	e02b      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800698a:	2300      	movs	r3, #0
 800698c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800698e:	e028      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006990:	4b16      	ldr	r3, [pc, #88]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006998:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800699c:	d107      	bne.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800699e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 faea 	bl	8006f7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069ac:	e019      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80069ae:	2300      	movs	r3, #0
 80069b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069b2:	e016      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069b4:	4b0d      	ldr	r3, [pc, #52]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069c0:	d107      	bne.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069c2:	f107 0318 	add.w	r3, r7, #24
 80069c6:	4618      	mov	r0, r3
 80069c8:	f000 f830 	bl	8006a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069d0:	e007      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80069d2:	2300      	movs	r3, #0
 80069d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069d6:	e004      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80069d8:	2300      	movs	r3, #0
 80069da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069dc:	e001      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 80069de:	2300      	movs	r3, #0
 80069e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80069e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3740      	adds	r7, #64	; 0x40
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	58024400 	.word	0x58024400
 80069f0:	03d09000 	.word	0x03d09000
 80069f4:	003d0900 	.word	0x003d0900
 80069f8:	007a1200 	.word	0x007a1200
 80069fc:	00bb8000 	.word	0x00bb8000

08006a00 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8006a04:	f7fe f90a 	bl	8004c1c <HAL_RCC_GetHCLKFreq>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	4b06      	ldr	r3, [pc, #24]	; (8006a24 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	091b      	lsrs	r3, r3, #4
 8006a10:	f003 0307 	and.w	r3, r3, #7
 8006a14:	4904      	ldr	r1, [pc, #16]	; (8006a28 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006a16:	5ccb      	ldrb	r3, [r1, r3]
 8006a18:	f003 031f 	and.w	r3, r3, #31
 8006a1c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	58024400 	.word	0x58024400
 8006a28:	0800b2fc 	.word	0x0800b2fc

08006a2c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b089      	sub	sp, #36	; 0x24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a34:	4ba1      	ldr	r3, [pc, #644]	; (8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a38:	f003 0303 	and.w	r3, r3, #3
 8006a3c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006a3e:	4b9f      	ldr	r3, [pc, #636]	; (8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a42:	0b1b      	lsrs	r3, r3, #12
 8006a44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a48:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006a4a:	4b9c      	ldr	r3, [pc, #624]	; (8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4e:	091b      	lsrs	r3, r3, #4
 8006a50:	f003 0301 	and.w	r3, r3, #1
 8006a54:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006a56:	4b99      	ldr	r3, [pc, #612]	; (8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a5a:	08db      	lsrs	r3, r3, #3
 8006a5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	fb02 f303 	mul.w	r3, r2, r3
 8006a66:	ee07 3a90 	vmov	s15, r3
 8006a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 8111 	beq.w	8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	f000 8083 	beq.w	8006b88 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	f200 80a1 	bhi.w	8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d003      	beq.n	8006a98 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d056      	beq.n	8006b44 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006a96:	e099      	b.n	8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a98:	4b88      	ldr	r3, [pc, #544]	; (8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0320 	and.w	r3, r3, #32
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d02d      	beq.n	8006b00 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006aa4:	4b85      	ldr	r3, [pc, #532]	; (8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	08db      	lsrs	r3, r3, #3
 8006aaa:	f003 0303 	and.w	r3, r3, #3
 8006aae:	4a84      	ldr	r2, [pc, #528]	; (8006cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ab4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	ee07 3a90 	vmov	s15, r3
 8006abc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	ee07 3a90 	vmov	s15, r3
 8006ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ace:	4b7b      	ldr	r3, [pc, #492]	; (8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ad6:	ee07 3a90 	vmov	s15, r3
 8006ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ae2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006afa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006afe:	e087      	b.n	8006c10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	ee07 3a90 	vmov	s15, r3
 8006b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b0a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b12:	4b6a      	ldr	r3, [pc, #424]	; (8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b1a:	ee07 3a90 	vmov	s15, r3
 8006b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b26:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b42:	e065      	b.n	8006c10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	ee07 3a90 	vmov	s15, r3
 8006b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b4e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006ccc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b56:	4b59      	ldr	r3, [pc, #356]	; (8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b5e:	ee07 3a90 	vmov	s15, r3
 8006b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b6a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b86:	e043      	b.n	8006c10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	ee07 3a90 	vmov	s15, r3
 8006b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b92:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b9a:	4b48      	ldr	r3, [pc, #288]	; (8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba2:	ee07 3a90 	vmov	s15, r3
 8006ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bae:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bca:	e021      	b.n	8006c10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	ee07 3a90 	vmov	s15, r3
 8006bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006ccc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bde:	4b37      	ldr	r3, [pc, #220]	; (8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be6:	ee07 3a90 	vmov	s15, r3
 8006bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bf2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c0e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006c10:	4b2a      	ldr	r3, [pc, #168]	; (8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c14:	0a5b      	lsrs	r3, r3, #9
 8006c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c1a:	ee07 3a90 	vmov	s15, r3
 8006c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c36:	ee17 2a90 	vmov	r2, s15
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006c3e:	4b1f      	ldr	r3, [pc, #124]	; (8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c42:	0c1b      	lsrs	r3, r3, #16
 8006c44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c48:	ee07 3a90 	vmov	s15, r3
 8006c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c58:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c64:	ee17 2a90 	vmov	r2, s15
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006c6c:	4b13      	ldr	r3, [pc, #76]	; (8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c70:	0e1b      	lsrs	r3, r3, #24
 8006c72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c76:	ee07 3a90 	vmov	s15, r3
 8006c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c86:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c92:	ee17 2a90 	vmov	r2, s15
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006c9a:	e008      	b.n	8006cae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	609a      	str	r2, [r3, #8]
}
 8006cae:	bf00      	nop
 8006cb0:	3724      	adds	r7, #36	; 0x24
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	58024400 	.word	0x58024400
 8006cc0:	03d09000 	.word	0x03d09000
 8006cc4:	46000000 	.word	0x46000000
 8006cc8:	4c742400 	.word	0x4c742400
 8006ccc:	4a742400 	.word	0x4a742400
 8006cd0:	4af42400 	.word	0x4af42400

08006cd4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b089      	sub	sp, #36	; 0x24
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006cdc:	4ba1      	ldr	r3, [pc, #644]	; (8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce0:	f003 0303 	and.w	r3, r3, #3
 8006ce4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006ce6:	4b9f      	ldr	r3, [pc, #636]	; (8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cea:	0d1b      	lsrs	r3, r3, #20
 8006cec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cf0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006cf2:	4b9c      	ldr	r3, [pc, #624]	; (8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf6:	0a1b      	lsrs	r3, r3, #8
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006cfe:	4b99      	ldr	r3, [pc, #612]	; (8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d02:	08db      	lsrs	r3, r3, #3
 8006d04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d08:	693a      	ldr	r2, [r7, #16]
 8006d0a:	fb02 f303 	mul.w	r3, r2, r3
 8006d0e:	ee07 3a90 	vmov	s15, r3
 8006d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 8111 	beq.w	8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	f000 8083 	beq.w	8006e30 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	f200 80a1 	bhi.w	8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d003      	beq.n	8006d40 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d056      	beq.n	8006dec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006d3e:	e099      	b.n	8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d40:	4b88      	ldr	r3, [pc, #544]	; (8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0320 	and.w	r3, r3, #32
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d02d      	beq.n	8006da8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d4c:	4b85      	ldr	r3, [pc, #532]	; (8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	08db      	lsrs	r3, r3, #3
 8006d52:	f003 0303 	and.w	r3, r3, #3
 8006d56:	4a84      	ldr	r2, [pc, #528]	; (8006f68 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006d58:	fa22 f303 	lsr.w	r3, r2, r3
 8006d5c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	ee07 3a90 	vmov	s15, r3
 8006d64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	ee07 3a90 	vmov	s15, r3
 8006d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d76:	4b7b      	ldr	r3, [pc, #492]	; (8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d7e:	ee07 3a90 	vmov	s15, r3
 8006d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006f6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006da2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006da6:	e087      	b.n	8006eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	ee07 3a90 	vmov	s15, r3
 8006dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006db2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006f70 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dba:	4b6a      	ldr	r3, [pc, #424]	; (8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dc2:	ee07 3a90 	vmov	s15, r3
 8006dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dca:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dce:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006f6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006de6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dea:	e065      	b.n	8006eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	ee07 3a90 	vmov	s15, r3
 8006df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006df6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006f74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dfe:	4b59      	ldr	r3, [pc, #356]	; (8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e06:	ee07 3a90 	vmov	s15, r3
 8006e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e12:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006f6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e2e:	e043      	b.n	8006eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	ee07 3a90 	vmov	s15, r3
 8006e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e42:	4b48      	ldr	r3, [pc, #288]	; (8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e4a:	ee07 3a90 	vmov	s15, r3
 8006e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e56:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006f6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e72:	e021      	b.n	8006eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	ee07 3a90 	vmov	s15, r3
 8006e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006f74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e86:	4b37      	ldr	r3, [pc, #220]	; (8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e8e:	ee07 3a90 	vmov	s15, r3
 8006e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e96:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006f6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006eb6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006eb8:	4b2a      	ldr	r3, [pc, #168]	; (8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebc:	0a5b      	lsrs	r3, r3, #9
 8006ebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ec2:	ee07 3a90 	vmov	s15, r3
 8006ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ece:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ed2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ede:	ee17 2a90 	vmov	r2, s15
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006ee6:	4b1f      	ldr	r3, [pc, #124]	; (8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eea:	0c1b      	lsrs	r3, r3, #16
 8006eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ef0:	ee07 3a90 	vmov	s15, r3
 8006ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006efc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f00:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f0c:	ee17 2a90 	vmov	r2, s15
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006f14:	4b13      	ldr	r3, [pc, #76]	; (8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f18:	0e1b      	lsrs	r3, r3, #24
 8006f1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f1e:	ee07 3a90 	vmov	s15, r3
 8006f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f3a:	ee17 2a90 	vmov	r2, s15
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006f42:	e008      	b.n	8006f56 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	609a      	str	r2, [r3, #8]
}
 8006f56:	bf00      	nop
 8006f58:	3724      	adds	r7, #36	; 0x24
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	58024400 	.word	0x58024400
 8006f68:	03d09000 	.word	0x03d09000
 8006f6c:	46000000 	.word	0x46000000
 8006f70:	4c742400 	.word	0x4c742400
 8006f74:	4a742400 	.word	0x4a742400
 8006f78:	4af42400 	.word	0x4af42400

08006f7c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b089      	sub	sp, #36	; 0x24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f84:	4ba0      	ldr	r3, [pc, #640]	; (8007208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f88:	f003 0303 	and.w	r3, r3, #3
 8006f8c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006f8e:	4b9e      	ldr	r3, [pc, #632]	; (8007208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f92:	091b      	lsrs	r3, r3, #4
 8006f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f98:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006f9a:	4b9b      	ldr	r3, [pc, #620]	; (8007208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006fa4:	4b98      	ldr	r3, [pc, #608]	; (8007208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa8:	08db      	lsrs	r3, r3, #3
 8006faa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fae:	693a      	ldr	r2, [r7, #16]
 8006fb0:	fb02 f303 	mul.w	r3, r2, r3
 8006fb4:	ee07 3a90 	vmov	s15, r3
 8006fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fbc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f000 8111 	beq.w	80071ea <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	f000 8083 	beq.w	80070d6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	f200 80a1 	bhi.w	800711a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d003      	beq.n	8006fe6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d056      	beq.n	8007092 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006fe4:	e099      	b.n	800711a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fe6:	4b88      	ldr	r3, [pc, #544]	; (8007208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 0320 	and.w	r3, r3, #32
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d02d      	beq.n	800704e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ff2:	4b85      	ldr	r3, [pc, #532]	; (8007208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	08db      	lsrs	r3, r3, #3
 8006ff8:	f003 0303 	and.w	r3, r3, #3
 8006ffc:	4a83      	ldr	r2, [pc, #524]	; (800720c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8007002:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	ee07 3a90 	vmov	s15, r3
 800700a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	ee07 3a90 	vmov	s15, r3
 8007014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007018:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800701c:	4b7a      	ldr	r3, [pc, #488]	; (8007208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800701e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007024:	ee07 3a90 	vmov	s15, r3
 8007028:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800702c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007030:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007210 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007034:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007038:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800703c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007040:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007048:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800704c:	e087      	b.n	800715e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	ee07 3a90 	vmov	s15, r3
 8007054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007058:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007214 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800705c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007060:	4b69      	ldr	r3, [pc, #420]	; (8007208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007068:	ee07 3a90 	vmov	s15, r3
 800706c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007070:	ed97 6a03 	vldr	s12, [r7, #12]
 8007074:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007210 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007078:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800707c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007080:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007084:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800708c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007090:	e065      	b.n	800715e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	ee07 3a90 	vmov	s15, r3
 8007098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800709c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007218 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80070a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070a4:	4b58      	ldr	r3, [pc, #352]	; (8007208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ac:	ee07 3a90 	vmov	s15, r3
 80070b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80070b8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007210 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80070bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070d4:	e043      	b.n	800715e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	ee07 3a90 	vmov	s15, r3
 80070dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070e0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800721c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80070e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070e8:	4b47      	ldr	r3, [pc, #284]	; (8007208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070f0:	ee07 3a90 	vmov	s15, r3
 80070f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80070fc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007210 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007100:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007104:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007108:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800710c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007114:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007118:	e021      	b.n	800715e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	ee07 3a90 	vmov	s15, r3
 8007120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007124:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007214 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007128:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800712c:	4b36      	ldr	r3, [pc, #216]	; (8007208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800712e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007134:	ee07 3a90 	vmov	s15, r3
 8007138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800713c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007140:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007210 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007144:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007148:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800714c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007150:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007158:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800715c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800715e:	4b2a      	ldr	r3, [pc, #168]	; (8007208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007162:	0a5b      	lsrs	r3, r3, #9
 8007164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007168:	ee07 3a90 	vmov	s15, r3
 800716c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007170:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007174:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007178:	edd7 6a07 	vldr	s13, [r7, #28]
 800717c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007184:	ee17 2a90 	vmov	r2, s15
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800718c:	4b1e      	ldr	r3, [pc, #120]	; (8007208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800718e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007190:	0c1b      	lsrs	r3, r3, #16
 8007192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007196:	ee07 3a90 	vmov	s15, r3
 800719a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80071aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071b2:	ee17 2a90 	vmov	r2, s15
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80071ba:	4b13      	ldr	r3, [pc, #76]	; (8007208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071be:	0e1b      	lsrs	r3, r3, #24
 80071c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071c4:	ee07 3a90 	vmov	s15, r3
 80071c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80071d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071e0:	ee17 2a90 	vmov	r2, s15
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80071e8:	e008      	b.n	80071fc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	609a      	str	r2, [r3, #8]
}
 80071fc:	bf00      	nop
 80071fe:	3724      	adds	r7, #36	; 0x24
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr
 8007208:	58024400 	.word	0x58024400
 800720c:	03d09000 	.word	0x03d09000
 8007210:	46000000 	.word	0x46000000
 8007214:	4c742400 	.word	0x4c742400
 8007218:	4a742400 	.word	0x4a742400
 800721c:	4af42400 	.word	0x4af42400

08007220 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800722a:	2300      	movs	r3, #0
 800722c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800722e:	4b53      	ldr	r3, [pc, #332]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 8007230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007232:	f003 0303 	and.w	r3, r3, #3
 8007236:	2b03      	cmp	r3, #3
 8007238:	d101      	bne.n	800723e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e099      	b.n	8007372 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800723e:	4b4f      	ldr	r3, [pc, #316]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a4e      	ldr	r2, [pc, #312]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 8007244:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007248:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800724a:	f7fa fb13 	bl	8001874 <HAL_GetTick>
 800724e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007250:	e008      	b.n	8007264 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007252:	f7fa fb0f 	bl	8001874 <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	2b02      	cmp	r3, #2
 800725e:	d901      	bls.n	8007264 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e086      	b.n	8007372 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007264:	4b45      	ldr	r3, [pc, #276]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1f0      	bne.n	8007252 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007270:	4b42      	ldr	r3, [pc, #264]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 8007272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007274:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	031b      	lsls	r3, r3, #12
 800727e:	493f      	ldr	r1, [pc, #252]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 8007280:	4313      	orrs	r3, r2
 8007282:	628b      	str	r3, [r1, #40]	; 0x28
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	3b01      	subs	r3, #1
 800728a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	3b01      	subs	r3, #1
 8007294:	025b      	lsls	r3, r3, #9
 8007296:	b29b      	uxth	r3, r3
 8007298:	431a      	orrs	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	3b01      	subs	r3, #1
 80072a0:	041b      	lsls	r3, r3, #16
 80072a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80072a6:	431a      	orrs	r2, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	3b01      	subs	r3, #1
 80072ae:	061b      	lsls	r3, r3, #24
 80072b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80072b4:	4931      	ldr	r1, [pc, #196]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 80072b6:	4313      	orrs	r3, r2
 80072b8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80072ba:	4b30      	ldr	r3, [pc, #192]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 80072bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	492d      	ldr	r1, [pc, #180]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80072cc:	4b2b      	ldr	r3, [pc, #172]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 80072ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d0:	f023 0220 	bic.w	r2, r3, #32
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	4928      	ldr	r1, [pc, #160]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80072de:	4b27      	ldr	r3, [pc, #156]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 80072e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e2:	4a26      	ldr	r2, [pc, #152]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 80072e4:	f023 0310 	bic.w	r3, r3, #16
 80072e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80072ea:	4b24      	ldr	r3, [pc, #144]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 80072ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072ee:	4b24      	ldr	r3, [pc, #144]	; (8007380 <RCCEx_PLL2_Config+0x160>)
 80072f0:	4013      	ands	r3, r2
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	69d2      	ldr	r2, [r2, #28]
 80072f6:	00d2      	lsls	r2, r2, #3
 80072f8:	4920      	ldr	r1, [pc, #128]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80072fe:	4b1f      	ldr	r3, [pc, #124]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 8007300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007302:	4a1e      	ldr	r2, [pc, #120]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 8007304:	f043 0310 	orr.w	r3, r3, #16
 8007308:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d106      	bne.n	800731e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007310:	4b1a      	ldr	r3, [pc, #104]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 8007312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007314:	4a19      	ldr	r2, [pc, #100]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 8007316:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800731a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800731c:	e00f      	b.n	800733e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d106      	bne.n	8007332 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007324:	4b15      	ldr	r3, [pc, #84]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 8007326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007328:	4a14      	ldr	r2, [pc, #80]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 800732a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800732e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007330:	e005      	b.n	800733e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007332:	4b12      	ldr	r3, [pc, #72]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 8007334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007336:	4a11      	ldr	r2, [pc, #68]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 8007338:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800733c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800733e:	4b0f      	ldr	r3, [pc, #60]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a0e      	ldr	r2, [pc, #56]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 8007344:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007348:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800734a:	f7fa fa93 	bl	8001874 <HAL_GetTick>
 800734e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007350:	e008      	b.n	8007364 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007352:	f7fa fa8f 	bl	8001874 <HAL_GetTick>
 8007356:	4602      	mov	r2, r0
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	2b02      	cmp	r3, #2
 800735e:	d901      	bls.n	8007364 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007360:	2303      	movs	r3, #3
 8007362:	e006      	b.n	8007372 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007364:	4b05      	ldr	r3, [pc, #20]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d0f0      	beq.n	8007352 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007370:	7bfb      	ldrb	r3, [r7, #15]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	58024400 	.word	0x58024400
 8007380:	ffff0007 	.word	0xffff0007

08007384 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007392:	4b53      	ldr	r3, [pc, #332]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 8007394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007396:	f003 0303 	and.w	r3, r3, #3
 800739a:	2b03      	cmp	r3, #3
 800739c:	d101      	bne.n	80073a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e099      	b.n	80074d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80073a2:	4b4f      	ldr	r3, [pc, #316]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a4e      	ldr	r2, [pc, #312]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 80073a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073ae:	f7fa fa61 	bl	8001874 <HAL_GetTick>
 80073b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80073b4:	e008      	b.n	80073c8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80073b6:	f7fa fa5d 	bl	8001874 <HAL_GetTick>
 80073ba:	4602      	mov	r2, r0
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d901      	bls.n	80073c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80073c4:	2303      	movs	r3, #3
 80073c6:	e086      	b.n	80074d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80073c8:	4b45      	ldr	r3, [pc, #276]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1f0      	bne.n	80073b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80073d4:	4b42      	ldr	r3, [pc, #264]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 80073d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	051b      	lsls	r3, r3, #20
 80073e2:	493f      	ldr	r1, [pc, #252]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 80073e4:	4313      	orrs	r3, r2
 80073e6:	628b      	str	r3, [r1, #40]	; 0x28
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	3b01      	subs	r3, #1
 80073ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	3b01      	subs	r3, #1
 80073f8:	025b      	lsls	r3, r3, #9
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	431a      	orrs	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	3b01      	subs	r3, #1
 8007404:	041b      	lsls	r3, r3, #16
 8007406:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800740a:	431a      	orrs	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	3b01      	subs	r3, #1
 8007412:	061b      	lsls	r3, r3, #24
 8007414:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007418:	4931      	ldr	r1, [pc, #196]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 800741a:	4313      	orrs	r3, r2
 800741c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800741e:	4b30      	ldr	r3, [pc, #192]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 8007420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007422:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	492d      	ldr	r1, [pc, #180]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 800742c:	4313      	orrs	r3, r2
 800742e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007430:	4b2b      	ldr	r3, [pc, #172]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 8007432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007434:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	4928      	ldr	r1, [pc, #160]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 800743e:	4313      	orrs	r3, r2
 8007440:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007442:	4b27      	ldr	r3, [pc, #156]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 8007444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007446:	4a26      	ldr	r2, [pc, #152]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 8007448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800744c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800744e:	4b24      	ldr	r3, [pc, #144]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 8007450:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007452:	4b24      	ldr	r3, [pc, #144]	; (80074e4 <RCCEx_PLL3_Config+0x160>)
 8007454:	4013      	ands	r3, r2
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	69d2      	ldr	r2, [r2, #28]
 800745a:	00d2      	lsls	r2, r2, #3
 800745c:	4920      	ldr	r1, [pc, #128]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 800745e:	4313      	orrs	r3, r2
 8007460:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007462:	4b1f      	ldr	r3, [pc, #124]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 8007464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007466:	4a1e      	ldr	r2, [pc, #120]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 8007468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800746c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d106      	bne.n	8007482 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007474:	4b1a      	ldr	r3, [pc, #104]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 8007476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007478:	4a19      	ldr	r2, [pc, #100]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 800747a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800747e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007480:	e00f      	b.n	80074a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d106      	bne.n	8007496 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007488:	4b15      	ldr	r3, [pc, #84]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 800748a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748c:	4a14      	ldr	r2, [pc, #80]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 800748e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007492:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007494:	e005      	b.n	80074a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007496:	4b12      	ldr	r3, [pc, #72]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 8007498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749a:	4a11      	ldr	r2, [pc, #68]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 800749c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80074a2:	4b0f      	ldr	r3, [pc, #60]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a0e      	ldr	r2, [pc, #56]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 80074a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ae:	f7fa f9e1 	bl	8001874 <HAL_GetTick>
 80074b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80074b4:	e008      	b.n	80074c8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80074b6:	f7fa f9dd 	bl	8001874 <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d901      	bls.n	80074c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e006      	b.n	80074d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80074c8:	4b05      	ldr	r3, [pc, #20]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d0f0      	beq.n	80074b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80074d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	58024400 	.word	0x58024400
 80074e4:	ffff0007 	.word	0xffff0007

080074e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e049      	b.n	800758e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b00      	cmp	r3, #0
 8007504:	d106      	bne.n	8007514 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7f9 ff34 	bl	800137c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2202      	movs	r2, #2
 8007518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	3304      	adds	r3, #4
 8007524:	4619      	mov	r1, r3
 8007526:	4610      	mov	r0, r2
 8007528:	f000 fb26 	bl	8007b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
	...

08007598 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d101      	bne.n	80075ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e08f      	b.n	80076cc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d106      	bne.n	80075c6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f7f9 fe8b 	bl	80012dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2202      	movs	r2, #2
 80075ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	6899      	ldr	r1, [r3, #8]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	4b3e      	ldr	r3, [pc, #248]	; (80076d4 <HAL_TIM_Encoder_Init+0x13c>)
 80075da:	400b      	ands	r3, r1
 80075dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	3304      	adds	r3, #4
 80075e6:	4619      	mov	r1, r3
 80075e8:	4610      	mov	r0, r2
 80075ea:	f000 fac5 	bl	8007b78 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	6a1b      	ldr	r3, [r3, #32]
 8007604:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	4313      	orrs	r3, r2
 800760e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	4b31      	ldr	r3, [pc, #196]	; (80076d8 <HAL_TIM_Encoder_Init+0x140>)
 8007614:	4013      	ands	r3, r2
 8007616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	689a      	ldr	r2, [r3, #8]
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	021b      	lsls	r3, r3, #8
 8007622:	4313      	orrs	r3, r2
 8007624:	693a      	ldr	r2, [r7, #16]
 8007626:	4313      	orrs	r3, r2
 8007628:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	4b2b      	ldr	r3, [pc, #172]	; (80076dc <HAL_TIM_Encoder_Init+0x144>)
 800762e:	4013      	ands	r3, r2
 8007630:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007632:	693a      	ldr	r2, [r7, #16]
 8007634:	4b2a      	ldr	r3, [pc, #168]	; (80076e0 <HAL_TIM_Encoder_Init+0x148>)
 8007636:	4013      	ands	r3, r2
 8007638:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	68da      	ldr	r2, [r3, #12]
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	69db      	ldr	r3, [r3, #28]
 8007642:	021b      	lsls	r3, r3, #8
 8007644:	4313      	orrs	r3, r2
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	4313      	orrs	r3, r2
 800764a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	011a      	lsls	r2, r3, #4
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	031b      	lsls	r3, r3, #12
 8007658:	4313      	orrs	r3, r2
 800765a:	693a      	ldr	r2, [r7, #16]
 800765c:	4313      	orrs	r3, r2
 800765e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007666:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800766e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	685a      	ldr	r2, [r3, #4]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	695b      	ldr	r3, [r3, #20]
 8007678:	011b      	lsls	r3, r3, #4
 800767a:	4313      	orrs	r3, r2
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	4313      	orrs	r3, r2
 8007680:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2201      	movs	r2, #1
 80076b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3718      	adds	r7, #24
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	fffebff8 	.word	0xfffebff8
 80076d8:	fffffcfc 	.word	0xfffffcfc
 80076dc:	fffff3f3 	.word	0xfffff3f3
 80076e0:	ffff0f0f 	.word	0xffff0f0f

080076e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	f003 0302 	and.w	r3, r3, #2
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d122      	bne.n	8007740 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	f003 0302 	and.w	r3, r3, #2
 8007704:	2b02      	cmp	r3, #2
 8007706:	d11b      	bne.n	8007740 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f06f 0202 	mvn.w	r2, #2
 8007710:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2201      	movs	r2, #1
 8007716:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	f003 0303 	and.w	r3, r3, #3
 8007722:	2b00      	cmp	r3, #0
 8007724:	d003      	beq.n	800772e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 fa08 	bl	8007b3c <HAL_TIM_IC_CaptureCallback>
 800772c:	e005      	b.n	800773a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f9fa 	bl	8007b28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fa0b 	bl	8007b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	f003 0304 	and.w	r3, r3, #4
 800774a:	2b04      	cmp	r3, #4
 800774c:	d122      	bne.n	8007794 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	f003 0304 	and.w	r3, r3, #4
 8007758:	2b04      	cmp	r3, #4
 800775a:	d11b      	bne.n	8007794 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f06f 0204 	mvn.w	r2, #4
 8007764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2202      	movs	r2, #2
 800776a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007776:	2b00      	cmp	r3, #0
 8007778:	d003      	beq.n	8007782 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f9de 	bl	8007b3c <HAL_TIM_IC_CaptureCallback>
 8007780:	e005      	b.n	800778e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f9d0 	bl	8007b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f9e1 	bl	8007b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	f003 0308 	and.w	r3, r3, #8
 800779e:	2b08      	cmp	r3, #8
 80077a0:	d122      	bne.n	80077e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	f003 0308 	and.w	r3, r3, #8
 80077ac:	2b08      	cmp	r3, #8
 80077ae:	d11b      	bne.n	80077e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f06f 0208 	mvn.w	r2, #8
 80077b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2204      	movs	r2, #4
 80077be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	69db      	ldr	r3, [r3, #28]
 80077c6:	f003 0303 	and.w	r3, r3, #3
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d003      	beq.n	80077d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f9b4 	bl	8007b3c <HAL_TIM_IC_CaptureCallback>
 80077d4:	e005      	b.n	80077e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f9a6 	bl	8007b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f9b7 	bl	8007b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	f003 0310 	and.w	r3, r3, #16
 80077f2:	2b10      	cmp	r3, #16
 80077f4:	d122      	bne.n	800783c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	f003 0310 	and.w	r3, r3, #16
 8007800:	2b10      	cmp	r3, #16
 8007802:	d11b      	bne.n	800783c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f06f 0210 	mvn.w	r2, #16
 800780c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2208      	movs	r2, #8
 8007812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800781e:	2b00      	cmp	r3, #0
 8007820:	d003      	beq.n	800782a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f98a 	bl	8007b3c <HAL_TIM_IC_CaptureCallback>
 8007828:	e005      	b.n	8007836 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f97c 	bl	8007b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f98d 	bl	8007b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	f003 0301 	and.w	r3, r3, #1
 8007846:	2b01      	cmp	r3, #1
 8007848:	d10e      	bne.n	8007868 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f003 0301 	and.w	r3, r3, #1
 8007854:	2b01      	cmp	r3, #1
 8007856:	d107      	bne.n	8007868 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f06f 0201 	mvn.w	r2, #1
 8007860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f956 	bl	8007b14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007872:	2b80      	cmp	r3, #128	; 0x80
 8007874:	d10e      	bne.n	8007894 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007880:	2b80      	cmp	r3, #128	; 0x80
 8007882:	d107      	bne.n	8007894 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800788c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 fb42 	bl	8007f18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800789e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078a2:	d10e      	bne.n	80078c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ae:	2b80      	cmp	r3, #128	; 0x80
 80078b0:	d107      	bne.n	80078c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80078ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fb35 	bl	8007f2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078cc:	2b40      	cmp	r3, #64	; 0x40
 80078ce:	d10e      	bne.n	80078ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078da:	2b40      	cmp	r3, #64	; 0x40
 80078dc:	d107      	bne.n	80078ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f93b 	bl	8007b64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	f003 0320 	and.w	r3, r3, #32
 80078f8:	2b20      	cmp	r3, #32
 80078fa:	d10e      	bne.n	800791a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	f003 0320 	and.w	r3, r3, #32
 8007906:	2b20      	cmp	r3, #32
 8007908:	d107      	bne.n	800791a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f06f 0220 	mvn.w	r2, #32
 8007912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 faf5 	bl	8007f04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800791a:	bf00      	nop
 800791c:	3708      	adds	r7, #8
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
	...

08007924 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800792e:	2300      	movs	r3, #0
 8007930:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007938:	2b01      	cmp	r3, #1
 800793a:	d101      	bne.n	8007940 <HAL_TIM_ConfigClockSource+0x1c>
 800793c:	2302      	movs	r3, #2
 800793e:	e0dc      	b.n	8007afa <HAL_TIM_ConfigClockSource+0x1d6>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2202      	movs	r2, #2
 800794c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	4b6a      	ldr	r3, [pc, #424]	; (8007b04 <HAL_TIM_ConfigClockSource+0x1e0>)
 800795c:	4013      	ands	r3, r2
 800795e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007966:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a64      	ldr	r2, [pc, #400]	; (8007b08 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007976:	4293      	cmp	r3, r2
 8007978:	f000 80a9 	beq.w	8007ace <HAL_TIM_ConfigClockSource+0x1aa>
 800797c:	4a62      	ldr	r2, [pc, #392]	; (8007b08 <HAL_TIM_ConfigClockSource+0x1e4>)
 800797e:	4293      	cmp	r3, r2
 8007980:	f200 80ae 	bhi.w	8007ae0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007984:	4a61      	ldr	r2, [pc, #388]	; (8007b0c <HAL_TIM_ConfigClockSource+0x1e8>)
 8007986:	4293      	cmp	r3, r2
 8007988:	f000 80a1 	beq.w	8007ace <HAL_TIM_ConfigClockSource+0x1aa>
 800798c:	4a5f      	ldr	r2, [pc, #380]	; (8007b0c <HAL_TIM_ConfigClockSource+0x1e8>)
 800798e:	4293      	cmp	r3, r2
 8007990:	f200 80a6 	bhi.w	8007ae0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007994:	4a5e      	ldr	r2, [pc, #376]	; (8007b10 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007996:	4293      	cmp	r3, r2
 8007998:	f000 8099 	beq.w	8007ace <HAL_TIM_ConfigClockSource+0x1aa>
 800799c:	4a5c      	ldr	r2, [pc, #368]	; (8007b10 <HAL_TIM_ConfigClockSource+0x1ec>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	f200 809e 	bhi.w	8007ae0 <HAL_TIM_ConfigClockSource+0x1bc>
 80079a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80079a8:	f000 8091 	beq.w	8007ace <HAL_TIM_ConfigClockSource+0x1aa>
 80079ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80079b0:	f200 8096 	bhi.w	8007ae0 <HAL_TIM_ConfigClockSource+0x1bc>
 80079b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079b8:	f000 8089 	beq.w	8007ace <HAL_TIM_ConfigClockSource+0x1aa>
 80079bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079c0:	f200 808e 	bhi.w	8007ae0 <HAL_TIM_ConfigClockSource+0x1bc>
 80079c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079c8:	d03e      	beq.n	8007a48 <HAL_TIM_ConfigClockSource+0x124>
 80079ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079ce:	f200 8087 	bhi.w	8007ae0 <HAL_TIM_ConfigClockSource+0x1bc>
 80079d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079d6:	f000 8086 	beq.w	8007ae6 <HAL_TIM_ConfigClockSource+0x1c2>
 80079da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079de:	d87f      	bhi.n	8007ae0 <HAL_TIM_ConfigClockSource+0x1bc>
 80079e0:	2b70      	cmp	r3, #112	; 0x70
 80079e2:	d01a      	beq.n	8007a1a <HAL_TIM_ConfigClockSource+0xf6>
 80079e4:	2b70      	cmp	r3, #112	; 0x70
 80079e6:	d87b      	bhi.n	8007ae0 <HAL_TIM_ConfigClockSource+0x1bc>
 80079e8:	2b60      	cmp	r3, #96	; 0x60
 80079ea:	d050      	beq.n	8007a8e <HAL_TIM_ConfigClockSource+0x16a>
 80079ec:	2b60      	cmp	r3, #96	; 0x60
 80079ee:	d877      	bhi.n	8007ae0 <HAL_TIM_ConfigClockSource+0x1bc>
 80079f0:	2b50      	cmp	r3, #80	; 0x50
 80079f2:	d03c      	beq.n	8007a6e <HAL_TIM_ConfigClockSource+0x14a>
 80079f4:	2b50      	cmp	r3, #80	; 0x50
 80079f6:	d873      	bhi.n	8007ae0 <HAL_TIM_ConfigClockSource+0x1bc>
 80079f8:	2b40      	cmp	r3, #64	; 0x40
 80079fa:	d058      	beq.n	8007aae <HAL_TIM_ConfigClockSource+0x18a>
 80079fc:	2b40      	cmp	r3, #64	; 0x40
 80079fe:	d86f      	bhi.n	8007ae0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007a00:	2b30      	cmp	r3, #48	; 0x30
 8007a02:	d064      	beq.n	8007ace <HAL_TIM_ConfigClockSource+0x1aa>
 8007a04:	2b30      	cmp	r3, #48	; 0x30
 8007a06:	d86b      	bhi.n	8007ae0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007a08:	2b20      	cmp	r3, #32
 8007a0a:	d060      	beq.n	8007ace <HAL_TIM_ConfigClockSource+0x1aa>
 8007a0c:	2b20      	cmp	r3, #32
 8007a0e:	d867      	bhi.n	8007ae0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d05c      	beq.n	8007ace <HAL_TIM_ConfigClockSource+0x1aa>
 8007a14:	2b10      	cmp	r3, #16
 8007a16:	d05a      	beq.n	8007ace <HAL_TIM_ConfigClockSource+0x1aa>
 8007a18:	e062      	b.n	8007ae0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a2a:	f000 f9bd 	bl	8007da8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	609a      	str	r2, [r3, #8]
      break;
 8007a46:	e04f      	b.n	8007ae8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a58:	f000 f9a6 	bl	8007da8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	689a      	ldr	r2, [r3, #8]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a6a:	609a      	str	r2, [r3, #8]
      break;
 8007a6c:	e03c      	b.n	8007ae8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	f000 f916 	bl	8007cac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2150      	movs	r1, #80	; 0x50
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 f970 	bl	8007d6c <TIM_ITRx_SetConfig>
      break;
 8007a8c:	e02c      	b.n	8007ae8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	f000 f935 	bl	8007d0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2160      	movs	r1, #96	; 0x60
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f000 f960 	bl	8007d6c <TIM_ITRx_SetConfig>
      break;
 8007aac:	e01c      	b.n	8007ae8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aba:	461a      	mov	r2, r3
 8007abc:	f000 f8f6 	bl	8007cac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2140      	movs	r1, #64	; 0x40
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f000 f950 	bl	8007d6c <TIM_ITRx_SetConfig>
      break;
 8007acc:	e00c      	b.n	8007ae8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	4610      	mov	r0, r2
 8007ada:	f000 f947 	bl	8007d6c <TIM_ITRx_SetConfig>
      break;
 8007ade:	e003      	b.n	8007ae8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ae4:	e000      	b.n	8007ae8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007ae6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	ffceff88 	.word	0xffceff88
 8007b08:	00100040 	.word	0x00100040
 8007b0c:	00100030 	.word	0x00100030
 8007b10:	00100020 	.word	0x00100020

08007b14 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b44:	bf00      	nop
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b58:	bf00      	nop
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a40      	ldr	r2, [pc, #256]	; (8007c8c <TIM_Base_SetConfig+0x114>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d013      	beq.n	8007bb8 <TIM_Base_SetConfig+0x40>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b96:	d00f      	beq.n	8007bb8 <TIM_Base_SetConfig+0x40>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a3d      	ldr	r2, [pc, #244]	; (8007c90 <TIM_Base_SetConfig+0x118>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d00b      	beq.n	8007bb8 <TIM_Base_SetConfig+0x40>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a3c      	ldr	r2, [pc, #240]	; (8007c94 <TIM_Base_SetConfig+0x11c>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d007      	beq.n	8007bb8 <TIM_Base_SetConfig+0x40>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a3b      	ldr	r2, [pc, #236]	; (8007c98 <TIM_Base_SetConfig+0x120>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d003      	beq.n	8007bb8 <TIM_Base_SetConfig+0x40>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4a3a      	ldr	r2, [pc, #232]	; (8007c9c <TIM_Base_SetConfig+0x124>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d108      	bne.n	8007bca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a2f      	ldr	r2, [pc, #188]	; (8007c8c <TIM_Base_SetConfig+0x114>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d01f      	beq.n	8007c12 <TIM_Base_SetConfig+0x9a>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bd8:	d01b      	beq.n	8007c12 <TIM_Base_SetConfig+0x9a>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a2c      	ldr	r2, [pc, #176]	; (8007c90 <TIM_Base_SetConfig+0x118>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d017      	beq.n	8007c12 <TIM_Base_SetConfig+0x9a>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a2b      	ldr	r2, [pc, #172]	; (8007c94 <TIM_Base_SetConfig+0x11c>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d013      	beq.n	8007c12 <TIM_Base_SetConfig+0x9a>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a2a      	ldr	r2, [pc, #168]	; (8007c98 <TIM_Base_SetConfig+0x120>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d00f      	beq.n	8007c12 <TIM_Base_SetConfig+0x9a>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a29      	ldr	r2, [pc, #164]	; (8007c9c <TIM_Base_SetConfig+0x124>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d00b      	beq.n	8007c12 <TIM_Base_SetConfig+0x9a>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a28      	ldr	r2, [pc, #160]	; (8007ca0 <TIM_Base_SetConfig+0x128>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d007      	beq.n	8007c12 <TIM_Base_SetConfig+0x9a>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a27      	ldr	r2, [pc, #156]	; (8007ca4 <TIM_Base_SetConfig+0x12c>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d003      	beq.n	8007c12 <TIM_Base_SetConfig+0x9a>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a26      	ldr	r2, [pc, #152]	; (8007ca8 <TIM_Base_SetConfig+0x130>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d108      	bne.n	8007c24 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	695b      	ldr	r3, [r3, #20]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	689a      	ldr	r2, [r3, #8]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4a10      	ldr	r2, [pc, #64]	; (8007c8c <TIM_Base_SetConfig+0x114>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d00f      	beq.n	8007c70 <TIM_Base_SetConfig+0xf8>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a12      	ldr	r2, [pc, #72]	; (8007c9c <TIM_Base_SetConfig+0x124>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d00b      	beq.n	8007c70 <TIM_Base_SetConfig+0xf8>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a11      	ldr	r2, [pc, #68]	; (8007ca0 <TIM_Base_SetConfig+0x128>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d007      	beq.n	8007c70 <TIM_Base_SetConfig+0xf8>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a10      	ldr	r2, [pc, #64]	; (8007ca4 <TIM_Base_SetConfig+0x12c>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d003      	beq.n	8007c70 <TIM_Base_SetConfig+0xf8>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a0f      	ldr	r2, [pc, #60]	; (8007ca8 <TIM_Base_SetConfig+0x130>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d103      	bne.n	8007c78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	691a      	ldr	r2, [r3, #16]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	615a      	str	r2, [r3, #20]
}
 8007c7e:	bf00      	nop
 8007c80:	3714      	adds	r7, #20
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	40010000 	.word	0x40010000
 8007c90:	40000400 	.word	0x40000400
 8007c94:	40000800 	.word	0x40000800
 8007c98:	40000c00 	.word	0x40000c00
 8007c9c:	40010400 	.word	0x40010400
 8007ca0:	40014000 	.word	0x40014000
 8007ca4:	40014400 	.word	0x40014400
 8007ca8:	40014800 	.word	0x40014800

08007cac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b087      	sub	sp, #28
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6a1b      	ldr	r3, [r3, #32]
 8007cbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6a1b      	ldr	r3, [r3, #32]
 8007cc2:	f023 0201 	bic.w	r2, r3, #1
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	699b      	ldr	r3, [r3, #24]
 8007cce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	011b      	lsls	r3, r3, #4
 8007cdc:	693a      	ldr	r2, [r7, #16]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	f023 030a 	bic.w	r3, r3, #10
 8007ce8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007cea:	697a      	ldr	r2, [r7, #20]
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	693a      	ldr	r2, [r7, #16]
 8007cf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	621a      	str	r2, [r3, #32]
}
 8007cfe:	bf00      	nop
 8007d00:	371c      	adds	r7, #28
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr

08007d0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	b087      	sub	sp, #28
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	60f8      	str	r0, [r7, #12]
 8007d12:	60b9      	str	r1, [r7, #8]
 8007d14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	f023 0210 	bic.w	r2, r3, #16
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	699b      	ldr	r3, [r3, #24]
 8007d26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6a1b      	ldr	r3, [r3, #32]
 8007d2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	031b      	lsls	r3, r3, #12
 8007d3a:	697a      	ldr	r2, [r7, #20]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	011b      	lsls	r3, r3, #4
 8007d4c:	693a      	ldr	r2, [r7, #16]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	697a      	ldr	r2, [r7, #20]
 8007d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	693a      	ldr	r2, [r7, #16]
 8007d5c:	621a      	str	r2, [r3, #32]
}
 8007d5e:	bf00      	nop
 8007d60:	371c      	adds	r7, #28
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr
	...

08007d6c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	4b09      	ldr	r3, [pc, #36]	; (8007da4 <TIM_ITRx_SetConfig+0x38>)
 8007d80:	4013      	ands	r3, r2
 8007d82:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d84:	683a      	ldr	r2, [r7, #0]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	f043 0307 	orr.w	r3, r3, #7
 8007d8e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	609a      	str	r2, [r3, #8]
}
 8007d96:	bf00      	nop
 8007d98:	3714      	adds	r7, #20
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	ffcfff8f 	.word	0xffcfff8f

08007da8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b087      	sub	sp, #28
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]
 8007db4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007dc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	021a      	lsls	r2, r3, #8
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	431a      	orrs	r2, r3
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	697a      	ldr	r2, [r7, #20]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	697a      	ldr	r2, [r7, #20]
 8007dda:	609a      	str	r2, [r3, #8]
}
 8007ddc:	bf00      	nop
 8007dde:	371c      	adds	r7, #28
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d101      	bne.n	8007e00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	e06d      	b.n	8007edc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2202      	movs	r2, #2
 8007e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a30      	ldr	r2, [pc, #192]	; (8007ee8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d004      	beq.n	8007e34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a2f      	ldr	r2, [pc, #188]	; (8007eec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d108      	bne.n	8007e46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007e3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a20      	ldr	r2, [pc, #128]	; (8007ee8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d022      	beq.n	8007eb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e72:	d01d      	beq.n	8007eb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a1d      	ldr	r2, [pc, #116]	; (8007ef0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d018      	beq.n	8007eb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a1c      	ldr	r2, [pc, #112]	; (8007ef4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d013      	beq.n	8007eb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a1a      	ldr	r2, [pc, #104]	; (8007ef8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d00e      	beq.n	8007eb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a15      	ldr	r2, [pc, #84]	; (8007eec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d009      	beq.n	8007eb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a16      	ldr	r2, [pc, #88]	; (8007efc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d004      	beq.n	8007eb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a15      	ldr	r2, [pc, #84]	; (8007f00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d10c      	bne.n	8007eca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007eb6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68ba      	ldr	r2, [r7, #8]
 8007ec8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3714      	adds	r7, #20
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr
 8007ee8:	40010000 	.word	0x40010000
 8007eec:	40010400 	.word	0x40010400
 8007ef0:	40000400 	.word	0x40000400
 8007ef4:	40000800 	.word	0x40000800
 8007ef8:	40000c00 	.word	0x40000c00
 8007efc:	40001800 	.word	0x40001800
 8007f00:	40014000 	.word	0x40014000

08007f04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f0c:	bf00      	nop
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f20:	bf00      	nop
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007f34:	bf00      	nop
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d101      	bne.n	8007f52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e042      	b.n	8007fd8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d106      	bne.n	8007f6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7f9 fa31 	bl	80013cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2224      	movs	r2, #36	; 0x24
 8007f6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f022 0201 	bic.w	r2, r2, #1
 8007f80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 fce0 	bl	8008948 <UART_SetConfig>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d101      	bne.n	8007f92 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e022      	b.n	8007fd8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d002      	beq.n	8007fa0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f001 fb40 	bl	8009620 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	685a      	ldr	r2, [r3, #4]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007fae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	689a      	ldr	r2, [r3, #8]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f042 0201 	orr.w	r2, r2, #1
 8007fce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f001 fbc7 	bl	8009764 <UART_CheckIdleState>
 8007fd6:	4603      	mov	r3, r0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b08a      	sub	sp, #40	; 0x28
 8007fe4:	af02      	add	r7, sp, #8
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	603b      	str	r3, [r7, #0]
 8007fec:	4613      	mov	r3, r2
 8007fee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ff6:	2b20      	cmp	r3, #32
 8007ff8:	d17b      	bne.n	80080f2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d002      	beq.n	8008006 <HAL_UART_Transmit+0x26>
 8008000:	88fb      	ldrh	r3, [r7, #6]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d101      	bne.n	800800a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e074      	b.n	80080f4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2221      	movs	r2, #33	; 0x21
 8008016:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800801a:	f7f9 fc2b 	bl	8001874 <HAL_GetTick>
 800801e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	88fa      	ldrh	r2, [r7, #6]
 8008024:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	88fa      	ldrh	r2, [r7, #6]
 800802c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008038:	d108      	bne.n	800804c <HAL_UART_Transmit+0x6c>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d104      	bne.n	800804c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008042:	2300      	movs	r3, #0
 8008044:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	61bb      	str	r3, [r7, #24]
 800804a:	e003      	b.n	8008054 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008050:	2300      	movs	r3, #0
 8008052:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008054:	e030      	b.n	80080b8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	9300      	str	r3, [sp, #0]
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	2200      	movs	r2, #0
 800805e:	2180      	movs	r1, #128	; 0x80
 8008060:	68f8      	ldr	r0, [r7, #12]
 8008062:	f001 fc29 	bl	80098b8 <UART_WaitOnFlagUntilTimeout>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d005      	beq.n	8008078 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2220      	movs	r2, #32
 8008070:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008074:	2303      	movs	r3, #3
 8008076:	e03d      	b.n	80080f4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10b      	bne.n	8008096 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	881b      	ldrh	r3, [r3, #0]
 8008082:	461a      	mov	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800808c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	3302      	adds	r3, #2
 8008092:	61bb      	str	r3, [r7, #24]
 8008094:	e007      	b.n	80080a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	781a      	ldrb	r2, [r3, #0]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	3301      	adds	r3, #1
 80080a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	3b01      	subs	r3, #1
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80080be:	b29b      	uxth	r3, r3
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1c8      	bne.n	8008056 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	9300      	str	r3, [sp, #0]
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	2200      	movs	r2, #0
 80080cc:	2140      	movs	r1, #64	; 0x40
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f001 fbf2 	bl	80098b8 <UART_WaitOnFlagUntilTimeout>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d005      	beq.n	80080e6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2220      	movs	r2, #32
 80080de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80080e2:	2303      	movs	r3, #3
 80080e4:	e006      	b.n	80080f4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2220      	movs	r2, #32
 80080ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80080ee:	2300      	movs	r3, #0
 80080f0:	e000      	b.n	80080f4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80080f2:	2302      	movs	r3, #2
  }
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3720      	adds	r7, #32
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b08a      	sub	sp, #40	; 0x28
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	4613      	mov	r3, r2
 8008108:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008110:	2b20      	cmp	r3, #32
 8008112:	d137      	bne.n	8008184 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d002      	beq.n	8008120 <HAL_UART_Receive_IT+0x24>
 800811a:	88fb      	ldrh	r3, [r7, #6]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d101      	bne.n	8008124 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	e030      	b.n	8008186 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2200      	movs	r2, #0
 8008128:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a18      	ldr	r2, [pc, #96]	; (8008190 <HAL_UART_Receive_IT+0x94>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d01f      	beq.n	8008174 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800813e:	2b00      	cmp	r3, #0
 8008140:	d018      	beq.n	8008174 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	e853 3f00 	ldrex	r3, [r3]
 800814e:	613b      	str	r3, [r7, #16]
   return(result);
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008156:	627b      	str	r3, [r7, #36]	; 0x24
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	461a      	mov	r2, r3
 800815e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008160:	623b      	str	r3, [r7, #32]
 8008162:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008164:	69f9      	ldr	r1, [r7, #28]
 8008166:	6a3a      	ldr	r2, [r7, #32]
 8008168:	e841 2300 	strex	r3, r2, [r1]
 800816c:	61bb      	str	r3, [r7, #24]
   return(result);
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1e6      	bne.n	8008142 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008174:	88fb      	ldrh	r3, [r7, #6]
 8008176:	461a      	mov	r2, r3
 8008178:	68b9      	ldr	r1, [r7, #8]
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f001 fc04 	bl	8009988 <UART_Start_Receive_IT>
 8008180:	4603      	mov	r3, r0
 8008182:	e000      	b.n	8008186 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008184:	2302      	movs	r3, #2
  }
}
 8008186:	4618      	mov	r0, r3
 8008188:	3728      	adds	r7, #40	; 0x28
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	58000c00 	.word	0x58000c00

08008194 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b0ba      	sub	sp, #232	; 0xe8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	69db      	ldr	r3, [r3, #28]
 80081a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80081ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80081be:	f640 030f 	movw	r3, #2063	; 0x80f
 80081c2:	4013      	ands	r3, r2
 80081c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80081c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d11b      	bne.n	8008208 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80081d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081d4:	f003 0320 	and.w	r3, r3, #32
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d015      	beq.n	8008208 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80081dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081e0:	f003 0320 	and.w	r3, r3, #32
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d105      	bne.n	80081f4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80081e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d009      	beq.n	8008208 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 8377 	beq.w	80088ec <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	4798      	blx	r3
      }
      return;
 8008206:	e371      	b.n	80088ec <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008208:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800820c:	2b00      	cmp	r3, #0
 800820e:	f000 8123 	beq.w	8008458 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008212:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008216:	4b8d      	ldr	r3, [pc, #564]	; (800844c <HAL_UART_IRQHandler+0x2b8>)
 8008218:	4013      	ands	r3, r2
 800821a:	2b00      	cmp	r3, #0
 800821c:	d106      	bne.n	800822c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800821e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008222:	4b8b      	ldr	r3, [pc, #556]	; (8008450 <HAL_UART_IRQHandler+0x2bc>)
 8008224:	4013      	ands	r3, r2
 8008226:	2b00      	cmp	r3, #0
 8008228:	f000 8116 	beq.w	8008458 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800822c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008230:	f003 0301 	and.w	r3, r3, #1
 8008234:	2b00      	cmp	r3, #0
 8008236:	d011      	beq.n	800825c <HAL_UART_IRQHandler+0xc8>
 8008238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800823c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00b      	beq.n	800825c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2201      	movs	r2, #1
 800824a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008252:	f043 0201 	orr.w	r2, r3, #1
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800825c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008260:	f003 0302 	and.w	r3, r3, #2
 8008264:	2b00      	cmp	r3, #0
 8008266:	d011      	beq.n	800828c <HAL_UART_IRQHandler+0xf8>
 8008268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800826c:	f003 0301 	and.w	r3, r3, #1
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00b      	beq.n	800828c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2202      	movs	r2, #2
 800827a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008282:	f043 0204 	orr.w	r2, r3, #4
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800828c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008290:	f003 0304 	and.w	r3, r3, #4
 8008294:	2b00      	cmp	r3, #0
 8008296:	d011      	beq.n	80082bc <HAL_UART_IRQHandler+0x128>
 8008298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800829c:	f003 0301 	and.w	r3, r3, #1
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00b      	beq.n	80082bc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2204      	movs	r2, #4
 80082aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082b2:	f043 0202 	orr.w	r2, r3, #2
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80082bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082c0:	f003 0308 	and.w	r3, r3, #8
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d017      	beq.n	80082f8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80082c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082cc:	f003 0320 	and.w	r3, r3, #32
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d105      	bne.n	80082e0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80082d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80082d8:	4b5c      	ldr	r3, [pc, #368]	; (800844c <HAL_UART_IRQHandler+0x2b8>)
 80082da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00b      	beq.n	80082f8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2208      	movs	r2, #8
 80082e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082ee:	f043 0208 	orr.w	r2, r3, #8
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80082f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008300:	2b00      	cmp	r3, #0
 8008302:	d012      	beq.n	800832a <HAL_UART_IRQHandler+0x196>
 8008304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008308:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00c      	beq.n	800832a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008318:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008320:	f043 0220 	orr.w	r2, r3, #32
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008330:	2b00      	cmp	r3, #0
 8008332:	f000 82dd 	beq.w	80088f0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800833a:	f003 0320 	and.w	r3, r3, #32
 800833e:	2b00      	cmp	r3, #0
 8008340:	d013      	beq.n	800836a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008346:	f003 0320 	and.w	r3, r3, #32
 800834a:	2b00      	cmp	r3, #0
 800834c:	d105      	bne.n	800835a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800834e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008356:	2b00      	cmp	r3, #0
 8008358:	d007      	beq.n	800836a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800835e:	2b00      	cmp	r3, #0
 8008360:	d003      	beq.n	800836a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008370:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800837e:	2b40      	cmp	r3, #64	; 0x40
 8008380:	d005      	beq.n	800838e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008382:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008386:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800838a:	2b00      	cmp	r3, #0
 800838c:	d054      	beq.n	8008438 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f001 fc1c 	bl	8009bcc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800839e:	2b40      	cmp	r3, #64	; 0x40
 80083a0:	d146      	bne.n	8008430 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	3308      	adds	r3, #8
 80083a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083b0:	e853 3f00 	ldrex	r3, [r3]
 80083b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80083b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80083bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	3308      	adds	r3, #8
 80083ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80083ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80083d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80083da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80083de:	e841 2300 	strex	r3, r2, [r1]
 80083e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80083e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1d9      	bne.n	80083a2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d017      	beq.n	8008428 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083fe:	4a15      	ldr	r2, [pc, #84]	; (8008454 <HAL_UART_IRQHandler+0x2c0>)
 8008400:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008408:	4618      	mov	r0, r3
 800840a:	f7fb f83b 	bl	8003484 <HAL_DMA_Abort_IT>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d019      	beq.n	8008448 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800841a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8008422:	4610      	mov	r0, r2
 8008424:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008426:	e00f      	b.n	8008448 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fa77 	bl	800891c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800842e:	e00b      	b.n	8008448 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 fa73 	bl	800891c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008436:	e007      	b.n	8008448 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 fa6f 	bl	800891c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8008446:	e253      	b.n	80088f0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008448:	bf00      	nop
    return;
 800844a:	e251      	b.n	80088f0 <HAL_UART_IRQHandler+0x75c>
 800844c:	10000001 	.word	0x10000001
 8008450:	04000120 	.word	0x04000120
 8008454:	08009c99 	.word	0x08009c99

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800845c:	2b01      	cmp	r3, #1
 800845e:	f040 81e7 	bne.w	8008830 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008466:	f003 0310 	and.w	r3, r3, #16
 800846a:	2b00      	cmp	r3, #0
 800846c:	f000 81e0 	beq.w	8008830 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008474:	f003 0310 	and.w	r3, r3, #16
 8008478:	2b00      	cmp	r3, #0
 800847a:	f000 81d9 	beq.w	8008830 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2210      	movs	r2, #16
 8008484:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008490:	2b40      	cmp	r3, #64	; 0x40
 8008492:	f040 8151 	bne.w	8008738 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a96      	ldr	r2, [pc, #600]	; (80086f8 <HAL_UART_IRQHandler+0x564>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d068      	beq.n	8008576 <HAL_UART_IRQHandler+0x3e2>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a93      	ldr	r2, [pc, #588]	; (80086fc <HAL_UART_IRQHandler+0x568>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d061      	beq.n	8008576 <HAL_UART_IRQHandler+0x3e2>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a91      	ldr	r2, [pc, #580]	; (8008700 <HAL_UART_IRQHandler+0x56c>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d05a      	beq.n	8008576 <HAL_UART_IRQHandler+0x3e2>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a8e      	ldr	r2, [pc, #568]	; (8008704 <HAL_UART_IRQHandler+0x570>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d053      	beq.n	8008576 <HAL_UART_IRQHandler+0x3e2>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a8c      	ldr	r2, [pc, #560]	; (8008708 <HAL_UART_IRQHandler+0x574>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d04c      	beq.n	8008576 <HAL_UART_IRQHandler+0x3e2>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a89      	ldr	r2, [pc, #548]	; (800870c <HAL_UART_IRQHandler+0x578>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d045      	beq.n	8008576 <HAL_UART_IRQHandler+0x3e2>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a87      	ldr	r2, [pc, #540]	; (8008710 <HAL_UART_IRQHandler+0x57c>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d03e      	beq.n	8008576 <HAL_UART_IRQHandler+0x3e2>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a84      	ldr	r2, [pc, #528]	; (8008714 <HAL_UART_IRQHandler+0x580>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d037      	beq.n	8008576 <HAL_UART_IRQHandler+0x3e2>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a82      	ldr	r2, [pc, #520]	; (8008718 <HAL_UART_IRQHandler+0x584>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d030      	beq.n	8008576 <HAL_UART_IRQHandler+0x3e2>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a7f      	ldr	r2, [pc, #508]	; (800871c <HAL_UART_IRQHandler+0x588>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d029      	beq.n	8008576 <HAL_UART_IRQHandler+0x3e2>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a7d      	ldr	r2, [pc, #500]	; (8008720 <HAL_UART_IRQHandler+0x58c>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d022      	beq.n	8008576 <HAL_UART_IRQHandler+0x3e2>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a7a      	ldr	r2, [pc, #488]	; (8008724 <HAL_UART_IRQHandler+0x590>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d01b      	beq.n	8008576 <HAL_UART_IRQHandler+0x3e2>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a78      	ldr	r2, [pc, #480]	; (8008728 <HAL_UART_IRQHandler+0x594>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d014      	beq.n	8008576 <HAL_UART_IRQHandler+0x3e2>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a75      	ldr	r2, [pc, #468]	; (800872c <HAL_UART_IRQHandler+0x598>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d00d      	beq.n	8008576 <HAL_UART_IRQHandler+0x3e2>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a73      	ldr	r2, [pc, #460]	; (8008730 <HAL_UART_IRQHandler+0x59c>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d006      	beq.n	8008576 <HAL_UART_IRQHandler+0x3e2>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a70      	ldr	r2, [pc, #448]	; (8008734 <HAL_UART_IRQHandler+0x5a0>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d106      	bne.n	8008584 <HAL_UART_IRQHandler+0x3f0>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	b29b      	uxth	r3, r3
 8008582:	e005      	b.n	8008590 <HAL_UART_IRQHandler+0x3fc>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	b29b      	uxth	r3, r3
 8008590:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008594:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008598:	2b00      	cmp	r3, #0
 800859a:	f000 81ab 	beq.w	80088f4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80085a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80085a8:	429a      	cmp	r2, r3
 80085aa:	f080 81a3 	bcs.w	80088f4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80085b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085be:	69db      	ldr	r3, [r3, #28]
 80085c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085c4:	f000 8087 	beq.w	80086d6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80085d4:	e853 3f00 	ldrex	r3, [r3]
 80085d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80085dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80085e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	461a      	mov	r2, r3
 80085ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80085f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80085fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008602:	e841 2300 	strex	r3, r2, [r1]
 8008606:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800860a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1da      	bne.n	80085c8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	3308      	adds	r3, #8
 8008618:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800861c:	e853 3f00 	ldrex	r3, [r3]
 8008620:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008622:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008624:	f023 0301 	bic.w	r3, r3, #1
 8008628:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	3308      	adds	r3, #8
 8008632:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008636:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800863a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800863e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008642:	e841 2300 	strex	r3, r2, [r1]
 8008646:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1e1      	bne.n	8008612 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	3308      	adds	r3, #8
 8008654:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008658:	e853 3f00 	ldrex	r3, [r3]
 800865c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800865e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008664:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	3308      	adds	r3, #8
 800866e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008672:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008674:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008676:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008678:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800867a:	e841 2300 	strex	r3, r2, [r1]
 800867e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1e3      	bne.n	800864e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2220      	movs	r2, #32
 800868a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800869c:	e853 3f00 	ldrex	r3, [r3]
 80086a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80086a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086a4:	f023 0310 	bic.w	r3, r3, #16
 80086a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	461a      	mov	r2, r3
 80086b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80086b8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80086bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80086be:	e841 2300 	strex	r3, r2, [r1]
 80086c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80086c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d1e4      	bne.n	8008694 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7fa fbb9 	bl	8002e48 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2202      	movs	r2, #2
 80086da:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	1ad3      	subs	r3, r2, r3
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	4619      	mov	r1, r3
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 f91d 	bl	8008930 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80086f6:	e0fd      	b.n	80088f4 <HAL_UART_IRQHandler+0x760>
 80086f8:	40020010 	.word	0x40020010
 80086fc:	40020028 	.word	0x40020028
 8008700:	40020040 	.word	0x40020040
 8008704:	40020058 	.word	0x40020058
 8008708:	40020070 	.word	0x40020070
 800870c:	40020088 	.word	0x40020088
 8008710:	400200a0 	.word	0x400200a0
 8008714:	400200b8 	.word	0x400200b8
 8008718:	40020410 	.word	0x40020410
 800871c:	40020428 	.word	0x40020428
 8008720:	40020440 	.word	0x40020440
 8008724:	40020458 	.word	0x40020458
 8008728:	40020470 	.word	0x40020470
 800872c:	40020488 	.word	0x40020488
 8008730:	400204a0 	.word	0x400204a0
 8008734:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008744:	b29b      	uxth	r3, r3
 8008746:	1ad3      	subs	r3, r2, r3
 8008748:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008752:	b29b      	uxth	r3, r3
 8008754:	2b00      	cmp	r3, #0
 8008756:	f000 80cf 	beq.w	80088f8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800875a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800875e:	2b00      	cmp	r3, #0
 8008760:	f000 80ca 	beq.w	80088f8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876c:	e853 3f00 	ldrex	r3, [r3]
 8008770:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008774:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008778:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	461a      	mov	r2, r3
 8008782:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008786:	647b      	str	r3, [r7, #68]	; 0x44
 8008788:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800878c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800878e:	e841 2300 	strex	r3, r2, [r1]
 8008792:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008796:	2b00      	cmp	r3, #0
 8008798:	d1e4      	bne.n	8008764 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	3308      	adds	r3, #8
 80087a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a4:	e853 3f00 	ldrex	r3, [r3]
 80087a8:	623b      	str	r3, [r7, #32]
   return(result);
 80087aa:	6a3a      	ldr	r2, [r7, #32]
 80087ac:	4b55      	ldr	r3, [pc, #340]	; (8008904 <HAL_UART_IRQHandler+0x770>)
 80087ae:	4013      	ands	r3, r2
 80087b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	3308      	adds	r3, #8
 80087ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80087be:	633a      	str	r2, [r7, #48]	; 0x30
 80087c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087c6:	e841 2300 	strex	r3, r2, [r1]
 80087ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d1e3      	bne.n	800879a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2220      	movs	r2, #32
 80087d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	e853 3f00 	ldrex	r3, [r3]
 80087f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f023 0310 	bic.w	r3, r3, #16
 80087fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	461a      	mov	r2, r3
 8008804:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008808:	61fb      	str	r3, [r7, #28]
 800880a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880c:	69b9      	ldr	r1, [r7, #24]
 800880e:	69fa      	ldr	r2, [r7, #28]
 8008810:	e841 2300 	strex	r3, r2, [r1]
 8008814:	617b      	str	r3, [r7, #20]
   return(result);
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d1e4      	bne.n	80087e6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2202      	movs	r2, #2
 8008820:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008822:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008826:	4619      	mov	r1, r3
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 f881 	bl	8008930 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800882e:	e063      	b.n	80088f8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008834:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00e      	beq.n	800885a <HAL_UART_IRQHandler+0x6c6>
 800883c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008840:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008844:	2b00      	cmp	r3, #0
 8008846:	d008      	beq.n	800885a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008850:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f001 ff7e 	bl	800a754 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008858:	e051      	b.n	80088fe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800885a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800885e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008862:	2b00      	cmp	r3, #0
 8008864:	d014      	beq.n	8008890 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800886a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800886e:	2b00      	cmp	r3, #0
 8008870:	d105      	bne.n	800887e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008876:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800887a:	2b00      	cmp	r3, #0
 800887c:	d008      	beq.n	8008890 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008882:	2b00      	cmp	r3, #0
 8008884:	d03a      	beq.n	80088fc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	4798      	blx	r3
    }
    return;
 800888e:	e035      	b.n	80088fc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008898:	2b00      	cmp	r3, #0
 800889a:	d009      	beq.n	80088b0 <HAL_UART_IRQHandler+0x71c>
 800889c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d003      	beq.n	80088b0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f001 fa0b 	bl	8009cc4 <UART_EndTransmit_IT>
    return;
 80088ae:	e026      	b.n	80088fe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80088b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d009      	beq.n	80088d0 <HAL_UART_IRQHandler+0x73c>
 80088bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d003      	beq.n	80088d0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f001 ff57 	bl	800a77c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80088ce:	e016      	b.n	80088fe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80088d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d010      	beq.n	80088fe <HAL_UART_IRQHandler+0x76a>
 80088dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	da0c      	bge.n	80088fe <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f001 ff3f 	bl	800a768 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80088ea:	e008      	b.n	80088fe <HAL_UART_IRQHandler+0x76a>
      return;
 80088ec:	bf00      	nop
 80088ee:	e006      	b.n	80088fe <HAL_UART_IRQHandler+0x76a>
    return;
 80088f0:	bf00      	nop
 80088f2:	e004      	b.n	80088fe <HAL_UART_IRQHandler+0x76a>
      return;
 80088f4:	bf00      	nop
 80088f6:	e002      	b.n	80088fe <HAL_UART_IRQHandler+0x76a>
      return;
 80088f8:	bf00      	nop
 80088fa:	e000      	b.n	80088fe <HAL_UART_IRQHandler+0x76a>
    return;
 80088fc:	bf00      	nop
  }
}
 80088fe:	37e8      	adds	r7, #232	; 0xe8
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	effffffe 	.word	0xeffffffe

08008908 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008910:	bf00      	nop
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008924:	bf00      	nop
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	460b      	mov	r3, r1
 800893a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800894c:	b092      	sub	sp, #72	; 0x48
 800894e:	af00      	add	r7, sp, #0
 8008950:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008952:	2300      	movs	r3, #0
 8008954:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	689a      	ldr	r2, [r3, #8]
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	431a      	orrs	r2, r3
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	695b      	ldr	r3, [r3, #20]
 8008966:	431a      	orrs	r2, r3
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	69db      	ldr	r3, [r3, #28]
 800896c:	4313      	orrs	r3, r2
 800896e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	4bbe      	ldr	r3, [pc, #760]	; (8008c70 <UART_SetConfig+0x328>)
 8008978:	4013      	ands	r3, r2
 800897a:	697a      	ldr	r2, [r7, #20]
 800897c:	6812      	ldr	r2, [r2, #0]
 800897e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008980:	430b      	orrs	r3, r1
 8008982:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	68da      	ldr	r2, [r3, #12]
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	430a      	orrs	r2, r1
 8008998:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	699b      	ldr	r3, [r3, #24]
 800899e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4ab3      	ldr	r2, [pc, #716]	; (8008c74 <UART_SetConfig+0x32c>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d004      	beq.n	80089b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	6a1b      	ldr	r3, [r3, #32]
 80089ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089b0:	4313      	orrs	r3, r2
 80089b2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	689a      	ldr	r2, [r3, #8]
 80089ba:	4baf      	ldr	r3, [pc, #700]	; (8008c78 <UART_SetConfig+0x330>)
 80089bc:	4013      	ands	r3, r2
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	6812      	ldr	r2, [r2, #0]
 80089c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80089c4:	430b      	orrs	r3, r1
 80089c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ce:	f023 010f 	bic.w	r1, r3, #15
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	430a      	orrs	r2, r1
 80089dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4aa6      	ldr	r2, [pc, #664]	; (8008c7c <UART_SetConfig+0x334>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d177      	bne.n	8008ad8 <UART_SetConfig+0x190>
 80089e8:	4ba5      	ldr	r3, [pc, #660]	; (8008c80 <UART_SetConfig+0x338>)
 80089ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089f0:	2b28      	cmp	r3, #40	; 0x28
 80089f2:	d86d      	bhi.n	8008ad0 <UART_SetConfig+0x188>
 80089f4:	a201      	add	r2, pc, #4	; (adr r2, 80089fc <UART_SetConfig+0xb4>)
 80089f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089fa:	bf00      	nop
 80089fc:	08008aa1 	.word	0x08008aa1
 8008a00:	08008ad1 	.word	0x08008ad1
 8008a04:	08008ad1 	.word	0x08008ad1
 8008a08:	08008ad1 	.word	0x08008ad1
 8008a0c:	08008ad1 	.word	0x08008ad1
 8008a10:	08008ad1 	.word	0x08008ad1
 8008a14:	08008ad1 	.word	0x08008ad1
 8008a18:	08008ad1 	.word	0x08008ad1
 8008a1c:	08008aa9 	.word	0x08008aa9
 8008a20:	08008ad1 	.word	0x08008ad1
 8008a24:	08008ad1 	.word	0x08008ad1
 8008a28:	08008ad1 	.word	0x08008ad1
 8008a2c:	08008ad1 	.word	0x08008ad1
 8008a30:	08008ad1 	.word	0x08008ad1
 8008a34:	08008ad1 	.word	0x08008ad1
 8008a38:	08008ad1 	.word	0x08008ad1
 8008a3c:	08008ab1 	.word	0x08008ab1
 8008a40:	08008ad1 	.word	0x08008ad1
 8008a44:	08008ad1 	.word	0x08008ad1
 8008a48:	08008ad1 	.word	0x08008ad1
 8008a4c:	08008ad1 	.word	0x08008ad1
 8008a50:	08008ad1 	.word	0x08008ad1
 8008a54:	08008ad1 	.word	0x08008ad1
 8008a58:	08008ad1 	.word	0x08008ad1
 8008a5c:	08008ab9 	.word	0x08008ab9
 8008a60:	08008ad1 	.word	0x08008ad1
 8008a64:	08008ad1 	.word	0x08008ad1
 8008a68:	08008ad1 	.word	0x08008ad1
 8008a6c:	08008ad1 	.word	0x08008ad1
 8008a70:	08008ad1 	.word	0x08008ad1
 8008a74:	08008ad1 	.word	0x08008ad1
 8008a78:	08008ad1 	.word	0x08008ad1
 8008a7c:	08008ac1 	.word	0x08008ac1
 8008a80:	08008ad1 	.word	0x08008ad1
 8008a84:	08008ad1 	.word	0x08008ad1
 8008a88:	08008ad1 	.word	0x08008ad1
 8008a8c:	08008ad1 	.word	0x08008ad1
 8008a90:	08008ad1 	.word	0x08008ad1
 8008a94:	08008ad1 	.word	0x08008ad1
 8008a98:	08008ad1 	.word	0x08008ad1
 8008a9c:	08008ac9 	.word	0x08008ac9
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aa6:	e326      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008aa8:	2304      	movs	r3, #4
 8008aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aae:	e322      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008ab0:	2308      	movs	r3, #8
 8008ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ab6:	e31e      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008ab8:	2310      	movs	r3, #16
 8008aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008abe:	e31a      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008ac0:	2320      	movs	r3, #32
 8008ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ac6:	e316      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008ac8:	2340      	movs	r3, #64	; 0x40
 8008aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ace:	e312      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008ad0:	2380      	movs	r3, #128	; 0x80
 8008ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ad6:	e30e      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a69      	ldr	r2, [pc, #420]	; (8008c84 <UART_SetConfig+0x33c>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d130      	bne.n	8008b44 <UART_SetConfig+0x1fc>
 8008ae2:	4b67      	ldr	r3, [pc, #412]	; (8008c80 <UART_SetConfig+0x338>)
 8008ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ae6:	f003 0307 	and.w	r3, r3, #7
 8008aea:	2b05      	cmp	r3, #5
 8008aec:	d826      	bhi.n	8008b3c <UART_SetConfig+0x1f4>
 8008aee:	a201      	add	r2, pc, #4	; (adr r2, 8008af4 <UART_SetConfig+0x1ac>)
 8008af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af4:	08008b0d 	.word	0x08008b0d
 8008af8:	08008b15 	.word	0x08008b15
 8008afc:	08008b1d 	.word	0x08008b1d
 8008b00:	08008b25 	.word	0x08008b25
 8008b04:	08008b2d 	.word	0x08008b2d
 8008b08:	08008b35 	.word	0x08008b35
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b12:	e2f0      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008b14:	2304      	movs	r3, #4
 8008b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b1a:	e2ec      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008b1c:	2308      	movs	r3, #8
 8008b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b22:	e2e8      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008b24:	2310      	movs	r3, #16
 8008b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b2a:	e2e4      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008b2c:	2320      	movs	r3, #32
 8008b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b32:	e2e0      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008b34:	2340      	movs	r3, #64	; 0x40
 8008b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b3a:	e2dc      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008b3c:	2380      	movs	r3, #128	; 0x80
 8008b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b42:	e2d8      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a4f      	ldr	r2, [pc, #316]	; (8008c88 <UART_SetConfig+0x340>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d130      	bne.n	8008bb0 <UART_SetConfig+0x268>
 8008b4e:	4b4c      	ldr	r3, [pc, #304]	; (8008c80 <UART_SetConfig+0x338>)
 8008b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b52:	f003 0307 	and.w	r3, r3, #7
 8008b56:	2b05      	cmp	r3, #5
 8008b58:	d826      	bhi.n	8008ba8 <UART_SetConfig+0x260>
 8008b5a:	a201      	add	r2, pc, #4	; (adr r2, 8008b60 <UART_SetConfig+0x218>)
 8008b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b60:	08008b79 	.word	0x08008b79
 8008b64:	08008b81 	.word	0x08008b81
 8008b68:	08008b89 	.word	0x08008b89
 8008b6c:	08008b91 	.word	0x08008b91
 8008b70:	08008b99 	.word	0x08008b99
 8008b74:	08008ba1 	.word	0x08008ba1
 8008b78:	2300      	movs	r3, #0
 8008b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b7e:	e2ba      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008b80:	2304      	movs	r3, #4
 8008b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b86:	e2b6      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008b88:	2308      	movs	r3, #8
 8008b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b8e:	e2b2      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008b90:	2310      	movs	r3, #16
 8008b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b96:	e2ae      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008b98:	2320      	movs	r3, #32
 8008b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b9e:	e2aa      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008ba0:	2340      	movs	r3, #64	; 0x40
 8008ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ba6:	e2a6      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008ba8:	2380      	movs	r3, #128	; 0x80
 8008baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bae:	e2a2      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a35      	ldr	r2, [pc, #212]	; (8008c8c <UART_SetConfig+0x344>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d130      	bne.n	8008c1c <UART_SetConfig+0x2d4>
 8008bba:	4b31      	ldr	r3, [pc, #196]	; (8008c80 <UART_SetConfig+0x338>)
 8008bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bbe:	f003 0307 	and.w	r3, r3, #7
 8008bc2:	2b05      	cmp	r3, #5
 8008bc4:	d826      	bhi.n	8008c14 <UART_SetConfig+0x2cc>
 8008bc6:	a201      	add	r2, pc, #4	; (adr r2, 8008bcc <UART_SetConfig+0x284>)
 8008bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bcc:	08008be5 	.word	0x08008be5
 8008bd0:	08008bed 	.word	0x08008bed
 8008bd4:	08008bf5 	.word	0x08008bf5
 8008bd8:	08008bfd 	.word	0x08008bfd
 8008bdc:	08008c05 	.word	0x08008c05
 8008be0:	08008c0d 	.word	0x08008c0d
 8008be4:	2300      	movs	r3, #0
 8008be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bea:	e284      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008bec:	2304      	movs	r3, #4
 8008bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bf2:	e280      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008bf4:	2308      	movs	r3, #8
 8008bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bfa:	e27c      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008bfc:	2310      	movs	r3, #16
 8008bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c02:	e278      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008c04:	2320      	movs	r3, #32
 8008c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c0a:	e274      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008c0c:	2340      	movs	r3, #64	; 0x40
 8008c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c12:	e270      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008c14:	2380      	movs	r3, #128	; 0x80
 8008c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c1a:	e26c      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a1b      	ldr	r2, [pc, #108]	; (8008c90 <UART_SetConfig+0x348>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d142      	bne.n	8008cac <UART_SetConfig+0x364>
 8008c26:	4b16      	ldr	r3, [pc, #88]	; (8008c80 <UART_SetConfig+0x338>)
 8008c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c2a:	f003 0307 	and.w	r3, r3, #7
 8008c2e:	2b05      	cmp	r3, #5
 8008c30:	d838      	bhi.n	8008ca4 <UART_SetConfig+0x35c>
 8008c32:	a201      	add	r2, pc, #4	; (adr r2, 8008c38 <UART_SetConfig+0x2f0>)
 8008c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c38:	08008c51 	.word	0x08008c51
 8008c3c:	08008c59 	.word	0x08008c59
 8008c40:	08008c61 	.word	0x08008c61
 8008c44:	08008c69 	.word	0x08008c69
 8008c48:	08008c95 	.word	0x08008c95
 8008c4c:	08008c9d 	.word	0x08008c9d
 8008c50:	2300      	movs	r3, #0
 8008c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c56:	e24e      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008c58:	2304      	movs	r3, #4
 8008c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c5e:	e24a      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008c60:	2308      	movs	r3, #8
 8008c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c66:	e246      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008c68:	2310      	movs	r3, #16
 8008c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c6e:	e242      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008c70:	cfff69f3 	.word	0xcfff69f3
 8008c74:	58000c00 	.word	0x58000c00
 8008c78:	11fff4ff 	.word	0x11fff4ff
 8008c7c:	40011000 	.word	0x40011000
 8008c80:	58024400 	.word	0x58024400
 8008c84:	40004400 	.word	0x40004400
 8008c88:	40004800 	.word	0x40004800
 8008c8c:	40004c00 	.word	0x40004c00
 8008c90:	40005000 	.word	0x40005000
 8008c94:	2320      	movs	r3, #32
 8008c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c9a:	e22c      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008c9c:	2340      	movs	r3, #64	; 0x40
 8008c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ca2:	e228      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008ca4:	2380      	movs	r3, #128	; 0x80
 8008ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008caa:	e224      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4ab1      	ldr	r2, [pc, #708]	; (8008f78 <UART_SetConfig+0x630>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d176      	bne.n	8008da4 <UART_SetConfig+0x45c>
 8008cb6:	4bb1      	ldr	r3, [pc, #708]	; (8008f7c <UART_SetConfig+0x634>)
 8008cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cbe:	2b28      	cmp	r3, #40	; 0x28
 8008cc0:	d86c      	bhi.n	8008d9c <UART_SetConfig+0x454>
 8008cc2:	a201      	add	r2, pc, #4	; (adr r2, 8008cc8 <UART_SetConfig+0x380>)
 8008cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc8:	08008d6d 	.word	0x08008d6d
 8008ccc:	08008d9d 	.word	0x08008d9d
 8008cd0:	08008d9d 	.word	0x08008d9d
 8008cd4:	08008d9d 	.word	0x08008d9d
 8008cd8:	08008d9d 	.word	0x08008d9d
 8008cdc:	08008d9d 	.word	0x08008d9d
 8008ce0:	08008d9d 	.word	0x08008d9d
 8008ce4:	08008d9d 	.word	0x08008d9d
 8008ce8:	08008d75 	.word	0x08008d75
 8008cec:	08008d9d 	.word	0x08008d9d
 8008cf0:	08008d9d 	.word	0x08008d9d
 8008cf4:	08008d9d 	.word	0x08008d9d
 8008cf8:	08008d9d 	.word	0x08008d9d
 8008cfc:	08008d9d 	.word	0x08008d9d
 8008d00:	08008d9d 	.word	0x08008d9d
 8008d04:	08008d9d 	.word	0x08008d9d
 8008d08:	08008d7d 	.word	0x08008d7d
 8008d0c:	08008d9d 	.word	0x08008d9d
 8008d10:	08008d9d 	.word	0x08008d9d
 8008d14:	08008d9d 	.word	0x08008d9d
 8008d18:	08008d9d 	.word	0x08008d9d
 8008d1c:	08008d9d 	.word	0x08008d9d
 8008d20:	08008d9d 	.word	0x08008d9d
 8008d24:	08008d9d 	.word	0x08008d9d
 8008d28:	08008d85 	.word	0x08008d85
 8008d2c:	08008d9d 	.word	0x08008d9d
 8008d30:	08008d9d 	.word	0x08008d9d
 8008d34:	08008d9d 	.word	0x08008d9d
 8008d38:	08008d9d 	.word	0x08008d9d
 8008d3c:	08008d9d 	.word	0x08008d9d
 8008d40:	08008d9d 	.word	0x08008d9d
 8008d44:	08008d9d 	.word	0x08008d9d
 8008d48:	08008d8d 	.word	0x08008d8d
 8008d4c:	08008d9d 	.word	0x08008d9d
 8008d50:	08008d9d 	.word	0x08008d9d
 8008d54:	08008d9d 	.word	0x08008d9d
 8008d58:	08008d9d 	.word	0x08008d9d
 8008d5c:	08008d9d 	.word	0x08008d9d
 8008d60:	08008d9d 	.word	0x08008d9d
 8008d64:	08008d9d 	.word	0x08008d9d
 8008d68:	08008d95 	.word	0x08008d95
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d72:	e1c0      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008d74:	2304      	movs	r3, #4
 8008d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d7a:	e1bc      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008d7c:	2308      	movs	r3, #8
 8008d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d82:	e1b8      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008d84:	2310      	movs	r3, #16
 8008d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d8a:	e1b4      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008d8c:	2320      	movs	r3, #32
 8008d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d92:	e1b0      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008d94:	2340      	movs	r3, #64	; 0x40
 8008d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d9a:	e1ac      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008d9c:	2380      	movs	r3, #128	; 0x80
 8008d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008da2:	e1a8      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a75      	ldr	r2, [pc, #468]	; (8008f80 <UART_SetConfig+0x638>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d130      	bne.n	8008e10 <UART_SetConfig+0x4c8>
 8008dae:	4b73      	ldr	r3, [pc, #460]	; (8008f7c <UART_SetConfig+0x634>)
 8008db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008db2:	f003 0307 	and.w	r3, r3, #7
 8008db6:	2b05      	cmp	r3, #5
 8008db8:	d826      	bhi.n	8008e08 <UART_SetConfig+0x4c0>
 8008dba:	a201      	add	r2, pc, #4	; (adr r2, 8008dc0 <UART_SetConfig+0x478>)
 8008dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc0:	08008dd9 	.word	0x08008dd9
 8008dc4:	08008de1 	.word	0x08008de1
 8008dc8:	08008de9 	.word	0x08008de9
 8008dcc:	08008df1 	.word	0x08008df1
 8008dd0:	08008df9 	.word	0x08008df9
 8008dd4:	08008e01 	.word	0x08008e01
 8008dd8:	2300      	movs	r3, #0
 8008dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dde:	e18a      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008de0:	2304      	movs	r3, #4
 8008de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008de6:	e186      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008de8:	2308      	movs	r3, #8
 8008dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dee:	e182      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008df0:	2310      	movs	r3, #16
 8008df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008df6:	e17e      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008df8:	2320      	movs	r3, #32
 8008dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dfe:	e17a      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008e00:	2340      	movs	r3, #64	; 0x40
 8008e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e06:	e176      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008e08:	2380      	movs	r3, #128	; 0x80
 8008e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e0e:	e172      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a5b      	ldr	r2, [pc, #364]	; (8008f84 <UART_SetConfig+0x63c>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d130      	bne.n	8008e7c <UART_SetConfig+0x534>
 8008e1a:	4b58      	ldr	r3, [pc, #352]	; (8008f7c <UART_SetConfig+0x634>)
 8008e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e1e:	f003 0307 	and.w	r3, r3, #7
 8008e22:	2b05      	cmp	r3, #5
 8008e24:	d826      	bhi.n	8008e74 <UART_SetConfig+0x52c>
 8008e26:	a201      	add	r2, pc, #4	; (adr r2, 8008e2c <UART_SetConfig+0x4e4>)
 8008e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e2c:	08008e45 	.word	0x08008e45
 8008e30:	08008e4d 	.word	0x08008e4d
 8008e34:	08008e55 	.word	0x08008e55
 8008e38:	08008e5d 	.word	0x08008e5d
 8008e3c:	08008e65 	.word	0x08008e65
 8008e40:	08008e6d 	.word	0x08008e6d
 8008e44:	2300      	movs	r3, #0
 8008e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e4a:	e154      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008e4c:	2304      	movs	r3, #4
 8008e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e52:	e150      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008e54:	2308      	movs	r3, #8
 8008e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e5a:	e14c      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008e5c:	2310      	movs	r3, #16
 8008e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e62:	e148      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008e64:	2320      	movs	r3, #32
 8008e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e6a:	e144      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008e6c:	2340      	movs	r3, #64	; 0x40
 8008e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e72:	e140      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008e74:	2380      	movs	r3, #128	; 0x80
 8008e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e7a:	e13c      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a41      	ldr	r2, [pc, #260]	; (8008f88 <UART_SetConfig+0x640>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	f040 8082 	bne.w	8008f8c <UART_SetConfig+0x644>
 8008e88:	4b3c      	ldr	r3, [pc, #240]	; (8008f7c <UART_SetConfig+0x634>)
 8008e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e90:	2b28      	cmp	r3, #40	; 0x28
 8008e92:	d86d      	bhi.n	8008f70 <UART_SetConfig+0x628>
 8008e94:	a201      	add	r2, pc, #4	; (adr r2, 8008e9c <UART_SetConfig+0x554>)
 8008e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9a:	bf00      	nop
 8008e9c:	08008f41 	.word	0x08008f41
 8008ea0:	08008f71 	.word	0x08008f71
 8008ea4:	08008f71 	.word	0x08008f71
 8008ea8:	08008f71 	.word	0x08008f71
 8008eac:	08008f71 	.word	0x08008f71
 8008eb0:	08008f71 	.word	0x08008f71
 8008eb4:	08008f71 	.word	0x08008f71
 8008eb8:	08008f71 	.word	0x08008f71
 8008ebc:	08008f49 	.word	0x08008f49
 8008ec0:	08008f71 	.word	0x08008f71
 8008ec4:	08008f71 	.word	0x08008f71
 8008ec8:	08008f71 	.word	0x08008f71
 8008ecc:	08008f71 	.word	0x08008f71
 8008ed0:	08008f71 	.word	0x08008f71
 8008ed4:	08008f71 	.word	0x08008f71
 8008ed8:	08008f71 	.word	0x08008f71
 8008edc:	08008f51 	.word	0x08008f51
 8008ee0:	08008f71 	.word	0x08008f71
 8008ee4:	08008f71 	.word	0x08008f71
 8008ee8:	08008f71 	.word	0x08008f71
 8008eec:	08008f71 	.word	0x08008f71
 8008ef0:	08008f71 	.word	0x08008f71
 8008ef4:	08008f71 	.word	0x08008f71
 8008ef8:	08008f71 	.word	0x08008f71
 8008efc:	08008f59 	.word	0x08008f59
 8008f00:	08008f71 	.word	0x08008f71
 8008f04:	08008f71 	.word	0x08008f71
 8008f08:	08008f71 	.word	0x08008f71
 8008f0c:	08008f71 	.word	0x08008f71
 8008f10:	08008f71 	.word	0x08008f71
 8008f14:	08008f71 	.word	0x08008f71
 8008f18:	08008f71 	.word	0x08008f71
 8008f1c:	08008f61 	.word	0x08008f61
 8008f20:	08008f71 	.word	0x08008f71
 8008f24:	08008f71 	.word	0x08008f71
 8008f28:	08008f71 	.word	0x08008f71
 8008f2c:	08008f71 	.word	0x08008f71
 8008f30:	08008f71 	.word	0x08008f71
 8008f34:	08008f71 	.word	0x08008f71
 8008f38:	08008f71 	.word	0x08008f71
 8008f3c:	08008f69 	.word	0x08008f69
 8008f40:	2301      	movs	r3, #1
 8008f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f46:	e0d6      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008f48:	2304      	movs	r3, #4
 8008f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f4e:	e0d2      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008f50:	2308      	movs	r3, #8
 8008f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f56:	e0ce      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008f58:	2310      	movs	r3, #16
 8008f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f5e:	e0ca      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008f60:	2320      	movs	r3, #32
 8008f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f66:	e0c6      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008f68:	2340      	movs	r3, #64	; 0x40
 8008f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f6e:	e0c2      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008f70:	2380      	movs	r3, #128	; 0x80
 8008f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f76:	e0be      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8008f78:	40011400 	.word	0x40011400
 8008f7c:	58024400 	.word	0x58024400
 8008f80:	40007800 	.word	0x40007800
 8008f84:	40007c00 	.word	0x40007c00
 8008f88:	40011800 	.word	0x40011800
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4aad      	ldr	r2, [pc, #692]	; (8009248 <UART_SetConfig+0x900>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d176      	bne.n	8009084 <UART_SetConfig+0x73c>
 8008f96:	4bad      	ldr	r3, [pc, #692]	; (800924c <UART_SetConfig+0x904>)
 8008f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f9e:	2b28      	cmp	r3, #40	; 0x28
 8008fa0:	d86c      	bhi.n	800907c <UART_SetConfig+0x734>
 8008fa2:	a201      	add	r2, pc, #4	; (adr r2, 8008fa8 <UART_SetConfig+0x660>)
 8008fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa8:	0800904d 	.word	0x0800904d
 8008fac:	0800907d 	.word	0x0800907d
 8008fb0:	0800907d 	.word	0x0800907d
 8008fb4:	0800907d 	.word	0x0800907d
 8008fb8:	0800907d 	.word	0x0800907d
 8008fbc:	0800907d 	.word	0x0800907d
 8008fc0:	0800907d 	.word	0x0800907d
 8008fc4:	0800907d 	.word	0x0800907d
 8008fc8:	08009055 	.word	0x08009055
 8008fcc:	0800907d 	.word	0x0800907d
 8008fd0:	0800907d 	.word	0x0800907d
 8008fd4:	0800907d 	.word	0x0800907d
 8008fd8:	0800907d 	.word	0x0800907d
 8008fdc:	0800907d 	.word	0x0800907d
 8008fe0:	0800907d 	.word	0x0800907d
 8008fe4:	0800907d 	.word	0x0800907d
 8008fe8:	0800905d 	.word	0x0800905d
 8008fec:	0800907d 	.word	0x0800907d
 8008ff0:	0800907d 	.word	0x0800907d
 8008ff4:	0800907d 	.word	0x0800907d
 8008ff8:	0800907d 	.word	0x0800907d
 8008ffc:	0800907d 	.word	0x0800907d
 8009000:	0800907d 	.word	0x0800907d
 8009004:	0800907d 	.word	0x0800907d
 8009008:	08009065 	.word	0x08009065
 800900c:	0800907d 	.word	0x0800907d
 8009010:	0800907d 	.word	0x0800907d
 8009014:	0800907d 	.word	0x0800907d
 8009018:	0800907d 	.word	0x0800907d
 800901c:	0800907d 	.word	0x0800907d
 8009020:	0800907d 	.word	0x0800907d
 8009024:	0800907d 	.word	0x0800907d
 8009028:	0800906d 	.word	0x0800906d
 800902c:	0800907d 	.word	0x0800907d
 8009030:	0800907d 	.word	0x0800907d
 8009034:	0800907d 	.word	0x0800907d
 8009038:	0800907d 	.word	0x0800907d
 800903c:	0800907d 	.word	0x0800907d
 8009040:	0800907d 	.word	0x0800907d
 8009044:	0800907d 	.word	0x0800907d
 8009048:	08009075 	.word	0x08009075
 800904c:	2301      	movs	r3, #1
 800904e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009052:	e050      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8009054:	2304      	movs	r3, #4
 8009056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800905a:	e04c      	b.n	80090f6 <UART_SetConfig+0x7ae>
 800905c:	2308      	movs	r3, #8
 800905e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009062:	e048      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8009064:	2310      	movs	r3, #16
 8009066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800906a:	e044      	b.n	80090f6 <UART_SetConfig+0x7ae>
 800906c:	2320      	movs	r3, #32
 800906e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009072:	e040      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8009074:	2340      	movs	r3, #64	; 0x40
 8009076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800907a:	e03c      	b.n	80090f6 <UART_SetConfig+0x7ae>
 800907c:	2380      	movs	r3, #128	; 0x80
 800907e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009082:	e038      	b.n	80090f6 <UART_SetConfig+0x7ae>
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a71      	ldr	r2, [pc, #452]	; (8009250 <UART_SetConfig+0x908>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d130      	bne.n	80090f0 <UART_SetConfig+0x7a8>
 800908e:	4b6f      	ldr	r3, [pc, #444]	; (800924c <UART_SetConfig+0x904>)
 8009090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009092:	f003 0307 	and.w	r3, r3, #7
 8009096:	2b05      	cmp	r3, #5
 8009098:	d826      	bhi.n	80090e8 <UART_SetConfig+0x7a0>
 800909a:	a201      	add	r2, pc, #4	; (adr r2, 80090a0 <UART_SetConfig+0x758>)
 800909c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a0:	080090b9 	.word	0x080090b9
 80090a4:	080090c1 	.word	0x080090c1
 80090a8:	080090c9 	.word	0x080090c9
 80090ac:	080090d1 	.word	0x080090d1
 80090b0:	080090d9 	.word	0x080090d9
 80090b4:	080090e1 	.word	0x080090e1
 80090b8:	2302      	movs	r3, #2
 80090ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090be:	e01a      	b.n	80090f6 <UART_SetConfig+0x7ae>
 80090c0:	2304      	movs	r3, #4
 80090c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090c6:	e016      	b.n	80090f6 <UART_SetConfig+0x7ae>
 80090c8:	2308      	movs	r3, #8
 80090ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ce:	e012      	b.n	80090f6 <UART_SetConfig+0x7ae>
 80090d0:	2310      	movs	r3, #16
 80090d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090d6:	e00e      	b.n	80090f6 <UART_SetConfig+0x7ae>
 80090d8:	2320      	movs	r3, #32
 80090da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090de:	e00a      	b.n	80090f6 <UART_SetConfig+0x7ae>
 80090e0:	2340      	movs	r3, #64	; 0x40
 80090e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090e6:	e006      	b.n	80090f6 <UART_SetConfig+0x7ae>
 80090e8:	2380      	movs	r3, #128	; 0x80
 80090ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ee:	e002      	b.n	80090f6 <UART_SetConfig+0x7ae>
 80090f0:	2380      	movs	r3, #128	; 0x80
 80090f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a55      	ldr	r2, [pc, #340]	; (8009250 <UART_SetConfig+0x908>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	f040 80f8 	bne.w	80092f2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009102:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009106:	2b20      	cmp	r3, #32
 8009108:	dc46      	bgt.n	8009198 <UART_SetConfig+0x850>
 800910a:	2b02      	cmp	r3, #2
 800910c:	db75      	blt.n	80091fa <UART_SetConfig+0x8b2>
 800910e:	3b02      	subs	r3, #2
 8009110:	2b1e      	cmp	r3, #30
 8009112:	d872      	bhi.n	80091fa <UART_SetConfig+0x8b2>
 8009114:	a201      	add	r2, pc, #4	; (adr r2, 800911c <UART_SetConfig+0x7d4>)
 8009116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911a:	bf00      	nop
 800911c:	0800919f 	.word	0x0800919f
 8009120:	080091fb 	.word	0x080091fb
 8009124:	080091a7 	.word	0x080091a7
 8009128:	080091fb 	.word	0x080091fb
 800912c:	080091fb 	.word	0x080091fb
 8009130:	080091fb 	.word	0x080091fb
 8009134:	080091b7 	.word	0x080091b7
 8009138:	080091fb 	.word	0x080091fb
 800913c:	080091fb 	.word	0x080091fb
 8009140:	080091fb 	.word	0x080091fb
 8009144:	080091fb 	.word	0x080091fb
 8009148:	080091fb 	.word	0x080091fb
 800914c:	080091fb 	.word	0x080091fb
 8009150:	080091fb 	.word	0x080091fb
 8009154:	080091c7 	.word	0x080091c7
 8009158:	080091fb 	.word	0x080091fb
 800915c:	080091fb 	.word	0x080091fb
 8009160:	080091fb 	.word	0x080091fb
 8009164:	080091fb 	.word	0x080091fb
 8009168:	080091fb 	.word	0x080091fb
 800916c:	080091fb 	.word	0x080091fb
 8009170:	080091fb 	.word	0x080091fb
 8009174:	080091fb 	.word	0x080091fb
 8009178:	080091fb 	.word	0x080091fb
 800917c:	080091fb 	.word	0x080091fb
 8009180:	080091fb 	.word	0x080091fb
 8009184:	080091fb 	.word	0x080091fb
 8009188:	080091fb 	.word	0x080091fb
 800918c:	080091fb 	.word	0x080091fb
 8009190:	080091fb 	.word	0x080091fb
 8009194:	080091ed 	.word	0x080091ed
 8009198:	2b40      	cmp	r3, #64	; 0x40
 800919a:	d02a      	beq.n	80091f2 <UART_SetConfig+0x8aa>
 800919c:	e02d      	b.n	80091fa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800919e:	f7fd fc2f 	bl	8006a00 <HAL_RCCEx_GetD3PCLK1Freq>
 80091a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80091a4:	e02f      	b.n	8009206 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7fd fc3e 	bl	8006a2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80091b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091b4:	e027      	b.n	8009206 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091b6:	f107 0318 	add.w	r3, r7, #24
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7fd fd8a 	bl	8006cd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80091c0:	69fb      	ldr	r3, [r7, #28]
 80091c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091c4:	e01f      	b.n	8009206 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091c6:	4b21      	ldr	r3, [pc, #132]	; (800924c <UART_SetConfig+0x904>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f003 0320 	and.w	r3, r3, #32
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d009      	beq.n	80091e6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80091d2:	4b1e      	ldr	r3, [pc, #120]	; (800924c <UART_SetConfig+0x904>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	08db      	lsrs	r3, r3, #3
 80091d8:	f003 0303 	and.w	r3, r3, #3
 80091dc:	4a1d      	ldr	r2, [pc, #116]	; (8009254 <UART_SetConfig+0x90c>)
 80091de:	fa22 f303 	lsr.w	r3, r2, r3
 80091e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80091e4:	e00f      	b.n	8009206 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80091e6:	4b1b      	ldr	r3, [pc, #108]	; (8009254 <UART_SetConfig+0x90c>)
 80091e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091ea:	e00c      	b.n	8009206 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80091ec:	4b1a      	ldr	r3, [pc, #104]	; (8009258 <UART_SetConfig+0x910>)
 80091ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091f0:	e009      	b.n	8009206 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091f8:	e005      	b.n	8009206 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80091fa:	2300      	movs	r3, #0
 80091fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009204:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009208:	2b00      	cmp	r3, #0
 800920a:	f000 81ee 	beq.w	80095ea <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009212:	4a12      	ldr	r2, [pc, #72]	; (800925c <UART_SetConfig+0x914>)
 8009214:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009218:	461a      	mov	r2, r3
 800921a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800921c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009220:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	685a      	ldr	r2, [r3, #4]
 8009226:	4613      	mov	r3, r2
 8009228:	005b      	lsls	r3, r3, #1
 800922a:	4413      	add	r3, r2
 800922c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800922e:	429a      	cmp	r2, r3
 8009230:	d305      	bcc.n	800923e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800923a:	429a      	cmp	r2, r3
 800923c:	d910      	bls.n	8009260 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009244:	e1d1      	b.n	80095ea <UART_SetConfig+0xca2>
 8009246:	bf00      	nop
 8009248:	40011c00 	.word	0x40011c00
 800924c:	58024400 	.word	0x58024400
 8009250:	58000c00 	.word	0x58000c00
 8009254:	03d09000 	.word	0x03d09000
 8009258:	003d0900 	.word	0x003d0900
 800925c:	0800b30c 	.word	0x0800b30c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009262:	2200      	movs	r2, #0
 8009264:	60bb      	str	r3, [r7, #8]
 8009266:	60fa      	str	r2, [r7, #12]
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926c:	4ac0      	ldr	r2, [pc, #768]	; (8009570 <UART_SetConfig+0xc28>)
 800926e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009272:	b29b      	uxth	r3, r3
 8009274:	2200      	movs	r2, #0
 8009276:	603b      	str	r3, [r7, #0]
 8009278:	607a      	str	r2, [r7, #4]
 800927a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800927e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009282:	f7f7 f88d 	bl	80003a0 <__aeabi_uldivmod>
 8009286:	4602      	mov	r2, r0
 8009288:	460b      	mov	r3, r1
 800928a:	4610      	mov	r0, r2
 800928c:	4619      	mov	r1, r3
 800928e:	f04f 0200 	mov.w	r2, #0
 8009292:	f04f 0300 	mov.w	r3, #0
 8009296:	020b      	lsls	r3, r1, #8
 8009298:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800929c:	0202      	lsls	r2, r0, #8
 800929e:	6979      	ldr	r1, [r7, #20]
 80092a0:	6849      	ldr	r1, [r1, #4]
 80092a2:	0849      	lsrs	r1, r1, #1
 80092a4:	2000      	movs	r0, #0
 80092a6:	460c      	mov	r4, r1
 80092a8:	4605      	mov	r5, r0
 80092aa:	eb12 0804 	adds.w	r8, r2, r4
 80092ae:	eb43 0905 	adc.w	r9, r3, r5
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	469a      	mov	sl, r3
 80092ba:	4693      	mov	fp, r2
 80092bc:	4652      	mov	r2, sl
 80092be:	465b      	mov	r3, fp
 80092c0:	4640      	mov	r0, r8
 80092c2:	4649      	mov	r1, r9
 80092c4:	f7f7 f86c 	bl	80003a0 <__aeabi_uldivmod>
 80092c8:	4602      	mov	r2, r0
 80092ca:	460b      	mov	r3, r1
 80092cc:	4613      	mov	r3, r2
 80092ce:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80092d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80092d6:	d308      	bcc.n	80092ea <UART_SetConfig+0x9a2>
 80092d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092de:	d204      	bcs.n	80092ea <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092e6:	60da      	str	r2, [r3, #12]
 80092e8:	e17f      	b.n	80095ea <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80092f0:	e17b      	b.n	80095ea <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	69db      	ldr	r3, [r3, #28]
 80092f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092fa:	f040 80bd 	bne.w	8009478 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80092fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009302:	2b20      	cmp	r3, #32
 8009304:	dc48      	bgt.n	8009398 <UART_SetConfig+0xa50>
 8009306:	2b00      	cmp	r3, #0
 8009308:	db7b      	blt.n	8009402 <UART_SetConfig+0xaba>
 800930a:	2b20      	cmp	r3, #32
 800930c:	d879      	bhi.n	8009402 <UART_SetConfig+0xaba>
 800930e:	a201      	add	r2, pc, #4	; (adr r2, 8009314 <UART_SetConfig+0x9cc>)
 8009310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009314:	0800939f 	.word	0x0800939f
 8009318:	080093a7 	.word	0x080093a7
 800931c:	08009403 	.word	0x08009403
 8009320:	08009403 	.word	0x08009403
 8009324:	080093af 	.word	0x080093af
 8009328:	08009403 	.word	0x08009403
 800932c:	08009403 	.word	0x08009403
 8009330:	08009403 	.word	0x08009403
 8009334:	080093bf 	.word	0x080093bf
 8009338:	08009403 	.word	0x08009403
 800933c:	08009403 	.word	0x08009403
 8009340:	08009403 	.word	0x08009403
 8009344:	08009403 	.word	0x08009403
 8009348:	08009403 	.word	0x08009403
 800934c:	08009403 	.word	0x08009403
 8009350:	08009403 	.word	0x08009403
 8009354:	080093cf 	.word	0x080093cf
 8009358:	08009403 	.word	0x08009403
 800935c:	08009403 	.word	0x08009403
 8009360:	08009403 	.word	0x08009403
 8009364:	08009403 	.word	0x08009403
 8009368:	08009403 	.word	0x08009403
 800936c:	08009403 	.word	0x08009403
 8009370:	08009403 	.word	0x08009403
 8009374:	08009403 	.word	0x08009403
 8009378:	08009403 	.word	0x08009403
 800937c:	08009403 	.word	0x08009403
 8009380:	08009403 	.word	0x08009403
 8009384:	08009403 	.word	0x08009403
 8009388:	08009403 	.word	0x08009403
 800938c:	08009403 	.word	0x08009403
 8009390:	08009403 	.word	0x08009403
 8009394:	080093f5 	.word	0x080093f5
 8009398:	2b40      	cmp	r3, #64	; 0x40
 800939a:	d02e      	beq.n	80093fa <UART_SetConfig+0xab2>
 800939c:	e031      	b.n	8009402 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800939e:	f7fb fc6d 	bl	8004c7c <HAL_RCC_GetPCLK1Freq>
 80093a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80093a4:	e033      	b.n	800940e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093a6:	f7fb fc7f 	bl	8004ca8 <HAL_RCC_GetPCLK2Freq>
 80093aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80093ac:	e02f      	b.n	800940e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7fd fb3a 	bl	8006a2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80093b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093bc:	e027      	b.n	800940e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093be:	f107 0318 	add.w	r3, r7, #24
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7fd fc86 	bl	8006cd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093cc:	e01f      	b.n	800940e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093ce:	4b69      	ldr	r3, [pc, #420]	; (8009574 <UART_SetConfig+0xc2c>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f003 0320 	and.w	r3, r3, #32
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d009      	beq.n	80093ee <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80093da:	4b66      	ldr	r3, [pc, #408]	; (8009574 <UART_SetConfig+0xc2c>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	08db      	lsrs	r3, r3, #3
 80093e0:	f003 0303 	and.w	r3, r3, #3
 80093e4:	4a64      	ldr	r2, [pc, #400]	; (8009578 <UART_SetConfig+0xc30>)
 80093e6:	fa22 f303 	lsr.w	r3, r2, r3
 80093ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80093ec:	e00f      	b.n	800940e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80093ee:	4b62      	ldr	r3, [pc, #392]	; (8009578 <UART_SetConfig+0xc30>)
 80093f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093f2:	e00c      	b.n	800940e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80093f4:	4b61      	ldr	r3, [pc, #388]	; (800957c <UART_SetConfig+0xc34>)
 80093f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093f8:	e009      	b.n	800940e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009400:	e005      	b.n	800940e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009402:	2300      	movs	r3, #0
 8009404:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009406:	2301      	movs	r3, #1
 8009408:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800940c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800940e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009410:	2b00      	cmp	r3, #0
 8009412:	f000 80ea 	beq.w	80095ea <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941a:	4a55      	ldr	r2, [pc, #340]	; (8009570 <UART_SetConfig+0xc28>)
 800941c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009420:	461a      	mov	r2, r3
 8009422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009424:	fbb3 f3f2 	udiv	r3, r3, r2
 8009428:	005a      	lsls	r2, r3, #1
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	085b      	lsrs	r3, r3, #1
 8009430:	441a      	add	r2, r3
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	fbb2 f3f3 	udiv	r3, r2, r3
 800943a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800943c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943e:	2b0f      	cmp	r3, #15
 8009440:	d916      	bls.n	8009470 <UART_SetConfig+0xb28>
 8009442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009448:	d212      	bcs.n	8009470 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800944a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944c:	b29b      	uxth	r3, r3
 800944e:	f023 030f 	bic.w	r3, r3, #15
 8009452:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009456:	085b      	lsrs	r3, r3, #1
 8009458:	b29b      	uxth	r3, r3
 800945a:	f003 0307 	and.w	r3, r3, #7
 800945e:	b29a      	uxth	r2, r3
 8009460:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009462:	4313      	orrs	r3, r2
 8009464:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800946c:	60da      	str	r2, [r3, #12]
 800946e:	e0bc      	b.n	80095ea <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009470:	2301      	movs	r3, #1
 8009472:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009476:	e0b8      	b.n	80095ea <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009478:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800947c:	2b20      	cmp	r3, #32
 800947e:	dc4b      	bgt.n	8009518 <UART_SetConfig+0xbd0>
 8009480:	2b00      	cmp	r3, #0
 8009482:	f2c0 8087 	blt.w	8009594 <UART_SetConfig+0xc4c>
 8009486:	2b20      	cmp	r3, #32
 8009488:	f200 8084 	bhi.w	8009594 <UART_SetConfig+0xc4c>
 800948c:	a201      	add	r2, pc, #4	; (adr r2, 8009494 <UART_SetConfig+0xb4c>)
 800948e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009492:	bf00      	nop
 8009494:	0800951f 	.word	0x0800951f
 8009498:	08009527 	.word	0x08009527
 800949c:	08009595 	.word	0x08009595
 80094a0:	08009595 	.word	0x08009595
 80094a4:	0800952f 	.word	0x0800952f
 80094a8:	08009595 	.word	0x08009595
 80094ac:	08009595 	.word	0x08009595
 80094b0:	08009595 	.word	0x08009595
 80094b4:	0800953f 	.word	0x0800953f
 80094b8:	08009595 	.word	0x08009595
 80094bc:	08009595 	.word	0x08009595
 80094c0:	08009595 	.word	0x08009595
 80094c4:	08009595 	.word	0x08009595
 80094c8:	08009595 	.word	0x08009595
 80094cc:	08009595 	.word	0x08009595
 80094d0:	08009595 	.word	0x08009595
 80094d4:	0800954f 	.word	0x0800954f
 80094d8:	08009595 	.word	0x08009595
 80094dc:	08009595 	.word	0x08009595
 80094e0:	08009595 	.word	0x08009595
 80094e4:	08009595 	.word	0x08009595
 80094e8:	08009595 	.word	0x08009595
 80094ec:	08009595 	.word	0x08009595
 80094f0:	08009595 	.word	0x08009595
 80094f4:	08009595 	.word	0x08009595
 80094f8:	08009595 	.word	0x08009595
 80094fc:	08009595 	.word	0x08009595
 8009500:	08009595 	.word	0x08009595
 8009504:	08009595 	.word	0x08009595
 8009508:	08009595 	.word	0x08009595
 800950c:	08009595 	.word	0x08009595
 8009510:	08009595 	.word	0x08009595
 8009514:	08009587 	.word	0x08009587
 8009518:	2b40      	cmp	r3, #64	; 0x40
 800951a:	d037      	beq.n	800958c <UART_SetConfig+0xc44>
 800951c:	e03a      	b.n	8009594 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800951e:	f7fb fbad 	bl	8004c7c <HAL_RCC_GetPCLK1Freq>
 8009522:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009524:	e03c      	b.n	80095a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009526:	f7fb fbbf 	bl	8004ca8 <HAL_RCC_GetPCLK2Freq>
 800952a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800952c:	e038      	b.n	80095a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800952e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009532:	4618      	mov	r0, r3
 8009534:	f7fd fa7a 	bl	8006a2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800953c:	e030      	b.n	80095a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800953e:	f107 0318 	add.w	r3, r7, #24
 8009542:	4618      	mov	r0, r3
 8009544:	f7fd fbc6 	bl	8006cd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800954c:	e028      	b.n	80095a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800954e:	4b09      	ldr	r3, [pc, #36]	; (8009574 <UART_SetConfig+0xc2c>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f003 0320 	and.w	r3, r3, #32
 8009556:	2b00      	cmp	r3, #0
 8009558:	d012      	beq.n	8009580 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800955a:	4b06      	ldr	r3, [pc, #24]	; (8009574 <UART_SetConfig+0xc2c>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	08db      	lsrs	r3, r3, #3
 8009560:	f003 0303 	and.w	r3, r3, #3
 8009564:	4a04      	ldr	r2, [pc, #16]	; (8009578 <UART_SetConfig+0xc30>)
 8009566:	fa22 f303 	lsr.w	r3, r2, r3
 800956a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800956c:	e018      	b.n	80095a0 <UART_SetConfig+0xc58>
 800956e:	bf00      	nop
 8009570:	0800b30c 	.word	0x0800b30c
 8009574:	58024400 	.word	0x58024400
 8009578:	03d09000 	.word	0x03d09000
 800957c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009580:	4b24      	ldr	r3, [pc, #144]	; (8009614 <UART_SetConfig+0xccc>)
 8009582:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009584:	e00c      	b.n	80095a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009586:	4b24      	ldr	r3, [pc, #144]	; (8009618 <UART_SetConfig+0xcd0>)
 8009588:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800958a:	e009      	b.n	80095a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800958c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009590:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009592:	e005      	b.n	80095a0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009594:	2300      	movs	r3, #0
 8009596:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009598:	2301      	movs	r3, #1
 800959a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800959e:	bf00      	nop
    }

    if (pclk != 0U)
 80095a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d021      	beq.n	80095ea <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095aa:	4a1c      	ldr	r2, [pc, #112]	; (800961c <UART_SetConfig+0xcd4>)
 80095ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095b0:	461a      	mov	r2, r3
 80095b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095b4:	fbb3 f2f2 	udiv	r2, r3, r2
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	085b      	lsrs	r3, r3, #1
 80095be:	441a      	add	r2, r3
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80095c8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095cc:	2b0f      	cmp	r3, #15
 80095ce:	d909      	bls.n	80095e4 <UART_SetConfig+0xc9c>
 80095d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095d6:	d205      	bcs.n	80095e4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80095d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095da:	b29a      	uxth	r2, r3
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	60da      	str	r2, [r3, #12]
 80095e2:	e002      	b.n	80095ea <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	2201      	movs	r2, #1
 80095ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	2201      	movs	r2, #1
 80095f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	2200      	movs	r2, #0
 80095fe:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	2200      	movs	r2, #0
 8009604:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009606:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800960a:	4618      	mov	r0, r3
 800960c:	3748      	adds	r7, #72	; 0x48
 800960e:	46bd      	mov	sp, r7
 8009610:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009614:	03d09000 	.word	0x03d09000
 8009618:	003d0900 	.word	0x003d0900
 800961c:	0800b30c 	.word	0x0800b30c

08009620 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009620:	b480      	push	{r7}
 8009622:	b083      	sub	sp, #12
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800962c:	f003 0301 	and.w	r3, r3, #1
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00a      	beq.n	800964a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	685b      	ldr	r3, [r3, #4]
 800963a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	430a      	orrs	r2, r1
 8009648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800964e:	f003 0302 	and.w	r3, r3, #2
 8009652:	2b00      	cmp	r3, #0
 8009654:	d00a      	beq.n	800966c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	430a      	orrs	r2, r1
 800966a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009670:	f003 0304 	and.w	r3, r3, #4
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00a      	beq.n	800968e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	430a      	orrs	r2, r1
 800968c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009692:	f003 0308 	and.w	r3, r3, #8
 8009696:	2b00      	cmp	r3, #0
 8009698:	d00a      	beq.n	80096b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	430a      	orrs	r2, r1
 80096ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096b4:	f003 0310 	and.w	r3, r3, #16
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00a      	beq.n	80096d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	430a      	orrs	r2, r1
 80096d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d6:	f003 0320 	and.w	r3, r3, #32
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d00a      	beq.n	80096f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	430a      	orrs	r2, r1
 80096f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d01a      	beq.n	8009736 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	430a      	orrs	r2, r1
 8009714:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800971a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800971e:	d10a      	bne.n	8009736 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	430a      	orrs	r2, r1
 8009734:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800973a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800973e:	2b00      	cmp	r3, #0
 8009740:	d00a      	beq.n	8009758 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	430a      	orrs	r2, r1
 8009756:	605a      	str	r2, [r3, #4]
  }
}
 8009758:	bf00      	nop
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b098      	sub	sp, #96	; 0x60
 8009768:	af02      	add	r7, sp, #8
 800976a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009774:	f7f8 f87e 	bl	8001874 <HAL_GetTick>
 8009778:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f003 0308 	and.w	r3, r3, #8
 8009784:	2b08      	cmp	r3, #8
 8009786:	d12f      	bne.n	80097e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009788:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800978c:	9300      	str	r3, [sp, #0]
 800978e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009790:	2200      	movs	r2, #0
 8009792:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f88e 	bl	80098b8 <UART_WaitOnFlagUntilTimeout>
 800979c:	4603      	mov	r3, r0
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d022      	beq.n	80097e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097aa:	e853 3f00 	ldrex	r3, [r3]
 80097ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80097b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097b6:	653b      	str	r3, [r7, #80]	; 0x50
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	461a      	mov	r2, r3
 80097be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097c0:	647b      	str	r3, [r7, #68]	; 0x44
 80097c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80097c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097c8:	e841 2300 	strex	r3, r2, [r1]
 80097cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80097ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d1e6      	bne.n	80097a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2220      	movs	r2, #32
 80097d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097e4:	2303      	movs	r3, #3
 80097e6:	e063      	b.n	80098b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f003 0304 	and.w	r3, r3, #4
 80097f2:	2b04      	cmp	r3, #4
 80097f4:	d149      	bne.n	800988a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097fe:	2200      	movs	r2, #0
 8009800:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 f857 	bl	80098b8 <UART_WaitOnFlagUntilTimeout>
 800980a:	4603      	mov	r3, r0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d03c      	beq.n	800988a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009818:	e853 3f00 	ldrex	r3, [r3]
 800981c:	623b      	str	r3, [r7, #32]
   return(result);
 800981e:	6a3b      	ldr	r3, [r7, #32]
 8009820:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009824:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	461a      	mov	r2, r3
 800982c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800982e:	633b      	str	r3, [r7, #48]	; 0x30
 8009830:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009832:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009836:	e841 2300 	strex	r3, r2, [r1]
 800983a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800983c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983e:	2b00      	cmp	r3, #0
 8009840:	d1e6      	bne.n	8009810 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	3308      	adds	r3, #8
 8009848:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	e853 3f00 	ldrex	r3, [r3]
 8009850:	60fb      	str	r3, [r7, #12]
   return(result);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f023 0301 	bic.w	r3, r3, #1
 8009858:	64bb      	str	r3, [r7, #72]	; 0x48
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	3308      	adds	r3, #8
 8009860:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009862:	61fa      	str	r2, [r7, #28]
 8009864:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009866:	69b9      	ldr	r1, [r7, #24]
 8009868:	69fa      	ldr	r2, [r7, #28]
 800986a:	e841 2300 	strex	r3, r2, [r1]
 800986e:	617b      	str	r3, [r7, #20]
   return(result);
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d1e5      	bne.n	8009842 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2220      	movs	r2, #32
 800987a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009886:	2303      	movs	r3, #3
 8009888:	e012      	b.n	80098b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2220      	movs	r2, #32
 800988e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2220      	movs	r2, #32
 8009896:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80098ae:	2300      	movs	r3, #0
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3758      	adds	r7, #88	; 0x58
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	603b      	str	r3, [r7, #0]
 80098c4:	4613      	mov	r3, r2
 80098c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098c8:	e049      	b.n	800995e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098d0:	d045      	beq.n	800995e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098d2:	f7f7 ffcf 	bl	8001874 <HAL_GetTick>
 80098d6:	4602      	mov	r2, r0
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	1ad3      	subs	r3, r2, r3
 80098dc:	69ba      	ldr	r2, [r7, #24]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d302      	bcc.n	80098e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d101      	bne.n	80098ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80098e8:	2303      	movs	r3, #3
 80098ea:	e048      	b.n	800997e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f003 0304 	and.w	r3, r3, #4
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d031      	beq.n	800995e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	69db      	ldr	r3, [r3, #28]
 8009900:	f003 0308 	and.w	r3, r3, #8
 8009904:	2b08      	cmp	r3, #8
 8009906:	d110      	bne.n	800992a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	2208      	movs	r2, #8
 800990e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009910:	68f8      	ldr	r0, [r7, #12]
 8009912:	f000 f95b 	bl	8009bcc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2208      	movs	r2, #8
 800991a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2200      	movs	r2, #0
 8009922:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8009926:	2301      	movs	r3, #1
 8009928:	e029      	b.n	800997e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	69db      	ldr	r3, [r3, #28]
 8009930:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009934:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009938:	d111      	bne.n	800995e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009942:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	f000 f941 	bl	8009bcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2220      	movs	r2, #32
 800994e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2200      	movs	r2, #0
 8009956:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800995a:	2303      	movs	r3, #3
 800995c:	e00f      	b.n	800997e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	69da      	ldr	r2, [r3, #28]
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	4013      	ands	r3, r2
 8009968:	68ba      	ldr	r2, [r7, #8]
 800996a:	429a      	cmp	r2, r3
 800996c:	bf0c      	ite	eq
 800996e:	2301      	moveq	r3, #1
 8009970:	2300      	movne	r3, #0
 8009972:	b2db      	uxtb	r3, r3
 8009974:	461a      	mov	r2, r3
 8009976:	79fb      	ldrb	r3, [r7, #7]
 8009978:	429a      	cmp	r2, r3
 800997a:	d0a6      	beq.n	80098ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	4618      	mov	r0, r3
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
	...

08009988 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009988:	b480      	push	{r7}
 800998a:	b0a3      	sub	sp, #140	; 0x8c
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	4613      	mov	r3, r2
 8009994:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	68ba      	ldr	r2, [r7, #8]
 800999a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	88fa      	ldrh	r2, [r7, #6]
 80099a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	88fa      	ldrh	r2, [r7, #6]
 80099a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2200      	movs	r2, #0
 80099b0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099ba:	d10e      	bne.n	80099da <UART_Start_Receive_IT+0x52>
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d105      	bne.n	80099d0 <UART_Start_Receive_IT+0x48>
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80099ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80099ce:	e02d      	b.n	8009a2c <UART_Start_Receive_IT+0xa4>
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	22ff      	movs	r2, #255	; 0xff
 80099d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80099d8:	e028      	b.n	8009a2c <UART_Start_Receive_IT+0xa4>
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	689b      	ldr	r3, [r3, #8]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d10d      	bne.n	80099fe <UART_Start_Receive_IT+0x76>
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d104      	bne.n	80099f4 <UART_Start_Receive_IT+0x6c>
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	22ff      	movs	r2, #255	; 0xff
 80099ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80099f2:	e01b      	b.n	8009a2c <UART_Start_Receive_IT+0xa4>
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	227f      	movs	r2, #127	; 0x7f
 80099f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80099fc:	e016      	b.n	8009a2c <UART_Start_Receive_IT+0xa4>
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a06:	d10d      	bne.n	8009a24 <UART_Start_Receive_IT+0x9c>
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d104      	bne.n	8009a1a <UART_Start_Receive_IT+0x92>
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	227f      	movs	r2, #127	; 0x7f
 8009a14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009a18:	e008      	b.n	8009a2c <UART_Start_Receive_IT+0xa4>
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	223f      	movs	r2, #63	; 0x3f
 8009a1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009a22:	e003      	b.n	8009a2c <UART_Start_Receive_IT+0xa4>
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2222      	movs	r2, #34	; 0x22
 8009a38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	3308      	adds	r3, #8
 8009a42:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a46:	e853 3f00 	ldrex	r3, [r3]
 8009a4a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009a4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a4e:	f043 0301 	orr.w	r3, r3, #1
 8009a52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	3308      	adds	r3, #8
 8009a5c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009a60:	673a      	str	r2, [r7, #112]	; 0x70
 8009a62:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a64:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009a66:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009a68:	e841 2300 	strex	r3, r2, [r1]
 8009a6c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8009a6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d1e3      	bne.n	8009a3c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a7c:	d14f      	bne.n	8009b1e <UART_Start_Receive_IT+0x196>
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009a84:	88fa      	ldrh	r2, [r7, #6]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d349      	bcc.n	8009b1e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a92:	d107      	bne.n	8009aa4 <UART_Start_Receive_IT+0x11c>
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	691b      	ldr	r3, [r3, #16]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d103      	bne.n	8009aa4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	4a47      	ldr	r2, [pc, #284]	; (8009bbc <UART_Start_Receive_IT+0x234>)
 8009aa0:	675a      	str	r2, [r3, #116]	; 0x74
 8009aa2:	e002      	b.n	8009aaa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	4a46      	ldr	r2, [pc, #280]	; (8009bc0 <UART_Start_Receive_IT+0x238>)
 8009aa8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d01a      	beq.n	8009ae8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009aba:	e853 3f00 	ldrex	r3, [r3]
 8009abe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ac6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	461a      	mov	r2, r3
 8009ad0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ad6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009ada:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009adc:	e841 2300 	strex	r3, r2, [r1]
 8009ae0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d1e4      	bne.n	8009ab2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	3308      	adds	r3, #8
 8009aee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009af2:	e853 3f00 	ldrex	r3, [r3]
 8009af6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009afe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	3308      	adds	r3, #8
 8009b06:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009b08:	64ba      	str	r2, [r7, #72]	; 0x48
 8009b0a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009b0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b10:	e841 2300 	strex	r3, r2, [r1]
 8009b14:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d1e5      	bne.n	8009ae8 <UART_Start_Receive_IT+0x160>
 8009b1c:	e046      	b.n	8009bac <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	689b      	ldr	r3, [r3, #8]
 8009b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b26:	d107      	bne.n	8009b38 <UART_Start_Receive_IT+0x1b0>
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	691b      	ldr	r3, [r3, #16]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d103      	bne.n	8009b38 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	4a24      	ldr	r2, [pc, #144]	; (8009bc4 <UART_Start_Receive_IT+0x23c>)
 8009b34:	675a      	str	r2, [r3, #116]	; 0x74
 8009b36:	e002      	b.n	8009b3e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	4a23      	ldr	r2, [pc, #140]	; (8009bc8 <UART_Start_Receive_IT+0x240>)
 8009b3c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	691b      	ldr	r3, [r3, #16]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d019      	beq.n	8009b7a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4e:	e853 3f00 	ldrex	r3, [r3]
 8009b52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b56:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009b5a:	677b      	str	r3, [r7, #116]	; 0x74
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	461a      	mov	r2, r3
 8009b62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b64:	637b      	str	r3, [r7, #52]	; 0x34
 8009b66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b6c:	e841 2300 	strex	r3, r2, [r1]
 8009b70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d1e6      	bne.n	8009b46 <UART_Start_Receive_IT+0x1be>
 8009b78:	e018      	b.n	8009bac <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	e853 3f00 	ldrex	r3, [r3]
 8009b86:	613b      	str	r3, [r7, #16]
   return(result);
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	f043 0320 	orr.w	r3, r3, #32
 8009b8e:	67bb      	str	r3, [r7, #120]	; 0x78
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	461a      	mov	r2, r3
 8009b96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b98:	623b      	str	r3, [r7, #32]
 8009b9a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9c:	69f9      	ldr	r1, [r7, #28]
 8009b9e:	6a3a      	ldr	r2, [r7, #32]
 8009ba0:	e841 2300 	strex	r3, r2, [r1]
 8009ba4:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d1e6      	bne.n	8009b7a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009bac:	2300      	movs	r3, #0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	378c      	adds	r7, #140	; 0x8c
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr
 8009bba:	bf00      	nop
 8009bbc:	0800a3ed 	.word	0x0800a3ed
 8009bc0:	0800a08d 	.word	0x0800a08d
 8009bc4:	08009ed5 	.word	0x08009ed5
 8009bc8:	08009d1d 	.word	0x08009d1d

08009bcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b095      	sub	sp, #84	; 0x54
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bdc:	e853 3f00 	ldrex	r3, [r3]
 8009be0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009be8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	461a      	mov	r2, r3
 8009bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bf2:	643b      	str	r3, [r7, #64]	; 0x40
 8009bf4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009bf8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009bfa:	e841 2300 	strex	r3, r2, [r1]
 8009bfe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d1e6      	bne.n	8009bd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	3308      	adds	r3, #8
 8009c0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c0e:	6a3b      	ldr	r3, [r7, #32]
 8009c10:	e853 3f00 	ldrex	r3, [r3]
 8009c14:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c16:	69fa      	ldr	r2, [r7, #28]
 8009c18:	4b1e      	ldr	r3, [pc, #120]	; (8009c94 <UART_EndRxTransfer+0xc8>)
 8009c1a:	4013      	ands	r3, r2
 8009c1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	3308      	adds	r3, #8
 8009c24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c2e:	e841 2300 	strex	r3, r2, [r1]
 8009c32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d1e5      	bne.n	8009c06 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d118      	bne.n	8009c74 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	e853 3f00 	ldrex	r3, [r3]
 8009c4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	f023 0310 	bic.w	r3, r3, #16
 8009c56:	647b      	str	r3, [r7, #68]	; 0x44
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c60:	61bb      	str	r3, [r7, #24]
 8009c62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c64:	6979      	ldr	r1, [r7, #20]
 8009c66:	69ba      	ldr	r2, [r7, #24]
 8009c68:	e841 2300 	strex	r3, r2, [r1]
 8009c6c:	613b      	str	r3, [r7, #16]
   return(result);
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d1e6      	bne.n	8009c42 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2220      	movs	r2, #32
 8009c78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2200      	movs	r2, #0
 8009c86:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009c88:	bf00      	nop
 8009c8a:	3754      	adds	r7, #84	; 0x54
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr
 8009c94:	effffffe 	.word	0xeffffffe

08009c98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ca4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009cb6:	68f8      	ldr	r0, [r7, #12]
 8009cb8:	f7fe fe30 	bl	800891c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009cbc:	bf00      	nop
 8009cbe:	3710      	adds	r7, #16
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b088      	sub	sp, #32
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	e853 3f00 	ldrex	r3, [r3]
 8009cd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ce0:	61fb      	str	r3, [r7, #28]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	61bb      	str	r3, [r7, #24]
 8009cec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cee:	6979      	ldr	r1, [r7, #20]
 8009cf0:	69ba      	ldr	r2, [r7, #24]
 8009cf2:	e841 2300 	strex	r3, r2, [r1]
 8009cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d1e6      	bne.n	8009ccc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2220      	movs	r2, #32
 8009d02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f7fe fdfb 	bl	8008908 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d12:	bf00      	nop
 8009d14:	3720      	adds	r7, #32
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
	...

08009d1c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b09c      	sub	sp, #112	; 0x70
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009d2a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d34:	2b22      	cmp	r3, #34	; 0x22
 8009d36:	f040 80be 	bne.w	8009eb6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d40:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009d44:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009d48:	b2d9      	uxtb	r1, r3
 8009d4a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009d4e:	b2da      	uxtb	r2, r3
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d54:	400a      	ands	r2, r1
 8009d56:	b2d2      	uxtb	r2, r2
 8009d58:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d5e:	1c5a      	adds	r2, r3, #1
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	f040 80a1 	bne.w	8009ec6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d8c:	e853 3f00 	ldrex	r3, [r3]
 8009d90:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d98:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	461a      	mov	r2, r3
 8009da0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009da2:	65bb      	str	r3, [r7, #88]	; 0x58
 8009da4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009da8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009daa:	e841 2300 	strex	r3, r2, [r1]
 8009dae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d1e6      	bne.n	8009d84 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	3308      	adds	r3, #8
 8009dbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc0:	e853 3f00 	ldrex	r3, [r3]
 8009dc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dc8:	f023 0301 	bic.w	r3, r3, #1
 8009dcc:	667b      	str	r3, [r7, #100]	; 0x64
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	3308      	adds	r3, #8
 8009dd4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009dd6:	647a      	str	r2, [r7, #68]	; 0x44
 8009dd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009ddc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009dde:	e841 2300 	strex	r3, r2, [r1]
 8009de2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d1e5      	bne.n	8009db6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2220      	movs	r2, #32
 8009dee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2200      	movs	r2, #0
 8009df6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a33      	ldr	r2, [pc, #204]	; (8009ed0 <UART_RxISR_8BIT+0x1b4>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d01f      	beq.n	8009e48 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d018      	beq.n	8009e48 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1e:	e853 3f00 	ldrex	r3, [r3]
 8009e22:	623b      	str	r3, [r7, #32]
   return(result);
 8009e24:	6a3b      	ldr	r3, [r7, #32]
 8009e26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009e2a:	663b      	str	r3, [r7, #96]	; 0x60
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	461a      	mov	r2, r3
 8009e32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e34:	633b      	str	r3, [r7, #48]	; 0x30
 8009e36:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e3c:	e841 2300 	strex	r3, r2, [r1]
 8009e40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d1e6      	bne.n	8009e16 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d12e      	bne.n	8009eae <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	e853 3f00 	ldrex	r3, [r3]
 8009e62:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f023 0310 	bic.w	r3, r3, #16
 8009e6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	461a      	mov	r2, r3
 8009e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e74:	61fb      	str	r3, [r7, #28]
 8009e76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e78:	69b9      	ldr	r1, [r7, #24]
 8009e7a:	69fa      	ldr	r2, [r7, #28]
 8009e7c:	e841 2300 	strex	r3, r2, [r1]
 8009e80:	617b      	str	r3, [r7, #20]
   return(result);
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d1e6      	bne.n	8009e56 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	69db      	ldr	r3, [r3, #28]
 8009e8e:	f003 0310 	and.w	r3, r3, #16
 8009e92:	2b10      	cmp	r3, #16
 8009e94:	d103      	bne.n	8009e9e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	2210      	movs	r2, #16
 8009e9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f7fe fd42 	bl	8008930 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009eac:	e00b      	b.n	8009ec6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f7f6 fc3c 	bl	800072c <HAL_UART_RxCpltCallback>
}
 8009eb4:	e007      	b.n	8009ec6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	699a      	ldr	r2, [r3, #24]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f042 0208 	orr.w	r2, r2, #8
 8009ec4:	619a      	str	r2, [r3, #24]
}
 8009ec6:	bf00      	nop
 8009ec8:	3770      	adds	r7, #112	; 0x70
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	58000c00 	.word	0x58000c00

08009ed4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b09c      	sub	sp, #112	; 0x70
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009ee2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009eec:	2b22      	cmp	r3, #34	; 0x22
 8009eee:	f040 80be 	bne.w	800a06e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f00:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009f02:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009f06:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009f0a:	4013      	ands	r3, r2
 8009f0c:	b29a      	uxth	r2, r3
 8009f0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f10:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f16:	1c9a      	adds	r2, r3, #2
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	3b01      	subs	r3, #1
 8009f26:	b29a      	uxth	r2, r3
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	f040 80a1 	bne.w	800a07e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f44:	e853 3f00 	ldrex	r3, [r3]
 8009f48:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f50:	667b      	str	r3, [r7, #100]	; 0x64
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	461a      	mov	r2, r3
 8009f58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f5a:	657b      	str	r3, [r7, #84]	; 0x54
 8009f5c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f62:	e841 2300 	strex	r3, r2, [r1]
 8009f66:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d1e6      	bne.n	8009f3c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	3308      	adds	r3, #8
 8009f74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f78:	e853 3f00 	ldrex	r3, [r3]
 8009f7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f80:	f023 0301 	bic.w	r3, r3, #1
 8009f84:	663b      	str	r3, [r7, #96]	; 0x60
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	3308      	adds	r3, #8
 8009f8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009f8e:	643a      	str	r2, [r7, #64]	; 0x40
 8009f90:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f96:	e841 2300 	strex	r3, r2, [r1]
 8009f9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d1e5      	bne.n	8009f6e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2220      	movs	r2, #32
 8009fa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a33      	ldr	r2, [pc, #204]	; (800a088 <UART_RxISR_16BIT+0x1b4>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d01f      	beq.n	800a000 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d018      	beq.n	800a000 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd4:	6a3b      	ldr	r3, [r7, #32]
 8009fd6:	e853 3f00 	ldrex	r3, [r3]
 8009fda:	61fb      	str	r3, [r7, #28]
   return(result);
 8009fdc:	69fb      	ldr	r3, [r7, #28]
 8009fde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009fe2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	461a      	mov	r2, r3
 8009fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fee:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ff4:	e841 2300 	strex	r3, r2, [r1]
 8009ff8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d1e6      	bne.n	8009fce <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a004:	2b01      	cmp	r3, #1
 800a006:	d12e      	bne.n	800a066 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2200      	movs	r2, #0
 800a00c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	e853 3f00 	ldrex	r3, [r3]
 800a01a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	f023 0310 	bic.w	r3, r3, #16
 800a022:	65bb      	str	r3, [r7, #88]	; 0x58
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	461a      	mov	r2, r3
 800a02a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a02c:	61bb      	str	r3, [r7, #24]
 800a02e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a030:	6979      	ldr	r1, [r7, #20]
 800a032:	69ba      	ldr	r2, [r7, #24]
 800a034:	e841 2300 	strex	r3, r2, [r1]
 800a038:	613b      	str	r3, [r7, #16]
   return(result);
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d1e6      	bne.n	800a00e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	69db      	ldr	r3, [r3, #28]
 800a046:	f003 0310 	and.w	r3, r3, #16
 800a04a:	2b10      	cmp	r3, #16
 800a04c:	d103      	bne.n	800a056 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	2210      	movs	r2, #16
 800a054:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a05c:	4619      	mov	r1, r3
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f7fe fc66 	bl	8008930 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a064:	e00b      	b.n	800a07e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f7f6 fb60 	bl	800072c <HAL_UART_RxCpltCallback>
}
 800a06c:	e007      	b.n	800a07e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	699a      	ldr	r2, [r3, #24]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f042 0208 	orr.w	r2, r2, #8
 800a07c:	619a      	str	r2, [r3, #24]
}
 800a07e:	bf00      	nop
 800a080:	3770      	adds	r7, #112	; 0x70
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	58000c00 	.word	0x58000c00

0800a08c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b0ac      	sub	sp, #176	; 0xb0
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a09a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	69db      	ldr	r3, [r3, #28]
 800a0a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0c2:	2b22      	cmp	r3, #34	; 0x22
 800a0c4:	f040 8180 	bne.w	800a3c8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a0ce:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a0d2:	e123      	b.n	800a31c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0da:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a0de:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800a0e2:	b2d9      	uxtb	r1, r3
 800a0e4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a0e8:	b2da      	uxtb	r2, r3
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0ee:	400a      	ands	r2, r1
 800a0f0:	b2d2      	uxtb	r2, r2
 800a0f2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0f8:	1c5a      	adds	r2, r3, #1
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a104:	b29b      	uxth	r3, r3
 800a106:	3b01      	subs	r3, #1
 800a108:	b29a      	uxth	r2, r3
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	69db      	ldr	r3, [r3, #28]
 800a116:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a11a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a11e:	f003 0307 	and.w	r3, r3, #7
 800a122:	2b00      	cmp	r3, #0
 800a124:	d053      	beq.n	800a1ce <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a126:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a12a:	f003 0301 	and.w	r3, r3, #1
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d011      	beq.n	800a156 <UART_RxISR_8BIT_FIFOEN+0xca>
 800a132:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d00b      	beq.n	800a156 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2201      	movs	r2, #1
 800a144:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a14c:	f043 0201 	orr.w	r2, r3, #1
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a15a:	f003 0302 	and.w	r3, r3, #2
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d011      	beq.n	800a186 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a166:	f003 0301 	and.w	r3, r3, #1
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00b      	beq.n	800a186 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	2202      	movs	r2, #2
 800a174:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a17c:	f043 0204 	orr.w	r2, r3, #4
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a186:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a18a:	f003 0304 	and.w	r3, r3, #4
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d011      	beq.n	800a1b6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a192:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a196:	f003 0301 	and.w	r3, r3, #1
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d00b      	beq.n	800a1b6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2204      	movs	r2, #4
 800a1a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1ac:	f043 0202 	orr.w	r2, r3, #2
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d006      	beq.n	800a1ce <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f7fe fbab 	bl	800891c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	f040 80a0 	bne.w	800a31c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a1e4:	e853 3f00 	ldrex	r3, [r3]
 800a1e8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800a1ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a1fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a200:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a202:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800a204:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a206:	e841 2300 	strex	r3, r2, [r1]
 800a20a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800a20c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d1e4      	bne.n	800a1dc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	3308      	adds	r3, #8
 800a218:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a21c:	e853 3f00 	ldrex	r3, [r3]
 800a220:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800a222:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a224:	4b6e      	ldr	r3, [pc, #440]	; (800a3e0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800a226:	4013      	ands	r3, r2
 800a228:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	3308      	adds	r3, #8
 800a232:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a236:	66ba      	str	r2, [r7, #104]	; 0x68
 800a238:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a23a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a23c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a23e:	e841 2300 	strex	r3, r2, [r1]
 800a242:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a244:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a246:	2b00      	cmp	r3, #0
 800a248:	d1e3      	bne.n	800a212 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2220      	movs	r2, #32
 800a24e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2200      	movs	r2, #0
 800a256:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a60      	ldr	r2, [pc, #384]	; (800a3e4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d021      	beq.n	800a2ac <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a272:	2b00      	cmp	r3, #0
 800a274:	d01a      	beq.n	800a2ac <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a27c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a27e:	e853 3f00 	ldrex	r3, [r3]
 800a282:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a286:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a28a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	461a      	mov	r2, r3
 800a294:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a298:	657b      	str	r3, [r7, #84]	; 0x54
 800a29a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a29c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a29e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a2a0:	e841 2300 	strex	r3, r2, [r1]
 800a2a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a2a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1e4      	bne.n	800a276 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d130      	bne.n	800a316 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2c2:	e853 3f00 	ldrex	r3, [r3]
 800a2c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ca:	f023 0310 	bic.w	r3, r3, #16
 800a2ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a2dc:	643b      	str	r3, [r7, #64]	; 0x40
 800a2de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a2e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2e4:	e841 2300 	strex	r3, r2, [r1]
 800a2e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d1e4      	bne.n	800a2ba <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	69db      	ldr	r3, [r3, #28]
 800a2f6:	f003 0310 	and.w	r3, r3, #16
 800a2fa:	2b10      	cmp	r3, #16
 800a2fc:	d103      	bne.n	800a306 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2210      	movs	r2, #16
 800a304:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a30c:	4619      	mov	r1, r3
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f7fe fb0e 	bl	8008930 <HAL_UARTEx_RxEventCallback>
 800a314:	e002      	b.n	800a31c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f7f6 fa08 	bl	800072c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a31c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800a320:	2b00      	cmp	r3, #0
 800a322:	d006      	beq.n	800a332 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800a324:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a328:	f003 0320 	and.w	r3, r3, #32
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	f47f aed1 	bne.w	800a0d4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a338:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a33c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a340:	2b00      	cmp	r3, #0
 800a342:	d049      	beq.n	800a3d8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a34a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800a34e:	429a      	cmp	r2, r3
 800a350:	d242      	bcs.n	800a3d8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	3308      	adds	r3, #8
 800a358:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a35a:	6a3b      	ldr	r3, [r7, #32]
 800a35c:	e853 3f00 	ldrex	r3, [r3]
 800a360:	61fb      	str	r3, [r7, #28]
   return(result);
 800a362:	69fb      	ldr	r3, [r7, #28]
 800a364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a368:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	3308      	adds	r3, #8
 800a372:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a376:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a378:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a37a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a37c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a37e:	e841 2300 	strex	r3, r2, [r1]
 800a382:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a386:	2b00      	cmp	r3, #0
 800a388:	d1e3      	bne.n	800a352 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	4a16      	ldr	r2, [pc, #88]	; (800a3e8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800a38e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	e853 3f00 	ldrex	r3, [r3]
 800a39c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	f043 0320 	orr.w	r3, r3, #32
 800a3a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a3b2:	61bb      	str	r3, [r7, #24]
 800a3b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b6:	6979      	ldr	r1, [r7, #20]
 800a3b8:	69ba      	ldr	r2, [r7, #24]
 800a3ba:	e841 2300 	strex	r3, r2, [r1]
 800a3be:	613b      	str	r3, [r7, #16]
   return(result);
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d1e4      	bne.n	800a390 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a3c6:	e007      	b.n	800a3d8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	699a      	ldr	r2, [r3, #24]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f042 0208 	orr.w	r2, r2, #8
 800a3d6:	619a      	str	r2, [r3, #24]
}
 800a3d8:	bf00      	nop
 800a3da:	37b0      	adds	r7, #176	; 0xb0
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	effffffe 	.word	0xeffffffe
 800a3e4:	58000c00 	.word	0x58000c00
 800a3e8:	08009d1d 	.word	0x08009d1d

0800a3ec <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b0ae      	sub	sp, #184	; 0xb8
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a3fa:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	69db      	ldr	r3, [r3, #28]
 800a404:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a422:	2b22      	cmp	r3, #34	; 0x22
 800a424:	f040 8184 	bne.w	800a730 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a42e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a432:	e127      	b.n	800a684 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a43a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a442:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a446:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800a44a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800a44e:	4013      	ands	r3, r2
 800a450:	b29a      	uxth	r2, r3
 800a452:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a456:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a45c:	1c9a      	adds	r2, r3, #2
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a468:	b29b      	uxth	r3, r3
 800a46a:	3b01      	subs	r3, #1
 800a46c:	b29a      	uxth	r2, r3
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	69db      	ldr	r3, [r3, #28]
 800a47a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a47e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a482:	f003 0307 	and.w	r3, r3, #7
 800a486:	2b00      	cmp	r3, #0
 800a488:	d053      	beq.n	800a532 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a48a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a48e:	f003 0301 	and.w	r3, r3, #1
 800a492:	2b00      	cmp	r3, #0
 800a494:	d011      	beq.n	800a4ba <UART_RxISR_16BIT_FIFOEN+0xce>
 800a496:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a49a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d00b      	beq.n	800a4ba <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4b0:	f043 0201 	orr.w	r2, r3, #1
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a4ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a4be:	f003 0302 	and.w	r3, r3, #2
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d011      	beq.n	800a4ea <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a4c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a4ca:	f003 0301 	and.w	r3, r3, #1
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d00b      	beq.n	800a4ea <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	2202      	movs	r2, #2
 800a4d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4e0:	f043 0204 	orr.w	r2, r3, #4
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a4ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a4ee:	f003 0304 	and.w	r3, r3, #4
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d011      	beq.n	800a51a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a4f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a4fa:	f003 0301 	and.w	r3, r3, #1
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d00b      	beq.n	800a51a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2204      	movs	r2, #4
 800a508:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a510:	f043 0202 	orr.w	r2, r3, #2
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a520:	2b00      	cmp	r3, #0
 800a522:	d006      	beq.n	800a532 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f7fe f9f9 	bl	800891c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a538:	b29b      	uxth	r3, r3
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	f040 80a2 	bne.w	800a684 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a546:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a548:	e853 3f00 	ldrex	r3, [r3]
 800a54c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a54e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a554:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	461a      	mov	r2, r3
 800a55e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a562:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a566:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a568:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a56a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a56e:	e841 2300 	strex	r3, r2, [r1]
 800a572:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a574:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a576:	2b00      	cmp	r3, #0
 800a578:	d1e2      	bne.n	800a540 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	3308      	adds	r3, #8
 800a580:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a582:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a584:	e853 3f00 	ldrex	r3, [r3]
 800a588:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a58a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a58c:	4b6e      	ldr	r3, [pc, #440]	; (800a748 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800a58e:	4013      	ands	r3, r2
 800a590:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	3308      	adds	r3, #8
 800a59a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a59e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a5a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a5a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a5a6:	e841 2300 	strex	r3, r2, [r1]
 800a5aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a5ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d1e3      	bne.n	800a57a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2220      	movs	r2, #32
 800a5b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a60      	ldr	r2, [pc, #384]	; (800a74c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d021      	beq.n	800a614 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d01a      	beq.n	800a614 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5e6:	e853 3f00 	ldrex	r3, [r3]
 800a5ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a5ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a5f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a600:	65bb      	str	r3, [r7, #88]	; 0x58
 800a602:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a604:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a606:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a608:	e841 2300 	strex	r3, r2, [r1]
 800a60c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a60e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a610:	2b00      	cmp	r3, #0
 800a612:	d1e4      	bne.n	800a5de <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d130      	bne.n	800a67e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62a:	e853 3f00 	ldrex	r3, [r3]
 800a62e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a632:	f023 0310 	bic.w	r3, r3, #16
 800a636:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	461a      	mov	r2, r3
 800a640:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a644:	647b      	str	r3, [r7, #68]	; 0x44
 800a646:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a648:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a64a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a64c:	e841 2300 	strex	r3, r2, [r1]
 800a650:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a654:	2b00      	cmp	r3, #0
 800a656:	d1e4      	bne.n	800a622 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	69db      	ldr	r3, [r3, #28]
 800a65e:	f003 0310 	and.w	r3, r3, #16
 800a662:	2b10      	cmp	r3, #16
 800a664:	d103      	bne.n	800a66e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	2210      	movs	r2, #16
 800a66c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a674:	4619      	mov	r1, r3
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f7fe f95a 	bl	8008930 <HAL_UARTEx_RxEventCallback>
 800a67c:	e002      	b.n	800a684 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f7f6 f854 	bl	800072c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a684:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d006      	beq.n	800a69a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800a68c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a690:	f003 0320 	and.w	r3, r3, #32
 800a694:	2b00      	cmp	r3, #0
 800a696:	f47f aecd 	bne.w	800a434 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a6a0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a6a4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d049      	beq.n	800a740 <UART_RxISR_16BIT_FIFOEN+0x354>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a6b2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d242      	bcs.n	800a740 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	3308      	adds	r3, #8
 800a6c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c4:	e853 3f00 	ldrex	r3, [r3]
 800a6c8:	623b      	str	r3, [r7, #32]
   return(result);
 800a6ca:	6a3b      	ldr	r3, [r7, #32]
 800a6cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a6d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	3308      	adds	r3, #8
 800a6da:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a6de:	633a      	str	r2, [r7, #48]	; 0x30
 800a6e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6e6:	e841 2300 	strex	r3, r2, [r1]
 800a6ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d1e3      	bne.n	800a6ba <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	4a16      	ldr	r2, [pc, #88]	; (800a750 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a6f6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	e853 3f00 	ldrex	r3, [r3]
 800a704:	60fb      	str	r3, [r7, #12]
   return(result);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f043 0320 	orr.w	r3, r3, #32
 800a70c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	461a      	mov	r2, r3
 800a716:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a71a:	61fb      	str	r3, [r7, #28]
 800a71c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a71e:	69b9      	ldr	r1, [r7, #24]
 800a720:	69fa      	ldr	r2, [r7, #28]
 800a722:	e841 2300 	strex	r3, r2, [r1]
 800a726:	617b      	str	r3, [r7, #20]
   return(result);
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d1e4      	bne.n	800a6f8 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a72e:	e007      	b.n	800a740 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	699a      	ldr	r2, [r3, #24]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f042 0208 	orr.w	r2, r2, #8
 800a73e:	619a      	str	r2, [r3, #24]
}
 800a740:	bf00      	nop
 800a742:	37b8      	adds	r7, #184	; 0xb8
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}
 800a748:	effffffe 	.word	0xeffffffe
 800a74c:	58000c00 	.word	0x58000c00
 800a750:	08009ed5 	.word	0x08009ed5

0800a754 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a754:	b480      	push	{r7}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a75c:	bf00      	nop
 800a75e:	370c      	adds	r7, #12
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr

0800a768 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a768:	b480      	push	{r7}
 800a76a:	b083      	sub	sp, #12
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a770:	bf00      	nop
 800a772:	370c      	adds	r7, #12
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr

0800a77c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a784:	bf00      	nop
 800a786:	370c      	adds	r7, #12
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a790:	b480      	push	{r7}
 800a792:	b085      	sub	sp, #20
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d101      	bne.n	800a7a6 <HAL_UARTEx_DisableFifoMode+0x16>
 800a7a2:	2302      	movs	r3, #2
 800a7a4:	e027      	b.n	800a7f6 <HAL_UARTEx_DisableFifoMode+0x66>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2224      	movs	r2, #36	; 0x24
 800a7b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	681a      	ldr	r2, [r3, #0]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f022 0201 	bic.w	r2, r2, #1
 800a7cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a7d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	68fa      	ldr	r2, [r7, #12]
 800a7e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2220      	movs	r2, #32
 800a7e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3714      	adds	r7, #20
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr

0800a802 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a802:	b580      	push	{r7, lr}
 800a804:	b084      	sub	sp, #16
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
 800a80a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a812:	2b01      	cmp	r3, #1
 800a814:	d101      	bne.n	800a81a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a816:	2302      	movs	r3, #2
 800a818:	e02d      	b.n	800a876 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2201      	movs	r2, #1
 800a81e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2224      	movs	r2, #36	; 0x24
 800a826:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	681a      	ldr	r2, [r3, #0]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f022 0201 	bic.w	r2, r2, #1
 800a840:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	689b      	ldr	r3, [r3, #8]
 800a848:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	683a      	ldr	r2, [r7, #0]
 800a852:	430a      	orrs	r2, r1
 800a854:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 f850 	bl	800a8fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	68fa      	ldr	r2, [r7, #12]
 800a862:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2220      	movs	r2, #32
 800a868:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2200      	movs	r2, #0
 800a870:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a874:	2300      	movs	r3, #0
}
 800a876:	4618      	mov	r0, r3
 800a878:	3710      	adds	r7, #16
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	b084      	sub	sp, #16
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
 800a886:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d101      	bne.n	800a896 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a892:	2302      	movs	r3, #2
 800a894:	e02d      	b.n	800a8f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2201      	movs	r2, #1
 800a89a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2224      	movs	r2, #36	; 0x24
 800a8a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f022 0201 	bic.w	r2, r2, #1
 800a8bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	683a      	ldr	r2, [r7, #0]
 800a8ce:	430a      	orrs	r2, r1
 800a8d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 f812 	bl	800a8fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	68fa      	ldr	r2, [r7, #12]
 800a8de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2220      	movs	r2, #32
 800a8e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a8f0:	2300      	movs	r3, #0
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
	...

0800a8fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b085      	sub	sp, #20
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d108      	bne.n	800a91e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2201      	movs	r2, #1
 800a910:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2201      	movs	r2, #1
 800a918:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a91c:	e031      	b.n	800a982 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a91e:	2310      	movs	r3, #16
 800a920:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a922:	2310      	movs	r3, #16
 800a924:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	689b      	ldr	r3, [r3, #8]
 800a92c:	0e5b      	lsrs	r3, r3, #25
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	f003 0307 	and.w	r3, r3, #7
 800a934:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	689b      	ldr	r3, [r3, #8]
 800a93c:	0f5b      	lsrs	r3, r3, #29
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	f003 0307 	and.w	r3, r3, #7
 800a944:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a946:	7bbb      	ldrb	r3, [r7, #14]
 800a948:	7b3a      	ldrb	r2, [r7, #12]
 800a94a:	4911      	ldr	r1, [pc, #68]	; (800a990 <UARTEx_SetNbDataToProcess+0x94>)
 800a94c:	5c8a      	ldrb	r2, [r1, r2]
 800a94e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a952:	7b3a      	ldrb	r2, [r7, #12]
 800a954:	490f      	ldr	r1, [pc, #60]	; (800a994 <UARTEx_SetNbDataToProcess+0x98>)
 800a956:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a958:	fb93 f3f2 	sdiv	r3, r3, r2
 800a95c:	b29a      	uxth	r2, r3
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a964:	7bfb      	ldrb	r3, [r7, #15]
 800a966:	7b7a      	ldrb	r2, [r7, #13]
 800a968:	4909      	ldr	r1, [pc, #36]	; (800a990 <UARTEx_SetNbDataToProcess+0x94>)
 800a96a:	5c8a      	ldrb	r2, [r1, r2]
 800a96c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a970:	7b7a      	ldrb	r2, [r7, #13]
 800a972:	4908      	ldr	r1, [pc, #32]	; (800a994 <UARTEx_SetNbDataToProcess+0x98>)
 800a974:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a976:	fb93 f3f2 	sdiv	r3, r3, r2
 800a97a:	b29a      	uxth	r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a982:	bf00      	nop
 800a984:	3714      	adds	r7, #20
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr
 800a98e:	bf00      	nop
 800a990:	0800b324 	.word	0x0800b324
 800a994:	0800b32c 	.word	0x0800b32c

0800a998 <siprintf>:
 800a998:	b40e      	push	{r1, r2, r3}
 800a99a:	b500      	push	{lr}
 800a99c:	b09c      	sub	sp, #112	; 0x70
 800a99e:	ab1d      	add	r3, sp, #116	; 0x74
 800a9a0:	9002      	str	r0, [sp, #8]
 800a9a2:	9006      	str	r0, [sp, #24]
 800a9a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a9a8:	4809      	ldr	r0, [pc, #36]	; (800a9d0 <siprintf+0x38>)
 800a9aa:	9107      	str	r1, [sp, #28]
 800a9ac:	9104      	str	r1, [sp, #16]
 800a9ae:	4909      	ldr	r1, [pc, #36]	; (800a9d4 <siprintf+0x3c>)
 800a9b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9b4:	9105      	str	r1, [sp, #20]
 800a9b6:	6800      	ldr	r0, [r0, #0]
 800a9b8:	9301      	str	r3, [sp, #4]
 800a9ba:	a902      	add	r1, sp, #8
 800a9bc:	f000 f992 	bl	800ace4 <_svfiprintf_r>
 800a9c0:	9b02      	ldr	r3, [sp, #8]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	701a      	strb	r2, [r3, #0]
 800a9c6:	b01c      	add	sp, #112	; 0x70
 800a9c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9cc:	b003      	add	sp, #12
 800a9ce:	4770      	bx	lr
 800a9d0:	24000064 	.word	0x24000064
 800a9d4:	ffff0208 	.word	0xffff0208

0800a9d8 <memset>:
 800a9d8:	4402      	add	r2, r0
 800a9da:	4603      	mov	r3, r0
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d100      	bne.n	800a9e2 <memset+0xa>
 800a9e0:	4770      	bx	lr
 800a9e2:	f803 1b01 	strb.w	r1, [r3], #1
 800a9e6:	e7f9      	b.n	800a9dc <memset+0x4>

0800a9e8 <__errno>:
 800a9e8:	4b01      	ldr	r3, [pc, #4]	; (800a9f0 <__errno+0x8>)
 800a9ea:	6818      	ldr	r0, [r3, #0]
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop
 800a9f0:	24000064 	.word	0x24000064

0800a9f4 <__libc_init_array>:
 800a9f4:	b570      	push	{r4, r5, r6, lr}
 800a9f6:	4d0d      	ldr	r5, [pc, #52]	; (800aa2c <__libc_init_array+0x38>)
 800a9f8:	4c0d      	ldr	r4, [pc, #52]	; (800aa30 <__libc_init_array+0x3c>)
 800a9fa:	1b64      	subs	r4, r4, r5
 800a9fc:	10a4      	asrs	r4, r4, #2
 800a9fe:	2600      	movs	r6, #0
 800aa00:	42a6      	cmp	r6, r4
 800aa02:	d109      	bne.n	800aa18 <__libc_init_array+0x24>
 800aa04:	4d0b      	ldr	r5, [pc, #44]	; (800aa34 <__libc_init_array+0x40>)
 800aa06:	4c0c      	ldr	r4, [pc, #48]	; (800aa38 <__libc_init_array+0x44>)
 800aa08:	f000 fc6a 	bl	800b2e0 <_init>
 800aa0c:	1b64      	subs	r4, r4, r5
 800aa0e:	10a4      	asrs	r4, r4, #2
 800aa10:	2600      	movs	r6, #0
 800aa12:	42a6      	cmp	r6, r4
 800aa14:	d105      	bne.n	800aa22 <__libc_init_array+0x2e>
 800aa16:	bd70      	pop	{r4, r5, r6, pc}
 800aa18:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa1c:	4798      	blx	r3
 800aa1e:	3601      	adds	r6, #1
 800aa20:	e7ee      	b.n	800aa00 <__libc_init_array+0xc>
 800aa22:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa26:	4798      	blx	r3
 800aa28:	3601      	adds	r6, #1
 800aa2a:	e7f2      	b.n	800aa12 <__libc_init_array+0x1e>
 800aa2c:	0800b370 	.word	0x0800b370
 800aa30:	0800b370 	.word	0x0800b370
 800aa34:	0800b370 	.word	0x0800b370
 800aa38:	0800b374 	.word	0x0800b374

0800aa3c <__retarget_lock_acquire_recursive>:
 800aa3c:	4770      	bx	lr

0800aa3e <__retarget_lock_release_recursive>:
 800aa3e:	4770      	bx	lr

0800aa40 <_free_r>:
 800aa40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa42:	2900      	cmp	r1, #0
 800aa44:	d044      	beq.n	800aad0 <_free_r+0x90>
 800aa46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa4a:	9001      	str	r0, [sp, #4]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	f1a1 0404 	sub.w	r4, r1, #4
 800aa52:	bfb8      	it	lt
 800aa54:	18e4      	addlt	r4, r4, r3
 800aa56:	f000 f8df 	bl	800ac18 <__malloc_lock>
 800aa5a:	4a1e      	ldr	r2, [pc, #120]	; (800aad4 <_free_r+0x94>)
 800aa5c:	9801      	ldr	r0, [sp, #4]
 800aa5e:	6813      	ldr	r3, [r2, #0]
 800aa60:	b933      	cbnz	r3, 800aa70 <_free_r+0x30>
 800aa62:	6063      	str	r3, [r4, #4]
 800aa64:	6014      	str	r4, [r2, #0]
 800aa66:	b003      	add	sp, #12
 800aa68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa6c:	f000 b8da 	b.w	800ac24 <__malloc_unlock>
 800aa70:	42a3      	cmp	r3, r4
 800aa72:	d908      	bls.n	800aa86 <_free_r+0x46>
 800aa74:	6825      	ldr	r5, [r4, #0]
 800aa76:	1961      	adds	r1, r4, r5
 800aa78:	428b      	cmp	r3, r1
 800aa7a:	bf01      	itttt	eq
 800aa7c:	6819      	ldreq	r1, [r3, #0]
 800aa7e:	685b      	ldreq	r3, [r3, #4]
 800aa80:	1949      	addeq	r1, r1, r5
 800aa82:	6021      	streq	r1, [r4, #0]
 800aa84:	e7ed      	b.n	800aa62 <_free_r+0x22>
 800aa86:	461a      	mov	r2, r3
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	b10b      	cbz	r3, 800aa90 <_free_r+0x50>
 800aa8c:	42a3      	cmp	r3, r4
 800aa8e:	d9fa      	bls.n	800aa86 <_free_r+0x46>
 800aa90:	6811      	ldr	r1, [r2, #0]
 800aa92:	1855      	adds	r5, r2, r1
 800aa94:	42a5      	cmp	r5, r4
 800aa96:	d10b      	bne.n	800aab0 <_free_r+0x70>
 800aa98:	6824      	ldr	r4, [r4, #0]
 800aa9a:	4421      	add	r1, r4
 800aa9c:	1854      	adds	r4, r2, r1
 800aa9e:	42a3      	cmp	r3, r4
 800aaa0:	6011      	str	r1, [r2, #0]
 800aaa2:	d1e0      	bne.n	800aa66 <_free_r+0x26>
 800aaa4:	681c      	ldr	r4, [r3, #0]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	6053      	str	r3, [r2, #4]
 800aaaa:	440c      	add	r4, r1
 800aaac:	6014      	str	r4, [r2, #0]
 800aaae:	e7da      	b.n	800aa66 <_free_r+0x26>
 800aab0:	d902      	bls.n	800aab8 <_free_r+0x78>
 800aab2:	230c      	movs	r3, #12
 800aab4:	6003      	str	r3, [r0, #0]
 800aab6:	e7d6      	b.n	800aa66 <_free_r+0x26>
 800aab8:	6825      	ldr	r5, [r4, #0]
 800aaba:	1961      	adds	r1, r4, r5
 800aabc:	428b      	cmp	r3, r1
 800aabe:	bf04      	itt	eq
 800aac0:	6819      	ldreq	r1, [r3, #0]
 800aac2:	685b      	ldreq	r3, [r3, #4]
 800aac4:	6063      	str	r3, [r4, #4]
 800aac6:	bf04      	itt	eq
 800aac8:	1949      	addeq	r1, r1, r5
 800aaca:	6021      	streq	r1, [r4, #0]
 800aacc:	6054      	str	r4, [r2, #4]
 800aace:	e7ca      	b.n	800aa66 <_free_r+0x26>
 800aad0:	b003      	add	sp, #12
 800aad2:	bd30      	pop	{r4, r5, pc}
 800aad4:	2401d894 	.word	0x2401d894

0800aad8 <sbrk_aligned>:
 800aad8:	b570      	push	{r4, r5, r6, lr}
 800aada:	4e0e      	ldr	r6, [pc, #56]	; (800ab14 <sbrk_aligned+0x3c>)
 800aadc:	460c      	mov	r4, r1
 800aade:	6831      	ldr	r1, [r6, #0]
 800aae0:	4605      	mov	r5, r0
 800aae2:	b911      	cbnz	r1, 800aaea <sbrk_aligned+0x12>
 800aae4:	f000 fba6 	bl	800b234 <_sbrk_r>
 800aae8:	6030      	str	r0, [r6, #0]
 800aaea:	4621      	mov	r1, r4
 800aaec:	4628      	mov	r0, r5
 800aaee:	f000 fba1 	bl	800b234 <_sbrk_r>
 800aaf2:	1c43      	adds	r3, r0, #1
 800aaf4:	d00a      	beq.n	800ab0c <sbrk_aligned+0x34>
 800aaf6:	1cc4      	adds	r4, r0, #3
 800aaf8:	f024 0403 	bic.w	r4, r4, #3
 800aafc:	42a0      	cmp	r0, r4
 800aafe:	d007      	beq.n	800ab10 <sbrk_aligned+0x38>
 800ab00:	1a21      	subs	r1, r4, r0
 800ab02:	4628      	mov	r0, r5
 800ab04:	f000 fb96 	bl	800b234 <_sbrk_r>
 800ab08:	3001      	adds	r0, #1
 800ab0a:	d101      	bne.n	800ab10 <sbrk_aligned+0x38>
 800ab0c:	f04f 34ff 	mov.w	r4, #4294967295
 800ab10:	4620      	mov	r0, r4
 800ab12:	bd70      	pop	{r4, r5, r6, pc}
 800ab14:	2401d898 	.word	0x2401d898

0800ab18 <_malloc_r>:
 800ab18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab1c:	1ccd      	adds	r5, r1, #3
 800ab1e:	f025 0503 	bic.w	r5, r5, #3
 800ab22:	3508      	adds	r5, #8
 800ab24:	2d0c      	cmp	r5, #12
 800ab26:	bf38      	it	cc
 800ab28:	250c      	movcc	r5, #12
 800ab2a:	2d00      	cmp	r5, #0
 800ab2c:	4607      	mov	r7, r0
 800ab2e:	db01      	blt.n	800ab34 <_malloc_r+0x1c>
 800ab30:	42a9      	cmp	r1, r5
 800ab32:	d905      	bls.n	800ab40 <_malloc_r+0x28>
 800ab34:	230c      	movs	r3, #12
 800ab36:	603b      	str	r3, [r7, #0]
 800ab38:	2600      	movs	r6, #0
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab40:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ac14 <_malloc_r+0xfc>
 800ab44:	f000 f868 	bl	800ac18 <__malloc_lock>
 800ab48:	f8d8 3000 	ldr.w	r3, [r8]
 800ab4c:	461c      	mov	r4, r3
 800ab4e:	bb5c      	cbnz	r4, 800aba8 <_malloc_r+0x90>
 800ab50:	4629      	mov	r1, r5
 800ab52:	4638      	mov	r0, r7
 800ab54:	f7ff ffc0 	bl	800aad8 <sbrk_aligned>
 800ab58:	1c43      	adds	r3, r0, #1
 800ab5a:	4604      	mov	r4, r0
 800ab5c:	d155      	bne.n	800ac0a <_malloc_r+0xf2>
 800ab5e:	f8d8 4000 	ldr.w	r4, [r8]
 800ab62:	4626      	mov	r6, r4
 800ab64:	2e00      	cmp	r6, #0
 800ab66:	d145      	bne.n	800abf4 <_malloc_r+0xdc>
 800ab68:	2c00      	cmp	r4, #0
 800ab6a:	d048      	beq.n	800abfe <_malloc_r+0xe6>
 800ab6c:	6823      	ldr	r3, [r4, #0]
 800ab6e:	4631      	mov	r1, r6
 800ab70:	4638      	mov	r0, r7
 800ab72:	eb04 0903 	add.w	r9, r4, r3
 800ab76:	f000 fb5d 	bl	800b234 <_sbrk_r>
 800ab7a:	4581      	cmp	r9, r0
 800ab7c:	d13f      	bne.n	800abfe <_malloc_r+0xe6>
 800ab7e:	6821      	ldr	r1, [r4, #0]
 800ab80:	1a6d      	subs	r5, r5, r1
 800ab82:	4629      	mov	r1, r5
 800ab84:	4638      	mov	r0, r7
 800ab86:	f7ff ffa7 	bl	800aad8 <sbrk_aligned>
 800ab8a:	3001      	adds	r0, #1
 800ab8c:	d037      	beq.n	800abfe <_malloc_r+0xe6>
 800ab8e:	6823      	ldr	r3, [r4, #0]
 800ab90:	442b      	add	r3, r5
 800ab92:	6023      	str	r3, [r4, #0]
 800ab94:	f8d8 3000 	ldr.w	r3, [r8]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d038      	beq.n	800ac0e <_malloc_r+0xf6>
 800ab9c:	685a      	ldr	r2, [r3, #4]
 800ab9e:	42a2      	cmp	r2, r4
 800aba0:	d12b      	bne.n	800abfa <_malloc_r+0xe2>
 800aba2:	2200      	movs	r2, #0
 800aba4:	605a      	str	r2, [r3, #4]
 800aba6:	e00f      	b.n	800abc8 <_malloc_r+0xb0>
 800aba8:	6822      	ldr	r2, [r4, #0]
 800abaa:	1b52      	subs	r2, r2, r5
 800abac:	d41f      	bmi.n	800abee <_malloc_r+0xd6>
 800abae:	2a0b      	cmp	r2, #11
 800abb0:	d917      	bls.n	800abe2 <_malloc_r+0xca>
 800abb2:	1961      	adds	r1, r4, r5
 800abb4:	42a3      	cmp	r3, r4
 800abb6:	6025      	str	r5, [r4, #0]
 800abb8:	bf18      	it	ne
 800abba:	6059      	strne	r1, [r3, #4]
 800abbc:	6863      	ldr	r3, [r4, #4]
 800abbe:	bf08      	it	eq
 800abc0:	f8c8 1000 	streq.w	r1, [r8]
 800abc4:	5162      	str	r2, [r4, r5]
 800abc6:	604b      	str	r3, [r1, #4]
 800abc8:	4638      	mov	r0, r7
 800abca:	f104 060b 	add.w	r6, r4, #11
 800abce:	f000 f829 	bl	800ac24 <__malloc_unlock>
 800abd2:	f026 0607 	bic.w	r6, r6, #7
 800abd6:	1d23      	adds	r3, r4, #4
 800abd8:	1af2      	subs	r2, r6, r3
 800abda:	d0ae      	beq.n	800ab3a <_malloc_r+0x22>
 800abdc:	1b9b      	subs	r3, r3, r6
 800abde:	50a3      	str	r3, [r4, r2]
 800abe0:	e7ab      	b.n	800ab3a <_malloc_r+0x22>
 800abe2:	42a3      	cmp	r3, r4
 800abe4:	6862      	ldr	r2, [r4, #4]
 800abe6:	d1dd      	bne.n	800aba4 <_malloc_r+0x8c>
 800abe8:	f8c8 2000 	str.w	r2, [r8]
 800abec:	e7ec      	b.n	800abc8 <_malloc_r+0xb0>
 800abee:	4623      	mov	r3, r4
 800abf0:	6864      	ldr	r4, [r4, #4]
 800abf2:	e7ac      	b.n	800ab4e <_malloc_r+0x36>
 800abf4:	4634      	mov	r4, r6
 800abf6:	6876      	ldr	r6, [r6, #4]
 800abf8:	e7b4      	b.n	800ab64 <_malloc_r+0x4c>
 800abfa:	4613      	mov	r3, r2
 800abfc:	e7cc      	b.n	800ab98 <_malloc_r+0x80>
 800abfe:	230c      	movs	r3, #12
 800ac00:	603b      	str	r3, [r7, #0]
 800ac02:	4638      	mov	r0, r7
 800ac04:	f000 f80e 	bl	800ac24 <__malloc_unlock>
 800ac08:	e797      	b.n	800ab3a <_malloc_r+0x22>
 800ac0a:	6025      	str	r5, [r4, #0]
 800ac0c:	e7dc      	b.n	800abc8 <_malloc_r+0xb0>
 800ac0e:	605b      	str	r3, [r3, #4]
 800ac10:	deff      	udf	#255	; 0xff
 800ac12:	bf00      	nop
 800ac14:	2401d894 	.word	0x2401d894

0800ac18 <__malloc_lock>:
 800ac18:	4801      	ldr	r0, [pc, #4]	; (800ac20 <__malloc_lock+0x8>)
 800ac1a:	f7ff bf0f 	b.w	800aa3c <__retarget_lock_acquire_recursive>
 800ac1e:	bf00      	nop
 800ac20:	2401d890 	.word	0x2401d890

0800ac24 <__malloc_unlock>:
 800ac24:	4801      	ldr	r0, [pc, #4]	; (800ac2c <__malloc_unlock+0x8>)
 800ac26:	f7ff bf0a 	b.w	800aa3e <__retarget_lock_release_recursive>
 800ac2a:	bf00      	nop
 800ac2c:	2401d890 	.word	0x2401d890

0800ac30 <__ssputs_r>:
 800ac30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac34:	688e      	ldr	r6, [r1, #8]
 800ac36:	461f      	mov	r7, r3
 800ac38:	42be      	cmp	r6, r7
 800ac3a:	680b      	ldr	r3, [r1, #0]
 800ac3c:	4682      	mov	sl, r0
 800ac3e:	460c      	mov	r4, r1
 800ac40:	4690      	mov	r8, r2
 800ac42:	d82c      	bhi.n	800ac9e <__ssputs_r+0x6e>
 800ac44:	898a      	ldrh	r2, [r1, #12]
 800ac46:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac4a:	d026      	beq.n	800ac9a <__ssputs_r+0x6a>
 800ac4c:	6965      	ldr	r5, [r4, #20]
 800ac4e:	6909      	ldr	r1, [r1, #16]
 800ac50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac54:	eba3 0901 	sub.w	r9, r3, r1
 800ac58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac5c:	1c7b      	adds	r3, r7, #1
 800ac5e:	444b      	add	r3, r9
 800ac60:	106d      	asrs	r5, r5, #1
 800ac62:	429d      	cmp	r5, r3
 800ac64:	bf38      	it	cc
 800ac66:	461d      	movcc	r5, r3
 800ac68:	0553      	lsls	r3, r2, #21
 800ac6a:	d527      	bpl.n	800acbc <__ssputs_r+0x8c>
 800ac6c:	4629      	mov	r1, r5
 800ac6e:	f7ff ff53 	bl	800ab18 <_malloc_r>
 800ac72:	4606      	mov	r6, r0
 800ac74:	b360      	cbz	r0, 800acd0 <__ssputs_r+0xa0>
 800ac76:	6921      	ldr	r1, [r4, #16]
 800ac78:	464a      	mov	r2, r9
 800ac7a:	f000 faeb 	bl	800b254 <memcpy>
 800ac7e:	89a3      	ldrh	r3, [r4, #12]
 800ac80:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac88:	81a3      	strh	r3, [r4, #12]
 800ac8a:	6126      	str	r6, [r4, #16]
 800ac8c:	6165      	str	r5, [r4, #20]
 800ac8e:	444e      	add	r6, r9
 800ac90:	eba5 0509 	sub.w	r5, r5, r9
 800ac94:	6026      	str	r6, [r4, #0]
 800ac96:	60a5      	str	r5, [r4, #8]
 800ac98:	463e      	mov	r6, r7
 800ac9a:	42be      	cmp	r6, r7
 800ac9c:	d900      	bls.n	800aca0 <__ssputs_r+0x70>
 800ac9e:	463e      	mov	r6, r7
 800aca0:	6820      	ldr	r0, [r4, #0]
 800aca2:	4632      	mov	r2, r6
 800aca4:	4641      	mov	r1, r8
 800aca6:	f000 faab 	bl	800b200 <memmove>
 800acaa:	68a3      	ldr	r3, [r4, #8]
 800acac:	1b9b      	subs	r3, r3, r6
 800acae:	60a3      	str	r3, [r4, #8]
 800acb0:	6823      	ldr	r3, [r4, #0]
 800acb2:	4433      	add	r3, r6
 800acb4:	6023      	str	r3, [r4, #0]
 800acb6:	2000      	movs	r0, #0
 800acb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acbc:	462a      	mov	r2, r5
 800acbe:	f000 fad7 	bl	800b270 <_realloc_r>
 800acc2:	4606      	mov	r6, r0
 800acc4:	2800      	cmp	r0, #0
 800acc6:	d1e0      	bne.n	800ac8a <__ssputs_r+0x5a>
 800acc8:	6921      	ldr	r1, [r4, #16]
 800acca:	4650      	mov	r0, sl
 800accc:	f7ff feb8 	bl	800aa40 <_free_r>
 800acd0:	230c      	movs	r3, #12
 800acd2:	f8ca 3000 	str.w	r3, [sl]
 800acd6:	89a3      	ldrh	r3, [r4, #12]
 800acd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acdc:	81a3      	strh	r3, [r4, #12]
 800acde:	f04f 30ff 	mov.w	r0, #4294967295
 800ace2:	e7e9      	b.n	800acb8 <__ssputs_r+0x88>

0800ace4 <_svfiprintf_r>:
 800ace4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace8:	4698      	mov	r8, r3
 800acea:	898b      	ldrh	r3, [r1, #12]
 800acec:	061b      	lsls	r3, r3, #24
 800acee:	b09d      	sub	sp, #116	; 0x74
 800acf0:	4607      	mov	r7, r0
 800acf2:	460d      	mov	r5, r1
 800acf4:	4614      	mov	r4, r2
 800acf6:	d50e      	bpl.n	800ad16 <_svfiprintf_r+0x32>
 800acf8:	690b      	ldr	r3, [r1, #16]
 800acfa:	b963      	cbnz	r3, 800ad16 <_svfiprintf_r+0x32>
 800acfc:	2140      	movs	r1, #64	; 0x40
 800acfe:	f7ff ff0b 	bl	800ab18 <_malloc_r>
 800ad02:	6028      	str	r0, [r5, #0]
 800ad04:	6128      	str	r0, [r5, #16]
 800ad06:	b920      	cbnz	r0, 800ad12 <_svfiprintf_r+0x2e>
 800ad08:	230c      	movs	r3, #12
 800ad0a:	603b      	str	r3, [r7, #0]
 800ad0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad10:	e0d0      	b.n	800aeb4 <_svfiprintf_r+0x1d0>
 800ad12:	2340      	movs	r3, #64	; 0x40
 800ad14:	616b      	str	r3, [r5, #20]
 800ad16:	2300      	movs	r3, #0
 800ad18:	9309      	str	r3, [sp, #36]	; 0x24
 800ad1a:	2320      	movs	r3, #32
 800ad1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad20:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad24:	2330      	movs	r3, #48	; 0x30
 800ad26:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aecc <_svfiprintf_r+0x1e8>
 800ad2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad2e:	f04f 0901 	mov.w	r9, #1
 800ad32:	4623      	mov	r3, r4
 800ad34:	469a      	mov	sl, r3
 800ad36:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad3a:	b10a      	cbz	r2, 800ad40 <_svfiprintf_r+0x5c>
 800ad3c:	2a25      	cmp	r2, #37	; 0x25
 800ad3e:	d1f9      	bne.n	800ad34 <_svfiprintf_r+0x50>
 800ad40:	ebba 0b04 	subs.w	fp, sl, r4
 800ad44:	d00b      	beq.n	800ad5e <_svfiprintf_r+0x7a>
 800ad46:	465b      	mov	r3, fp
 800ad48:	4622      	mov	r2, r4
 800ad4a:	4629      	mov	r1, r5
 800ad4c:	4638      	mov	r0, r7
 800ad4e:	f7ff ff6f 	bl	800ac30 <__ssputs_r>
 800ad52:	3001      	adds	r0, #1
 800ad54:	f000 80a9 	beq.w	800aeaa <_svfiprintf_r+0x1c6>
 800ad58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad5a:	445a      	add	r2, fp
 800ad5c:	9209      	str	r2, [sp, #36]	; 0x24
 800ad5e:	f89a 3000 	ldrb.w	r3, [sl]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	f000 80a1 	beq.w	800aeaa <_svfiprintf_r+0x1c6>
 800ad68:	2300      	movs	r3, #0
 800ad6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad72:	f10a 0a01 	add.w	sl, sl, #1
 800ad76:	9304      	str	r3, [sp, #16]
 800ad78:	9307      	str	r3, [sp, #28]
 800ad7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad7e:	931a      	str	r3, [sp, #104]	; 0x68
 800ad80:	4654      	mov	r4, sl
 800ad82:	2205      	movs	r2, #5
 800ad84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad88:	4850      	ldr	r0, [pc, #320]	; (800aecc <_svfiprintf_r+0x1e8>)
 800ad8a:	f7f5 fab9 	bl	8000300 <memchr>
 800ad8e:	9a04      	ldr	r2, [sp, #16]
 800ad90:	b9d8      	cbnz	r0, 800adca <_svfiprintf_r+0xe6>
 800ad92:	06d0      	lsls	r0, r2, #27
 800ad94:	bf44      	itt	mi
 800ad96:	2320      	movmi	r3, #32
 800ad98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad9c:	0711      	lsls	r1, r2, #28
 800ad9e:	bf44      	itt	mi
 800ada0:	232b      	movmi	r3, #43	; 0x2b
 800ada2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ada6:	f89a 3000 	ldrb.w	r3, [sl]
 800adaa:	2b2a      	cmp	r3, #42	; 0x2a
 800adac:	d015      	beq.n	800adda <_svfiprintf_r+0xf6>
 800adae:	9a07      	ldr	r2, [sp, #28]
 800adb0:	4654      	mov	r4, sl
 800adb2:	2000      	movs	r0, #0
 800adb4:	f04f 0c0a 	mov.w	ip, #10
 800adb8:	4621      	mov	r1, r4
 800adba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adbe:	3b30      	subs	r3, #48	; 0x30
 800adc0:	2b09      	cmp	r3, #9
 800adc2:	d94d      	bls.n	800ae60 <_svfiprintf_r+0x17c>
 800adc4:	b1b0      	cbz	r0, 800adf4 <_svfiprintf_r+0x110>
 800adc6:	9207      	str	r2, [sp, #28]
 800adc8:	e014      	b.n	800adf4 <_svfiprintf_r+0x110>
 800adca:	eba0 0308 	sub.w	r3, r0, r8
 800adce:	fa09 f303 	lsl.w	r3, r9, r3
 800add2:	4313      	orrs	r3, r2
 800add4:	9304      	str	r3, [sp, #16]
 800add6:	46a2      	mov	sl, r4
 800add8:	e7d2      	b.n	800ad80 <_svfiprintf_r+0x9c>
 800adda:	9b03      	ldr	r3, [sp, #12]
 800addc:	1d19      	adds	r1, r3, #4
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	9103      	str	r1, [sp, #12]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	bfbb      	ittet	lt
 800ade6:	425b      	neglt	r3, r3
 800ade8:	f042 0202 	orrlt.w	r2, r2, #2
 800adec:	9307      	strge	r3, [sp, #28]
 800adee:	9307      	strlt	r3, [sp, #28]
 800adf0:	bfb8      	it	lt
 800adf2:	9204      	strlt	r2, [sp, #16]
 800adf4:	7823      	ldrb	r3, [r4, #0]
 800adf6:	2b2e      	cmp	r3, #46	; 0x2e
 800adf8:	d10c      	bne.n	800ae14 <_svfiprintf_r+0x130>
 800adfa:	7863      	ldrb	r3, [r4, #1]
 800adfc:	2b2a      	cmp	r3, #42	; 0x2a
 800adfe:	d134      	bne.n	800ae6a <_svfiprintf_r+0x186>
 800ae00:	9b03      	ldr	r3, [sp, #12]
 800ae02:	1d1a      	adds	r2, r3, #4
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	9203      	str	r2, [sp, #12]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	bfb8      	it	lt
 800ae0c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae10:	3402      	adds	r4, #2
 800ae12:	9305      	str	r3, [sp, #20]
 800ae14:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800aedc <_svfiprintf_r+0x1f8>
 800ae18:	7821      	ldrb	r1, [r4, #0]
 800ae1a:	2203      	movs	r2, #3
 800ae1c:	4650      	mov	r0, sl
 800ae1e:	f7f5 fa6f 	bl	8000300 <memchr>
 800ae22:	b138      	cbz	r0, 800ae34 <_svfiprintf_r+0x150>
 800ae24:	9b04      	ldr	r3, [sp, #16]
 800ae26:	eba0 000a 	sub.w	r0, r0, sl
 800ae2a:	2240      	movs	r2, #64	; 0x40
 800ae2c:	4082      	lsls	r2, r0
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	3401      	adds	r4, #1
 800ae32:	9304      	str	r3, [sp, #16]
 800ae34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae38:	4825      	ldr	r0, [pc, #148]	; (800aed0 <_svfiprintf_r+0x1ec>)
 800ae3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae3e:	2206      	movs	r2, #6
 800ae40:	f7f5 fa5e 	bl	8000300 <memchr>
 800ae44:	2800      	cmp	r0, #0
 800ae46:	d038      	beq.n	800aeba <_svfiprintf_r+0x1d6>
 800ae48:	4b22      	ldr	r3, [pc, #136]	; (800aed4 <_svfiprintf_r+0x1f0>)
 800ae4a:	bb1b      	cbnz	r3, 800ae94 <_svfiprintf_r+0x1b0>
 800ae4c:	9b03      	ldr	r3, [sp, #12]
 800ae4e:	3307      	adds	r3, #7
 800ae50:	f023 0307 	bic.w	r3, r3, #7
 800ae54:	3308      	adds	r3, #8
 800ae56:	9303      	str	r3, [sp, #12]
 800ae58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae5a:	4433      	add	r3, r6
 800ae5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae5e:	e768      	b.n	800ad32 <_svfiprintf_r+0x4e>
 800ae60:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae64:	460c      	mov	r4, r1
 800ae66:	2001      	movs	r0, #1
 800ae68:	e7a6      	b.n	800adb8 <_svfiprintf_r+0xd4>
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	3401      	adds	r4, #1
 800ae6e:	9305      	str	r3, [sp, #20]
 800ae70:	4619      	mov	r1, r3
 800ae72:	f04f 0c0a 	mov.w	ip, #10
 800ae76:	4620      	mov	r0, r4
 800ae78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae7c:	3a30      	subs	r2, #48	; 0x30
 800ae7e:	2a09      	cmp	r2, #9
 800ae80:	d903      	bls.n	800ae8a <_svfiprintf_r+0x1a6>
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d0c6      	beq.n	800ae14 <_svfiprintf_r+0x130>
 800ae86:	9105      	str	r1, [sp, #20]
 800ae88:	e7c4      	b.n	800ae14 <_svfiprintf_r+0x130>
 800ae8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae8e:	4604      	mov	r4, r0
 800ae90:	2301      	movs	r3, #1
 800ae92:	e7f0      	b.n	800ae76 <_svfiprintf_r+0x192>
 800ae94:	ab03      	add	r3, sp, #12
 800ae96:	9300      	str	r3, [sp, #0]
 800ae98:	462a      	mov	r2, r5
 800ae9a:	4b0f      	ldr	r3, [pc, #60]	; (800aed8 <_svfiprintf_r+0x1f4>)
 800ae9c:	a904      	add	r1, sp, #16
 800ae9e:	4638      	mov	r0, r7
 800aea0:	f3af 8000 	nop.w
 800aea4:	1c42      	adds	r2, r0, #1
 800aea6:	4606      	mov	r6, r0
 800aea8:	d1d6      	bne.n	800ae58 <_svfiprintf_r+0x174>
 800aeaa:	89ab      	ldrh	r3, [r5, #12]
 800aeac:	065b      	lsls	r3, r3, #25
 800aeae:	f53f af2d 	bmi.w	800ad0c <_svfiprintf_r+0x28>
 800aeb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aeb4:	b01d      	add	sp, #116	; 0x74
 800aeb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeba:	ab03      	add	r3, sp, #12
 800aebc:	9300      	str	r3, [sp, #0]
 800aebe:	462a      	mov	r2, r5
 800aec0:	4b05      	ldr	r3, [pc, #20]	; (800aed8 <_svfiprintf_r+0x1f4>)
 800aec2:	a904      	add	r1, sp, #16
 800aec4:	4638      	mov	r0, r7
 800aec6:	f000 f879 	bl	800afbc <_printf_i>
 800aeca:	e7eb      	b.n	800aea4 <_svfiprintf_r+0x1c0>
 800aecc:	0800b334 	.word	0x0800b334
 800aed0:	0800b33e 	.word	0x0800b33e
 800aed4:	00000000 	.word	0x00000000
 800aed8:	0800ac31 	.word	0x0800ac31
 800aedc:	0800b33a 	.word	0x0800b33a

0800aee0 <_printf_common>:
 800aee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aee4:	4616      	mov	r6, r2
 800aee6:	4699      	mov	r9, r3
 800aee8:	688a      	ldr	r2, [r1, #8]
 800aeea:	690b      	ldr	r3, [r1, #16]
 800aeec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aef0:	4293      	cmp	r3, r2
 800aef2:	bfb8      	it	lt
 800aef4:	4613      	movlt	r3, r2
 800aef6:	6033      	str	r3, [r6, #0]
 800aef8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aefc:	4607      	mov	r7, r0
 800aefe:	460c      	mov	r4, r1
 800af00:	b10a      	cbz	r2, 800af06 <_printf_common+0x26>
 800af02:	3301      	adds	r3, #1
 800af04:	6033      	str	r3, [r6, #0]
 800af06:	6823      	ldr	r3, [r4, #0]
 800af08:	0699      	lsls	r1, r3, #26
 800af0a:	bf42      	ittt	mi
 800af0c:	6833      	ldrmi	r3, [r6, #0]
 800af0e:	3302      	addmi	r3, #2
 800af10:	6033      	strmi	r3, [r6, #0]
 800af12:	6825      	ldr	r5, [r4, #0]
 800af14:	f015 0506 	ands.w	r5, r5, #6
 800af18:	d106      	bne.n	800af28 <_printf_common+0x48>
 800af1a:	f104 0a19 	add.w	sl, r4, #25
 800af1e:	68e3      	ldr	r3, [r4, #12]
 800af20:	6832      	ldr	r2, [r6, #0]
 800af22:	1a9b      	subs	r3, r3, r2
 800af24:	42ab      	cmp	r3, r5
 800af26:	dc26      	bgt.n	800af76 <_printf_common+0x96>
 800af28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af2c:	1e13      	subs	r3, r2, #0
 800af2e:	6822      	ldr	r2, [r4, #0]
 800af30:	bf18      	it	ne
 800af32:	2301      	movne	r3, #1
 800af34:	0692      	lsls	r2, r2, #26
 800af36:	d42b      	bmi.n	800af90 <_printf_common+0xb0>
 800af38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af3c:	4649      	mov	r1, r9
 800af3e:	4638      	mov	r0, r7
 800af40:	47c0      	blx	r8
 800af42:	3001      	adds	r0, #1
 800af44:	d01e      	beq.n	800af84 <_printf_common+0xa4>
 800af46:	6823      	ldr	r3, [r4, #0]
 800af48:	6922      	ldr	r2, [r4, #16]
 800af4a:	f003 0306 	and.w	r3, r3, #6
 800af4e:	2b04      	cmp	r3, #4
 800af50:	bf02      	ittt	eq
 800af52:	68e5      	ldreq	r5, [r4, #12]
 800af54:	6833      	ldreq	r3, [r6, #0]
 800af56:	1aed      	subeq	r5, r5, r3
 800af58:	68a3      	ldr	r3, [r4, #8]
 800af5a:	bf0c      	ite	eq
 800af5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af60:	2500      	movne	r5, #0
 800af62:	4293      	cmp	r3, r2
 800af64:	bfc4      	itt	gt
 800af66:	1a9b      	subgt	r3, r3, r2
 800af68:	18ed      	addgt	r5, r5, r3
 800af6a:	2600      	movs	r6, #0
 800af6c:	341a      	adds	r4, #26
 800af6e:	42b5      	cmp	r5, r6
 800af70:	d11a      	bne.n	800afa8 <_printf_common+0xc8>
 800af72:	2000      	movs	r0, #0
 800af74:	e008      	b.n	800af88 <_printf_common+0xa8>
 800af76:	2301      	movs	r3, #1
 800af78:	4652      	mov	r2, sl
 800af7a:	4649      	mov	r1, r9
 800af7c:	4638      	mov	r0, r7
 800af7e:	47c0      	blx	r8
 800af80:	3001      	adds	r0, #1
 800af82:	d103      	bne.n	800af8c <_printf_common+0xac>
 800af84:	f04f 30ff 	mov.w	r0, #4294967295
 800af88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af8c:	3501      	adds	r5, #1
 800af8e:	e7c6      	b.n	800af1e <_printf_common+0x3e>
 800af90:	18e1      	adds	r1, r4, r3
 800af92:	1c5a      	adds	r2, r3, #1
 800af94:	2030      	movs	r0, #48	; 0x30
 800af96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af9a:	4422      	add	r2, r4
 800af9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800afa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800afa4:	3302      	adds	r3, #2
 800afa6:	e7c7      	b.n	800af38 <_printf_common+0x58>
 800afa8:	2301      	movs	r3, #1
 800afaa:	4622      	mov	r2, r4
 800afac:	4649      	mov	r1, r9
 800afae:	4638      	mov	r0, r7
 800afb0:	47c0      	blx	r8
 800afb2:	3001      	adds	r0, #1
 800afb4:	d0e6      	beq.n	800af84 <_printf_common+0xa4>
 800afb6:	3601      	adds	r6, #1
 800afb8:	e7d9      	b.n	800af6e <_printf_common+0x8e>
	...

0800afbc <_printf_i>:
 800afbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afc0:	7e0f      	ldrb	r7, [r1, #24]
 800afc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800afc4:	2f78      	cmp	r7, #120	; 0x78
 800afc6:	4691      	mov	r9, r2
 800afc8:	4680      	mov	r8, r0
 800afca:	460c      	mov	r4, r1
 800afcc:	469a      	mov	sl, r3
 800afce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800afd2:	d807      	bhi.n	800afe4 <_printf_i+0x28>
 800afd4:	2f62      	cmp	r7, #98	; 0x62
 800afd6:	d80a      	bhi.n	800afee <_printf_i+0x32>
 800afd8:	2f00      	cmp	r7, #0
 800afda:	f000 80d4 	beq.w	800b186 <_printf_i+0x1ca>
 800afde:	2f58      	cmp	r7, #88	; 0x58
 800afe0:	f000 80c0 	beq.w	800b164 <_printf_i+0x1a8>
 800afe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afe8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800afec:	e03a      	b.n	800b064 <_printf_i+0xa8>
 800afee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aff2:	2b15      	cmp	r3, #21
 800aff4:	d8f6      	bhi.n	800afe4 <_printf_i+0x28>
 800aff6:	a101      	add	r1, pc, #4	; (adr r1, 800affc <_printf_i+0x40>)
 800aff8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800affc:	0800b055 	.word	0x0800b055
 800b000:	0800b069 	.word	0x0800b069
 800b004:	0800afe5 	.word	0x0800afe5
 800b008:	0800afe5 	.word	0x0800afe5
 800b00c:	0800afe5 	.word	0x0800afe5
 800b010:	0800afe5 	.word	0x0800afe5
 800b014:	0800b069 	.word	0x0800b069
 800b018:	0800afe5 	.word	0x0800afe5
 800b01c:	0800afe5 	.word	0x0800afe5
 800b020:	0800afe5 	.word	0x0800afe5
 800b024:	0800afe5 	.word	0x0800afe5
 800b028:	0800b16d 	.word	0x0800b16d
 800b02c:	0800b095 	.word	0x0800b095
 800b030:	0800b127 	.word	0x0800b127
 800b034:	0800afe5 	.word	0x0800afe5
 800b038:	0800afe5 	.word	0x0800afe5
 800b03c:	0800b18f 	.word	0x0800b18f
 800b040:	0800afe5 	.word	0x0800afe5
 800b044:	0800b095 	.word	0x0800b095
 800b048:	0800afe5 	.word	0x0800afe5
 800b04c:	0800afe5 	.word	0x0800afe5
 800b050:	0800b12f 	.word	0x0800b12f
 800b054:	682b      	ldr	r3, [r5, #0]
 800b056:	1d1a      	adds	r2, r3, #4
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	602a      	str	r2, [r5, #0]
 800b05c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b060:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b064:	2301      	movs	r3, #1
 800b066:	e09f      	b.n	800b1a8 <_printf_i+0x1ec>
 800b068:	6820      	ldr	r0, [r4, #0]
 800b06a:	682b      	ldr	r3, [r5, #0]
 800b06c:	0607      	lsls	r7, r0, #24
 800b06e:	f103 0104 	add.w	r1, r3, #4
 800b072:	6029      	str	r1, [r5, #0]
 800b074:	d501      	bpl.n	800b07a <_printf_i+0xbe>
 800b076:	681e      	ldr	r6, [r3, #0]
 800b078:	e003      	b.n	800b082 <_printf_i+0xc6>
 800b07a:	0646      	lsls	r6, r0, #25
 800b07c:	d5fb      	bpl.n	800b076 <_printf_i+0xba>
 800b07e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b082:	2e00      	cmp	r6, #0
 800b084:	da03      	bge.n	800b08e <_printf_i+0xd2>
 800b086:	232d      	movs	r3, #45	; 0x2d
 800b088:	4276      	negs	r6, r6
 800b08a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b08e:	485a      	ldr	r0, [pc, #360]	; (800b1f8 <_printf_i+0x23c>)
 800b090:	230a      	movs	r3, #10
 800b092:	e012      	b.n	800b0ba <_printf_i+0xfe>
 800b094:	682b      	ldr	r3, [r5, #0]
 800b096:	6820      	ldr	r0, [r4, #0]
 800b098:	1d19      	adds	r1, r3, #4
 800b09a:	6029      	str	r1, [r5, #0]
 800b09c:	0605      	lsls	r5, r0, #24
 800b09e:	d501      	bpl.n	800b0a4 <_printf_i+0xe8>
 800b0a0:	681e      	ldr	r6, [r3, #0]
 800b0a2:	e002      	b.n	800b0aa <_printf_i+0xee>
 800b0a4:	0641      	lsls	r1, r0, #25
 800b0a6:	d5fb      	bpl.n	800b0a0 <_printf_i+0xe4>
 800b0a8:	881e      	ldrh	r6, [r3, #0]
 800b0aa:	4853      	ldr	r0, [pc, #332]	; (800b1f8 <_printf_i+0x23c>)
 800b0ac:	2f6f      	cmp	r7, #111	; 0x6f
 800b0ae:	bf0c      	ite	eq
 800b0b0:	2308      	moveq	r3, #8
 800b0b2:	230a      	movne	r3, #10
 800b0b4:	2100      	movs	r1, #0
 800b0b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b0ba:	6865      	ldr	r5, [r4, #4]
 800b0bc:	60a5      	str	r5, [r4, #8]
 800b0be:	2d00      	cmp	r5, #0
 800b0c0:	bfa2      	ittt	ge
 800b0c2:	6821      	ldrge	r1, [r4, #0]
 800b0c4:	f021 0104 	bicge.w	r1, r1, #4
 800b0c8:	6021      	strge	r1, [r4, #0]
 800b0ca:	b90e      	cbnz	r6, 800b0d0 <_printf_i+0x114>
 800b0cc:	2d00      	cmp	r5, #0
 800b0ce:	d04b      	beq.n	800b168 <_printf_i+0x1ac>
 800b0d0:	4615      	mov	r5, r2
 800b0d2:	fbb6 f1f3 	udiv	r1, r6, r3
 800b0d6:	fb03 6711 	mls	r7, r3, r1, r6
 800b0da:	5dc7      	ldrb	r7, [r0, r7]
 800b0dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b0e0:	4637      	mov	r7, r6
 800b0e2:	42bb      	cmp	r3, r7
 800b0e4:	460e      	mov	r6, r1
 800b0e6:	d9f4      	bls.n	800b0d2 <_printf_i+0x116>
 800b0e8:	2b08      	cmp	r3, #8
 800b0ea:	d10b      	bne.n	800b104 <_printf_i+0x148>
 800b0ec:	6823      	ldr	r3, [r4, #0]
 800b0ee:	07de      	lsls	r6, r3, #31
 800b0f0:	d508      	bpl.n	800b104 <_printf_i+0x148>
 800b0f2:	6923      	ldr	r3, [r4, #16]
 800b0f4:	6861      	ldr	r1, [r4, #4]
 800b0f6:	4299      	cmp	r1, r3
 800b0f8:	bfde      	ittt	le
 800b0fa:	2330      	movle	r3, #48	; 0x30
 800b0fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b100:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b104:	1b52      	subs	r2, r2, r5
 800b106:	6122      	str	r2, [r4, #16]
 800b108:	f8cd a000 	str.w	sl, [sp]
 800b10c:	464b      	mov	r3, r9
 800b10e:	aa03      	add	r2, sp, #12
 800b110:	4621      	mov	r1, r4
 800b112:	4640      	mov	r0, r8
 800b114:	f7ff fee4 	bl	800aee0 <_printf_common>
 800b118:	3001      	adds	r0, #1
 800b11a:	d14a      	bne.n	800b1b2 <_printf_i+0x1f6>
 800b11c:	f04f 30ff 	mov.w	r0, #4294967295
 800b120:	b004      	add	sp, #16
 800b122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b126:	6823      	ldr	r3, [r4, #0]
 800b128:	f043 0320 	orr.w	r3, r3, #32
 800b12c:	6023      	str	r3, [r4, #0]
 800b12e:	4833      	ldr	r0, [pc, #204]	; (800b1fc <_printf_i+0x240>)
 800b130:	2778      	movs	r7, #120	; 0x78
 800b132:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b136:	6823      	ldr	r3, [r4, #0]
 800b138:	6829      	ldr	r1, [r5, #0]
 800b13a:	061f      	lsls	r7, r3, #24
 800b13c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b140:	d402      	bmi.n	800b148 <_printf_i+0x18c>
 800b142:	065f      	lsls	r7, r3, #25
 800b144:	bf48      	it	mi
 800b146:	b2b6      	uxthmi	r6, r6
 800b148:	07df      	lsls	r7, r3, #31
 800b14a:	bf48      	it	mi
 800b14c:	f043 0320 	orrmi.w	r3, r3, #32
 800b150:	6029      	str	r1, [r5, #0]
 800b152:	bf48      	it	mi
 800b154:	6023      	strmi	r3, [r4, #0]
 800b156:	b91e      	cbnz	r6, 800b160 <_printf_i+0x1a4>
 800b158:	6823      	ldr	r3, [r4, #0]
 800b15a:	f023 0320 	bic.w	r3, r3, #32
 800b15e:	6023      	str	r3, [r4, #0]
 800b160:	2310      	movs	r3, #16
 800b162:	e7a7      	b.n	800b0b4 <_printf_i+0xf8>
 800b164:	4824      	ldr	r0, [pc, #144]	; (800b1f8 <_printf_i+0x23c>)
 800b166:	e7e4      	b.n	800b132 <_printf_i+0x176>
 800b168:	4615      	mov	r5, r2
 800b16a:	e7bd      	b.n	800b0e8 <_printf_i+0x12c>
 800b16c:	682b      	ldr	r3, [r5, #0]
 800b16e:	6826      	ldr	r6, [r4, #0]
 800b170:	6961      	ldr	r1, [r4, #20]
 800b172:	1d18      	adds	r0, r3, #4
 800b174:	6028      	str	r0, [r5, #0]
 800b176:	0635      	lsls	r5, r6, #24
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	d501      	bpl.n	800b180 <_printf_i+0x1c4>
 800b17c:	6019      	str	r1, [r3, #0]
 800b17e:	e002      	b.n	800b186 <_printf_i+0x1ca>
 800b180:	0670      	lsls	r0, r6, #25
 800b182:	d5fb      	bpl.n	800b17c <_printf_i+0x1c0>
 800b184:	8019      	strh	r1, [r3, #0]
 800b186:	2300      	movs	r3, #0
 800b188:	6123      	str	r3, [r4, #16]
 800b18a:	4615      	mov	r5, r2
 800b18c:	e7bc      	b.n	800b108 <_printf_i+0x14c>
 800b18e:	682b      	ldr	r3, [r5, #0]
 800b190:	1d1a      	adds	r2, r3, #4
 800b192:	602a      	str	r2, [r5, #0]
 800b194:	681d      	ldr	r5, [r3, #0]
 800b196:	6862      	ldr	r2, [r4, #4]
 800b198:	2100      	movs	r1, #0
 800b19a:	4628      	mov	r0, r5
 800b19c:	f7f5 f8b0 	bl	8000300 <memchr>
 800b1a0:	b108      	cbz	r0, 800b1a6 <_printf_i+0x1ea>
 800b1a2:	1b40      	subs	r0, r0, r5
 800b1a4:	6060      	str	r0, [r4, #4]
 800b1a6:	6863      	ldr	r3, [r4, #4]
 800b1a8:	6123      	str	r3, [r4, #16]
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1b0:	e7aa      	b.n	800b108 <_printf_i+0x14c>
 800b1b2:	6923      	ldr	r3, [r4, #16]
 800b1b4:	462a      	mov	r2, r5
 800b1b6:	4649      	mov	r1, r9
 800b1b8:	4640      	mov	r0, r8
 800b1ba:	47d0      	blx	sl
 800b1bc:	3001      	adds	r0, #1
 800b1be:	d0ad      	beq.n	800b11c <_printf_i+0x160>
 800b1c0:	6823      	ldr	r3, [r4, #0]
 800b1c2:	079b      	lsls	r3, r3, #30
 800b1c4:	d413      	bmi.n	800b1ee <_printf_i+0x232>
 800b1c6:	68e0      	ldr	r0, [r4, #12]
 800b1c8:	9b03      	ldr	r3, [sp, #12]
 800b1ca:	4298      	cmp	r0, r3
 800b1cc:	bfb8      	it	lt
 800b1ce:	4618      	movlt	r0, r3
 800b1d0:	e7a6      	b.n	800b120 <_printf_i+0x164>
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	4632      	mov	r2, r6
 800b1d6:	4649      	mov	r1, r9
 800b1d8:	4640      	mov	r0, r8
 800b1da:	47d0      	blx	sl
 800b1dc:	3001      	adds	r0, #1
 800b1de:	d09d      	beq.n	800b11c <_printf_i+0x160>
 800b1e0:	3501      	adds	r5, #1
 800b1e2:	68e3      	ldr	r3, [r4, #12]
 800b1e4:	9903      	ldr	r1, [sp, #12]
 800b1e6:	1a5b      	subs	r3, r3, r1
 800b1e8:	42ab      	cmp	r3, r5
 800b1ea:	dcf2      	bgt.n	800b1d2 <_printf_i+0x216>
 800b1ec:	e7eb      	b.n	800b1c6 <_printf_i+0x20a>
 800b1ee:	2500      	movs	r5, #0
 800b1f0:	f104 0619 	add.w	r6, r4, #25
 800b1f4:	e7f5      	b.n	800b1e2 <_printf_i+0x226>
 800b1f6:	bf00      	nop
 800b1f8:	0800b345 	.word	0x0800b345
 800b1fc:	0800b356 	.word	0x0800b356

0800b200 <memmove>:
 800b200:	4288      	cmp	r0, r1
 800b202:	b510      	push	{r4, lr}
 800b204:	eb01 0402 	add.w	r4, r1, r2
 800b208:	d902      	bls.n	800b210 <memmove+0x10>
 800b20a:	4284      	cmp	r4, r0
 800b20c:	4623      	mov	r3, r4
 800b20e:	d807      	bhi.n	800b220 <memmove+0x20>
 800b210:	1e43      	subs	r3, r0, #1
 800b212:	42a1      	cmp	r1, r4
 800b214:	d008      	beq.n	800b228 <memmove+0x28>
 800b216:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b21a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b21e:	e7f8      	b.n	800b212 <memmove+0x12>
 800b220:	4402      	add	r2, r0
 800b222:	4601      	mov	r1, r0
 800b224:	428a      	cmp	r2, r1
 800b226:	d100      	bne.n	800b22a <memmove+0x2a>
 800b228:	bd10      	pop	{r4, pc}
 800b22a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b22e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b232:	e7f7      	b.n	800b224 <memmove+0x24>

0800b234 <_sbrk_r>:
 800b234:	b538      	push	{r3, r4, r5, lr}
 800b236:	4d06      	ldr	r5, [pc, #24]	; (800b250 <_sbrk_r+0x1c>)
 800b238:	2300      	movs	r3, #0
 800b23a:	4604      	mov	r4, r0
 800b23c:	4608      	mov	r0, r1
 800b23e:	602b      	str	r3, [r5, #0]
 800b240:	f7f6 f9ba 	bl	80015b8 <_sbrk>
 800b244:	1c43      	adds	r3, r0, #1
 800b246:	d102      	bne.n	800b24e <_sbrk_r+0x1a>
 800b248:	682b      	ldr	r3, [r5, #0]
 800b24a:	b103      	cbz	r3, 800b24e <_sbrk_r+0x1a>
 800b24c:	6023      	str	r3, [r4, #0]
 800b24e:	bd38      	pop	{r3, r4, r5, pc}
 800b250:	2401d88c 	.word	0x2401d88c

0800b254 <memcpy>:
 800b254:	440a      	add	r2, r1
 800b256:	4291      	cmp	r1, r2
 800b258:	f100 33ff 	add.w	r3, r0, #4294967295
 800b25c:	d100      	bne.n	800b260 <memcpy+0xc>
 800b25e:	4770      	bx	lr
 800b260:	b510      	push	{r4, lr}
 800b262:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b266:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b26a:	4291      	cmp	r1, r2
 800b26c:	d1f9      	bne.n	800b262 <memcpy+0xe>
 800b26e:	bd10      	pop	{r4, pc}

0800b270 <_realloc_r>:
 800b270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b274:	4680      	mov	r8, r0
 800b276:	4614      	mov	r4, r2
 800b278:	460e      	mov	r6, r1
 800b27a:	b921      	cbnz	r1, 800b286 <_realloc_r+0x16>
 800b27c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b280:	4611      	mov	r1, r2
 800b282:	f7ff bc49 	b.w	800ab18 <_malloc_r>
 800b286:	b92a      	cbnz	r2, 800b294 <_realloc_r+0x24>
 800b288:	f7ff fbda 	bl	800aa40 <_free_r>
 800b28c:	4625      	mov	r5, r4
 800b28e:	4628      	mov	r0, r5
 800b290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b294:	f000 f81b 	bl	800b2ce <_malloc_usable_size_r>
 800b298:	4284      	cmp	r4, r0
 800b29a:	4607      	mov	r7, r0
 800b29c:	d802      	bhi.n	800b2a4 <_realloc_r+0x34>
 800b29e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b2a2:	d812      	bhi.n	800b2ca <_realloc_r+0x5a>
 800b2a4:	4621      	mov	r1, r4
 800b2a6:	4640      	mov	r0, r8
 800b2a8:	f7ff fc36 	bl	800ab18 <_malloc_r>
 800b2ac:	4605      	mov	r5, r0
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	d0ed      	beq.n	800b28e <_realloc_r+0x1e>
 800b2b2:	42bc      	cmp	r4, r7
 800b2b4:	4622      	mov	r2, r4
 800b2b6:	4631      	mov	r1, r6
 800b2b8:	bf28      	it	cs
 800b2ba:	463a      	movcs	r2, r7
 800b2bc:	f7ff ffca 	bl	800b254 <memcpy>
 800b2c0:	4631      	mov	r1, r6
 800b2c2:	4640      	mov	r0, r8
 800b2c4:	f7ff fbbc 	bl	800aa40 <_free_r>
 800b2c8:	e7e1      	b.n	800b28e <_realloc_r+0x1e>
 800b2ca:	4635      	mov	r5, r6
 800b2cc:	e7df      	b.n	800b28e <_realloc_r+0x1e>

0800b2ce <_malloc_usable_size_r>:
 800b2ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2d2:	1f18      	subs	r0, r3, #4
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	bfbc      	itt	lt
 800b2d8:	580b      	ldrlt	r3, [r1, r0]
 800b2da:	18c0      	addlt	r0, r0, r3
 800b2dc:	4770      	bx	lr
	...

0800b2e0 <_init>:
 800b2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2e2:	bf00      	nop
 800b2e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2e6:	bc08      	pop	{r3}
 800b2e8:	469e      	mov	lr, r3
 800b2ea:	4770      	bx	lr

0800b2ec <_fini>:
 800b2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ee:	bf00      	nop
 800b2f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2f2:	bc08      	pop	{r3}
 800b2f4:	469e      	mov	lr, r3
 800b2f6:	4770      	bx	lr
