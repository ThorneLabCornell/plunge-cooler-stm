
PlungeCooler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009734  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  080099e4  080099e4  000199e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009bac  08009bac  00019bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009bb4  08009bb4  00019bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009bb8  08009bb8  00019bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  08009bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00009e9c  24000080  08009c38  00020080  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24009f1c  08009c38  00029f1c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017b60  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000026fc  00000000  00000000  00037c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001120  00000000  00000000  0003a308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001048  00000000  00000000  0003b428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00002dca  00000000  00000000  0003c470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016ed0  00000000  00000000  0003f23a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014062d  00000000  00000000  0005610a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00196737  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004d0c  00000000  00000000  00196788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000080 	.word	0x24000080
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080099cc 	.word	0x080099cc

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000084 	.word	0x24000084
 80002ec:	080099cc 	.word	0x080099cc

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80006ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	db0b      	blt.n	80006ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006b6:	88fb      	ldrh	r3, [r7, #6]
 80006b8:	f003 021f 	and.w	r2, r3, #31
 80006bc:	4907      	ldr	r1, [pc, #28]	; (80006dc <__NVIC_EnableIRQ+0x38>)
 80006be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006c2:	095b      	lsrs	r3, r3, #5
 80006c4:	2001      	movs	r0, #1
 80006c6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000e100 	.word	0xe000e100

080006e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	6039      	str	r1, [r7, #0]
 80006ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80006ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	db0a      	blt.n	800070a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	490c      	ldr	r1, [pc, #48]	; (800072c <__NVIC_SetPriority+0x4c>)
 80006fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006fe:	0112      	lsls	r2, r2, #4
 8000700:	b2d2      	uxtb	r2, r2
 8000702:	440b      	add	r3, r1
 8000704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000708:	e00a      	b.n	8000720 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4908      	ldr	r1, [pc, #32]	; (8000730 <__NVIC_SetPriority+0x50>)
 8000710:	88fb      	ldrh	r3, [r7, #6]
 8000712:	f003 030f 	and.w	r3, r3, #15
 8000716:	3b04      	subs	r3, #4
 8000718:	0112      	lsls	r2, r2, #4
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	440b      	add	r3, r1
 800071e:	761a      	strb	r2, [r3, #24]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	e000e100 	.word	0xe000e100
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <move_tilt_steps>:
uint8_t rx_flag = 0;
int panPos = 0;
int tiltPos = 0;

/*** MOTOR CONTROL FUNCTIONS ***/
void move_tilt_steps(uint32_t delay, uint8_t dir, uint32_t num_steps) {
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b08b      	sub	sp, #44	; 0x2c
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	460b      	mov	r3, r1
 800073e:	607a      	str	r2, [r7, #4]
 8000740:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(TILT_EN_GPIO_Port, TILT_EN_Pin, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2140      	movs	r1, #64	; 0x40
 8000746:	4824      	ldr	r0, [pc, #144]	; (80007d8 <move_tilt_steps+0xa4>)
 8000748:	f002 fc36 	bl	8002fb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TILT_DIR_GPIO_Port, TILT_DIR_Pin, dir);
 800074c:	7afb      	ldrb	r3, [r7, #11]
 800074e:	461a      	mov	r2, r3
 8000750:	2120      	movs	r1, #32
 8000752:	4821      	ldr	r0, [pc, #132]	; (80007d8 <move_tilt_steps+0xa4>)
 8000754:	f002 fc30 	bl	8002fb8 <HAL_GPIO_WritePin>
	for(int i=0; i<num_steps; i++) {
 8000758:	2300      	movs	r3, #0
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
 800075c:	e012      	b.n	8000784 <move_tilt_steps+0x50>
		HAL_GPIO_WritePin(TILT_STP_GPIO_Port, TILT_STP_Pin, GPIO_PIN_SET);
 800075e:	2201      	movs	r2, #1
 8000760:	2120      	movs	r1, #32
 8000762:	481e      	ldr	r0, [pc, #120]	; (80007dc <move_tilt_steps+0xa8>)
 8000764:	f002 fc28 	bl	8002fb8 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 8000768:	68f8      	ldr	r0, [r7, #12]
 800076a:	f001 fbbd 	bl	8001ee8 <HAL_Delay>
		HAL_GPIO_WritePin(TILT_STP_GPIO_Port, TILT_STP_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	2120      	movs	r1, #32
 8000772:	481a      	ldr	r0, [pc, #104]	; (80007dc <move_tilt_steps+0xa8>)
 8000774:	f002 fc20 	bl	8002fb8 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 8000778:	68f8      	ldr	r0, [r7, #12]
 800077a:	f001 fbb5 	bl	8001ee8 <HAL_Delay>
	for(int i=0; i<num_steps; i++) {
 800077e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000780:	3301      	adds	r3, #1
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
 8000784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	429a      	cmp	r2, r3
 800078a:	d8e8      	bhi.n	800075e <move_tilt_steps+0x2a>


	}
	char b[] = "done steps\r\n";
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <move_tilt_steps+0xac>)
 800078e:	f107 0414 	add.w	r4, r7, #20
 8000792:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000794:	c407      	stmia	r4!, {r0, r1, r2}
 8000796:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fda7 	bl	80002f0 <strlen>
 80007a2:	4603      	mov	r3, r0
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	f107 0114 	add.w	r1, r7, #20
 80007aa:	f04f 33ff 	mov.w	r3, #4294967295
 80007ae:	480d      	ldr	r0, [pc, #52]	; (80007e4 <move_tilt_steps+0xb0>)
 80007b0:	f005 ff90 	bl	80066d4 <HAL_UART_Transmit>

	tiltPos += num_steps * (1 - 2 * dir); // + if dir is 0, else -
 80007b4:	7afb      	ldrb	r3, [r7, #11]
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	f1c3 0301 	rsb	r3, r3, #1
 80007bc:	461a      	mov	r2, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	fb02 f303 	mul.w	r3, r2, r3
 80007c4:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <move_tilt_steps+0xb4>)
 80007c6:	6812      	ldr	r2, [r2, #0]
 80007c8:	4413      	add	r3, r2
 80007ca:	461a      	mov	r2, r3
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <move_tilt_steps+0xb4>)
 80007ce:	601a      	str	r2, [r3, #0]
//	HAL_GPIO_WritePin(TILT_EN_GPIO_Port, TILT_EN_Pin, 1);

}
 80007d0:	bf00      	nop
 80007d2:	372c      	adds	r7, #44	; 0x2c
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd90      	pop	{r4, r7, pc}
 80007d8:	58020000 	.word	0x58020000
 80007dc:	58020800 	.word	0x58020800
 80007e0:	080099e4 	.word	0x080099e4
 80007e4:	24000180 	.word	0x24000180
 80007e8:	24009ee8 	.word	0x24009ee8

080007ec <move_tilt_deg>:

void move_tilt_deg(uint32_t degrees, uint8_t dir) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	70fb      	strb	r3, [r7, #3]
	move_tilt_steps(TILT_DEFAULT_DELAY, dir, degrees*TILT_DEG_TO_STEPS);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	22c8      	movs	r2, #200	; 0xc8
 80007fc:	fb03 f202 	mul.w	r2, r3, r2
 8000800:	78fb      	ldrb	r3, [r7, #3]
 8000802:	4619      	mov	r1, r3
 8000804:	200a      	movs	r0, #10
 8000806:	f7ff ff95 	bl	8000734 <move_tilt_steps>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <move_pan_steps>:

void move_pan_steps(uint32_t delay, uint8_t dir, uint32_t num_steps) {
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b08b      	sub	sp, #44	; 0x2c
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	460b      	mov	r3, r1
 800081e:	607a      	str	r2, [r7, #4]
 8000820:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(PAN_EN_GPIO_Port, PAN_EN_Pin, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000828:	4824      	ldr	r0, [pc, #144]	; (80008bc <move_pan_steps+0xa8>)
 800082a:	f002 fbc5 	bl	8002fb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PAN_DIR_GPIO_Port, PAN_DIR_Pin, dir);
 800082e:	7afb      	ldrb	r3, [r7, #11]
 8000830:	461a      	mov	r2, r3
 8000832:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000836:	4821      	ldr	r0, [pc, #132]	; (80008bc <move_pan_steps+0xa8>)
 8000838:	f002 fbbe 	bl	8002fb8 <HAL_GPIO_WritePin>
	for(int i=0; i<num_steps; i++) {
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
 8000840:	e012      	b.n	8000868 <move_pan_steps+0x54>
		HAL_GPIO_WritePin(PAN_STP_GPIO_Port, PAN_STP_Pin, GPIO_PIN_SET);
 8000842:	2201      	movs	r2, #1
 8000844:	2140      	movs	r1, #64	; 0x40
 8000846:	481e      	ldr	r0, [pc, #120]	; (80008c0 <move_pan_steps+0xac>)
 8000848:	f002 fbb6 	bl	8002fb8 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 800084c:	68f8      	ldr	r0, [r7, #12]
 800084e:	f001 fb4b 	bl	8001ee8 <HAL_Delay>
		HAL_GPIO_WritePin(PAN_STP_GPIO_Port, PAN_STP_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2140      	movs	r1, #64	; 0x40
 8000856:	481a      	ldr	r0, [pc, #104]	; (80008c0 <move_pan_steps+0xac>)
 8000858:	f002 fbae 	bl	8002fb8 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 800085c:	68f8      	ldr	r0, [r7, #12]
 800085e:	f001 fb43 	bl	8001ee8 <HAL_Delay>
	for(int i=0; i<num_steps; i++) {
 8000862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000864:	3301      	adds	r3, #1
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
 8000868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	429a      	cmp	r2, r3
 800086e:	d8e8      	bhi.n	8000842 <move_pan_steps+0x2e>
	}
	char b[] = "done steps\r\n";
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <move_pan_steps+0xb0>)
 8000872:	f107 0414 	add.w	r4, r7, #20
 8000876:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000878:	c407      	stmia	r4!, {r0, r1, r2}
 800087a:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff fd35 	bl	80002f0 <strlen>
 8000886:	4603      	mov	r3, r0
 8000888:	b29a      	uxth	r2, r3
 800088a:	f107 0114 	add.w	r1, r7, #20
 800088e:	f04f 33ff 	mov.w	r3, #4294967295
 8000892:	480d      	ldr	r0, [pc, #52]	; (80008c8 <move_pan_steps+0xb4>)
 8000894:	f005 ff1e 	bl	80066d4 <HAL_UART_Transmit>

	panPos += num_steps * (1 - 2 * dir); // + if dir is 0, else -
 8000898:	7afb      	ldrb	r3, [r7, #11]
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	f1c3 0301 	rsb	r3, r3, #1
 80008a0:	461a      	mov	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	fb02 f303 	mul.w	r3, r2, r3
 80008a8:	4a08      	ldr	r2, [pc, #32]	; (80008cc <move_pan_steps+0xb8>)
 80008aa:	6812      	ldr	r2, [r2, #0]
 80008ac:	4413      	add	r3, r2
 80008ae:	461a      	mov	r2, r3
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <move_pan_steps+0xb8>)
 80008b2:	601a      	str	r2, [r3, #0]
//	HAL_GPIO_WritePin(PAN_EN_GPIO_Port, PAN_EN_Pin, 1);

}
 80008b4:	bf00      	nop
 80008b6:	372c      	adds	r7, #44	; 0x2c
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd90      	pop	{r4, r7, pc}
 80008bc:	58020400 	.word	0x58020400
 80008c0:	58020800 	.word	0x58020800
 80008c4:	080099e4 	.word	0x080099e4
 80008c8:	24000180 	.word	0x24000180
 80008cc:	24009ee4 	.word	0x24009ee4

080008d0 <move_pan_deg>:

void move_pan_deg(uint32_t degrees, uint8_t dir) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	460b      	mov	r3, r1
 80008da:	70fb      	strb	r3, [r7, #3]
	move_pan_steps(PAN_DEFAULT_DELAY, dir, degrees*PAN_DEG_TO_STEPS);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	22c8      	movs	r2, #200	; 0xc8
 80008e0:	fb03 f202 	mul.w	r2, r3, r2
 80008e4:	78fb      	ldrb	r3, [r7, #3]
 80008e6:	4619      	mov	r1, r3
 80008e8:	200a      	movs	r0, #10
 80008ea:	f7ff ff93 	bl	8000814 <move_pan_steps>
	char pos[30];
	sprintf(pos, "panPos: %d\r\n", panPos);
 80008ee:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <move_pan_deg+0x54>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	f107 0308 	add.w	r3, r7, #8
 80008f6:	490c      	ldr	r1, [pc, #48]	; (8000928 <move_pan_deg+0x58>)
 80008f8:	4618      	mov	r0, r3
 80008fa:	f008 fbf9 	bl	80090f0 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)pos, strlen(pos), HAL_MAX_DELAY);
 80008fe:	f107 0308 	add.w	r3, r7, #8
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fcf4 	bl	80002f0 <strlen>
 8000908:	4603      	mov	r3, r0
 800090a:	b29a      	uxth	r2, r3
 800090c:	f107 0108 	add.w	r1, r7, #8
 8000910:	f04f 33ff 	mov.w	r3, #4294967295
 8000914:	4805      	ldr	r0, [pc, #20]	; (800092c <move_pan_deg+0x5c>)
 8000916:	f005 fedd 	bl	80066d4 <HAL_UART_Transmit>

}
 800091a:	bf00      	nop
 800091c:	3728      	adds	r7, #40	; 0x28
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	24009ee4 	.word	0x24009ee4
 8000928:	080099f4 	.word	0x080099f4
 800092c:	24000180 	.word	0x24000180

08000930 <ack>:
void start_plunge(void) {

}

/*** USART Rx HANDLE ***/
void ack(void) {
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart3, tx_ack, 3, HAL_MAX_DELAY);
 8000934:	f04f 33ff 	mov.w	r3, #4294967295
 8000938:	2203      	movs	r2, #3
 800093a:	4903      	ldr	r1, [pc, #12]	; (8000948 <ack+0x18>)
 800093c:	4803      	ldr	r0, [pc, #12]	; (800094c <ack+0x1c>)
 800093e:	f005 fec9 	bl	80066d4 <HAL_UART_Transmit>
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	24000000 	.word	0x24000000
 800094c:	24000180 	.word	0x24000180

08000950 <bad>:

void bad(void) {
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, tx_bad, 3, HAL_MAX_DELAY);
 8000954:	f04f 33ff 	mov.w	r3, #4294967295
 8000958:	2203      	movs	r2, #3
 800095a:	4903      	ldr	r1, [pc, #12]	; (8000968 <bad+0x18>)
 800095c:	4803      	ldr	r0, [pc, #12]	; (800096c <bad+0x1c>)
 800095e:	f005 feb9 	bl	80066d4 <HAL_UART_Transmit>
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	24000004 	.word	0x24000004
 800096c:	24000180 	.word	0x24000180

08000970 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
    rxBuffer[rxIndex] = received_character[0];
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <HAL_UART_RxCpltCallback+0x54>)
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	461a      	mov	r2, r3
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_UART_RxCpltCallback+0x58>)
 8000980:	7819      	ldrb	r1, [r3, #0]
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_UART_RxCpltCallback+0x5c>)
 8000984:	5499      	strb	r1, [r3, r2]
	rxIndex++;
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <HAL_UART_RxCpltCallback+0x54>)
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	3301      	adds	r3, #1
 800098c:	b29a      	uxth	r2, r3
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <HAL_UART_RxCpltCallback+0x54>)
 8000990:	801a      	strh	r2, [r3, #0]

	if (received_character[0] == '\n' || received_character[0] == '\r') {
 8000992:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <HAL_UART_RxCpltCallback+0x58>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b0a      	cmp	r3, #10
 8000998:	d003      	beq.n	80009a2 <HAL_UART_RxCpltCallback+0x32>
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <HAL_UART_RxCpltCallback+0x58>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b0d      	cmp	r3, #13
 80009a0:	d106      	bne.n	80009b0 <HAL_UART_RxCpltCallback+0x40>
    	rxIndex = 0;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <HAL_UART_RxCpltCallback+0x54>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	801a      	strh	r2, [r3, #0]
    	rx_flag = 1;
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <HAL_UART_RxCpltCallback+0x60>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	701a      	strb	r2, [r3, #0]
 80009ae:	e005      	b.n	80009bc <HAL_UART_RxCpltCallback+0x4c>
    } else {
        HAL_UART_Receive_IT(&huart3, received_character, 1);
 80009b0:	2201      	movs	r2, #1
 80009b2:	4905      	ldr	r1, [pc, #20]	; (80009c8 <HAL_UART_RxCpltCallback+0x58>)
 80009b4:	4807      	ldr	r0, [pc, #28]	; (80009d4 <HAL_UART_RxCpltCallback+0x64>)
 80009b6:	f005 ff1b 	bl	80067f0 <HAL_UART_Receive_IT>
    }
}
 80009ba:	bf00      	nop
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	24009edc 	.word	0x24009edc
 80009c8:	24009ee0 	.word	0x24009ee0
 80009cc:	24009e78 	.word	0x24009e78
 80009d0:	24009ee1 	.word	0x24009ee1
 80009d4:	24000180 	.word	0x24000180

080009d8 <rx_handle>:

void rx_handle(void) {
 80009d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009da:	b0bb      	sub	sp, #236	; 0xec
 80009dc:	af06      	add	r7, sp, #24
	char num[30];
	sprintf(num, "RX0: %d\r\n", rxBuffer[0]);
 80009de:	4b62      	ldr	r3, [pc, #392]	; (8000b68 <rx_handle+0x190>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	461a      	mov	r2, r3
 80009e4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80009e8:	4960      	ldr	r1, [pc, #384]	; (8000b6c <rx_handle+0x194>)
 80009ea:	4618      	mov	r0, r3
 80009ec:	f008 fb80 	bl	80090f0 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)num, strlen(num), HAL_MAX_DELAY);
 80009f0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fc7b 	bl	80002f0 <strlen>
 80009fa:	4603      	mov	r3, r0
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295
 8000a06:	485a      	ldr	r0, [pc, #360]	; (8000b70 <rx_handle+0x198>)
 8000a08:	f005 fe64 	bl	80066d4 <HAL_UART_Transmit>
	switch(rxBuffer[0]) {
 8000a0c:	4b56      	ldr	r3, [pc, #344]	; (8000b68 <rx_handle+0x190>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	3b31      	subs	r3, #49	; 0x31
 8000a12:	2b05      	cmp	r3, #5
 8000a14:	f200 826a 	bhi.w	8000eec <rx_handle+0x514>
 8000a18:	a201      	add	r2, pc, #4	; (adr r2, 8000a20 <rx_handle+0x48>)
 8000a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a1e:	bf00      	nop
 8000a20:	08000a39 	.word	0x08000a39
 8000a24:	08000afd 	.word	0x08000afd
 8000a28:	08000eed 	.word	0x08000eed
 8000a2c:	08000df1 	.word	0x08000df1
 8000a30:	08000e2f 	.word	0x08000e2f
 8000a34:	08000eb1 	.word	0x08000eb1
    	case MOVE: ;
			uint32_t amount = (rxBuffer[2]-48) << 24 | (rxBuffer[3]-48) << 16 | (rxBuffer[4]-48) << 8 | (rxBuffer[5]-48);
 8000a38:	4b4b      	ldr	r3, [pc, #300]	; (8000b68 <rx_handle+0x190>)
 8000a3a:	789b      	ldrb	r3, [r3, #2]
 8000a3c:	3b30      	subs	r3, #48	; 0x30
 8000a3e:	061a      	lsls	r2, r3, #24
 8000a40:	4b49      	ldr	r3, [pc, #292]	; (8000b68 <rx_handle+0x190>)
 8000a42:	78db      	ldrb	r3, [r3, #3]
 8000a44:	3b30      	subs	r3, #48	; 0x30
 8000a46:	041b      	lsls	r3, r3, #16
 8000a48:	431a      	orrs	r2, r3
 8000a4a:	4b47      	ldr	r3, [pc, #284]	; (8000b68 <rx_handle+0x190>)
 8000a4c:	791b      	ldrb	r3, [r3, #4]
 8000a4e:	3b30      	subs	r3, #48	; 0x30
 8000a50:	021b      	lsls	r3, r3, #8
 8000a52:	431a      	orrs	r2, r3
 8000a54:	4b44      	ldr	r3, [pc, #272]	; (8000b68 <rx_handle+0x190>)
 8000a56:	795b      	ldrb	r3, [r3, #5]
 8000a58:	3b30      	subs	r3, #48	; 0x30
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			char response[100];
			sprintf(response, "%c%c received this amount: %d\r\n", (int)rxBuffer[0], (int)rxBuffer[1], (int)amount);
 8000a60:	4b41      	ldr	r3, [pc, #260]	; (8000b68 <rx_handle+0x190>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b40      	ldr	r3, [pc, #256]	; (8000b68 <rx_handle+0x190>)
 8000a68:	785b      	ldrb	r3, [r3, #1]
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000a70:	4638      	mov	r0, r7
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	460b      	mov	r3, r1
 8000a76:	493f      	ldr	r1, [pc, #252]	; (8000b74 <rx_handle+0x19c>)
 8000a78:	f008 fb3a 	bl	80090f0 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
 8000a7c:	463b      	mov	r3, r7
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fc36 	bl	80002f0 <strlen>
 8000a84:	4603      	mov	r3, r0
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	4639      	mov	r1, r7
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	4838      	ldr	r0, [pc, #224]	; (8000b70 <rx_handle+0x198>)
 8000a90:	f005 fe20 	bl	80066d4 <HAL_UART_Transmit>

			switch(rxBuffer[1]) {
 8000a94:	4b34      	ldr	r3, [pc, #208]	; (8000b68 <rx_handle+0x190>)
 8000a96:	785b      	ldrb	r3, [r3, #1]
 8000a98:	3b31      	subs	r3, #49	; 0x31
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	d82a      	bhi.n	8000af4 <rx_handle+0x11c>
 8000a9e:	a201      	add	r2, pc, #4	; (adr r2, 8000aa4 <rx_handle+0xcc>)
 8000aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa4:	08000ab5 	.word	0x08000ab5
 8000aa8:	08000ac5 	.word	0x08000ac5
 8000aac:	08000ad5 	.word	0x08000ad5
 8000ab0:	08000ae5 	.word	0x08000ae5
				case UP: ;
					move_tilt_deg(amount, DIR_TILT_UP);
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8000aba:	f7ff fe97 	bl	80007ec <move_tilt_deg>
					ack();
 8000abe:	f7ff ff37 	bl	8000930 <ack>
					break;
 8000ac2:	e01a      	b.n	8000afa <rx_handle+0x122>
				case DOWN: ;
					move_tilt_deg(amount, DIR_TILT_DOWN);
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8000aca:	f7ff fe8f 	bl	80007ec <move_tilt_deg>
					ack();
 8000ace:	f7ff ff2f 	bl	8000930 <ack>
					break;
 8000ad2:	e012      	b.n	8000afa <rx_handle+0x122>
				case LEFT: ;
					move_pan_deg(amount, DIR_PAN_LEFT);
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8000ada:	f7ff fef9 	bl	80008d0 <move_pan_deg>
					ack();
 8000ade:	f7ff ff27 	bl	8000930 <ack>
					break;
 8000ae2:	e00a      	b.n	8000afa <rx_handle+0x122>
				case RIGHT: ;
					move_pan_deg(amount, DIR_PAN_RIGHT);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8000aea:	f7ff fef1 	bl	80008d0 <move_pan_deg>
					ack();
 8000aee:	f7ff ff1f 	bl	8000930 <ack>
					break;
 8000af2:	e002      	b.n	8000afa <rx_handle+0x122>
				default: ;
					bad();
 8000af4:	f7ff ff2c 	bl	8000950 <bad>
					break;
 8000af8:	bf00      	nop
			}

			break;
 8000afa:	e1f7      	b.n	8000eec <rx_handle+0x514>

		case PLUNGE: ;
		/* retrieve info */
			plunge_done_flag = 0;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <rx_handle+0x1a0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]

			uint32_t brake_pos = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
			timepoint_pos = 0;
 8000b08:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <rx_handle+0x1a4>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
			for(int i=1; i<=6; i++) {
 8000b0e:	2301      	movs	r3, #1
 8000b10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000b14:	e020      	b.n	8000b58 <rx_handle+0x180>
				 char digit = rxBuffer[i];
 8000b16:	4a14      	ldr	r2, [pc, #80]	; (8000b68 <rx_handle+0x190>)
 8000b18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000b1c:	4413      	add	r3, r2
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
				 if (digit >= '0' && digit <= '9') {
 8000b24:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8000b28:	2b2f      	cmp	r3, #47	; 0x2f
 8000b2a:	d910      	bls.n	8000b4e <rx_handle+0x176>
 8000b2c:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8000b30:	2b39      	cmp	r3, #57	; 0x39
 8000b32:	d80c      	bhi.n	8000b4e <rx_handle+0x176>
					 brake_pos = (brake_pos * 10) + (digit - '0');	// Shift the existing result left by one decimal place and add the digit value
 8000b34:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8000b38:	4613      	mov	r3, r2
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	4413      	add	r3, r2
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	461a      	mov	r2, r3
 8000b42:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8000b46:	4413      	add	r3, r2
 8000b48:	3b30      	subs	r3, #48	; 0x30
 8000b4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
			for(int i=1; i<=6; i++) {
 8000b4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000b52:	3301      	adds	r3, #1
 8000b54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000b58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000b5c:	2b06      	cmp	r3, #6
 8000b5e:	ddda      	ble.n	8000b16 <rx_handle+0x13e>
				 }
			}
			for(int i=7; i<=12; i++) {
 8000b60:	2307      	movs	r3, #7
 8000b62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000b66:	e02c      	b.n	8000bc2 <rx_handle+0x1ea>
 8000b68:	24009e78 	.word	0x24009e78
 8000b6c:	08009a04 	.word	0x08009a04
 8000b70:	24000180 	.word	0x24000180
 8000b74:	08009a10 	.word	0x08009a10
 8000b78:	24009e70 	.word	0x24009e70
 8000b7c:	24009e5c 	.word	0x24009e5c
				 char digit = rxBuffer[i];
 8000b80:	4aba      	ldr	r2, [pc, #744]	; (8000e6c <rx_handle+0x494>)
 8000b82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000b86:	4413      	add	r3, r2
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
				 if (digit >= '0' && digit <= '9') {
 8000b8e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000b92:	2b2f      	cmp	r3, #47	; 0x2f
 8000b94:	d910      	bls.n	8000bb8 <rx_handle+0x1e0>
 8000b96:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000b9a:	2b39      	cmp	r3, #57	; 0x39
 8000b9c:	d80c      	bhi.n	8000bb8 <rx_handle+0x1e0>
					 timepoint_pos = (timepoint_pos * 10) + (digit - '0');	// Shift the existing result left by one decimal place and add the digit value
 8000b9e:	4bb4      	ldr	r3, [pc, #720]	; (8000e70 <rx_handle+0x498>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	4413      	add	r3, r2
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	461a      	mov	r2, r3
 8000bac:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000bb0:	4413      	add	r3, r2
 8000bb2:	3b30      	subs	r3, #48	; 0x30
 8000bb4:	4aae      	ldr	r2, [pc, #696]	; (8000e70 <rx_handle+0x498>)
 8000bb6:	6013      	str	r3, [r2, #0]
			for(int i=7; i<=12; i++) {
 8000bb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000bc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000bc6:	2b0c      	cmp	r3, #12
 8000bc8:	ddda      	ble.n	8000b80 <rx_handle+0x1a8>
				 }
			}

			char num[30];
			sprintf(num, "brake_pos: %d, timepoint_pos: %d\r\n", brake_pos, timepoint_pos);
 8000bca:	4ba9      	ldr	r3, [pc, #676]	; (8000e70 <rx_handle+0x498>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8000bd2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8000bd6:	49a7      	ldr	r1, [pc, #668]	; (8000e74 <rx_handle+0x49c>)
 8000bd8:	f008 fa8a 	bl	80090f0 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*)num, strlen(num), HAL_MAX_DELAY);
 8000bdc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fb85 	bl	80002f0 <strlen>
 8000be6:	4603      	mov	r3, r0
 8000be8:	b29a      	uxth	r2, r3
 8000bea:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf2:	48a1      	ldr	r0, [pc, #644]	; (8000e78 <rx_handle+0x4a0>)
 8000bf4:	f005 fd6e 	bl	80066d4 <HAL_UART_Transmit>

			/***TODO: figure out what angle to tilt to given timepoint_pos***/

			/* reset tracking variables */
			log_position = 0;
 8000bf8:	4ba0      	ldr	r3, [pc, #640]	; (8000e7c <rx_handle+0x4a4>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
			running_sum = 0;
 8000bfe:	4ba0      	ldr	r3, [pc, #640]	; (8000e80 <rx_handle+0x4a8>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
			memset(posLog, 0, sizeof(posLog));
 8000c04:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000c08:	2100      	movs	r1, #0
 8000c0a:	489e      	ldr	r0, [pc, #632]	; (8000e84 <rx_handle+0x4ac>)
 8000c0c:	f008 fa68 	bl	80090e0 <memset>
			DEPOSITED = 0;
 8000c10:	4b9d      	ldr	r3, [pc, #628]	; (8000e88 <rx_handle+0x4b0>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]

			/* dispense position calculation */
			//						    us								mm						mm/s	   s->us
			dispense_delay_clocks = 10000;//(DISPENSE_LATENCY + (TARGET_DIST_ORTH*cos(tiltPos*M_PI/180))/DROP_SPEED*1000*1000)*US_TO_TICKS;
 8000c16:	4b9d      	ldr	r3, [pc, #628]	; (8000e8c <rx_handle+0x4b4>)
 8000c18:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c1c:	601a      	str	r2, [r3, #0]
			// ^ delay in ticks between dispensing and drop hit target in x direction
			sprintf(num, "dispense_delay_clocks: %d\r\n", (int)dispense_delay_clocks);
 8000c1e:	4b9b      	ldr	r3, [pc, #620]	; (8000e8c <rx_handle+0x4b4>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	461a      	mov	r2, r3
 8000c24:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c28:	4999      	ldr	r1, [pc, #612]	; (8000e90 <rx_handle+0x4b8>)
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f008 fa60 	bl	80090f0 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*)num, strlen(num), HAL_MAX_DELAY);
 8000c30:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fb5b 	bl	80002f0 <strlen>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
 8000c46:	488c      	ldr	r0, [pc, #560]	; (8000e78 <rx_handle+0x4a0>)
 8000c48:	f005 fd44 	bl	80066d4 <HAL_UART_Transmit>


			HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 1); //disengage brake
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2140      	movs	r1, #64	; 0x40
 8000c50:	4890      	ldr	r0, [pc, #576]	; (8000e94 <rx_handle+0x4bc>)
 8000c52:	f002 f9b1 	bl	8002fb8 <HAL_GPIO_WritePin>


			TIM4->CR1  &= ~TIM_CR1_CEN;
 8000c56:	4b90      	ldr	r3, [pc, #576]	; (8000e98 <rx_handle+0x4c0>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a8f      	ldr	r2, [pc, #572]	; (8000e98 <rx_handle+0x4c0>)
 8000c5c:	f023 0301 	bic.w	r3, r3, #1
 8000c60:	6013      	str	r3, [r2, #0]

			TIM4->CNT   =  0;				// 100 included here and in ARR to make sure it doesnt immediately underflow if it vibrates up
 8000c62:	4b8d      	ldr	r3, [pc, #564]	; (8000e98 <rx_handle+0x4c0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->ARR 	= brake_pos; 	// Counter rolls over at brake_pos which triggers an interrupt handled in TIM2_IRQHandler (stm32h7xx_it.c)
 8000c68:	4a8b      	ldr	r2, [pc, #556]	; (8000e98 <rx_handle+0x4c0>)
 8000c6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000c6e:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM4->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000c70:	4b89      	ldr	r3, [pc, #548]	; (8000e98 <rx_handle+0x4c0>)
 8000c72:	691b      	ldr	r3, [r3, #16]
 8000c74:	4a88      	ldr	r2, [pc, #544]	; (8000e98 <rx_handle+0x4c0>)
 8000c76:	f023 0301 	bic.w	r3, r3, #1
 8000c7a:	6113      	str	r3, [r2, #16]
			TIM4->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000c7c:	4b86      	ldr	r3, [pc, #536]	; (8000e98 <rx_handle+0x4c0>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a85      	ldr	r2, [pc, #532]	; (8000e98 <rx_handle+0x4c0>)
 8000c82:	f023 0302 	bic.w	r3, r3, #2
 8000c86:	6013      	str	r3, [r2, #0]
			TIM4->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000c88:	4b83      	ldr	r3, [pc, #524]	; (8000e98 <rx_handle+0x4c0>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	4a82      	ldr	r2, [pc, #520]	; (8000e98 <rx_handle+0x4c0>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	60d3      	str	r3, [r2, #12]
			TIM4->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000c94:	4b80      	ldr	r3, [pc, #512]	; (8000e98 <rx_handle+0x4c0>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a7f      	ldr	r2, [pc, #508]	; (8000e98 <rx_handle+0x4c0>)
 8000c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c9e:	6013      	str	r3, [r2, #0]



			/* configuring encoder counter */
			TIM2->CR1  &= ~TIM_CR1_CEN;
 8000ca0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000caa:	f023 0301 	bic.w	r3, r3, #1
 8000cae:	6013      	str	r3, [r2, #0]

			TIM2->CNT   =  0;				// 100 included here and in ARR to make sure it doesnt immediately underflow if it vibrates up
 8000cb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	625a      	str	r2, [r3, #36]	; 0x24
			TIM2->ARR 	= brake_pos; 	// Counter rolls over at brake_pos which triggers an interrupt handled in TIM2_IRQHandler (stm32h7xx_it.c)
 8000cb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000cc0:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM2->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000cc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ccc:	f023 0301 	bic.w	r3, r3, #1
 8000cd0:	6113      	str	r3, [r2, #16]
			TIM2->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000cd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cdc:	f023 0302 	bic.w	r3, r3, #2
 8000ce0:	6013      	str	r3, [r2, #0]
			TIM2->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000ce2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	60d3      	str	r3, [r2, #12]
			TIM2->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000cf2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d00:	6013      	str	r3, [r2, #0]

			TIM2->CR1  |=  TIM_CR1_CEN; 	//start counter
 8000d02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6013      	str	r3, [r2, #0]

			/* configuring data logging timer */
			TIM5->CR1  &= ~TIM_CR1_CEN; // Start TIM5 to commence data collection
 8000d12:	4b62      	ldr	r3, [pc, #392]	; (8000e9c <rx_handle+0x4c4>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a61      	ldr	r2, [pc, #388]	; (8000e9c <rx_handle+0x4c4>)
 8000d18:	f023 0301 	bic.w	r3, r3, #1
 8000d1c:	6013      	str	r3, [r2, #0]

			TIM5-> CNT  = 0;				//
 8000d1e:	4b5f      	ldr	r3, [pc, #380]	; (8000e9c <rx_handle+0x4c4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	625a      	str	r2, [r3, #36]	; 0x24
			TIM5->ARR 	= CLOCKS_PER_LOG; 	// check positione interval
 8000d24:	4b5d      	ldr	r3, [pc, #372]	; (8000e9c <rx_handle+0x4c4>)
 8000d26:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d2a:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM5->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000d2c:	4b5b      	ldr	r3, [pc, #364]	; (8000e9c <rx_handle+0x4c4>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a5a      	ldr	r2, [pc, #360]	; (8000e9c <rx_handle+0x4c4>)
 8000d32:	f023 0302 	bic.w	r3, r3, #2
 8000d36:	6013      	str	r3, [r2, #0]
			TIM5->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000d38:	4b58      	ldr	r3, [pc, #352]	; (8000e9c <rx_handle+0x4c4>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	4a57      	ldr	r2, [pc, #348]	; (8000e9c <rx_handle+0x4c4>)
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	60d3      	str	r3, [r2, #12]
			TIM5->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000d44:	4b55      	ldr	r3, [pc, #340]	; (8000e9c <rx_handle+0x4c4>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a54      	ldr	r2, [pc, #336]	; (8000e9c <rx_handle+0x4c4>)
 8000d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d4e:	6013      	str	r3, [r2, #0]
			TIM5->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000d50:	4b52      	ldr	r3, [pc, #328]	; (8000e9c <rx_handle+0x4c4>)
 8000d52:	691b      	ldr	r3, [r3, #16]
 8000d54:	4a51      	ldr	r2, [pc, #324]	; (8000e9c <rx_handle+0x4c4>)
 8000d56:	f023 0301 	bic.w	r3, r3, #1
 8000d5a:	6113      	str	r3, [r2, #16]

			TIM5->CR1  |= TIM_CR1_CEN; // Start TIM5 to commence data collection
 8000d5c:	4b4f      	ldr	r3, [pc, #316]	; (8000e9c <rx_handle+0x4c4>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a4e      	ldr	r2, [pc, #312]	; (8000e9c <rx_handle+0x4c4>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	6013      	str	r3, [r2, #0]

			/* for debug, transmit encoder position */
			uint32_t enc_pos;
			for(int i=0; i<200; i++) {
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000d6e:	e03a      	b.n	8000de6 <rx_handle+0x40e>
				char response[100] = {0};
 8000d70:	2300      	movs	r3, #0
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	2260      	movs	r2, #96	; 0x60
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f008 f9b0 	bl	80090e0 <memset>
				enc_pos = TIM2->CNT;
 8000d80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
				sprintf(response, "enc: %d; disp_f: %d; runsum: %d; tim4: %d; log_pos: %d, clocks_to_disp: %d; disp: %d\r\n", (int)enc_pos, (int)disp_flag, (int)running_sum, (int)TIM4->CNT, (int)log_position, (int)TIM4->ARR, (int)DEPOSITED);
 8000d8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000d8e:	4b44      	ldr	r3, [pc, #272]	; (8000ea0 <rx_handle+0x4c8>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	469c      	mov	ip, r3
 8000d94:	4b3a      	ldr	r3, [pc, #232]	; (8000e80 <rx_handle+0x4a8>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4b3f      	ldr	r3, [pc, #252]	; (8000e98 <rx_handle+0x4c0>)
 8000d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9e:	461c      	mov	r4, r3
 8000da0:	4b36      	ldr	r3, [pc, #216]	; (8000e7c <rx_handle+0x4a4>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	461d      	mov	r5, r3
 8000da6:	4b3c      	ldr	r3, [pc, #240]	; (8000e98 <rx_handle+0x4c0>)
 8000da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000daa:	461e      	mov	r6, r3
 8000dac:	4b36      	ldr	r3, [pc, #216]	; (8000e88 <rx_handle+0x4b0>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4638      	mov	r0, r7
 8000db2:	9304      	str	r3, [sp, #16]
 8000db4:	9603      	str	r6, [sp, #12]
 8000db6:	9502      	str	r5, [sp, #8]
 8000db8:	9401      	str	r4, [sp, #4]
 8000dba:	9100      	str	r1, [sp, #0]
 8000dbc:	4663      	mov	r3, ip
 8000dbe:	4939      	ldr	r1, [pc, #228]	; (8000ea4 <rx_handle+0x4cc>)
 8000dc0:	f008 f996 	bl	80090f0 <siprintf>
				HAL_UART_Transmit(&huart3, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fa92 	bl	80002f0 <strlen>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	4639      	mov	r1, r7
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd6:	4828      	ldr	r0, [pc, #160]	; (8000e78 <rx_handle+0x4a0>)
 8000dd8:	f005 fc7c 	bl	80066d4 <HAL_UART_Transmit>
			for(int i=0; i<200; i++) {
 8000ddc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000de0:	3301      	adds	r3, #1
 8000de2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000de6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000dea:	2bc7      	cmp	r3, #199	; 0xc7
 8000dec:	ddc0      	ble.n	8000d70 <rx_handle+0x398>
			}
			break;
 8000dee:	e07d      	b.n	8000eec <rx_handle+0x514>

		case RELEASE: ;
			HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 1); //disengage brake
 8000df0:	2201      	movs	r2, #1
 8000df2:	2140      	movs	r1, #64	; 0x40
 8000df4:	4827      	ldr	r0, [pc, #156]	; (8000e94 <rx_handle+0x4bc>)
 8000df6:	f002 f8df 	bl	8002fb8 <HAL_GPIO_WritePin>
			char j[100] = {0};
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	603b      	str	r3, [r7, #0]
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	2260      	movs	r2, #96	; 0x60
 8000e02:	2100      	movs	r1, #0
 8000e04:	4618      	mov	r0, r3
 8000e06:	f008 f96b 	bl	80090e0 <memset>
			sprintf(j, "RELEASE\r\n");
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	4926      	ldr	r1, [pc, #152]	; (8000ea8 <rx_handle+0x4d0>)
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f008 f96e 	bl	80090f0 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*)j, strlen(j), HAL_MAX_DELAY);
 8000e14:	463b      	mov	r3, r7
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fa6a 	bl	80002f0 <strlen>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	4639      	mov	r1, r7
 8000e22:	f04f 33ff 	mov.w	r3, #4294967295
 8000e26:	4814      	ldr	r0, [pc, #80]	; (8000e78 <rx_handle+0x4a0>)
 8000e28:	f005 fc54 	bl	80066d4 <HAL_UART_Transmit>

			break;
 8000e2c:	e05e      	b.n	8000eec <rx_handle+0x514>
		case '5': ;
			HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 0); //engage brake
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2140      	movs	r1, #64	; 0x40
 8000e32:	4818      	ldr	r0, [pc, #96]	; (8000e94 <rx_handle+0x4bc>)
 8000e34:	f002 f8c0 	bl	8002fb8 <HAL_GPIO_WritePin>
			char k[100] = {0};
 8000e38:	2300      	movs	r3, #0
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	2260      	movs	r2, #96	; 0x60
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f008 f94c 	bl	80090e0 <memset>
			sprintf(k, "BRAKE\r\n");
 8000e48:	463b      	mov	r3, r7
 8000e4a:	4918      	ldr	r1, [pc, #96]	; (8000eac <rx_handle+0x4d4>)
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f008 f94f 	bl	80090f0 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*)k, strlen(k), HAL_MAX_DELAY);
 8000e52:	463b      	mov	r3, r7
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fa4b 	bl	80002f0 <strlen>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	4639      	mov	r1, r7
 8000e60:	f04f 33ff 	mov.w	r3, #4294967295
 8000e64:	4804      	ldr	r0, [pc, #16]	; (8000e78 <rx_handle+0x4a0>)
 8000e66:	f005 fc35 	bl	80066d4 <HAL_UART_Transmit>

			break;
 8000e6a:	e03f      	b.n	8000eec <rx_handle+0x514>
 8000e6c:	24009e78 	.word	0x24009e78
 8000e70:	24009e5c 	.word	0x24009e5c
 8000e74:	08009a30 	.word	0x08009a30
 8000e78:	24000180 	.word	0x24000180
 8000e7c:	24009e54 	.word	0x24009e54
 8000e80:	24009e58 	.word	0x24009e58
 8000e84:	24000214 	.word	0x24000214
 8000e88:	24009e71 	.word	0x24009e71
 8000e8c:	24009e60 	.word	0x24009e60
 8000e90:	08009a54 	.word	0x08009a54
 8000e94:	58020400 	.word	0x58020400
 8000e98:	40000800 	.word	0x40000800
 8000e9c:	40000c00 	.word	0x40000c00
 8000ea0:	24009e64 	.word	0x24009e64
 8000ea4:	08009a70 	.word	0x08009a70
 8000ea8:	08009ac8 	.word	0x08009ac8
 8000eac:	08009ad4 	.word	0x08009ad4
		case '6': ;
			char lm[100] = {0};
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	603b      	str	r3, [r7, #0]
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	2260      	movs	r2, #96	; 0x60
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f008 f910 	bl	80090e0 <memset>
			sprintf(lm, "current position: %d\r\n braked at: %d\r\n", TIM2->CNT, posn_braked_at);
 8000ec0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ec4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ec6:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <rx_handle+0x554>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4638      	mov	r0, r7
 8000ecc:	4918      	ldr	r1, [pc, #96]	; (8000f30 <rx_handle+0x558>)
 8000ece:	f008 f90f 	bl	80090f0 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*)lm, strlen(lm), HAL_MAX_DELAY);
 8000ed2:	463b      	mov	r3, r7
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fa0b 	bl	80002f0 <strlen>
 8000eda:	4603      	mov	r3, r0
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	4639      	mov	r1, r7
 8000ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee4:	4813      	ldr	r0, [pc, #76]	; (8000f34 <rx_handle+0x55c>)
 8000ee6:	f005 fbf5 	bl	80066d4 <HAL_UART_Transmit>
			break;
 8000eea:	bf00      	nop

    }
	char b[] = "done handling\r\n";
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <rx_handle+0x560>)
 8000eee:	f107 0484 	add.w	r4, r7, #132	; 0x84
 8000ef2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ef4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart3, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8000ef8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff f9f7 	bl	80002f0 <strlen>
 8000f02:	4603      	mov	r3, r0
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0e:	4809      	ldr	r0, [pc, #36]	; (8000f34 <rx_handle+0x55c>)
 8000f10:	f005 fbe0 	bl	80066d4 <HAL_UART_Transmit>

    rx_flag = 0;
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <rx_handle+0x564>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart3, received_character, 1);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4908      	ldr	r1, [pc, #32]	; (8000f40 <rx_handle+0x568>)
 8000f1e:	4805      	ldr	r0, [pc, #20]	; (8000f34 <rx_handle+0x55c>)
 8000f20:	f005 fc66 	bl	80067f0 <HAL_UART_Receive_IT>
}
 8000f24:	bf00      	nop
 8000f26:	37d4      	adds	r7, #212	; 0xd4
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f2c:	24009e6c 	.word	0x24009e6c
 8000f30:	08009adc 	.word	0x08009adc
 8000f34:	24000180 	.word	0x24000180
 8000f38:	08009b04 	.word	0x08009b04
 8000f3c:	24009ee1 	.word	0x24009ee1
 8000f40:	24009ee0 	.word	0x24009ee0

08000f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f44:	b5b0      	push	{r4, r5, r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4a:	f000 ff3b 	bl	8001dc4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4e:	f000 f8ab 	bl	80010a8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f52:	f000 fa6d 	bl	8001430 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f56:	f000 f91d 	bl	8001194 <MX_TIM2_Init>
  MX_USB_OTG_HS_USB_Init();
 8000f5a:	f000 fa61 	bl	8001420 <MX_USB_OTG_HS_USB_Init>
  MX_USART3_UART_Init();
 8000f5e:	f000 fa13 	bl	8001388 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8000f62:	f000 f9c3 	bl	80012ec <MX_TIM5_Init>
  MX_TIM4_Init();
 8000f66:	f000 f969 	bl	800123c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, received_character, 1); // initialize interrupts
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4944      	ldr	r1, [pc, #272]	; (8001080 <main+0x13c>)
 8000f6e:	4845      	ldr	r0, [pc, #276]	; (8001084 <main+0x140>)
 8000f70:	f005 fc3e 	bl	80067f0 <HAL_UART_Receive_IT>

  char msg[] = "program start \r\n";
 8000f74:	4b44      	ldr	r3, [pc, #272]	; (8001088 <main+0x144>)
 8000f76:	f107 0410 	add.w	r4, r7, #16
 8000f7a:	461d      	mov	r5, r3
 8000f7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f80:	682b      	ldr	r3, [r5, #0]
 8000f82:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff f9b1 	bl	80002f0 <strlen>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	f107 0110 	add.w	r1, r7, #16
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9a:	483a      	ldr	r0, [pc, #232]	; (8001084 <main+0x140>)
 8000f9c:	f005 fb9a 	bl	80066d4 <HAL_UART_Transmit>

  // TIM2 for encoder tick counting
  NVIC_SetPriority(TIM2_IRQn, 1); // Braking is priority as long as dispense isnt happening
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	201c      	movs	r0, #28
 8000fa4:	f7ff fb9c 	bl	80006e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000fa8:	201c      	movs	r0, #28
 8000faa:	f7ff fb7b 	bl	80006a4 <__NVIC_EnableIRQ>

  // TIM5 for logkeeping and speed calculations and TIM4 setup
  NVIC_SetPriority(TIM5_IRQn, 2); // Log keeping should be interruptable
 8000fae:	2102      	movs	r1, #2
 8000fb0:	2032      	movs	r0, #50	; 0x32
 8000fb2:	f7ff fb95 	bl	80006e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 8000fb6:	2032      	movs	r0, #50	; 0x32
 8000fb8:	f7ff fb74 	bl	80006a4 <__NVIC_EnableIRQ>

  // TIM4 for dispense timing after commenced by TIM5
  NVIC_SetPriority(TIM4_IRQn, 0); // Dispense accuracy is top priority
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	201e      	movs	r0, #30
 8000fc0:	f7ff fb8e 	bl	80006e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 8000fc4:	201e      	movs	r0, #30
 8000fc6:	f7ff fb6d 	bl	80006a4 <__NVIC_EnableIRQ>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1) {
	  if(rx_flag) rx_handle();
 8000fca:	4b30      	ldr	r3, [pc, #192]	; (800108c <main+0x148>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <main+0x92>
 8000fd2:	f7ff fd01 	bl	80009d8 <rx_handle>
//				  dispense();
//			  }
//		  }
//	  }

	  if(plunge_done_flag) {
 8000fd6:	4b2e      	ldr	r3, [pc, #184]	; (8001090 <main+0x14c>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d037      	beq.n	800104e <main+0x10a>
		  char rn[] = {'\r', '\n'};
 8000fde:	f640 230d 	movw	r3, #2573	; 0xa0d
 8000fe2:	81bb      	strh	r3, [r7, #12]
		  HAL_UART_Transmit(&huart3, (uint8_t*)ACK, 3, HAL_MAX_DELAY);
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe8:	2203      	movs	r2, #3
 8000fea:	492a      	ldr	r1, [pc, #168]	; (8001094 <main+0x150>)
 8000fec:	4825      	ldr	r0, [pc, #148]	; (8001084 <main+0x140>)
 8000fee:	f005 fb71 	bl	80066d4 <HAL_UART_Transmit>

		  for(int i=0 ; i<log_position; i++) {
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff6:	e01b      	b.n	8001030 <main+0xec>
			  HAL_UART_Transmit(&huart3, (uint8_t*)posLog[i], 4, HAL_MAX_DELAY);
 8000ff8:	4a27      	ldr	r2, [pc, #156]	; (8001098 <main+0x154>)
 8000ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001000:	4619      	mov	r1, r3
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	2204      	movs	r2, #4
 8001008:	481e      	ldr	r0, [pc, #120]	; (8001084 <main+0x140>)
 800100a:	f005 fb63 	bl	80066d4 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart3, (uint8_t*)rn, strlen(rn), HAL_MAX_DELAY);
 800100e:	f107 030c 	add.w	r3, r7, #12
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff f96c 	bl	80002f0 <strlen>
 8001018:	4603      	mov	r3, r0
 800101a:	b29a      	uxth	r2, r3
 800101c:	f107 010c 	add.w	r1, r7, #12
 8001020:	f04f 33ff 	mov.w	r3, #4294967295
 8001024:	4817      	ldr	r0, [pc, #92]	; (8001084 <main+0x140>)
 8001026:	f005 fb55 	bl	80066d4 <HAL_UART_Transmit>
		  for(int i=0 ; i<log_position; i++) {
 800102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102c:	3301      	adds	r3, #1
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
 8001030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001032:	4b1a      	ldr	r3, [pc, #104]	; (800109c <main+0x158>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	429a      	cmp	r2, r3
 8001038:	d3de      	bcc.n	8000ff8 <main+0xb4>
		  }
		  HAL_UART_Transmit(&huart3, (uint8_t*)ACK, 3, HAL_MAX_DELAY);
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
 800103e:	2203      	movs	r2, #3
 8001040:	4914      	ldr	r1, [pc, #80]	; (8001094 <main+0x150>)
 8001042:	4810      	ldr	r0, [pc, #64]	; (8001084 <main+0x140>)
 8001044:	f005 fb46 	bl	80066d4 <HAL_UART_Transmit>

		  plunge_done_flag = 0;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <main+0x14c>)
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
	  }
	  if(DEPOSITED) {
 800104e:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <main+0x15c>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d0b9      	beq.n	8000fca <main+0x86>
		  char m[]  = "DEPOSITED\r\n";
 8001056:	4a13      	ldr	r2, [pc, #76]	; (80010a4 <main+0x160>)
 8001058:	463b      	mov	r3, r7
 800105a:	ca07      	ldmia	r2, {r0, r1, r2}
 800105c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		  HAL_UART_Transmit(&huart3, (uint8_t*)m, strlen(m), HAL_MAX_DELAY);
 8001060:	463b      	mov	r3, r7
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff f944 	bl	80002f0 <strlen>
 8001068:	4603      	mov	r3, r0
 800106a:	b29a      	uxth	r2, r3
 800106c:	4639      	mov	r1, r7
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
 8001072:	4804      	ldr	r0, [pc, #16]	; (8001084 <main+0x140>)
 8001074:	f005 fb2e 	bl	80066d4 <HAL_UART_Transmit>
		  DEPOSITED = 0;
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <main+0x15c>)
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
	  if(rx_flag) rx_handle();
 800107e:	e7a4      	b.n	8000fca <main+0x86>
 8001080:	24009ee0 	.word	0x24009ee0
 8001084:	24000180 	.word	0x24000180
 8001088:	08009b14 	.word	0x08009b14
 800108c:	24009ee1 	.word	0x24009ee1
 8001090:	24009e70 	.word	0x24009e70
 8001094:	00310d0a 	.word	0x00310d0a
 8001098:	24000214 	.word	0x24000214
 800109c:	24009e54 	.word	0x24009e54
 80010a0:	24009e71 	.word	0x24009e71
 80010a4:	08009b28 	.word	0x08009b28

080010a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b09c      	sub	sp, #112	; 0x70
 80010ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b2:	224c      	movs	r2, #76	; 0x4c
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f008 f812 	bl	80090e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	2220      	movs	r2, #32
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f008 f80c 	bl	80090e0 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80010c8:	4b30      	ldr	r3, [pc, #192]	; (800118c <SystemClock_Config+0xe4>)
 80010ca:	f04f 32ff 	mov.w	r2, #4294967295
 80010ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80010d2:	2004      	movs	r0, #4
 80010d4:	f001 ff8a 	bl	8002fec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80010d8:	2300      	movs	r3, #0
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	4b2c      	ldr	r3, [pc, #176]	; (8001190 <SystemClock_Config+0xe8>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	4a2b      	ldr	r2, [pc, #172]	; (8001190 <SystemClock_Config+0xe8>)
 80010e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010e6:	6193      	str	r3, [r2, #24]
 80010e8:	4b29      	ldr	r3, [pc, #164]	; (8001190 <SystemClock_Config+0xe8>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010f0:	603b      	str	r3, [r7, #0]
 80010f2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010f4:	bf00      	nop
 80010f6:	4b26      	ldr	r3, [pc, #152]	; (8001190 <SystemClock_Config+0xe8>)
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001102:	d1f8      	bne.n	80010f6 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001104:	2321      	movs	r3, #33	; 0x21
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001108:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800110e:	2301      	movs	r3, #1
 8001110:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001112:	2302      	movs	r3, #2
 8001114:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001116:	2302      	movs	r3, #2
 8001118:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800111a:	2301      	movs	r3, #1
 800111c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800111e:	2318      	movs	r3, #24
 8001120:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001122:	2302      	movs	r3, #2
 8001124:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001126:	2304      	movs	r3, #4
 8001128:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800112a:	2302      	movs	r3, #2
 800112c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800112e:	230c      	movs	r3, #12
 8001130:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001132:	2300      	movs	r3, #0
 8001134:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800113a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113e:	4618      	mov	r0, r3
 8001140:	f001 ffae 	bl	80030a0 <HAL_RCC_OscConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800114a:	f000 fabf 	bl	80016cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800114e:	233f      	movs	r3, #63	; 0x3f
 8001150:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001152:	2303      	movs	r3, #3
 8001154:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001162:	2300      	movs	r3, #0
 8001164:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800116a:	2300      	movs	r3, #0
 800116c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	2102      	movs	r1, #2
 8001172:	4618      	mov	r0, r3
 8001174:	f002 fbc6 	bl	8003904 <HAL_RCC_ClockConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <SystemClock_Config+0xda>
  {
    Error_Handler();
 800117e:	f000 faa5 	bl	80016cc <Error_Handler>
  }
}
 8001182:	bf00      	nop
 8001184:	3770      	adds	r7, #112	; 0x70
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	58024400 	.word	0x58024400
 8001190:	58024800 	.word	0x58024800

08001194 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08c      	sub	sp, #48	; 0x30
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	2224      	movs	r2, #36	; 0x24
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f007 ff9c 	bl	80090e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a8:	463b      	mov	r3, r7
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011b2:	4b21      	ldr	r3, [pc, #132]	; (8001238 <MX_TIM2_Init+0xa4>)
 80011b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011ba:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <MX_TIM2_Init+0xa4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c0:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <MX_TIM2_Init+0xa4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80011c6:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <MX_TIM2_Init+0xa4>)
 80011c8:	f04f 32ff 	mov.w	r2, #4294967295
 80011cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ce:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <MX_TIM2_Init+0xa4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d4:	4b18      	ldr	r3, [pc, #96]	; (8001238 <MX_TIM2_Init+0xa4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80011da:	2301      	movs	r3, #1
 80011dc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011e2:	2301      	movs	r3, #1
 80011e4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011ee:	2300      	movs	r3, #0
 80011f0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011f2:	2301      	movs	r3, #1
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80011fe:	f107 030c 	add.w	r3, r7, #12
 8001202:	4619      	mov	r1, r3
 8001204:	480c      	ldr	r0, [pc, #48]	; (8001238 <MX_TIM2_Init+0xa4>)
 8001206:	f004 fd41 	bl	8005c8c <HAL_TIM_Encoder_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001210:	f000 fa5c 	bl	80016cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001214:	2300      	movs	r3, #0
 8001216:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001218:	2300      	movs	r3, #0
 800121a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800121c:	463b      	mov	r3, r7
 800121e:	4619      	mov	r1, r3
 8001220:	4805      	ldr	r0, [pc, #20]	; (8001238 <MX_TIM2_Init+0xa4>)
 8001222:	f005 f95b 	bl	80064dc <HAL_TIMEx_MasterConfigSynchronization>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800122c:	f000 fa4e 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	3730      	adds	r7, #48	; 0x30
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	2400009c 	.word	0x2400009c

0800123c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001242:	f107 0310 	add.w	r3, r7, #16
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800125a:	4b22      	ldr	r3, [pc, #136]	; (80012e4 <MX_TIM4_Init+0xa8>)
 800125c:	4a22      	ldr	r2, [pc, #136]	; (80012e8 <MX_TIM4_Init+0xac>)
 800125e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001260:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <MX_TIM4_Init+0xa8>)
 8001262:	2200      	movs	r2, #0
 8001264:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001266:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <MX_TIM4_Init+0xa8>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800126c:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <MX_TIM4_Init+0xa8>)
 800126e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001272:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001274:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <MX_TIM4_Init+0xa8>)
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127a:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <MX_TIM4_Init+0xa8>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001280:	4818      	ldr	r0, [pc, #96]	; (80012e4 <MX_TIM4_Init+0xa8>)
 8001282:	f004 fcab 	bl	8005bdc <HAL_TIM_Base_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800128c:	f000 fa1e 	bl	80016cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001290:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001294:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001296:	f107 0310 	add.w	r3, r7, #16
 800129a:	4619      	mov	r1, r3
 800129c:	4811      	ldr	r0, [pc, #68]	; (80012e4 <MX_TIM4_Init+0xa8>)
 800129e:	f004 febb 	bl	8006018 <HAL_TIM_ConfigClockSource>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80012a8:	f000 fa10 	bl	80016cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	4619      	mov	r1, r3
 80012b8:	480a      	ldr	r0, [pc, #40]	; (80012e4 <MX_TIM4_Init+0xa8>)
 80012ba:	f005 f90f 	bl	80064dc <HAL_TIMEx_MasterConfigSynchronization>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80012c4:	f000 fa02 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
	TIM4->CR1 &= ~TIM_CR1_CEN; 	// dont start it
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <MX_TIM4_Init+0xac>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a06      	ldr	r2, [pc, #24]	; (80012e8 <MX_TIM4_Init+0xac>)
 80012ce:	f023 0301 	bic.w	r3, r3, #1
 80012d2:	6013      	str	r3, [r2, #0]
	TIM4->CNT = 0;				//reset it
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <MX_TIM4_Init+0xac>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE END TIM4_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	3720      	adds	r7, #32
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	240000e8 	.word	0x240000e8
 80012e8:	40000800 	.word	0x40000800

080012ec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f2:	f107 0310 	add.w	r3, r7, #16
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800130a:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <MX_TIM5_Init+0x94>)
 800130c:	4a1d      	ldr	r2, [pc, #116]	; (8001384 <MX_TIM5_Init+0x98>)
 800130e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001310:	4b1b      	ldr	r3, [pc, #108]	; (8001380 <MX_TIM5_Init+0x94>)
 8001312:	2200      	movs	r2, #0
 8001314:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001316:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <MX_TIM5_Init+0x94>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800131c:	4b18      	ldr	r3, [pc, #96]	; (8001380 <MX_TIM5_Init+0x94>)
 800131e:	f04f 32ff 	mov.w	r2, #4294967295
 8001322:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001324:	4b16      	ldr	r3, [pc, #88]	; (8001380 <MX_TIM5_Init+0x94>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <MX_TIM5_Init+0x94>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001330:	4813      	ldr	r0, [pc, #76]	; (8001380 <MX_TIM5_Init+0x94>)
 8001332:	f004 fc53 	bl	8005bdc <HAL_TIM_Base_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800133c:	f000 f9c6 	bl	80016cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001344:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001346:	f107 0310 	add.w	r3, r7, #16
 800134a:	4619      	mov	r1, r3
 800134c:	480c      	ldr	r0, [pc, #48]	; (8001380 <MX_TIM5_Init+0x94>)
 800134e:	f004 fe63 	bl	8006018 <HAL_TIM_ConfigClockSource>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001358:	f000 f9b8 	bl	80016cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135c:	2300      	movs	r3, #0
 800135e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	4619      	mov	r1, r3
 8001368:	4805      	ldr	r0, [pc, #20]	; (8001380 <MX_TIM5_Init+0x94>)
 800136a:	f005 f8b7 	bl	80064dc <HAL_TIMEx_MasterConfigSynchronization>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001374:	f000 f9aa 	bl	80016cc <Error_Handler>
//  TIM5->DIER |= TIM_DIER_UIE; // Enable update interrupt
//  TIM5->ARR = ENC_DMA_POLL_FREQ; // Timebase

  /* USER CODE END TIM5_Init 2 */

}
 8001378:	bf00      	nop
 800137a:	3720      	adds	r7, #32
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	24000134 	.word	0x24000134
 8001384:	40000c00 	.word	0x40000c00

08001388 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800138c:	4b22      	ldr	r3, [pc, #136]	; (8001418 <MX_USART3_UART_Init+0x90>)
 800138e:	4a23      	ldr	r2, [pc, #140]	; (800141c <MX_USART3_UART_Init+0x94>)
 8001390:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001392:	4b21      	ldr	r3, [pc, #132]	; (8001418 <MX_USART3_UART_Init+0x90>)
 8001394:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001398:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800139a:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <MX_USART3_UART_Init+0x90>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013a0:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <MX_USART3_UART_Init+0x90>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013a6:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <MX_USART3_UART_Init+0x90>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013ac:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <MX_USART3_UART_Init+0x90>)
 80013ae:	220c      	movs	r2, #12
 80013b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b2:	4b19      	ldr	r3, [pc, #100]	; (8001418 <MX_USART3_UART_Init+0x90>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b8:	4b17      	ldr	r3, [pc, #92]	; (8001418 <MX_USART3_UART_Init+0x90>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013be:	4b16      	ldr	r3, [pc, #88]	; (8001418 <MX_USART3_UART_Init+0x90>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013c4:	4b14      	ldr	r3, [pc, #80]	; (8001418 <MX_USART3_UART_Init+0x90>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ca:	4b13      	ldr	r3, [pc, #76]	; (8001418 <MX_USART3_UART_Init+0x90>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013d0:	4811      	ldr	r0, [pc, #68]	; (8001418 <MX_USART3_UART_Init+0x90>)
 80013d2:	f005 f92f 	bl	8006634 <HAL_UART_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013dc:	f000 f976 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013e0:	2100      	movs	r1, #0
 80013e2:	480d      	ldr	r0, [pc, #52]	; (8001418 <MX_USART3_UART_Init+0x90>)
 80013e4:	f007 fd87 	bl	8008ef6 <HAL_UARTEx_SetTxFifoThreshold>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013ee:	f000 f96d 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013f2:	2100      	movs	r1, #0
 80013f4:	4808      	ldr	r0, [pc, #32]	; (8001418 <MX_USART3_UART_Init+0x90>)
 80013f6:	f007 fdbc 	bl	8008f72 <HAL_UARTEx_SetRxFifoThreshold>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001400:	f000 f964 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001404:	4804      	ldr	r0, [pc, #16]	; (8001418 <MX_USART3_UART_Init+0x90>)
 8001406:	f007 fd3d 	bl	8008e84 <HAL_UARTEx_DisableFifoMode>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001410:	f000 f95c 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	24000180 	.word	0x24000180
 800141c:	40004800 	.word	0x40004800

08001420 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08e      	sub	sp, #56	; 0x38
 8001434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001446:	4b9a      	ldr	r3, [pc, #616]	; (80016b0 <MX_GPIO_Init+0x280>)
 8001448:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800144c:	4a98      	ldr	r2, [pc, #608]	; (80016b0 <MX_GPIO_Init+0x280>)
 800144e:	f043 0304 	orr.w	r3, r3, #4
 8001452:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001456:	4b96      	ldr	r3, [pc, #600]	; (80016b0 <MX_GPIO_Init+0x280>)
 8001458:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	623b      	str	r3, [r7, #32]
 8001462:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001464:	4b92      	ldr	r3, [pc, #584]	; (80016b0 <MX_GPIO_Init+0x280>)
 8001466:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800146a:	4a91      	ldr	r2, [pc, #580]	; (80016b0 <MX_GPIO_Init+0x280>)
 800146c:	f043 0320 	orr.w	r3, r3, #32
 8001470:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001474:	4b8e      	ldr	r3, [pc, #568]	; (80016b0 <MX_GPIO_Init+0x280>)
 8001476:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800147a:	f003 0320 	and.w	r3, r3, #32
 800147e:	61fb      	str	r3, [r7, #28]
 8001480:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001482:	4b8b      	ldr	r3, [pc, #556]	; (80016b0 <MX_GPIO_Init+0x280>)
 8001484:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001488:	4a89      	ldr	r2, [pc, #548]	; (80016b0 <MX_GPIO_Init+0x280>)
 800148a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800148e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001492:	4b87      	ldr	r3, [pc, #540]	; (80016b0 <MX_GPIO_Init+0x280>)
 8001494:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149c:	61bb      	str	r3, [r7, #24]
 800149e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a0:	4b83      	ldr	r3, [pc, #524]	; (80016b0 <MX_GPIO_Init+0x280>)
 80014a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014a6:	4a82      	ldr	r2, [pc, #520]	; (80016b0 <MX_GPIO_Init+0x280>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014b0:	4b7f      	ldr	r3, [pc, #508]	; (80016b0 <MX_GPIO_Init+0x280>)
 80014b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014be:	4b7c      	ldr	r3, [pc, #496]	; (80016b0 <MX_GPIO_Init+0x280>)
 80014c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014c4:	4a7a      	ldr	r2, [pc, #488]	; (80016b0 <MX_GPIO_Init+0x280>)
 80014c6:	f043 0302 	orr.w	r3, r3, #2
 80014ca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014ce:	4b78      	ldr	r3, [pc, #480]	; (80016b0 <MX_GPIO_Init+0x280>)
 80014d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014dc:	4b74      	ldr	r3, [pc, #464]	; (80016b0 <MX_GPIO_Init+0x280>)
 80014de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014e2:	4a73      	ldr	r2, [pc, #460]	; (80016b0 <MX_GPIO_Init+0x280>)
 80014e4:	f043 0308 	orr.w	r3, r3, #8
 80014e8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014ec:	4b70      	ldr	r3, [pc, #448]	; (80016b0 <MX_GPIO_Init+0x280>)
 80014ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014fa:	4b6d      	ldr	r3, [pc, #436]	; (80016b0 <MX_GPIO_Init+0x280>)
 80014fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001500:	4a6b      	ldr	r2, [pc, #428]	; (80016b0 <MX_GPIO_Init+0x280>)
 8001502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001506:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800150a:	4b69      	ldr	r3, [pc, #420]	; (80016b0 <MX_GPIO_Init+0x280>)
 800150c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001518:	4b65      	ldr	r3, [pc, #404]	; (80016b0 <MX_GPIO_Init+0x280>)
 800151a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800151e:	4a64      	ldr	r2, [pc, #400]	; (80016b0 <MX_GPIO_Init+0x280>)
 8001520:	f043 0310 	orr.w	r3, r3, #16
 8001524:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001528:	4b61      	ldr	r3, [pc, #388]	; (80016b0 <MX_GPIO_Init+0x280>)
 800152a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800152e:	f003 0310 	and.w	r3, r3, #16
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800153c:	485d      	ldr	r0, [pc, #372]	; (80016b4 <MX_GPIO_Init+0x284>)
 800153e:	f001 fd3b 	bl	8002fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TILT_DIR_Pin|TILT_EN_Pin, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	2160      	movs	r1, #96	; 0x60
 8001546:	485c      	ldr	r0, [pc, #368]	; (80016b8 <MX_GPIO_Init+0x288>)
 8001548:	f001 fd36 	bl	8002fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TILT_STP_Pin|PAN_STP_Pin, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	2160      	movs	r1, #96	; 0x60
 8001550:	485a      	ldr	r0, [pc, #360]	; (80016bc <MX_GPIO_Init+0x28c>)
 8001552:	f001 fd31 	bl	8002fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|BRAKE_Pin|PAN_DIR_Pin|PAN_EN_Pin, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	f244 3140 	movw	r1, #17216	; 0x4340
 800155c:	4858      	ldr	r0, [pc, #352]	; (80016c0 <MX_GPIO_Init+0x290>)
 800155e:	f001 fd2b 	bl	8002fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	2102      	movs	r1, #2
 8001566:	4857      	ldr	r0, [pc, #348]	; (80016c4 <MX_GPIO_Init+0x294>)
 8001568:	f001 fd26 	bl	8002fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800156c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001572:	2300      	movs	r3, #0
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800157a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157e:	4619      	mov	r1, r3
 8001580:	484e      	ldr	r0, [pc, #312]	; (80016bc <MX_GPIO_Init+0x28c>)
 8001582:	f001 fb69 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158c:	2301      	movs	r3, #1
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	2300      	movs	r3, #0
 8001596:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159c:	4619      	mov	r1, r3
 800159e:	4845      	ldr	r0, [pc, #276]	; (80016b4 <MX_GPIO_Init+0x284>)
 80015a0:	f001 fb5a 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : TILT_DIR_Pin TILT_EN_Pin */
  GPIO_InitStruct.Pin = TILT_DIR_Pin|TILT_EN_Pin;
 80015a4:	2360      	movs	r3, #96	; 0x60
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a8:	2301      	movs	r3, #1
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2300      	movs	r3, #0
 80015b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b8:	4619      	mov	r1, r3
 80015ba:	483f      	ldr	r0, [pc, #252]	; (80016b8 <MX_GPIO_Init+0x288>)
 80015bc:	f001 fb4c 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : TILT_STP_Pin PAN_STP_Pin */
  GPIO_InitStruct.Pin = TILT_STP_Pin|PAN_STP_Pin;
 80015c0:	2360      	movs	r3, #96	; 0x60
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c4:	2301      	movs	r3, #1
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	2300      	movs	r3, #0
 80015ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d4:	4619      	mov	r1, r3
 80015d6:	4839      	ldr	r0, [pc, #228]	; (80016bc <MX_GPIO_Init+0x28c>)
 80015d8:	f001 fb3e 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin PAN_DIR_Pin PAN_EN_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|PAN_DIR_Pin|PAN_EN_Pin;
 80015dc:	f44f 4386 	mov.w	r3, #17152	; 0x4300
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e2:	2301      	movs	r3, #1
 80015e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f2:	4619      	mov	r1, r3
 80015f4:	4832      	ldr	r0, [pc, #200]	; (80016c0 <MX_GPIO_Init+0x290>)
 80015f6:	f001 fb2f 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80015fa:	2380      	movs	r3, #128	; 0x80
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160c:	4619      	mov	r1, r3
 800160e:	482e      	ldr	r0, [pc, #184]	; (80016c8 <MX_GPIO_Init+0x298>)
 8001610:	f001 fb22 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001614:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161a:	2300      	movs	r3, #0
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001626:	4619      	mov	r1, r3
 8001628:	4823      	ldr	r0, [pc, #140]	; (80016b8 <MX_GPIO_Init+0x288>)
 800162a:	f001 fb15 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800162e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001634:	2302      	movs	r3, #2
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	2300      	movs	r3, #0
 800163e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001640:	230a      	movs	r3, #10
 8001642:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001648:	4619      	mov	r1, r3
 800164a:	481b      	ldr	r0, [pc, #108]	; (80016b8 <MX_GPIO_Init+0x288>)
 800164c:	f001 fb04 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001650:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001666:	4619      	mov	r1, r3
 8001668:	4813      	ldr	r0, [pc, #76]	; (80016b8 <MX_GPIO_Init+0x288>)
 800166a:	f001 faf5 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : BRAKE_Pin */
  GPIO_InitStruct.Pin = BRAKE_Pin;
 800166e:	2340      	movs	r3, #64	; 0x40
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001672:	2311      	movs	r3, #17
 8001674:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2300      	movs	r3, #0
 800167c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BRAKE_GPIO_Port, &GPIO_InitStruct);
 800167e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001682:	4619      	mov	r1, r3
 8001684:	480e      	ldr	r0, [pc, #56]	; (80016c0 <MX_GPIO_Init+0x290>)
 8001686:	f001 fae7 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800168a:	2302      	movs	r3, #2
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168e:	2301      	movs	r3, #1
 8001690:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	2300      	movs	r3, #0
 8001698:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800169a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169e:	4619      	mov	r1, r3
 80016a0:	4808      	ldr	r0, [pc, #32]	; (80016c4 <MX_GPIO_Init+0x294>)
 80016a2:	f001 fad9 	bl	8002c58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016a6:	bf00      	nop
 80016a8:	3738      	adds	r7, #56	; 0x38
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	58024400 	.word	0x58024400
 80016b4:	58021400 	.word	0x58021400
 80016b8:	58020000 	.word	0x58020000
 80016bc:	58020800 	.word	0x58020800
 80016c0:	58020400 	.word	0x58020400
 80016c4:	58021000 	.word	0x58021000
 80016c8:	58021800 	.word	0x58021800

080016cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d0:	b672      	cpsid	i
}
 80016d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <Error_Handler+0x8>
	...

080016d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016de:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <HAL_MspInit+0x30>)
 80016e0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80016e4:	4a08      	ldr	r2, [pc, #32]	; (8001708 <HAL_MspInit+0x30>)
 80016e6:	f043 0302 	orr.w	r3, r3, #2
 80016ea:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_MspInit+0x30>)
 80016f0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	58024400 	.word	0x58024400

0800170c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	; 0x28
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800172c:	d135      	bne.n	800179a <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800172e:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001730:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001734:	4a1b      	ldr	r2, [pc, #108]	; (80017a4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800173e:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001740:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174c:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <HAL_TIM_Encoder_MspInit+0x98>)
 800174e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001752:	4a14      	ldr	r2, [pc, #80]	; (80017a4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <HAL_TIM_Encoder_MspInit+0x98>)
 800175e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PLUNGE_ENC_A_Pin|PLUNGE_ENC_B_Pin;
 800176a:	2303      	movs	r3, #3
 800176c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2300      	movs	r3, #0
 8001778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800177a:	2301      	movs	r3, #1
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	4619      	mov	r1, r3
 8001784:	4808      	ldr	r0, [pc, #32]	; (80017a8 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001786:	f001 fa67 	bl	8002c58 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	2100      	movs	r1, #0
 800178e:	201c      	movs	r0, #28
 8001790:	f000 fcc9 	bl	8002126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001794:	201c      	movs	r0, #28
 8001796:	f000 fce0 	bl	800215a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800179a:	bf00      	nop
 800179c:	3728      	adds	r7, #40	; 0x28
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	58024400 	.word	0x58024400
 80017a8:	58020000 	.word	0x58020000

080017ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a1d      	ldr	r2, [pc, #116]	; (8001830 <HAL_TIM_Base_MspInit+0x84>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d117      	bne.n	80017ee <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017be:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <HAL_TIM_Base_MspInit+0x88>)
 80017c0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80017c4:	4a1b      	ldr	r2, [pc, #108]	; (8001834 <HAL_TIM_Base_MspInit+0x88>)
 80017c6:	f043 0304 	orr.w	r3, r3, #4
 80017ca:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80017ce:	4b19      	ldr	r3, [pc, #100]	; (8001834 <HAL_TIM_Base_MspInit+0x88>)
 80017d0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80017dc:	2200      	movs	r2, #0
 80017de:	2100      	movs	r1, #0
 80017e0:	201e      	movs	r0, #30
 80017e2:	f000 fca0 	bl	8002126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80017e6:	201e      	movs	r0, #30
 80017e8:	f000 fcb7 	bl	800215a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80017ec:	e01b      	b.n	8001826 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM5)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a11      	ldr	r2, [pc, #68]	; (8001838 <HAL_TIM_Base_MspInit+0x8c>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d116      	bne.n	8001826 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80017f8:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <HAL_TIM_Base_MspInit+0x88>)
 80017fa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80017fe:	4a0d      	ldr	r2, [pc, #52]	; (8001834 <HAL_TIM_Base_MspInit+0x88>)
 8001800:	f043 0308 	orr.w	r3, r3, #8
 8001804:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <HAL_TIM_Base_MspInit+0x88>)
 800180a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001816:	2200      	movs	r2, #0
 8001818:	2100      	movs	r1, #0
 800181a:	2032      	movs	r0, #50	; 0x32
 800181c:	f000 fc83 	bl	8002126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001820:	2032      	movs	r0, #50	; 0x32
 8001822:	f000 fc9a 	bl	800215a <HAL_NVIC_EnableIRQ>
}
 8001826:	bf00      	nop
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40000800 	.word	0x40000800
 8001834:	58024400 	.word	0x58024400
 8001838:	40000c00 	.word	0x40000c00

0800183c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b0ba      	sub	sp, #232	; 0xe8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001854:	f107 0310 	add.w	r3, r7, #16
 8001858:	22c0      	movs	r2, #192	; 0xc0
 800185a:	2100      	movs	r1, #0
 800185c:	4618      	mov	r0, r3
 800185e:	f007 fc3f 	bl	80090e0 <memset>
  if(huart->Instance==USART3)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a2b      	ldr	r2, [pc, #172]	; (8001914 <HAL_UART_MspInit+0xd8>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d14e      	bne.n	800190a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800186c:	f04f 0202 	mov.w	r2, #2
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001878:	2300      	movs	r3, #0
 800187a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800187e:	f107 0310 	add.w	r3, r7, #16
 8001882:	4618      	mov	r0, r3
 8001884:	f002 fbca 	bl	800401c <HAL_RCCEx_PeriphCLKConfig>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800188e:	f7ff ff1d 	bl	80016cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001892:	4b21      	ldr	r3, [pc, #132]	; (8001918 <HAL_UART_MspInit+0xdc>)
 8001894:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001898:	4a1f      	ldr	r2, [pc, #124]	; (8001918 <HAL_UART_MspInit+0xdc>)
 800189a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800189e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80018a2:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <HAL_UART_MspInit+0xdc>)
 80018a4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80018a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_UART_MspInit+0xdc>)
 80018b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018b6:	4a18      	ldr	r2, [pc, #96]	; (8001918 <HAL_UART_MspInit+0xdc>)
 80018b8:	f043 0308 	orr.w	r3, r3, #8
 80018bc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80018c0:	4b15      	ldr	r3, [pc, #84]	; (8001918 <HAL_UART_MspInit+0xdc>)
 80018c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80018ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018e8:	2307      	movs	r3, #7
 80018ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018f2:	4619      	mov	r1, r3
 80018f4:	4809      	ldr	r0, [pc, #36]	; (800191c <HAL_UART_MspInit+0xe0>)
 80018f6:	f001 f9af 	bl	8002c58 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2100      	movs	r1, #0
 80018fe:	2027      	movs	r0, #39	; 0x27
 8001900:	f000 fc11 	bl	8002126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001904:	2027      	movs	r0, #39	; 0x27
 8001906:	f000 fc28 	bl	800215a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800190a:	bf00      	nop
 800190c:	37e8      	adds	r7, #232	; 0xe8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40004800 	.word	0x40004800
 8001918:	58024400 	.word	0x58024400
 800191c:	58020c00 	.word	0x58020c00

08001920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <NMI_Handler+0x4>

08001926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192a:	e7fe      	b.n	800192a <HardFault_Handler+0x4>

0800192c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001930:	e7fe      	b.n	8001930 <MemManage_Handler+0x4>

08001932 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001936:	e7fe      	b.n	8001936 <BusFault_Handler+0x4>

08001938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800193c:	e7fe      	b.n	800193c <UsageFault_Handler+0x4>

0800193e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800196c:	f000 fa9c 	bl	8001ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}

08001974 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
//NOTE TO MORNING LEO: LOG SEEMS TO WORK, SHOULD TRANSMIT IT TO PC FOR EASY VISUALIZATION
	if ((TIM2->SR & TIM_SR_UIF) != 0) { // check if update interrupt occured
 8001978:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d014      	beq.n	80019b0 <TIM2_IRQHandler+0x3c>
		HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 0); //engage brake
 8001986:	2200      	movs	r2, #0
 8001988:	2140      	movs	r1, #64	; 0x40
 800198a:	480c      	ldr	r0, [pc, #48]	; (80019bc <TIM2_IRQHandler+0x48>)
 800198c:	f001 fb14 	bl	8002fb8 <HAL_GPIO_WritePin>
		posn_braked_at = TIM2->CNT;
 8001990:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001996:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <TIM2_IRQHandler+0x4c>)
 8001998:	6013      	str	r3, [r2, #0]
		//also somehow stop motor

		plunge_done_flag = 1;
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <TIM2_IRQHandler+0x50>)
 800199c:	2201      	movs	r2, #1
 800199e:	701a      	strb	r2, [r3, #0]

		TIM2->SR &= ~TIM_SR_UIF; 	// Clear the interrupt flag
 80019a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019aa:	f023 0301 	bic.w	r3, r3, #1
 80019ae:	6113      	str	r3, [r2, #16]
		//TIM2->ARR = 999999;			//massive so that we dont hit it when we try to move around. later i can just diable timer but for debugging i want to preserve tim2->cnt
    }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019b0:	4805      	ldr	r0, [pc, #20]	; (80019c8 <TIM2_IRQHandler+0x54>)
 80019b2:	f004 fa11 	bl	8005dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	58020400 	.word	0x58020400
 80019c0:	24009e6c 	.word	0x24009e6c
 80019c4:	24009e70 	.word	0x24009e70
 80019c8:	2400009c 	.word	0x2400009c

080019cc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if ((TIM4->SR & TIM_SR_UIF) != 0) {
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <TIM4_IRQHandler+0x2c>)
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d008      	beq.n	80019ee <TIM4_IRQHandler+0x22>
		DEPOSITED = 1;
 80019dc:	4b07      	ldr	r3, [pc, #28]	; (80019fc <TIM4_IRQHandler+0x30>)
 80019de:	2201      	movs	r2, #1
 80019e0:	701a      	strb	r2, [r3, #0]
		TIM4->DIER &=  ~TIM_DIER_UIE; 	// update interrupt disabled
 80019e2:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <TIM4_IRQHandler+0x2c>)
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <TIM4_IRQHandler+0x2c>)
 80019e8:	f023 0301 	bic.w	r3, r3, #1
 80019ec:	60d3      	str	r3, [r2, #12]

		//TIM4->CR1 &= ~TIM_CR1_CEN; 	// only fire this timer once
	}
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80019ee:	4804      	ldr	r0, [pc, #16]	; (8001a00 <TIM4_IRQHandler+0x34>)
 80019f0:	f004 f9f2 	bl	8005dd8 <HAL_TIM_IRQHandler>

  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40000800 	.word	0x40000800
 80019fc:	24009e71 	.word	0x24009e71
 8001a00:	240000e8 	.word	0x240000e8

08001a04 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	//dispense();
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a08:	4802      	ldr	r0, [pc, #8]	; (8001a14 <USART3_IRQHandler+0x10>)
 8001a0a:	f004 ff3d 	bl	8006888 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	24000180 	.word	0x24000180

08001a18 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
		/* always dot he logging portion */
		/* TODO: Convert this datalogging to DMA to speed it up. actually a priority I think it would have big preformance gains*/
		log_position += 1; // increment number of data points taken
 8001a1e:	4b6e      	ldr	r3, [pc, #440]	; (8001bd8 <TIM5_IRQHandler+0x1c0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	3301      	adds	r3, #1
 8001a24:	4a6c      	ldr	r2, [pc, #432]	; (8001bd8 <TIM5_IRQHandler+0x1c0>)
 8001a26:	6013      	str	r3, [r2, #0]
		current_pos = TIM2->CNT;
 8001a28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	4a6b      	ldr	r2, [pc, #428]	; (8001bdc <TIM5_IRQHandler+0x1c4>)
 8001a30:	6013      	str	r3, [r2, #0]
		posLog[log_position] = current_pos; // update log of positions
 8001a32:	4b69      	ldr	r3, [pc, #420]	; (8001bd8 <TIM5_IRQHandler+0x1c0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a69      	ldr	r2, [pc, #420]	; (8001bdc <TIM5_IRQHandler+0x1c4>)
 8001a38:	6812      	ldr	r2, [r2, #0]
 8001a3a:	4969      	ldr	r1, [pc, #420]	; (8001be0 <TIM5_IRQHandler+0x1c8>)
 8001a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		running_sum += current_pos - prev_pos;
 8001a40:	4b66      	ldr	r3, [pc, #408]	; (8001bdc <TIM5_IRQHandler+0x1c4>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b67      	ldr	r3, [pc, #412]	; (8001be4 <TIM5_IRQHandler+0x1cc>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	1ad2      	subs	r2, r2, r3
 8001a4a:	4b67      	ldr	r3, [pc, #412]	; (8001be8 <TIM5_IRQHandler+0x1d0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4413      	add	r3, r2
 8001a50:	4a65      	ldr	r2, [pc, #404]	; (8001be8 <TIM5_IRQHandler+0x1d0>)
 8001a52:	6013      	str	r3, [r2, #0]
		prev_pos = current_pos;
 8001a54:	4b61      	ldr	r3, [pc, #388]	; (8001bdc <TIM5_IRQHandler+0x1c4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a62      	ldr	r2, [pc, #392]	; (8001be4 <TIM5_IRQHandler+0x1cc>)
 8001a5a:	6013      	str	r3, [r2, #0]
		/* if disp hasnt triggered yet, calculate speed and find disp pos */
		if(!disp_flag){
 8001a5c:	4b63      	ldr	r3, [pc, #396]	; (8001bec <TIM5_IRQHandler+0x1d4>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f040 80a3 	bne.w	8001bac <TIM5_IRQHandler+0x194>
			if(log_position >= MOVING_AVG_LENGTH) {
 8001a66:	4b5c      	ldr	r3, [pc, #368]	; (8001bd8 <TIM5_IRQHandler+0x1c0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2bc7      	cmp	r3, #199	; 0xc7
 8001a6c:	f240 809e 	bls.w	8001bac <TIM5_IRQHandler+0x194>
				/*update running sum of most recent n data points*/
				running_sum -= (posLog[log_position - MOVING_AVG_LENGTH + 1] - posLog[log_position - MOVING_AVG_LENGTH]);
 8001a70:	4b59      	ldr	r3, [pc, #356]	; (8001bd8 <TIM5_IRQHandler+0x1c0>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	3bc8      	subs	r3, #200	; 0xc8
 8001a76:	4a5a      	ldr	r2, [pc, #360]	; (8001be0 <TIM5_IRQHandler+0x1c8>)
 8001a78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a7c:	4b56      	ldr	r3, [pc, #344]	; (8001bd8 <TIM5_IRQHandler+0x1c0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	3bc7      	subs	r3, #199	; 0xc7
 8001a82:	4957      	ldr	r1, [pc, #348]	; (8001be0 <TIM5_IRQHandler+0x1c8>)
 8001a84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a88:	1ad2      	subs	r2, r2, r3
 8001a8a:	4b57      	ldr	r3, [pc, #348]	; (8001be8 <TIM5_IRQHandler+0x1d0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4413      	add	r3, r2
 8001a90:	4a55      	ldr	r2, [pc, #340]	; (8001be8 <TIM5_IRQHandler+0x1d0>)
 8001a92:	6013      	str	r3, [r2, #0]
				speed = (double)running_sum / (double)MOVING_AVG_LENGTH; // speed in pulses per log
 8001a94:	4b54      	ldr	r3, [pc, #336]	; (8001be8 <TIM5_IRQHandler+0x1d0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	ee07 3a90 	vmov	s15, r3
 8001a9c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001aa0:	ed9f 5b49 	vldr	d5, [pc, #292]	; 8001bc8 <TIM5_IRQHandler+0x1b0>
 8001aa4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001aa8:	4b51      	ldr	r3, [pc, #324]	; (8001bf0 <TIM5_IRQHandler+0x1d8>)
 8001aaa:	ed83 7b00 	vstr	d7, [r3]

				uint32_t clocks_per_encoder_pulse = (CLOCKS_PER_LOG / speed); // a form of speed measurement
 8001aae:	4b50      	ldr	r3, [pc, #320]	; (8001bf0 <TIM5_IRQHandler+0x1d8>)
 8001ab0:	ed93 6b00 	vldr	d6, [r3]
 8001ab4:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8001bd0 <TIM5_IRQHandler+0x1b8>
 8001ab8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001abc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ac0:	ee17 3a90 	vmov	r3, s15
 8001ac4:	607b      	str	r3, [r7, #4]

				next_next_pos = current_pos + 2*speed;	// predicted position 2 TIM5 updates from now. if this is beyond disp_pos we want to trigger TIM4
 8001ac6:	4b45      	ldr	r3, [pc, #276]	; (8001bdc <TIM5_IRQHandler+0x1c4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	ee07 3a90 	vmov	s15, r3
 8001ace:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001ad2:	4b47      	ldr	r3, [pc, #284]	; (8001bf0 <TIM5_IRQHandler+0x1d8>)
 8001ad4:	ed93 7b00 	vldr	d7, [r3]
 8001ad8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001adc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001ae0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ae4:	ee17 2a90 	vmov	r2, s15
 8001ae8:	4b42      	ldr	r3, [pc, #264]	; (8001bf4 <TIM5_IRQHandler+0x1dc>)
 8001aea:	601a      	str	r2, [r3, #0]

				// enc				enc		   enc/log			clocks 				clocks/log
				dispense_pos = (timepoint_pos) - (speed * (dispense_delay_clocks / CLOCKS_PER_LOG));
 8001aec:	4b42      	ldr	r3, [pc, #264]	; (8001bf8 <TIM5_IRQHandler+0x1e0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	ee07 3a90 	vmov	s15, r3
 8001af4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001af8:	4b40      	ldr	r3, [pc, #256]	; (8001bfc <TIM5_IRQHandler+0x1e4>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	ee07 3a90 	vmov	s15, r3
 8001b00:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001b04:	ed9f 4b32 	vldr	d4, [pc, #200]	; 8001bd0 <TIM5_IRQHandler+0x1b8>
 8001b08:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8001b0c:	4b38      	ldr	r3, [pc, #224]	; (8001bf0 <TIM5_IRQHandler+0x1d8>)
 8001b0e:	ed93 7b00 	vldr	d7, [r3]
 8001b12:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001b16:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b1a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001b1e:	ee17 2a90 	vmov	r2, s15
 8001b22:	4b37      	ldr	r3, [pc, #220]	; (8001c00 <TIM5_IRQHandler+0x1e8>)
 8001b24:	601a      	str	r2, [r3, #0]
				//		(enc ticks @ intersection) - (encoder ticks between disp signal and contact )
				// dispense_delay_clocks is based on the geometry of the dipense (ie distance and speed that the drop is shooting at)

				if(next_next_pos > dispense_pos) { // dispense comes within the next timebase
 8001b26:	4b33      	ldr	r3, [pc, #204]	; (8001bf4 <TIM5_IRQHandler+0x1dc>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	4b35      	ldr	r3, [pc, #212]	; (8001c00 <TIM5_IRQHandler+0x1e8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d93c      	bls.n	8001bac <TIM5_IRQHandler+0x194>
					TIM5->ARR = TIM5->ARR * POST_DISP_LOG_SLOW_FACTOR; // slow down the logging rate after dispense since it is less essential
 8001b32:	4b34      	ldr	r3, [pc, #208]	; (8001c04 <TIM5_IRQHandler+0x1ec>)
 8001b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b36:	4a33      	ldr	r2, [pc, #204]	; (8001c04 <TIM5_IRQHandler+0x1ec>)
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	62d3      	str	r3, [r2, #44]	; 0x2c

					/* Insert a marker for when dispense happened */
					//log_position += 1;
					//posLog[log_position] = 12345678;

					disp_flag = 1;
 8001b3c:	4b2b      	ldr	r3, [pc, #172]	; (8001bec <TIM5_IRQHandler+0x1d4>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	701a      	strb	r2, [r3, #0]

					// using this with a third timer is likely the most accurate. allows inter-encoder values
					clocks_to_disp = clocks_per_encoder_pulse*(dispense_pos-current_pos);
 8001b42:	4b2f      	ldr	r3, [pc, #188]	; (8001c00 <TIM5_IRQHandler+0x1e8>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	4b25      	ldr	r3, [pc, #148]	; (8001bdc <TIM5_IRQHandler+0x1c4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	fb02 f303 	mul.w	r3, r2, r3
 8001b52:	4a2d      	ldr	r2, [pc, #180]	; (8001c08 <TIM5_IRQHandler+0x1f0>)
 8001b54:	6013      	str	r3, [r2, #0]

					/* start TIM4 to count to clocks_to_disp */
					TIM4->CR1  &= ~TIM_CR1_CEN; 	//start counter
 8001b56:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <TIM5_IRQHandler+0x1f4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a2c      	ldr	r2, [pc, #176]	; (8001c0c <TIM5_IRQHandler+0x1f4>)
 8001b5c:	f023 0301 	bic.w	r3, r3, #1
 8001b60:	6013      	str	r3, [r2, #0]
					TIM4->CNT   = 0;				// Reset count
 8001b62:	4b2a      	ldr	r3, [pc, #168]	; (8001c0c <TIM5_IRQHandler+0x1f4>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	625a      	str	r2, [r3, #36]	; 0x24
					TIM4->ARR 	= clocks_to_disp; 	// Update event when we want to dispense
 8001b68:	4a28      	ldr	r2, [pc, #160]	; (8001c0c <TIM5_IRQHandler+0x1f4>)
 8001b6a:	4b27      	ldr	r3, [pc, #156]	; (8001c08 <TIM5_IRQHandler+0x1f0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	62d3      	str	r3, [r2, #44]	; 0x2c
					TIM4->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8001b70:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <TIM5_IRQHandler+0x1f4>)
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	4a25      	ldr	r2, [pc, #148]	; (8001c0c <TIM5_IRQHandler+0x1f4>)
 8001b76:	f023 0301 	bic.w	r3, r3, #1
 8001b7a:	6113      	str	r3, [r2, #16]
					TIM4->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8001b7c:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <TIM5_IRQHandler+0x1f4>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a22      	ldr	r2, [pc, #136]	; (8001c0c <TIM5_IRQHandler+0x1f4>)
 8001b82:	f023 0302 	bic.w	r3, r3, #2
 8001b86:	6013      	str	r3, [r2, #0]
					TIM4->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8001b88:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <TIM5_IRQHandler+0x1f4>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	4a1f      	ldr	r2, [pc, #124]	; (8001c0c <TIM5_IRQHandler+0x1f4>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	60d3      	str	r3, [r2, #12]
					TIM4->CR1  |=  TIM_CR1_ARPE;	// enable auto reload preload
 8001b94:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <TIM5_IRQHandler+0x1f4>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a1c      	ldr	r2, [pc, #112]	; (8001c0c <TIM5_IRQHandler+0x1f4>)
 8001b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b9e:	6013      	str	r3, [r2, #0]
					TIM4->CR1  |=  TIM_CR1_CEN; 	//start counter
 8001ba0:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <TIM5_IRQHandler+0x1f4>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a19      	ldr	r2, [pc, #100]	; (8001c0c <TIM5_IRQHandler+0x1f4>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6013      	str	r3, [r2, #0]
			}


		}

		TIM5->SR &= ~TIM_SR_UIF; // Clear the TIM5 update flag
 8001bac:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <TIM5_IRQHandler+0x1ec>)
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	4a14      	ldr	r2, [pc, #80]	; (8001c04 <TIM5_IRQHandler+0x1ec>)
 8001bb2:	f023 0301 	bic.w	r3, r3, #1
 8001bb6:	6113      	str	r3, [r2, #16]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001bb8:	4815      	ldr	r0, [pc, #84]	; (8001c10 <TIM5_IRQHandler+0x1f8>)
 8001bba:	f004 f90d 	bl	8005dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	00000000 	.word	0x00000000
 8001bcc:	40690000 	.word	0x40690000
 8001bd0:	00000000 	.word	0x00000000
 8001bd4:	40c2c000 	.word	0x40c2c000
 8001bd8:	24009e54 	.word	0x24009e54
 8001bdc:	24009ef8 	.word	0x24009ef8
 8001be0:	24000214 	.word	0x24000214
 8001be4:	24009efc 	.word	0x24009efc
 8001be8:	24009e58 	.word	0x24009e58
 8001bec:	24009e64 	.word	0x24009e64
 8001bf0:	24009ef0 	.word	0x24009ef0
 8001bf4:	24009f00 	.word	0x24009f00
 8001bf8:	24009e5c 	.word	0x24009e5c
 8001bfc:	24009e60 	.word	0x24009e60
 8001c00:	24009e68 	.word	0x24009e68
 8001c04:	40000c00 	.word	0x40000c00
 8001c08:	24009e74 	.word	0x24009e74
 8001c0c:	40000800 	.word	0x40000800
 8001c10:	24000134 	.word	0x24000134

08001c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c1c:	4a14      	ldr	r2, [pc, #80]	; (8001c70 <_sbrk+0x5c>)
 8001c1e:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <_sbrk+0x60>)
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c28:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <_sbrk+0x64>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d102      	bne.n	8001c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <_sbrk+0x64>)
 8001c32:	4a12      	ldr	r2, [pc, #72]	; (8001c7c <_sbrk+0x68>)
 8001c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c36:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <_sbrk+0x64>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d207      	bcs.n	8001c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c44:	f007 fa22 	bl	800908c <__errno>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c52:	e009      	b.n	8001c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c54:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <_sbrk+0x64>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c5a:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <_sbrk+0x64>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	4a05      	ldr	r2, [pc, #20]	; (8001c78 <_sbrk+0x64>)
 8001c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c66:	68fb      	ldr	r3, [r7, #12]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	24100000 	.word	0x24100000
 8001c74:	00000400 	.word	0x00000400
 8001c78:	24009f04 	.word	0x24009f04
 8001c7c:	24009f20 	.word	0x24009f20

08001c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c84:	4b32      	ldr	r3, [pc, #200]	; (8001d50 <SystemInit+0xd0>)
 8001c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c8a:	4a31      	ldr	r2, [pc, #196]	; (8001d50 <SystemInit+0xd0>)
 8001c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c94:	4b2f      	ldr	r3, [pc, #188]	; (8001d54 <SystemInit+0xd4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 030f 	and.w	r3, r3, #15
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d807      	bhi.n	8001cb0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ca0:	4b2c      	ldr	r3, [pc, #176]	; (8001d54 <SystemInit+0xd4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f023 030f 	bic.w	r3, r3, #15
 8001ca8:	4a2a      	ldr	r2, [pc, #168]	; (8001d54 <SystemInit+0xd4>)
 8001caa:	f043 0303 	orr.w	r3, r3, #3
 8001cae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001cb0:	4b29      	ldr	r3, [pc, #164]	; (8001d58 <SystemInit+0xd8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a28      	ldr	r2, [pc, #160]	; (8001d58 <SystemInit+0xd8>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001cbc:	4b26      	ldr	r3, [pc, #152]	; (8001d58 <SystemInit+0xd8>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001cc2:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <SystemInit+0xd8>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	4924      	ldr	r1, [pc, #144]	; (8001d58 <SystemInit+0xd8>)
 8001cc8:	4b24      	ldr	r3, [pc, #144]	; (8001d5c <SystemInit+0xdc>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001cce:	4b21      	ldr	r3, [pc, #132]	; (8001d54 <SystemInit+0xd4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 030c 	and.w	r3, r3, #12
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d007      	beq.n	8001cea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cda:	4b1e      	ldr	r3, [pc, #120]	; (8001d54 <SystemInit+0xd4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 030f 	bic.w	r3, r3, #15
 8001ce2:	4a1c      	ldr	r2, [pc, #112]	; (8001d54 <SystemInit+0xd4>)
 8001ce4:	f043 0303 	orr.w	r3, r3, #3
 8001ce8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001cea:	4b1b      	ldr	r3, [pc, #108]	; (8001d58 <SystemInit+0xd8>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <SystemInit+0xd8>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001cf6:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <SystemInit+0xd8>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <SystemInit+0xd8>)
 8001cfe:	4a18      	ldr	r2, [pc, #96]	; (8001d60 <SystemInit+0xe0>)
 8001d00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001d02:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <SystemInit+0xd8>)
 8001d04:	4a17      	ldr	r2, [pc, #92]	; (8001d64 <SystemInit+0xe4>)
 8001d06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001d08:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <SystemInit+0xd8>)
 8001d0a:	4a17      	ldr	r2, [pc, #92]	; (8001d68 <SystemInit+0xe8>)
 8001d0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <SystemInit+0xd8>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001d14:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <SystemInit+0xd8>)
 8001d16:	4a14      	ldr	r2, [pc, #80]	; (8001d68 <SystemInit+0xe8>)
 8001d18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <SystemInit+0xd8>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001d20:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <SystemInit+0xd8>)
 8001d22:	4a11      	ldr	r2, [pc, #68]	; (8001d68 <SystemInit+0xe8>)
 8001d24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d26:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <SystemInit+0xd8>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d2c:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <SystemInit+0xd8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a09      	ldr	r2, [pc, #36]	; (8001d58 <SystemInit+0xd8>)
 8001d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <SystemInit+0xd8>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <SystemInit+0xec>)
 8001d40:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001d44:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001d46:	bf00      	nop
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000ed00 	.word	0xe000ed00
 8001d54:	52002000 	.word	0x52002000
 8001d58:	58024400 	.word	0x58024400
 8001d5c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001d60:	02020200 	.word	0x02020200
 8001d64:	01ff0000 	.word	0x01ff0000
 8001d68:	01010280 	.word	0x01010280
 8001d6c:	52004000 	.word	0x52004000

08001d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001da8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d74:	f7ff ff84 	bl	8001c80 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d78:	480c      	ldr	r0, [pc, #48]	; (8001dac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d7a:	490d      	ldr	r1, [pc, #52]	; (8001db0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d7c:	4a0d      	ldr	r2, [pc, #52]	; (8001db4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d80:	e002      	b.n	8001d88 <LoopCopyDataInit>

08001d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d86:	3304      	adds	r3, #4

08001d88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d8c:	d3f9      	bcc.n	8001d82 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d90:	4c0a      	ldr	r4, [pc, #40]	; (8001dbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d94:	e001      	b.n	8001d9a <LoopFillZerobss>

08001d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d98:	3204      	adds	r2, #4

08001d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d9c:	d3fb      	bcc.n	8001d96 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001d9e:	f007 f97b 	bl	8009098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001da2:	f7ff f8cf 	bl	8000f44 <main>
  bx  lr
 8001da6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001da8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001dac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001db0:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8001db4:	08009bbc 	.word	0x08009bbc
  ldr r2, =_sbss
 8001db8:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 8001dbc:	24009f1c 	.word	0x24009f1c

08001dc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dc0:	e7fe      	b.n	8001dc0 <ADC_IRQHandler>
	...

08001dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dca:	2003      	movs	r0, #3
 8001dcc:	f000 f9a0 	bl	8002110 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001dd0:	f001 ff4e 	bl	8003c70 <HAL_RCC_GetSysClockFreq>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <HAL_Init+0x68>)
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	0a1b      	lsrs	r3, r3, #8
 8001ddc:	f003 030f 	and.w	r3, r3, #15
 8001de0:	4913      	ldr	r1, [pc, #76]	; (8001e30 <HAL_Init+0x6c>)
 8001de2:	5ccb      	ldrb	r3, [r1, r3]
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dec:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001dee:	4b0f      	ldr	r3, [pc, #60]	; (8001e2c <HAL_Init+0x68>)
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	4a0e      	ldr	r2, [pc, #56]	; (8001e30 <HAL_Init+0x6c>)
 8001df8:	5cd3      	ldrb	r3, [r2, r3]
 8001dfa:	f003 031f 	and.w	r3, r3, #31
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	fa22 f303 	lsr.w	r3, r2, r3
 8001e04:	4a0b      	ldr	r2, [pc, #44]	; (8001e34 <HAL_Init+0x70>)
 8001e06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e08:	4a0b      	ldr	r2, [pc, #44]	; (8001e38 <HAL_Init+0x74>)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f000 f814 	bl	8001e3c <HAL_InitTick>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e002      	b.n	8001e24 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e1e:	f7ff fc5b 	bl	80016d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	58024400 	.word	0x58024400
 8001e30:	08009b40 	.word	0x08009b40
 8001e34:	2400000c 	.word	0x2400000c
 8001e38:	24000008 	.word	0x24000008

08001e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e44:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <HAL_InitTick+0x60>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e021      	b.n	8001e94 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e50:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <HAL_InitTick+0x64>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <HAL_InitTick+0x60>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 f985 	bl	8002176 <HAL_SYSTICK_Config>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00e      	b.n	8001e94 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b0f      	cmp	r3, #15
 8001e7a:	d80a      	bhi.n	8001e92 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295
 8001e84:	f000 f94f 	bl	8002126 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e88:	4a06      	ldr	r2, [pc, #24]	; (8001ea4 <HAL_InitTick+0x68>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	e000      	b.n	8001e94 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	24000014 	.word	0x24000014
 8001ea0:	24000008 	.word	0x24000008
 8001ea4:	24000010 	.word	0x24000010

08001ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <HAL_IncTick+0x20>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_IncTick+0x24>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	4a04      	ldr	r2, [pc, #16]	; (8001ecc <HAL_IncTick+0x24>)
 8001eba:	6013      	str	r3, [r2, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	24000014 	.word	0x24000014
 8001ecc:	24009f08 	.word	0x24009f08

08001ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed4:	4b03      	ldr	r3, [pc, #12]	; (8001ee4 <HAL_GetTick+0x14>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	24009f08 	.word	0x24009f08

08001ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b0ac      	sub	sp, #176	; 0xb0
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef0:	f7ff ffee 	bl	8001ed0 <HAL_GetTick>
 8001ef4:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
  uint32_t wait = Delay;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001efe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f06:	d007      	beq.n	8001f18 <HAL_Delay+0x30>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f08:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <HAL_Delay+0x7c>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f12:	4413      	add	r3, r2
 8001f14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  }

 8001f18:	4a13      	ldr	r2, [pc, #76]	; (8001f68 <HAL_Delay+0x80>)
 8001f1a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f20:	c303      	stmia	r3!, {r0, r1}
 8001f22:	801a      	strh	r2, [r3, #0]
  while ((HAL_GetTick() - tickstart) < wait)
  {
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <HAL_Delay+0x84>)
 8001f26:	60bb      	str	r3, [r7, #8]
  }
 8001f28:	e00d      	b.n	8001f46 <HAL_Delay+0x5e>
}

 8001f2a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe f9de 	bl	80002f0 <strlen>
 8001f34:	4603      	mov	r3, r0
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8001f3c:	f107 0008 	add.w	r0, r7, #8
 8001f40:	2364      	movs	r3, #100	; 0x64
 8001f42:	f004 fbc7 	bl	80066d4 <HAL_UART_Transmit>
  }
 8001f46:	f7ff ffc3 	bl	8001ed0 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d8e7      	bhi.n	8001f2a <HAL_Delay+0x42>
/**
  * @brief Suspend Tick increment.
  * @note In the default implementation , SysTick timer is the source of time base. It is
 8001f5a:	bf00      	nop
 8001f5c:	bf00      	nop
 8001f5e:	37b0      	adds	r7, #176	; 0xb0
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	24000014 	.word	0x24000014
 8001f68:	08009b34 	.word	0x08009b34
 8001f6c:	40004800 	.word	0x40004800

08001f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <__NVIC_SetPriorityGrouping+0x40>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f9e:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <__NVIC_SetPriorityGrouping+0x40>)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	60d3      	str	r3, [r2, #12]
}
 8001fa4:	bf00      	nop
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000ed00 	.word	0xe000ed00
 8001fb4:	05fa0000 	.word	0x05fa0000

08001fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fbc:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	f003 0307 	and.w	r3, r3, #7
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	db0b      	blt.n	8001ffe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fe6:	88fb      	ldrh	r3, [r7, #6]
 8001fe8:	f003 021f 	and.w	r2, r3, #31
 8001fec:	4907      	ldr	r1, [pc, #28]	; (800200c <__NVIC_EnableIRQ+0x38>)
 8001fee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ff2:	095b      	lsrs	r3, r3, #5
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8001ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	e000e100 	.word	0xe000e100

08002010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	6039      	str	r1, [r7, #0]
 800201a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800201c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002020:	2b00      	cmp	r3, #0
 8002022:	db0a      	blt.n	800203a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	b2da      	uxtb	r2, r3
 8002028:	490c      	ldr	r1, [pc, #48]	; (800205c <__NVIC_SetPriority+0x4c>)
 800202a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800202e:	0112      	lsls	r2, r2, #4
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	440b      	add	r3, r1
 8002034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002038:	e00a      	b.n	8002050 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	b2da      	uxtb	r2, r3
 800203e:	4908      	ldr	r1, [pc, #32]	; (8002060 <__NVIC_SetPriority+0x50>)
 8002040:	88fb      	ldrh	r3, [r7, #6]
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	3b04      	subs	r3, #4
 8002048:	0112      	lsls	r2, r2, #4
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	440b      	add	r3, r1
 800204e:	761a      	strb	r2, [r3, #24]
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	e000e100 	.word	0xe000e100
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002064:	b480      	push	{r7}
 8002066:	b089      	sub	sp, #36	; 0x24
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f1c3 0307 	rsb	r3, r3, #7
 800207e:	2b04      	cmp	r3, #4
 8002080:	bf28      	it	cs
 8002082:	2304      	movcs	r3, #4
 8002084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3304      	adds	r3, #4
 800208a:	2b06      	cmp	r3, #6
 800208c:	d902      	bls.n	8002094 <NVIC_EncodePriority+0x30>
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3b03      	subs	r3, #3
 8002092:	e000      	b.n	8002096 <NVIC_EncodePriority+0x32>
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002098:	f04f 32ff 	mov.w	r2, #4294967295
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43da      	mvns	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	401a      	ands	r2, r3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020ac:	f04f 31ff 	mov.w	r1, #4294967295
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	fa01 f303 	lsl.w	r3, r1, r3
 80020b6:	43d9      	mvns	r1, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020bc:	4313      	orrs	r3, r2
         );
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3724      	adds	r7, #36	; 0x24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020dc:	d301      	bcc.n	80020e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020de:	2301      	movs	r3, #1
 80020e0:	e00f      	b.n	8002102 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020e2:	4a0a      	ldr	r2, [pc, #40]	; (800210c <SysTick_Config+0x40>)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ea:	210f      	movs	r1, #15
 80020ec:	f04f 30ff 	mov.w	r0, #4294967295
 80020f0:	f7ff ff8e 	bl	8002010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020f4:	4b05      	ldr	r3, [pc, #20]	; (800210c <SysTick_Config+0x40>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020fa:	4b04      	ldr	r3, [pc, #16]	; (800210c <SysTick_Config+0x40>)
 80020fc:	2207      	movs	r2, #7
 80020fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	e000e010 	.word	0xe000e010

08002110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff ff29 	bl	8001f70 <__NVIC_SetPriorityGrouping>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b086      	sub	sp, #24
 800212a:	af00      	add	r7, sp, #0
 800212c:	4603      	mov	r3, r0
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	607a      	str	r2, [r7, #4]
 8002132:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002134:	f7ff ff40 	bl	8001fb8 <__NVIC_GetPriorityGrouping>
 8002138:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	6978      	ldr	r0, [r7, #20]
 8002140:	f7ff ff90 	bl	8002064 <NVIC_EncodePriority>
 8002144:	4602      	mov	r2, r0
 8002146:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800214a:	4611      	mov	r1, r2
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff ff5f 	bl	8002010 <__NVIC_SetPriority>
}
 8002152:	bf00      	nop
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	4603      	mov	r3, r0
 8002162:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002164:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff33 	bl	8001fd4 <__NVIC_EnableIRQ>
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff ffa4 	bl	80020cc <SysTick_Config>
 8002184:	4603      	mov	r3, r0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002198:	f7ff fe9a 	bl	8001ed0 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e2dc      	b.n	8002762 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d008      	beq.n	80021c6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2280      	movs	r2, #128	; 0x80
 80021b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e2cd      	b.n	8002762 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a76      	ldr	r2, [pc, #472]	; (80023a4 <HAL_DMA_Abort+0x214>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d04a      	beq.n	8002266 <HAL_DMA_Abort+0xd6>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a74      	ldr	r2, [pc, #464]	; (80023a8 <HAL_DMA_Abort+0x218>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d045      	beq.n	8002266 <HAL_DMA_Abort+0xd6>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a73      	ldr	r2, [pc, #460]	; (80023ac <HAL_DMA_Abort+0x21c>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d040      	beq.n	8002266 <HAL_DMA_Abort+0xd6>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a71      	ldr	r2, [pc, #452]	; (80023b0 <HAL_DMA_Abort+0x220>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d03b      	beq.n	8002266 <HAL_DMA_Abort+0xd6>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a70      	ldr	r2, [pc, #448]	; (80023b4 <HAL_DMA_Abort+0x224>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d036      	beq.n	8002266 <HAL_DMA_Abort+0xd6>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a6e      	ldr	r2, [pc, #440]	; (80023b8 <HAL_DMA_Abort+0x228>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d031      	beq.n	8002266 <HAL_DMA_Abort+0xd6>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a6d      	ldr	r2, [pc, #436]	; (80023bc <HAL_DMA_Abort+0x22c>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d02c      	beq.n	8002266 <HAL_DMA_Abort+0xd6>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a6b      	ldr	r2, [pc, #428]	; (80023c0 <HAL_DMA_Abort+0x230>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d027      	beq.n	8002266 <HAL_DMA_Abort+0xd6>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a6a      	ldr	r2, [pc, #424]	; (80023c4 <HAL_DMA_Abort+0x234>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d022      	beq.n	8002266 <HAL_DMA_Abort+0xd6>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a68      	ldr	r2, [pc, #416]	; (80023c8 <HAL_DMA_Abort+0x238>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d01d      	beq.n	8002266 <HAL_DMA_Abort+0xd6>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a67      	ldr	r2, [pc, #412]	; (80023cc <HAL_DMA_Abort+0x23c>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d018      	beq.n	8002266 <HAL_DMA_Abort+0xd6>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a65      	ldr	r2, [pc, #404]	; (80023d0 <HAL_DMA_Abort+0x240>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d013      	beq.n	8002266 <HAL_DMA_Abort+0xd6>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a64      	ldr	r2, [pc, #400]	; (80023d4 <HAL_DMA_Abort+0x244>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d00e      	beq.n	8002266 <HAL_DMA_Abort+0xd6>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a62      	ldr	r2, [pc, #392]	; (80023d8 <HAL_DMA_Abort+0x248>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d009      	beq.n	8002266 <HAL_DMA_Abort+0xd6>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a61      	ldr	r2, [pc, #388]	; (80023dc <HAL_DMA_Abort+0x24c>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d004      	beq.n	8002266 <HAL_DMA_Abort+0xd6>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a5f      	ldr	r2, [pc, #380]	; (80023e0 <HAL_DMA_Abort+0x250>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d101      	bne.n	800226a <HAL_DMA_Abort+0xda>
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <HAL_DMA_Abort+0xdc>
 800226a:	2300      	movs	r3, #0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d013      	beq.n	8002298 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 021e 	bic.w	r2, r2, #30
 800227e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	695a      	ldr	r2, [r3, #20]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800228e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	e00a      	b.n	80022ae <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 020e 	bic.w	r2, r2, #14
 80022a6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a3c      	ldr	r2, [pc, #240]	; (80023a4 <HAL_DMA_Abort+0x214>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d072      	beq.n	800239e <HAL_DMA_Abort+0x20e>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a3a      	ldr	r2, [pc, #232]	; (80023a8 <HAL_DMA_Abort+0x218>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d06d      	beq.n	800239e <HAL_DMA_Abort+0x20e>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a39      	ldr	r2, [pc, #228]	; (80023ac <HAL_DMA_Abort+0x21c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d068      	beq.n	800239e <HAL_DMA_Abort+0x20e>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a37      	ldr	r2, [pc, #220]	; (80023b0 <HAL_DMA_Abort+0x220>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d063      	beq.n	800239e <HAL_DMA_Abort+0x20e>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a36      	ldr	r2, [pc, #216]	; (80023b4 <HAL_DMA_Abort+0x224>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d05e      	beq.n	800239e <HAL_DMA_Abort+0x20e>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a34      	ldr	r2, [pc, #208]	; (80023b8 <HAL_DMA_Abort+0x228>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d059      	beq.n	800239e <HAL_DMA_Abort+0x20e>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a33      	ldr	r2, [pc, #204]	; (80023bc <HAL_DMA_Abort+0x22c>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d054      	beq.n	800239e <HAL_DMA_Abort+0x20e>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a31      	ldr	r2, [pc, #196]	; (80023c0 <HAL_DMA_Abort+0x230>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d04f      	beq.n	800239e <HAL_DMA_Abort+0x20e>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a30      	ldr	r2, [pc, #192]	; (80023c4 <HAL_DMA_Abort+0x234>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d04a      	beq.n	800239e <HAL_DMA_Abort+0x20e>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a2e      	ldr	r2, [pc, #184]	; (80023c8 <HAL_DMA_Abort+0x238>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d045      	beq.n	800239e <HAL_DMA_Abort+0x20e>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a2d      	ldr	r2, [pc, #180]	; (80023cc <HAL_DMA_Abort+0x23c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d040      	beq.n	800239e <HAL_DMA_Abort+0x20e>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a2b      	ldr	r2, [pc, #172]	; (80023d0 <HAL_DMA_Abort+0x240>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d03b      	beq.n	800239e <HAL_DMA_Abort+0x20e>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a2a      	ldr	r2, [pc, #168]	; (80023d4 <HAL_DMA_Abort+0x244>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d036      	beq.n	800239e <HAL_DMA_Abort+0x20e>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a28      	ldr	r2, [pc, #160]	; (80023d8 <HAL_DMA_Abort+0x248>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d031      	beq.n	800239e <HAL_DMA_Abort+0x20e>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a27      	ldr	r2, [pc, #156]	; (80023dc <HAL_DMA_Abort+0x24c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d02c      	beq.n	800239e <HAL_DMA_Abort+0x20e>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a25      	ldr	r2, [pc, #148]	; (80023e0 <HAL_DMA_Abort+0x250>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d027      	beq.n	800239e <HAL_DMA_Abort+0x20e>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a24      	ldr	r2, [pc, #144]	; (80023e4 <HAL_DMA_Abort+0x254>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d022      	beq.n	800239e <HAL_DMA_Abort+0x20e>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a22      	ldr	r2, [pc, #136]	; (80023e8 <HAL_DMA_Abort+0x258>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d01d      	beq.n	800239e <HAL_DMA_Abort+0x20e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a21      	ldr	r2, [pc, #132]	; (80023ec <HAL_DMA_Abort+0x25c>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d018      	beq.n	800239e <HAL_DMA_Abort+0x20e>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a1f      	ldr	r2, [pc, #124]	; (80023f0 <HAL_DMA_Abort+0x260>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d013      	beq.n	800239e <HAL_DMA_Abort+0x20e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a1e      	ldr	r2, [pc, #120]	; (80023f4 <HAL_DMA_Abort+0x264>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d00e      	beq.n	800239e <HAL_DMA_Abort+0x20e>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a1c      	ldr	r2, [pc, #112]	; (80023f8 <HAL_DMA_Abort+0x268>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d009      	beq.n	800239e <HAL_DMA_Abort+0x20e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a1b      	ldr	r2, [pc, #108]	; (80023fc <HAL_DMA_Abort+0x26c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d004      	beq.n	800239e <HAL_DMA_Abort+0x20e>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a19      	ldr	r2, [pc, #100]	; (8002400 <HAL_DMA_Abort+0x270>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d132      	bne.n	8002404 <HAL_DMA_Abort+0x274>
 800239e:	2301      	movs	r3, #1
 80023a0:	e031      	b.n	8002406 <HAL_DMA_Abort+0x276>
 80023a2:	bf00      	nop
 80023a4:	40020010 	.word	0x40020010
 80023a8:	40020028 	.word	0x40020028
 80023ac:	40020040 	.word	0x40020040
 80023b0:	40020058 	.word	0x40020058
 80023b4:	40020070 	.word	0x40020070
 80023b8:	40020088 	.word	0x40020088
 80023bc:	400200a0 	.word	0x400200a0
 80023c0:	400200b8 	.word	0x400200b8
 80023c4:	40020410 	.word	0x40020410
 80023c8:	40020428 	.word	0x40020428
 80023cc:	40020440 	.word	0x40020440
 80023d0:	40020458 	.word	0x40020458
 80023d4:	40020470 	.word	0x40020470
 80023d8:	40020488 	.word	0x40020488
 80023dc:	400204a0 	.word	0x400204a0
 80023e0:	400204b8 	.word	0x400204b8
 80023e4:	58025408 	.word	0x58025408
 80023e8:	5802541c 	.word	0x5802541c
 80023ec:	58025430 	.word	0x58025430
 80023f0:	58025444 	.word	0x58025444
 80023f4:	58025458 	.word	0x58025458
 80023f8:	5802546c 	.word	0x5802546c
 80023fc:	58025480 	.word	0x58025480
 8002400:	58025494 	.word	0x58025494
 8002404:	2300      	movs	r3, #0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d007      	beq.n	800241a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002414:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002418:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a6d      	ldr	r2, [pc, #436]	; (80025d4 <HAL_DMA_Abort+0x444>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d04a      	beq.n	80024ba <HAL_DMA_Abort+0x32a>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a6b      	ldr	r2, [pc, #428]	; (80025d8 <HAL_DMA_Abort+0x448>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d045      	beq.n	80024ba <HAL_DMA_Abort+0x32a>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a6a      	ldr	r2, [pc, #424]	; (80025dc <HAL_DMA_Abort+0x44c>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d040      	beq.n	80024ba <HAL_DMA_Abort+0x32a>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a68      	ldr	r2, [pc, #416]	; (80025e0 <HAL_DMA_Abort+0x450>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d03b      	beq.n	80024ba <HAL_DMA_Abort+0x32a>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a67      	ldr	r2, [pc, #412]	; (80025e4 <HAL_DMA_Abort+0x454>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d036      	beq.n	80024ba <HAL_DMA_Abort+0x32a>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a65      	ldr	r2, [pc, #404]	; (80025e8 <HAL_DMA_Abort+0x458>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d031      	beq.n	80024ba <HAL_DMA_Abort+0x32a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a64      	ldr	r2, [pc, #400]	; (80025ec <HAL_DMA_Abort+0x45c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d02c      	beq.n	80024ba <HAL_DMA_Abort+0x32a>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a62      	ldr	r2, [pc, #392]	; (80025f0 <HAL_DMA_Abort+0x460>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d027      	beq.n	80024ba <HAL_DMA_Abort+0x32a>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a61      	ldr	r2, [pc, #388]	; (80025f4 <HAL_DMA_Abort+0x464>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d022      	beq.n	80024ba <HAL_DMA_Abort+0x32a>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a5f      	ldr	r2, [pc, #380]	; (80025f8 <HAL_DMA_Abort+0x468>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d01d      	beq.n	80024ba <HAL_DMA_Abort+0x32a>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a5e      	ldr	r2, [pc, #376]	; (80025fc <HAL_DMA_Abort+0x46c>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d018      	beq.n	80024ba <HAL_DMA_Abort+0x32a>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a5c      	ldr	r2, [pc, #368]	; (8002600 <HAL_DMA_Abort+0x470>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d013      	beq.n	80024ba <HAL_DMA_Abort+0x32a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a5b      	ldr	r2, [pc, #364]	; (8002604 <HAL_DMA_Abort+0x474>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d00e      	beq.n	80024ba <HAL_DMA_Abort+0x32a>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a59      	ldr	r2, [pc, #356]	; (8002608 <HAL_DMA_Abort+0x478>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d009      	beq.n	80024ba <HAL_DMA_Abort+0x32a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a58      	ldr	r2, [pc, #352]	; (800260c <HAL_DMA_Abort+0x47c>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d004      	beq.n	80024ba <HAL_DMA_Abort+0x32a>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a56      	ldr	r2, [pc, #344]	; (8002610 <HAL_DMA_Abort+0x480>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d108      	bne.n	80024cc <HAL_DMA_Abort+0x33c>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0201 	bic.w	r2, r2, #1
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	e007      	b.n	80024dc <HAL_DMA_Abort+0x34c>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0201 	bic.w	r2, r2, #1
 80024da:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80024dc:	e013      	b.n	8002506 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024de:	f7ff fcf7 	bl	8001ed0 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b05      	cmp	r3, #5
 80024ea:	d90c      	bls.n	8002506 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2220      	movs	r2, #32
 80024f0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2203      	movs	r2, #3
 80024f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e12d      	b.n	8002762 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1e5      	bne.n	80024de <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a2f      	ldr	r2, [pc, #188]	; (80025d4 <HAL_DMA_Abort+0x444>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d04a      	beq.n	80025b2 <HAL_DMA_Abort+0x422>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a2d      	ldr	r2, [pc, #180]	; (80025d8 <HAL_DMA_Abort+0x448>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d045      	beq.n	80025b2 <HAL_DMA_Abort+0x422>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a2c      	ldr	r2, [pc, #176]	; (80025dc <HAL_DMA_Abort+0x44c>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d040      	beq.n	80025b2 <HAL_DMA_Abort+0x422>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a2a      	ldr	r2, [pc, #168]	; (80025e0 <HAL_DMA_Abort+0x450>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d03b      	beq.n	80025b2 <HAL_DMA_Abort+0x422>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a29      	ldr	r2, [pc, #164]	; (80025e4 <HAL_DMA_Abort+0x454>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d036      	beq.n	80025b2 <HAL_DMA_Abort+0x422>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a27      	ldr	r2, [pc, #156]	; (80025e8 <HAL_DMA_Abort+0x458>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d031      	beq.n	80025b2 <HAL_DMA_Abort+0x422>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a26      	ldr	r2, [pc, #152]	; (80025ec <HAL_DMA_Abort+0x45c>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d02c      	beq.n	80025b2 <HAL_DMA_Abort+0x422>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a24      	ldr	r2, [pc, #144]	; (80025f0 <HAL_DMA_Abort+0x460>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d027      	beq.n	80025b2 <HAL_DMA_Abort+0x422>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a23      	ldr	r2, [pc, #140]	; (80025f4 <HAL_DMA_Abort+0x464>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d022      	beq.n	80025b2 <HAL_DMA_Abort+0x422>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a21      	ldr	r2, [pc, #132]	; (80025f8 <HAL_DMA_Abort+0x468>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d01d      	beq.n	80025b2 <HAL_DMA_Abort+0x422>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a20      	ldr	r2, [pc, #128]	; (80025fc <HAL_DMA_Abort+0x46c>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d018      	beq.n	80025b2 <HAL_DMA_Abort+0x422>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a1e      	ldr	r2, [pc, #120]	; (8002600 <HAL_DMA_Abort+0x470>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d013      	beq.n	80025b2 <HAL_DMA_Abort+0x422>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a1d      	ldr	r2, [pc, #116]	; (8002604 <HAL_DMA_Abort+0x474>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d00e      	beq.n	80025b2 <HAL_DMA_Abort+0x422>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a1b      	ldr	r2, [pc, #108]	; (8002608 <HAL_DMA_Abort+0x478>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d009      	beq.n	80025b2 <HAL_DMA_Abort+0x422>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a1a      	ldr	r2, [pc, #104]	; (800260c <HAL_DMA_Abort+0x47c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d004      	beq.n	80025b2 <HAL_DMA_Abort+0x422>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a18      	ldr	r2, [pc, #96]	; (8002610 <HAL_DMA_Abort+0x480>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d101      	bne.n	80025b6 <HAL_DMA_Abort+0x426>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <HAL_DMA_Abort+0x428>
 80025b6:	2300      	movs	r3, #0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d02b      	beq.n	8002614 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c6:	f003 031f 	and.w	r3, r3, #31
 80025ca:	223f      	movs	r2, #63	; 0x3f
 80025cc:	409a      	lsls	r2, r3
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	609a      	str	r2, [r3, #8]
 80025d2:	e02a      	b.n	800262a <HAL_DMA_Abort+0x49a>
 80025d4:	40020010 	.word	0x40020010
 80025d8:	40020028 	.word	0x40020028
 80025dc:	40020040 	.word	0x40020040
 80025e0:	40020058 	.word	0x40020058
 80025e4:	40020070 	.word	0x40020070
 80025e8:	40020088 	.word	0x40020088
 80025ec:	400200a0 	.word	0x400200a0
 80025f0:	400200b8 	.word	0x400200b8
 80025f4:	40020410 	.word	0x40020410
 80025f8:	40020428 	.word	0x40020428
 80025fc:	40020440 	.word	0x40020440
 8002600:	40020458 	.word	0x40020458
 8002604:	40020470 	.word	0x40020470
 8002608:	40020488 	.word	0x40020488
 800260c:	400204a0 	.word	0x400204a0
 8002610:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002618:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261e:	f003 031f 	and.w	r3, r3, #31
 8002622:	2201      	movs	r2, #1
 8002624:	409a      	lsls	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a4f      	ldr	r2, [pc, #316]	; (800276c <HAL_DMA_Abort+0x5dc>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d072      	beq.n	800271a <HAL_DMA_Abort+0x58a>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a4d      	ldr	r2, [pc, #308]	; (8002770 <HAL_DMA_Abort+0x5e0>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d06d      	beq.n	800271a <HAL_DMA_Abort+0x58a>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a4c      	ldr	r2, [pc, #304]	; (8002774 <HAL_DMA_Abort+0x5e4>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d068      	beq.n	800271a <HAL_DMA_Abort+0x58a>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a4a      	ldr	r2, [pc, #296]	; (8002778 <HAL_DMA_Abort+0x5e8>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d063      	beq.n	800271a <HAL_DMA_Abort+0x58a>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a49      	ldr	r2, [pc, #292]	; (800277c <HAL_DMA_Abort+0x5ec>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d05e      	beq.n	800271a <HAL_DMA_Abort+0x58a>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a47      	ldr	r2, [pc, #284]	; (8002780 <HAL_DMA_Abort+0x5f0>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d059      	beq.n	800271a <HAL_DMA_Abort+0x58a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a46      	ldr	r2, [pc, #280]	; (8002784 <HAL_DMA_Abort+0x5f4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d054      	beq.n	800271a <HAL_DMA_Abort+0x58a>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a44      	ldr	r2, [pc, #272]	; (8002788 <HAL_DMA_Abort+0x5f8>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d04f      	beq.n	800271a <HAL_DMA_Abort+0x58a>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a43      	ldr	r2, [pc, #268]	; (800278c <HAL_DMA_Abort+0x5fc>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d04a      	beq.n	800271a <HAL_DMA_Abort+0x58a>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a41      	ldr	r2, [pc, #260]	; (8002790 <HAL_DMA_Abort+0x600>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d045      	beq.n	800271a <HAL_DMA_Abort+0x58a>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a40      	ldr	r2, [pc, #256]	; (8002794 <HAL_DMA_Abort+0x604>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d040      	beq.n	800271a <HAL_DMA_Abort+0x58a>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a3e      	ldr	r2, [pc, #248]	; (8002798 <HAL_DMA_Abort+0x608>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d03b      	beq.n	800271a <HAL_DMA_Abort+0x58a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a3d      	ldr	r2, [pc, #244]	; (800279c <HAL_DMA_Abort+0x60c>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d036      	beq.n	800271a <HAL_DMA_Abort+0x58a>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a3b      	ldr	r2, [pc, #236]	; (80027a0 <HAL_DMA_Abort+0x610>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d031      	beq.n	800271a <HAL_DMA_Abort+0x58a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a3a      	ldr	r2, [pc, #232]	; (80027a4 <HAL_DMA_Abort+0x614>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d02c      	beq.n	800271a <HAL_DMA_Abort+0x58a>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a38      	ldr	r2, [pc, #224]	; (80027a8 <HAL_DMA_Abort+0x618>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d027      	beq.n	800271a <HAL_DMA_Abort+0x58a>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a37      	ldr	r2, [pc, #220]	; (80027ac <HAL_DMA_Abort+0x61c>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d022      	beq.n	800271a <HAL_DMA_Abort+0x58a>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a35      	ldr	r2, [pc, #212]	; (80027b0 <HAL_DMA_Abort+0x620>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d01d      	beq.n	800271a <HAL_DMA_Abort+0x58a>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a34      	ldr	r2, [pc, #208]	; (80027b4 <HAL_DMA_Abort+0x624>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d018      	beq.n	800271a <HAL_DMA_Abort+0x58a>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a32      	ldr	r2, [pc, #200]	; (80027b8 <HAL_DMA_Abort+0x628>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d013      	beq.n	800271a <HAL_DMA_Abort+0x58a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a31      	ldr	r2, [pc, #196]	; (80027bc <HAL_DMA_Abort+0x62c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d00e      	beq.n	800271a <HAL_DMA_Abort+0x58a>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a2f      	ldr	r2, [pc, #188]	; (80027c0 <HAL_DMA_Abort+0x630>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d009      	beq.n	800271a <HAL_DMA_Abort+0x58a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a2e      	ldr	r2, [pc, #184]	; (80027c4 <HAL_DMA_Abort+0x634>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d004      	beq.n	800271a <HAL_DMA_Abort+0x58a>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a2c      	ldr	r2, [pc, #176]	; (80027c8 <HAL_DMA_Abort+0x638>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d101      	bne.n	800271e <HAL_DMA_Abort+0x58e>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <HAL_DMA_Abort+0x590>
 800271e:	2300      	movs	r3, #0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d015      	beq.n	8002750 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800272c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00c      	beq.n	8002750 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002740:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002744:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800274e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40020010 	.word	0x40020010
 8002770:	40020028 	.word	0x40020028
 8002774:	40020040 	.word	0x40020040
 8002778:	40020058 	.word	0x40020058
 800277c:	40020070 	.word	0x40020070
 8002780:	40020088 	.word	0x40020088
 8002784:	400200a0 	.word	0x400200a0
 8002788:	400200b8 	.word	0x400200b8
 800278c:	40020410 	.word	0x40020410
 8002790:	40020428 	.word	0x40020428
 8002794:	40020440 	.word	0x40020440
 8002798:	40020458 	.word	0x40020458
 800279c:	40020470 	.word	0x40020470
 80027a0:	40020488 	.word	0x40020488
 80027a4:	400204a0 	.word	0x400204a0
 80027a8:	400204b8 	.word	0x400204b8
 80027ac:	58025408 	.word	0x58025408
 80027b0:	5802541c 	.word	0x5802541c
 80027b4:	58025430 	.word	0x58025430
 80027b8:	58025444 	.word	0x58025444
 80027bc:	58025458 	.word	0x58025458
 80027c0:	5802546c 	.word	0x5802546c
 80027c4:	58025480 	.word	0x58025480
 80027c8:	58025494 	.word	0x58025494

080027cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e237      	b.n	8002c4e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d004      	beq.n	80027f4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2280      	movs	r2, #128	; 0x80
 80027ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e22c      	b.n	8002c4e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a5c      	ldr	r2, [pc, #368]	; (800296c <HAL_DMA_Abort_IT+0x1a0>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d04a      	beq.n	8002894 <HAL_DMA_Abort_IT+0xc8>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a5b      	ldr	r2, [pc, #364]	; (8002970 <HAL_DMA_Abort_IT+0x1a4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d045      	beq.n	8002894 <HAL_DMA_Abort_IT+0xc8>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a59      	ldr	r2, [pc, #356]	; (8002974 <HAL_DMA_Abort_IT+0x1a8>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d040      	beq.n	8002894 <HAL_DMA_Abort_IT+0xc8>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a58      	ldr	r2, [pc, #352]	; (8002978 <HAL_DMA_Abort_IT+0x1ac>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d03b      	beq.n	8002894 <HAL_DMA_Abort_IT+0xc8>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a56      	ldr	r2, [pc, #344]	; (800297c <HAL_DMA_Abort_IT+0x1b0>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d036      	beq.n	8002894 <HAL_DMA_Abort_IT+0xc8>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a55      	ldr	r2, [pc, #340]	; (8002980 <HAL_DMA_Abort_IT+0x1b4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d031      	beq.n	8002894 <HAL_DMA_Abort_IT+0xc8>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a53      	ldr	r2, [pc, #332]	; (8002984 <HAL_DMA_Abort_IT+0x1b8>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d02c      	beq.n	8002894 <HAL_DMA_Abort_IT+0xc8>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a52      	ldr	r2, [pc, #328]	; (8002988 <HAL_DMA_Abort_IT+0x1bc>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d027      	beq.n	8002894 <HAL_DMA_Abort_IT+0xc8>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a50      	ldr	r2, [pc, #320]	; (800298c <HAL_DMA_Abort_IT+0x1c0>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d022      	beq.n	8002894 <HAL_DMA_Abort_IT+0xc8>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a4f      	ldr	r2, [pc, #316]	; (8002990 <HAL_DMA_Abort_IT+0x1c4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d01d      	beq.n	8002894 <HAL_DMA_Abort_IT+0xc8>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a4d      	ldr	r2, [pc, #308]	; (8002994 <HAL_DMA_Abort_IT+0x1c8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d018      	beq.n	8002894 <HAL_DMA_Abort_IT+0xc8>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a4c      	ldr	r2, [pc, #304]	; (8002998 <HAL_DMA_Abort_IT+0x1cc>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d013      	beq.n	8002894 <HAL_DMA_Abort_IT+0xc8>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a4a      	ldr	r2, [pc, #296]	; (800299c <HAL_DMA_Abort_IT+0x1d0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d00e      	beq.n	8002894 <HAL_DMA_Abort_IT+0xc8>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a49      	ldr	r2, [pc, #292]	; (80029a0 <HAL_DMA_Abort_IT+0x1d4>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d009      	beq.n	8002894 <HAL_DMA_Abort_IT+0xc8>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a47      	ldr	r2, [pc, #284]	; (80029a4 <HAL_DMA_Abort_IT+0x1d8>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d004      	beq.n	8002894 <HAL_DMA_Abort_IT+0xc8>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a46      	ldr	r2, [pc, #280]	; (80029a8 <HAL_DMA_Abort_IT+0x1dc>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d101      	bne.n	8002898 <HAL_DMA_Abort_IT+0xcc>
 8002894:	2301      	movs	r3, #1
 8002896:	e000      	b.n	800289a <HAL_DMA_Abort_IT+0xce>
 8002898:	2300      	movs	r3, #0
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 8086 	beq.w	80029ac <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2204      	movs	r2, #4
 80028a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a2f      	ldr	r2, [pc, #188]	; (800296c <HAL_DMA_Abort_IT+0x1a0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d04a      	beq.n	8002948 <HAL_DMA_Abort_IT+0x17c>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a2e      	ldr	r2, [pc, #184]	; (8002970 <HAL_DMA_Abort_IT+0x1a4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d045      	beq.n	8002948 <HAL_DMA_Abort_IT+0x17c>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a2c      	ldr	r2, [pc, #176]	; (8002974 <HAL_DMA_Abort_IT+0x1a8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d040      	beq.n	8002948 <HAL_DMA_Abort_IT+0x17c>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a2b      	ldr	r2, [pc, #172]	; (8002978 <HAL_DMA_Abort_IT+0x1ac>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d03b      	beq.n	8002948 <HAL_DMA_Abort_IT+0x17c>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a29      	ldr	r2, [pc, #164]	; (800297c <HAL_DMA_Abort_IT+0x1b0>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d036      	beq.n	8002948 <HAL_DMA_Abort_IT+0x17c>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a28      	ldr	r2, [pc, #160]	; (8002980 <HAL_DMA_Abort_IT+0x1b4>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d031      	beq.n	8002948 <HAL_DMA_Abort_IT+0x17c>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a26      	ldr	r2, [pc, #152]	; (8002984 <HAL_DMA_Abort_IT+0x1b8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d02c      	beq.n	8002948 <HAL_DMA_Abort_IT+0x17c>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a25      	ldr	r2, [pc, #148]	; (8002988 <HAL_DMA_Abort_IT+0x1bc>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d027      	beq.n	8002948 <HAL_DMA_Abort_IT+0x17c>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a23      	ldr	r2, [pc, #140]	; (800298c <HAL_DMA_Abort_IT+0x1c0>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d022      	beq.n	8002948 <HAL_DMA_Abort_IT+0x17c>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a22      	ldr	r2, [pc, #136]	; (8002990 <HAL_DMA_Abort_IT+0x1c4>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d01d      	beq.n	8002948 <HAL_DMA_Abort_IT+0x17c>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a20      	ldr	r2, [pc, #128]	; (8002994 <HAL_DMA_Abort_IT+0x1c8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d018      	beq.n	8002948 <HAL_DMA_Abort_IT+0x17c>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a1f      	ldr	r2, [pc, #124]	; (8002998 <HAL_DMA_Abort_IT+0x1cc>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d013      	beq.n	8002948 <HAL_DMA_Abort_IT+0x17c>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a1d      	ldr	r2, [pc, #116]	; (800299c <HAL_DMA_Abort_IT+0x1d0>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d00e      	beq.n	8002948 <HAL_DMA_Abort_IT+0x17c>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a1c      	ldr	r2, [pc, #112]	; (80029a0 <HAL_DMA_Abort_IT+0x1d4>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d009      	beq.n	8002948 <HAL_DMA_Abort_IT+0x17c>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a1a      	ldr	r2, [pc, #104]	; (80029a4 <HAL_DMA_Abort_IT+0x1d8>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d004      	beq.n	8002948 <HAL_DMA_Abort_IT+0x17c>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a19      	ldr	r2, [pc, #100]	; (80029a8 <HAL_DMA_Abort_IT+0x1dc>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d108      	bne.n	800295a <HAL_DMA_Abort_IT+0x18e>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0201 	bic.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	e178      	b.n	8002c4c <HAL_DMA_Abort_IT+0x480>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0201 	bic.w	r2, r2, #1
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	e16f      	b.n	8002c4c <HAL_DMA_Abort_IT+0x480>
 800296c:	40020010 	.word	0x40020010
 8002970:	40020028 	.word	0x40020028
 8002974:	40020040 	.word	0x40020040
 8002978:	40020058 	.word	0x40020058
 800297c:	40020070 	.word	0x40020070
 8002980:	40020088 	.word	0x40020088
 8002984:	400200a0 	.word	0x400200a0
 8002988:	400200b8 	.word	0x400200b8
 800298c:	40020410 	.word	0x40020410
 8002990:	40020428 	.word	0x40020428
 8002994:	40020440 	.word	0x40020440
 8002998:	40020458 	.word	0x40020458
 800299c:	40020470 	.word	0x40020470
 80029a0:	40020488 	.word	0x40020488
 80029a4:	400204a0 	.word	0x400204a0
 80029a8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 020e 	bic.w	r2, r2, #14
 80029ba:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a6c      	ldr	r2, [pc, #432]	; (8002b74 <HAL_DMA_Abort_IT+0x3a8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d04a      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x290>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a6b      	ldr	r2, [pc, #428]	; (8002b78 <HAL_DMA_Abort_IT+0x3ac>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d045      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x290>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a69      	ldr	r2, [pc, #420]	; (8002b7c <HAL_DMA_Abort_IT+0x3b0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d040      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x290>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a68      	ldr	r2, [pc, #416]	; (8002b80 <HAL_DMA_Abort_IT+0x3b4>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d03b      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x290>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a66      	ldr	r2, [pc, #408]	; (8002b84 <HAL_DMA_Abort_IT+0x3b8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d036      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x290>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a65      	ldr	r2, [pc, #404]	; (8002b88 <HAL_DMA_Abort_IT+0x3bc>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d031      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x290>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a63      	ldr	r2, [pc, #396]	; (8002b8c <HAL_DMA_Abort_IT+0x3c0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d02c      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x290>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a62      	ldr	r2, [pc, #392]	; (8002b90 <HAL_DMA_Abort_IT+0x3c4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d027      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x290>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a60      	ldr	r2, [pc, #384]	; (8002b94 <HAL_DMA_Abort_IT+0x3c8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d022      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x290>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a5f      	ldr	r2, [pc, #380]	; (8002b98 <HAL_DMA_Abort_IT+0x3cc>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d01d      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x290>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a5d      	ldr	r2, [pc, #372]	; (8002b9c <HAL_DMA_Abort_IT+0x3d0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d018      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x290>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a5c      	ldr	r2, [pc, #368]	; (8002ba0 <HAL_DMA_Abort_IT+0x3d4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d013      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x290>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a5a      	ldr	r2, [pc, #360]	; (8002ba4 <HAL_DMA_Abort_IT+0x3d8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d00e      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x290>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a59      	ldr	r2, [pc, #356]	; (8002ba8 <HAL_DMA_Abort_IT+0x3dc>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d009      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x290>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a57      	ldr	r2, [pc, #348]	; (8002bac <HAL_DMA_Abort_IT+0x3e0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d004      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x290>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a56      	ldr	r2, [pc, #344]	; (8002bb0 <HAL_DMA_Abort_IT+0x3e4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d108      	bne.n	8002a6e <HAL_DMA_Abort_IT+0x2a2>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0201 	bic.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	e007      	b.n	8002a7e <HAL_DMA_Abort_IT+0x2b2>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0201 	bic.w	r2, r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a3c      	ldr	r2, [pc, #240]	; (8002b74 <HAL_DMA_Abort_IT+0x3a8>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d072      	beq.n	8002b6e <HAL_DMA_Abort_IT+0x3a2>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a3a      	ldr	r2, [pc, #232]	; (8002b78 <HAL_DMA_Abort_IT+0x3ac>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d06d      	beq.n	8002b6e <HAL_DMA_Abort_IT+0x3a2>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a39      	ldr	r2, [pc, #228]	; (8002b7c <HAL_DMA_Abort_IT+0x3b0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d068      	beq.n	8002b6e <HAL_DMA_Abort_IT+0x3a2>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a37      	ldr	r2, [pc, #220]	; (8002b80 <HAL_DMA_Abort_IT+0x3b4>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d063      	beq.n	8002b6e <HAL_DMA_Abort_IT+0x3a2>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a36      	ldr	r2, [pc, #216]	; (8002b84 <HAL_DMA_Abort_IT+0x3b8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d05e      	beq.n	8002b6e <HAL_DMA_Abort_IT+0x3a2>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a34      	ldr	r2, [pc, #208]	; (8002b88 <HAL_DMA_Abort_IT+0x3bc>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d059      	beq.n	8002b6e <HAL_DMA_Abort_IT+0x3a2>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a33      	ldr	r2, [pc, #204]	; (8002b8c <HAL_DMA_Abort_IT+0x3c0>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d054      	beq.n	8002b6e <HAL_DMA_Abort_IT+0x3a2>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a31      	ldr	r2, [pc, #196]	; (8002b90 <HAL_DMA_Abort_IT+0x3c4>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d04f      	beq.n	8002b6e <HAL_DMA_Abort_IT+0x3a2>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a30      	ldr	r2, [pc, #192]	; (8002b94 <HAL_DMA_Abort_IT+0x3c8>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d04a      	beq.n	8002b6e <HAL_DMA_Abort_IT+0x3a2>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a2e      	ldr	r2, [pc, #184]	; (8002b98 <HAL_DMA_Abort_IT+0x3cc>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d045      	beq.n	8002b6e <HAL_DMA_Abort_IT+0x3a2>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a2d      	ldr	r2, [pc, #180]	; (8002b9c <HAL_DMA_Abort_IT+0x3d0>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d040      	beq.n	8002b6e <HAL_DMA_Abort_IT+0x3a2>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a2b      	ldr	r2, [pc, #172]	; (8002ba0 <HAL_DMA_Abort_IT+0x3d4>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d03b      	beq.n	8002b6e <HAL_DMA_Abort_IT+0x3a2>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a2a      	ldr	r2, [pc, #168]	; (8002ba4 <HAL_DMA_Abort_IT+0x3d8>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d036      	beq.n	8002b6e <HAL_DMA_Abort_IT+0x3a2>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a28      	ldr	r2, [pc, #160]	; (8002ba8 <HAL_DMA_Abort_IT+0x3dc>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d031      	beq.n	8002b6e <HAL_DMA_Abort_IT+0x3a2>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a27      	ldr	r2, [pc, #156]	; (8002bac <HAL_DMA_Abort_IT+0x3e0>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d02c      	beq.n	8002b6e <HAL_DMA_Abort_IT+0x3a2>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a25      	ldr	r2, [pc, #148]	; (8002bb0 <HAL_DMA_Abort_IT+0x3e4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d027      	beq.n	8002b6e <HAL_DMA_Abort_IT+0x3a2>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a24      	ldr	r2, [pc, #144]	; (8002bb4 <HAL_DMA_Abort_IT+0x3e8>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d022      	beq.n	8002b6e <HAL_DMA_Abort_IT+0x3a2>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a22      	ldr	r2, [pc, #136]	; (8002bb8 <HAL_DMA_Abort_IT+0x3ec>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d01d      	beq.n	8002b6e <HAL_DMA_Abort_IT+0x3a2>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a21      	ldr	r2, [pc, #132]	; (8002bbc <HAL_DMA_Abort_IT+0x3f0>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d018      	beq.n	8002b6e <HAL_DMA_Abort_IT+0x3a2>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a1f      	ldr	r2, [pc, #124]	; (8002bc0 <HAL_DMA_Abort_IT+0x3f4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d013      	beq.n	8002b6e <HAL_DMA_Abort_IT+0x3a2>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a1e      	ldr	r2, [pc, #120]	; (8002bc4 <HAL_DMA_Abort_IT+0x3f8>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d00e      	beq.n	8002b6e <HAL_DMA_Abort_IT+0x3a2>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a1c      	ldr	r2, [pc, #112]	; (8002bc8 <HAL_DMA_Abort_IT+0x3fc>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d009      	beq.n	8002b6e <HAL_DMA_Abort_IT+0x3a2>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a1b      	ldr	r2, [pc, #108]	; (8002bcc <HAL_DMA_Abort_IT+0x400>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d004      	beq.n	8002b6e <HAL_DMA_Abort_IT+0x3a2>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a19      	ldr	r2, [pc, #100]	; (8002bd0 <HAL_DMA_Abort_IT+0x404>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d132      	bne.n	8002bd4 <HAL_DMA_Abort_IT+0x408>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e031      	b.n	8002bd6 <HAL_DMA_Abort_IT+0x40a>
 8002b72:	bf00      	nop
 8002b74:	40020010 	.word	0x40020010
 8002b78:	40020028 	.word	0x40020028
 8002b7c:	40020040 	.word	0x40020040
 8002b80:	40020058 	.word	0x40020058
 8002b84:	40020070 	.word	0x40020070
 8002b88:	40020088 	.word	0x40020088
 8002b8c:	400200a0 	.word	0x400200a0
 8002b90:	400200b8 	.word	0x400200b8
 8002b94:	40020410 	.word	0x40020410
 8002b98:	40020428 	.word	0x40020428
 8002b9c:	40020440 	.word	0x40020440
 8002ba0:	40020458 	.word	0x40020458
 8002ba4:	40020470 	.word	0x40020470
 8002ba8:	40020488 	.word	0x40020488
 8002bac:	400204a0 	.word	0x400204a0
 8002bb0:	400204b8 	.word	0x400204b8
 8002bb4:	58025408 	.word	0x58025408
 8002bb8:	5802541c 	.word	0x5802541c
 8002bbc:	58025430 	.word	0x58025430
 8002bc0:	58025444 	.word	0x58025444
 8002bc4:	58025458 	.word	0x58025458
 8002bc8:	5802546c 	.word	0x5802546c
 8002bcc:	58025480 	.word	0x58025480
 8002bd0:	58025494 	.word	0x58025494
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d028      	beq.n	8002c2c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002be8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bee:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf4:	f003 031f 	and.w	r3, r3, #31
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	409a      	lsls	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002c08:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00c      	beq.n	8002c2c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c20:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002c2a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d003      	beq.n	8002c4c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop

08002c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b089      	sub	sp, #36	; 0x24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002c66:	4b89      	ldr	r3, [pc, #548]	; (8002e8c <HAL_GPIO_Init+0x234>)
 8002c68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c6a:	e194      	b.n	8002f96 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	2101      	movs	r1, #1
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	fa01 f303 	lsl.w	r3, r1, r3
 8002c78:	4013      	ands	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 8186 	beq.w	8002f90 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d005      	beq.n	8002c9c <HAL_GPIO_Init+0x44>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d130      	bne.n	8002cfe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	091b      	lsrs	r3, r3, #4
 8002ce8:	f003 0201 	and.w	r2, r3, #1
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	2b03      	cmp	r3, #3
 8002d08:	d017      	beq.n	8002d3a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	2203      	movs	r2, #3
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d123      	bne.n	8002d8e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	08da      	lsrs	r2, r3, #3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3208      	adds	r2, #8
 8002d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	220f      	movs	r2, #15
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43db      	mvns	r3, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4013      	ands	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	691a      	ldr	r2, [r3, #16]
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	08da      	lsrs	r2, r3, #3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3208      	adds	r2, #8
 8002d88:	69b9      	ldr	r1, [r7, #24]
 8002d8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	2203      	movs	r2, #3
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f003 0203 	and.w	r2, r3, #3
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 80e0 	beq.w	8002f90 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd0:	4b2f      	ldr	r3, [pc, #188]	; (8002e90 <HAL_GPIO_Init+0x238>)
 8002dd2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002dd6:	4a2e      	ldr	r2, [pc, #184]	; (8002e90 <HAL_GPIO_Init+0x238>)
 8002dd8:	f043 0302 	orr.w	r3, r3, #2
 8002ddc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002de0:	4b2b      	ldr	r3, [pc, #172]	; (8002e90 <HAL_GPIO_Init+0x238>)
 8002de2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dee:	4a29      	ldr	r2, [pc, #164]	; (8002e94 <HAL_GPIO_Init+0x23c>)
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	089b      	lsrs	r3, r3, #2
 8002df4:	3302      	adds	r3, #2
 8002df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	220f      	movs	r2, #15
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a20      	ldr	r2, [pc, #128]	; (8002e98 <HAL_GPIO_Init+0x240>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d052      	beq.n	8002ec0 <HAL_GPIO_Init+0x268>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a1f      	ldr	r2, [pc, #124]	; (8002e9c <HAL_GPIO_Init+0x244>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d031      	beq.n	8002e86 <HAL_GPIO_Init+0x22e>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a1e      	ldr	r2, [pc, #120]	; (8002ea0 <HAL_GPIO_Init+0x248>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d02b      	beq.n	8002e82 <HAL_GPIO_Init+0x22a>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a1d      	ldr	r2, [pc, #116]	; (8002ea4 <HAL_GPIO_Init+0x24c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d025      	beq.n	8002e7e <HAL_GPIO_Init+0x226>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a1c      	ldr	r2, [pc, #112]	; (8002ea8 <HAL_GPIO_Init+0x250>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d01f      	beq.n	8002e7a <HAL_GPIO_Init+0x222>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a1b      	ldr	r2, [pc, #108]	; (8002eac <HAL_GPIO_Init+0x254>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d019      	beq.n	8002e76 <HAL_GPIO_Init+0x21e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a1a      	ldr	r2, [pc, #104]	; (8002eb0 <HAL_GPIO_Init+0x258>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d013      	beq.n	8002e72 <HAL_GPIO_Init+0x21a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a19      	ldr	r2, [pc, #100]	; (8002eb4 <HAL_GPIO_Init+0x25c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d00d      	beq.n	8002e6e <HAL_GPIO_Init+0x216>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a18      	ldr	r2, [pc, #96]	; (8002eb8 <HAL_GPIO_Init+0x260>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d007      	beq.n	8002e6a <HAL_GPIO_Init+0x212>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a17      	ldr	r2, [pc, #92]	; (8002ebc <HAL_GPIO_Init+0x264>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d101      	bne.n	8002e66 <HAL_GPIO_Init+0x20e>
 8002e62:	2309      	movs	r3, #9
 8002e64:	e02d      	b.n	8002ec2 <HAL_GPIO_Init+0x26a>
 8002e66:	230a      	movs	r3, #10
 8002e68:	e02b      	b.n	8002ec2 <HAL_GPIO_Init+0x26a>
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	e029      	b.n	8002ec2 <HAL_GPIO_Init+0x26a>
 8002e6e:	2307      	movs	r3, #7
 8002e70:	e027      	b.n	8002ec2 <HAL_GPIO_Init+0x26a>
 8002e72:	2306      	movs	r3, #6
 8002e74:	e025      	b.n	8002ec2 <HAL_GPIO_Init+0x26a>
 8002e76:	2305      	movs	r3, #5
 8002e78:	e023      	b.n	8002ec2 <HAL_GPIO_Init+0x26a>
 8002e7a:	2304      	movs	r3, #4
 8002e7c:	e021      	b.n	8002ec2 <HAL_GPIO_Init+0x26a>
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e01f      	b.n	8002ec2 <HAL_GPIO_Init+0x26a>
 8002e82:	2302      	movs	r3, #2
 8002e84:	e01d      	b.n	8002ec2 <HAL_GPIO_Init+0x26a>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e01b      	b.n	8002ec2 <HAL_GPIO_Init+0x26a>
 8002e8a:	bf00      	nop
 8002e8c:	58000080 	.word	0x58000080
 8002e90:	58024400 	.word	0x58024400
 8002e94:	58000400 	.word	0x58000400
 8002e98:	58020000 	.word	0x58020000
 8002e9c:	58020400 	.word	0x58020400
 8002ea0:	58020800 	.word	0x58020800
 8002ea4:	58020c00 	.word	0x58020c00
 8002ea8:	58021000 	.word	0x58021000
 8002eac:	58021400 	.word	0x58021400
 8002eb0:	58021800 	.word	0x58021800
 8002eb4:	58021c00 	.word	0x58021c00
 8002eb8:	58022000 	.word	0x58022000
 8002ebc:	58022400 	.word	0x58022400
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	69fa      	ldr	r2, [r7, #28]
 8002ec4:	f002 0203 	and.w	r2, r2, #3
 8002ec8:	0092      	lsls	r2, r2, #2
 8002eca:	4093      	lsls	r3, r2
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ed2:	4938      	ldr	r1, [pc, #224]	; (8002fb4 <HAL_GPIO_Init+0x35c>)
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	089b      	lsrs	r3, r3, #2
 8002ed8:	3302      	adds	r3, #2
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	43db      	mvns	r3, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002f06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002f34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	43db      	mvns	r3, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4013      	ands	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	3301      	adds	r3, #1
 8002f94:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f47f ae63 	bne.w	8002c6c <HAL_GPIO_Init+0x14>
  }
}
 8002fa6:	bf00      	nop
 8002fa8:	bf00      	nop
 8002faa:	3724      	adds	r7, #36	; 0x24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	58000400 	.word	0x58000400

08002fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	807b      	strh	r3, [r7, #2]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fc8:	787b      	ldrb	r3, [r7, #1]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fce:	887a      	ldrh	r2, [r7, #2]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002fd4:	e003      	b.n	8002fde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002fd6:	887b      	ldrh	r3, [r7, #2]
 8002fd8:	041a      	lsls	r2, r3, #16
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	619a      	str	r2, [r3, #24]
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
	...

08002fec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002ff4:	4b29      	ldr	r3, [pc, #164]	; (800309c <HAL_PWREx_ConfigSupply+0xb0>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	2b06      	cmp	r3, #6
 8002ffe:	d00a      	beq.n	8003016 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003000:	4b26      	ldr	r3, [pc, #152]	; (800309c <HAL_PWREx_ConfigSupply+0xb0>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	429a      	cmp	r2, r3
 800300c:	d001      	beq.n	8003012 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e040      	b.n	8003094 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	e03e      	b.n	8003094 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003016:	4b21      	ldr	r3, [pc, #132]	; (800309c <HAL_PWREx_ConfigSupply+0xb0>)
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800301e:	491f      	ldr	r1, [pc, #124]	; (800309c <HAL_PWREx_ConfigSupply+0xb0>)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4313      	orrs	r3, r2
 8003024:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003026:	f7fe ff53 	bl	8001ed0 <HAL_GetTick>
 800302a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800302c:	e009      	b.n	8003042 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800302e:	f7fe ff4f 	bl	8001ed0 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800303c:	d901      	bls.n	8003042 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e028      	b.n	8003094 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003042:	4b16      	ldr	r3, [pc, #88]	; (800309c <HAL_PWREx_ConfigSupply+0xb0>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800304a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800304e:	d1ee      	bne.n	800302e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b1e      	cmp	r3, #30
 8003054:	d008      	beq.n	8003068 <HAL_PWREx_ConfigSupply+0x7c>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b2e      	cmp	r3, #46	; 0x2e
 800305a:	d005      	beq.n	8003068 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b1d      	cmp	r3, #29
 8003060:	d002      	beq.n	8003068 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b2d      	cmp	r3, #45	; 0x2d
 8003066:	d114      	bne.n	8003092 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003068:	f7fe ff32 	bl	8001ed0 <HAL_GetTick>
 800306c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800306e:	e009      	b.n	8003084 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003070:	f7fe ff2e 	bl	8001ed0 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800307e:	d901      	bls.n	8003084 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e007      	b.n	8003094 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003084:	4b05      	ldr	r3, [pc, #20]	; (800309c <HAL_PWREx_ConfigSupply+0xb0>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800308c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003090:	d1ee      	bne.n	8003070 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	58024800 	.word	0x58024800

080030a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08c      	sub	sp, #48	; 0x30
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d102      	bne.n	80030b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	f000 bc1f 	b.w	80038f2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 80b3 	beq.w	8003228 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030c2:	4b95      	ldr	r3, [pc, #596]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030cc:	4b92      	ldr	r3, [pc, #584]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 80030ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80030d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d4:	2b10      	cmp	r3, #16
 80030d6:	d007      	beq.n	80030e8 <HAL_RCC_OscConfig+0x48>
 80030d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030da:	2b18      	cmp	r3, #24
 80030dc:	d112      	bne.n	8003104 <HAL_RCC_OscConfig+0x64>
 80030de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e0:	f003 0303 	and.w	r3, r3, #3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d10d      	bne.n	8003104 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e8:	4b8b      	ldr	r3, [pc, #556]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 8098 	beq.w	8003226 <HAL_RCC_OscConfig+0x186>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f040 8093 	bne.w	8003226 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e3f6      	b.n	80038f2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800310c:	d106      	bne.n	800311c <HAL_RCC_OscConfig+0x7c>
 800310e:	4b82      	ldr	r3, [pc, #520]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a81      	ldr	r2, [pc, #516]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 8003114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	e058      	b.n	80031ce <HAL_RCC_OscConfig+0x12e>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d112      	bne.n	800314a <HAL_RCC_OscConfig+0xaa>
 8003124:	4b7c      	ldr	r3, [pc, #496]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a7b      	ldr	r2, [pc, #492]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 800312a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800312e:	6013      	str	r3, [r2, #0]
 8003130:	4b79      	ldr	r3, [pc, #484]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a78      	ldr	r2, [pc, #480]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 8003136:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	4b76      	ldr	r3, [pc, #472]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a75      	ldr	r2, [pc, #468]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 8003142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003146:	6013      	str	r3, [r2, #0]
 8003148:	e041      	b.n	80031ce <HAL_RCC_OscConfig+0x12e>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003152:	d112      	bne.n	800317a <HAL_RCC_OscConfig+0xda>
 8003154:	4b70      	ldr	r3, [pc, #448]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a6f      	ldr	r2, [pc, #444]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 800315a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800315e:	6013      	str	r3, [r2, #0]
 8003160:	4b6d      	ldr	r3, [pc, #436]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a6c      	ldr	r2, [pc, #432]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 8003166:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	4b6a      	ldr	r3, [pc, #424]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a69      	ldr	r2, [pc, #420]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 8003172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	e029      	b.n	80031ce <HAL_RCC_OscConfig+0x12e>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003182:	d112      	bne.n	80031aa <HAL_RCC_OscConfig+0x10a>
 8003184:	4b64      	ldr	r3, [pc, #400]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a63      	ldr	r2, [pc, #396]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 800318a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800318e:	6013      	str	r3, [r2, #0]
 8003190:	4b61      	ldr	r3, [pc, #388]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a60      	ldr	r2, [pc, #384]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 8003196:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	4b5e      	ldr	r3, [pc, #376]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a5d      	ldr	r2, [pc, #372]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 80031a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a6:	6013      	str	r3, [r2, #0]
 80031a8:	e011      	b.n	80031ce <HAL_RCC_OscConfig+0x12e>
 80031aa:	4b5b      	ldr	r3, [pc, #364]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a5a      	ldr	r2, [pc, #360]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 80031b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	4b58      	ldr	r3, [pc, #352]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a57      	ldr	r2, [pc, #348]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 80031bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	4b55      	ldr	r3, [pc, #340]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a54      	ldr	r2, [pc, #336]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 80031c8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80031cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d013      	beq.n	80031fe <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d6:	f7fe fe7b 	bl	8001ed0 <HAL_GetTick>
 80031da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031de:	f7fe fe77 	bl	8001ed0 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b64      	cmp	r3, #100	; 0x64
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e380      	b.n	80038f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031f0:	4b49      	ldr	r3, [pc, #292]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x13e>
 80031fc:	e014      	b.n	8003228 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fe:	f7fe fe67 	bl	8001ed0 <HAL_GetTick>
 8003202:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003204:	e008      	b.n	8003218 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003206:	f7fe fe63 	bl	8001ed0 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b64      	cmp	r3, #100	; 0x64
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e36c      	b.n	80038f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003218:	4b3f      	ldr	r3, [pc, #252]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1f0      	bne.n	8003206 <HAL_RCC_OscConfig+0x166>
 8003224:	e000      	b.n	8003228 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003226:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 808c 	beq.w	800334e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003236:	4b38      	ldr	r3, [pc, #224]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800323e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003240:	4b35      	ldr	r3, [pc, #212]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 8003242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003244:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d007      	beq.n	800325c <HAL_RCC_OscConfig+0x1bc>
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	2b18      	cmp	r3, #24
 8003250:	d137      	bne.n	80032c2 <HAL_RCC_OscConfig+0x222>
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	2b00      	cmp	r3, #0
 800325a:	d132      	bne.n	80032c2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800325c:	4b2e      	ldr	r3, [pc, #184]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <HAL_RCC_OscConfig+0x1d4>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e33e      	b.n	80038f2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003274:	4b28      	ldr	r3, [pc, #160]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f023 0219 	bic.w	r2, r3, #25
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	4925      	ldr	r1, [pc, #148]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 8003282:	4313      	orrs	r3, r2
 8003284:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003286:	f7fe fe23 	bl	8001ed0 <HAL_GetTick>
 800328a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800328e:	f7fe fe1f 	bl	8001ed0 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e328      	b.n	80038f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032a0:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0f0      	beq.n	800328e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ac:	4b1a      	ldr	r3, [pc, #104]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	061b      	lsls	r3, r3, #24
 80032ba:	4917      	ldr	r1, [pc, #92]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032c0:	e045      	b.n	800334e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d028      	beq.n	800331c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80032ca:	4b13      	ldr	r3, [pc, #76]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f023 0219 	bic.w	r2, r3, #25
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	4910      	ldr	r1, [pc, #64]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032dc:	f7fe fdf8 	bl	8001ed0 <HAL_GetTick>
 80032e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e4:	f7fe fdf4 	bl	8001ed0 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e2fd      	b.n	80038f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032f6:	4b08      	ldr	r3, [pc, #32]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0f0      	beq.n	80032e4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003302:	4b05      	ldr	r3, [pc, #20]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	061b      	lsls	r3, r3, #24
 8003310:	4901      	ldr	r1, [pc, #4]	; (8003318 <HAL_RCC_OscConfig+0x278>)
 8003312:	4313      	orrs	r3, r2
 8003314:	604b      	str	r3, [r1, #4]
 8003316:	e01a      	b.n	800334e <HAL_RCC_OscConfig+0x2ae>
 8003318:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800331c:	4b97      	ldr	r3, [pc, #604]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a96      	ldr	r2, [pc, #600]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 8003322:	f023 0301 	bic.w	r3, r3, #1
 8003326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003328:	f7fe fdd2 	bl	8001ed0 <HAL_GetTick>
 800332c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003330:	f7fe fdce 	bl	8001ed0 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e2d7      	b.n	80038f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003342:	4b8e      	ldr	r3, [pc, #568]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0304 	and.w	r3, r3, #4
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f0      	bne.n	8003330 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0310 	and.w	r3, r3, #16
 8003356:	2b00      	cmp	r3, #0
 8003358:	d06a      	beq.n	8003430 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800335a:	4b88      	ldr	r3, [pc, #544]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003362:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003364:	4b85      	ldr	r3, [pc, #532]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 8003366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003368:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	2b08      	cmp	r3, #8
 800336e:	d007      	beq.n	8003380 <HAL_RCC_OscConfig+0x2e0>
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	2b18      	cmp	r3, #24
 8003374:	d11b      	bne.n	80033ae <HAL_RCC_OscConfig+0x30e>
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f003 0303 	and.w	r3, r3, #3
 800337c:	2b01      	cmp	r3, #1
 800337e:	d116      	bne.n	80033ae <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003380:	4b7e      	ldr	r3, [pc, #504]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d005      	beq.n	8003398 <HAL_RCC_OscConfig+0x2f8>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	2b80      	cmp	r3, #128	; 0x80
 8003392:	d001      	beq.n	8003398 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e2ac      	b.n	80038f2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003398:	4b78      	ldr	r3, [pc, #480]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	061b      	lsls	r3, r3, #24
 80033a6:	4975      	ldr	r1, [pc, #468]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80033ac:	e040      	b.n	8003430 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d023      	beq.n	80033fe <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80033b6:	4b71      	ldr	r3, [pc, #452]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a70      	ldr	r2, [pc, #448]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 80033bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c2:	f7fe fd85 	bl	8001ed0 <HAL_GetTick>
 80033c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80033ca:	f7fe fd81 	bl	8001ed0 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e28a      	b.n	80038f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033dc:	4b67      	ldr	r3, [pc, #412]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0f0      	beq.n	80033ca <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80033e8:	4b64      	ldr	r3, [pc, #400]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	061b      	lsls	r3, r3, #24
 80033f6:	4961      	ldr	r1, [pc, #388]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60cb      	str	r3, [r1, #12]
 80033fc:	e018      	b.n	8003430 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80033fe:	4b5f      	ldr	r3, [pc, #380]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a5e      	ldr	r2, [pc, #376]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 8003404:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003408:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340a:	f7fe fd61 	bl	8001ed0 <HAL_GetTick>
 800340e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003412:	f7fe fd5d 	bl	8001ed0 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e266      	b.n	80038f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003424:	4b55      	ldr	r3, [pc, #340]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1f0      	bne.n	8003412 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b00      	cmp	r3, #0
 800343a:	d036      	beq.n	80034aa <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d019      	beq.n	8003478 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003444:	4b4d      	ldr	r3, [pc, #308]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 8003446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003448:	4a4c      	ldr	r2, [pc, #304]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 800344a:	f043 0301 	orr.w	r3, r3, #1
 800344e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003450:	f7fe fd3e 	bl	8001ed0 <HAL_GetTick>
 8003454:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003458:	f7fe fd3a 	bl	8001ed0 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e243      	b.n	80038f2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800346a:	4b44      	ldr	r3, [pc, #272]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 800346c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCC_OscConfig+0x3b8>
 8003476:	e018      	b.n	80034aa <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003478:	4b40      	ldr	r3, [pc, #256]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 800347a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800347c:	4a3f      	ldr	r2, [pc, #252]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 800347e:	f023 0301 	bic.w	r3, r3, #1
 8003482:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003484:	f7fe fd24 	bl	8001ed0 <HAL_GetTick>
 8003488:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800348c:	f7fe fd20 	bl	8001ed0 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e229      	b.n	80038f2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800349e:	4b37      	ldr	r3, [pc, #220]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 80034a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d036      	beq.n	8003524 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d019      	beq.n	80034f2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034be:	4b2f      	ldr	r3, [pc, #188]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a2e      	ldr	r2, [pc, #184]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 80034c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80034ca:	f7fe fd01 	bl	8001ed0 <HAL_GetTick>
 80034ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034d2:	f7fe fcfd 	bl	8001ed0 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e206      	b.n	80038f2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034e4:	4b25      	ldr	r3, [pc, #148]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f0      	beq.n	80034d2 <HAL_RCC_OscConfig+0x432>
 80034f0:	e018      	b.n	8003524 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034f2:	4b22      	ldr	r3, [pc, #136]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a21      	ldr	r2, [pc, #132]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 80034f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80034fe:	f7fe fce7 	bl	8001ed0 <HAL_GetTick>
 8003502:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003506:	f7fe fce3 	bl	8001ed0 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e1ec      	b.n	80038f2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003518:	4b18      	ldr	r3, [pc, #96]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1f0      	bne.n	8003506 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 80af 	beq.w	8003690 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003532:	4b13      	ldr	r3, [pc, #76]	; (8003580 <HAL_RCC_OscConfig+0x4e0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a12      	ldr	r2, [pc, #72]	; (8003580 <HAL_RCC_OscConfig+0x4e0>)
 8003538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800353c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800353e:	f7fe fcc7 	bl	8001ed0 <HAL_GetTick>
 8003542:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003546:	f7fe fcc3 	bl	8001ed0 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b64      	cmp	r3, #100	; 0x64
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e1cc      	b.n	80038f2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003558:	4b09      	ldr	r3, [pc, #36]	; (8003580 <HAL_RCC_OscConfig+0x4e0>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0f0      	beq.n	8003546 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d10b      	bne.n	8003584 <HAL_RCC_OscConfig+0x4e4>
 800356c:	4b03      	ldr	r3, [pc, #12]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 800356e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003570:	4a02      	ldr	r2, [pc, #8]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	6713      	str	r3, [r2, #112]	; 0x70
 8003578:	e05b      	b.n	8003632 <HAL_RCC_OscConfig+0x592>
 800357a:	bf00      	nop
 800357c:	58024400 	.word	0x58024400
 8003580:	58024800 	.word	0x58024800
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d112      	bne.n	80035b2 <HAL_RCC_OscConfig+0x512>
 800358c:	4b9d      	ldr	r3, [pc, #628]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 800358e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003590:	4a9c      	ldr	r2, [pc, #624]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 8003592:	f023 0301 	bic.w	r3, r3, #1
 8003596:	6713      	str	r3, [r2, #112]	; 0x70
 8003598:	4b9a      	ldr	r3, [pc, #616]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 800359a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359c:	4a99      	ldr	r2, [pc, #612]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 800359e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035a2:	6713      	str	r3, [r2, #112]	; 0x70
 80035a4:	4b97      	ldr	r3, [pc, #604]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 80035a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a8:	4a96      	ldr	r2, [pc, #600]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 80035aa:	f023 0304 	bic.w	r3, r3, #4
 80035ae:	6713      	str	r3, [r2, #112]	; 0x70
 80035b0:	e03f      	b.n	8003632 <HAL_RCC_OscConfig+0x592>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2b05      	cmp	r3, #5
 80035b8:	d112      	bne.n	80035e0 <HAL_RCC_OscConfig+0x540>
 80035ba:	4b92      	ldr	r3, [pc, #584]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 80035bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035be:	4a91      	ldr	r2, [pc, #580]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 80035c0:	f043 0304 	orr.w	r3, r3, #4
 80035c4:	6713      	str	r3, [r2, #112]	; 0x70
 80035c6:	4b8f      	ldr	r3, [pc, #572]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 80035c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ca:	4a8e      	ldr	r2, [pc, #568]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 80035cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035d0:	6713      	str	r3, [r2, #112]	; 0x70
 80035d2:	4b8c      	ldr	r3, [pc, #560]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 80035d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d6:	4a8b      	ldr	r2, [pc, #556]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	6713      	str	r3, [r2, #112]	; 0x70
 80035de:	e028      	b.n	8003632 <HAL_RCC_OscConfig+0x592>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	2b85      	cmp	r3, #133	; 0x85
 80035e6:	d112      	bne.n	800360e <HAL_RCC_OscConfig+0x56e>
 80035e8:	4b86      	ldr	r3, [pc, #536]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 80035ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ec:	4a85      	ldr	r2, [pc, #532]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 80035ee:	f043 0304 	orr.w	r3, r3, #4
 80035f2:	6713      	str	r3, [r2, #112]	; 0x70
 80035f4:	4b83      	ldr	r3, [pc, #524]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 80035f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f8:	4a82      	ldr	r2, [pc, #520]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 80035fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003600:	4b80      	ldr	r3, [pc, #512]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 8003602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003604:	4a7f      	ldr	r2, [pc, #508]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	6713      	str	r3, [r2, #112]	; 0x70
 800360c:	e011      	b.n	8003632 <HAL_RCC_OscConfig+0x592>
 800360e:	4b7d      	ldr	r3, [pc, #500]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 8003610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003612:	4a7c      	ldr	r2, [pc, #496]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 8003614:	f023 0301 	bic.w	r3, r3, #1
 8003618:	6713      	str	r3, [r2, #112]	; 0x70
 800361a:	4b7a      	ldr	r3, [pc, #488]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 800361c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361e:	4a79      	ldr	r2, [pc, #484]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 8003620:	f023 0304 	bic.w	r3, r3, #4
 8003624:	6713      	str	r3, [r2, #112]	; 0x70
 8003626:	4b77      	ldr	r3, [pc, #476]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 8003628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362a:	4a76      	ldr	r2, [pc, #472]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 800362c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003630:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d015      	beq.n	8003666 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363a:	f7fe fc49 	bl	8001ed0 <HAL_GetTick>
 800363e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003640:	e00a      	b.n	8003658 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003642:	f7fe fc45 	bl	8001ed0 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003650:	4293      	cmp	r3, r2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e14c      	b.n	80038f2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003658:	4b6a      	ldr	r3, [pc, #424]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 800365a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0ee      	beq.n	8003642 <HAL_RCC_OscConfig+0x5a2>
 8003664:	e014      	b.n	8003690 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003666:	f7fe fc33 	bl	8001ed0 <HAL_GetTick>
 800366a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800366c:	e00a      	b.n	8003684 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800366e:	f7fe fc2f 	bl	8001ed0 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	f241 3288 	movw	r2, #5000	; 0x1388
 800367c:	4293      	cmp	r3, r2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e136      	b.n	80038f2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003684:	4b5f      	ldr	r3, [pc, #380]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 8003686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1ee      	bne.n	800366e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 812b 	beq.w	80038f0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800369a:	4b5a      	ldr	r3, [pc, #360]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036a2:	2b18      	cmp	r3, #24
 80036a4:	f000 80bb 	beq.w	800381e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	f040 8095 	bne.w	80037dc <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036b2:	4b54      	ldr	r3, [pc, #336]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a53      	ldr	r2, [pc, #332]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 80036b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036be:	f7fe fc07 	bl	8001ed0 <HAL_GetTick>
 80036c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c6:	f7fe fc03 	bl	8001ed0 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e10c      	b.n	80038f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036d8:	4b4a      	ldr	r3, [pc, #296]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1f0      	bne.n	80036c6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036e4:	4b47      	ldr	r3, [pc, #284]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 80036e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036e8:	4b47      	ldr	r3, [pc, #284]	; (8003808 <HAL_RCC_OscConfig+0x768>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80036f4:	0112      	lsls	r2, r2, #4
 80036f6:	430a      	orrs	r2, r1
 80036f8:	4942      	ldr	r1, [pc, #264]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	628b      	str	r3, [r1, #40]	; 0x28
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	3b01      	subs	r3, #1
 8003704:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370c:	3b01      	subs	r3, #1
 800370e:	025b      	lsls	r3, r3, #9
 8003710:	b29b      	uxth	r3, r3
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003718:	3b01      	subs	r3, #1
 800371a:	041b      	lsls	r3, r3, #16
 800371c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003720:	431a      	orrs	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003726:	3b01      	subs	r3, #1
 8003728:	061b      	lsls	r3, r3, #24
 800372a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800372e:	4935      	ldr	r1, [pc, #212]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 8003730:	4313      	orrs	r3, r2
 8003732:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003734:	4b33      	ldr	r3, [pc, #204]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 8003736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003738:	4a32      	ldr	r2, [pc, #200]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 800373a:	f023 0301 	bic.w	r3, r3, #1
 800373e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003740:	4b30      	ldr	r3, [pc, #192]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 8003742:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003744:	4b31      	ldr	r3, [pc, #196]	; (800380c <HAL_RCC_OscConfig+0x76c>)
 8003746:	4013      	ands	r3, r2
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800374c:	00d2      	lsls	r2, r2, #3
 800374e:	492d      	ldr	r1, [pc, #180]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 8003750:	4313      	orrs	r3, r2
 8003752:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003754:	4b2b      	ldr	r3, [pc, #172]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	f023 020c 	bic.w	r2, r3, #12
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	4928      	ldr	r1, [pc, #160]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 8003762:	4313      	orrs	r3, r2
 8003764:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003766:	4b27      	ldr	r3, [pc, #156]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 8003768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376a:	f023 0202 	bic.w	r2, r3, #2
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003772:	4924      	ldr	r1, [pc, #144]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 8003774:	4313      	orrs	r3, r2
 8003776:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003778:	4b22      	ldr	r3, [pc, #136]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 800377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377c:	4a21      	ldr	r2, [pc, #132]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 800377e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003782:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003784:	4b1f      	ldr	r3, [pc, #124]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	4a1e      	ldr	r2, [pc, #120]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 800378a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800378e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003790:	4b1c      	ldr	r3, [pc, #112]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	4a1b      	ldr	r2, [pc, #108]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 8003796:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800379a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800379c:	4b19      	ldr	r3, [pc, #100]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 800379e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a0:	4a18      	ldr	r2, [pc, #96]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 80037a2:	f043 0301 	orr.w	r3, r3, #1
 80037a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037a8:	4b16      	ldr	r3, [pc, #88]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a15      	ldr	r2, [pc, #84]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 80037ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b4:	f7fe fb8c 	bl	8001ed0 <HAL_GetTick>
 80037b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037bc:	f7fe fb88 	bl	8001ed0 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e091      	b.n	80038f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037ce:	4b0d      	ldr	r3, [pc, #52]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0f0      	beq.n	80037bc <HAL_RCC_OscConfig+0x71c>
 80037da:	e089      	b.n	80038f0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037dc:	4b09      	ldr	r3, [pc, #36]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a08      	ldr	r2, [pc, #32]	; (8003804 <HAL_RCC_OscConfig+0x764>)
 80037e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e8:	f7fe fb72 	bl	8001ed0 <HAL_GetTick>
 80037ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037ee:	e00f      	b.n	8003810 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f0:	f7fe fb6e 	bl	8001ed0 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d908      	bls.n	8003810 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e077      	b.n	80038f2 <HAL_RCC_OscConfig+0x852>
 8003802:	bf00      	nop
 8003804:	58024400 	.word	0x58024400
 8003808:	fffffc0c 	.word	0xfffffc0c
 800380c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003810:	4b3a      	ldr	r3, [pc, #232]	; (80038fc <HAL_RCC_OscConfig+0x85c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1e9      	bne.n	80037f0 <HAL_RCC_OscConfig+0x750>
 800381c:	e068      	b.n	80038f0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800381e:	4b37      	ldr	r3, [pc, #220]	; (80038fc <HAL_RCC_OscConfig+0x85c>)
 8003820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003822:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003824:	4b35      	ldr	r3, [pc, #212]	; (80038fc <HAL_RCC_OscConfig+0x85c>)
 8003826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003828:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	2b01      	cmp	r3, #1
 8003830:	d031      	beq.n	8003896 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f003 0203 	and.w	r2, r3, #3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800383c:	429a      	cmp	r2, r3
 800383e:	d12a      	bne.n	8003896 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	091b      	lsrs	r3, r3, #4
 8003844:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384c:	429a      	cmp	r2, r3
 800384e:	d122      	bne.n	8003896 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800385c:	429a      	cmp	r2, r3
 800385e:	d11a      	bne.n	8003896 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	0a5b      	lsrs	r3, r3, #9
 8003864:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800386e:	429a      	cmp	r2, r3
 8003870:	d111      	bne.n	8003896 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	0c1b      	lsrs	r3, r3, #16
 8003876:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003880:	429a      	cmp	r2, r3
 8003882:	d108      	bne.n	8003896 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	0e1b      	lsrs	r3, r3, #24
 8003888:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003890:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003892:	429a      	cmp	r2, r3
 8003894:	d001      	beq.n	800389a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e02b      	b.n	80038f2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800389a:	4b18      	ldr	r3, [pc, #96]	; (80038fc <HAL_RCC_OscConfig+0x85c>)
 800389c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389e:	08db      	lsrs	r3, r3, #3
 80038a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038a4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d01f      	beq.n	80038f0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80038b0:	4b12      	ldr	r3, [pc, #72]	; (80038fc <HAL_RCC_OscConfig+0x85c>)
 80038b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b4:	4a11      	ldr	r2, [pc, #68]	; (80038fc <HAL_RCC_OscConfig+0x85c>)
 80038b6:	f023 0301 	bic.w	r3, r3, #1
 80038ba:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038bc:	f7fe fb08 	bl	8001ed0 <HAL_GetTick>
 80038c0:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80038c2:	bf00      	nop
 80038c4:	f7fe fb04 	bl	8001ed0 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d0f9      	beq.n	80038c4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80038d0:	4b0a      	ldr	r3, [pc, #40]	; (80038fc <HAL_RCC_OscConfig+0x85c>)
 80038d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038d4:	4b0a      	ldr	r3, [pc, #40]	; (8003900 <HAL_RCC_OscConfig+0x860>)
 80038d6:	4013      	ands	r3, r2
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80038dc:	00d2      	lsls	r2, r2, #3
 80038de:	4907      	ldr	r1, [pc, #28]	; (80038fc <HAL_RCC_OscConfig+0x85c>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80038e4:	4b05      	ldr	r3, [pc, #20]	; (80038fc <HAL_RCC_OscConfig+0x85c>)
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	4a04      	ldr	r2, [pc, #16]	; (80038fc <HAL_RCC_OscConfig+0x85c>)
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3730      	adds	r7, #48	; 0x30
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	58024400 	.word	0x58024400
 8003900:	ffff0007 	.word	0xffff0007

08003904 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e19c      	b.n	8003c52 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003918:	4b8a      	ldr	r3, [pc, #552]	; (8003b44 <HAL_RCC_ClockConfig+0x240>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 030f 	and.w	r3, r3, #15
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d910      	bls.n	8003948 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003926:	4b87      	ldr	r3, [pc, #540]	; (8003b44 <HAL_RCC_ClockConfig+0x240>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f023 020f 	bic.w	r2, r3, #15
 800392e:	4985      	ldr	r1, [pc, #532]	; (8003b44 <HAL_RCC_ClockConfig+0x240>)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	4313      	orrs	r3, r2
 8003934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003936:	4b83      	ldr	r3, [pc, #524]	; (8003b44 <HAL_RCC_ClockConfig+0x240>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 030f 	and.w	r3, r3, #15
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d001      	beq.n	8003948 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e184      	b.n	8003c52 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b00      	cmp	r3, #0
 8003952:	d010      	beq.n	8003976 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691a      	ldr	r2, [r3, #16]
 8003958:	4b7b      	ldr	r3, [pc, #492]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003960:	429a      	cmp	r2, r3
 8003962:	d908      	bls.n	8003976 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003964:	4b78      	ldr	r3, [pc, #480]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	4975      	ldr	r1, [pc, #468]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003972:	4313      	orrs	r3, r2
 8003974:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d010      	beq.n	80039a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	695a      	ldr	r2, [r3, #20]
 8003986:	4b70      	ldr	r3, [pc, #448]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800398e:	429a      	cmp	r2, r3
 8003990:	d908      	bls.n	80039a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003992:	4b6d      	ldr	r3, [pc, #436]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	496a      	ldr	r1, [pc, #424]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0310 	and.w	r3, r3, #16
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d010      	beq.n	80039d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	699a      	ldr	r2, [r3, #24]
 80039b4:	4b64      	ldr	r3, [pc, #400]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039bc:	429a      	cmp	r2, r3
 80039be:	d908      	bls.n	80039d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80039c0:	4b61      	ldr	r3, [pc, #388]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	495e      	ldr	r1, [pc, #376]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d010      	beq.n	8003a00 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69da      	ldr	r2, [r3, #28]
 80039e2:	4b59      	ldr	r3, [pc, #356]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d908      	bls.n	8003a00 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80039ee:	4b56      	ldr	r3, [pc, #344]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	4953      	ldr	r1, [pc, #332]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d010      	beq.n	8003a2e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	4b4d      	ldr	r3, [pc, #308]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	f003 030f 	and.w	r3, r3, #15
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d908      	bls.n	8003a2e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a1c:	4b4a      	ldr	r3, [pc, #296]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	f023 020f 	bic.w	r2, r3, #15
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	4947      	ldr	r1, [pc, #284]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d055      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003a3a:	4b43      	ldr	r3, [pc, #268]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	4940      	ldr	r1, [pc, #256]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d107      	bne.n	8003a64 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a54:	4b3c      	ldr	r3, [pc, #240]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d121      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0f6      	b.n	8003c52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d107      	bne.n	8003a7c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a6c:	4b36      	ldr	r3, [pc, #216]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d115      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e0ea      	b.n	8003c52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d107      	bne.n	8003a94 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a84:	4b30      	ldr	r3, [pc, #192]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d109      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e0de      	b.n	8003c52 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a94:	4b2c      	ldr	r3, [pc, #176]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e0d6      	b.n	8003c52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003aa4:	4b28      	ldr	r3, [pc, #160]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	f023 0207 	bic.w	r2, r3, #7
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	4925      	ldr	r1, [pc, #148]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ab6:	f7fe fa0b 	bl	8001ed0 <HAL_GetTick>
 8003aba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003abc:	e00a      	b.n	8003ad4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003abe:	f7fe fa07 	bl	8001ed0 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e0be      	b.n	8003c52 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad4:	4b1c      	ldr	r3, [pc, #112]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d1eb      	bne.n	8003abe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d010      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	4b14      	ldr	r3, [pc, #80]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d208      	bcs.n	8003b14 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b02:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	f023 020f 	bic.w	r2, r3, #15
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	490e      	ldr	r1, [pc, #56]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b14:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <HAL_RCC_ClockConfig+0x240>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 030f 	and.w	r3, r3, #15
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d214      	bcs.n	8003b4c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b22:	4b08      	ldr	r3, [pc, #32]	; (8003b44 <HAL_RCC_ClockConfig+0x240>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f023 020f 	bic.w	r2, r3, #15
 8003b2a:	4906      	ldr	r1, [pc, #24]	; (8003b44 <HAL_RCC_ClockConfig+0x240>)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b32:	4b04      	ldr	r3, [pc, #16]	; (8003b44 <HAL_RCC_ClockConfig+0x240>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d005      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e086      	b.n	8003c52 <HAL_RCC_ClockConfig+0x34e>
 8003b44:	52002000 	.word	0x52002000
 8003b48:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d010      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	4b3f      	ldr	r3, [pc, #252]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d208      	bcs.n	8003b7a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b68:	4b3c      	ldr	r3, [pc, #240]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	4939      	ldr	r1, [pc, #228]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d010      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695a      	ldr	r2, [r3, #20]
 8003b8a:	4b34      	ldr	r3, [pc, #208]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d208      	bcs.n	8003ba8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b96:	4b31      	ldr	r3, [pc, #196]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	492e      	ldr	r1, [pc, #184]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d010      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	699a      	ldr	r2, [r3, #24]
 8003bb8:	4b28      	ldr	r3, [pc, #160]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d208      	bcs.n	8003bd6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003bc4:	4b25      	ldr	r3, [pc, #148]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	4922      	ldr	r1, [pc, #136]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0320 	and.w	r3, r3, #32
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d010      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69da      	ldr	r2, [r3, #28]
 8003be6:	4b1d      	ldr	r3, [pc, #116]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d208      	bcs.n	8003c04 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003bf2:	4b1a      	ldr	r3, [pc, #104]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	4917      	ldr	r1, [pc, #92]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003c04:	f000 f834 	bl	8003c70 <HAL_RCC_GetSysClockFreq>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	0a1b      	lsrs	r3, r3, #8
 8003c10:	f003 030f 	and.w	r3, r3, #15
 8003c14:	4912      	ldr	r1, [pc, #72]	; (8003c60 <HAL_RCC_ClockConfig+0x35c>)
 8003c16:	5ccb      	ldrb	r3, [r1, r3]
 8003c18:	f003 031f 	and.w	r3, r3, #31
 8003c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c20:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003c22:	4b0e      	ldr	r3, [pc, #56]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	4a0d      	ldr	r2, [pc, #52]	; (8003c60 <HAL_RCC_ClockConfig+0x35c>)
 8003c2c:	5cd3      	ldrb	r3, [r2, r3]
 8003c2e:	f003 031f 	and.w	r3, r3, #31
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	fa22 f303 	lsr.w	r3, r2, r3
 8003c38:	4a0a      	ldr	r2, [pc, #40]	; (8003c64 <HAL_RCC_ClockConfig+0x360>)
 8003c3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c3c:	4a0a      	ldr	r2, [pc, #40]	; (8003c68 <HAL_RCC_ClockConfig+0x364>)
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003c42:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <HAL_RCC_ClockConfig+0x368>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fe f8f8 	bl	8001e3c <HAL_InitTick>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	58024400 	.word	0x58024400
 8003c60:	08009b40 	.word	0x08009b40
 8003c64:	2400000c 	.word	0x2400000c
 8003c68:	24000008 	.word	0x24000008
 8003c6c:	24000010 	.word	0x24000010

08003c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b089      	sub	sp, #36	; 0x24
 8003c74:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c76:	4bb3      	ldr	r3, [pc, #716]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c7e:	2b18      	cmp	r3, #24
 8003c80:	f200 8155 	bhi.w	8003f2e <HAL_RCC_GetSysClockFreq+0x2be>
 8003c84:	a201      	add	r2, pc, #4	; (adr r2, 8003c8c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8a:	bf00      	nop
 8003c8c:	08003cf1 	.word	0x08003cf1
 8003c90:	08003f2f 	.word	0x08003f2f
 8003c94:	08003f2f 	.word	0x08003f2f
 8003c98:	08003f2f 	.word	0x08003f2f
 8003c9c:	08003f2f 	.word	0x08003f2f
 8003ca0:	08003f2f 	.word	0x08003f2f
 8003ca4:	08003f2f 	.word	0x08003f2f
 8003ca8:	08003f2f 	.word	0x08003f2f
 8003cac:	08003d17 	.word	0x08003d17
 8003cb0:	08003f2f 	.word	0x08003f2f
 8003cb4:	08003f2f 	.word	0x08003f2f
 8003cb8:	08003f2f 	.word	0x08003f2f
 8003cbc:	08003f2f 	.word	0x08003f2f
 8003cc0:	08003f2f 	.word	0x08003f2f
 8003cc4:	08003f2f 	.word	0x08003f2f
 8003cc8:	08003f2f 	.word	0x08003f2f
 8003ccc:	08003d1d 	.word	0x08003d1d
 8003cd0:	08003f2f 	.word	0x08003f2f
 8003cd4:	08003f2f 	.word	0x08003f2f
 8003cd8:	08003f2f 	.word	0x08003f2f
 8003cdc:	08003f2f 	.word	0x08003f2f
 8003ce0:	08003f2f 	.word	0x08003f2f
 8003ce4:	08003f2f 	.word	0x08003f2f
 8003ce8:	08003f2f 	.word	0x08003f2f
 8003cec:	08003d23 	.word	0x08003d23
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cf0:	4b94      	ldr	r3, [pc, #592]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0320 	and.w	r3, r3, #32
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d009      	beq.n	8003d10 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003cfc:	4b91      	ldr	r3, [pc, #580]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	08db      	lsrs	r3, r3, #3
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	4a90      	ldr	r2, [pc, #576]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003d0e:	e111      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003d10:	4b8d      	ldr	r3, [pc, #564]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d12:	61bb      	str	r3, [r7, #24]
      break;
 8003d14:	e10e      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003d16:	4b8d      	ldr	r3, [pc, #564]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003d18:	61bb      	str	r3, [r7, #24]
      break;
 8003d1a:	e10b      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003d1c:	4b8c      	ldr	r3, [pc, #560]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003d1e:	61bb      	str	r3, [r7, #24]
      break;
 8003d20:	e108      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d22:	4b88      	ldr	r3, [pc, #544]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003d2c:	4b85      	ldr	r3, [pc, #532]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	091b      	lsrs	r3, r3, #4
 8003d32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d36:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003d38:	4b82      	ldr	r3, [pc, #520]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003d42:	4b80      	ldr	r3, [pc, #512]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d46:	08db      	lsrs	r3, r3, #3
 8003d48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	fb02 f303 	mul.w	r3, r2, r3
 8003d52:	ee07 3a90 	vmov	s15, r3
 8003d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d5a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 80e1 	beq.w	8003f28 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	f000 8083 	beq.w	8003e74 <HAL_RCC_GetSysClockFreq+0x204>
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	f200 80a1 	bhi.w	8003eb8 <HAL_RCC_GetSysClockFreq+0x248>
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <HAL_RCC_GetSysClockFreq+0x114>
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d056      	beq.n	8003e30 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003d82:	e099      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d84:	4b6f      	ldr	r3, [pc, #444]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0320 	and.w	r3, r3, #32
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d02d      	beq.n	8003dec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d90:	4b6c      	ldr	r3, [pc, #432]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	08db      	lsrs	r3, r3, #3
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	4a6b      	ldr	r2, [pc, #428]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003da0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	ee07 3a90 	vmov	s15, r3
 8003da8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	ee07 3a90 	vmov	s15, r3
 8003db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dba:	4b62      	ldr	r3, [pc, #392]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc2:	ee07 3a90 	vmov	s15, r3
 8003dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dca:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dce:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003f54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003de6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003dea:	e087      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	ee07 3a90 	vmov	s15, r3
 8003df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003df6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003f58 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dfe:	4b51      	ldr	r3, [pc, #324]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e06:	ee07 3a90 	vmov	s15, r3
 8003e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e12:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003f54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e2e:	e065      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	ee07 3a90 	vmov	s15, r3
 8003e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e3a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003f5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e42:	4b40      	ldr	r3, [pc, #256]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e4a:	ee07 3a90 	vmov	s15, r3
 8003e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e52:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e56:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003f54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e72:	e043      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e7e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003f60 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e86:	4b2f      	ldr	r3, [pc, #188]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e8e:	ee07 3a90 	vmov	s15, r3
 8003e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e96:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e9a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003f54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003eb6:	e021      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	ee07 3a90 	vmov	s15, r3
 8003ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ec2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003f5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eca:	4b1e      	ldr	r3, [pc, #120]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed2:	ee07 3a90 	vmov	s15, r3
 8003ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eda:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ede:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003f54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003efa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003efc:	4b11      	ldr	r3, [pc, #68]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f00:	0a5b      	lsrs	r3, r3, #9
 8003f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f06:	3301      	adds	r3, #1
 8003f08:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	ee07 3a90 	vmov	s15, r3
 8003f10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f14:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f20:	ee17 3a90 	vmov	r3, s15
 8003f24:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003f26:	e005      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	61bb      	str	r3, [r7, #24]
      break;
 8003f2c:	e002      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003f2e:	4b07      	ldr	r3, [pc, #28]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003f30:	61bb      	str	r3, [r7, #24]
      break;
 8003f32:	bf00      	nop
  }

  return sysclockfreq;
 8003f34:	69bb      	ldr	r3, [r7, #24]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3724      	adds	r7, #36	; 0x24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	58024400 	.word	0x58024400
 8003f48:	03d09000 	.word	0x03d09000
 8003f4c:	003d0900 	.word	0x003d0900
 8003f50:	007a1200 	.word	0x007a1200
 8003f54:	46000000 	.word	0x46000000
 8003f58:	4c742400 	.word	0x4c742400
 8003f5c:	4a742400 	.word	0x4a742400
 8003f60:	4af42400 	.word	0x4af42400

08003f64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003f6a:	f7ff fe81 	bl	8003c70 <HAL_RCC_GetSysClockFreq>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	4b10      	ldr	r3, [pc, #64]	; (8003fb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	0a1b      	lsrs	r3, r3, #8
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	490f      	ldr	r1, [pc, #60]	; (8003fb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f7c:	5ccb      	ldrb	r3, [r1, r3]
 8003f7e:	f003 031f 	and.w	r3, r3, #31
 8003f82:	fa22 f303 	lsr.w	r3, r2, r3
 8003f86:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003f88:	4b0a      	ldr	r3, [pc, #40]	; (8003fb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	4a09      	ldr	r2, [pc, #36]	; (8003fb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f92:	5cd3      	ldrb	r3, [r2, r3]
 8003f94:	f003 031f 	and.w	r3, r3, #31
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f9e:	4a07      	ldr	r2, [pc, #28]	; (8003fbc <HAL_RCC_GetHCLKFreq+0x58>)
 8003fa0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003fa2:	4a07      	ldr	r2, [pc, #28]	; (8003fc0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003fa8:	4b04      	ldr	r3, [pc, #16]	; (8003fbc <HAL_RCC_GetHCLKFreq+0x58>)
 8003faa:	681b      	ldr	r3, [r3, #0]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	58024400 	.word	0x58024400
 8003fb8:	08009b40 	.word	0x08009b40
 8003fbc:	2400000c 	.word	0x2400000c
 8003fc0:	24000008 	.word	0x24000008

08003fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003fc8:	f7ff ffcc 	bl	8003f64 <HAL_RCC_GetHCLKFreq>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	4b06      	ldr	r3, [pc, #24]	; (8003fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	091b      	lsrs	r3, r3, #4
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	4904      	ldr	r1, [pc, #16]	; (8003fec <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fda:	5ccb      	ldrb	r3, [r1, r3]
 8003fdc:	f003 031f 	and.w	r3, r3, #31
 8003fe0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	58024400 	.word	0x58024400
 8003fec:	08009b40 	.word	0x08009b40

08003ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003ff4:	f7ff ffb6 	bl	8003f64 <HAL_RCC_GetHCLKFreq>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	4b06      	ldr	r3, [pc, #24]	; (8004014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	0a1b      	lsrs	r3, r3, #8
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	4904      	ldr	r1, [pc, #16]	; (8004018 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004006:	5ccb      	ldrb	r3, [r1, r3]
 8004008:	f003 031f 	and.w	r3, r3, #31
 800400c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004010:	4618      	mov	r0, r3
 8004012:	bd80      	pop	{r7, pc}
 8004014:	58024400 	.word	0x58024400
 8004018:	08009b40 	.word	0x08009b40

0800401c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800401c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004020:	b0c8      	sub	sp, #288	; 0x120
 8004022:	af00      	add	r7, sp, #0
 8004024:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004028:	2300      	movs	r3, #0
 800402a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800402e:	2300      	movs	r3, #0
 8004030:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004034:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004040:	2500      	movs	r5, #0
 8004042:	ea54 0305 	orrs.w	r3, r4, r5
 8004046:	d049      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004048:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800404c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800404e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004052:	d02f      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004054:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004058:	d828      	bhi.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800405a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800405e:	d01a      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004060:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004064:	d822      	bhi.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800406a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800406e:	d007      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004070:	e01c      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004072:	4ba7      	ldr	r3, [pc, #668]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004076:	4aa6      	ldr	r2, [pc, #664]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800407c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800407e:	e01a      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004080:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004084:	3308      	adds	r3, #8
 8004086:	2102      	movs	r1, #2
 8004088:	4618      	mov	r0, r3
 800408a:	f001 fc43 	bl	8005914 <RCCEx_PLL2_Config>
 800408e:	4603      	mov	r3, r0
 8004090:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004094:	e00f      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800409a:	3328      	adds	r3, #40	; 0x28
 800409c:	2102      	movs	r1, #2
 800409e:	4618      	mov	r0, r3
 80040a0:	f001 fcea 	bl	8005a78 <RCCEx_PLL3_Config>
 80040a4:	4603      	mov	r3, r0
 80040a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80040aa:	e004      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80040b2:	e000      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80040b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10a      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80040be:	4b94      	ldr	r3, [pc, #592]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80040c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040cc:	4a90      	ldr	r2, [pc, #576]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040ce:	430b      	orrs	r3, r1
 80040d0:	6513      	str	r3, [r2, #80]	; 0x50
 80040d2:	e003      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040d8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80040dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80040e8:	f04f 0900 	mov.w	r9, #0
 80040ec:	ea58 0309 	orrs.w	r3, r8, r9
 80040f0:	d047      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80040f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f8:	2b04      	cmp	r3, #4
 80040fa:	d82a      	bhi.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80040fc:	a201      	add	r2, pc, #4	; (adr r2, 8004104 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80040fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004102:	bf00      	nop
 8004104:	08004119 	.word	0x08004119
 8004108:	08004127 	.word	0x08004127
 800410c:	0800413d 	.word	0x0800413d
 8004110:	0800415b 	.word	0x0800415b
 8004114:	0800415b 	.word	0x0800415b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004118:	4b7d      	ldr	r3, [pc, #500]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800411a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411c:	4a7c      	ldr	r2, [pc, #496]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800411e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004122:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004124:	e01a      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004126:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800412a:	3308      	adds	r3, #8
 800412c:	2100      	movs	r1, #0
 800412e:	4618      	mov	r0, r3
 8004130:	f001 fbf0 	bl	8005914 <RCCEx_PLL2_Config>
 8004134:	4603      	mov	r3, r0
 8004136:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800413a:	e00f      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800413c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004140:	3328      	adds	r3, #40	; 0x28
 8004142:	2100      	movs	r1, #0
 8004144:	4618      	mov	r0, r3
 8004146:	f001 fc97 	bl	8005a78 <RCCEx_PLL3_Config>
 800414a:	4603      	mov	r3, r0
 800414c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004150:	e004      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004158:	e000      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800415a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800415c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10a      	bne.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004164:	4b6a      	ldr	r3, [pc, #424]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004168:	f023 0107 	bic.w	r1, r3, #7
 800416c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004172:	4a67      	ldr	r2, [pc, #412]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004174:	430b      	orrs	r3, r1
 8004176:	6513      	str	r3, [r2, #80]	; 0x50
 8004178:	e003      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800417a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800417e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004182:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800418e:	f04f 0b00 	mov.w	fp, #0
 8004192:	ea5a 030b 	orrs.w	r3, sl, fp
 8004196:	d054      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8004198:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800419c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80041a2:	d036      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80041a4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80041a8:	d82f      	bhi.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80041aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ae:	d032      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80041b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b4:	d829      	bhi.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80041b6:	2bc0      	cmp	r3, #192	; 0xc0
 80041b8:	d02f      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80041ba:	2bc0      	cmp	r3, #192	; 0xc0
 80041bc:	d825      	bhi.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80041be:	2b80      	cmp	r3, #128	; 0x80
 80041c0:	d018      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80041c2:	2b80      	cmp	r3, #128	; 0x80
 80041c4:	d821      	bhi.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d002      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80041ca:	2b40      	cmp	r3, #64	; 0x40
 80041cc:	d007      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80041ce:	e01c      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041d0:	4b4f      	ldr	r3, [pc, #316]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d4:	4a4e      	ldr	r2, [pc, #312]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80041dc:	e01e      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041e2:	3308      	adds	r3, #8
 80041e4:	2100      	movs	r1, #0
 80041e6:	4618      	mov	r0, r3
 80041e8:	f001 fb94 	bl	8005914 <RCCEx_PLL2_Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80041f2:	e013      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041f8:	3328      	adds	r3, #40	; 0x28
 80041fa:	2100      	movs	r1, #0
 80041fc:	4618      	mov	r0, r3
 80041fe:	f001 fc3b 	bl	8005a78 <RCCEx_PLL3_Config>
 8004202:	4603      	mov	r3, r0
 8004204:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004208:	e008      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004210:	e004      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004212:	bf00      	nop
 8004214:	e002      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004216:	bf00      	nop
 8004218:	e000      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800421a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800421c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10a      	bne.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004224:	4b3a      	ldr	r3, [pc, #232]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004228:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800422c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004232:	4a37      	ldr	r2, [pc, #220]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004234:	430b      	orrs	r3, r1
 8004236:	6513      	str	r3, [r2, #80]	; 0x50
 8004238:	e003      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800423a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800423e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004242:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800424e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004252:	2300      	movs	r3, #0
 8004254:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004258:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800425c:	460b      	mov	r3, r1
 800425e:	4313      	orrs	r3, r2
 8004260:	d05c      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8004262:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004268:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800426c:	d03b      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800426e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004272:	d834      	bhi.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004274:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004278:	d037      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800427a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800427e:	d82e      	bhi.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004280:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004284:	d033      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004286:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800428a:	d828      	bhi.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800428c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004290:	d01a      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004296:	d822      	bhi.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800429c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a0:	d007      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80042a2:	e01c      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042a4:	4b1a      	ldr	r3, [pc, #104]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a8:	4a19      	ldr	r2, [pc, #100]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80042b0:	e01e      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042b6:	3308      	adds	r3, #8
 80042b8:	2100      	movs	r1, #0
 80042ba:	4618      	mov	r0, r3
 80042bc:	f001 fb2a 	bl	8005914 <RCCEx_PLL2_Config>
 80042c0:	4603      	mov	r3, r0
 80042c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80042c6:	e013      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042cc:	3328      	adds	r3, #40	; 0x28
 80042ce:	2100      	movs	r1, #0
 80042d0:	4618      	mov	r0, r3
 80042d2:	f001 fbd1 	bl	8005a78 <RCCEx_PLL3_Config>
 80042d6:	4603      	mov	r3, r0
 80042d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80042dc:	e008      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80042e4:	e004      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80042e6:	bf00      	nop
 80042e8:	e002      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80042ea:	bf00      	nop
 80042ec:	e000      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80042ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10d      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80042f8:	4b05      	ldr	r3, [pc, #20]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042fc:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004300:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004306:	4a02      	ldr	r2, [pc, #8]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004308:	430b      	orrs	r3, r1
 800430a:	6513      	str	r3, [r2, #80]	; 0x50
 800430c:	e006      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800430e:	bf00      	nop
 8004310:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004314:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004318:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800431c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004324:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004328:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800432c:	2300      	movs	r3, #0
 800432e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004332:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004336:	460b      	mov	r3, r1
 8004338:	4313      	orrs	r3, r2
 800433a:	d03a      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800433c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004342:	2b30      	cmp	r3, #48	; 0x30
 8004344:	d01f      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004346:	2b30      	cmp	r3, #48	; 0x30
 8004348:	d819      	bhi.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800434a:	2b20      	cmp	r3, #32
 800434c:	d00c      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800434e:	2b20      	cmp	r3, #32
 8004350:	d815      	bhi.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004352:	2b00      	cmp	r3, #0
 8004354:	d019      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004356:	2b10      	cmp	r3, #16
 8004358:	d111      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800435a:	4bae      	ldr	r3, [pc, #696]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800435c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435e:	4aad      	ldr	r2, [pc, #692]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004364:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004366:	e011      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004368:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800436c:	3308      	adds	r3, #8
 800436e:	2102      	movs	r1, #2
 8004370:	4618      	mov	r0, r3
 8004372:	f001 facf 	bl	8005914 <RCCEx_PLL2_Config>
 8004376:	4603      	mov	r3, r0
 8004378:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800437c:	e006      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004384:	e002      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004386:	bf00      	nop
 8004388:	e000      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800438a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800438c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10a      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004394:	4b9f      	ldr	r3, [pc, #636]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004398:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800439c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a2:	4a9c      	ldr	r2, [pc, #624]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80043a4:	430b      	orrs	r3, r1
 80043a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043a8:	e003      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80043b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ba:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80043be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80043c2:	2300      	movs	r3, #0
 80043c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80043c8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80043cc:	460b      	mov	r3, r1
 80043ce:	4313      	orrs	r3, r2
 80043d0:	d051      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80043d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043dc:	d035      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80043de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043e2:	d82e      	bhi.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80043e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043e8:	d031      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x432>
 80043ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043ee:	d828      	bhi.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80043f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043f4:	d01a      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x410>
 80043f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043fa:	d822      	bhi.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d003      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004404:	d007      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004406:	e01c      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004408:	4b82      	ldr	r3, [pc, #520]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	4a81      	ldr	r2, [pc, #516]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800440e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004412:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004414:	e01c      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004416:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800441a:	3308      	adds	r3, #8
 800441c:	2100      	movs	r1, #0
 800441e:	4618      	mov	r0, r3
 8004420:	f001 fa78 	bl	8005914 <RCCEx_PLL2_Config>
 8004424:	4603      	mov	r3, r0
 8004426:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800442a:	e011      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800442c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004430:	3328      	adds	r3, #40	; 0x28
 8004432:	2100      	movs	r1, #0
 8004434:	4618      	mov	r0, r3
 8004436:	f001 fb1f 	bl	8005a78 <RCCEx_PLL3_Config>
 800443a:	4603      	mov	r3, r0
 800443c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004440:	e006      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004448:	e002      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800444a:	bf00      	nop
 800444c:	e000      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800444e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004450:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10a      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004458:	4b6e      	ldr	r3, [pc, #440]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800445a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800445c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004460:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004464:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004466:	4a6b      	ldr	r2, [pc, #428]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004468:	430b      	orrs	r3, r1
 800446a:	6513      	str	r3, [r2, #80]	; 0x50
 800446c:	e003      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800446e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004472:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004476:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800447a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004482:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004486:	2300      	movs	r3, #0
 8004488:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800448c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004490:	460b      	mov	r3, r1
 8004492:	4313      	orrs	r3, r2
 8004494:	d053      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004496:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800449a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800449c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044a0:	d033      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80044a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044a6:	d82c      	bhi.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80044a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044ac:	d02f      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80044ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044b2:	d826      	bhi.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80044b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044b8:	d02b      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80044ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044be:	d820      	bhi.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80044c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044c4:	d012      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80044c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044ca:	d81a      	bhi.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d022      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80044d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d4:	d115      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044da:	3308      	adds	r3, #8
 80044dc:	2101      	movs	r1, #1
 80044de:	4618      	mov	r0, r3
 80044e0:	f001 fa18 	bl	8005914 <RCCEx_PLL2_Config>
 80044e4:	4603      	mov	r3, r0
 80044e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80044ea:	e015      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044f0:	3328      	adds	r3, #40	; 0x28
 80044f2:	2101      	movs	r1, #1
 80044f4:	4618      	mov	r0, r3
 80044f6:	f001 fabf 	bl	8005a78 <RCCEx_PLL3_Config>
 80044fa:	4603      	mov	r3, r0
 80044fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004500:	e00a      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004508:	e006      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800450a:	bf00      	nop
 800450c:	e004      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800450e:	bf00      	nop
 8004510:	e002      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004512:	bf00      	nop
 8004514:	e000      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004516:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004518:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10a      	bne.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004520:	4b3c      	ldr	r3, [pc, #240]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004524:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004528:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800452c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800452e:	4a39      	ldr	r2, [pc, #228]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004530:	430b      	orrs	r3, r1
 8004532:	6513      	str	r3, [r2, #80]	; 0x50
 8004534:	e003      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004536:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800453a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800453e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004546:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800454a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800454e:	2300      	movs	r3, #0
 8004550:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004554:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004558:	460b      	mov	r3, r1
 800455a:	4313      	orrs	r3, r2
 800455c:	d060      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800455e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004562:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004566:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800456a:	d039      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800456c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004570:	d832      	bhi.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004572:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004576:	d035      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004578:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800457c:	d82c      	bhi.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800457e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004582:	d031      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004588:	d826      	bhi.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800458a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800458e:	d02d      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004590:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004594:	d820      	bhi.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004596:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800459a:	d012      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800459c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045a0:	d81a      	bhi.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d024      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80045a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045aa:	d115      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045b0:	3308      	adds	r3, #8
 80045b2:	2101      	movs	r1, #1
 80045b4:	4618      	mov	r0, r3
 80045b6:	f001 f9ad 	bl	8005914 <RCCEx_PLL2_Config>
 80045ba:	4603      	mov	r3, r0
 80045bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80045c0:	e017      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045c6:	3328      	adds	r3, #40	; 0x28
 80045c8:	2101      	movs	r1, #1
 80045ca:	4618      	mov	r0, r3
 80045cc:	f001 fa54 	bl	8005a78 <RCCEx_PLL3_Config>
 80045d0:	4603      	mov	r3, r0
 80045d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80045d6:	e00c      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80045de:	e008      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80045e0:	bf00      	nop
 80045e2:	e006      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80045e4:	bf00      	nop
 80045e6:	e004      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80045e8:	bf00      	nop
 80045ea:	e002      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80045ec:	bf00      	nop
 80045ee:	e000      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80045f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10e      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80045fa:	4b06      	ldr	r3, [pc, #24]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80045fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fe:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004602:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004606:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800460a:	4a02      	ldr	r2, [pc, #8]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800460c:	430b      	orrs	r3, r1
 800460e:	6593      	str	r3, [r2, #88]	; 0x58
 8004610:	e006      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004612:	bf00      	nop
 8004614:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004618:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800461c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004620:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004628:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800462c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004630:	2300      	movs	r3, #0
 8004632:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004636:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800463a:	460b      	mov	r3, r1
 800463c:	4313      	orrs	r3, r2
 800463e:	d037      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004640:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004644:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800464a:	d00e      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800464c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004650:	d816      	bhi.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004652:	2b00      	cmp	r3, #0
 8004654:	d018      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004656:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800465a:	d111      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800465c:	4bc4      	ldr	r3, [pc, #784]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004660:	4ac3      	ldr	r2, [pc, #780]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004666:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004668:	e00f      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800466a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800466e:	3308      	adds	r3, #8
 8004670:	2101      	movs	r1, #1
 8004672:	4618      	mov	r0, r3
 8004674:	f001 f94e 	bl	8005914 <RCCEx_PLL2_Config>
 8004678:	4603      	mov	r3, r0
 800467a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800467e:	e004      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004686:	e000      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800468a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10a      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004692:	4bb7      	ldr	r3, [pc, #732]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004696:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800469a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800469e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046a0:	4ab3      	ldr	r2, [pc, #716]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046a2:	430b      	orrs	r3, r1
 80046a4:	6513      	str	r3, [r2, #80]	; 0x50
 80046a6:	e003      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046ac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80046b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80046bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046c0:	2300      	movs	r3, #0
 80046c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80046c6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80046ca:	460b      	mov	r3, r1
 80046cc:	4313      	orrs	r3, r2
 80046ce:	d039      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80046d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046d6:	2b03      	cmp	r3, #3
 80046d8:	d81c      	bhi.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80046da:	a201      	add	r2, pc, #4	; (adr r2, 80046e0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80046dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e0:	0800471d 	.word	0x0800471d
 80046e4:	080046f1 	.word	0x080046f1
 80046e8:	080046ff 	.word	0x080046ff
 80046ec:	0800471d 	.word	0x0800471d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046f0:	4b9f      	ldr	r3, [pc, #636]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f4:	4a9e      	ldr	r2, [pc, #632]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80046fc:	e00f      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004702:	3308      	adds	r3, #8
 8004704:	2102      	movs	r1, #2
 8004706:	4618      	mov	r0, r3
 8004708:	f001 f904 	bl	8005914 <RCCEx_PLL2_Config>
 800470c:	4603      	mov	r3, r0
 800470e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004712:	e004      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800471a:	e000      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800471c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800471e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10a      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004726:	4b92      	ldr	r3, [pc, #584]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800472a:	f023 0103 	bic.w	r1, r3, #3
 800472e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004734:	4a8e      	ldr	r2, [pc, #568]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004736:	430b      	orrs	r3, r1
 8004738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800473a:	e003      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800473c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004740:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004744:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004750:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004754:	2300      	movs	r3, #0
 8004756:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800475a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800475e:	460b      	mov	r3, r1
 8004760:	4313      	orrs	r3, r2
 8004762:	f000 8099 	beq.w	8004898 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004766:	4b83      	ldr	r3, [pc, #524]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a82      	ldr	r2, [pc, #520]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800476c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004770:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004772:	f7fd fbad 	bl	8001ed0 <HAL_GetTick>
 8004776:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800477a:	e00b      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800477c:	f7fd fba8 	bl	8001ed0 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b64      	cmp	r3, #100	; 0x64
 800478a:	d903      	bls.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004792:	e005      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004794:	4b77      	ldr	r3, [pc, #476]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0ed      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80047a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d173      	bne.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80047a8:	4b71      	ldr	r3, [pc, #452]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80047b4:	4053      	eors	r3, r2
 80047b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d015      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047be:	4b6c      	ldr	r3, [pc, #432]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047ca:	4b69      	ldr	r3, [pc, #420]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ce:	4a68      	ldr	r2, [pc, #416]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047d4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047d6:	4b66      	ldr	r3, [pc, #408]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047da:	4a65      	ldr	r2, [pc, #404]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047e0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80047e2:	4a63      	ldr	r2, [pc, #396]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047e8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80047ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80047f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047f6:	d118      	bne.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f8:	f7fd fb6a 	bl	8001ed0 <HAL_GetTick>
 80047fc:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004800:	e00d      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004802:	f7fd fb65 	bl	8001ed0 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800480c:	1ad2      	subs	r2, r2, r3
 800480e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004812:	429a      	cmp	r2, r3
 8004814:	d903      	bls.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800481c:	e005      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800481e:	4b54      	ldr	r3, [pc, #336]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0eb      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800482a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800482e:	2b00      	cmp	r3, #0
 8004830:	d129      	bne.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004832:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004836:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800483a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800483e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004842:	d10e      	bne.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004844:	4b4a      	ldr	r3, [pc, #296]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800484c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004850:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004854:	091a      	lsrs	r2, r3, #4
 8004856:	4b48      	ldr	r3, [pc, #288]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004858:	4013      	ands	r3, r2
 800485a:	4a45      	ldr	r2, [pc, #276]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800485c:	430b      	orrs	r3, r1
 800485e:	6113      	str	r3, [r2, #16]
 8004860:	e005      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004862:	4b43      	ldr	r3, [pc, #268]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	4a42      	ldr	r2, [pc, #264]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004868:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800486c:	6113      	str	r3, [r2, #16]
 800486e:	4b40      	ldr	r3, [pc, #256]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004870:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004872:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004876:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800487a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800487e:	4a3c      	ldr	r2, [pc, #240]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004880:	430b      	orrs	r3, r1
 8004882:	6713      	str	r3, [r2, #112]	; 0x70
 8004884:	e008      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004886:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800488a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800488e:	e003      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004890:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004894:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004898:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800489c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a0:	f002 0301 	and.w	r3, r2, #1
 80048a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048a8:	2300      	movs	r3, #0
 80048aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80048ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80048b2:	460b      	mov	r3, r1
 80048b4:	4313      	orrs	r3, r2
 80048b6:	f000 8090 	beq.w	80049da <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80048ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048c2:	2b28      	cmp	r3, #40	; 0x28
 80048c4:	d870      	bhi.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80048c6:	a201      	add	r2, pc, #4	; (adr r2, 80048cc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80048c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048cc:	080049b1 	.word	0x080049b1
 80048d0:	080049a9 	.word	0x080049a9
 80048d4:	080049a9 	.word	0x080049a9
 80048d8:	080049a9 	.word	0x080049a9
 80048dc:	080049a9 	.word	0x080049a9
 80048e0:	080049a9 	.word	0x080049a9
 80048e4:	080049a9 	.word	0x080049a9
 80048e8:	080049a9 	.word	0x080049a9
 80048ec:	0800497d 	.word	0x0800497d
 80048f0:	080049a9 	.word	0x080049a9
 80048f4:	080049a9 	.word	0x080049a9
 80048f8:	080049a9 	.word	0x080049a9
 80048fc:	080049a9 	.word	0x080049a9
 8004900:	080049a9 	.word	0x080049a9
 8004904:	080049a9 	.word	0x080049a9
 8004908:	080049a9 	.word	0x080049a9
 800490c:	08004993 	.word	0x08004993
 8004910:	080049a9 	.word	0x080049a9
 8004914:	080049a9 	.word	0x080049a9
 8004918:	080049a9 	.word	0x080049a9
 800491c:	080049a9 	.word	0x080049a9
 8004920:	080049a9 	.word	0x080049a9
 8004924:	080049a9 	.word	0x080049a9
 8004928:	080049a9 	.word	0x080049a9
 800492c:	080049b1 	.word	0x080049b1
 8004930:	080049a9 	.word	0x080049a9
 8004934:	080049a9 	.word	0x080049a9
 8004938:	080049a9 	.word	0x080049a9
 800493c:	080049a9 	.word	0x080049a9
 8004940:	080049a9 	.word	0x080049a9
 8004944:	080049a9 	.word	0x080049a9
 8004948:	080049a9 	.word	0x080049a9
 800494c:	080049b1 	.word	0x080049b1
 8004950:	080049a9 	.word	0x080049a9
 8004954:	080049a9 	.word	0x080049a9
 8004958:	080049a9 	.word	0x080049a9
 800495c:	080049a9 	.word	0x080049a9
 8004960:	080049a9 	.word	0x080049a9
 8004964:	080049a9 	.word	0x080049a9
 8004968:	080049a9 	.word	0x080049a9
 800496c:	080049b1 	.word	0x080049b1
 8004970:	58024400 	.word	0x58024400
 8004974:	58024800 	.word	0x58024800
 8004978:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800497c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004980:	3308      	adds	r3, #8
 8004982:	2101      	movs	r1, #1
 8004984:	4618      	mov	r0, r3
 8004986:	f000 ffc5 	bl	8005914 <RCCEx_PLL2_Config>
 800498a:	4603      	mov	r3, r0
 800498c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004990:	e00f      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004992:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004996:	3328      	adds	r3, #40	; 0x28
 8004998:	2101      	movs	r1, #1
 800499a:	4618      	mov	r0, r3
 800499c:	f001 f86c 	bl	8005a78 <RCCEx_PLL3_Config>
 80049a0:	4603      	mov	r3, r0
 80049a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80049a6:	e004      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80049ae:	e000      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80049b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049b2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10b      	bne.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80049ba:	4bc0      	ldr	r3, [pc, #768]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80049bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049be:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80049c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ca:	4abc      	ldr	r2, [pc, #752]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80049cc:	430b      	orrs	r3, r1
 80049ce:	6553      	str	r3, [r2, #84]	; 0x54
 80049d0:	e003      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049d6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80049da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e2:	f002 0302 	and.w	r3, r2, #2
 80049e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049ea:	2300      	movs	r3, #0
 80049ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80049f0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80049f4:	460b      	mov	r3, r1
 80049f6:	4313      	orrs	r3, r2
 80049f8:	d043      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80049fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a02:	2b05      	cmp	r3, #5
 8004a04:	d824      	bhi.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8004a06:	a201      	add	r2, pc, #4	; (adr r2, 8004a0c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8004a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0c:	08004a59 	.word	0x08004a59
 8004a10:	08004a25 	.word	0x08004a25
 8004a14:	08004a3b 	.word	0x08004a3b
 8004a18:	08004a59 	.word	0x08004a59
 8004a1c:	08004a59 	.word	0x08004a59
 8004a20:	08004a59 	.word	0x08004a59
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a28:	3308      	adds	r3, #8
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 ff71 	bl	8005914 <RCCEx_PLL2_Config>
 8004a32:	4603      	mov	r3, r0
 8004a34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004a38:	e00f      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a3e:	3328      	adds	r3, #40	; 0x28
 8004a40:	2101      	movs	r1, #1
 8004a42:	4618      	mov	r0, r3
 8004a44:	f001 f818 	bl	8005a78 <RCCEx_PLL3_Config>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004a4e:	e004      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004a56:	e000      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8004a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10b      	bne.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004a62:	4b96      	ldr	r3, [pc, #600]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a66:	f023 0107 	bic.w	r1, r3, #7
 8004a6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a72:	4a92      	ldr	r2, [pc, #584]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004a74:	430b      	orrs	r3, r1
 8004a76:	6553      	str	r3, [r2, #84]	; 0x54
 8004a78:	e003      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a7e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8a:	f002 0304 	and.w	r3, r2, #4
 8004a8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a92:	2300      	movs	r3, #0
 8004a94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a98:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	d043      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004aa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004aaa:	2b05      	cmp	r3, #5
 8004aac:	d824      	bhi.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004aae:	a201      	add	r2, pc, #4	; (adr r2, 8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8004ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab4:	08004b01 	.word	0x08004b01
 8004ab8:	08004acd 	.word	0x08004acd
 8004abc:	08004ae3 	.word	0x08004ae3
 8004ac0:	08004b01 	.word	0x08004b01
 8004ac4:	08004b01 	.word	0x08004b01
 8004ac8:	08004b01 	.word	0x08004b01
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ad0:	3308      	adds	r3, #8
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 ff1d 	bl	8005914 <RCCEx_PLL2_Config>
 8004ada:	4603      	mov	r3, r0
 8004adc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004ae0:	e00f      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ae6:	3328      	adds	r3, #40	; 0x28
 8004ae8:	2101      	movs	r1, #1
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 ffc4 	bl	8005a78 <RCCEx_PLL3_Config>
 8004af0:	4603      	mov	r3, r0
 8004af2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004af6:	e004      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004afe:	e000      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8004b00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b02:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10b      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b0a:	4b6c      	ldr	r3, [pc, #432]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0e:	f023 0107 	bic.w	r1, r3, #7
 8004b12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b1a:	4a68      	ldr	r2, [pc, #416]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004b1c:	430b      	orrs	r3, r1
 8004b1e:	6593      	str	r3, [r2, #88]	; 0x58
 8004b20:	e003      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b26:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b32:	f002 0320 	and.w	r3, r2, #32
 8004b36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b44:	460b      	mov	r3, r1
 8004b46:	4313      	orrs	r3, r2
 8004b48:	d055      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004b4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b56:	d033      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004b58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b5c:	d82c      	bhi.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b62:	d02f      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b68:	d826      	bhi.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004b6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b6e:	d02b      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004b70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b74:	d820      	bhi.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004b76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b7a:	d012      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004b7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b80:	d81a      	bhi.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d022      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004b86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b8a:	d115      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b90:	3308      	adds	r3, #8
 8004b92:	2100      	movs	r1, #0
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 febd 	bl	8005914 <RCCEx_PLL2_Config>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004ba0:	e015      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ba6:	3328      	adds	r3, #40	; 0x28
 8004ba8:	2102      	movs	r1, #2
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 ff64 	bl	8005a78 <RCCEx_PLL3_Config>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004bb6:	e00a      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004bbe:	e006      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004bc0:	bf00      	nop
 8004bc2:	e004      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004bc4:	bf00      	nop
 8004bc6:	e002      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004bc8:	bf00      	nop
 8004bca:	e000      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004bcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10b      	bne.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bd6:	4b39      	ldr	r3, [pc, #228]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bda:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004be2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004be6:	4a35      	ldr	r2, [pc, #212]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004be8:	430b      	orrs	r3, r1
 8004bea:	6553      	str	r3, [r2, #84]	; 0x54
 8004bec:	e003      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004bf2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004bf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfe:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004c02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c06:	2300      	movs	r3, #0
 8004c08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004c0c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004c10:	460b      	mov	r3, r1
 8004c12:	4313      	orrs	r3, r2
 8004c14:	d058      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004c16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c1e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004c22:	d033      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004c24:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004c28:	d82c      	bhi.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c2e:	d02f      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c34:	d826      	bhi.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004c36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c3a:	d02b      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004c3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c40:	d820      	bhi.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004c42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c46:	d012      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004c48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c4c:	d81a      	bhi.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d022      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8004c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c56:	d115      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c5c:	3308      	adds	r3, #8
 8004c5e:	2100      	movs	r1, #0
 8004c60:	4618      	mov	r0, r3
 8004c62:	f000 fe57 	bl	8005914 <RCCEx_PLL2_Config>
 8004c66:	4603      	mov	r3, r0
 8004c68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004c6c:	e015      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c72:	3328      	adds	r3, #40	; 0x28
 8004c74:	2102      	movs	r1, #2
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 fefe 	bl	8005a78 <RCCEx_PLL3_Config>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004c82:	e00a      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004c8a:	e006      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004c8c:	bf00      	nop
 8004c8e:	e004      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004c90:	bf00      	nop
 8004c92:	e002      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004c94:	bf00      	nop
 8004c96:	e000      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c9a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10e      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ca2:	4b06      	ldr	r3, [pc, #24]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004cb2:	4a02      	ldr	r2, [pc, #8]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004cb4:	430b      	orrs	r3, r1
 8004cb6:	6593      	str	r3, [r2, #88]	; 0x58
 8004cb8:	e006      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004cba:	bf00      	nop
 8004cbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004cc4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004cd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cde:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	d055      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004ce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004cf0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004cf4:	d033      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004cf6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004cfa:	d82c      	bhi.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004cfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d00:	d02f      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004d02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d06:	d826      	bhi.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004d08:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004d0c:	d02b      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004d0e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004d12:	d820      	bhi.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004d14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d18:	d012      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004d1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d1e:	d81a      	bhi.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d022      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004d24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d28:	d115      	bne.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d2e:	3308      	adds	r3, #8
 8004d30:	2100      	movs	r1, #0
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fdee 	bl	8005914 <RCCEx_PLL2_Config>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004d3e:	e015      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d44:	3328      	adds	r3, #40	; 0x28
 8004d46:	2102      	movs	r1, #2
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f000 fe95 	bl	8005a78 <RCCEx_PLL3_Config>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004d54:	e00a      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004d5c:	e006      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004d5e:	bf00      	nop
 8004d60:	e004      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004d62:	bf00      	nop
 8004d64:	e002      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004d66:	bf00      	nop
 8004d68:	e000      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004d6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10b      	bne.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004d74:	4ba1      	ldr	r3, [pc, #644]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d78:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004d7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004d84:	4a9d      	ldr	r2, [pc, #628]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d86:	430b      	orrs	r3, r1
 8004d88:	6593      	str	r3, [r2, #88]	; 0x58
 8004d8a:	e003      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d90:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9c:	f002 0308 	and.w	r3, r2, #8
 8004da0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004da4:	2300      	movs	r3, #0
 8004da6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004daa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004dae:	460b      	mov	r3, r1
 8004db0:	4313      	orrs	r3, r2
 8004db2:	d01e      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004db4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc0:	d10c      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dc6:	3328      	adds	r3, #40	; 0x28
 8004dc8:	2102      	movs	r1, #2
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 fe54 	bl	8005a78 <RCCEx_PLL3_Config>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d002      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004ddc:	4b87      	ldr	r3, [pc, #540]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dec:	4a83      	ldr	r2, [pc, #524]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004dee:	430b      	orrs	r3, r1
 8004df0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfa:	f002 0310 	and.w	r3, r2, #16
 8004dfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e02:	2300      	movs	r3, #0
 8004e04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004e08:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	d01e      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e1e:	d10c      	bne.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004e20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e24:	3328      	adds	r3, #40	; 0x28
 8004e26:	2102      	movs	r1, #2
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 fe25 	bl	8005a78 <RCCEx_PLL3_Config>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d002      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e3a:	4b70      	ldr	r3, [pc, #448]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e4a:	4a6c      	ldr	r2, [pc, #432]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e4c:	430b      	orrs	r3, r1
 8004e4e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e58:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004e5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e60:	2300      	movs	r3, #0
 8004e62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e66:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	d03e      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004e70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004e78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e7c:	d022      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004e7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e82:	d81b      	bhi.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e8c:	d00b      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004e8e:	e015      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e94:	3308      	adds	r3, #8
 8004e96:	2100      	movs	r1, #0
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f000 fd3b 	bl	8005914 <RCCEx_PLL2_Config>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004ea4:	e00f      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eaa:	3328      	adds	r3, #40	; 0x28
 8004eac:	2102      	movs	r1, #2
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 fde2 	bl	8005a78 <RCCEx_PLL3_Config>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004eba:	e004      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004ec2:	e000      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004ec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ec6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10b      	bne.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ece:	4b4b      	ldr	r3, [pc, #300]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ede:	4a47      	ldr	r2, [pc, #284]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ee0:	430b      	orrs	r3, r1
 8004ee2:	6593      	str	r3, [r2, #88]	; 0x58
 8004ee4:	e003      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004eea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004eee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004efa:	67bb      	str	r3, [r7, #120]	; 0x78
 8004efc:	2300      	movs	r3, #0
 8004efe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f00:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004f04:	460b      	mov	r3, r1
 8004f06:	4313      	orrs	r3, r2
 8004f08:	d03b      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004f0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f16:	d01f      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004f18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f1c:	d818      	bhi.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004f1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f22:	d003      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004f24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f28:	d007      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004f2a:	e011      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f2c:	4b33      	ldr	r3, [pc, #204]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f30:	4a32      	ldr	r2, [pc, #200]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004f38:	e00f      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f3e:	3328      	adds	r3, #40	; 0x28
 8004f40:	2101      	movs	r1, #1
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 fd98 	bl	8005a78 <RCCEx_PLL3_Config>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004f4e:	e004      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004f56:	e000      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004f58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10b      	bne.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f62:	4b26      	ldr	r3, [pc, #152]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f66:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f72:	4a22      	ldr	r2, [pc, #136]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f74:	430b      	orrs	r3, r1
 8004f76:	6553      	str	r3, [r2, #84]	; 0x54
 8004f78:	e003      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f7e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004f8e:	673b      	str	r3, [r7, #112]	; 0x70
 8004f90:	2300      	movs	r3, #0
 8004f92:	677b      	str	r3, [r7, #116]	; 0x74
 8004f94:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004f98:	460b      	mov	r3, r1
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	d034      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004f9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fac:	d007      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004fae:	e011      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fb0:	4b12      	ldr	r3, [pc, #72]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb4:	4a11      	ldr	r2, [pc, #68]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004fb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004fbc:	e00e      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fc2:	3308      	adds	r3, #8
 8004fc4:	2102      	movs	r1, #2
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 fca4 	bl	8005914 <RCCEx_PLL2_Config>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004fd2:	e003      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004fda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fdc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10d      	bne.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004fe4:	4b05      	ldr	r3, [pc, #20]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff2:	4a02      	ldr	r2, [pc, #8]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ff4:	430b      	orrs	r3, r1
 8004ff6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ff8:	e006      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004ffa:	bf00      	nop
 8004ffc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005000:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005004:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005008:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800500c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005010:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005014:	66bb      	str	r3, [r7, #104]	; 0x68
 8005016:	2300      	movs	r3, #0
 8005018:	66fb      	str	r3, [r7, #108]	; 0x6c
 800501a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800501e:	460b      	mov	r3, r1
 8005020:	4313      	orrs	r3, r2
 8005022:	d00c      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005024:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005028:	3328      	adds	r3, #40	; 0x28
 800502a:	2102      	movs	r1, #2
 800502c:	4618      	mov	r0, r3
 800502e:	f000 fd23 	bl	8005a78 <RCCEx_PLL3_Config>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d002      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800503e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005046:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800504a:	663b      	str	r3, [r7, #96]	; 0x60
 800504c:	2300      	movs	r3, #0
 800504e:	667b      	str	r3, [r7, #100]	; 0x64
 8005050:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005054:	460b      	mov	r3, r1
 8005056:	4313      	orrs	r3, r2
 8005058:	d038      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800505a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800505e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005062:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005066:	d018      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8005068:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800506c:	d811      	bhi.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800506e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005072:	d014      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8005074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005078:	d80b      	bhi.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800507a:	2b00      	cmp	r3, #0
 800507c:	d011      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800507e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005082:	d106      	bne.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005084:	4bc3      	ldr	r3, [pc, #780]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005088:	4ac2      	ldr	r2, [pc, #776]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800508a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800508e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005090:	e008      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005098:	e004      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800509a:	bf00      	nop
 800509c:	e002      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800509e:	bf00      	nop
 80050a0:	e000      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80050a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10b      	bne.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050ac:	4bb9      	ldr	r3, [pc, #740]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80050ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80050b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050bc:	4ab5      	ldr	r2, [pc, #724]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80050be:	430b      	orrs	r3, r1
 80050c0:	6553      	str	r3, [r2, #84]	; 0x54
 80050c2:	e003      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050c8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80050cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80050d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80050da:	2300      	movs	r3, #0
 80050dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050de:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80050e2:	460b      	mov	r3, r1
 80050e4:	4313      	orrs	r3, r2
 80050e6:	d009      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80050e8:	4baa      	ldr	r3, [pc, #680]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80050ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80050f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050f6:	4aa7      	ldr	r2, [pc, #668]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80050f8:	430b      	orrs	r3, r1
 80050fa:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80050fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005104:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005108:	653b      	str	r3, [r7, #80]	; 0x50
 800510a:	2300      	movs	r3, #0
 800510c:	657b      	str	r3, [r7, #84]	; 0x54
 800510e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005112:	460b      	mov	r3, r1
 8005114:	4313      	orrs	r3, r2
 8005116:	d009      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005118:	4b9e      	ldr	r3, [pc, #632]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800511a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800511c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005120:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005126:	4a9b      	ldr	r2, [pc, #620]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005128:	430b      	orrs	r3, r1
 800512a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800512c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005134:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005138:	64bb      	str	r3, [r7, #72]	; 0x48
 800513a:	2300      	movs	r3, #0
 800513c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800513e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005142:	460b      	mov	r3, r1
 8005144:	4313      	orrs	r3, r2
 8005146:	d009      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005148:	4b92      	ldr	r3, [pc, #584]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800514a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8005150:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005156:	4a8f      	ldr	r2, [pc, #572]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005158:	430b      	orrs	r3, r1
 800515a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800515c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005164:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005168:	643b      	str	r3, [r7, #64]	; 0x40
 800516a:	2300      	movs	r3, #0
 800516c:	647b      	str	r3, [r7, #68]	; 0x44
 800516e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005172:	460b      	mov	r3, r1
 8005174:	4313      	orrs	r3, r2
 8005176:	d00e      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005178:	4b86      	ldr	r3, [pc, #536]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	4a85      	ldr	r2, [pc, #532]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800517e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005182:	6113      	str	r3, [r2, #16]
 8005184:	4b83      	ldr	r3, [pc, #524]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005186:	6919      	ldr	r1, [r3, #16]
 8005188:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800518c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005190:	4a80      	ldr	r2, [pc, #512]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005192:	430b      	orrs	r3, r1
 8005194:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005196:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800519a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80051a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80051a4:	2300      	movs	r3, #0
 80051a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051a8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80051ac:	460b      	mov	r3, r1
 80051ae:	4313      	orrs	r3, r2
 80051b0:	d009      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80051b2:	4b78      	ldr	r3, [pc, #480]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80051b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80051ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c0:	4a74      	ldr	r2, [pc, #464]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80051c2:	430b      	orrs	r3, r1
 80051c4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80051c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ce:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80051d2:	633b      	str	r3, [r7, #48]	; 0x30
 80051d4:	2300      	movs	r3, #0
 80051d6:	637b      	str	r3, [r7, #52]	; 0x34
 80051d8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80051dc:	460b      	mov	r3, r1
 80051de:	4313      	orrs	r3, r2
 80051e0:	d00a      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80051e2:	4b6c      	ldr	r3, [pc, #432]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80051e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80051ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051f2:	4a68      	ldr	r2, [pc, #416]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80051f4:	430b      	orrs	r3, r1
 80051f6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80051f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005200:	2100      	movs	r1, #0
 8005202:	62b9      	str	r1, [r7, #40]	; 0x28
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800520a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800520e:	460b      	mov	r3, r1
 8005210:	4313      	orrs	r3, r2
 8005212:	d011      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005214:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005218:	3308      	adds	r3, #8
 800521a:	2100      	movs	r1, #0
 800521c:	4618      	mov	r0, r3
 800521e:	f000 fb79 	bl	8005914 <RCCEx_PLL2_Config>
 8005222:	4603      	mov	r3, r0
 8005224:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005228:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005230:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005234:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005238:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800523c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005240:	2100      	movs	r1, #0
 8005242:	6239      	str	r1, [r7, #32]
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	627b      	str	r3, [r7, #36]	; 0x24
 800524a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800524e:	460b      	mov	r3, r1
 8005250:	4313      	orrs	r3, r2
 8005252:	d011      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005254:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005258:	3308      	adds	r3, #8
 800525a:	2101      	movs	r1, #1
 800525c:	4618      	mov	r0, r3
 800525e:	f000 fb59 	bl	8005914 <RCCEx_PLL2_Config>
 8005262:	4603      	mov	r3, r0
 8005264:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005268:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005270:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005274:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005278:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800527c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005280:	2100      	movs	r1, #0
 8005282:	61b9      	str	r1, [r7, #24]
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	61fb      	str	r3, [r7, #28]
 800528a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800528e:	460b      	mov	r3, r1
 8005290:	4313      	orrs	r3, r2
 8005292:	d011      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005294:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005298:	3308      	adds	r3, #8
 800529a:	2102      	movs	r1, #2
 800529c:	4618      	mov	r0, r3
 800529e:	f000 fb39 	bl	8005914 <RCCEx_PLL2_Config>
 80052a2:	4603      	mov	r3, r0
 80052a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80052a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d003      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80052b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80052b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c0:	2100      	movs	r1, #0
 80052c2:	6139      	str	r1, [r7, #16]
 80052c4:	f003 0308 	and.w	r3, r3, #8
 80052c8:	617b      	str	r3, [r7, #20]
 80052ca:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80052ce:	460b      	mov	r3, r1
 80052d0:	4313      	orrs	r3, r2
 80052d2:	d011      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052d8:	3328      	adds	r3, #40	; 0x28
 80052da:	2100      	movs	r1, #0
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 fbcb 	bl	8005a78 <RCCEx_PLL3_Config>
 80052e2:	4603      	mov	r3, r0
 80052e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 80052e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d003      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80052f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80052f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005300:	2100      	movs	r1, #0
 8005302:	60b9      	str	r1, [r7, #8]
 8005304:	f003 0310 	and.w	r3, r3, #16
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800530e:	460b      	mov	r3, r1
 8005310:	4313      	orrs	r3, r2
 8005312:	d011      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005314:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005318:	3328      	adds	r3, #40	; 0x28
 800531a:	2101      	movs	r1, #1
 800531c:	4618      	mov	r0, r3
 800531e:	f000 fbab 	bl	8005a78 <RCCEx_PLL3_Config>
 8005322:	4603      	mov	r3, r0
 8005324:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005328:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800532c:	2b00      	cmp	r3, #0
 800532e:	d003      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005330:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005334:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005338:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800533c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005340:	2100      	movs	r1, #0
 8005342:	6039      	str	r1, [r7, #0]
 8005344:	f003 0320 	and.w	r3, r3, #32
 8005348:	607b      	str	r3, [r7, #4]
 800534a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800534e:	460b      	mov	r3, r1
 8005350:	4313      	orrs	r3, r2
 8005352:	d011      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005354:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005358:	3328      	adds	r3, #40	; 0x28
 800535a:	2102      	movs	r1, #2
 800535c:	4618      	mov	r0, r3
 800535e:	f000 fb8b 	bl	8005a78 <RCCEx_PLL3_Config>
 8005362:	4603      	mov	r3, r0
 8005364:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005368:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800536c:	2b00      	cmp	r3, #0
 800536e:	d003      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005370:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005374:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8005378:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8005380:	2300      	movs	r3, #0
 8005382:	e000      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
}
 8005386:	4618      	mov	r0, r3
 8005388:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800538c:	46bd      	mov	sp, r7
 800538e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005392:	bf00      	nop
 8005394:	58024400 	.word	0x58024400

08005398 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800539c:	f7fe fde2 	bl	8003f64 <HAL_RCC_GetHCLKFreq>
 80053a0:	4602      	mov	r2, r0
 80053a2:	4b06      	ldr	r3, [pc, #24]	; (80053bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	091b      	lsrs	r3, r3, #4
 80053a8:	f003 0307 	and.w	r3, r3, #7
 80053ac:	4904      	ldr	r1, [pc, #16]	; (80053c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80053ae:	5ccb      	ldrb	r3, [r1, r3]
 80053b0:	f003 031f 	and.w	r3, r3, #31
 80053b4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	58024400 	.word	0x58024400
 80053c0:	08009b40 	.word	0x08009b40

080053c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b089      	sub	sp, #36	; 0x24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80053cc:	4ba1      	ldr	r3, [pc, #644]	; (8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d0:	f003 0303 	and.w	r3, r3, #3
 80053d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80053d6:	4b9f      	ldr	r3, [pc, #636]	; (8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053da:	0b1b      	lsrs	r3, r3, #12
 80053dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80053e2:	4b9c      	ldr	r3, [pc, #624]	; (8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e6:	091b      	lsrs	r3, r3, #4
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80053ee:	4b99      	ldr	r3, [pc, #612]	; (8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f2:	08db      	lsrs	r3, r3, #3
 80053f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	fb02 f303 	mul.w	r3, r2, r3
 80053fe:	ee07 3a90 	vmov	s15, r3
 8005402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005406:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 8111 	beq.w	8005634 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	2b02      	cmp	r3, #2
 8005416:	f000 8083 	beq.w	8005520 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	2b02      	cmp	r3, #2
 800541e:	f200 80a1 	bhi.w	8005564 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d003      	beq.n	8005430 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d056      	beq.n	80054dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800542e:	e099      	b.n	8005564 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005430:	4b88      	ldr	r3, [pc, #544]	; (8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0320 	and.w	r3, r3, #32
 8005438:	2b00      	cmp	r3, #0
 800543a:	d02d      	beq.n	8005498 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800543c:	4b85      	ldr	r3, [pc, #532]	; (8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	08db      	lsrs	r3, r3, #3
 8005442:	f003 0303 	and.w	r3, r3, #3
 8005446:	4a84      	ldr	r2, [pc, #528]	; (8005658 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005448:	fa22 f303 	lsr.w	r3, r2, r3
 800544c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	ee07 3a90 	vmov	s15, r3
 8005454:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	ee07 3a90 	vmov	s15, r3
 800545e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005466:	4b7b      	ldr	r3, [pc, #492]	; (8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800546e:	ee07 3a90 	vmov	s15, r3
 8005472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005476:	ed97 6a03 	vldr	s12, [r7, #12]
 800547a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800565c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800547e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800548a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800548e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005492:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005496:	e087      	b.n	80055a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	ee07 3a90 	vmov	s15, r3
 800549e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005660 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80054a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054aa:	4b6a      	ldr	r3, [pc, #424]	; (8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054b2:	ee07 3a90 	vmov	s15, r3
 80054b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80054be:	eddf 5a67 	vldr	s11, [pc, #412]	; 800565c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054da:	e065      	b.n	80055a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	ee07 3a90 	vmov	s15, r3
 80054e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005664 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80054ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ee:	4b59      	ldr	r3, [pc, #356]	; (8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f6:	ee07 3a90 	vmov	s15, r3
 80054fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005502:	eddf 5a56 	vldr	s11, [pc, #344]	; 800565c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800550a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800550e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800551a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800551e:	e043      	b.n	80055a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	ee07 3a90 	vmov	s15, r3
 8005526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800552a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005668 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800552e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005532:	4b48      	ldr	r3, [pc, #288]	; (8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800553a:	ee07 3a90 	vmov	s15, r3
 800553e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005542:	ed97 6a03 	vldr	s12, [r7, #12]
 8005546:	eddf 5a45 	vldr	s11, [pc, #276]	; 800565c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800554a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800554e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005552:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800555a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800555e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005562:	e021      	b.n	80055a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	ee07 3a90 	vmov	s15, r3
 800556a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800556e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005664 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005576:	4b37      	ldr	r3, [pc, #220]	; (8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800557e:	ee07 3a90 	vmov	s15, r3
 8005582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005586:	ed97 6a03 	vldr	s12, [r7, #12]
 800558a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800565c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800558e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800559a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800559e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80055a8:	4b2a      	ldr	r3, [pc, #168]	; (8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ac:	0a5b      	lsrs	r3, r3, #9
 80055ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055b2:	ee07 3a90 	vmov	s15, r3
 80055b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80055c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055ce:	ee17 2a90 	vmov	r2, s15
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80055d6:	4b1f      	ldr	r3, [pc, #124]	; (8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055da:	0c1b      	lsrs	r3, r3, #16
 80055dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055e0:	ee07 3a90 	vmov	s15, r3
 80055e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80055f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055fc:	ee17 2a90 	vmov	r2, s15
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005604:	4b13      	ldr	r3, [pc, #76]	; (8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005608:	0e1b      	lsrs	r3, r3, #24
 800560a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800560e:	ee07 3a90 	vmov	s15, r3
 8005612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005616:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800561a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800561e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800562a:	ee17 2a90 	vmov	r2, s15
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005632:	e008      	b.n	8005646 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	609a      	str	r2, [r3, #8]
}
 8005646:	bf00      	nop
 8005648:	3724      	adds	r7, #36	; 0x24
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	58024400 	.word	0x58024400
 8005658:	03d09000 	.word	0x03d09000
 800565c:	46000000 	.word	0x46000000
 8005660:	4c742400 	.word	0x4c742400
 8005664:	4a742400 	.word	0x4a742400
 8005668:	4af42400 	.word	0x4af42400

0800566c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800566c:	b480      	push	{r7}
 800566e:	b089      	sub	sp, #36	; 0x24
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005674:	4ba1      	ldr	r3, [pc, #644]	; (80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005678:	f003 0303 	and.w	r3, r3, #3
 800567c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800567e:	4b9f      	ldr	r3, [pc, #636]	; (80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005682:	0d1b      	lsrs	r3, r3, #20
 8005684:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005688:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800568a:	4b9c      	ldr	r3, [pc, #624]	; (80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800568c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568e:	0a1b      	lsrs	r3, r3, #8
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005696:	4b99      	ldr	r3, [pc, #612]	; (80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569a:	08db      	lsrs	r3, r3, #3
 800569c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	fb02 f303 	mul.w	r3, r2, r3
 80056a6:	ee07 3a90 	vmov	s15, r3
 80056aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 8111 	beq.w	80058dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	2b02      	cmp	r3, #2
 80056be:	f000 8083 	beq.w	80057c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	f200 80a1 	bhi.w	800580c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d056      	beq.n	8005784 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80056d6:	e099      	b.n	800580c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056d8:	4b88      	ldr	r3, [pc, #544]	; (80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0320 	and.w	r3, r3, #32
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d02d      	beq.n	8005740 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056e4:	4b85      	ldr	r3, [pc, #532]	; (80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	08db      	lsrs	r3, r3, #3
 80056ea:	f003 0303 	and.w	r3, r3, #3
 80056ee:	4a84      	ldr	r2, [pc, #528]	; (8005900 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80056f0:	fa22 f303 	lsr.w	r3, r2, r3
 80056f4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	ee07 3a90 	vmov	s15, r3
 80056fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	ee07 3a90 	vmov	s15, r3
 8005706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800570a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800570e:	4b7b      	ldr	r3, [pc, #492]	; (80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005716:	ee07 3a90 	vmov	s15, r3
 800571a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800571e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005722:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005904 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800572a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800572e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800573a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800573e:	e087      	b.n	8005850 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	ee07 3a90 	vmov	s15, r3
 8005746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800574a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005908 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800574e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005752:	4b6a      	ldr	r3, [pc, #424]	; (80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800575a:	ee07 3a90 	vmov	s15, r3
 800575e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005762:	ed97 6a03 	vldr	s12, [r7, #12]
 8005766:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005904 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800576a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800576e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800577a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800577e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005782:	e065      	b.n	8005850 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	ee07 3a90 	vmov	s15, r3
 800578a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800590c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005796:	4b59      	ldr	r3, [pc, #356]	; (80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800579e:	ee07 3a90 	vmov	s15, r3
 80057a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80057aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005904 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057c6:	e043      	b.n	8005850 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	ee07 3a90 	vmov	s15, r3
 80057ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80057d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057da:	4b48      	ldr	r3, [pc, #288]	; (80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057e2:	ee07 3a90 	vmov	s15, r3
 80057e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80057ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005904 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005806:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800580a:	e021      	b.n	8005850 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	ee07 3a90 	vmov	s15, r3
 8005812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005816:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800590c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800581a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800581e:	4b37      	ldr	r3, [pc, #220]	; (80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005826:	ee07 3a90 	vmov	s15, r3
 800582a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800582e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005832:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005904 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800583a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800583e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800584a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800584e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005850:	4b2a      	ldr	r3, [pc, #168]	; (80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005854:	0a5b      	lsrs	r3, r3, #9
 8005856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800585a:	ee07 3a90 	vmov	s15, r3
 800585e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005862:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005866:	ee37 7a87 	vadd.f32	s14, s15, s14
 800586a:	edd7 6a07 	vldr	s13, [r7, #28]
 800586e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005876:	ee17 2a90 	vmov	r2, s15
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800587e:	4b1f      	ldr	r3, [pc, #124]	; (80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005882:	0c1b      	lsrs	r3, r3, #16
 8005884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005888:	ee07 3a90 	vmov	s15, r3
 800588c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005890:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005894:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005898:	edd7 6a07 	vldr	s13, [r7, #28]
 800589c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058a4:	ee17 2a90 	vmov	r2, s15
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80058ac:	4b13      	ldr	r3, [pc, #76]	; (80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b0:	0e1b      	lsrs	r3, r3, #24
 80058b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058b6:	ee07 3a90 	vmov	s15, r3
 80058ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80058ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058d2:	ee17 2a90 	vmov	r2, s15
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80058da:	e008      	b.n	80058ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	609a      	str	r2, [r3, #8]
}
 80058ee:	bf00      	nop
 80058f0:	3724      	adds	r7, #36	; 0x24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	58024400 	.word	0x58024400
 8005900:	03d09000 	.word	0x03d09000
 8005904:	46000000 	.word	0x46000000
 8005908:	4c742400 	.word	0x4c742400
 800590c:	4a742400 	.word	0x4a742400
 8005910:	4af42400 	.word	0x4af42400

08005914 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800591e:	2300      	movs	r3, #0
 8005920:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005922:	4b53      	ldr	r3, [pc, #332]	; (8005a70 <RCCEx_PLL2_Config+0x15c>)
 8005924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005926:	f003 0303 	and.w	r3, r3, #3
 800592a:	2b03      	cmp	r3, #3
 800592c:	d101      	bne.n	8005932 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e099      	b.n	8005a66 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005932:	4b4f      	ldr	r3, [pc, #316]	; (8005a70 <RCCEx_PLL2_Config+0x15c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a4e      	ldr	r2, [pc, #312]	; (8005a70 <RCCEx_PLL2_Config+0x15c>)
 8005938:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800593c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800593e:	f7fc fac7 	bl	8001ed0 <HAL_GetTick>
 8005942:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005944:	e008      	b.n	8005958 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005946:	f7fc fac3 	bl	8001ed0 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	2b02      	cmp	r3, #2
 8005952:	d901      	bls.n	8005958 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e086      	b.n	8005a66 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005958:	4b45      	ldr	r3, [pc, #276]	; (8005a70 <RCCEx_PLL2_Config+0x15c>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1f0      	bne.n	8005946 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005964:	4b42      	ldr	r3, [pc, #264]	; (8005a70 <RCCEx_PLL2_Config+0x15c>)
 8005966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005968:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	031b      	lsls	r3, r3, #12
 8005972:	493f      	ldr	r1, [pc, #252]	; (8005a70 <RCCEx_PLL2_Config+0x15c>)
 8005974:	4313      	orrs	r3, r2
 8005976:	628b      	str	r3, [r1, #40]	; 0x28
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	3b01      	subs	r3, #1
 800597e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	3b01      	subs	r3, #1
 8005988:	025b      	lsls	r3, r3, #9
 800598a:	b29b      	uxth	r3, r3
 800598c:	431a      	orrs	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	3b01      	subs	r3, #1
 8005994:	041b      	lsls	r3, r3, #16
 8005996:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800599a:	431a      	orrs	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	3b01      	subs	r3, #1
 80059a2:	061b      	lsls	r3, r3, #24
 80059a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80059a8:	4931      	ldr	r1, [pc, #196]	; (8005a70 <RCCEx_PLL2_Config+0x15c>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80059ae:	4b30      	ldr	r3, [pc, #192]	; (8005a70 <RCCEx_PLL2_Config+0x15c>)
 80059b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	492d      	ldr	r1, [pc, #180]	; (8005a70 <RCCEx_PLL2_Config+0x15c>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80059c0:	4b2b      	ldr	r3, [pc, #172]	; (8005a70 <RCCEx_PLL2_Config+0x15c>)
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	f023 0220 	bic.w	r2, r3, #32
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	4928      	ldr	r1, [pc, #160]	; (8005a70 <RCCEx_PLL2_Config+0x15c>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80059d2:	4b27      	ldr	r3, [pc, #156]	; (8005a70 <RCCEx_PLL2_Config+0x15c>)
 80059d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d6:	4a26      	ldr	r2, [pc, #152]	; (8005a70 <RCCEx_PLL2_Config+0x15c>)
 80059d8:	f023 0310 	bic.w	r3, r3, #16
 80059dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80059de:	4b24      	ldr	r3, [pc, #144]	; (8005a70 <RCCEx_PLL2_Config+0x15c>)
 80059e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059e2:	4b24      	ldr	r3, [pc, #144]	; (8005a74 <RCCEx_PLL2_Config+0x160>)
 80059e4:	4013      	ands	r3, r2
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	69d2      	ldr	r2, [r2, #28]
 80059ea:	00d2      	lsls	r2, r2, #3
 80059ec:	4920      	ldr	r1, [pc, #128]	; (8005a70 <RCCEx_PLL2_Config+0x15c>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80059f2:	4b1f      	ldr	r3, [pc, #124]	; (8005a70 <RCCEx_PLL2_Config+0x15c>)
 80059f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f6:	4a1e      	ldr	r2, [pc, #120]	; (8005a70 <RCCEx_PLL2_Config+0x15c>)
 80059f8:	f043 0310 	orr.w	r3, r3, #16
 80059fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d106      	bne.n	8005a12 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005a04:	4b1a      	ldr	r3, [pc, #104]	; (8005a70 <RCCEx_PLL2_Config+0x15c>)
 8005a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a08:	4a19      	ldr	r2, [pc, #100]	; (8005a70 <RCCEx_PLL2_Config+0x15c>)
 8005a0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a10:	e00f      	b.n	8005a32 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d106      	bne.n	8005a26 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005a18:	4b15      	ldr	r3, [pc, #84]	; (8005a70 <RCCEx_PLL2_Config+0x15c>)
 8005a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1c:	4a14      	ldr	r2, [pc, #80]	; (8005a70 <RCCEx_PLL2_Config+0x15c>)
 8005a1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a24:	e005      	b.n	8005a32 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005a26:	4b12      	ldr	r3, [pc, #72]	; (8005a70 <RCCEx_PLL2_Config+0x15c>)
 8005a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2a:	4a11      	ldr	r2, [pc, #68]	; (8005a70 <RCCEx_PLL2_Config+0x15c>)
 8005a2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a30:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005a32:	4b0f      	ldr	r3, [pc, #60]	; (8005a70 <RCCEx_PLL2_Config+0x15c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a0e      	ldr	r2, [pc, #56]	; (8005a70 <RCCEx_PLL2_Config+0x15c>)
 8005a38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a3e:	f7fc fa47 	bl	8001ed0 <HAL_GetTick>
 8005a42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a44:	e008      	b.n	8005a58 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a46:	f7fc fa43 	bl	8001ed0 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d901      	bls.n	8005a58 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e006      	b.n	8005a66 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a58:	4b05      	ldr	r3, [pc, #20]	; (8005a70 <RCCEx_PLL2_Config+0x15c>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d0f0      	beq.n	8005a46 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	58024400 	.word	0x58024400
 8005a74:	ffff0007 	.word	0xffff0007

08005a78 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a82:	2300      	movs	r3, #0
 8005a84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a86:	4b53      	ldr	r3, [pc, #332]	; (8005bd4 <RCCEx_PLL3_Config+0x15c>)
 8005a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8a:	f003 0303 	and.w	r3, r3, #3
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	d101      	bne.n	8005a96 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e099      	b.n	8005bca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005a96:	4b4f      	ldr	r3, [pc, #316]	; (8005bd4 <RCCEx_PLL3_Config+0x15c>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a4e      	ldr	r2, [pc, #312]	; (8005bd4 <RCCEx_PLL3_Config+0x15c>)
 8005a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005aa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aa2:	f7fc fa15 	bl	8001ed0 <HAL_GetTick>
 8005aa6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005aa8:	e008      	b.n	8005abc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005aaa:	f7fc fa11 	bl	8001ed0 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d901      	bls.n	8005abc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e086      	b.n	8005bca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005abc:	4b45      	ldr	r3, [pc, #276]	; (8005bd4 <RCCEx_PLL3_Config+0x15c>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1f0      	bne.n	8005aaa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005ac8:	4b42      	ldr	r3, [pc, #264]	; (8005bd4 <RCCEx_PLL3_Config+0x15c>)
 8005aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005acc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	051b      	lsls	r3, r3, #20
 8005ad6:	493f      	ldr	r1, [pc, #252]	; (8005bd4 <RCCEx_PLL3_Config+0x15c>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	628b      	str	r3, [r1, #40]	; 0x28
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	3b01      	subs	r3, #1
 8005aec:	025b      	lsls	r3, r3, #9
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	431a      	orrs	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	3b01      	subs	r3, #1
 8005af8:	041b      	lsls	r3, r3, #16
 8005afa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005afe:	431a      	orrs	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	3b01      	subs	r3, #1
 8005b06:	061b      	lsls	r3, r3, #24
 8005b08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b0c:	4931      	ldr	r1, [pc, #196]	; (8005bd4 <RCCEx_PLL3_Config+0x15c>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005b12:	4b30      	ldr	r3, [pc, #192]	; (8005bd4 <RCCEx_PLL3_Config+0x15c>)
 8005b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	492d      	ldr	r1, [pc, #180]	; (8005bd4 <RCCEx_PLL3_Config+0x15c>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005b24:	4b2b      	ldr	r3, [pc, #172]	; (8005bd4 <RCCEx_PLL3_Config+0x15c>)
 8005b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b28:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	4928      	ldr	r1, [pc, #160]	; (8005bd4 <RCCEx_PLL3_Config+0x15c>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005b36:	4b27      	ldr	r3, [pc, #156]	; (8005bd4 <RCCEx_PLL3_Config+0x15c>)
 8005b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3a:	4a26      	ldr	r2, [pc, #152]	; (8005bd4 <RCCEx_PLL3_Config+0x15c>)
 8005b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005b42:	4b24      	ldr	r3, [pc, #144]	; (8005bd4 <RCCEx_PLL3_Config+0x15c>)
 8005b44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b46:	4b24      	ldr	r3, [pc, #144]	; (8005bd8 <RCCEx_PLL3_Config+0x160>)
 8005b48:	4013      	ands	r3, r2
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	69d2      	ldr	r2, [r2, #28]
 8005b4e:	00d2      	lsls	r2, r2, #3
 8005b50:	4920      	ldr	r1, [pc, #128]	; (8005bd4 <RCCEx_PLL3_Config+0x15c>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005b56:	4b1f      	ldr	r3, [pc, #124]	; (8005bd4 <RCCEx_PLL3_Config+0x15c>)
 8005b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5a:	4a1e      	ldr	r2, [pc, #120]	; (8005bd4 <RCCEx_PLL3_Config+0x15c>)
 8005b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d106      	bne.n	8005b76 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005b68:	4b1a      	ldr	r3, [pc, #104]	; (8005bd4 <RCCEx_PLL3_Config+0x15c>)
 8005b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6c:	4a19      	ldr	r2, [pc, #100]	; (8005bd4 <RCCEx_PLL3_Config+0x15c>)
 8005b6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b74:	e00f      	b.n	8005b96 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d106      	bne.n	8005b8a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005b7c:	4b15      	ldr	r3, [pc, #84]	; (8005bd4 <RCCEx_PLL3_Config+0x15c>)
 8005b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b80:	4a14      	ldr	r2, [pc, #80]	; (8005bd4 <RCCEx_PLL3_Config+0x15c>)
 8005b82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005b86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b88:	e005      	b.n	8005b96 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005b8a:	4b12      	ldr	r3, [pc, #72]	; (8005bd4 <RCCEx_PLL3_Config+0x15c>)
 8005b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8e:	4a11      	ldr	r2, [pc, #68]	; (8005bd4 <RCCEx_PLL3_Config+0x15c>)
 8005b90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005b96:	4b0f      	ldr	r3, [pc, #60]	; (8005bd4 <RCCEx_PLL3_Config+0x15c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a0e      	ldr	r2, [pc, #56]	; (8005bd4 <RCCEx_PLL3_Config+0x15c>)
 8005b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ba0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ba2:	f7fc f995 	bl	8001ed0 <HAL_GetTick>
 8005ba6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ba8:	e008      	b.n	8005bbc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005baa:	f7fc f991 	bl	8001ed0 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d901      	bls.n	8005bbc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e006      	b.n	8005bca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005bbc:	4b05      	ldr	r3, [pc, #20]	; (8005bd4 <RCCEx_PLL3_Config+0x15c>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d0f0      	beq.n	8005baa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	58024400 	.word	0x58024400
 8005bd8:	ffff0007 	.word	0xffff0007

08005bdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e049      	b.n	8005c82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d106      	bne.n	8005c08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7fb fdd2 	bl	80017ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	3304      	adds	r3, #4
 8005c18:	4619      	mov	r1, r3
 8005c1a:	4610      	mov	r0, r2
 8005c1c:	f000 fb26 	bl	800626c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
	...

08005c8c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e08f      	b.n	8005dc0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d106      	bne.n	8005cba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7fb fd29 	bl	800170c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2202      	movs	r2, #2
 8005cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6899      	ldr	r1, [r3, #8]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	4b3e      	ldr	r3, [pc, #248]	; (8005dc8 <HAL_TIM_Encoder_Init+0x13c>)
 8005cce:	400b      	ands	r3, r1
 8005cd0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	3304      	adds	r3, #4
 8005cda:	4619      	mov	r1, r3
 8005cdc:	4610      	mov	r0, r2
 8005cde:	f000 fac5 	bl	800626c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	4b31      	ldr	r3, [pc, #196]	; (8005dcc <HAL_TIM_Encoder_Init+0x140>)
 8005d08:	4013      	ands	r3, r2
 8005d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	689a      	ldr	r2, [r3, #8]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	021b      	lsls	r3, r3, #8
 8005d16:	4313      	orrs	r3, r2
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	4b2b      	ldr	r3, [pc, #172]	; (8005dd0 <HAL_TIM_Encoder_Init+0x144>)
 8005d22:	4013      	ands	r3, r2
 8005d24:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	4b2a      	ldr	r3, [pc, #168]	; (8005dd4 <HAL_TIM_Encoder_Init+0x148>)
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	68da      	ldr	r2, [r3, #12]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	021b      	lsls	r3, r3, #8
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	011a      	lsls	r2, r3, #4
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	031b      	lsls	r3, r3, #12
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005d5a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005d62:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	011b      	lsls	r3, r3, #4
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3718      	adds	r7, #24
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	fffebff8 	.word	0xfffebff8
 8005dcc:	fffffcfc 	.word	0xfffffcfc
 8005dd0:	fffff3f3 	.word	0xfffff3f3
 8005dd4:	ffff0f0f 	.word	0xffff0f0f

08005dd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d122      	bne.n	8005e34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f003 0302 	and.w	r3, r3, #2
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d11b      	bne.n	8005e34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f06f 0202 	mvn.w	r2, #2
 8005e04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	f003 0303 	and.w	r3, r3, #3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d003      	beq.n	8005e22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fa08 	bl	8006230 <HAL_TIM_IC_CaptureCallback>
 8005e20:	e005      	b.n	8005e2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f9fa 	bl	800621c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 fa0b 	bl	8006244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	f003 0304 	and.w	r3, r3, #4
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	d122      	bne.n	8005e88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	f003 0304 	and.w	r3, r3, #4
 8005e4c:	2b04      	cmp	r3, #4
 8005e4e:	d11b      	bne.n	8005e88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f06f 0204 	mvn.w	r2, #4
 8005e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f9de 	bl	8006230 <HAL_TIM_IC_CaptureCallback>
 8005e74:	e005      	b.n	8005e82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f9d0 	bl	800621c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 f9e1 	bl	8006244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	f003 0308 	and.w	r3, r3, #8
 8005e92:	2b08      	cmp	r3, #8
 8005e94:	d122      	bne.n	8005edc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f003 0308 	and.w	r3, r3, #8
 8005ea0:	2b08      	cmp	r3, #8
 8005ea2:	d11b      	bne.n	8005edc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f06f 0208 	mvn.w	r2, #8
 8005eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2204      	movs	r2, #4
 8005eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	f003 0303 	and.w	r3, r3, #3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d003      	beq.n	8005eca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f9b4 	bl	8006230 <HAL_TIM_IC_CaptureCallback>
 8005ec8:	e005      	b.n	8005ed6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f9a6 	bl	800621c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 f9b7 	bl	8006244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	f003 0310 	and.w	r3, r3, #16
 8005ee6:	2b10      	cmp	r3, #16
 8005ee8:	d122      	bne.n	8005f30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	f003 0310 	and.w	r3, r3, #16
 8005ef4:	2b10      	cmp	r3, #16
 8005ef6:	d11b      	bne.n	8005f30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f06f 0210 	mvn.w	r2, #16
 8005f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2208      	movs	r2, #8
 8005f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d003      	beq.n	8005f1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f98a 	bl	8006230 <HAL_TIM_IC_CaptureCallback>
 8005f1c:	e005      	b.n	8005f2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f97c 	bl	800621c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f98d 	bl	8006244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d10e      	bne.n	8005f5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f003 0301 	and.w	r3, r3, #1
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d107      	bne.n	8005f5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f06f 0201 	mvn.w	r2, #1
 8005f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f956 	bl	8006208 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f66:	2b80      	cmp	r3, #128	; 0x80
 8005f68:	d10e      	bne.n	8005f88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f74:	2b80      	cmp	r3, #128	; 0x80
 8005f76:	d107      	bne.n	8005f88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fb42 	bl	800660c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f96:	d10e      	bne.n	8005fb6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fa2:	2b80      	cmp	r3, #128	; 0x80
 8005fa4:	d107      	bne.n	8005fb6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 fb35 	bl	8006620 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc0:	2b40      	cmp	r3, #64	; 0x40
 8005fc2:	d10e      	bne.n	8005fe2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fce:	2b40      	cmp	r3, #64	; 0x40
 8005fd0:	d107      	bne.n	8005fe2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 f93b 	bl	8006258 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	f003 0320 	and.w	r3, r3, #32
 8005fec:	2b20      	cmp	r3, #32
 8005fee:	d10e      	bne.n	800600e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f003 0320 	and.w	r3, r3, #32
 8005ffa:	2b20      	cmp	r3, #32
 8005ffc:	d107      	bne.n	800600e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f06f 0220 	mvn.w	r2, #32
 8006006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 faf5 	bl	80065f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800600e:	bf00      	nop
 8006010:	3708      	adds	r7, #8
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
	...

08006018 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006022:	2300      	movs	r3, #0
 8006024:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800602c:	2b01      	cmp	r3, #1
 800602e:	d101      	bne.n	8006034 <HAL_TIM_ConfigClockSource+0x1c>
 8006030:	2302      	movs	r3, #2
 8006032:	e0dc      	b.n	80061ee <HAL_TIM_ConfigClockSource+0x1d6>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2202      	movs	r2, #2
 8006040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	4b6a      	ldr	r3, [pc, #424]	; (80061f8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006050:	4013      	ands	r3, r2
 8006052:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800605a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a64      	ldr	r2, [pc, #400]	; (80061fc <HAL_TIM_ConfigClockSource+0x1e4>)
 800606a:	4293      	cmp	r3, r2
 800606c:	f000 80a9 	beq.w	80061c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006070:	4a62      	ldr	r2, [pc, #392]	; (80061fc <HAL_TIM_ConfigClockSource+0x1e4>)
 8006072:	4293      	cmp	r3, r2
 8006074:	f200 80ae 	bhi.w	80061d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006078:	4a61      	ldr	r2, [pc, #388]	; (8006200 <HAL_TIM_ConfigClockSource+0x1e8>)
 800607a:	4293      	cmp	r3, r2
 800607c:	f000 80a1 	beq.w	80061c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006080:	4a5f      	ldr	r2, [pc, #380]	; (8006200 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006082:	4293      	cmp	r3, r2
 8006084:	f200 80a6 	bhi.w	80061d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006088:	4a5e      	ldr	r2, [pc, #376]	; (8006204 <HAL_TIM_ConfigClockSource+0x1ec>)
 800608a:	4293      	cmp	r3, r2
 800608c:	f000 8099 	beq.w	80061c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006090:	4a5c      	ldr	r2, [pc, #368]	; (8006204 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006092:	4293      	cmp	r3, r2
 8006094:	f200 809e 	bhi.w	80061d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006098:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800609c:	f000 8091 	beq.w	80061c2 <HAL_TIM_ConfigClockSource+0x1aa>
 80060a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80060a4:	f200 8096 	bhi.w	80061d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80060a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060ac:	f000 8089 	beq.w	80061c2 <HAL_TIM_ConfigClockSource+0x1aa>
 80060b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060b4:	f200 808e 	bhi.w	80061d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80060b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060bc:	d03e      	beq.n	800613c <HAL_TIM_ConfigClockSource+0x124>
 80060be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060c2:	f200 8087 	bhi.w	80061d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80060c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ca:	f000 8086 	beq.w	80061da <HAL_TIM_ConfigClockSource+0x1c2>
 80060ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d2:	d87f      	bhi.n	80061d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80060d4:	2b70      	cmp	r3, #112	; 0x70
 80060d6:	d01a      	beq.n	800610e <HAL_TIM_ConfigClockSource+0xf6>
 80060d8:	2b70      	cmp	r3, #112	; 0x70
 80060da:	d87b      	bhi.n	80061d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80060dc:	2b60      	cmp	r3, #96	; 0x60
 80060de:	d050      	beq.n	8006182 <HAL_TIM_ConfigClockSource+0x16a>
 80060e0:	2b60      	cmp	r3, #96	; 0x60
 80060e2:	d877      	bhi.n	80061d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80060e4:	2b50      	cmp	r3, #80	; 0x50
 80060e6:	d03c      	beq.n	8006162 <HAL_TIM_ConfigClockSource+0x14a>
 80060e8:	2b50      	cmp	r3, #80	; 0x50
 80060ea:	d873      	bhi.n	80061d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80060ec:	2b40      	cmp	r3, #64	; 0x40
 80060ee:	d058      	beq.n	80061a2 <HAL_TIM_ConfigClockSource+0x18a>
 80060f0:	2b40      	cmp	r3, #64	; 0x40
 80060f2:	d86f      	bhi.n	80061d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80060f4:	2b30      	cmp	r3, #48	; 0x30
 80060f6:	d064      	beq.n	80061c2 <HAL_TIM_ConfigClockSource+0x1aa>
 80060f8:	2b30      	cmp	r3, #48	; 0x30
 80060fa:	d86b      	bhi.n	80061d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80060fc:	2b20      	cmp	r3, #32
 80060fe:	d060      	beq.n	80061c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006100:	2b20      	cmp	r3, #32
 8006102:	d867      	bhi.n	80061d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006104:	2b00      	cmp	r3, #0
 8006106:	d05c      	beq.n	80061c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006108:	2b10      	cmp	r3, #16
 800610a:	d05a      	beq.n	80061c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800610c:	e062      	b.n	80061d4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6818      	ldr	r0, [r3, #0]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	6899      	ldr	r1, [r3, #8]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	685a      	ldr	r2, [r3, #4]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	f000 f9bd 	bl	800649c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006130:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	609a      	str	r2, [r3, #8]
      break;
 800613a:	e04f      	b.n	80061dc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6818      	ldr	r0, [r3, #0]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	6899      	ldr	r1, [r3, #8]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685a      	ldr	r2, [r3, #4]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f000 f9a6 	bl	800649c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689a      	ldr	r2, [r3, #8]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800615e:	609a      	str	r2, [r3, #8]
      break;
 8006160:	e03c      	b.n	80061dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6818      	ldr	r0, [r3, #0]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	6859      	ldr	r1, [r3, #4]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	461a      	mov	r2, r3
 8006170:	f000 f916 	bl	80063a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2150      	movs	r1, #80	; 0x50
 800617a:	4618      	mov	r0, r3
 800617c:	f000 f970 	bl	8006460 <TIM_ITRx_SetConfig>
      break;
 8006180:	e02c      	b.n	80061dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6818      	ldr	r0, [r3, #0]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	6859      	ldr	r1, [r3, #4]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	461a      	mov	r2, r3
 8006190:	f000 f935 	bl	80063fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2160      	movs	r1, #96	; 0x60
 800619a:	4618      	mov	r0, r3
 800619c:	f000 f960 	bl	8006460 <TIM_ITRx_SetConfig>
      break;
 80061a0:	e01c      	b.n	80061dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6818      	ldr	r0, [r3, #0]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	6859      	ldr	r1, [r3, #4]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	461a      	mov	r2, r3
 80061b0:	f000 f8f6 	bl	80063a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2140      	movs	r1, #64	; 0x40
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 f950 	bl	8006460 <TIM_ITRx_SetConfig>
      break;
 80061c0:	e00c      	b.n	80061dc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4619      	mov	r1, r3
 80061cc:	4610      	mov	r0, r2
 80061ce:	f000 f947 	bl	8006460 <TIM_ITRx_SetConfig>
      break;
 80061d2:	e003      	b.n	80061dc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	73fb      	strb	r3, [r7, #15]
      break;
 80061d8:	e000      	b.n	80061dc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80061da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	ffceff88 	.word	0xffceff88
 80061fc:	00100040 	.word	0x00100040
 8006200:	00100030 	.word	0x00100030
 8006204:	00100020 	.word	0x00100020

08006208 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a40      	ldr	r2, [pc, #256]	; (8006380 <TIM_Base_SetConfig+0x114>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d013      	beq.n	80062ac <TIM_Base_SetConfig+0x40>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800628a:	d00f      	beq.n	80062ac <TIM_Base_SetConfig+0x40>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a3d      	ldr	r2, [pc, #244]	; (8006384 <TIM_Base_SetConfig+0x118>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d00b      	beq.n	80062ac <TIM_Base_SetConfig+0x40>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a3c      	ldr	r2, [pc, #240]	; (8006388 <TIM_Base_SetConfig+0x11c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d007      	beq.n	80062ac <TIM_Base_SetConfig+0x40>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a3b      	ldr	r2, [pc, #236]	; (800638c <TIM_Base_SetConfig+0x120>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d003      	beq.n	80062ac <TIM_Base_SetConfig+0x40>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a3a      	ldr	r2, [pc, #232]	; (8006390 <TIM_Base_SetConfig+0x124>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d108      	bne.n	80062be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a2f      	ldr	r2, [pc, #188]	; (8006380 <TIM_Base_SetConfig+0x114>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d01f      	beq.n	8006306 <TIM_Base_SetConfig+0x9a>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062cc:	d01b      	beq.n	8006306 <TIM_Base_SetConfig+0x9a>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a2c      	ldr	r2, [pc, #176]	; (8006384 <TIM_Base_SetConfig+0x118>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d017      	beq.n	8006306 <TIM_Base_SetConfig+0x9a>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a2b      	ldr	r2, [pc, #172]	; (8006388 <TIM_Base_SetConfig+0x11c>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d013      	beq.n	8006306 <TIM_Base_SetConfig+0x9a>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a2a      	ldr	r2, [pc, #168]	; (800638c <TIM_Base_SetConfig+0x120>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d00f      	beq.n	8006306 <TIM_Base_SetConfig+0x9a>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a29      	ldr	r2, [pc, #164]	; (8006390 <TIM_Base_SetConfig+0x124>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d00b      	beq.n	8006306 <TIM_Base_SetConfig+0x9a>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a28      	ldr	r2, [pc, #160]	; (8006394 <TIM_Base_SetConfig+0x128>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d007      	beq.n	8006306 <TIM_Base_SetConfig+0x9a>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a27      	ldr	r2, [pc, #156]	; (8006398 <TIM_Base_SetConfig+0x12c>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d003      	beq.n	8006306 <TIM_Base_SetConfig+0x9a>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a26      	ldr	r2, [pc, #152]	; (800639c <TIM_Base_SetConfig+0x130>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d108      	bne.n	8006318 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800630c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	4313      	orrs	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	4313      	orrs	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	689a      	ldr	r2, [r3, #8]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a10      	ldr	r2, [pc, #64]	; (8006380 <TIM_Base_SetConfig+0x114>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d00f      	beq.n	8006364 <TIM_Base_SetConfig+0xf8>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a12      	ldr	r2, [pc, #72]	; (8006390 <TIM_Base_SetConfig+0x124>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d00b      	beq.n	8006364 <TIM_Base_SetConfig+0xf8>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a11      	ldr	r2, [pc, #68]	; (8006394 <TIM_Base_SetConfig+0x128>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d007      	beq.n	8006364 <TIM_Base_SetConfig+0xf8>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a10      	ldr	r2, [pc, #64]	; (8006398 <TIM_Base_SetConfig+0x12c>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d003      	beq.n	8006364 <TIM_Base_SetConfig+0xf8>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a0f      	ldr	r2, [pc, #60]	; (800639c <TIM_Base_SetConfig+0x130>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d103      	bne.n	800636c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	691a      	ldr	r2, [r3, #16]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	615a      	str	r2, [r3, #20]
}
 8006372:	bf00      	nop
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	40010000 	.word	0x40010000
 8006384:	40000400 	.word	0x40000400
 8006388:	40000800 	.word	0x40000800
 800638c:	40000c00 	.word	0x40000c00
 8006390:	40010400 	.word	0x40010400
 8006394:	40014000 	.word	0x40014000
 8006398:	40014400 	.word	0x40014400
 800639c:	40014800 	.word	0x40014800

080063a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b087      	sub	sp, #28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6a1b      	ldr	r3, [r3, #32]
 80063b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	f023 0201 	bic.w	r2, r3, #1
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	011b      	lsls	r3, r3, #4
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f023 030a 	bic.w	r3, r3, #10
 80063dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	621a      	str	r2, [r3, #32]
}
 80063f2:	bf00      	nop
 80063f4:	371c      	adds	r7, #28
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063fe:	b480      	push	{r7}
 8006400:	b087      	sub	sp, #28
 8006402:	af00      	add	r7, sp, #0
 8006404:	60f8      	str	r0, [r7, #12]
 8006406:	60b9      	str	r1, [r7, #8]
 8006408:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	f023 0210 	bic.w	r2, r3, #16
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6a1b      	ldr	r3, [r3, #32]
 8006420:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006428:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	031b      	lsls	r3, r3, #12
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	4313      	orrs	r3, r2
 8006432:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800643a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	011b      	lsls	r3, r3, #4
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	4313      	orrs	r3, r2
 8006444:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	621a      	str	r2, [r3, #32]
}
 8006452:	bf00      	nop
 8006454:	371c      	adds	r7, #28
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
	...

08006460 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	4b09      	ldr	r3, [pc, #36]	; (8006498 <TIM_ITRx_SetConfig+0x38>)
 8006474:	4013      	ands	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006478:	683a      	ldr	r2, [r7, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	4313      	orrs	r3, r2
 800647e:	f043 0307 	orr.w	r3, r3, #7
 8006482:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	609a      	str	r2, [r3, #8]
}
 800648a:	bf00      	nop
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	ffcfff8f 	.word	0xffcfff8f

0800649c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800649c:	b480      	push	{r7}
 800649e:	b087      	sub	sp, #28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
 80064a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	021a      	lsls	r2, r3, #8
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	431a      	orrs	r2, r3
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	609a      	str	r2, [r3, #8]
}
 80064d0:	bf00      	nop
 80064d2:	371c      	adds	r7, #28
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d101      	bne.n	80064f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064f0:	2302      	movs	r3, #2
 80064f2:	e06d      	b.n	80065d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2202      	movs	r2, #2
 8006500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a30      	ldr	r2, [pc, #192]	; (80065dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d004      	beq.n	8006528 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a2f      	ldr	r2, [pc, #188]	; (80065e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d108      	bne.n	800653a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800652e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	4313      	orrs	r3, r2
 8006538:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006540:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	4313      	orrs	r3, r2
 800654a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a20      	ldr	r2, [pc, #128]	; (80065dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d022      	beq.n	80065a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006566:	d01d      	beq.n	80065a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a1d      	ldr	r2, [pc, #116]	; (80065e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d018      	beq.n	80065a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a1c      	ldr	r2, [pc, #112]	; (80065e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d013      	beq.n	80065a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a1a      	ldr	r2, [pc, #104]	; (80065ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d00e      	beq.n	80065a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a15      	ldr	r2, [pc, #84]	; (80065e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d009      	beq.n	80065a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a16      	ldr	r2, [pc, #88]	; (80065f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d004      	beq.n	80065a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a15      	ldr	r2, [pc, #84]	; (80065f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d10c      	bne.n	80065be <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr
 80065dc:	40010000 	.word	0x40010000
 80065e0:	40010400 	.word	0x40010400
 80065e4:	40000400 	.word	0x40000400
 80065e8:	40000800 	.word	0x40000800
 80065ec:	40000c00 	.word	0x40000c00
 80065f0:	40001800 	.word	0x40001800
 80065f4:	40014000 	.word	0x40014000

080065f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e042      	b.n	80066cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800664c:	2b00      	cmp	r3, #0
 800664e:	d106      	bne.n	800665e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7fb f8ef 	bl	800183c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2224      	movs	r2, #36	; 0x24
 8006662:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f022 0201 	bic.w	r2, r2, #1
 8006674:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fce0 	bl	800703c <UART_SetConfig>
 800667c:	4603      	mov	r3, r0
 800667e:	2b01      	cmp	r3, #1
 8006680:	d101      	bne.n	8006686 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e022      	b.n	80066cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668a:	2b00      	cmp	r3, #0
 800668c:	d002      	beq.n	8006694 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f001 fb40 	bl	8007d14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	685a      	ldr	r2, [r3, #4]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689a      	ldr	r2, [r3, #8]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f042 0201 	orr.w	r2, r2, #1
 80066c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f001 fbc7 	bl	8007e58 <UART_CheckIdleState>
 80066ca:	4603      	mov	r3, r0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3708      	adds	r7, #8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b08a      	sub	sp, #40	; 0x28
 80066d8:	af02      	add	r7, sp, #8
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	603b      	str	r3, [r7, #0]
 80066e0:	4613      	mov	r3, r2
 80066e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ea:	2b20      	cmp	r3, #32
 80066ec:	d17b      	bne.n	80067e6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d002      	beq.n	80066fa <HAL_UART_Transmit+0x26>
 80066f4:	88fb      	ldrh	r3, [r7, #6]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d101      	bne.n	80066fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e074      	b.n	80067e8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2221      	movs	r2, #33	; 0x21
 800670a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800670e:	f7fb fbdf 	bl	8001ed0 <HAL_GetTick>
 8006712:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	88fa      	ldrh	r2, [r7, #6]
 8006718:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	88fa      	ldrh	r2, [r7, #6]
 8006720:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800672c:	d108      	bne.n	8006740 <HAL_UART_Transmit+0x6c>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d104      	bne.n	8006740 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006736:	2300      	movs	r3, #0
 8006738:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	61bb      	str	r3, [r7, #24]
 800673e:	e003      	b.n	8006748 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006744:	2300      	movs	r3, #0
 8006746:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006748:	e030      	b.n	80067ac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	9300      	str	r3, [sp, #0]
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	2200      	movs	r2, #0
 8006752:	2180      	movs	r1, #128	; 0x80
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f001 fc29 	bl	8007fac <UART_WaitOnFlagUntilTimeout>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d005      	beq.n	800676c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2220      	movs	r2, #32
 8006764:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e03d      	b.n	80067e8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10b      	bne.n	800678a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	461a      	mov	r2, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006780:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	3302      	adds	r3, #2
 8006786:	61bb      	str	r3, [r7, #24]
 8006788:	e007      	b.n	800679a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	781a      	ldrb	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	3301      	adds	r3, #1
 8006798:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	3b01      	subs	r3, #1
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1c8      	bne.n	800674a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	2200      	movs	r2, #0
 80067c0:	2140      	movs	r1, #64	; 0x40
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f001 fbf2 	bl	8007fac <UART_WaitOnFlagUntilTimeout>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d005      	beq.n	80067da <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2220      	movs	r2, #32
 80067d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e006      	b.n	80067e8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2220      	movs	r2, #32
 80067de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	e000      	b.n	80067e8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80067e6:	2302      	movs	r3, #2
  }
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3720      	adds	r7, #32
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b08a      	sub	sp, #40	; 0x28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	4613      	mov	r3, r2
 80067fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006804:	2b20      	cmp	r3, #32
 8006806:	d137      	bne.n	8006878 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d002      	beq.n	8006814 <HAL_UART_Receive_IT+0x24>
 800680e:	88fb      	ldrh	r3, [r7, #6]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d101      	bne.n	8006818 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e030      	b.n	800687a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a18      	ldr	r2, [pc, #96]	; (8006884 <HAL_UART_Receive_IT+0x94>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d01f      	beq.n	8006868 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d018      	beq.n	8006868 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	e853 3f00 	ldrex	r3, [r3]
 8006842:	613b      	str	r3, [r7, #16]
   return(result);
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800684a:	627b      	str	r3, [r7, #36]	; 0x24
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	461a      	mov	r2, r3
 8006852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006854:	623b      	str	r3, [r7, #32]
 8006856:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006858:	69f9      	ldr	r1, [r7, #28]
 800685a:	6a3a      	ldr	r2, [r7, #32]
 800685c:	e841 2300 	strex	r3, r2, [r1]
 8006860:	61bb      	str	r3, [r7, #24]
   return(result);
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1e6      	bne.n	8006836 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006868:	88fb      	ldrh	r3, [r7, #6]
 800686a:	461a      	mov	r2, r3
 800686c:	68b9      	ldr	r1, [r7, #8]
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f001 fc04 	bl	800807c <UART_Start_Receive_IT>
 8006874:	4603      	mov	r3, r0
 8006876:	e000      	b.n	800687a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006878:	2302      	movs	r3, #2
  }
}
 800687a:	4618      	mov	r0, r3
 800687c:	3728      	adds	r7, #40	; 0x28
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	58000c00 	.word	0x58000c00

08006888 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b0ba      	sub	sp, #232	; 0xe8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80068ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80068b2:	f640 030f 	movw	r3, #2063	; 0x80f
 80068b6:	4013      	ands	r3, r2
 80068b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80068bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d11b      	bne.n	80068fc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80068c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068c8:	f003 0320 	and.w	r3, r3, #32
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d015      	beq.n	80068fc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80068d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068d4:	f003 0320 	and.w	r3, r3, #32
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d105      	bne.n	80068e8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80068dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d009      	beq.n	80068fc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f000 8377 	beq.w	8006fe0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	4798      	blx	r3
      }
      return;
 80068fa:	e371      	b.n	8006fe0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80068fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 8123 	beq.w	8006b4c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006906:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800690a:	4b8d      	ldr	r3, [pc, #564]	; (8006b40 <HAL_UART_IRQHandler+0x2b8>)
 800690c:	4013      	ands	r3, r2
 800690e:	2b00      	cmp	r3, #0
 8006910:	d106      	bne.n	8006920 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006912:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006916:	4b8b      	ldr	r3, [pc, #556]	; (8006b44 <HAL_UART_IRQHandler+0x2bc>)
 8006918:	4013      	ands	r3, r2
 800691a:	2b00      	cmp	r3, #0
 800691c:	f000 8116 	beq.w	8006b4c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b00      	cmp	r3, #0
 800692a:	d011      	beq.n	8006950 <HAL_UART_IRQHandler+0xc8>
 800692c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00b      	beq.n	8006950 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2201      	movs	r2, #1
 800693e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006946:	f043 0201 	orr.w	r2, r3, #1
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006954:	f003 0302 	and.w	r3, r3, #2
 8006958:	2b00      	cmp	r3, #0
 800695a:	d011      	beq.n	8006980 <HAL_UART_IRQHandler+0xf8>
 800695c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00b      	beq.n	8006980 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2202      	movs	r2, #2
 800696e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006976:	f043 0204 	orr.w	r2, r3, #4
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006984:	f003 0304 	and.w	r3, r3, #4
 8006988:	2b00      	cmp	r3, #0
 800698a:	d011      	beq.n	80069b0 <HAL_UART_IRQHandler+0x128>
 800698c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00b      	beq.n	80069b0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2204      	movs	r2, #4
 800699e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a6:	f043 0202 	orr.w	r2, r3, #2
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80069b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069b4:	f003 0308 	and.w	r3, r3, #8
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d017      	beq.n	80069ec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80069bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069c0:	f003 0320 	and.w	r3, r3, #32
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d105      	bne.n	80069d4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80069c8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80069cc:	4b5c      	ldr	r3, [pc, #368]	; (8006b40 <HAL_UART_IRQHandler+0x2b8>)
 80069ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00b      	beq.n	80069ec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2208      	movs	r2, #8
 80069da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069e2:	f043 0208 	orr.w	r2, r3, #8
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80069ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d012      	beq.n	8006a1e <HAL_UART_IRQHandler+0x196>
 80069f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00c      	beq.n	8006a1e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a14:	f043 0220 	orr.w	r2, r3, #32
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 82dd 	beq.w	8006fe4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a2e:	f003 0320 	and.w	r3, r3, #32
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d013      	beq.n	8006a5e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a3a:	f003 0320 	and.w	r3, r3, #32
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d105      	bne.n	8006a4e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d007      	beq.n	8006a5e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a72:	2b40      	cmp	r3, #64	; 0x40
 8006a74:	d005      	beq.n	8006a82 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d054      	beq.n	8006b2c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f001 fc1c 	bl	80082c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a92:	2b40      	cmp	r3, #64	; 0x40
 8006a94:	d146      	bne.n	8006b24 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	3308      	adds	r3, #8
 8006a9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006aa4:	e853 3f00 	ldrex	r3, [r3]
 8006aa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006aac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ab0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ab4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	3308      	adds	r3, #8
 8006abe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006ac2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006ac6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006ace:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006ad2:	e841 2300 	strex	r3, r2, [r1]
 8006ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ada:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1d9      	bne.n	8006a96 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d017      	beq.n	8006b1c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006af2:	4a15      	ldr	r2, [pc, #84]	; (8006b48 <HAL_UART_IRQHandler+0x2c0>)
 8006af4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7fb fe65 	bl	80027cc <HAL_DMA_Abort_IT>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d019      	beq.n	8006b3c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006b16:	4610      	mov	r0, r2
 8006b18:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b1a:	e00f      	b.n	8006b3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 fa77 	bl	8007010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b22:	e00b      	b.n	8006b3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 fa73 	bl	8007010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b2a:	e007      	b.n	8006b3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fa6f 	bl	8007010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006b3a:	e253      	b.n	8006fe4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b3c:	bf00      	nop
    return;
 8006b3e:	e251      	b.n	8006fe4 <HAL_UART_IRQHandler+0x75c>
 8006b40:	10000001 	.word	0x10000001
 8006b44:	04000120 	.word	0x04000120
 8006b48:	0800838d 	.word	0x0800838d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	f040 81e7 	bne.w	8006f24 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b5a:	f003 0310 	and.w	r3, r3, #16
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f000 81e0 	beq.w	8006f24 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b68:	f003 0310 	and.w	r3, r3, #16
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 81d9 	beq.w	8006f24 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2210      	movs	r2, #16
 8006b78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b84:	2b40      	cmp	r3, #64	; 0x40
 8006b86:	f040 8151 	bne.w	8006e2c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a96      	ldr	r2, [pc, #600]	; (8006dec <HAL_UART_IRQHandler+0x564>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d068      	beq.n	8006c6a <HAL_UART_IRQHandler+0x3e2>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a93      	ldr	r2, [pc, #588]	; (8006df0 <HAL_UART_IRQHandler+0x568>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d061      	beq.n	8006c6a <HAL_UART_IRQHandler+0x3e2>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a91      	ldr	r2, [pc, #580]	; (8006df4 <HAL_UART_IRQHandler+0x56c>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d05a      	beq.n	8006c6a <HAL_UART_IRQHandler+0x3e2>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a8e      	ldr	r2, [pc, #568]	; (8006df8 <HAL_UART_IRQHandler+0x570>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d053      	beq.n	8006c6a <HAL_UART_IRQHandler+0x3e2>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a8c      	ldr	r2, [pc, #560]	; (8006dfc <HAL_UART_IRQHandler+0x574>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d04c      	beq.n	8006c6a <HAL_UART_IRQHandler+0x3e2>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a89      	ldr	r2, [pc, #548]	; (8006e00 <HAL_UART_IRQHandler+0x578>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d045      	beq.n	8006c6a <HAL_UART_IRQHandler+0x3e2>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a87      	ldr	r2, [pc, #540]	; (8006e04 <HAL_UART_IRQHandler+0x57c>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d03e      	beq.n	8006c6a <HAL_UART_IRQHandler+0x3e2>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a84      	ldr	r2, [pc, #528]	; (8006e08 <HAL_UART_IRQHandler+0x580>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d037      	beq.n	8006c6a <HAL_UART_IRQHandler+0x3e2>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a82      	ldr	r2, [pc, #520]	; (8006e0c <HAL_UART_IRQHandler+0x584>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d030      	beq.n	8006c6a <HAL_UART_IRQHandler+0x3e2>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a7f      	ldr	r2, [pc, #508]	; (8006e10 <HAL_UART_IRQHandler+0x588>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d029      	beq.n	8006c6a <HAL_UART_IRQHandler+0x3e2>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a7d      	ldr	r2, [pc, #500]	; (8006e14 <HAL_UART_IRQHandler+0x58c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d022      	beq.n	8006c6a <HAL_UART_IRQHandler+0x3e2>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a7a      	ldr	r2, [pc, #488]	; (8006e18 <HAL_UART_IRQHandler+0x590>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d01b      	beq.n	8006c6a <HAL_UART_IRQHandler+0x3e2>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a78      	ldr	r2, [pc, #480]	; (8006e1c <HAL_UART_IRQHandler+0x594>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d014      	beq.n	8006c6a <HAL_UART_IRQHandler+0x3e2>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a75      	ldr	r2, [pc, #468]	; (8006e20 <HAL_UART_IRQHandler+0x598>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d00d      	beq.n	8006c6a <HAL_UART_IRQHandler+0x3e2>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a73      	ldr	r2, [pc, #460]	; (8006e24 <HAL_UART_IRQHandler+0x59c>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d006      	beq.n	8006c6a <HAL_UART_IRQHandler+0x3e2>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a70      	ldr	r2, [pc, #448]	; (8006e28 <HAL_UART_IRQHandler+0x5a0>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d106      	bne.n	8006c78 <HAL_UART_IRQHandler+0x3f0>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	e005      	b.n	8006c84 <HAL_UART_IRQHandler+0x3fc>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 81ab 	beq.w	8006fe8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	f080 81a3 	bcs.w	8006fe8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ca8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cb2:	69db      	ldr	r3, [r3, #28]
 8006cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cb8:	f000 8087 	beq.w	8006dca <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cc8:	e853 3f00 	ldrex	r3, [r3]
 8006ccc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006cd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006cd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ce6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006cea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006cf2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006cf6:	e841 2300 	strex	r3, r2, [r1]
 8006cfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006cfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1da      	bne.n	8006cbc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	3308      	adds	r3, #8
 8006d0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d10:	e853 3f00 	ldrex	r3, [r3]
 8006d14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d18:	f023 0301 	bic.w	r3, r3, #1
 8006d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	3308      	adds	r3, #8
 8006d26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006d2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d36:	e841 2300 	strex	r3, r2, [r1]
 8006d3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1e1      	bne.n	8006d06 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	3308      	adds	r3, #8
 8006d48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d4c:	e853 3f00 	ldrex	r3, [r3]
 8006d50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	3308      	adds	r3, #8
 8006d62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006d66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d6e:	e841 2300 	strex	r3, r2, [r1]
 8006d72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d1e3      	bne.n	8006d42 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2220      	movs	r2, #32
 8006d7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d90:	e853 3f00 	ldrex	r3, [r3]
 8006d94:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d98:	f023 0310 	bic.w	r3, r3, #16
 8006d9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	461a      	mov	r2, r3
 8006da6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006daa:	65bb      	str	r3, [r7, #88]	; 0x58
 8006dac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006db0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006db2:	e841 2300 	strex	r3, r2, [r1]
 8006db6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1e4      	bne.n	8006d88 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7fb f9e3 	bl	8002190 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2202      	movs	r2, #2
 8006dce:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	4619      	mov	r1, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 f91d 	bl	8007024 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006dea:	e0fd      	b.n	8006fe8 <HAL_UART_IRQHandler+0x760>
 8006dec:	40020010 	.word	0x40020010
 8006df0:	40020028 	.word	0x40020028
 8006df4:	40020040 	.word	0x40020040
 8006df8:	40020058 	.word	0x40020058
 8006dfc:	40020070 	.word	0x40020070
 8006e00:	40020088 	.word	0x40020088
 8006e04:	400200a0 	.word	0x400200a0
 8006e08:	400200b8 	.word	0x400200b8
 8006e0c:	40020410 	.word	0x40020410
 8006e10:	40020428 	.word	0x40020428
 8006e14:	40020440 	.word	0x40020440
 8006e18:	40020458 	.word	0x40020458
 8006e1c:	40020470 	.word	0x40020470
 8006e20:	40020488 	.word	0x40020488
 8006e24:	400204a0 	.word	0x400204a0
 8006e28:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 80cf 	beq.w	8006fec <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8006e4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f000 80ca 	beq.w	8006fec <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e60:	e853 3f00 	ldrex	r3, [r3]
 8006e64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	461a      	mov	r2, r3
 8006e76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8006e7c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e82:	e841 2300 	strex	r3, r2, [r1]
 8006e86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1e4      	bne.n	8006e58 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	3308      	adds	r3, #8
 8006e94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e98:	e853 3f00 	ldrex	r3, [r3]
 8006e9c:	623b      	str	r3, [r7, #32]
   return(result);
 8006e9e:	6a3a      	ldr	r2, [r7, #32]
 8006ea0:	4b55      	ldr	r3, [pc, #340]	; (8006ff8 <HAL_UART_IRQHandler+0x770>)
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	3308      	adds	r3, #8
 8006eae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006eb2:	633a      	str	r2, [r7, #48]	; 0x30
 8006eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eba:	e841 2300 	strex	r3, r2, [r1]
 8006ebe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1e3      	bne.n	8006e8e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2220      	movs	r2, #32
 8006eca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	e853 3f00 	ldrex	r3, [r3]
 8006ee6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f023 0310 	bic.w	r3, r3, #16
 8006eee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006efc:	61fb      	str	r3, [r7, #28]
 8006efe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f00:	69b9      	ldr	r1, [r7, #24]
 8006f02:	69fa      	ldr	r2, [r7, #28]
 8006f04:	e841 2300 	strex	r3, r2, [r1]
 8006f08:	617b      	str	r3, [r7, #20]
   return(result);
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1e4      	bne.n	8006eda <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2202      	movs	r2, #2
 8006f14:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f881 	bl	8007024 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f22:	e063      	b.n	8006fec <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00e      	beq.n	8006f4e <HAL_UART_IRQHandler+0x6c6>
 8006f30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d008      	beq.n	8006f4e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006f44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f001 ff7e 	bl	8008e48 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f4c:	e051      	b.n	8006ff2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d014      	beq.n	8006f84 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d105      	bne.n	8006f72 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006f66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d008      	beq.n	8006f84 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d03a      	beq.n	8006ff0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	4798      	blx	r3
    }
    return;
 8006f82:	e035      	b.n	8006ff0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d009      	beq.n	8006fa4 <HAL_UART_IRQHandler+0x71c>
 8006f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f001 fa0b 	bl	80083b8 <UART_EndTransmit_IT>
    return;
 8006fa2:	e026      	b.n	8006ff2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fa8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d009      	beq.n	8006fc4 <HAL_UART_IRQHandler+0x73c>
 8006fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fb4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f001 ff57 	bl	8008e70 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006fc2:	e016      	b.n	8006ff2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d010      	beq.n	8006ff2 <HAL_UART_IRQHandler+0x76a>
 8006fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	da0c      	bge.n	8006ff2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f001 ff3f 	bl	8008e5c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006fde:	e008      	b.n	8006ff2 <HAL_UART_IRQHandler+0x76a>
      return;
 8006fe0:	bf00      	nop
 8006fe2:	e006      	b.n	8006ff2 <HAL_UART_IRQHandler+0x76a>
    return;
 8006fe4:	bf00      	nop
 8006fe6:	e004      	b.n	8006ff2 <HAL_UART_IRQHandler+0x76a>
      return;
 8006fe8:	bf00      	nop
 8006fea:	e002      	b.n	8006ff2 <HAL_UART_IRQHandler+0x76a>
      return;
 8006fec:	bf00      	nop
 8006fee:	e000      	b.n	8006ff2 <HAL_UART_IRQHandler+0x76a>
    return;
 8006ff0:	bf00      	nop
  }
}
 8006ff2:	37e8      	adds	r7, #232	; 0xe8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	effffffe 	.word	0xeffffffe

08006ffc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	460b      	mov	r3, r1
 800702e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007030:	bf00      	nop
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800703c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007040:	b092      	sub	sp, #72	; 0x48
 8007042:	af00      	add	r7, sp, #0
 8007044:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007046:	2300      	movs	r3, #0
 8007048:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	689a      	ldr	r2, [r3, #8]
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	431a      	orrs	r2, r3
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	695b      	ldr	r3, [r3, #20]
 800705a:	431a      	orrs	r2, r3
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	69db      	ldr	r3, [r3, #28]
 8007060:	4313      	orrs	r3, r2
 8007062:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	4bbe      	ldr	r3, [pc, #760]	; (8007364 <UART_SetConfig+0x328>)
 800706c:	4013      	ands	r3, r2
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	6812      	ldr	r2, [r2, #0]
 8007072:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007074:	430b      	orrs	r3, r1
 8007076:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	68da      	ldr	r2, [r3, #12]
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	430a      	orrs	r2, r1
 800708c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4ab3      	ldr	r2, [pc, #716]	; (8007368 <UART_SetConfig+0x32c>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d004      	beq.n	80070a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070a4:	4313      	orrs	r3, r2
 80070a6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	689a      	ldr	r2, [r3, #8]
 80070ae:	4baf      	ldr	r3, [pc, #700]	; (800736c <UART_SetConfig+0x330>)
 80070b0:	4013      	ands	r3, r2
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	6812      	ldr	r2, [r2, #0]
 80070b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80070b8:	430b      	orrs	r3, r1
 80070ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c2:	f023 010f 	bic.w	r1, r3, #15
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	430a      	orrs	r2, r1
 80070d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4aa6      	ldr	r2, [pc, #664]	; (8007370 <UART_SetConfig+0x334>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d177      	bne.n	80071cc <UART_SetConfig+0x190>
 80070dc:	4ba5      	ldr	r3, [pc, #660]	; (8007374 <UART_SetConfig+0x338>)
 80070de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070e4:	2b28      	cmp	r3, #40	; 0x28
 80070e6:	d86d      	bhi.n	80071c4 <UART_SetConfig+0x188>
 80070e8:	a201      	add	r2, pc, #4	; (adr r2, 80070f0 <UART_SetConfig+0xb4>)
 80070ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ee:	bf00      	nop
 80070f0:	08007195 	.word	0x08007195
 80070f4:	080071c5 	.word	0x080071c5
 80070f8:	080071c5 	.word	0x080071c5
 80070fc:	080071c5 	.word	0x080071c5
 8007100:	080071c5 	.word	0x080071c5
 8007104:	080071c5 	.word	0x080071c5
 8007108:	080071c5 	.word	0x080071c5
 800710c:	080071c5 	.word	0x080071c5
 8007110:	0800719d 	.word	0x0800719d
 8007114:	080071c5 	.word	0x080071c5
 8007118:	080071c5 	.word	0x080071c5
 800711c:	080071c5 	.word	0x080071c5
 8007120:	080071c5 	.word	0x080071c5
 8007124:	080071c5 	.word	0x080071c5
 8007128:	080071c5 	.word	0x080071c5
 800712c:	080071c5 	.word	0x080071c5
 8007130:	080071a5 	.word	0x080071a5
 8007134:	080071c5 	.word	0x080071c5
 8007138:	080071c5 	.word	0x080071c5
 800713c:	080071c5 	.word	0x080071c5
 8007140:	080071c5 	.word	0x080071c5
 8007144:	080071c5 	.word	0x080071c5
 8007148:	080071c5 	.word	0x080071c5
 800714c:	080071c5 	.word	0x080071c5
 8007150:	080071ad 	.word	0x080071ad
 8007154:	080071c5 	.word	0x080071c5
 8007158:	080071c5 	.word	0x080071c5
 800715c:	080071c5 	.word	0x080071c5
 8007160:	080071c5 	.word	0x080071c5
 8007164:	080071c5 	.word	0x080071c5
 8007168:	080071c5 	.word	0x080071c5
 800716c:	080071c5 	.word	0x080071c5
 8007170:	080071b5 	.word	0x080071b5
 8007174:	080071c5 	.word	0x080071c5
 8007178:	080071c5 	.word	0x080071c5
 800717c:	080071c5 	.word	0x080071c5
 8007180:	080071c5 	.word	0x080071c5
 8007184:	080071c5 	.word	0x080071c5
 8007188:	080071c5 	.word	0x080071c5
 800718c:	080071c5 	.word	0x080071c5
 8007190:	080071bd 	.word	0x080071bd
 8007194:	2301      	movs	r3, #1
 8007196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800719a:	e326      	b.n	80077ea <UART_SetConfig+0x7ae>
 800719c:	2304      	movs	r3, #4
 800719e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071a2:	e322      	b.n	80077ea <UART_SetConfig+0x7ae>
 80071a4:	2308      	movs	r3, #8
 80071a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071aa:	e31e      	b.n	80077ea <UART_SetConfig+0x7ae>
 80071ac:	2310      	movs	r3, #16
 80071ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071b2:	e31a      	b.n	80077ea <UART_SetConfig+0x7ae>
 80071b4:	2320      	movs	r3, #32
 80071b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ba:	e316      	b.n	80077ea <UART_SetConfig+0x7ae>
 80071bc:	2340      	movs	r3, #64	; 0x40
 80071be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071c2:	e312      	b.n	80077ea <UART_SetConfig+0x7ae>
 80071c4:	2380      	movs	r3, #128	; 0x80
 80071c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ca:	e30e      	b.n	80077ea <UART_SetConfig+0x7ae>
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a69      	ldr	r2, [pc, #420]	; (8007378 <UART_SetConfig+0x33c>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d130      	bne.n	8007238 <UART_SetConfig+0x1fc>
 80071d6:	4b67      	ldr	r3, [pc, #412]	; (8007374 <UART_SetConfig+0x338>)
 80071d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071da:	f003 0307 	and.w	r3, r3, #7
 80071de:	2b05      	cmp	r3, #5
 80071e0:	d826      	bhi.n	8007230 <UART_SetConfig+0x1f4>
 80071e2:	a201      	add	r2, pc, #4	; (adr r2, 80071e8 <UART_SetConfig+0x1ac>)
 80071e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e8:	08007201 	.word	0x08007201
 80071ec:	08007209 	.word	0x08007209
 80071f0:	08007211 	.word	0x08007211
 80071f4:	08007219 	.word	0x08007219
 80071f8:	08007221 	.word	0x08007221
 80071fc:	08007229 	.word	0x08007229
 8007200:	2300      	movs	r3, #0
 8007202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007206:	e2f0      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007208:	2304      	movs	r3, #4
 800720a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800720e:	e2ec      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007210:	2308      	movs	r3, #8
 8007212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007216:	e2e8      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007218:	2310      	movs	r3, #16
 800721a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800721e:	e2e4      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007220:	2320      	movs	r3, #32
 8007222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007226:	e2e0      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007228:	2340      	movs	r3, #64	; 0x40
 800722a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800722e:	e2dc      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007230:	2380      	movs	r3, #128	; 0x80
 8007232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007236:	e2d8      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a4f      	ldr	r2, [pc, #316]	; (800737c <UART_SetConfig+0x340>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d130      	bne.n	80072a4 <UART_SetConfig+0x268>
 8007242:	4b4c      	ldr	r3, [pc, #304]	; (8007374 <UART_SetConfig+0x338>)
 8007244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007246:	f003 0307 	and.w	r3, r3, #7
 800724a:	2b05      	cmp	r3, #5
 800724c:	d826      	bhi.n	800729c <UART_SetConfig+0x260>
 800724e:	a201      	add	r2, pc, #4	; (adr r2, 8007254 <UART_SetConfig+0x218>)
 8007250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007254:	0800726d 	.word	0x0800726d
 8007258:	08007275 	.word	0x08007275
 800725c:	0800727d 	.word	0x0800727d
 8007260:	08007285 	.word	0x08007285
 8007264:	0800728d 	.word	0x0800728d
 8007268:	08007295 	.word	0x08007295
 800726c:	2300      	movs	r3, #0
 800726e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007272:	e2ba      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007274:	2304      	movs	r3, #4
 8007276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800727a:	e2b6      	b.n	80077ea <UART_SetConfig+0x7ae>
 800727c:	2308      	movs	r3, #8
 800727e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007282:	e2b2      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007284:	2310      	movs	r3, #16
 8007286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800728a:	e2ae      	b.n	80077ea <UART_SetConfig+0x7ae>
 800728c:	2320      	movs	r3, #32
 800728e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007292:	e2aa      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007294:	2340      	movs	r3, #64	; 0x40
 8007296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800729a:	e2a6      	b.n	80077ea <UART_SetConfig+0x7ae>
 800729c:	2380      	movs	r3, #128	; 0x80
 800729e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072a2:	e2a2      	b.n	80077ea <UART_SetConfig+0x7ae>
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a35      	ldr	r2, [pc, #212]	; (8007380 <UART_SetConfig+0x344>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d130      	bne.n	8007310 <UART_SetConfig+0x2d4>
 80072ae:	4b31      	ldr	r3, [pc, #196]	; (8007374 <UART_SetConfig+0x338>)
 80072b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b2:	f003 0307 	and.w	r3, r3, #7
 80072b6:	2b05      	cmp	r3, #5
 80072b8:	d826      	bhi.n	8007308 <UART_SetConfig+0x2cc>
 80072ba:	a201      	add	r2, pc, #4	; (adr r2, 80072c0 <UART_SetConfig+0x284>)
 80072bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c0:	080072d9 	.word	0x080072d9
 80072c4:	080072e1 	.word	0x080072e1
 80072c8:	080072e9 	.word	0x080072e9
 80072cc:	080072f1 	.word	0x080072f1
 80072d0:	080072f9 	.word	0x080072f9
 80072d4:	08007301 	.word	0x08007301
 80072d8:	2300      	movs	r3, #0
 80072da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072de:	e284      	b.n	80077ea <UART_SetConfig+0x7ae>
 80072e0:	2304      	movs	r3, #4
 80072e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072e6:	e280      	b.n	80077ea <UART_SetConfig+0x7ae>
 80072e8:	2308      	movs	r3, #8
 80072ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ee:	e27c      	b.n	80077ea <UART_SetConfig+0x7ae>
 80072f0:	2310      	movs	r3, #16
 80072f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072f6:	e278      	b.n	80077ea <UART_SetConfig+0x7ae>
 80072f8:	2320      	movs	r3, #32
 80072fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072fe:	e274      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007300:	2340      	movs	r3, #64	; 0x40
 8007302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007306:	e270      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007308:	2380      	movs	r3, #128	; 0x80
 800730a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800730e:	e26c      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a1b      	ldr	r2, [pc, #108]	; (8007384 <UART_SetConfig+0x348>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d142      	bne.n	80073a0 <UART_SetConfig+0x364>
 800731a:	4b16      	ldr	r3, [pc, #88]	; (8007374 <UART_SetConfig+0x338>)
 800731c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800731e:	f003 0307 	and.w	r3, r3, #7
 8007322:	2b05      	cmp	r3, #5
 8007324:	d838      	bhi.n	8007398 <UART_SetConfig+0x35c>
 8007326:	a201      	add	r2, pc, #4	; (adr r2, 800732c <UART_SetConfig+0x2f0>)
 8007328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732c:	08007345 	.word	0x08007345
 8007330:	0800734d 	.word	0x0800734d
 8007334:	08007355 	.word	0x08007355
 8007338:	0800735d 	.word	0x0800735d
 800733c:	08007389 	.word	0x08007389
 8007340:	08007391 	.word	0x08007391
 8007344:	2300      	movs	r3, #0
 8007346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800734a:	e24e      	b.n	80077ea <UART_SetConfig+0x7ae>
 800734c:	2304      	movs	r3, #4
 800734e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007352:	e24a      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007354:	2308      	movs	r3, #8
 8007356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800735a:	e246      	b.n	80077ea <UART_SetConfig+0x7ae>
 800735c:	2310      	movs	r3, #16
 800735e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007362:	e242      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007364:	cfff69f3 	.word	0xcfff69f3
 8007368:	58000c00 	.word	0x58000c00
 800736c:	11fff4ff 	.word	0x11fff4ff
 8007370:	40011000 	.word	0x40011000
 8007374:	58024400 	.word	0x58024400
 8007378:	40004400 	.word	0x40004400
 800737c:	40004800 	.word	0x40004800
 8007380:	40004c00 	.word	0x40004c00
 8007384:	40005000 	.word	0x40005000
 8007388:	2320      	movs	r3, #32
 800738a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800738e:	e22c      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007390:	2340      	movs	r3, #64	; 0x40
 8007392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007396:	e228      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007398:	2380      	movs	r3, #128	; 0x80
 800739a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800739e:	e224      	b.n	80077ea <UART_SetConfig+0x7ae>
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4ab1      	ldr	r2, [pc, #708]	; (800766c <UART_SetConfig+0x630>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d176      	bne.n	8007498 <UART_SetConfig+0x45c>
 80073aa:	4bb1      	ldr	r3, [pc, #708]	; (8007670 <UART_SetConfig+0x634>)
 80073ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073b2:	2b28      	cmp	r3, #40	; 0x28
 80073b4:	d86c      	bhi.n	8007490 <UART_SetConfig+0x454>
 80073b6:	a201      	add	r2, pc, #4	; (adr r2, 80073bc <UART_SetConfig+0x380>)
 80073b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073bc:	08007461 	.word	0x08007461
 80073c0:	08007491 	.word	0x08007491
 80073c4:	08007491 	.word	0x08007491
 80073c8:	08007491 	.word	0x08007491
 80073cc:	08007491 	.word	0x08007491
 80073d0:	08007491 	.word	0x08007491
 80073d4:	08007491 	.word	0x08007491
 80073d8:	08007491 	.word	0x08007491
 80073dc:	08007469 	.word	0x08007469
 80073e0:	08007491 	.word	0x08007491
 80073e4:	08007491 	.word	0x08007491
 80073e8:	08007491 	.word	0x08007491
 80073ec:	08007491 	.word	0x08007491
 80073f0:	08007491 	.word	0x08007491
 80073f4:	08007491 	.word	0x08007491
 80073f8:	08007491 	.word	0x08007491
 80073fc:	08007471 	.word	0x08007471
 8007400:	08007491 	.word	0x08007491
 8007404:	08007491 	.word	0x08007491
 8007408:	08007491 	.word	0x08007491
 800740c:	08007491 	.word	0x08007491
 8007410:	08007491 	.word	0x08007491
 8007414:	08007491 	.word	0x08007491
 8007418:	08007491 	.word	0x08007491
 800741c:	08007479 	.word	0x08007479
 8007420:	08007491 	.word	0x08007491
 8007424:	08007491 	.word	0x08007491
 8007428:	08007491 	.word	0x08007491
 800742c:	08007491 	.word	0x08007491
 8007430:	08007491 	.word	0x08007491
 8007434:	08007491 	.word	0x08007491
 8007438:	08007491 	.word	0x08007491
 800743c:	08007481 	.word	0x08007481
 8007440:	08007491 	.word	0x08007491
 8007444:	08007491 	.word	0x08007491
 8007448:	08007491 	.word	0x08007491
 800744c:	08007491 	.word	0x08007491
 8007450:	08007491 	.word	0x08007491
 8007454:	08007491 	.word	0x08007491
 8007458:	08007491 	.word	0x08007491
 800745c:	08007489 	.word	0x08007489
 8007460:	2301      	movs	r3, #1
 8007462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007466:	e1c0      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007468:	2304      	movs	r3, #4
 800746a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800746e:	e1bc      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007470:	2308      	movs	r3, #8
 8007472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007476:	e1b8      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007478:	2310      	movs	r3, #16
 800747a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800747e:	e1b4      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007480:	2320      	movs	r3, #32
 8007482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007486:	e1b0      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007488:	2340      	movs	r3, #64	; 0x40
 800748a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800748e:	e1ac      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007490:	2380      	movs	r3, #128	; 0x80
 8007492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007496:	e1a8      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a75      	ldr	r2, [pc, #468]	; (8007674 <UART_SetConfig+0x638>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d130      	bne.n	8007504 <UART_SetConfig+0x4c8>
 80074a2:	4b73      	ldr	r3, [pc, #460]	; (8007670 <UART_SetConfig+0x634>)
 80074a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074a6:	f003 0307 	and.w	r3, r3, #7
 80074aa:	2b05      	cmp	r3, #5
 80074ac:	d826      	bhi.n	80074fc <UART_SetConfig+0x4c0>
 80074ae:	a201      	add	r2, pc, #4	; (adr r2, 80074b4 <UART_SetConfig+0x478>)
 80074b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b4:	080074cd 	.word	0x080074cd
 80074b8:	080074d5 	.word	0x080074d5
 80074bc:	080074dd 	.word	0x080074dd
 80074c0:	080074e5 	.word	0x080074e5
 80074c4:	080074ed 	.word	0x080074ed
 80074c8:	080074f5 	.word	0x080074f5
 80074cc:	2300      	movs	r3, #0
 80074ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074d2:	e18a      	b.n	80077ea <UART_SetConfig+0x7ae>
 80074d4:	2304      	movs	r3, #4
 80074d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074da:	e186      	b.n	80077ea <UART_SetConfig+0x7ae>
 80074dc:	2308      	movs	r3, #8
 80074de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074e2:	e182      	b.n	80077ea <UART_SetConfig+0x7ae>
 80074e4:	2310      	movs	r3, #16
 80074e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ea:	e17e      	b.n	80077ea <UART_SetConfig+0x7ae>
 80074ec:	2320      	movs	r3, #32
 80074ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074f2:	e17a      	b.n	80077ea <UART_SetConfig+0x7ae>
 80074f4:	2340      	movs	r3, #64	; 0x40
 80074f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074fa:	e176      	b.n	80077ea <UART_SetConfig+0x7ae>
 80074fc:	2380      	movs	r3, #128	; 0x80
 80074fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007502:	e172      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a5b      	ldr	r2, [pc, #364]	; (8007678 <UART_SetConfig+0x63c>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d130      	bne.n	8007570 <UART_SetConfig+0x534>
 800750e:	4b58      	ldr	r3, [pc, #352]	; (8007670 <UART_SetConfig+0x634>)
 8007510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007512:	f003 0307 	and.w	r3, r3, #7
 8007516:	2b05      	cmp	r3, #5
 8007518:	d826      	bhi.n	8007568 <UART_SetConfig+0x52c>
 800751a:	a201      	add	r2, pc, #4	; (adr r2, 8007520 <UART_SetConfig+0x4e4>)
 800751c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007520:	08007539 	.word	0x08007539
 8007524:	08007541 	.word	0x08007541
 8007528:	08007549 	.word	0x08007549
 800752c:	08007551 	.word	0x08007551
 8007530:	08007559 	.word	0x08007559
 8007534:	08007561 	.word	0x08007561
 8007538:	2300      	movs	r3, #0
 800753a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800753e:	e154      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007540:	2304      	movs	r3, #4
 8007542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007546:	e150      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007548:	2308      	movs	r3, #8
 800754a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800754e:	e14c      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007550:	2310      	movs	r3, #16
 8007552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007556:	e148      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007558:	2320      	movs	r3, #32
 800755a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800755e:	e144      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007560:	2340      	movs	r3, #64	; 0x40
 8007562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007566:	e140      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007568:	2380      	movs	r3, #128	; 0x80
 800756a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800756e:	e13c      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a41      	ldr	r2, [pc, #260]	; (800767c <UART_SetConfig+0x640>)
 8007576:	4293      	cmp	r3, r2
 8007578:	f040 8082 	bne.w	8007680 <UART_SetConfig+0x644>
 800757c:	4b3c      	ldr	r3, [pc, #240]	; (8007670 <UART_SetConfig+0x634>)
 800757e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007580:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007584:	2b28      	cmp	r3, #40	; 0x28
 8007586:	d86d      	bhi.n	8007664 <UART_SetConfig+0x628>
 8007588:	a201      	add	r2, pc, #4	; (adr r2, 8007590 <UART_SetConfig+0x554>)
 800758a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758e:	bf00      	nop
 8007590:	08007635 	.word	0x08007635
 8007594:	08007665 	.word	0x08007665
 8007598:	08007665 	.word	0x08007665
 800759c:	08007665 	.word	0x08007665
 80075a0:	08007665 	.word	0x08007665
 80075a4:	08007665 	.word	0x08007665
 80075a8:	08007665 	.word	0x08007665
 80075ac:	08007665 	.word	0x08007665
 80075b0:	0800763d 	.word	0x0800763d
 80075b4:	08007665 	.word	0x08007665
 80075b8:	08007665 	.word	0x08007665
 80075bc:	08007665 	.word	0x08007665
 80075c0:	08007665 	.word	0x08007665
 80075c4:	08007665 	.word	0x08007665
 80075c8:	08007665 	.word	0x08007665
 80075cc:	08007665 	.word	0x08007665
 80075d0:	08007645 	.word	0x08007645
 80075d4:	08007665 	.word	0x08007665
 80075d8:	08007665 	.word	0x08007665
 80075dc:	08007665 	.word	0x08007665
 80075e0:	08007665 	.word	0x08007665
 80075e4:	08007665 	.word	0x08007665
 80075e8:	08007665 	.word	0x08007665
 80075ec:	08007665 	.word	0x08007665
 80075f0:	0800764d 	.word	0x0800764d
 80075f4:	08007665 	.word	0x08007665
 80075f8:	08007665 	.word	0x08007665
 80075fc:	08007665 	.word	0x08007665
 8007600:	08007665 	.word	0x08007665
 8007604:	08007665 	.word	0x08007665
 8007608:	08007665 	.word	0x08007665
 800760c:	08007665 	.word	0x08007665
 8007610:	08007655 	.word	0x08007655
 8007614:	08007665 	.word	0x08007665
 8007618:	08007665 	.word	0x08007665
 800761c:	08007665 	.word	0x08007665
 8007620:	08007665 	.word	0x08007665
 8007624:	08007665 	.word	0x08007665
 8007628:	08007665 	.word	0x08007665
 800762c:	08007665 	.word	0x08007665
 8007630:	0800765d 	.word	0x0800765d
 8007634:	2301      	movs	r3, #1
 8007636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800763a:	e0d6      	b.n	80077ea <UART_SetConfig+0x7ae>
 800763c:	2304      	movs	r3, #4
 800763e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007642:	e0d2      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007644:	2308      	movs	r3, #8
 8007646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800764a:	e0ce      	b.n	80077ea <UART_SetConfig+0x7ae>
 800764c:	2310      	movs	r3, #16
 800764e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007652:	e0ca      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007654:	2320      	movs	r3, #32
 8007656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800765a:	e0c6      	b.n	80077ea <UART_SetConfig+0x7ae>
 800765c:	2340      	movs	r3, #64	; 0x40
 800765e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007662:	e0c2      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007664:	2380      	movs	r3, #128	; 0x80
 8007666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800766a:	e0be      	b.n	80077ea <UART_SetConfig+0x7ae>
 800766c:	40011400 	.word	0x40011400
 8007670:	58024400 	.word	0x58024400
 8007674:	40007800 	.word	0x40007800
 8007678:	40007c00 	.word	0x40007c00
 800767c:	40011800 	.word	0x40011800
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4aad      	ldr	r2, [pc, #692]	; (800793c <UART_SetConfig+0x900>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d176      	bne.n	8007778 <UART_SetConfig+0x73c>
 800768a:	4bad      	ldr	r3, [pc, #692]	; (8007940 <UART_SetConfig+0x904>)
 800768c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800768e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007692:	2b28      	cmp	r3, #40	; 0x28
 8007694:	d86c      	bhi.n	8007770 <UART_SetConfig+0x734>
 8007696:	a201      	add	r2, pc, #4	; (adr r2, 800769c <UART_SetConfig+0x660>)
 8007698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769c:	08007741 	.word	0x08007741
 80076a0:	08007771 	.word	0x08007771
 80076a4:	08007771 	.word	0x08007771
 80076a8:	08007771 	.word	0x08007771
 80076ac:	08007771 	.word	0x08007771
 80076b0:	08007771 	.word	0x08007771
 80076b4:	08007771 	.word	0x08007771
 80076b8:	08007771 	.word	0x08007771
 80076bc:	08007749 	.word	0x08007749
 80076c0:	08007771 	.word	0x08007771
 80076c4:	08007771 	.word	0x08007771
 80076c8:	08007771 	.word	0x08007771
 80076cc:	08007771 	.word	0x08007771
 80076d0:	08007771 	.word	0x08007771
 80076d4:	08007771 	.word	0x08007771
 80076d8:	08007771 	.word	0x08007771
 80076dc:	08007751 	.word	0x08007751
 80076e0:	08007771 	.word	0x08007771
 80076e4:	08007771 	.word	0x08007771
 80076e8:	08007771 	.word	0x08007771
 80076ec:	08007771 	.word	0x08007771
 80076f0:	08007771 	.word	0x08007771
 80076f4:	08007771 	.word	0x08007771
 80076f8:	08007771 	.word	0x08007771
 80076fc:	08007759 	.word	0x08007759
 8007700:	08007771 	.word	0x08007771
 8007704:	08007771 	.word	0x08007771
 8007708:	08007771 	.word	0x08007771
 800770c:	08007771 	.word	0x08007771
 8007710:	08007771 	.word	0x08007771
 8007714:	08007771 	.word	0x08007771
 8007718:	08007771 	.word	0x08007771
 800771c:	08007761 	.word	0x08007761
 8007720:	08007771 	.word	0x08007771
 8007724:	08007771 	.word	0x08007771
 8007728:	08007771 	.word	0x08007771
 800772c:	08007771 	.word	0x08007771
 8007730:	08007771 	.word	0x08007771
 8007734:	08007771 	.word	0x08007771
 8007738:	08007771 	.word	0x08007771
 800773c:	08007769 	.word	0x08007769
 8007740:	2301      	movs	r3, #1
 8007742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007746:	e050      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007748:	2304      	movs	r3, #4
 800774a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800774e:	e04c      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007750:	2308      	movs	r3, #8
 8007752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007756:	e048      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007758:	2310      	movs	r3, #16
 800775a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800775e:	e044      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007760:	2320      	movs	r3, #32
 8007762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007766:	e040      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007768:	2340      	movs	r3, #64	; 0x40
 800776a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800776e:	e03c      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007770:	2380      	movs	r3, #128	; 0x80
 8007772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007776:	e038      	b.n	80077ea <UART_SetConfig+0x7ae>
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a71      	ldr	r2, [pc, #452]	; (8007944 <UART_SetConfig+0x908>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d130      	bne.n	80077e4 <UART_SetConfig+0x7a8>
 8007782:	4b6f      	ldr	r3, [pc, #444]	; (8007940 <UART_SetConfig+0x904>)
 8007784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007786:	f003 0307 	and.w	r3, r3, #7
 800778a:	2b05      	cmp	r3, #5
 800778c:	d826      	bhi.n	80077dc <UART_SetConfig+0x7a0>
 800778e:	a201      	add	r2, pc, #4	; (adr r2, 8007794 <UART_SetConfig+0x758>)
 8007790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007794:	080077ad 	.word	0x080077ad
 8007798:	080077b5 	.word	0x080077b5
 800779c:	080077bd 	.word	0x080077bd
 80077a0:	080077c5 	.word	0x080077c5
 80077a4:	080077cd 	.word	0x080077cd
 80077a8:	080077d5 	.word	0x080077d5
 80077ac:	2302      	movs	r3, #2
 80077ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077b2:	e01a      	b.n	80077ea <UART_SetConfig+0x7ae>
 80077b4:	2304      	movs	r3, #4
 80077b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ba:	e016      	b.n	80077ea <UART_SetConfig+0x7ae>
 80077bc:	2308      	movs	r3, #8
 80077be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077c2:	e012      	b.n	80077ea <UART_SetConfig+0x7ae>
 80077c4:	2310      	movs	r3, #16
 80077c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ca:	e00e      	b.n	80077ea <UART_SetConfig+0x7ae>
 80077cc:	2320      	movs	r3, #32
 80077ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077d2:	e00a      	b.n	80077ea <UART_SetConfig+0x7ae>
 80077d4:	2340      	movs	r3, #64	; 0x40
 80077d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077da:	e006      	b.n	80077ea <UART_SetConfig+0x7ae>
 80077dc:	2380      	movs	r3, #128	; 0x80
 80077de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077e2:	e002      	b.n	80077ea <UART_SetConfig+0x7ae>
 80077e4:	2380      	movs	r3, #128	; 0x80
 80077e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a55      	ldr	r2, [pc, #340]	; (8007944 <UART_SetConfig+0x908>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	f040 80f8 	bne.w	80079e6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80077f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80077fa:	2b20      	cmp	r3, #32
 80077fc:	dc46      	bgt.n	800788c <UART_SetConfig+0x850>
 80077fe:	2b02      	cmp	r3, #2
 8007800:	db75      	blt.n	80078ee <UART_SetConfig+0x8b2>
 8007802:	3b02      	subs	r3, #2
 8007804:	2b1e      	cmp	r3, #30
 8007806:	d872      	bhi.n	80078ee <UART_SetConfig+0x8b2>
 8007808:	a201      	add	r2, pc, #4	; (adr r2, 8007810 <UART_SetConfig+0x7d4>)
 800780a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780e:	bf00      	nop
 8007810:	08007893 	.word	0x08007893
 8007814:	080078ef 	.word	0x080078ef
 8007818:	0800789b 	.word	0x0800789b
 800781c:	080078ef 	.word	0x080078ef
 8007820:	080078ef 	.word	0x080078ef
 8007824:	080078ef 	.word	0x080078ef
 8007828:	080078ab 	.word	0x080078ab
 800782c:	080078ef 	.word	0x080078ef
 8007830:	080078ef 	.word	0x080078ef
 8007834:	080078ef 	.word	0x080078ef
 8007838:	080078ef 	.word	0x080078ef
 800783c:	080078ef 	.word	0x080078ef
 8007840:	080078ef 	.word	0x080078ef
 8007844:	080078ef 	.word	0x080078ef
 8007848:	080078bb 	.word	0x080078bb
 800784c:	080078ef 	.word	0x080078ef
 8007850:	080078ef 	.word	0x080078ef
 8007854:	080078ef 	.word	0x080078ef
 8007858:	080078ef 	.word	0x080078ef
 800785c:	080078ef 	.word	0x080078ef
 8007860:	080078ef 	.word	0x080078ef
 8007864:	080078ef 	.word	0x080078ef
 8007868:	080078ef 	.word	0x080078ef
 800786c:	080078ef 	.word	0x080078ef
 8007870:	080078ef 	.word	0x080078ef
 8007874:	080078ef 	.word	0x080078ef
 8007878:	080078ef 	.word	0x080078ef
 800787c:	080078ef 	.word	0x080078ef
 8007880:	080078ef 	.word	0x080078ef
 8007884:	080078ef 	.word	0x080078ef
 8007888:	080078e1 	.word	0x080078e1
 800788c:	2b40      	cmp	r3, #64	; 0x40
 800788e:	d02a      	beq.n	80078e6 <UART_SetConfig+0x8aa>
 8007890:	e02d      	b.n	80078ee <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007892:	f7fd fd81 	bl	8005398 <HAL_RCCEx_GetD3PCLK1Freq>
 8007896:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007898:	e02f      	b.n	80078fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800789a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800789e:	4618      	mov	r0, r3
 80078a0:	f7fd fd90 	bl	80053c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80078a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078a8:	e027      	b.n	80078fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078aa:	f107 0318 	add.w	r3, r7, #24
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7fd fedc 	bl	800566c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078b8:	e01f      	b.n	80078fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078ba:	4b21      	ldr	r3, [pc, #132]	; (8007940 <UART_SetConfig+0x904>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 0320 	and.w	r3, r3, #32
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d009      	beq.n	80078da <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80078c6:	4b1e      	ldr	r3, [pc, #120]	; (8007940 <UART_SetConfig+0x904>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	08db      	lsrs	r3, r3, #3
 80078cc:	f003 0303 	and.w	r3, r3, #3
 80078d0:	4a1d      	ldr	r2, [pc, #116]	; (8007948 <UART_SetConfig+0x90c>)
 80078d2:	fa22 f303 	lsr.w	r3, r2, r3
 80078d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80078d8:	e00f      	b.n	80078fa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80078da:	4b1b      	ldr	r3, [pc, #108]	; (8007948 <UART_SetConfig+0x90c>)
 80078dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078de:	e00c      	b.n	80078fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80078e0:	4b1a      	ldr	r3, [pc, #104]	; (800794c <UART_SetConfig+0x910>)
 80078e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078e4:	e009      	b.n	80078fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078ec:	e005      	b.n	80078fa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80078ee:	2300      	movs	r3, #0
 80078f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80078f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80078fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f000 81ee 	beq.w	8007cde <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007906:	4a12      	ldr	r2, [pc, #72]	; (8007950 <UART_SetConfig+0x914>)
 8007908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800790c:	461a      	mov	r2, r3
 800790e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007910:	fbb3 f3f2 	udiv	r3, r3, r2
 8007914:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	685a      	ldr	r2, [r3, #4]
 800791a:	4613      	mov	r3, r2
 800791c:	005b      	lsls	r3, r3, #1
 800791e:	4413      	add	r3, r2
 8007920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007922:	429a      	cmp	r2, r3
 8007924:	d305      	bcc.n	8007932 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800792c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800792e:	429a      	cmp	r2, r3
 8007930:	d910      	bls.n	8007954 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007938:	e1d1      	b.n	8007cde <UART_SetConfig+0xca2>
 800793a:	bf00      	nop
 800793c:	40011c00 	.word	0x40011c00
 8007940:	58024400 	.word	0x58024400
 8007944:	58000c00 	.word	0x58000c00
 8007948:	03d09000 	.word	0x03d09000
 800794c:	003d0900 	.word	0x003d0900
 8007950:	08009b50 	.word	0x08009b50
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007956:	2200      	movs	r2, #0
 8007958:	60bb      	str	r3, [r7, #8]
 800795a:	60fa      	str	r2, [r7, #12]
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007960:	4ac0      	ldr	r2, [pc, #768]	; (8007c64 <UART_SetConfig+0xc28>)
 8007962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007966:	b29b      	uxth	r3, r3
 8007968:	2200      	movs	r2, #0
 800796a:	603b      	str	r3, [r7, #0]
 800796c:	607a      	str	r2, [r7, #4]
 800796e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007972:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007976:	f7f8 fd13 	bl	80003a0 <__aeabi_uldivmod>
 800797a:	4602      	mov	r2, r0
 800797c:	460b      	mov	r3, r1
 800797e:	4610      	mov	r0, r2
 8007980:	4619      	mov	r1, r3
 8007982:	f04f 0200 	mov.w	r2, #0
 8007986:	f04f 0300 	mov.w	r3, #0
 800798a:	020b      	lsls	r3, r1, #8
 800798c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007990:	0202      	lsls	r2, r0, #8
 8007992:	6979      	ldr	r1, [r7, #20]
 8007994:	6849      	ldr	r1, [r1, #4]
 8007996:	0849      	lsrs	r1, r1, #1
 8007998:	2000      	movs	r0, #0
 800799a:	460c      	mov	r4, r1
 800799c:	4605      	mov	r5, r0
 800799e:	eb12 0804 	adds.w	r8, r2, r4
 80079a2:	eb43 0905 	adc.w	r9, r3, r5
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	469a      	mov	sl, r3
 80079ae:	4693      	mov	fp, r2
 80079b0:	4652      	mov	r2, sl
 80079b2:	465b      	mov	r3, fp
 80079b4:	4640      	mov	r0, r8
 80079b6:	4649      	mov	r1, r9
 80079b8:	f7f8 fcf2 	bl	80003a0 <__aeabi_uldivmod>
 80079bc:	4602      	mov	r2, r0
 80079be:	460b      	mov	r3, r1
 80079c0:	4613      	mov	r3, r2
 80079c2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079ca:	d308      	bcc.n	80079de <UART_SetConfig+0x9a2>
 80079cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079d2:	d204      	bcs.n	80079de <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079da:	60da      	str	r2, [r3, #12]
 80079dc:	e17f      	b.n	8007cde <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80079e4:	e17b      	b.n	8007cde <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	69db      	ldr	r3, [r3, #28]
 80079ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079ee:	f040 80bd 	bne.w	8007b6c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80079f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80079f6:	2b20      	cmp	r3, #32
 80079f8:	dc48      	bgt.n	8007a8c <UART_SetConfig+0xa50>
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	db7b      	blt.n	8007af6 <UART_SetConfig+0xaba>
 80079fe:	2b20      	cmp	r3, #32
 8007a00:	d879      	bhi.n	8007af6 <UART_SetConfig+0xaba>
 8007a02:	a201      	add	r2, pc, #4	; (adr r2, 8007a08 <UART_SetConfig+0x9cc>)
 8007a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a08:	08007a93 	.word	0x08007a93
 8007a0c:	08007a9b 	.word	0x08007a9b
 8007a10:	08007af7 	.word	0x08007af7
 8007a14:	08007af7 	.word	0x08007af7
 8007a18:	08007aa3 	.word	0x08007aa3
 8007a1c:	08007af7 	.word	0x08007af7
 8007a20:	08007af7 	.word	0x08007af7
 8007a24:	08007af7 	.word	0x08007af7
 8007a28:	08007ab3 	.word	0x08007ab3
 8007a2c:	08007af7 	.word	0x08007af7
 8007a30:	08007af7 	.word	0x08007af7
 8007a34:	08007af7 	.word	0x08007af7
 8007a38:	08007af7 	.word	0x08007af7
 8007a3c:	08007af7 	.word	0x08007af7
 8007a40:	08007af7 	.word	0x08007af7
 8007a44:	08007af7 	.word	0x08007af7
 8007a48:	08007ac3 	.word	0x08007ac3
 8007a4c:	08007af7 	.word	0x08007af7
 8007a50:	08007af7 	.word	0x08007af7
 8007a54:	08007af7 	.word	0x08007af7
 8007a58:	08007af7 	.word	0x08007af7
 8007a5c:	08007af7 	.word	0x08007af7
 8007a60:	08007af7 	.word	0x08007af7
 8007a64:	08007af7 	.word	0x08007af7
 8007a68:	08007af7 	.word	0x08007af7
 8007a6c:	08007af7 	.word	0x08007af7
 8007a70:	08007af7 	.word	0x08007af7
 8007a74:	08007af7 	.word	0x08007af7
 8007a78:	08007af7 	.word	0x08007af7
 8007a7c:	08007af7 	.word	0x08007af7
 8007a80:	08007af7 	.word	0x08007af7
 8007a84:	08007af7 	.word	0x08007af7
 8007a88:	08007ae9 	.word	0x08007ae9
 8007a8c:	2b40      	cmp	r3, #64	; 0x40
 8007a8e:	d02e      	beq.n	8007aee <UART_SetConfig+0xab2>
 8007a90:	e031      	b.n	8007af6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a92:	f7fc fa97 	bl	8003fc4 <HAL_RCC_GetPCLK1Freq>
 8007a96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007a98:	e033      	b.n	8007b02 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a9a:	f7fc faa9 	bl	8003ff0 <HAL_RCC_GetPCLK2Freq>
 8007a9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007aa0:	e02f      	b.n	8007b02 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7fd fc8c 	bl	80053c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ab0:	e027      	b.n	8007b02 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ab2:	f107 0318 	add.w	r3, r7, #24
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7fd fdd8 	bl	800566c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ac0:	e01f      	b.n	8007b02 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ac2:	4b69      	ldr	r3, [pc, #420]	; (8007c68 <UART_SetConfig+0xc2c>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0320 	and.w	r3, r3, #32
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d009      	beq.n	8007ae2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ace:	4b66      	ldr	r3, [pc, #408]	; (8007c68 <UART_SetConfig+0xc2c>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	08db      	lsrs	r3, r3, #3
 8007ad4:	f003 0303 	and.w	r3, r3, #3
 8007ad8:	4a64      	ldr	r2, [pc, #400]	; (8007c6c <UART_SetConfig+0xc30>)
 8007ada:	fa22 f303 	lsr.w	r3, r2, r3
 8007ade:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ae0:	e00f      	b.n	8007b02 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007ae2:	4b62      	ldr	r3, [pc, #392]	; (8007c6c <UART_SetConfig+0xc30>)
 8007ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ae6:	e00c      	b.n	8007b02 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ae8:	4b61      	ldr	r3, [pc, #388]	; (8007c70 <UART_SetConfig+0xc34>)
 8007aea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007aec:	e009      	b.n	8007b02 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007af2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007af4:	e005      	b.n	8007b02 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007af6:	2300      	movs	r3, #0
 8007af8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007b00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f000 80ea 	beq.w	8007cde <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0e:	4a55      	ldr	r2, [pc, #340]	; (8007c64 <UART_SetConfig+0xc28>)
 8007b10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b14:	461a      	mov	r2, r3
 8007b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b18:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b1c:	005a      	lsls	r2, r3, #1
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	085b      	lsrs	r3, r3, #1
 8007b24:	441a      	add	r2, r3
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b2e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b32:	2b0f      	cmp	r3, #15
 8007b34:	d916      	bls.n	8007b64 <UART_SetConfig+0xb28>
 8007b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b3c:	d212      	bcs.n	8007b64 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	f023 030f 	bic.w	r3, r3, #15
 8007b46:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b4a:	085b      	lsrs	r3, r3, #1
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	f003 0307 	and.w	r3, r3, #7
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007b56:	4313      	orrs	r3, r2
 8007b58:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007b60:	60da      	str	r2, [r3, #12]
 8007b62:	e0bc      	b.n	8007cde <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007b6a:	e0b8      	b.n	8007cde <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b6c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007b70:	2b20      	cmp	r3, #32
 8007b72:	dc4b      	bgt.n	8007c0c <UART_SetConfig+0xbd0>
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f2c0 8087 	blt.w	8007c88 <UART_SetConfig+0xc4c>
 8007b7a:	2b20      	cmp	r3, #32
 8007b7c:	f200 8084 	bhi.w	8007c88 <UART_SetConfig+0xc4c>
 8007b80:	a201      	add	r2, pc, #4	; (adr r2, 8007b88 <UART_SetConfig+0xb4c>)
 8007b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b86:	bf00      	nop
 8007b88:	08007c13 	.word	0x08007c13
 8007b8c:	08007c1b 	.word	0x08007c1b
 8007b90:	08007c89 	.word	0x08007c89
 8007b94:	08007c89 	.word	0x08007c89
 8007b98:	08007c23 	.word	0x08007c23
 8007b9c:	08007c89 	.word	0x08007c89
 8007ba0:	08007c89 	.word	0x08007c89
 8007ba4:	08007c89 	.word	0x08007c89
 8007ba8:	08007c33 	.word	0x08007c33
 8007bac:	08007c89 	.word	0x08007c89
 8007bb0:	08007c89 	.word	0x08007c89
 8007bb4:	08007c89 	.word	0x08007c89
 8007bb8:	08007c89 	.word	0x08007c89
 8007bbc:	08007c89 	.word	0x08007c89
 8007bc0:	08007c89 	.word	0x08007c89
 8007bc4:	08007c89 	.word	0x08007c89
 8007bc8:	08007c43 	.word	0x08007c43
 8007bcc:	08007c89 	.word	0x08007c89
 8007bd0:	08007c89 	.word	0x08007c89
 8007bd4:	08007c89 	.word	0x08007c89
 8007bd8:	08007c89 	.word	0x08007c89
 8007bdc:	08007c89 	.word	0x08007c89
 8007be0:	08007c89 	.word	0x08007c89
 8007be4:	08007c89 	.word	0x08007c89
 8007be8:	08007c89 	.word	0x08007c89
 8007bec:	08007c89 	.word	0x08007c89
 8007bf0:	08007c89 	.word	0x08007c89
 8007bf4:	08007c89 	.word	0x08007c89
 8007bf8:	08007c89 	.word	0x08007c89
 8007bfc:	08007c89 	.word	0x08007c89
 8007c00:	08007c89 	.word	0x08007c89
 8007c04:	08007c89 	.word	0x08007c89
 8007c08:	08007c7b 	.word	0x08007c7b
 8007c0c:	2b40      	cmp	r3, #64	; 0x40
 8007c0e:	d037      	beq.n	8007c80 <UART_SetConfig+0xc44>
 8007c10:	e03a      	b.n	8007c88 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c12:	f7fc f9d7 	bl	8003fc4 <HAL_RCC_GetPCLK1Freq>
 8007c16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007c18:	e03c      	b.n	8007c94 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c1a:	f7fc f9e9 	bl	8003ff0 <HAL_RCC_GetPCLK2Freq>
 8007c1e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007c20:	e038      	b.n	8007c94 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7fd fbcc 	bl	80053c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c30:	e030      	b.n	8007c94 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c32:	f107 0318 	add.w	r3, r7, #24
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fd fd18 	bl	800566c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c40:	e028      	b.n	8007c94 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c42:	4b09      	ldr	r3, [pc, #36]	; (8007c68 <UART_SetConfig+0xc2c>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 0320 	and.w	r3, r3, #32
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d012      	beq.n	8007c74 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c4e:	4b06      	ldr	r3, [pc, #24]	; (8007c68 <UART_SetConfig+0xc2c>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	08db      	lsrs	r3, r3, #3
 8007c54:	f003 0303 	and.w	r3, r3, #3
 8007c58:	4a04      	ldr	r2, [pc, #16]	; (8007c6c <UART_SetConfig+0xc30>)
 8007c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c60:	e018      	b.n	8007c94 <UART_SetConfig+0xc58>
 8007c62:	bf00      	nop
 8007c64:	08009b50 	.word	0x08009b50
 8007c68:	58024400 	.word	0x58024400
 8007c6c:	03d09000 	.word	0x03d09000
 8007c70:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007c74:	4b24      	ldr	r3, [pc, #144]	; (8007d08 <UART_SetConfig+0xccc>)
 8007c76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c78:	e00c      	b.n	8007c94 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c7a:	4b24      	ldr	r3, [pc, #144]	; (8007d0c <UART_SetConfig+0xcd0>)
 8007c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c7e:	e009      	b.n	8007c94 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c86:	e005      	b.n	8007c94 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007c92:	bf00      	nop
    }

    if (pclk != 0U)
 8007c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d021      	beq.n	8007cde <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9e:	4a1c      	ldr	r2, [pc, #112]	; (8007d10 <UART_SetConfig+0xcd4>)
 8007ca0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ca8:	fbb3 f2f2 	udiv	r2, r3, r2
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	085b      	lsrs	r3, r3, #1
 8007cb2:	441a      	add	r2, r3
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cbc:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc0:	2b0f      	cmp	r3, #15
 8007cc2:	d909      	bls.n	8007cd8 <UART_SetConfig+0xc9c>
 8007cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cca:	d205      	bcs.n	8007cd8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	60da      	str	r2, [r3, #12]
 8007cd6:	e002      	b.n	8007cde <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007cfa:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3748      	adds	r7, #72	; 0x48
 8007d02:	46bd      	mov	sp, r7
 8007d04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d08:	03d09000 	.word	0x03d09000
 8007d0c:	003d0900 	.word	0x003d0900
 8007d10:	08009b50 	.word	0x08009b50

08007d14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d20:	f003 0301 	and.w	r3, r3, #1
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00a      	beq.n	8007d3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d42:	f003 0302 	and.w	r3, r3, #2
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00a      	beq.n	8007d60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	430a      	orrs	r2, r1
 8007d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d64:	f003 0304 	and.w	r3, r3, #4
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00a      	beq.n	8007d82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	430a      	orrs	r2, r1
 8007d80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d86:	f003 0308 	and.w	r3, r3, #8
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00a      	beq.n	8007da4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	430a      	orrs	r2, r1
 8007da2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da8:	f003 0310 	and.w	r3, r3, #16
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00a      	beq.n	8007dc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	430a      	orrs	r2, r1
 8007dc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dca:	f003 0320 	and.w	r3, r3, #32
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00a      	beq.n	8007de8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	430a      	orrs	r2, r1
 8007de6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d01a      	beq.n	8007e2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	430a      	orrs	r2, r1
 8007e08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e12:	d10a      	bne.n	8007e2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	430a      	orrs	r2, r1
 8007e28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00a      	beq.n	8007e4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	430a      	orrs	r2, r1
 8007e4a:	605a      	str	r2, [r3, #4]
  }
}
 8007e4c:	bf00      	nop
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b098      	sub	sp, #96	; 0x60
 8007e5c:	af02      	add	r7, sp, #8
 8007e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e68:	f7fa f832 	bl	8001ed0 <HAL_GetTick>
 8007e6c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0308 	and.w	r3, r3, #8
 8007e78:	2b08      	cmp	r3, #8
 8007e7a:	d12f      	bne.n	8007edc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e80:	9300      	str	r3, [sp, #0]
 8007e82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e84:	2200      	movs	r2, #0
 8007e86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f88e 	bl	8007fac <UART_WaitOnFlagUntilTimeout>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d022      	beq.n	8007edc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9e:	e853 3f00 	ldrex	r3, [r3]
 8007ea2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007eaa:	653b      	str	r3, [r7, #80]	; 0x50
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eb4:	647b      	str	r3, [r7, #68]	; 0x44
 8007eb6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007eba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ebc:	e841 2300 	strex	r3, r2, [r1]
 8007ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1e6      	bne.n	8007e96 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2220      	movs	r2, #32
 8007ecc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ed8:	2303      	movs	r3, #3
 8007eda:	e063      	b.n	8007fa4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 0304 	and.w	r3, r3, #4
 8007ee6:	2b04      	cmp	r3, #4
 8007ee8:	d149      	bne.n	8007f7e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007eea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 f857 	bl	8007fac <UART_WaitOnFlagUntilTimeout>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d03c      	beq.n	8007f7e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	e853 3f00 	ldrex	r3, [r3]
 8007f10:	623b      	str	r3, [r7, #32]
   return(result);
 8007f12:	6a3b      	ldr	r3, [r7, #32]
 8007f14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	461a      	mov	r2, r3
 8007f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f22:	633b      	str	r3, [r7, #48]	; 0x30
 8007f24:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f2a:	e841 2300 	strex	r3, r2, [r1]
 8007f2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1e6      	bne.n	8007f04 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	3308      	adds	r3, #8
 8007f3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	e853 3f00 	ldrex	r3, [r3]
 8007f44:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f023 0301 	bic.w	r3, r3, #1
 8007f4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	3308      	adds	r3, #8
 8007f54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f56:	61fa      	str	r2, [r7, #28]
 8007f58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5a:	69b9      	ldr	r1, [r7, #24]
 8007f5c:	69fa      	ldr	r2, [r7, #28]
 8007f5e:	e841 2300 	strex	r3, r2, [r1]
 8007f62:	617b      	str	r3, [r7, #20]
   return(result);
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1e5      	bne.n	8007f36 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2220      	movs	r2, #32
 8007f6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	e012      	b.n	8007fa4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2220      	movs	r2, #32
 8007f82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2220      	movs	r2, #32
 8007f8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3758      	adds	r7, #88	; 0x58
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	603b      	str	r3, [r7, #0]
 8007fb8:	4613      	mov	r3, r2
 8007fba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fbc:	e049      	b.n	8008052 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc4:	d045      	beq.n	8008052 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fc6:	f7f9 ff83 	bl	8001ed0 <HAL_GetTick>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	1ad3      	subs	r3, r2, r3
 8007fd0:	69ba      	ldr	r2, [r7, #24]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d302      	bcc.n	8007fdc <UART_WaitOnFlagUntilTimeout+0x30>
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d101      	bne.n	8007fe0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	e048      	b.n	8008072 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f003 0304 	and.w	r3, r3, #4
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d031      	beq.n	8008052 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	69db      	ldr	r3, [r3, #28]
 8007ff4:	f003 0308 	and.w	r3, r3, #8
 8007ff8:	2b08      	cmp	r3, #8
 8007ffa:	d110      	bne.n	800801e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2208      	movs	r2, #8
 8008002:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f000 f95b 	bl	80082c0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2208      	movs	r2, #8
 800800e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e029      	b.n	8008072 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	69db      	ldr	r3, [r3, #28]
 8008024:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008028:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800802c:	d111      	bne.n	8008052 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008036:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f000 f941 	bl	80082c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2220      	movs	r2, #32
 8008042:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800804e:	2303      	movs	r3, #3
 8008050:	e00f      	b.n	8008072 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	69da      	ldr	r2, [r3, #28]
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	4013      	ands	r3, r2
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	429a      	cmp	r2, r3
 8008060:	bf0c      	ite	eq
 8008062:	2301      	moveq	r3, #1
 8008064:	2300      	movne	r3, #0
 8008066:	b2db      	uxtb	r3, r3
 8008068:	461a      	mov	r2, r3
 800806a:	79fb      	ldrb	r3, [r7, #7]
 800806c:	429a      	cmp	r2, r3
 800806e:	d0a6      	beq.n	8007fbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
	...

0800807c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800807c:	b480      	push	{r7}
 800807e:	b0a3      	sub	sp, #140	; 0x8c
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	4613      	mov	r3, r2
 8008088:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	68ba      	ldr	r2, [r7, #8]
 800808e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	88fa      	ldrh	r2, [r7, #6]
 8008094:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	88fa      	ldrh	r2, [r7, #6]
 800809c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ae:	d10e      	bne.n	80080ce <UART_Start_Receive_IT+0x52>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d105      	bne.n	80080c4 <UART_Start_Receive_IT+0x48>
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f240 12ff 	movw	r2, #511	; 0x1ff
 80080be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80080c2:	e02d      	b.n	8008120 <UART_Start_Receive_IT+0xa4>
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	22ff      	movs	r2, #255	; 0xff
 80080c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80080cc:	e028      	b.n	8008120 <UART_Start_Receive_IT+0xa4>
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d10d      	bne.n	80080f2 <UART_Start_Receive_IT+0x76>
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d104      	bne.n	80080e8 <UART_Start_Receive_IT+0x6c>
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	22ff      	movs	r2, #255	; 0xff
 80080e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80080e6:	e01b      	b.n	8008120 <UART_Start_Receive_IT+0xa4>
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	227f      	movs	r2, #127	; 0x7f
 80080ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80080f0:	e016      	b.n	8008120 <UART_Start_Receive_IT+0xa4>
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080fa:	d10d      	bne.n	8008118 <UART_Start_Receive_IT+0x9c>
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d104      	bne.n	800810e <UART_Start_Receive_IT+0x92>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	227f      	movs	r2, #127	; 0x7f
 8008108:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800810c:	e008      	b.n	8008120 <UART_Start_Receive_IT+0xa4>
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	223f      	movs	r2, #63	; 0x3f
 8008112:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008116:	e003      	b.n	8008120 <UART_Start_Receive_IT+0xa4>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2200      	movs	r2, #0
 800811c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2200      	movs	r2, #0
 8008124:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2222      	movs	r2, #34	; 0x22
 800812c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	3308      	adds	r3, #8
 8008136:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008138:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800813a:	e853 3f00 	ldrex	r3, [r3]
 800813e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008140:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008142:	f043 0301 	orr.w	r3, r3, #1
 8008146:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	3308      	adds	r3, #8
 8008150:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008154:	673a      	str	r2, [r7, #112]	; 0x70
 8008156:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008158:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800815a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800815c:	e841 2300 	strex	r3, r2, [r1]
 8008160:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008162:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1e3      	bne.n	8008130 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800816c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008170:	d14f      	bne.n	8008212 <UART_Start_Receive_IT+0x196>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008178:	88fa      	ldrh	r2, [r7, #6]
 800817a:	429a      	cmp	r2, r3
 800817c:	d349      	bcc.n	8008212 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008186:	d107      	bne.n	8008198 <UART_Start_Receive_IT+0x11c>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d103      	bne.n	8008198 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	4a47      	ldr	r2, [pc, #284]	; (80082b0 <UART_Start_Receive_IT+0x234>)
 8008194:	675a      	str	r2, [r3, #116]	; 0x74
 8008196:	e002      	b.n	800819e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	4a46      	ldr	r2, [pc, #280]	; (80082b4 <UART_Start_Receive_IT+0x238>)
 800819c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d01a      	beq.n	80081dc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081ae:	e853 3f00 	ldrex	r3, [r3]
 80081b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80081b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	461a      	mov	r2, r3
 80081c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80081c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081ca:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081cc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80081d0:	e841 2300 	strex	r3, r2, [r1]
 80081d4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80081d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1e4      	bne.n	80081a6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	3308      	adds	r3, #8
 80081e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e6:	e853 3f00 	ldrex	r3, [r3]
 80081ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	3308      	adds	r3, #8
 80081fa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80081fc:	64ba      	str	r2, [r7, #72]	; 0x48
 80081fe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008200:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008202:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008204:	e841 2300 	strex	r3, r2, [r1]
 8008208:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800820a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800820c:	2b00      	cmp	r3, #0
 800820e:	d1e5      	bne.n	80081dc <UART_Start_Receive_IT+0x160>
 8008210:	e046      	b.n	80082a0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800821a:	d107      	bne.n	800822c <UART_Start_Receive_IT+0x1b0>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d103      	bne.n	800822c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	4a24      	ldr	r2, [pc, #144]	; (80082b8 <UART_Start_Receive_IT+0x23c>)
 8008228:	675a      	str	r2, [r3, #116]	; 0x74
 800822a:	e002      	b.n	8008232 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	4a23      	ldr	r2, [pc, #140]	; (80082bc <UART_Start_Receive_IT+0x240>)
 8008230:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d019      	beq.n	800826e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008242:	e853 3f00 	ldrex	r3, [r3]
 8008246:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800824e:	677b      	str	r3, [r7, #116]	; 0x74
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	461a      	mov	r2, r3
 8008256:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008258:	637b      	str	r3, [r7, #52]	; 0x34
 800825a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800825e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008260:	e841 2300 	strex	r3, r2, [r1]
 8008264:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008268:	2b00      	cmp	r3, #0
 800826a:	d1e6      	bne.n	800823a <UART_Start_Receive_IT+0x1be>
 800826c:	e018      	b.n	80082a0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	e853 3f00 	ldrex	r3, [r3]
 800827a:	613b      	str	r3, [r7, #16]
   return(result);
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	f043 0320 	orr.w	r3, r3, #32
 8008282:	67bb      	str	r3, [r7, #120]	; 0x78
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	461a      	mov	r2, r3
 800828a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800828c:	623b      	str	r3, [r7, #32]
 800828e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008290:	69f9      	ldr	r1, [r7, #28]
 8008292:	6a3a      	ldr	r2, [r7, #32]
 8008294:	e841 2300 	strex	r3, r2, [r1]
 8008298:	61bb      	str	r3, [r7, #24]
   return(result);
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d1e6      	bne.n	800826e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	378c      	adds	r7, #140	; 0x8c
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	08008ae1 	.word	0x08008ae1
 80082b4:	08008781 	.word	0x08008781
 80082b8:	080085c9 	.word	0x080085c9
 80082bc:	08008411 	.word	0x08008411

080082c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b095      	sub	sp, #84	; 0x54
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082d0:	e853 3f00 	ldrex	r3, [r3]
 80082d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80082d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	461a      	mov	r2, r3
 80082e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082e6:	643b      	str	r3, [r7, #64]	; 0x40
 80082e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80082ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082ee:	e841 2300 	strex	r3, r2, [r1]
 80082f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d1e6      	bne.n	80082c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	3308      	adds	r3, #8
 8008300:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008302:	6a3b      	ldr	r3, [r7, #32]
 8008304:	e853 3f00 	ldrex	r3, [r3]
 8008308:	61fb      	str	r3, [r7, #28]
   return(result);
 800830a:	69fa      	ldr	r2, [r7, #28]
 800830c:	4b1e      	ldr	r3, [pc, #120]	; (8008388 <UART_EndRxTransfer+0xc8>)
 800830e:	4013      	ands	r3, r2
 8008310:	64bb      	str	r3, [r7, #72]	; 0x48
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	3308      	adds	r3, #8
 8008318:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800831a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800831c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008322:	e841 2300 	strex	r3, r2, [r1]
 8008326:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	2b00      	cmp	r3, #0
 800832c:	d1e5      	bne.n	80082fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008332:	2b01      	cmp	r3, #1
 8008334:	d118      	bne.n	8008368 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	e853 3f00 	ldrex	r3, [r3]
 8008342:	60bb      	str	r3, [r7, #8]
   return(result);
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	f023 0310 	bic.w	r3, r3, #16
 800834a:	647b      	str	r3, [r7, #68]	; 0x44
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	461a      	mov	r2, r3
 8008352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008354:	61bb      	str	r3, [r7, #24]
 8008356:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008358:	6979      	ldr	r1, [r7, #20]
 800835a:	69ba      	ldr	r2, [r7, #24]
 800835c:	e841 2300 	strex	r3, r2, [r1]
 8008360:	613b      	str	r3, [r7, #16]
   return(result);
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d1e6      	bne.n	8008336 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2220      	movs	r2, #32
 800836c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800837c:	bf00      	nop
 800837e:	3754      	adds	r7, #84	; 0x54
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr
 8008388:	effffffe 	.word	0xeffffffe

0800838c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008398:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f7fe fe30 	bl	8007010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083b0:	bf00      	nop
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b088      	sub	sp, #32
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	e853 3f00 	ldrex	r3, [r3]
 80083cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083d4:	61fb      	str	r3, [r7, #28]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	461a      	mov	r2, r3
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	61bb      	str	r3, [r7, #24]
 80083e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e2:	6979      	ldr	r1, [r7, #20]
 80083e4:	69ba      	ldr	r2, [r7, #24]
 80083e6:	e841 2300 	strex	r3, r2, [r1]
 80083ea:	613b      	str	r3, [r7, #16]
   return(result);
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1e6      	bne.n	80083c0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2220      	movs	r2, #32
 80083f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f7fe fdfb 	bl	8006ffc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008406:	bf00      	nop
 8008408:	3720      	adds	r7, #32
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
	...

08008410 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b09c      	sub	sp, #112	; 0x70
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800841e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008428:	2b22      	cmp	r3, #34	; 0x22
 800842a:	f040 80be 	bne.w	80085aa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008434:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008438:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800843c:	b2d9      	uxtb	r1, r3
 800843e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008442:	b2da      	uxtb	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008448:	400a      	ands	r2, r1
 800844a:	b2d2      	uxtb	r2, r2
 800844c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008452:	1c5a      	adds	r2, r3, #1
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800845e:	b29b      	uxth	r3, r3
 8008460:	3b01      	subs	r3, #1
 8008462:	b29a      	uxth	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008470:	b29b      	uxth	r3, r3
 8008472:	2b00      	cmp	r3, #0
 8008474:	f040 80a1 	bne.w	80085ba <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800847e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008480:	e853 3f00 	ldrex	r3, [r3]
 8008484:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008488:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800848c:	66bb      	str	r3, [r7, #104]	; 0x68
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	461a      	mov	r2, r3
 8008494:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008496:	65bb      	str	r3, [r7, #88]	; 0x58
 8008498:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800849c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800849e:	e841 2300 	strex	r3, r2, [r1]
 80084a2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80084a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1e6      	bne.n	8008478 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	3308      	adds	r3, #8
 80084b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b4:	e853 3f00 	ldrex	r3, [r3]
 80084b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084bc:	f023 0301 	bic.w	r3, r3, #1
 80084c0:	667b      	str	r3, [r7, #100]	; 0x64
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	3308      	adds	r3, #8
 80084c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80084ca:	647a      	str	r2, [r7, #68]	; 0x44
 80084cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80084d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084d2:	e841 2300 	strex	r3, r2, [r1]
 80084d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80084d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d1e5      	bne.n	80084aa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2220      	movs	r2, #32
 80084e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a33      	ldr	r2, [pc, #204]	; (80085c4 <UART_RxISR_8BIT+0x1b4>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d01f      	beq.n	800853c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008506:	2b00      	cmp	r3, #0
 8008508:	d018      	beq.n	800853c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008512:	e853 3f00 	ldrex	r3, [r3]
 8008516:	623b      	str	r3, [r7, #32]
   return(result);
 8008518:	6a3b      	ldr	r3, [r7, #32]
 800851a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800851e:	663b      	str	r3, [r7, #96]	; 0x60
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	461a      	mov	r2, r3
 8008526:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008528:	633b      	str	r3, [r7, #48]	; 0x30
 800852a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800852e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008530:	e841 2300 	strex	r3, r2, [r1]
 8008534:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1e6      	bne.n	800850a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008540:	2b01      	cmp	r3, #1
 8008542:	d12e      	bne.n	80085a2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	e853 3f00 	ldrex	r3, [r3]
 8008556:	60fb      	str	r3, [r7, #12]
   return(result);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f023 0310 	bic.w	r3, r3, #16
 800855e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	461a      	mov	r2, r3
 8008566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008568:	61fb      	str	r3, [r7, #28]
 800856a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856c:	69b9      	ldr	r1, [r7, #24]
 800856e:	69fa      	ldr	r2, [r7, #28]
 8008570:	e841 2300 	strex	r3, r2, [r1]
 8008574:	617b      	str	r3, [r7, #20]
   return(result);
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d1e6      	bne.n	800854a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	69db      	ldr	r3, [r3, #28]
 8008582:	f003 0310 	and.w	r3, r3, #16
 8008586:	2b10      	cmp	r3, #16
 8008588:	d103      	bne.n	8008592 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2210      	movs	r2, #16
 8008590:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008598:	4619      	mov	r1, r3
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f7fe fd42 	bl	8007024 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80085a0:	e00b      	b.n	80085ba <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7f8 f9e4 	bl	8000970 <HAL_UART_RxCpltCallback>
}
 80085a8:	e007      	b.n	80085ba <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	699a      	ldr	r2, [r3, #24]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f042 0208 	orr.w	r2, r2, #8
 80085b8:	619a      	str	r2, [r3, #24]
}
 80085ba:	bf00      	nop
 80085bc:	3770      	adds	r7, #112	; 0x70
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	58000c00 	.word	0x58000c00

080085c8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b09c      	sub	sp, #112	; 0x70
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80085d6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085e0:	2b22      	cmp	r3, #34	; 0x22
 80085e2:	f040 80be 	bne.w	8008762 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085f4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80085f6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80085fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80085fe:	4013      	ands	r3, r2
 8008600:	b29a      	uxth	r2, r3
 8008602:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008604:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800860a:	1c9a      	adds	r2, r3, #2
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008616:	b29b      	uxth	r3, r3
 8008618:	3b01      	subs	r3, #1
 800861a:	b29a      	uxth	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008628:	b29b      	uxth	r3, r3
 800862a:	2b00      	cmp	r3, #0
 800862c:	f040 80a1 	bne.w	8008772 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008638:	e853 3f00 	ldrex	r3, [r3]
 800863c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800863e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008640:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008644:	667b      	str	r3, [r7, #100]	; 0x64
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	461a      	mov	r2, r3
 800864c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800864e:	657b      	str	r3, [r7, #84]	; 0x54
 8008650:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008652:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008654:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008656:	e841 2300 	strex	r3, r2, [r1]
 800865a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800865c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800865e:	2b00      	cmp	r3, #0
 8008660:	d1e6      	bne.n	8008630 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	3308      	adds	r3, #8
 8008668:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800866c:	e853 3f00 	ldrex	r3, [r3]
 8008670:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008674:	f023 0301 	bic.w	r3, r3, #1
 8008678:	663b      	str	r3, [r7, #96]	; 0x60
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	3308      	adds	r3, #8
 8008680:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008682:	643a      	str	r2, [r7, #64]	; 0x40
 8008684:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008686:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008688:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800868a:	e841 2300 	strex	r3, r2, [r1]
 800868e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1e5      	bne.n	8008662 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2220      	movs	r2, #32
 800869a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a33      	ldr	r2, [pc, #204]	; (800877c <UART_RxISR_16BIT+0x1b4>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d01f      	beq.n	80086f4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d018      	beq.n	80086f4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	e853 3f00 	ldrex	r3, [r3]
 80086ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80086d0:	69fb      	ldr	r3, [r7, #28]
 80086d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80086d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	461a      	mov	r2, r3
 80086de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086e2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086e8:	e841 2300 	strex	r3, r2, [r1]
 80086ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d1e6      	bne.n	80086c2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d12e      	bne.n	800875a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	e853 3f00 	ldrex	r3, [r3]
 800870e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	f023 0310 	bic.w	r3, r3, #16
 8008716:	65bb      	str	r3, [r7, #88]	; 0x58
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	461a      	mov	r2, r3
 800871e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008720:	61bb      	str	r3, [r7, #24]
 8008722:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008724:	6979      	ldr	r1, [r7, #20]
 8008726:	69ba      	ldr	r2, [r7, #24]
 8008728:	e841 2300 	strex	r3, r2, [r1]
 800872c:	613b      	str	r3, [r7, #16]
   return(result);
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1e6      	bne.n	8008702 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	f003 0310 	and.w	r3, r3, #16
 800873e:	2b10      	cmp	r3, #16
 8008740:	d103      	bne.n	800874a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2210      	movs	r2, #16
 8008748:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008750:	4619      	mov	r1, r3
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f7fe fc66 	bl	8007024 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008758:	e00b      	b.n	8008772 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f7f8 f908 	bl	8000970 <HAL_UART_RxCpltCallback>
}
 8008760:	e007      	b.n	8008772 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	699a      	ldr	r2, [r3, #24]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f042 0208 	orr.w	r2, r2, #8
 8008770:	619a      	str	r2, [r3, #24]
}
 8008772:	bf00      	nop
 8008774:	3770      	adds	r7, #112	; 0x70
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	58000c00 	.word	0x58000c00

08008780 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b0ac      	sub	sp, #176	; 0xb0
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800878e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	69db      	ldr	r3, [r3, #28]
 8008798:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087b6:	2b22      	cmp	r3, #34	; 0x22
 80087b8:	f040 8180 	bne.w	8008abc <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80087c2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80087c6:	e123      	b.n	8008a10 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ce:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80087d2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80087d6:	b2d9      	uxtb	r1, r3
 80087d8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80087dc:	b2da      	uxtb	r2, r3
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087e2:	400a      	ands	r2, r1
 80087e4:	b2d2      	uxtb	r2, r2
 80087e6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ec:	1c5a      	adds	r2, r3, #1
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	3b01      	subs	r3, #1
 80087fc:	b29a      	uxth	r2, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	69db      	ldr	r3, [r3, #28]
 800880a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800880e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008812:	f003 0307 	and.w	r3, r3, #7
 8008816:	2b00      	cmp	r3, #0
 8008818:	d053      	beq.n	80088c2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800881a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800881e:	f003 0301 	and.w	r3, r3, #1
 8008822:	2b00      	cmp	r3, #0
 8008824:	d011      	beq.n	800884a <UART_RxISR_8BIT_FIFOEN+0xca>
 8008826:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800882a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00b      	beq.n	800884a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2201      	movs	r2, #1
 8008838:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008840:	f043 0201 	orr.w	r2, r3, #1
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800884a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800884e:	f003 0302 	and.w	r3, r3, #2
 8008852:	2b00      	cmp	r3, #0
 8008854:	d011      	beq.n	800887a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008856:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00b      	beq.n	800887a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2202      	movs	r2, #2
 8008868:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008870:	f043 0204 	orr.w	r2, r3, #4
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800887a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800887e:	f003 0304 	and.w	r3, r3, #4
 8008882:	2b00      	cmp	r3, #0
 8008884:	d011      	beq.n	80088aa <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008886:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800888a:	f003 0301 	and.w	r3, r3, #1
 800888e:	2b00      	cmp	r3, #0
 8008890:	d00b      	beq.n	80088aa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2204      	movs	r2, #4
 8008898:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088a0:	f043 0202 	orr.w	r2, r3, #2
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d006      	beq.n	80088c2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f7fe fbab 	bl	8007010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f040 80a0 	bne.w	8008a10 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088d8:	e853 3f00 	ldrex	r3, [r3]
 80088dc:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80088de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	461a      	mov	r2, r3
 80088ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80088f4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80088f8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80088fa:	e841 2300 	strex	r3, r2, [r1]
 80088fe:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008900:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1e4      	bne.n	80088d0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	3308      	adds	r3, #8
 800890c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008910:	e853 3f00 	ldrex	r3, [r3]
 8008914:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008916:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008918:	4b6e      	ldr	r3, [pc, #440]	; (8008ad4 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800891a:	4013      	ands	r3, r2
 800891c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	3308      	adds	r3, #8
 8008926:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800892a:	66ba      	str	r2, [r7, #104]	; 0x68
 800892c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008930:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008932:	e841 2300 	strex	r3, r2, [r1]
 8008936:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008938:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1e3      	bne.n	8008906 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2220      	movs	r2, #32
 8008942:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a60      	ldr	r2, [pc, #384]	; (8008ad8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d021      	beq.n	80089a0 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008966:	2b00      	cmp	r3, #0
 8008968:	d01a      	beq.n	80089a0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008972:	e853 3f00 	ldrex	r3, [r3]
 8008976:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800897a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800897e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	461a      	mov	r2, r3
 8008988:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800898c:	657b      	str	r3, [r7, #84]	; 0x54
 800898e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008990:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008992:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008994:	e841 2300 	strex	r3, r2, [r1]
 8008998:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800899a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800899c:	2b00      	cmp	r3, #0
 800899e:	d1e4      	bne.n	800896a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d130      	bne.n	8008a0a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b6:	e853 3f00 	ldrex	r3, [r3]
 80089ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80089bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089be:	f023 0310 	bic.w	r3, r3, #16
 80089c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	461a      	mov	r2, r3
 80089cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089d0:	643b      	str	r3, [r7, #64]	; 0x40
 80089d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80089d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089d8:	e841 2300 	strex	r3, r2, [r1]
 80089dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d1e4      	bne.n	80089ae <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	69db      	ldr	r3, [r3, #28]
 80089ea:	f003 0310 	and.w	r3, r3, #16
 80089ee:	2b10      	cmp	r3, #16
 80089f0:	d103      	bne.n	80089fa <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2210      	movs	r2, #16
 80089f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a00:	4619      	mov	r1, r3
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f7fe fb0e 	bl	8007024 <HAL_UARTEx_RxEventCallback>
 8008a08:	e002      	b.n	8008a10 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f7f7 ffb0 	bl	8000970 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008a10:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d006      	beq.n	8008a26 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8008a18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008a1c:	f003 0320 	and.w	r3, r3, #32
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f47f aed1 	bne.w	80087c8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a2c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008a30:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d049      	beq.n	8008acc <UART_RxISR_8BIT_FIFOEN+0x34c>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008a3e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d242      	bcs.n	8008acc <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	3308      	adds	r3, #8
 8008a4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4e:	6a3b      	ldr	r3, [r7, #32]
 8008a50:	e853 3f00 	ldrex	r3, [r3]
 8008a54:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	3308      	adds	r3, #8
 8008a66:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008a6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a72:	e841 2300 	strex	r3, r2, [r1]
 8008a76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d1e3      	bne.n	8008a46 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a16      	ldr	r2, [pc, #88]	; (8008adc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008a82:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	e853 3f00 	ldrex	r3, [r3]
 8008a90:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	f043 0320 	orr.w	r3, r3, #32
 8008a98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008aa6:	61bb      	str	r3, [r7, #24]
 8008aa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aaa:	6979      	ldr	r1, [r7, #20]
 8008aac:	69ba      	ldr	r2, [r7, #24]
 8008aae:	e841 2300 	strex	r3, r2, [r1]
 8008ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1e4      	bne.n	8008a84 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008aba:	e007      	b.n	8008acc <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	699a      	ldr	r2, [r3, #24]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f042 0208 	orr.w	r2, r2, #8
 8008aca:	619a      	str	r2, [r3, #24]
}
 8008acc:	bf00      	nop
 8008ace:	37b0      	adds	r7, #176	; 0xb0
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	effffffe 	.word	0xeffffffe
 8008ad8:	58000c00 	.word	0x58000c00
 8008adc:	08008411 	.word	0x08008411

08008ae0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b0ae      	sub	sp, #184	; 0xb8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008aee:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	69db      	ldr	r3, [r3, #28]
 8008af8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b16:	2b22      	cmp	r3, #34	; 0x22
 8008b18:	f040 8184 	bne.w	8008e24 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008b22:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b26:	e127      	b.n	8008d78 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008b3a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008b3e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008b42:	4013      	ands	r3, r2
 8008b44:	b29a      	uxth	r2, r3
 8008b46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b4a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b50:	1c9a      	adds	r2, r3, #2
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	69db      	ldr	r3, [r3, #28]
 8008b6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008b72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008b76:	f003 0307 	and.w	r3, r3, #7
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d053      	beq.n	8008c26 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008b7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008b82:	f003 0301 	and.w	r3, r3, #1
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d011      	beq.n	8008bae <UART_RxISR_16BIT_FIFOEN+0xce>
 8008b8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00b      	beq.n	8008bae <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ba4:	f043 0201 	orr.w	r2, r3, #1
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008bae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008bb2:	f003 0302 	and.w	r3, r3, #2
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d011      	beq.n	8008bde <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008bba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008bbe:	f003 0301 	and.w	r3, r3, #1
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d00b      	beq.n	8008bde <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2202      	movs	r2, #2
 8008bcc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bd4:	f043 0204 	orr.w	r2, r3, #4
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008bde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008be2:	f003 0304 	and.w	r3, r3, #4
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d011      	beq.n	8008c0e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008bea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008bee:	f003 0301 	and.w	r3, r3, #1
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00b      	beq.n	8008c0e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2204      	movs	r2, #4
 8008bfc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c04:	f043 0202 	orr.w	r2, r3, #2
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d006      	beq.n	8008c26 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f7fe f9f9 	bl	8007010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f040 80a2 	bne.w	8008d78 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c3c:	e853 3f00 	ldrex	r3, [r3]
 8008c40:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008c42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	461a      	mov	r2, r3
 8008c52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c5a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008c5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008c62:	e841 2300 	strex	r3, r2, [r1]
 8008c66:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008c68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d1e2      	bne.n	8008c34 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	3308      	adds	r3, #8
 8008c74:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c78:	e853 3f00 	ldrex	r3, [r3]
 8008c7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008c7e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008c80:	4b6e      	ldr	r3, [pc, #440]	; (8008e3c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8008c82:	4013      	ands	r3, r2
 8008c84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	3308      	adds	r3, #8
 8008c8e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008c92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008c94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008c98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008c9a:	e841 2300 	strex	r3, r2, [r1]
 8008c9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008ca0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d1e3      	bne.n	8008c6e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2220      	movs	r2, #32
 8008caa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a60      	ldr	r2, [pc, #384]	; (8008e40 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d021      	beq.n	8008d08 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d01a      	beq.n	8008d08 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cda:	e853 3f00 	ldrex	r3, [r3]
 8008cde:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008ce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ce2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ce6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	461a      	mov	r2, r3
 8008cf0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008cf4:	65bb      	str	r3, [r7, #88]	; 0x58
 8008cf6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008cfa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008cfc:	e841 2300 	strex	r3, r2, [r1]
 8008d00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d1e4      	bne.n	8008cd2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d130      	bne.n	8008d72 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1e:	e853 3f00 	ldrex	r3, [r3]
 8008d22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d26:	f023 0310 	bic.w	r3, r3, #16
 8008d2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	461a      	mov	r2, r3
 8008d34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008d38:	647b      	str	r3, [r7, #68]	; 0x44
 8008d3a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d40:	e841 2300 	strex	r3, r2, [r1]
 8008d44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d1e4      	bne.n	8008d16 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	69db      	ldr	r3, [r3, #28]
 8008d52:	f003 0310 	and.w	r3, r3, #16
 8008d56:	2b10      	cmp	r3, #16
 8008d58:	d103      	bne.n	8008d62 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2210      	movs	r2, #16
 8008d60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d68:	4619      	mov	r1, r3
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f7fe f95a 	bl	8007024 <HAL_UARTEx_RxEventCallback>
 8008d70:	e002      	b.n	8008d78 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f7f7 fdfc 	bl	8000970 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008d78:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d006      	beq.n	8008d8e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8008d80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008d84:	f003 0320 	and.w	r3, r3, #32
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f47f aecd 	bne.w	8008b28 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d94:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008d98:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d049      	beq.n	8008e34 <UART_RxISR_16BIT_FIFOEN+0x354>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008da6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d242      	bcs.n	8008e34 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	3308      	adds	r3, #8
 8008db4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db8:	e853 3f00 	ldrex	r3, [r3]
 8008dbc:	623b      	str	r3, [r7, #32]
   return(result);
 8008dbe:	6a3b      	ldr	r3, [r7, #32]
 8008dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	3308      	adds	r3, #8
 8008dce:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008dd2:	633a      	str	r2, [r7, #48]	; 0x30
 8008dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dda:	e841 2300 	strex	r3, r2, [r1]
 8008dde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d1e3      	bne.n	8008dae <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a16      	ldr	r2, [pc, #88]	; (8008e44 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008dea:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	e853 3f00 	ldrex	r3, [r3]
 8008df8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f043 0320 	orr.w	r3, r3, #32
 8008e00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	461a      	mov	r2, r3
 8008e0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e0e:	61fb      	str	r3, [r7, #28]
 8008e10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e12:	69b9      	ldr	r1, [r7, #24]
 8008e14:	69fa      	ldr	r2, [r7, #28]
 8008e16:	e841 2300 	strex	r3, r2, [r1]
 8008e1a:	617b      	str	r3, [r7, #20]
   return(result);
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d1e4      	bne.n	8008dec <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e22:	e007      	b.n	8008e34 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	699a      	ldr	r2, [r3, #24]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f042 0208 	orr.w	r2, r2, #8
 8008e32:	619a      	str	r2, [r3, #24]
}
 8008e34:	bf00      	nop
 8008e36:	37b8      	adds	r7, #184	; 0xb8
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	effffffe 	.word	0xeffffffe
 8008e40:	58000c00 	.word	0x58000c00
 8008e44:	080085c9 	.word	0x080085c9

08008e48 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008e50:	bf00      	nop
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008e64:	bf00      	nop
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008e78:	bf00      	nop
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b085      	sub	sp, #20
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d101      	bne.n	8008e9a <HAL_UARTEx_DisableFifoMode+0x16>
 8008e96:	2302      	movs	r3, #2
 8008e98:	e027      	b.n	8008eea <HAL_UARTEx_DisableFifoMode+0x66>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2224      	movs	r2, #36	; 0x24
 8008ea6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f022 0201 	bic.w	r2, r2, #1
 8008ec0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008ec8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2220      	movs	r2, #32
 8008edc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3714      	adds	r7, #20
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr

08008ef6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b084      	sub	sp, #16
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
 8008efe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d101      	bne.n	8008f0e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008f0a:	2302      	movs	r3, #2
 8008f0c:	e02d      	b.n	8008f6a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2201      	movs	r2, #1
 8008f12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2224      	movs	r2, #36	; 0x24
 8008f1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f022 0201 	bic.w	r2, r2, #1
 8008f34:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	683a      	ldr	r2, [r7, #0]
 8008f46:	430a      	orrs	r2, r1
 8008f48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f850 	bl	8008ff0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2220      	movs	r2, #32
 8008f5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b084      	sub	sp, #16
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
 8008f7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d101      	bne.n	8008f8a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008f86:	2302      	movs	r3, #2
 8008f88:	e02d      	b.n	8008fe6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2224      	movs	r2, #36	; 0x24
 8008f96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f022 0201 	bic.w	r2, r2, #1
 8008fb0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	683a      	ldr	r2, [r7, #0]
 8008fc2:	430a      	orrs	r2, r1
 8008fc4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 f812 	bl	8008ff0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2220      	movs	r2, #32
 8008fd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
	...

08008ff0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d108      	bne.n	8009012 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009010:	e031      	b.n	8009076 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009012:	2310      	movs	r3, #16
 8009014:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009016:	2310      	movs	r3, #16
 8009018:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	0e5b      	lsrs	r3, r3, #25
 8009022:	b2db      	uxtb	r3, r3
 8009024:	f003 0307 	and.w	r3, r3, #7
 8009028:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	0f5b      	lsrs	r3, r3, #29
 8009032:	b2db      	uxtb	r3, r3
 8009034:	f003 0307 	and.w	r3, r3, #7
 8009038:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800903a:	7bbb      	ldrb	r3, [r7, #14]
 800903c:	7b3a      	ldrb	r2, [r7, #12]
 800903e:	4911      	ldr	r1, [pc, #68]	; (8009084 <UARTEx_SetNbDataToProcess+0x94>)
 8009040:	5c8a      	ldrb	r2, [r1, r2]
 8009042:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009046:	7b3a      	ldrb	r2, [r7, #12]
 8009048:	490f      	ldr	r1, [pc, #60]	; (8009088 <UARTEx_SetNbDataToProcess+0x98>)
 800904a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800904c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009050:	b29a      	uxth	r2, r3
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009058:	7bfb      	ldrb	r3, [r7, #15]
 800905a:	7b7a      	ldrb	r2, [r7, #13]
 800905c:	4909      	ldr	r1, [pc, #36]	; (8009084 <UARTEx_SetNbDataToProcess+0x94>)
 800905e:	5c8a      	ldrb	r2, [r1, r2]
 8009060:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009064:	7b7a      	ldrb	r2, [r7, #13]
 8009066:	4908      	ldr	r1, [pc, #32]	; (8009088 <UARTEx_SetNbDataToProcess+0x98>)
 8009068:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800906a:	fb93 f3f2 	sdiv	r3, r3, r2
 800906e:	b29a      	uxth	r2, r3
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009076:	bf00      	nop
 8009078:	3714      	adds	r7, #20
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	08009b68 	.word	0x08009b68
 8009088:	08009b70 	.word	0x08009b70

0800908c <__errno>:
 800908c:	4b01      	ldr	r3, [pc, #4]	; (8009094 <__errno+0x8>)
 800908e:	6818      	ldr	r0, [r3, #0]
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	24000018 	.word	0x24000018

08009098 <__libc_init_array>:
 8009098:	b570      	push	{r4, r5, r6, lr}
 800909a:	4d0d      	ldr	r5, [pc, #52]	; (80090d0 <__libc_init_array+0x38>)
 800909c:	4c0d      	ldr	r4, [pc, #52]	; (80090d4 <__libc_init_array+0x3c>)
 800909e:	1b64      	subs	r4, r4, r5
 80090a0:	10a4      	asrs	r4, r4, #2
 80090a2:	2600      	movs	r6, #0
 80090a4:	42a6      	cmp	r6, r4
 80090a6:	d109      	bne.n	80090bc <__libc_init_array+0x24>
 80090a8:	4d0b      	ldr	r5, [pc, #44]	; (80090d8 <__libc_init_array+0x40>)
 80090aa:	4c0c      	ldr	r4, [pc, #48]	; (80090dc <__libc_init_array+0x44>)
 80090ac:	f000 fc8e 	bl	80099cc <_init>
 80090b0:	1b64      	subs	r4, r4, r5
 80090b2:	10a4      	asrs	r4, r4, #2
 80090b4:	2600      	movs	r6, #0
 80090b6:	42a6      	cmp	r6, r4
 80090b8:	d105      	bne.n	80090c6 <__libc_init_array+0x2e>
 80090ba:	bd70      	pop	{r4, r5, r6, pc}
 80090bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80090c0:	4798      	blx	r3
 80090c2:	3601      	adds	r6, #1
 80090c4:	e7ee      	b.n	80090a4 <__libc_init_array+0xc>
 80090c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80090ca:	4798      	blx	r3
 80090cc:	3601      	adds	r6, #1
 80090ce:	e7f2      	b.n	80090b6 <__libc_init_array+0x1e>
 80090d0:	08009bb4 	.word	0x08009bb4
 80090d4:	08009bb4 	.word	0x08009bb4
 80090d8:	08009bb4 	.word	0x08009bb4
 80090dc:	08009bb8 	.word	0x08009bb8

080090e0 <memset>:
 80090e0:	4402      	add	r2, r0
 80090e2:	4603      	mov	r3, r0
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d100      	bne.n	80090ea <memset+0xa>
 80090e8:	4770      	bx	lr
 80090ea:	f803 1b01 	strb.w	r1, [r3], #1
 80090ee:	e7f9      	b.n	80090e4 <memset+0x4>

080090f0 <siprintf>:
 80090f0:	b40e      	push	{r1, r2, r3}
 80090f2:	b500      	push	{lr}
 80090f4:	b09c      	sub	sp, #112	; 0x70
 80090f6:	ab1d      	add	r3, sp, #116	; 0x74
 80090f8:	9002      	str	r0, [sp, #8]
 80090fa:	9006      	str	r0, [sp, #24]
 80090fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009100:	4809      	ldr	r0, [pc, #36]	; (8009128 <siprintf+0x38>)
 8009102:	9107      	str	r1, [sp, #28]
 8009104:	9104      	str	r1, [sp, #16]
 8009106:	4909      	ldr	r1, [pc, #36]	; (800912c <siprintf+0x3c>)
 8009108:	f853 2b04 	ldr.w	r2, [r3], #4
 800910c:	9105      	str	r1, [sp, #20]
 800910e:	6800      	ldr	r0, [r0, #0]
 8009110:	9301      	str	r3, [sp, #4]
 8009112:	a902      	add	r1, sp, #8
 8009114:	f000 f868 	bl	80091e8 <_svfiprintf_r>
 8009118:	9b02      	ldr	r3, [sp, #8]
 800911a:	2200      	movs	r2, #0
 800911c:	701a      	strb	r2, [r3, #0]
 800911e:	b01c      	add	sp, #112	; 0x70
 8009120:	f85d eb04 	ldr.w	lr, [sp], #4
 8009124:	b003      	add	sp, #12
 8009126:	4770      	bx	lr
 8009128:	24000018 	.word	0x24000018
 800912c:	ffff0208 	.word	0xffff0208

08009130 <__ssputs_r>:
 8009130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009134:	688e      	ldr	r6, [r1, #8]
 8009136:	429e      	cmp	r6, r3
 8009138:	4682      	mov	sl, r0
 800913a:	460c      	mov	r4, r1
 800913c:	4690      	mov	r8, r2
 800913e:	461f      	mov	r7, r3
 8009140:	d838      	bhi.n	80091b4 <__ssputs_r+0x84>
 8009142:	898a      	ldrh	r2, [r1, #12]
 8009144:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009148:	d032      	beq.n	80091b0 <__ssputs_r+0x80>
 800914a:	6825      	ldr	r5, [r4, #0]
 800914c:	6909      	ldr	r1, [r1, #16]
 800914e:	eba5 0901 	sub.w	r9, r5, r1
 8009152:	6965      	ldr	r5, [r4, #20]
 8009154:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009158:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800915c:	3301      	adds	r3, #1
 800915e:	444b      	add	r3, r9
 8009160:	106d      	asrs	r5, r5, #1
 8009162:	429d      	cmp	r5, r3
 8009164:	bf38      	it	cc
 8009166:	461d      	movcc	r5, r3
 8009168:	0553      	lsls	r3, r2, #21
 800916a:	d531      	bpl.n	80091d0 <__ssputs_r+0xa0>
 800916c:	4629      	mov	r1, r5
 800916e:	f000 fb63 	bl	8009838 <_malloc_r>
 8009172:	4606      	mov	r6, r0
 8009174:	b950      	cbnz	r0, 800918c <__ssputs_r+0x5c>
 8009176:	230c      	movs	r3, #12
 8009178:	f8ca 3000 	str.w	r3, [sl]
 800917c:	89a3      	ldrh	r3, [r4, #12]
 800917e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009182:	81a3      	strh	r3, [r4, #12]
 8009184:	f04f 30ff 	mov.w	r0, #4294967295
 8009188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800918c:	6921      	ldr	r1, [r4, #16]
 800918e:	464a      	mov	r2, r9
 8009190:	f000 fabe 	bl	8009710 <memcpy>
 8009194:	89a3      	ldrh	r3, [r4, #12]
 8009196:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800919a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800919e:	81a3      	strh	r3, [r4, #12]
 80091a0:	6126      	str	r6, [r4, #16]
 80091a2:	6165      	str	r5, [r4, #20]
 80091a4:	444e      	add	r6, r9
 80091a6:	eba5 0509 	sub.w	r5, r5, r9
 80091aa:	6026      	str	r6, [r4, #0]
 80091ac:	60a5      	str	r5, [r4, #8]
 80091ae:	463e      	mov	r6, r7
 80091b0:	42be      	cmp	r6, r7
 80091b2:	d900      	bls.n	80091b6 <__ssputs_r+0x86>
 80091b4:	463e      	mov	r6, r7
 80091b6:	6820      	ldr	r0, [r4, #0]
 80091b8:	4632      	mov	r2, r6
 80091ba:	4641      	mov	r1, r8
 80091bc:	f000 fab6 	bl	800972c <memmove>
 80091c0:	68a3      	ldr	r3, [r4, #8]
 80091c2:	1b9b      	subs	r3, r3, r6
 80091c4:	60a3      	str	r3, [r4, #8]
 80091c6:	6823      	ldr	r3, [r4, #0]
 80091c8:	4433      	add	r3, r6
 80091ca:	6023      	str	r3, [r4, #0]
 80091cc:	2000      	movs	r0, #0
 80091ce:	e7db      	b.n	8009188 <__ssputs_r+0x58>
 80091d0:	462a      	mov	r2, r5
 80091d2:	f000 fba5 	bl	8009920 <_realloc_r>
 80091d6:	4606      	mov	r6, r0
 80091d8:	2800      	cmp	r0, #0
 80091da:	d1e1      	bne.n	80091a0 <__ssputs_r+0x70>
 80091dc:	6921      	ldr	r1, [r4, #16]
 80091de:	4650      	mov	r0, sl
 80091e0:	f000 fabe 	bl	8009760 <_free_r>
 80091e4:	e7c7      	b.n	8009176 <__ssputs_r+0x46>
	...

080091e8 <_svfiprintf_r>:
 80091e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ec:	4698      	mov	r8, r3
 80091ee:	898b      	ldrh	r3, [r1, #12]
 80091f0:	061b      	lsls	r3, r3, #24
 80091f2:	b09d      	sub	sp, #116	; 0x74
 80091f4:	4607      	mov	r7, r0
 80091f6:	460d      	mov	r5, r1
 80091f8:	4614      	mov	r4, r2
 80091fa:	d50e      	bpl.n	800921a <_svfiprintf_r+0x32>
 80091fc:	690b      	ldr	r3, [r1, #16]
 80091fe:	b963      	cbnz	r3, 800921a <_svfiprintf_r+0x32>
 8009200:	2140      	movs	r1, #64	; 0x40
 8009202:	f000 fb19 	bl	8009838 <_malloc_r>
 8009206:	6028      	str	r0, [r5, #0]
 8009208:	6128      	str	r0, [r5, #16]
 800920a:	b920      	cbnz	r0, 8009216 <_svfiprintf_r+0x2e>
 800920c:	230c      	movs	r3, #12
 800920e:	603b      	str	r3, [r7, #0]
 8009210:	f04f 30ff 	mov.w	r0, #4294967295
 8009214:	e0d1      	b.n	80093ba <_svfiprintf_r+0x1d2>
 8009216:	2340      	movs	r3, #64	; 0x40
 8009218:	616b      	str	r3, [r5, #20]
 800921a:	2300      	movs	r3, #0
 800921c:	9309      	str	r3, [sp, #36]	; 0x24
 800921e:	2320      	movs	r3, #32
 8009220:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009224:	f8cd 800c 	str.w	r8, [sp, #12]
 8009228:	2330      	movs	r3, #48	; 0x30
 800922a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80093d4 <_svfiprintf_r+0x1ec>
 800922e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009232:	f04f 0901 	mov.w	r9, #1
 8009236:	4623      	mov	r3, r4
 8009238:	469a      	mov	sl, r3
 800923a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800923e:	b10a      	cbz	r2, 8009244 <_svfiprintf_r+0x5c>
 8009240:	2a25      	cmp	r2, #37	; 0x25
 8009242:	d1f9      	bne.n	8009238 <_svfiprintf_r+0x50>
 8009244:	ebba 0b04 	subs.w	fp, sl, r4
 8009248:	d00b      	beq.n	8009262 <_svfiprintf_r+0x7a>
 800924a:	465b      	mov	r3, fp
 800924c:	4622      	mov	r2, r4
 800924e:	4629      	mov	r1, r5
 8009250:	4638      	mov	r0, r7
 8009252:	f7ff ff6d 	bl	8009130 <__ssputs_r>
 8009256:	3001      	adds	r0, #1
 8009258:	f000 80aa 	beq.w	80093b0 <_svfiprintf_r+0x1c8>
 800925c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800925e:	445a      	add	r2, fp
 8009260:	9209      	str	r2, [sp, #36]	; 0x24
 8009262:	f89a 3000 	ldrb.w	r3, [sl]
 8009266:	2b00      	cmp	r3, #0
 8009268:	f000 80a2 	beq.w	80093b0 <_svfiprintf_r+0x1c8>
 800926c:	2300      	movs	r3, #0
 800926e:	f04f 32ff 	mov.w	r2, #4294967295
 8009272:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009276:	f10a 0a01 	add.w	sl, sl, #1
 800927a:	9304      	str	r3, [sp, #16]
 800927c:	9307      	str	r3, [sp, #28]
 800927e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009282:	931a      	str	r3, [sp, #104]	; 0x68
 8009284:	4654      	mov	r4, sl
 8009286:	2205      	movs	r2, #5
 8009288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800928c:	4851      	ldr	r0, [pc, #324]	; (80093d4 <_svfiprintf_r+0x1ec>)
 800928e:	f7f7 f837 	bl	8000300 <memchr>
 8009292:	9a04      	ldr	r2, [sp, #16]
 8009294:	b9d8      	cbnz	r0, 80092ce <_svfiprintf_r+0xe6>
 8009296:	06d0      	lsls	r0, r2, #27
 8009298:	bf44      	itt	mi
 800929a:	2320      	movmi	r3, #32
 800929c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092a0:	0711      	lsls	r1, r2, #28
 80092a2:	bf44      	itt	mi
 80092a4:	232b      	movmi	r3, #43	; 0x2b
 80092a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092aa:	f89a 3000 	ldrb.w	r3, [sl]
 80092ae:	2b2a      	cmp	r3, #42	; 0x2a
 80092b0:	d015      	beq.n	80092de <_svfiprintf_r+0xf6>
 80092b2:	9a07      	ldr	r2, [sp, #28]
 80092b4:	4654      	mov	r4, sl
 80092b6:	2000      	movs	r0, #0
 80092b8:	f04f 0c0a 	mov.w	ip, #10
 80092bc:	4621      	mov	r1, r4
 80092be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092c2:	3b30      	subs	r3, #48	; 0x30
 80092c4:	2b09      	cmp	r3, #9
 80092c6:	d94e      	bls.n	8009366 <_svfiprintf_r+0x17e>
 80092c8:	b1b0      	cbz	r0, 80092f8 <_svfiprintf_r+0x110>
 80092ca:	9207      	str	r2, [sp, #28]
 80092cc:	e014      	b.n	80092f8 <_svfiprintf_r+0x110>
 80092ce:	eba0 0308 	sub.w	r3, r0, r8
 80092d2:	fa09 f303 	lsl.w	r3, r9, r3
 80092d6:	4313      	orrs	r3, r2
 80092d8:	9304      	str	r3, [sp, #16]
 80092da:	46a2      	mov	sl, r4
 80092dc:	e7d2      	b.n	8009284 <_svfiprintf_r+0x9c>
 80092de:	9b03      	ldr	r3, [sp, #12]
 80092e0:	1d19      	adds	r1, r3, #4
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	9103      	str	r1, [sp, #12]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	bfbb      	ittet	lt
 80092ea:	425b      	neglt	r3, r3
 80092ec:	f042 0202 	orrlt.w	r2, r2, #2
 80092f0:	9307      	strge	r3, [sp, #28]
 80092f2:	9307      	strlt	r3, [sp, #28]
 80092f4:	bfb8      	it	lt
 80092f6:	9204      	strlt	r2, [sp, #16]
 80092f8:	7823      	ldrb	r3, [r4, #0]
 80092fa:	2b2e      	cmp	r3, #46	; 0x2e
 80092fc:	d10c      	bne.n	8009318 <_svfiprintf_r+0x130>
 80092fe:	7863      	ldrb	r3, [r4, #1]
 8009300:	2b2a      	cmp	r3, #42	; 0x2a
 8009302:	d135      	bne.n	8009370 <_svfiprintf_r+0x188>
 8009304:	9b03      	ldr	r3, [sp, #12]
 8009306:	1d1a      	adds	r2, r3, #4
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	9203      	str	r2, [sp, #12]
 800930c:	2b00      	cmp	r3, #0
 800930e:	bfb8      	it	lt
 8009310:	f04f 33ff 	movlt.w	r3, #4294967295
 8009314:	3402      	adds	r4, #2
 8009316:	9305      	str	r3, [sp, #20]
 8009318:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80093e4 <_svfiprintf_r+0x1fc>
 800931c:	7821      	ldrb	r1, [r4, #0]
 800931e:	2203      	movs	r2, #3
 8009320:	4650      	mov	r0, sl
 8009322:	f7f6 ffed 	bl	8000300 <memchr>
 8009326:	b140      	cbz	r0, 800933a <_svfiprintf_r+0x152>
 8009328:	2340      	movs	r3, #64	; 0x40
 800932a:	eba0 000a 	sub.w	r0, r0, sl
 800932e:	fa03 f000 	lsl.w	r0, r3, r0
 8009332:	9b04      	ldr	r3, [sp, #16]
 8009334:	4303      	orrs	r3, r0
 8009336:	3401      	adds	r4, #1
 8009338:	9304      	str	r3, [sp, #16]
 800933a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800933e:	4826      	ldr	r0, [pc, #152]	; (80093d8 <_svfiprintf_r+0x1f0>)
 8009340:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009344:	2206      	movs	r2, #6
 8009346:	f7f6 ffdb 	bl	8000300 <memchr>
 800934a:	2800      	cmp	r0, #0
 800934c:	d038      	beq.n	80093c0 <_svfiprintf_r+0x1d8>
 800934e:	4b23      	ldr	r3, [pc, #140]	; (80093dc <_svfiprintf_r+0x1f4>)
 8009350:	bb1b      	cbnz	r3, 800939a <_svfiprintf_r+0x1b2>
 8009352:	9b03      	ldr	r3, [sp, #12]
 8009354:	3307      	adds	r3, #7
 8009356:	f023 0307 	bic.w	r3, r3, #7
 800935a:	3308      	adds	r3, #8
 800935c:	9303      	str	r3, [sp, #12]
 800935e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009360:	4433      	add	r3, r6
 8009362:	9309      	str	r3, [sp, #36]	; 0x24
 8009364:	e767      	b.n	8009236 <_svfiprintf_r+0x4e>
 8009366:	fb0c 3202 	mla	r2, ip, r2, r3
 800936a:	460c      	mov	r4, r1
 800936c:	2001      	movs	r0, #1
 800936e:	e7a5      	b.n	80092bc <_svfiprintf_r+0xd4>
 8009370:	2300      	movs	r3, #0
 8009372:	3401      	adds	r4, #1
 8009374:	9305      	str	r3, [sp, #20]
 8009376:	4619      	mov	r1, r3
 8009378:	f04f 0c0a 	mov.w	ip, #10
 800937c:	4620      	mov	r0, r4
 800937e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009382:	3a30      	subs	r2, #48	; 0x30
 8009384:	2a09      	cmp	r2, #9
 8009386:	d903      	bls.n	8009390 <_svfiprintf_r+0x1a8>
 8009388:	2b00      	cmp	r3, #0
 800938a:	d0c5      	beq.n	8009318 <_svfiprintf_r+0x130>
 800938c:	9105      	str	r1, [sp, #20]
 800938e:	e7c3      	b.n	8009318 <_svfiprintf_r+0x130>
 8009390:	fb0c 2101 	mla	r1, ip, r1, r2
 8009394:	4604      	mov	r4, r0
 8009396:	2301      	movs	r3, #1
 8009398:	e7f0      	b.n	800937c <_svfiprintf_r+0x194>
 800939a:	ab03      	add	r3, sp, #12
 800939c:	9300      	str	r3, [sp, #0]
 800939e:	462a      	mov	r2, r5
 80093a0:	4b0f      	ldr	r3, [pc, #60]	; (80093e0 <_svfiprintf_r+0x1f8>)
 80093a2:	a904      	add	r1, sp, #16
 80093a4:	4638      	mov	r0, r7
 80093a6:	f3af 8000 	nop.w
 80093aa:	1c42      	adds	r2, r0, #1
 80093ac:	4606      	mov	r6, r0
 80093ae:	d1d6      	bne.n	800935e <_svfiprintf_r+0x176>
 80093b0:	89ab      	ldrh	r3, [r5, #12]
 80093b2:	065b      	lsls	r3, r3, #25
 80093b4:	f53f af2c 	bmi.w	8009210 <_svfiprintf_r+0x28>
 80093b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093ba:	b01d      	add	sp, #116	; 0x74
 80093bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093c0:	ab03      	add	r3, sp, #12
 80093c2:	9300      	str	r3, [sp, #0]
 80093c4:	462a      	mov	r2, r5
 80093c6:	4b06      	ldr	r3, [pc, #24]	; (80093e0 <_svfiprintf_r+0x1f8>)
 80093c8:	a904      	add	r1, sp, #16
 80093ca:	4638      	mov	r0, r7
 80093cc:	f000 f87a 	bl	80094c4 <_printf_i>
 80093d0:	e7eb      	b.n	80093aa <_svfiprintf_r+0x1c2>
 80093d2:	bf00      	nop
 80093d4:	08009b78 	.word	0x08009b78
 80093d8:	08009b82 	.word	0x08009b82
 80093dc:	00000000 	.word	0x00000000
 80093e0:	08009131 	.word	0x08009131
 80093e4:	08009b7e 	.word	0x08009b7e

080093e8 <_printf_common>:
 80093e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093ec:	4616      	mov	r6, r2
 80093ee:	4699      	mov	r9, r3
 80093f0:	688a      	ldr	r2, [r1, #8]
 80093f2:	690b      	ldr	r3, [r1, #16]
 80093f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093f8:	4293      	cmp	r3, r2
 80093fa:	bfb8      	it	lt
 80093fc:	4613      	movlt	r3, r2
 80093fe:	6033      	str	r3, [r6, #0]
 8009400:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009404:	4607      	mov	r7, r0
 8009406:	460c      	mov	r4, r1
 8009408:	b10a      	cbz	r2, 800940e <_printf_common+0x26>
 800940a:	3301      	adds	r3, #1
 800940c:	6033      	str	r3, [r6, #0]
 800940e:	6823      	ldr	r3, [r4, #0]
 8009410:	0699      	lsls	r1, r3, #26
 8009412:	bf42      	ittt	mi
 8009414:	6833      	ldrmi	r3, [r6, #0]
 8009416:	3302      	addmi	r3, #2
 8009418:	6033      	strmi	r3, [r6, #0]
 800941a:	6825      	ldr	r5, [r4, #0]
 800941c:	f015 0506 	ands.w	r5, r5, #6
 8009420:	d106      	bne.n	8009430 <_printf_common+0x48>
 8009422:	f104 0a19 	add.w	sl, r4, #25
 8009426:	68e3      	ldr	r3, [r4, #12]
 8009428:	6832      	ldr	r2, [r6, #0]
 800942a:	1a9b      	subs	r3, r3, r2
 800942c:	42ab      	cmp	r3, r5
 800942e:	dc26      	bgt.n	800947e <_printf_common+0x96>
 8009430:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009434:	1e13      	subs	r3, r2, #0
 8009436:	6822      	ldr	r2, [r4, #0]
 8009438:	bf18      	it	ne
 800943a:	2301      	movne	r3, #1
 800943c:	0692      	lsls	r2, r2, #26
 800943e:	d42b      	bmi.n	8009498 <_printf_common+0xb0>
 8009440:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009444:	4649      	mov	r1, r9
 8009446:	4638      	mov	r0, r7
 8009448:	47c0      	blx	r8
 800944a:	3001      	adds	r0, #1
 800944c:	d01e      	beq.n	800948c <_printf_common+0xa4>
 800944e:	6823      	ldr	r3, [r4, #0]
 8009450:	68e5      	ldr	r5, [r4, #12]
 8009452:	6832      	ldr	r2, [r6, #0]
 8009454:	f003 0306 	and.w	r3, r3, #6
 8009458:	2b04      	cmp	r3, #4
 800945a:	bf08      	it	eq
 800945c:	1aad      	subeq	r5, r5, r2
 800945e:	68a3      	ldr	r3, [r4, #8]
 8009460:	6922      	ldr	r2, [r4, #16]
 8009462:	bf0c      	ite	eq
 8009464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009468:	2500      	movne	r5, #0
 800946a:	4293      	cmp	r3, r2
 800946c:	bfc4      	itt	gt
 800946e:	1a9b      	subgt	r3, r3, r2
 8009470:	18ed      	addgt	r5, r5, r3
 8009472:	2600      	movs	r6, #0
 8009474:	341a      	adds	r4, #26
 8009476:	42b5      	cmp	r5, r6
 8009478:	d11a      	bne.n	80094b0 <_printf_common+0xc8>
 800947a:	2000      	movs	r0, #0
 800947c:	e008      	b.n	8009490 <_printf_common+0xa8>
 800947e:	2301      	movs	r3, #1
 8009480:	4652      	mov	r2, sl
 8009482:	4649      	mov	r1, r9
 8009484:	4638      	mov	r0, r7
 8009486:	47c0      	blx	r8
 8009488:	3001      	adds	r0, #1
 800948a:	d103      	bne.n	8009494 <_printf_common+0xac>
 800948c:	f04f 30ff 	mov.w	r0, #4294967295
 8009490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009494:	3501      	adds	r5, #1
 8009496:	e7c6      	b.n	8009426 <_printf_common+0x3e>
 8009498:	18e1      	adds	r1, r4, r3
 800949a:	1c5a      	adds	r2, r3, #1
 800949c:	2030      	movs	r0, #48	; 0x30
 800949e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094a2:	4422      	add	r2, r4
 80094a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80094a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80094ac:	3302      	adds	r3, #2
 80094ae:	e7c7      	b.n	8009440 <_printf_common+0x58>
 80094b0:	2301      	movs	r3, #1
 80094b2:	4622      	mov	r2, r4
 80094b4:	4649      	mov	r1, r9
 80094b6:	4638      	mov	r0, r7
 80094b8:	47c0      	blx	r8
 80094ba:	3001      	adds	r0, #1
 80094bc:	d0e6      	beq.n	800948c <_printf_common+0xa4>
 80094be:	3601      	adds	r6, #1
 80094c0:	e7d9      	b.n	8009476 <_printf_common+0x8e>
	...

080094c4 <_printf_i>:
 80094c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094c8:	7e0f      	ldrb	r7, [r1, #24]
 80094ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80094cc:	2f78      	cmp	r7, #120	; 0x78
 80094ce:	4691      	mov	r9, r2
 80094d0:	4680      	mov	r8, r0
 80094d2:	460c      	mov	r4, r1
 80094d4:	469a      	mov	sl, r3
 80094d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80094da:	d807      	bhi.n	80094ec <_printf_i+0x28>
 80094dc:	2f62      	cmp	r7, #98	; 0x62
 80094de:	d80a      	bhi.n	80094f6 <_printf_i+0x32>
 80094e0:	2f00      	cmp	r7, #0
 80094e2:	f000 80d8 	beq.w	8009696 <_printf_i+0x1d2>
 80094e6:	2f58      	cmp	r7, #88	; 0x58
 80094e8:	f000 80a3 	beq.w	8009632 <_printf_i+0x16e>
 80094ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80094f4:	e03a      	b.n	800956c <_printf_i+0xa8>
 80094f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80094fa:	2b15      	cmp	r3, #21
 80094fc:	d8f6      	bhi.n	80094ec <_printf_i+0x28>
 80094fe:	a101      	add	r1, pc, #4	; (adr r1, 8009504 <_printf_i+0x40>)
 8009500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009504:	0800955d 	.word	0x0800955d
 8009508:	08009571 	.word	0x08009571
 800950c:	080094ed 	.word	0x080094ed
 8009510:	080094ed 	.word	0x080094ed
 8009514:	080094ed 	.word	0x080094ed
 8009518:	080094ed 	.word	0x080094ed
 800951c:	08009571 	.word	0x08009571
 8009520:	080094ed 	.word	0x080094ed
 8009524:	080094ed 	.word	0x080094ed
 8009528:	080094ed 	.word	0x080094ed
 800952c:	080094ed 	.word	0x080094ed
 8009530:	0800967d 	.word	0x0800967d
 8009534:	080095a1 	.word	0x080095a1
 8009538:	0800965f 	.word	0x0800965f
 800953c:	080094ed 	.word	0x080094ed
 8009540:	080094ed 	.word	0x080094ed
 8009544:	0800969f 	.word	0x0800969f
 8009548:	080094ed 	.word	0x080094ed
 800954c:	080095a1 	.word	0x080095a1
 8009550:	080094ed 	.word	0x080094ed
 8009554:	080094ed 	.word	0x080094ed
 8009558:	08009667 	.word	0x08009667
 800955c:	682b      	ldr	r3, [r5, #0]
 800955e:	1d1a      	adds	r2, r3, #4
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	602a      	str	r2, [r5, #0]
 8009564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009568:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800956c:	2301      	movs	r3, #1
 800956e:	e0a3      	b.n	80096b8 <_printf_i+0x1f4>
 8009570:	6820      	ldr	r0, [r4, #0]
 8009572:	6829      	ldr	r1, [r5, #0]
 8009574:	0606      	lsls	r6, r0, #24
 8009576:	f101 0304 	add.w	r3, r1, #4
 800957a:	d50a      	bpl.n	8009592 <_printf_i+0xce>
 800957c:	680e      	ldr	r6, [r1, #0]
 800957e:	602b      	str	r3, [r5, #0]
 8009580:	2e00      	cmp	r6, #0
 8009582:	da03      	bge.n	800958c <_printf_i+0xc8>
 8009584:	232d      	movs	r3, #45	; 0x2d
 8009586:	4276      	negs	r6, r6
 8009588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800958c:	485e      	ldr	r0, [pc, #376]	; (8009708 <_printf_i+0x244>)
 800958e:	230a      	movs	r3, #10
 8009590:	e019      	b.n	80095c6 <_printf_i+0x102>
 8009592:	680e      	ldr	r6, [r1, #0]
 8009594:	602b      	str	r3, [r5, #0]
 8009596:	f010 0f40 	tst.w	r0, #64	; 0x40
 800959a:	bf18      	it	ne
 800959c:	b236      	sxthne	r6, r6
 800959e:	e7ef      	b.n	8009580 <_printf_i+0xbc>
 80095a0:	682b      	ldr	r3, [r5, #0]
 80095a2:	6820      	ldr	r0, [r4, #0]
 80095a4:	1d19      	adds	r1, r3, #4
 80095a6:	6029      	str	r1, [r5, #0]
 80095a8:	0601      	lsls	r1, r0, #24
 80095aa:	d501      	bpl.n	80095b0 <_printf_i+0xec>
 80095ac:	681e      	ldr	r6, [r3, #0]
 80095ae:	e002      	b.n	80095b6 <_printf_i+0xf2>
 80095b0:	0646      	lsls	r6, r0, #25
 80095b2:	d5fb      	bpl.n	80095ac <_printf_i+0xe8>
 80095b4:	881e      	ldrh	r6, [r3, #0]
 80095b6:	4854      	ldr	r0, [pc, #336]	; (8009708 <_printf_i+0x244>)
 80095b8:	2f6f      	cmp	r7, #111	; 0x6f
 80095ba:	bf0c      	ite	eq
 80095bc:	2308      	moveq	r3, #8
 80095be:	230a      	movne	r3, #10
 80095c0:	2100      	movs	r1, #0
 80095c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80095c6:	6865      	ldr	r5, [r4, #4]
 80095c8:	60a5      	str	r5, [r4, #8]
 80095ca:	2d00      	cmp	r5, #0
 80095cc:	bfa2      	ittt	ge
 80095ce:	6821      	ldrge	r1, [r4, #0]
 80095d0:	f021 0104 	bicge.w	r1, r1, #4
 80095d4:	6021      	strge	r1, [r4, #0]
 80095d6:	b90e      	cbnz	r6, 80095dc <_printf_i+0x118>
 80095d8:	2d00      	cmp	r5, #0
 80095da:	d04d      	beq.n	8009678 <_printf_i+0x1b4>
 80095dc:	4615      	mov	r5, r2
 80095de:	fbb6 f1f3 	udiv	r1, r6, r3
 80095e2:	fb03 6711 	mls	r7, r3, r1, r6
 80095e6:	5dc7      	ldrb	r7, [r0, r7]
 80095e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80095ec:	4637      	mov	r7, r6
 80095ee:	42bb      	cmp	r3, r7
 80095f0:	460e      	mov	r6, r1
 80095f2:	d9f4      	bls.n	80095de <_printf_i+0x11a>
 80095f4:	2b08      	cmp	r3, #8
 80095f6:	d10b      	bne.n	8009610 <_printf_i+0x14c>
 80095f8:	6823      	ldr	r3, [r4, #0]
 80095fa:	07de      	lsls	r6, r3, #31
 80095fc:	d508      	bpl.n	8009610 <_printf_i+0x14c>
 80095fe:	6923      	ldr	r3, [r4, #16]
 8009600:	6861      	ldr	r1, [r4, #4]
 8009602:	4299      	cmp	r1, r3
 8009604:	bfde      	ittt	le
 8009606:	2330      	movle	r3, #48	; 0x30
 8009608:	f805 3c01 	strble.w	r3, [r5, #-1]
 800960c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009610:	1b52      	subs	r2, r2, r5
 8009612:	6122      	str	r2, [r4, #16]
 8009614:	f8cd a000 	str.w	sl, [sp]
 8009618:	464b      	mov	r3, r9
 800961a:	aa03      	add	r2, sp, #12
 800961c:	4621      	mov	r1, r4
 800961e:	4640      	mov	r0, r8
 8009620:	f7ff fee2 	bl	80093e8 <_printf_common>
 8009624:	3001      	adds	r0, #1
 8009626:	d14c      	bne.n	80096c2 <_printf_i+0x1fe>
 8009628:	f04f 30ff 	mov.w	r0, #4294967295
 800962c:	b004      	add	sp, #16
 800962e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009632:	4835      	ldr	r0, [pc, #212]	; (8009708 <_printf_i+0x244>)
 8009634:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009638:	6829      	ldr	r1, [r5, #0]
 800963a:	6823      	ldr	r3, [r4, #0]
 800963c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009640:	6029      	str	r1, [r5, #0]
 8009642:	061d      	lsls	r5, r3, #24
 8009644:	d514      	bpl.n	8009670 <_printf_i+0x1ac>
 8009646:	07df      	lsls	r7, r3, #31
 8009648:	bf44      	itt	mi
 800964a:	f043 0320 	orrmi.w	r3, r3, #32
 800964e:	6023      	strmi	r3, [r4, #0]
 8009650:	b91e      	cbnz	r6, 800965a <_printf_i+0x196>
 8009652:	6823      	ldr	r3, [r4, #0]
 8009654:	f023 0320 	bic.w	r3, r3, #32
 8009658:	6023      	str	r3, [r4, #0]
 800965a:	2310      	movs	r3, #16
 800965c:	e7b0      	b.n	80095c0 <_printf_i+0xfc>
 800965e:	6823      	ldr	r3, [r4, #0]
 8009660:	f043 0320 	orr.w	r3, r3, #32
 8009664:	6023      	str	r3, [r4, #0]
 8009666:	2378      	movs	r3, #120	; 0x78
 8009668:	4828      	ldr	r0, [pc, #160]	; (800970c <_printf_i+0x248>)
 800966a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800966e:	e7e3      	b.n	8009638 <_printf_i+0x174>
 8009670:	0659      	lsls	r1, r3, #25
 8009672:	bf48      	it	mi
 8009674:	b2b6      	uxthmi	r6, r6
 8009676:	e7e6      	b.n	8009646 <_printf_i+0x182>
 8009678:	4615      	mov	r5, r2
 800967a:	e7bb      	b.n	80095f4 <_printf_i+0x130>
 800967c:	682b      	ldr	r3, [r5, #0]
 800967e:	6826      	ldr	r6, [r4, #0]
 8009680:	6961      	ldr	r1, [r4, #20]
 8009682:	1d18      	adds	r0, r3, #4
 8009684:	6028      	str	r0, [r5, #0]
 8009686:	0635      	lsls	r5, r6, #24
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	d501      	bpl.n	8009690 <_printf_i+0x1cc>
 800968c:	6019      	str	r1, [r3, #0]
 800968e:	e002      	b.n	8009696 <_printf_i+0x1d2>
 8009690:	0670      	lsls	r0, r6, #25
 8009692:	d5fb      	bpl.n	800968c <_printf_i+0x1c8>
 8009694:	8019      	strh	r1, [r3, #0]
 8009696:	2300      	movs	r3, #0
 8009698:	6123      	str	r3, [r4, #16]
 800969a:	4615      	mov	r5, r2
 800969c:	e7ba      	b.n	8009614 <_printf_i+0x150>
 800969e:	682b      	ldr	r3, [r5, #0]
 80096a0:	1d1a      	adds	r2, r3, #4
 80096a2:	602a      	str	r2, [r5, #0]
 80096a4:	681d      	ldr	r5, [r3, #0]
 80096a6:	6862      	ldr	r2, [r4, #4]
 80096a8:	2100      	movs	r1, #0
 80096aa:	4628      	mov	r0, r5
 80096ac:	f7f6 fe28 	bl	8000300 <memchr>
 80096b0:	b108      	cbz	r0, 80096b6 <_printf_i+0x1f2>
 80096b2:	1b40      	subs	r0, r0, r5
 80096b4:	6060      	str	r0, [r4, #4]
 80096b6:	6863      	ldr	r3, [r4, #4]
 80096b8:	6123      	str	r3, [r4, #16]
 80096ba:	2300      	movs	r3, #0
 80096bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096c0:	e7a8      	b.n	8009614 <_printf_i+0x150>
 80096c2:	6923      	ldr	r3, [r4, #16]
 80096c4:	462a      	mov	r2, r5
 80096c6:	4649      	mov	r1, r9
 80096c8:	4640      	mov	r0, r8
 80096ca:	47d0      	blx	sl
 80096cc:	3001      	adds	r0, #1
 80096ce:	d0ab      	beq.n	8009628 <_printf_i+0x164>
 80096d0:	6823      	ldr	r3, [r4, #0]
 80096d2:	079b      	lsls	r3, r3, #30
 80096d4:	d413      	bmi.n	80096fe <_printf_i+0x23a>
 80096d6:	68e0      	ldr	r0, [r4, #12]
 80096d8:	9b03      	ldr	r3, [sp, #12]
 80096da:	4298      	cmp	r0, r3
 80096dc:	bfb8      	it	lt
 80096de:	4618      	movlt	r0, r3
 80096e0:	e7a4      	b.n	800962c <_printf_i+0x168>
 80096e2:	2301      	movs	r3, #1
 80096e4:	4632      	mov	r2, r6
 80096e6:	4649      	mov	r1, r9
 80096e8:	4640      	mov	r0, r8
 80096ea:	47d0      	blx	sl
 80096ec:	3001      	adds	r0, #1
 80096ee:	d09b      	beq.n	8009628 <_printf_i+0x164>
 80096f0:	3501      	adds	r5, #1
 80096f2:	68e3      	ldr	r3, [r4, #12]
 80096f4:	9903      	ldr	r1, [sp, #12]
 80096f6:	1a5b      	subs	r3, r3, r1
 80096f8:	42ab      	cmp	r3, r5
 80096fa:	dcf2      	bgt.n	80096e2 <_printf_i+0x21e>
 80096fc:	e7eb      	b.n	80096d6 <_printf_i+0x212>
 80096fe:	2500      	movs	r5, #0
 8009700:	f104 0619 	add.w	r6, r4, #25
 8009704:	e7f5      	b.n	80096f2 <_printf_i+0x22e>
 8009706:	bf00      	nop
 8009708:	08009b89 	.word	0x08009b89
 800970c:	08009b9a 	.word	0x08009b9a

08009710 <memcpy>:
 8009710:	440a      	add	r2, r1
 8009712:	4291      	cmp	r1, r2
 8009714:	f100 33ff 	add.w	r3, r0, #4294967295
 8009718:	d100      	bne.n	800971c <memcpy+0xc>
 800971a:	4770      	bx	lr
 800971c:	b510      	push	{r4, lr}
 800971e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009722:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009726:	4291      	cmp	r1, r2
 8009728:	d1f9      	bne.n	800971e <memcpy+0xe>
 800972a:	bd10      	pop	{r4, pc}

0800972c <memmove>:
 800972c:	4288      	cmp	r0, r1
 800972e:	b510      	push	{r4, lr}
 8009730:	eb01 0402 	add.w	r4, r1, r2
 8009734:	d902      	bls.n	800973c <memmove+0x10>
 8009736:	4284      	cmp	r4, r0
 8009738:	4623      	mov	r3, r4
 800973a:	d807      	bhi.n	800974c <memmove+0x20>
 800973c:	1e43      	subs	r3, r0, #1
 800973e:	42a1      	cmp	r1, r4
 8009740:	d008      	beq.n	8009754 <memmove+0x28>
 8009742:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009746:	f803 2f01 	strb.w	r2, [r3, #1]!
 800974a:	e7f8      	b.n	800973e <memmove+0x12>
 800974c:	4402      	add	r2, r0
 800974e:	4601      	mov	r1, r0
 8009750:	428a      	cmp	r2, r1
 8009752:	d100      	bne.n	8009756 <memmove+0x2a>
 8009754:	bd10      	pop	{r4, pc}
 8009756:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800975a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800975e:	e7f7      	b.n	8009750 <memmove+0x24>

08009760 <_free_r>:
 8009760:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009762:	2900      	cmp	r1, #0
 8009764:	d044      	beq.n	80097f0 <_free_r+0x90>
 8009766:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800976a:	9001      	str	r0, [sp, #4]
 800976c:	2b00      	cmp	r3, #0
 800976e:	f1a1 0404 	sub.w	r4, r1, #4
 8009772:	bfb8      	it	lt
 8009774:	18e4      	addlt	r4, r4, r3
 8009776:	f000 f913 	bl	80099a0 <__malloc_lock>
 800977a:	4a1e      	ldr	r2, [pc, #120]	; (80097f4 <_free_r+0x94>)
 800977c:	9801      	ldr	r0, [sp, #4]
 800977e:	6813      	ldr	r3, [r2, #0]
 8009780:	b933      	cbnz	r3, 8009790 <_free_r+0x30>
 8009782:	6063      	str	r3, [r4, #4]
 8009784:	6014      	str	r4, [r2, #0]
 8009786:	b003      	add	sp, #12
 8009788:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800978c:	f000 b90e 	b.w	80099ac <__malloc_unlock>
 8009790:	42a3      	cmp	r3, r4
 8009792:	d908      	bls.n	80097a6 <_free_r+0x46>
 8009794:	6825      	ldr	r5, [r4, #0]
 8009796:	1961      	adds	r1, r4, r5
 8009798:	428b      	cmp	r3, r1
 800979a:	bf01      	itttt	eq
 800979c:	6819      	ldreq	r1, [r3, #0]
 800979e:	685b      	ldreq	r3, [r3, #4]
 80097a0:	1949      	addeq	r1, r1, r5
 80097a2:	6021      	streq	r1, [r4, #0]
 80097a4:	e7ed      	b.n	8009782 <_free_r+0x22>
 80097a6:	461a      	mov	r2, r3
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	b10b      	cbz	r3, 80097b0 <_free_r+0x50>
 80097ac:	42a3      	cmp	r3, r4
 80097ae:	d9fa      	bls.n	80097a6 <_free_r+0x46>
 80097b0:	6811      	ldr	r1, [r2, #0]
 80097b2:	1855      	adds	r5, r2, r1
 80097b4:	42a5      	cmp	r5, r4
 80097b6:	d10b      	bne.n	80097d0 <_free_r+0x70>
 80097b8:	6824      	ldr	r4, [r4, #0]
 80097ba:	4421      	add	r1, r4
 80097bc:	1854      	adds	r4, r2, r1
 80097be:	42a3      	cmp	r3, r4
 80097c0:	6011      	str	r1, [r2, #0]
 80097c2:	d1e0      	bne.n	8009786 <_free_r+0x26>
 80097c4:	681c      	ldr	r4, [r3, #0]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	6053      	str	r3, [r2, #4]
 80097ca:	4421      	add	r1, r4
 80097cc:	6011      	str	r1, [r2, #0]
 80097ce:	e7da      	b.n	8009786 <_free_r+0x26>
 80097d0:	d902      	bls.n	80097d8 <_free_r+0x78>
 80097d2:	230c      	movs	r3, #12
 80097d4:	6003      	str	r3, [r0, #0]
 80097d6:	e7d6      	b.n	8009786 <_free_r+0x26>
 80097d8:	6825      	ldr	r5, [r4, #0]
 80097da:	1961      	adds	r1, r4, r5
 80097dc:	428b      	cmp	r3, r1
 80097de:	bf04      	itt	eq
 80097e0:	6819      	ldreq	r1, [r3, #0]
 80097e2:	685b      	ldreq	r3, [r3, #4]
 80097e4:	6063      	str	r3, [r4, #4]
 80097e6:	bf04      	itt	eq
 80097e8:	1949      	addeq	r1, r1, r5
 80097ea:	6021      	streq	r1, [r4, #0]
 80097ec:	6054      	str	r4, [r2, #4]
 80097ee:	e7ca      	b.n	8009786 <_free_r+0x26>
 80097f0:	b003      	add	sp, #12
 80097f2:	bd30      	pop	{r4, r5, pc}
 80097f4:	24009f0c 	.word	0x24009f0c

080097f8 <sbrk_aligned>:
 80097f8:	b570      	push	{r4, r5, r6, lr}
 80097fa:	4e0e      	ldr	r6, [pc, #56]	; (8009834 <sbrk_aligned+0x3c>)
 80097fc:	460c      	mov	r4, r1
 80097fe:	6831      	ldr	r1, [r6, #0]
 8009800:	4605      	mov	r5, r0
 8009802:	b911      	cbnz	r1, 800980a <sbrk_aligned+0x12>
 8009804:	f000 f8bc 	bl	8009980 <_sbrk_r>
 8009808:	6030      	str	r0, [r6, #0]
 800980a:	4621      	mov	r1, r4
 800980c:	4628      	mov	r0, r5
 800980e:	f000 f8b7 	bl	8009980 <_sbrk_r>
 8009812:	1c43      	adds	r3, r0, #1
 8009814:	d00a      	beq.n	800982c <sbrk_aligned+0x34>
 8009816:	1cc4      	adds	r4, r0, #3
 8009818:	f024 0403 	bic.w	r4, r4, #3
 800981c:	42a0      	cmp	r0, r4
 800981e:	d007      	beq.n	8009830 <sbrk_aligned+0x38>
 8009820:	1a21      	subs	r1, r4, r0
 8009822:	4628      	mov	r0, r5
 8009824:	f000 f8ac 	bl	8009980 <_sbrk_r>
 8009828:	3001      	adds	r0, #1
 800982a:	d101      	bne.n	8009830 <sbrk_aligned+0x38>
 800982c:	f04f 34ff 	mov.w	r4, #4294967295
 8009830:	4620      	mov	r0, r4
 8009832:	bd70      	pop	{r4, r5, r6, pc}
 8009834:	24009f10 	.word	0x24009f10

08009838 <_malloc_r>:
 8009838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800983c:	1ccd      	adds	r5, r1, #3
 800983e:	f025 0503 	bic.w	r5, r5, #3
 8009842:	3508      	adds	r5, #8
 8009844:	2d0c      	cmp	r5, #12
 8009846:	bf38      	it	cc
 8009848:	250c      	movcc	r5, #12
 800984a:	2d00      	cmp	r5, #0
 800984c:	4607      	mov	r7, r0
 800984e:	db01      	blt.n	8009854 <_malloc_r+0x1c>
 8009850:	42a9      	cmp	r1, r5
 8009852:	d905      	bls.n	8009860 <_malloc_r+0x28>
 8009854:	230c      	movs	r3, #12
 8009856:	603b      	str	r3, [r7, #0]
 8009858:	2600      	movs	r6, #0
 800985a:	4630      	mov	r0, r6
 800985c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009860:	4e2e      	ldr	r6, [pc, #184]	; (800991c <_malloc_r+0xe4>)
 8009862:	f000 f89d 	bl	80099a0 <__malloc_lock>
 8009866:	6833      	ldr	r3, [r6, #0]
 8009868:	461c      	mov	r4, r3
 800986a:	bb34      	cbnz	r4, 80098ba <_malloc_r+0x82>
 800986c:	4629      	mov	r1, r5
 800986e:	4638      	mov	r0, r7
 8009870:	f7ff ffc2 	bl	80097f8 <sbrk_aligned>
 8009874:	1c43      	adds	r3, r0, #1
 8009876:	4604      	mov	r4, r0
 8009878:	d14d      	bne.n	8009916 <_malloc_r+0xde>
 800987a:	6834      	ldr	r4, [r6, #0]
 800987c:	4626      	mov	r6, r4
 800987e:	2e00      	cmp	r6, #0
 8009880:	d140      	bne.n	8009904 <_malloc_r+0xcc>
 8009882:	6823      	ldr	r3, [r4, #0]
 8009884:	4631      	mov	r1, r6
 8009886:	4638      	mov	r0, r7
 8009888:	eb04 0803 	add.w	r8, r4, r3
 800988c:	f000 f878 	bl	8009980 <_sbrk_r>
 8009890:	4580      	cmp	r8, r0
 8009892:	d13a      	bne.n	800990a <_malloc_r+0xd2>
 8009894:	6821      	ldr	r1, [r4, #0]
 8009896:	3503      	adds	r5, #3
 8009898:	1a6d      	subs	r5, r5, r1
 800989a:	f025 0503 	bic.w	r5, r5, #3
 800989e:	3508      	adds	r5, #8
 80098a0:	2d0c      	cmp	r5, #12
 80098a2:	bf38      	it	cc
 80098a4:	250c      	movcc	r5, #12
 80098a6:	4629      	mov	r1, r5
 80098a8:	4638      	mov	r0, r7
 80098aa:	f7ff ffa5 	bl	80097f8 <sbrk_aligned>
 80098ae:	3001      	adds	r0, #1
 80098b0:	d02b      	beq.n	800990a <_malloc_r+0xd2>
 80098b2:	6823      	ldr	r3, [r4, #0]
 80098b4:	442b      	add	r3, r5
 80098b6:	6023      	str	r3, [r4, #0]
 80098b8:	e00e      	b.n	80098d8 <_malloc_r+0xa0>
 80098ba:	6822      	ldr	r2, [r4, #0]
 80098bc:	1b52      	subs	r2, r2, r5
 80098be:	d41e      	bmi.n	80098fe <_malloc_r+0xc6>
 80098c0:	2a0b      	cmp	r2, #11
 80098c2:	d916      	bls.n	80098f2 <_malloc_r+0xba>
 80098c4:	1961      	adds	r1, r4, r5
 80098c6:	42a3      	cmp	r3, r4
 80098c8:	6025      	str	r5, [r4, #0]
 80098ca:	bf18      	it	ne
 80098cc:	6059      	strne	r1, [r3, #4]
 80098ce:	6863      	ldr	r3, [r4, #4]
 80098d0:	bf08      	it	eq
 80098d2:	6031      	streq	r1, [r6, #0]
 80098d4:	5162      	str	r2, [r4, r5]
 80098d6:	604b      	str	r3, [r1, #4]
 80098d8:	4638      	mov	r0, r7
 80098da:	f104 060b 	add.w	r6, r4, #11
 80098de:	f000 f865 	bl	80099ac <__malloc_unlock>
 80098e2:	f026 0607 	bic.w	r6, r6, #7
 80098e6:	1d23      	adds	r3, r4, #4
 80098e8:	1af2      	subs	r2, r6, r3
 80098ea:	d0b6      	beq.n	800985a <_malloc_r+0x22>
 80098ec:	1b9b      	subs	r3, r3, r6
 80098ee:	50a3      	str	r3, [r4, r2]
 80098f0:	e7b3      	b.n	800985a <_malloc_r+0x22>
 80098f2:	6862      	ldr	r2, [r4, #4]
 80098f4:	42a3      	cmp	r3, r4
 80098f6:	bf0c      	ite	eq
 80098f8:	6032      	streq	r2, [r6, #0]
 80098fa:	605a      	strne	r2, [r3, #4]
 80098fc:	e7ec      	b.n	80098d8 <_malloc_r+0xa0>
 80098fe:	4623      	mov	r3, r4
 8009900:	6864      	ldr	r4, [r4, #4]
 8009902:	e7b2      	b.n	800986a <_malloc_r+0x32>
 8009904:	4634      	mov	r4, r6
 8009906:	6876      	ldr	r6, [r6, #4]
 8009908:	e7b9      	b.n	800987e <_malloc_r+0x46>
 800990a:	230c      	movs	r3, #12
 800990c:	603b      	str	r3, [r7, #0]
 800990e:	4638      	mov	r0, r7
 8009910:	f000 f84c 	bl	80099ac <__malloc_unlock>
 8009914:	e7a1      	b.n	800985a <_malloc_r+0x22>
 8009916:	6025      	str	r5, [r4, #0]
 8009918:	e7de      	b.n	80098d8 <_malloc_r+0xa0>
 800991a:	bf00      	nop
 800991c:	24009f0c 	.word	0x24009f0c

08009920 <_realloc_r>:
 8009920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009924:	4680      	mov	r8, r0
 8009926:	4614      	mov	r4, r2
 8009928:	460e      	mov	r6, r1
 800992a:	b921      	cbnz	r1, 8009936 <_realloc_r+0x16>
 800992c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009930:	4611      	mov	r1, r2
 8009932:	f7ff bf81 	b.w	8009838 <_malloc_r>
 8009936:	b92a      	cbnz	r2, 8009944 <_realloc_r+0x24>
 8009938:	f7ff ff12 	bl	8009760 <_free_r>
 800993c:	4625      	mov	r5, r4
 800993e:	4628      	mov	r0, r5
 8009940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009944:	f000 f838 	bl	80099b8 <_malloc_usable_size_r>
 8009948:	4284      	cmp	r4, r0
 800994a:	4607      	mov	r7, r0
 800994c:	d802      	bhi.n	8009954 <_realloc_r+0x34>
 800994e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009952:	d812      	bhi.n	800997a <_realloc_r+0x5a>
 8009954:	4621      	mov	r1, r4
 8009956:	4640      	mov	r0, r8
 8009958:	f7ff ff6e 	bl	8009838 <_malloc_r>
 800995c:	4605      	mov	r5, r0
 800995e:	2800      	cmp	r0, #0
 8009960:	d0ed      	beq.n	800993e <_realloc_r+0x1e>
 8009962:	42bc      	cmp	r4, r7
 8009964:	4622      	mov	r2, r4
 8009966:	4631      	mov	r1, r6
 8009968:	bf28      	it	cs
 800996a:	463a      	movcs	r2, r7
 800996c:	f7ff fed0 	bl	8009710 <memcpy>
 8009970:	4631      	mov	r1, r6
 8009972:	4640      	mov	r0, r8
 8009974:	f7ff fef4 	bl	8009760 <_free_r>
 8009978:	e7e1      	b.n	800993e <_realloc_r+0x1e>
 800997a:	4635      	mov	r5, r6
 800997c:	e7df      	b.n	800993e <_realloc_r+0x1e>
	...

08009980 <_sbrk_r>:
 8009980:	b538      	push	{r3, r4, r5, lr}
 8009982:	4d06      	ldr	r5, [pc, #24]	; (800999c <_sbrk_r+0x1c>)
 8009984:	2300      	movs	r3, #0
 8009986:	4604      	mov	r4, r0
 8009988:	4608      	mov	r0, r1
 800998a:	602b      	str	r3, [r5, #0]
 800998c:	f7f8 f942 	bl	8001c14 <_sbrk>
 8009990:	1c43      	adds	r3, r0, #1
 8009992:	d102      	bne.n	800999a <_sbrk_r+0x1a>
 8009994:	682b      	ldr	r3, [r5, #0]
 8009996:	b103      	cbz	r3, 800999a <_sbrk_r+0x1a>
 8009998:	6023      	str	r3, [r4, #0]
 800999a:	bd38      	pop	{r3, r4, r5, pc}
 800999c:	24009f14 	.word	0x24009f14

080099a0 <__malloc_lock>:
 80099a0:	4801      	ldr	r0, [pc, #4]	; (80099a8 <__malloc_lock+0x8>)
 80099a2:	f000 b811 	b.w	80099c8 <__retarget_lock_acquire_recursive>
 80099a6:	bf00      	nop
 80099a8:	24009f18 	.word	0x24009f18

080099ac <__malloc_unlock>:
 80099ac:	4801      	ldr	r0, [pc, #4]	; (80099b4 <__malloc_unlock+0x8>)
 80099ae:	f000 b80c 	b.w	80099ca <__retarget_lock_release_recursive>
 80099b2:	bf00      	nop
 80099b4:	24009f18 	.word	0x24009f18

080099b8 <_malloc_usable_size_r>:
 80099b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099bc:	1f18      	subs	r0, r3, #4
 80099be:	2b00      	cmp	r3, #0
 80099c0:	bfbc      	itt	lt
 80099c2:	580b      	ldrlt	r3, [r1, r0]
 80099c4:	18c0      	addlt	r0, r0, r3
 80099c6:	4770      	bx	lr

080099c8 <__retarget_lock_acquire_recursive>:
 80099c8:	4770      	bx	lr

080099ca <__retarget_lock_release_recursive>:
 80099ca:	4770      	bx	lr

080099cc <_init>:
 80099cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ce:	bf00      	nop
 80099d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099d2:	bc08      	pop	{r3}
 80099d4:	469e      	mov	lr, r3
 80099d6:	4770      	bx	lr

080099d8 <_fini>:
 80099d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099da:	bf00      	nop
 80099dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099de:	bc08      	pop	{r3}
 80099e0:	469e      	mov	lr, r3
 80099e2:	4770      	bx	lr
