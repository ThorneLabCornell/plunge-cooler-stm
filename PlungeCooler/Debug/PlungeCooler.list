
PlungeCooler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae90  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800b140  0800b140  0001b140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b1b0  0800b1b0  0001b1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b1b8  0800b1b8  0001b1b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b1bc  0800b1bc  0001b1bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  24000000  0800b1c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001d834  24000068  0800b228  00020068  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2401d89c  0800b228  0002d89c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY
 11 .debug_info   00018d40  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000029f3  00000000  00000000  00038e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001320  00000000  00000000  0003b810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000efd  00000000  00000000  0003cb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003274f  00000000  00000000  0003da2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00019962  00000000  00000000  0007017c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00153772  00000000  00000000  00089ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005798  00000000  00000000  001dd250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  001e29e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000068 	.word	0x24000068
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800b128 	.word	0x0800b128

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	0800b128 	.word	0x0800b128

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b970 	b.w	8000698 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9e08      	ldr	r6, [sp, #32]
 80003d6:	460d      	mov	r5, r1
 80003d8:	4604      	mov	r4, r0
 80003da:	460f      	mov	r7, r1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d14a      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4694      	mov	ip, r2
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0xe2>
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	b143      	cbz	r3, 80003fe <__udivmoddi4+0x2e>
 80003ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80003f0:	f1c3 0220 	rsb	r2, r3, #32
 80003f4:	409f      	lsls	r7, r3
 80003f6:	fa20 f202 	lsr.w	r2, r0, r2
 80003fa:	4317      	orrs	r7, r2
 80003fc:	409c      	lsls	r4, r3
 80003fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000402:	fa1f f58c 	uxth.w	r5, ip
 8000406:	fbb7 f1fe 	udiv	r1, r7, lr
 800040a:	0c22      	lsrs	r2, r4, #16
 800040c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000410:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000414:	fb01 f005 	mul.w	r0, r1, r5
 8000418:	4290      	cmp	r0, r2
 800041a:	d90a      	bls.n	8000432 <__udivmoddi4+0x62>
 800041c:	eb1c 0202 	adds.w	r2, ip, r2
 8000420:	f101 37ff 	add.w	r7, r1, #4294967295
 8000424:	f080 811c 	bcs.w	8000660 <__udivmoddi4+0x290>
 8000428:	4290      	cmp	r0, r2
 800042a:	f240 8119 	bls.w	8000660 <__udivmoddi4+0x290>
 800042e:	3902      	subs	r1, #2
 8000430:	4462      	add	r2, ip
 8000432:	1a12      	subs	r2, r2, r0
 8000434:	b2a4      	uxth	r4, r4
 8000436:	fbb2 f0fe 	udiv	r0, r2, lr
 800043a:	fb0e 2210 	mls	r2, lr, r0, r2
 800043e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000442:	fb00 f505 	mul.w	r5, r0, r5
 8000446:	42a5      	cmp	r5, r4
 8000448:	d90a      	bls.n	8000460 <__udivmoddi4+0x90>
 800044a:	eb1c 0404 	adds.w	r4, ip, r4
 800044e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000452:	f080 8107 	bcs.w	8000664 <__udivmoddi4+0x294>
 8000456:	42a5      	cmp	r5, r4
 8000458:	f240 8104 	bls.w	8000664 <__udivmoddi4+0x294>
 800045c:	4464      	add	r4, ip
 800045e:	3802      	subs	r0, #2
 8000460:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000464:	1b64      	subs	r4, r4, r5
 8000466:	2100      	movs	r1, #0
 8000468:	b11e      	cbz	r6, 8000472 <__udivmoddi4+0xa2>
 800046a:	40dc      	lsrs	r4, r3
 800046c:	2300      	movs	r3, #0
 800046e:	e9c6 4300 	strd	r4, r3, [r6]
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0xbc>
 800047a:	2e00      	cmp	r6, #0
 800047c:	f000 80ed 	beq.w	800065a <__udivmoddi4+0x28a>
 8000480:	2100      	movs	r1, #0
 8000482:	e9c6 0500 	strd	r0, r5, [r6]
 8000486:	4608      	mov	r0, r1
 8000488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048c:	fab3 f183 	clz	r1, r3
 8000490:	2900      	cmp	r1, #0
 8000492:	d149      	bne.n	8000528 <__udivmoddi4+0x158>
 8000494:	42ab      	cmp	r3, r5
 8000496:	d302      	bcc.n	800049e <__udivmoddi4+0xce>
 8000498:	4282      	cmp	r2, r0
 800049a:	f200 80f8 	bhi.w	800068e <__udivmoddi4+0x2be>
 800049e:	1a84      	subs	r4, r0, r2
 80004a0:	eb65 0203 	sbc.w	r2, r5, r3
 80004a4:	2001      	movs	r0, #1
 80004a6:	4617      	mov	r7, r2
 80004a8:	2e00      	cmp	r6, #0
 80004aa:	d0e2      	beq.n	8000472 <__udivmoddi4+0xa2>
 80004ac:	e9c6 4700 	strd	r4, r7, [r6]
 80004b0:	e7df      	b.n	8000472 <__udivmoddi4+0xa2>
 80004b2:	b902      	cbnz	r2, 80004b6 <__udivmoddi4+0xe6>
 80004b4:	deff      	udf	#255	; 0xff
 80004b6:	fab2 f382 	clz	r3, r2
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	f040 8090 	bne.w	80005e0 <__udivmoddi4+0x210>
 80004c0:	1a8a      	subs	r2, r1, r2
 80004c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c6:	fa1f fe8c 	uxth.w	lr, ip
 80004ca:	2101      	movs	r1, #1
 80004cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004d0:	fb07 2015 	mls	r0, r7, r5, r2
 80004d4:	0c22      	lsrs	r2, r4, #16
 80004d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004da:	fb0e f005 	mul.w	r0, lr, r5
 80004de:	4290      	cmp	r0, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x124>
 80004e2:	eb1c 0202 	adds.w	r2, ip, r2
 80004e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x122>
 80004ec:	4290      	cmp	r0, r2
 80004ee:	f200 80cb 	bhi.w	8000688 <__udivmoddi4+0x2b8>
 80004f2:	4645      	mov	r5, r8
 80004f4:	1a12      	subs	r2, r2, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000500:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000504:	fb0e fe00 	mul.w	lr, lr, r0
 8000508:	45a6      	cmp	lr, r4
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x14e>
 800050c:	eb1c 0404 	adds.w	r4, ip, r4
 8000510:	f100 32ff 	add.w	r2, r0, #4294967295
 8000514:	d202      	bcs.n	800051c <__udivmoddi4+0x14c>
 8000516:	45a6      	cmp	lr, r4
 8000518:	f200 80bb 	bhi.w	8000692 <__udivmoddi4+0x2c2>
 800051c:	4610      	mov	r0, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000526:	e79f      	b.n	8000468 <__udivmoddi4+0x98>
 8000528:	f1c1 0720 	rsb	r7, r1, #32
 800052c:	408b      	lsls	r3, r1
 800052e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000532:	ea4c 0c03 	orr.w	ip, ip, r3
 8000536:	fa05 f401 	lsl.w	r4, r5, r1
 800053a:	fa20 f307 	lsr.w	r3, r0, r7
 800053e:	40fd      	lsrs	r5, r7
 8000540:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000544:	4323      	orrs	r3, r4
 8000546:	fbb5 f8f9 	udiv	r8, r5, r9
 800054a:	fa1f fe8c 	uxth.w	lr, ip
 800054e:	fb09 5518 	mls	r5, r9, r8, r5
 8000552:	0c1c      	lsrs	r4, r3, #16
 8000554:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000558:	fb08 f50e 	mul.w	r5, r8, lr
 800055c:	42a5      	cmp	r5, r4
 800055e:	fa02 f201 	lsl.w	r2, r2, r1
 8000562:	fa00 f001 	lsl.w	r0, r0, r1
 8000566:	d90b      	bls.n	8000580 <__udivmoddi4+0x1b0>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000570:	f080 8088 	bcs.w	8000684 <__udivmoddi4+0x2b4>
 8000574:	42a5      	cmp	r5, r4
 8000576:	f240 8085 	bls.w	8000684 <__udivmoddi4+0x2b4>
 800057a:	f1a8 0802 	sub.w	r8, r8, #2
 800057e:	4464      	add	r4, ip
 8000580:	1b64      	subs	r4, r4, r5
 8000582:	b29d      	uxth	r5, r3
 8000584:	fbb4 f3f9 	udiv	r3, r4, r9
 8000588:	fb09 4413 	mls	r4, r9, r3, r4
 800058c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000590:	fb03 fe0e 	mul.w	lr, r3, lr
 8000594:	45a6      	cmp	lr, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x1da>
 8000598:	eb1c 0404 	adds.w	r4, ip, r4
 800059c:	f103 35ff 	add.w	r5, r3, #4294967295
 80005a0:	d26c      	bcs.n	800067c <__udivmoddi4+0x2ac>
 80005a2:	45a6      	cmp	lr, r4
 80005a4:	d96a      	bls.n	800067c <__udivmoddi4+0x2ac>
 80005a6:	3b02      	subs	r3, #2
 80005a8:	4464      	add	r4, ip
 80005aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ae:	fba3 9502 	umull	r9, r5, r3, r2
 80005b2:	eba4 040e 	sub.w	r4, r4, lr
 80005b6:	42ac      	cmp	r4, r5
 80005b8:	46c8      	mov	r8, r9
 80005ba:	46ae      	mov	lr, r5
 80005bc:	d356      	bcc.n	800066c <__udivmoddi4+0x29c>
 80005be:	d053      	beq.n	8000668 <__udivmoddi4+0x298>
 80005c0:	b156      	cbz	r6, 80005d8 <__udivmoddi4+0x208>
 80005c2:	ebb0 0208 	subs.w	r2, r0, r8
 80005c6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ca:	fa04 f707 	lsl.w	r7, r4, r7
 80005ce:	40ca      	lsrs	r2, r1
 80005d0:	40cc      	lsrs	r4, r1
 80005d2:	4317      	orrs	r7, r2
 80005d4:	e9c6 7400 	strd	r7, r4, [r6]
 80005d8:	4618      	mov	r0, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e0:	f1c3 0120 	rsb	r1, r3, #32
 80005e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005e8:	fa20 f201 	lsr.w	r2, r0, r1
 80005ec:	fa25 f101 	lsr.w	r1, r5, r1
 80005f0:	409d      	lsls	r5, r3
 80005f2:	432a      	orrs	r2, r5
 80005f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f8:	fa1f fe8c 	uxth.w	lr, ip
 80005fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000600:	fb07 1510 	mls	r5, r7, r0, r1
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800060a:	fb00 f50e 	mul.w	r5, r0, lr
 800060e:	428d      	cmp	r5, r1
 8000610:	fa04 f403 	lsl.w	r4, r4, r3
 8000614:	d908      	bls.n	8000628 <__udivmoddi4+0x258>
 8000616:	eb1c 0101 	adds.w	r1, ip, r1
 800061a:	f100 38ff 	add.w	r8, r0, #4294967295
 800061e:	d22f      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000620:	428d      	cmp	r5, r1
 8000622:	d92d      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000624:	3802      	subs	r0, #2
 8000626:	4461      	add	r1, ip
 8000628:	1b49      	subs	r1, r1, r5
 800062a:	b292      	uxth	r2, r2
 800062c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000630:	fb07 1115 	mls	r1, r7, r5, r1
 8000634:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000638:	fb05 f10e 	mul.w	r1, r5, lr
 800063c:	4291      	cmp	r1, r2
 800063e:	d908      	bls.n	8000652 <__udivmoddi4+0x282>
 8000640:	eb1c 0202 	adds.w	r2, ip, r2
 8000644:	f105 38ff 	add.w	r8, r5, #4294967295
 8000648:	d216      	bcs.n	8000678 <__udivmoddi4+0x2a8>
 800064a:	4291      	cmp	r1, r2
 800064c:	d914      	bls.n	8000678 <__udivmoddi4+0x2a8>
 800064e:	3d02      	subs	r5, #2
 8000650:	4462      	add	r2, ip
 8000652:	1a52      	subs	r2, r2, r1
 8000654:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000658:	e738      	b.n	80004cc <__udivmoddi4+0xfc>
 800065a:	4631      	mov	r1, r6
 800065c:	4630      	mov	r0, r6
 800065e:	e708      	b.n	8000472 <__udivmoddi4+0xa2>
 8000660:	4639      	mov	r1, r7
 8000662:	e6e6      	b.n	8000432 <__udivmoddi4+0x62>
 8000664:	4610      	mov	r0, r2
 8000666:	e6fb      	b.n	8000460 <__udivmoddi4+0x90>
 8000668:	4548      	cmp	r0, r9
 800066a:	d2a9      	bcs.n	80005c0 <__udivmoddi4+0x1f0>
 800066c:	ebb9 0802 	subs.w	r8, r9, r2
 8000670:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000674:	3b01      	subs	r3, #1
 8000676:	e7a3      	b.n	80005c0 <__udivmoddi4+0x1f0>
 8000678:	4645      	mov	r5, r8
 800067a:	e7ea      	b.n	8000652 <__udivmoddi4+0x282>
 800067c:	462b      	mov	r3, r5
 800067e:	e794      	b.n	80005aa <__udivmoddi4+0x1da>
 8000680:	4640      	mov	r0, r8
 8000682:	e7d1      	b.n	8000628 <__udivmoddi4+0x258>
 8000684:	46d0      	mov	r8, sl
 8000686:	e77b      	b.n	8000580 <__udivmoddi4+0x1b0>
 8000688:	3d02      	subs	r5, #2
 800068a:	4462      	add	r2, ip
 800068c:	e732      	b.n	80004f4 <__udivmoddi4+0x124>
 800068e:	4608      	mov	r0, r1
 8000690:	e70a      	b.n	80004a8 <__udivmoddi4+0xd8>
 8000692:	4464      	add	r4, ip
 8000694:	3802      	subs	r0, #2
 8000696:	e742      	b.n	800051e <__udivmoddi4+0x14e>

08000698 <__aeabi_idiv0>:
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80006a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	db0b      	blt.n	80006c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ae:	88fb      	ldrh	r3, [r7, #6]
 80006b0:	f003 021f 	and.w	r2, r3, #31
 80006b4:	4907      	ldr	r1, [pc, #28]	; (80006d4 <__NVIC_EnableIRQ+0x38>)
 80006b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006ba:	095b      	lsrs	r3, r3, #5
 80006bc:	2001      	movs	r0, #1
 80006be:	fa00 f202 	lsl.w	r2, r0, r2
 80006c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	e000e100 	.word	0xe000e100

080006d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	6039      	str	r1, [r7, #0]
 80006e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80006e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	db0a      	blt.n	8000702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	490c      	ldr	r1, [pc, #48]	; (8000724 <__NVIC_SetPriority+0x4c>)
 80006f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006f6:	0112      	lsls	r2, r2, #4
 80006f8:	b2d2      	uxtb	r2, r2
 80006fa:	440b      	add	r3, r1
 80006fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000700:	e00a      	b.n	8000718 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4908      	ldr	r1, [pc, #32]	; (8000728 <__NVIC_SetPriority+0x50>)
 8000708:	88fb      	ldrh	r3, [r7, #6]
 800070a:	f003 030f 	and.w	r3, r3, #15
 800070e:	3b04      	subs	r3, #4
 8000710:	0112      	lsls	r2, r2, #4
 8000712:	b2d2      	uxtb	r2, r2
 8000714:	440b      	add	r3, r1
 8000716:	761a      	strb	r2, [r3, #24]
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000e100 	.word	0xe000e100
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <HAL_UART_RxCpltCallback>:
void bad(void) {
	HAL_UART_Transmit(&huart3, tx_bad, 3, HAL_MAX_DELAY);
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
    rxBuffer[rxIndex] = received_character[0];
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <HAL_UART_RxCpltCallback+0x54>)
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <HAL_UART_RxCpltCallback+0x58>)
 800073c:	7819      	ldrb	r1, [r3, #0]
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <HAL_UART_RxCpltCallback+0x5c>)
 8000740:	5499      	strb	r1, [r3, r2]
	rxIndex++;
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <HAL_UART_RxCpltCallback+0x54>)
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	3301      	adds	r3, #1
 8000748:	b29a      	uxth	r2, r3
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <HAL_UART_RxCpltCallback+0x54>)
 800074c:	801a      	strh	r2, [r3, #0]

	if (received_character[0] == '\n' || received_character[0] == '\r') { //ie end of message, stop receiving. 
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <HAL_UART_RxCpltCallback+0x58>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b0a      	cmp	r3, #10
 8000754:	d003      	beq.n	800075e <HAL_UART_RxCpltCallback+0x32>
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <HAL_UART_RxCpltCallback+0x58>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b0d      	cmp	r3, #13
 800075c:	d105      	bne.n	800076a <HAL_UART_RxCpltCallback+0x3e>
    	rxIndex = 0;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <HAL_UART_RxCpltCallback+0x54>)
 8000760:	2200      	movs	r2, #0
 8000762:	801a      	strh	r2, [r3, #0]
    	rx_handle();
 8000764:	f000 f814 	bl	8000790 <rx_handle>
 8000768:	e005      	b.n	8000776 <HAL_UART_RxCpltCallback+0x4a>
    } else {
        HAL_UART_Receive_IT(&huart3, received_character, 1);
 800076a:	2201      	movs	r2, #1
 800076c:	4905      	ldr	r1, [pc, #20]	; (8000784 <HAL_UART_RxCpltCallback+0x58>)
 800076e:	4807      	ldr	r0, [pc, #28]	; (800078c <HAL_UART_RxCpltCallback+0x60>)
 8000770:	f007 fbe8 	bl	8007f44 <HAL_UART_Receive_IT>
    }
}
 8000774:	bf00      	nop
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	2401d73c 	.word	0x2401d73c
 8000784:	2401d740 	.word	0x2401d740
 8000788:	2401d6d8 	.word	0x2401d6d8
 800078c:	24000180 	.word	0x24000180

08000790 <rx_handle>:

void rx_handle(void) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, val);
 8000796:	4b49      	ldr	r3, [pc, #292]	; (80008bc <rx_handle+0x12c>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	461a      	mov	r2, r3
 800079c:	2102      	movs	r1, #2
 800079e:	4848      	ldr	r0, [pc, #288]	; (80008c0 <rx_handle+0x130>)
 80007a0:	f003 f98a 	bl	8003ab8 <HAL_GPIO_WritePin>
	if(val)
 80007a4:	4b45      	ldr	r3, [pc, #276]	; (80008bc <rx_handle+0x12c>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d003      	beq.n	80007b4 <rx_handle+0x24>
		val = 0;
 80007ac:	4b43      	ldr	r3, [pc, #268]	; (80008bc <rx_handle+0x12c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	701a      	strb	r2, [r3, #0]
 80007b2:	e002      	b.n	80007ba <rx_handle+0x2a>
	else
		val = 1;
 80007b4:	4b41      	ldr	r3, [pc, #260]	; (80008bc <rx_handle+0x12c>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	701a      	strb	r2, [r3, #0]
	//sprintf(num, "RX0: %d\r\n", rxBuffer[0]);
	//HAL_UART_Transmit(&huart3, (uint8_t*)num, strlen(num), HAL_MAX_DELAY);
	switch(rxBuffer[0]) {
 80007ba:	4b42      	ldr	r3, [pc, #264]	; (80008c4 <rx_handle+0x134>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b34      	cmp	r3, #52	; 0x34
 80007c0:	d02b      	beq.n	800081a <rx_handle+0x8a>
 80007c2:	2b34      	cmp	r3, #52	; 0x34
 80007c4:	dc71      	bgt.n	80008aa <rx_handle+0x11a>
 80007c6:	2b32      	cmp	r3, #50	; 0x32
 80007c8:	d002      	beq.n	80007d0 <rx_handle+0x40>
 80007ca:	2b33      	cmp	r3, #51	; 0x33
 80007cc:	d050      	beq.n	8000870 <rx_handle+0xe0>
 80007ce:	e06c      	b.n	80008aa <rx_handle+0x11a>
		case PLUNGE: ;

			/* reset tracking variables */
			log_position = 0;
 80007d0:	4b3d      	ldr	r3, [pc, #244]	; (80008c8 <rx_handle+0x138>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
			memset(posLog, 0, sizeof(posLog));
 80007d6:	f64e 2260 	movw	r2, #60000	; 0xea60
 80007da:	2100      	movs	r1, #0
 80007dc:	483b      	ldr	r0, [pc, #236]	; (80008cc <rx_handle+0x13c>)
 80007de:	f00a f81f 	bl	800a820 <memset>
      memset(thermoLog, 0, sizeof(thermoLog));
 80007e2:	f64e 2260 	movw	r2, #60000	; 0xea60
 80007e6:	2100      	movs	r1, #0
 80007e8:	4839      	ldr	r0, [pc, #228]	; (80008d0 <rx_handle+0x140>)
 80007ea:	f00a f819 	bl	800a820 <memset>

			TIM2->CR1  |=  TIM_CR1_CEN; 	//start counter for encoder 
 80007ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6013      	str	r3, [r2, #0]

			TIM5->CR1  |= TIM_CR1_CEN; // Start TIM5 to commence data collection
 80007fe:	4b35      	ldr	r3, [pc, #212]	; (80008d4 <rx_handle+0x144>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a34      	ldr	r2, [pc, #208]	; (80008d4 <rx_handle+0x144>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6013      	str	r3, [r2, #0]

      HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 800080a:	f04f 33ff 	mov.w	r3, #4294967295
 800080e:	2203      	movs	r2, #3
 8000810:	4931      	ldr	r1, [pc, #196]	; (80008d8 <rx_handle+0x148>)
 8000812:	4832      	ldr	r0, [pc, #200]	; (80008dc <rx_handle+0x14c>)
 8000814:	f007 fb08 	bl	8007e28 <HAL_UART_Transmit>

			break;
 8000818:	e047      	b.n	80008aa <rx_handle+0x11a>

    case FETCH: ; 
      HAL_ADC_Start(&hadc2);
 800081a:	4831      	ldr	r0, [pc, #196]	; (80008e0 <rx_handle+0x150>)
 800081c:	f001 fb58 	bl	8001ed0 <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8000820:	f04f 31ff 	mov.w	r1, #4294967295
 8000824:	482e      	ldr	r0, [pc, #184]	; (80008e0 <rx_handle+0x150>)
 8000826:	f001 fc0d 	bl	8002044 <HAL_ADC_PollForConversion>
      nudge_temp = HAL_ADC_GetValue(&hadc2);
 800082a:	482d      	ldr	r0, [pc, #180]	; (80008e0 <rx_handle+0x150>)
 800082c:	f001 fce2 	bl	80021f4 <HAL_ADC_GetValue>
 8000830:	4603      	mov	r3, r0
 8000832:	b29a      	uxth	r2, r3
 8000834:	4b2b      	ldr	r3, [pc, #172]	; (80008e4 <rx_handle+0x154>)
 8000836:	801a      	strh	r2, [r3, #0]
      char msg[10];
      sprintf(msg, "%u\n", nudge_temp);
 8000838:	4b2a      	ldr	r3, [pc, #168]	; (80008e4 <rx_handle+0x154>)
 800083a:	881b      	ldrh	r3, [r3, #0]
 800083c:	461a      	mov	r2, r3
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	4929      	ldr	r1, [pc, #164]	; (80008e8 <rx_handle+0x158>)
 8000842:	4618      	mov	r0, r3
 8000844:	f009 ffcc 	bl	800a7e0 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fd50 	bl	80002f0 <strlen>
 8000850:	4603      	mov	r3, r0
 8000852:	b29a      	uxth	r2, r3
 8000854:	1d39      	adds	r1, r7, #4
 8000856:	f04f 33ff 	mov.w	r3, #4294967295
 800085a:	4820      	ldr	r0, [pc, #128]	; (80008dc <rx_handle+0x14c>)
 800085c:	f007 fae4 	bl	8007e28 <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000860:	f04f 33ff 	mov.w	r3, #4294967295
 8000864:	2203      	movs	r2, #3
 8000866:	491c      	ldr	r1, [pc, #112]	; (80008d8 <rx_handle+0x148>)
 8000868:	481c      	ldr	r0, [pc, #112]	; (80008dc <rx_handle+0x14c>)
 800086a:	f007 fadd 	bl	8007e28 <HAL_UART_Transmit>

      break;
 800086e:	e01c      	b.n	80008aa <rx_handle+0x11a>

    case END: ;

      TIM5->CR1  |= TIM_CR1_UDIS;	// make sure update is disabled
 8000870:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <rx_handle+0x144>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a17      	ldr	r2, [pc, #92]	; (80008d4 <rx_handle+0x144>)
 8000876:	f043 0302 	orr.w	r3, r3, #2
 800087a:	6013      	str	r3, [r2, #0]
      TIM5->DIER &=  ~TIM_DIER_UIE; 	// update interrupt disabled
 800087c:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <rx_handle+0x144>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	4a14      	ldr	r2, [pc, #80]	; (80008d4 <rx_handle+0x144>)
 8000882:	f023 0301 	bic.w	r3, r3, #1
 8000886:	60d3      	str	r3, [r2, #12]
      TIM2->CR1 &= ~TIM_CR1_CEN;		// disable tim2
 8000888:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000892:	f023 0301 	bic.w	r3, r3, #1
 8000896:	6013      	str	r3, [r2, #0]
		  TIM5->CR1  &= ~TIM_CR1_CEN; 	// disable tim5 
 8000898:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <rx_handle+0x144>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a0d      	ldr	r2, [pc, #52]	; (80008d4 <rx_handle+0x144>)
 800089e:	f023 0301 	bic.w	r3, r3, #1
 80008a2:	6013      	str	r3, [r2, #0]
      plunge_done_flag = 1; 
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <rx_handle+0x15c>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	701a      	strb	r2, [r3, #0]


//	char b[] = "done handling\r\n";
//	HAL_UART_Transmit(&huart3, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);

    HAL_UART_Receive_IT(&huart3, received_character, 1);
 80008aa:	2201      	movs	r2, #1
 80008ac:	4910      	ldr	r1, [pc, #64]	; (80008f0 <rx_handle+0x160>)
 80008ae:	480b      	ldr	r0, [pc, #44]	; (80008dc <rx_handle+0x14c>)
 80008b0:	f007 fb48 	bl	8007f44 <HAL_UART_Receive_IT>
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	24000000 	.word	0x24000000
 80008c0:	58021000 	.word	0x58021000
 80008c4:	2401d6d8 	.word	0x2401d6d8
 80008c8:	2401d6d4 	.word	0x2401d6d4
 80008cc:	24000214 	.word	0x24000214
 80008d0:	2400ec74 	.word	0x2400ec74
 80008d4:	40000c00 	.word	0x40000c00
 80008d8:	24000004 	.word	0x24000004
 80008dc:	24000180 	.word	0x24000180
 80008e0:	24000084 	.word	0x24000084
 80008e4:	2401d742 	.word	0x2401d742
 80008e8:	0800b140 	.word	0x0800b140
 80008ec:	2401d741 	.word	0x2401d741
 80008f0:	2401d740 	.word	0x2401d740

080008f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fa:	f000 ff1b 	bl	8001734 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fe:	f000 f93d 	bl	8000b7c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000902:	f000 fb25 	bl	8000f50 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000906:	f000 fa15 	bl	8000d34 <MX_TIM2_Init>
  MX_USB_OTG_HS_USB_Init();
 800090a:	f000 fb19 	bl	8000f40 <MX_USB_OTG_HS_USB_Init>
  MX_USART3_UART_Init();
 800090e:	f000 facb 	bl	8000ea8 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8000912:	f000 fa7b 	bl	8000e0c <MX_TIM5_Init>
  MX_ADC2_Init();
 8000916:	f000 f9a7 	bl	8000c68 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  /* configuring encoder counter */
  TIM2->CR1  &= ~TIM_CR1_CEN;
 800091a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000924:	f023 0301 	bic.w	r3, r3, #1
 8000928:	6013      	str	r3, [r2, #0]

  TIM2->CNT   =  100;				// 100 included here and in ARR to make sure it doesnt immediately underflow if it vibrates up
 800092a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800092e:	2264      	movs	r2, #100	; 0x64
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
  TIM2->ARR 	= 40000; 		// Counter will not roll over in entire plunge path, will be stopped and reset by usart interupt handler. 
 8000932:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000936:	f649 4240 	movw	r2, #40000	; 0x9c40
 800093a:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM2->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 800093c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000940:	691b      	ldr	r3, [r3, #16]
 8000942:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000946:	f023 0301 	bic.w	r3, r3, #1
 800094a:	6113      	str	r3, [r2, #16]
  TIM2->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 800094c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000956:	f023 0302 	bic.w	r3, r3, #2
 800095a:	6013      	str	r3, [r2, #0]
  TIM2->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 800095c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000960:	68db      	ldr	r3, [r3, #12]
 8000962:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000966:	f043 0301 	orr.w	r3, r3, #1
 800096a:	60d3      	str	r3, [r2, #12]
  TIM2->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 800096c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800097a:	6013      	str	r3, [r2, #0]

    /* configuring data logging timer */
  TIM5->CR1  &= ~TIM_CR1_CEN; 
 800097c:	4b76      	ldr	r3, [pc, #472]	; (8000b58 <main+0x264>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a75      	ldr	r2, [pc, #468]	; (8000b58 <main+0x264>)
 8000982:	f023 0301 	bic.w	r3, r3, #1
 8000986:	6013      	str	r3, [r2, #0]

  TIM5-> CNT  = 100;				//
 8000988:	4b73      	ldr	r3, [pc, #460]	; (8000b58 <main+0x264>)
 800098a:	2264      	movs	r2, #100	; 0x64
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
  TIM5->ARR 	= CLOCKS_PER_LOG; 	// check positione interval
 800098e:	4b72      	ldr	r3, [pc, #456]	; (8000b58 <main+0x264>)
 8000990:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8000994:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM5->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000996:	4b70      	ldr	r3, [pc, #448]	; (8000b58 <main+0x264>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a6f      	ldr	r2, [pc, #444]	; (8000b58 <main+0x264>)
 800099c:	f023 0302 	bic.w	r3, r3, #2
 80009a0:	6013      	str	r3, [r2, #0]
  TIM5->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 80009a2:	4b6d      	ldr	r3, [pc, #436]	; (8000b58 <main+0x264>)
 80009a4:	68db      	ldr	r3, [r3, #12]
 80009a6:	4a6c      	ldr	r2, [pc, #432]	; (8000b58 <main+0x264>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	60d3      	str	r3, [r2, #12]
  TIM5->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 80009ae:	4b6a      	ldr	r3, [pc, #424]	; (8000b58 <main+0x264>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a69      	ldr	r2, [pc, #420]	; (8000b58 <main+0x264>)
 80009b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b8:	6013      	str	r3, [r2, #0]
  TIM5->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 80009ba:	4b67      	ldr	r3, [pc, #412]	; (8000b58 <main+0x264>)
 80009bc:	691b      	ldr	r3, [r3, #16]
 80009be:	4a66      	ldr	r2, [pc, #408]	; (8000b58 <main+0x264>)
 80009c0:	f023 0301 	bic.w	r3, r3, #1
 80009c4:	6113      	str	r3, [r2, #16]


  HAL_UART_Receive_IT(&huart3, received_character, 1); // initialize interrupts
 80009c6:	2201      	movs	r2, #1
 80009c8:	4964      	ldr	r1, [pc, #400]	; (8000b5c <main+0x268>)
 80009ca:	4865      	ldr	r0, [pc, #404]	; (8000b60 <main+0x26c>)
 80009cc:	f007 faba 	bl	8007f44 <HAL_UART_Receive_IT>

//  char msg[] = "program start \r\n";
//  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

  // TIM2 for encoder tick counting
  NVIC_SetPriority(TIM2_IRQn, 1); // Braking is priority as long as dispense isnt happening
 80009d0:	2101      	movs	r1, #1
 80009d2:	201c      	movs	r0, #28
 80009d4:	f7ff fe80 	bl	80006d8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 80009d8:	201c      	movs	r0, #28
 80009da:	f7ff fe5f 	bl	800069c <__NVIC_EnableIRQ>

  // TIM5 for logkeeping and speed calculations and TIM4 setup
  NVIC_SetPriority(TIM5_IRQn, 2); // Log keeping should be interruptable
 80009de:	2102      	movs	r1, #2
 80009e0:	2032      	movs	r0, #50	; 0x32
 80009e2:	f7ff fe79 	bl	80006d8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 80009e6:	2032      	movs	r0, #50	; 0x32
 80009e8:	f7ff fe58 	bl	800069c <__NVIC_EnableIRQ>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1) {
	  if(plunge_done_flag) {
 80009ec:	4b5d      	ldr	r3, [pc, #372]	; (8000b64 <main+0x270>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d0fb      	beq.n	80009ec <main+0xf8>
		  HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 80009f4:	f04f 33ff 	mov.w	r3, #4294967295
 80009f8:	2203      	movs	r2, #3
 80009fa:	495b      	ldr	r1, [pc, #364]	; (8000b68 <main+0x274>)
 80009fc:	4858      	ldr	r0, [pc, #352]	; (8000b60 <main+0x26c>)
 80009fe:	f007 fa13 	bl	8007e28 <HAL_UART_Transmit>
		  char msg[10];
		  for(int i=0 ; i<log_position; i++) {
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
 8000a06:	e018      	b.n	8000a3a <main+0x146>
			  sprintf(msg, "%u\n", posLog[i]);
 8000a08:	4a58      	ldr	r2, [pc, #352]	; (8000b6c <main+0x278>)
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a10:	461a      	mov	r2, r3
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	4956      	ldr	r1, [pc, #344]	; (8000b70 <main+0x27c>)
 8000a16:	4618      	mov	r0, r3
 8000a18:	f009 fee2 	bl	800a7e0 <siprintf>
			  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fc66 	bl	80002f0 <strlen>
 8000a24:	4603      	mov	r3, r0
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	1d39      	adds	r1, r7, #4
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2e:	484c      	ldr	r0, [pc, #304]	; (8000b60 <main+0x26c>)
 8000a30:	f007 f9fa 	bl	8007e28 <HAL_UART_Transmit>
		  for(int i=0 ; i<log_position; i++) {
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	3301      	adds	r3, #1
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	697a      	ldr	r2, [r7, #20]
 8000a3c:	4b4d      	ldr	r3, [pc, #308]	; (8000b74 <main+0x280>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d3e1      	bcc.n	8000a08 <main+0x114>
		  }
		  HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000a44:	f04f 33ff 	mov.w	r3, #4294967295
 8000a48:	2203      	movs	r2, #3
 8000a4a:	4947      	ldr	r1, [pc, #284]	; (8000b68 <main+0x274>)
 8000a4c:	4844      	ldr	r0, [pc, #272]	; (8000b60 <main+0x26c>)
 8000a4e:	f007 f9eb 	bl	8007e28 <HAL_UART_Transmit>

      for(int i=0 ; i<log_position; i++) {
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	e018      	b.n	8000a8a <main+0x196>
			  sprintf(msg, "%u\n", thermoLog[i]);
 8000a58:	4a47      	ldr	r2, [pc, #284]	; (8000b78 <main+0x284>)
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a60:	461a      	mov	r2, r3
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	4942      	ldr	r1, [pc, #264]	; (8000b70 <main+0x27c>)
 8000a66:	4618      	mov	r0, r3
 8000a68:	f009 feba 	bl	800a7e0 <siprintf>
			  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff fc3e 	bl	80002f0 <strlen>
 8000a74:	4603      	mov	r3, r0
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	1d39      	adds	r1, r7, #4
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7e:	4838      	ldr	r0, [pc, #224]	; (8000b60 <main+0x26c>)
 8000a80:	f007 f9d2 	bl	8007e28 <HAL_UART_Transmit>
      for(int i=0 ; i<log_position; i++) {
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	3301      	adds	r3, #1
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	4b39      	ldr	r3, [pc, #228]	; (8000b74 <main+0x280>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d3e1      	bcc.n	8000a58 <main+0x164>
		  }

      //Prepare timers for the next plunge, do not enable yet 
      TIM2->CR1  &= ~TIM_CR1_CEN;
 8000a94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a9e:	f023 0301 	bic.w	r3, r3, #1
 8000aa2:	6013      	str	r3, [r2, #0]

      TIM2->CNT   =  100;				// 100 included here and in ARR to make sure it doesnt immediately underflow if it vibrates up
 8000aa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aa8:	2264      	movs	r2, #100	; 0x64
 8000aaa:	625a      	str	r2, [r3, #36]	; 0x24
      TIM2->ARR 	= 40000; 		// Counter will not roll over in entire plunge path, will be stopped and reset by usart interupt handler. 
 8000aac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ab0:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000ab4:	62da      	str	r2, [r3, #44]	; 0x2c
      TIM2->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000ab6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aba:	691b      	ldr	r3, [r3, #16]
 8000abc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ac0:	f023 0301 	bic.w	r3, r3, #1
 8000ac4:	6113      	str	r3, [r2, #16]
      TIM2->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000ac6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ad0:	f023 0302 	bic.w	r3, r3, #2
 8000ad4:	6013      	str	r3, [r2, #0]
      TIM2->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000ad6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	60d3      	str	r3, [r2, #12]
      TIM2->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000ae6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af4:	6013      	str	r3, [r2, #0]

        /* configuring data logging timer */
      TIM5->CR1  &= ~TIM_CR1_CEN; 
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <main+0x264>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a17      	ldr	r2, [pc, #92]	; (8000b58 <main+0x264>)
 8000afc:	f023 0301 	bic.w	r3, r3, #1
 8000b00:	6013      	str	r3, [r2, #0]

      TIM5-> CNT  = 100;				
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <main+0x264>)
 8000b04:	2264      	movs	r2, #100	; 0x64
 8000b06:	625a      	str	r2, [r3, #36]	; 0x24
      TIM5->ARR 	= CLOCKS_PER_LOG; 	// check positione interval
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <main+0x264>)
 8000b0a:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8000b0e:	62da      	str	r2, [r3, #44]	; 0x2c
      TIM5->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <main+0x264>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a10      	ldr	r2, [pc, #64]	; (8000b58 <main+0x264>)
 8000b16:	f023 0302 	bic.w	r3, r3, #2
 8000b1a:	6013      	str	r3, [r2, #0]
      TIM5->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <main+0x264>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	4a0d      	ldr	r2, [pc, #52]	; (8000b58 <main+0x264>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	60d3      	str	r3, [r2, #12]
      TIM5->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000b28:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <main+0x264>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <main+0x264>)
 8000b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b32:	6013      	str	r3, [r2, #0]
      TIM5->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <main+0x264>)
 8000b36:	691b      	ldr	r3, [r3, #16]
 8000b38:	4a07      	ldr	r2, [pc, #28]	; (8000b58 <main+0x264>)
 8000b3a:	f023 0301 	bic.w	r3, r3, #1
 8000b3e:	6113      	str	r3, [r2, #16]

      HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000b40:	f04f 33ff 	mov.w	r3, #4294967295
 8000b44:	2203      	movs	r2, #3
 8000b46:	4908      	ldr	r1, [pc, #32]	; (8000b68 <main+0x274>)
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <main+0x26c>)
 8000b4a:	f007 f96d 	bl	8007e28 <HAL_UART_Transmit>
		  plunge_done_flag = 0;
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <main+0x270>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
	  if(plunge_done_flag) {
 8000b54:	e74a      	b.n	80009ec <main+0xf8>
 8000b56:	bf00      	nop
 8000b58:	40000c00 	.word	0x40000c00
 8000b5c:	2401d740 	.word	0x2401d740
 8000b60:	24000180 	.word	0x24000180
 8000b64:	2401d741 	.word	0x2401d741
 8000b68:	24000004 	.word	0x24000004
 8000b6c:	24000214 	.word	0x24000214
 8000b70:	0800b140 	.word	0x0800b140
 8000b74:	2401d6d4 	.word	0x2401d6d4
 8000b78:	2400ec74 	.word	0x2400ec74

08000b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b09c      	sub	sp, #112	; 0x70
 8000b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b86:	224c      	movs	r2, #76	; 0x4c
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f009 fe48 	bl	800a820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	2220      	movs	r2, #32
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f009 fe42 	bl	800a820 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000b9c:	4b30      	ldr	r3, [pc, #192]	; (8000c60 <SystemClock_Config+0xe4>)
 8000b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ba6:	2004      	movs	r0, #4
 8000ba8:	f002 ffa0 	bl	8003aec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bac:	2300      	movs	r3, #0
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	4b2c      	ldr	r3, [pc, #176]	; (8000c64 <SystemClock_Config+0xe8>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	4a2b      	ldr	r2, [pc, #172]	; (8000c64 <SystemClock_Config+0xe8>)
 8000bb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bba:	6193      	str	r3, [r2, #24]
 8000bbc:	4b29      	ldr	r3, [pc, #164]	; (8000c64 <SystemClock_Config+0xe8>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bc4:	603b      	str	r3, [r7, #0]
 8000bc6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bc8:	bf00      	nop
 8000bca:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <SystemClock_Config+0xe8>)
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bd6:	d1f8      	bne.n	8000bca <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000bd8:	2321      	movs	r3, #33	; 0x21
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bdc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000be2:	2301      	movs	r3, #1
 8000be4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be6:	2302      	movs	r3, #2
 8000be8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bea:	2302      	movs	r3, #2
 8000bec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000bf2:	2318      	movs	r3, #24
 8000bf4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c02:	230c      	movs	r3, #12
 8000c04:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c12:	4618      	mov	r0, r3
 8000c14:	f002 ffc4 	bl	8003ba0 <HAL_RCC_OscConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c1e:	f000 fab1 	bl	8001184 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c22:	233f      	movs	r3, #63	; 0x3f
 8000c24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c26:	2303      	movs	r3, #3
 8000c28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2102      	movs	r1, #2
 8000c46:	4618      	mov	r0, r3
 8000c48:	f003 fbdc 	bl	8004404 <HAL_RCC_ClockConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000c52:	f000 fa97 	bl	8001184 <Error_Handler>
  }
}
 8000c56:	bf00      	nop
 8000c58:	3770      	adds	r7, #112	; 0x70
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	58024400 	.word	0x58024400
 8000c64:	58024800 	.word	0x58024800

08000c68 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
 8000c7c:	615a      	str	r2, [r3, #20]
 8000c7e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c80:	4b29      	ldr	r3, [pc, #164]	; (8000d28 <MX_ADC2_Init+0xc0>)
 8000c82:	4a2a      	ldr	r2, [pc, #168]	; (8000d2c <MX_ADC2_Init+0xc4>)
 8000c84:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c86:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <MX_ADC2_Init+0xc0>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000c8c:	4b26      	ldr	r3, [pc, #152]	; (8000d28 <MX_ADC2_Init+0xc0>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c92:	4b25      	ldr	r3, [pc, #148]	; (8000d28 <MX_ADC2_Init+0xc0>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c98:	4b23      	ldr	r3, [pc, #140]	; (8000d28 <MX_ADC2_Init+0xc0>)
 8000c9a:	2204      	movs	r2, #4
 8000c9c:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000c9e:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <MX_ADC2_Init+0xc0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ca4:	4b20      	ldr	r3, [pc, #128]	; (8000d28 <MX_ADC2_Init+0xc0>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000caa:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <MX_ADC2_Init+0xc0>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000cb0:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <MX_ADC2_Init+0xc0>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <MX_ADC2_Init+0xc0>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <MX_ADC2_Init+0xc0>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000cc2:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <MX_ADC2_Init+0xc0>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cc8:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <MX_ADC2_Init+0xc0>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cce:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <MX_ADC2_Init+0xc0>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <MX_ADC2_Init+0xc0>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000cdc:	4812      	ldr	r0, [pc, #72]	; (8000d28 <MX_ADC2_Init+0xc0>)
 8000cde:	f000 ff9d 	bl	8001c1c <HAL_ADC_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000ce8:	f000 fa4c 	bl	8001184 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000cec:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <MX_ADC2_Init+0xc8>)
 8000cee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cf0:	2306      	movs	r3, #6
 8000cf2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cf8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000cfc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4806      	ldr	r0, [pc, #24]	; (8000d28 <MX_ADC2_Init+0xc0>)
 8000d10:	f001 fa7e 	bl	8002210 <HAL_ADC_ConfigChannel>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000d1a:	f000 fa33 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	3720      	adds	r7, #32
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	24000084 	.word	0x24000084
 8000d2c:	40022100 	.word	0x40022100
 8000d30:	14f00020 	.word	0x14f00020

08000d34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08c      	sub	sp, #48	; 0x30
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d3a:	f107 030c 	add.w	r3, r7, #12
 8000d3e:	2224      	movs	r2, #36	; 0x24
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f009 fd6c 	bl	800a820 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d48:	463b      	mov	r3, r7
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d52:	4b2d      	ldr	r3, [pc, #180]	; (8000e08 <MX_TIM2_Init+0xd4>)
 8000d54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d58:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d5a:	4b2b      	ldr	r3, [pc, #172]	; (8000e08 <MX_TIM2_Init+0xd4>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d60:	4b29      	ldr	r3, [pc, #164]	; (8000e08 <MX_TIM2_Init+0xd4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d66:	4b28      	ldr	r3, [pc, #160]	; (8000e08 <MX_TIM2_Init+0xd4>)
 8000d68:	f04f 32ff 	mov.w	r2, #4294967295
 8000d6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6e:	4b26      	ldr	r3, [pc, #152]	; (8000e08 <MX_TIM2_Init+0xd4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d74:	4b24      	ldr	r3, [pc, #144]	; (8000e08 <MX_TIM2_Init+0xd4>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d82:	2301      	movs	r3, #1
 8000d84:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d92:	2301      	movs	r3, #1
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000d9e:	f107 030c 	add.w	r3, r7, #12
 8000da2:	4619      	mov	r1, r3
 8000da4:	4818      	ldr	r0, [pc, #96]	; (8000e08 <MX_TIM2_Init+0xd4>)
 8000da6:	f006 fb1b 	bl	80073e0 <HAL_TIM_Encoder_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000db0:	f000 f9e8 	bl	8001184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db4:	2300      	movs	r3, #0
 8000db6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4811      	ldr	r0, [pc, #68]	; (8000e08 <MX_TIM2_Init+0xd4>)
 8000dc2:	f006 ff35 	bl	8007c30 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000dcc:	f000 f9da 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
	TIM2->CR1  |= TIM_CR1_UDIS;	// make sure update is enabled
 8000dd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dda:	f043 0302 	orr.w	r3, r3, #2
 8000dde:	6013      	str	r3, [r2, #0]
	TIM2->DIER &=  ~TIM_DIER_UIE; 	// update interrupt enabled
 8000de0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dea:	f023 0301 	bic.w	r3, r3, #1
 8000dee:	60d3      	str	r3, [r2, #12]
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8000df0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dfa:	f023 0301 	bic.w	r3, r3, #1
 8000dfe:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	3730      	adds	r7, #48	; 0x30
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	240000e8 	.word	0x240000e8

08000e0c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e12:	f107 0310 	add.w	r3, r7, #16
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <MX_TIM5_Init+0x94>)
 8000e2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ea4 <MX_TIM5_Init+0x98>)
 8000e2e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e30:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <MX_TIM5_Init+0x94>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e36:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <MX_TIM5_Init+0x94>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000e3c:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <MX_TIM5_Init+0x94>)
 8000e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e42:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e44:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <MX_TIM5_Init+0x94>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <MX_TIM5_Init+0x94>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e50:	4813      	ldr	r0, [pc, #76]	; (8000ea0 <MX_TIM5_Init+0x94>)
 8000e52:	f006 fa6d 	bl	8007330 <HAL_TIM_Base_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000e5c:	f000 f992 	bl	8001184 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000e66:	f107 0310 	add.w	r3, r7, #16
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	480c      	ldr	r0, [pc, #48]	; (8000ea0 <MX_TIM5_Init+0x94>)
 8000e6e:	f006 fc7d 	bl	800776c <HAL_TIM_ConfigClockSource>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000e78:	f000 f984 	bl	8001184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	4619      	mov	r1, r3
 8000e88:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <MX_TIM5_Init+0x94>)
 8000e8a:	f006 fed1 	bl	8007c30 <HAL_TIMEx_MasterConfigSynchronization>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000e94:	f000 f976 	bl	8001184 <Error_Handler>
//  TIM5->DIER |= TIM_DIER_UIE; // Enable update interrupt
//  TIM5->ARR = ENC_DMA_POLL_FREQ; // Timebase

  /* USER CODE END TIM5_Init 2 */

}
 8000e98:	bf00      	nop
 8000e9a:	3720      	adds	r7, #32
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	24000134 	.word	0x24000134
 8000ea4:	40000c00 	.word	0x40000c00

08000ea8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000eac:	4b22      	ldr	r3, [pc, #136]	; (8000f38 <MX_USART3_UART_Init+0x90>)
 8000eae:	4a23      	ldr	r2, [pc, #140]	; (8000f3c <MX_USART3_UART_Init+0x94>)
 8000eb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000eb2:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <MX_USART3_UART_Init+0x90>)
 8000eb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000eba:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <MX_USART3_UART_Init+0x90>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ec0:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <MX_USART3_UART_Init+0x90>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <MX_USART3_UART_Init+0x90>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <MX_USART3_UART_Init+0x90>)
 8000ece:	220c      	movs	r2, #12
 8000ed0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <MX_USART3_UART_Init+0x90>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed8:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <MX_USART3_UART_Init+0x90>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <MX_USART3_UART_Init+0x90>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <MX_USART3_UART_Init+0x90>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <MX_USART3_UART_Init+0x90>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ef0:	4811      	ldr	r0, [pc, #68]	; (8000f38 <MX_USART3_UART_Init+0x90>)
 8000ef2:	f006 ff49 	bl	8007d88 <HAL_UART_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000efc:	f000 f942 	bl	8001184 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f00:	2100      	movs	r1, #0
 8000f02:	480d      	ldr	r0, [pc, #52]	; (8000f38 <MX_USART3_UART_Init+0x90>)
 8000f04:	f009 fba1 	bl	800a64a <HAL_UARTEx_SetTxFifoThreshold>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f0e:	f000 f939 	bl	8001184 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f12:	2100      	movs	r1, #0
 8000f14:	4808      	ldr	r0, [pc, #32]	; (8000f38 <MX_USART3_UART_Init+0x90>)
 8000f16:	f009 fbd6 	bl	800a6c6 <HAL_UARTEx_SetRxFifoThreshold>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f20:	f000 f930 	bl	8001184 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f24:	4804      	ldr	r0, [pc, #16]	; (8000f38 <MX_USART3_UART_Init+0x90>)
 8000f26:	f009 fb57 	bl	800a5d8 <HAL_UARTEx_DisableFifoMode>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f30:	f000 f928 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	24000180 	.word	0x24000180
 8000f3c:	40004800 	.word	0x40004800

08000f40 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08e      	sub	sp, #56	; 0x38
 8000f54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f66:	4b80      	ldr	r3, [pc, #512]	; (8001168 <MX_GPIO_Init+0x218>)
 8000f68:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f6c:	4a7e      	ldr	r2, [pc, #504]	; (8001168 <MX_GPIO_Init+0x218>)
 8000f6e:	f043 0304 	orr.w	r3, r3, #4
 8000f72:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f76:	4b7c      	ldr	r3, [pc, #496]	; (8001168 <MX_GPIO_Init+0x218>)
 8000f78:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f7c:	f003 0304 	and.w	r3, r3, #4
 8000f80:	623b      	str	r3, [r7, #32]
 8000f82:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f84:	4b78      	ldr	r3, [pc, #480]	; (8001168 <MX_GPIO_Init+0x218>)
 8000f86:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f8a:	4a77      	ldr	r2, [pc, #476]	; (8001168 <MX_GPIO_Init+0x218>)
 8000f8c:	f043 0320 	orr.w	r3, r3, #32
 8000f90:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f94:	4b74      	ldr	r3, [pc, #464]	; (8001168 <MX_GPIO_Init+0x218>)
 8000f96:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f9a:	f003 0320 	and.w	r3, r3, #32
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa2:	4b71      	ldr	r3, [pc, #452]	; (8001168 <MX_GPIO_Init+0x218>)
 8000fa4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fa8:	4a6f      	ldr	r2, [pc, #444]	; (8001168 <MX_GPIO_Init+0x218>)
 8000faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fae:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fb2:	4b6d      	ldr	r3, [pc, #436]	; (8001168 <MX_GPIO_Init+0x218>)
 8000fb4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fbc:	61bb      	str	r3, [r7, #24]
 8000fbe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc0:	4b69      	ldr	r3, [pc, #420]	; (8001168 <MX_GPIO_Init+0x218>)
 8000fc2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fc6:	4a68      	ldr	r2, [pc, #416]	; (8001168 <MX_GPIO_Init+0x218>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fd0:	4b65      	ldr	r3, [pc, #404]	; (8001168 <MX_GPIO_Init+0x218>)
 8000fd2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	4b62      	ldr	r3, [pc, #392]	; (8001168 <MX_GPIO_Init+0x218>)
 8000fe0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fe4:	4a60      	ldr	r2, [pc, #384]	; (8001168 <MX_GPIO_Init+0x218>)
 8000fe6:	f043 0302 	orr.w	r3, r3, #2
 8000fea:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fee:	4b5e      	ldr	r3, [pc, #376]	; (8001168 <MX_GPIO_Init+0x218>)
 8000ff0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffc:	4b5a      	ldr	r3, [pc, #360]	; (8001168 <MX_GPIO_Init+0x218>)
 8000ffe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001002:	4a59      	ldr	r2, [pc, #356]	; (8001168 <MX_GPIO_Init+0x218>)
 8001004:	f043 0308 	orr.w	r3, r3, #8
 8001008:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800100c:	4b56      	ldr	r3, [pc, #344]	; (8001168 <MX_GPIO_Init+0x218>)
 800100e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001012:	f003 0308 	and.w	r3, r3, #8
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800101a:	4b53      	ldr	r3, [pc, #332]	; (8001168 <MX_GPIO_Init+0x218>)
 800101c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001020:	4a51      	ldr	r2, [pc, #324]	; (8001168 <MX_GPIO_Init+0x218>)
 8001022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001026:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800102a:	4b4f      	ldr	r3, [pc, #316]	; (8001168 <MX_GPIO_Init+0x218>)
 800102c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001038:	4b4b      	ldr	r3, [pc, #300]	; (8001168 <MX_GPIO_Init+0x218>)
 800103a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800103e:	4a4a      	ldr	r2, [pc, #296]	; (8001168 <MX_GPIO_Init+0x218>)
 8001040:	f043 0310 	orr.w	r3, r3, #16
 8001044:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001048:	4b47      	ldr	r3, [pc, #284]	; (8001168 <MX_GPIO_Init+0x218>)
 800104a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800104e:	f003 0310 	and.w	r3, r3, #16
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800105c:	4843      	ldr	r0, [pc, #268]	; (800116c <MX_GPIO_Init+0x21c>)
 800105e:	f002 fd2b 	bl	8003ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001068:	4841      	ldr	r0, [pc, #260]	; (8001170 <MX_GPIO_Init+0x220>)
 800106a:	f002 fd25 	bl	8003ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	2102      	movs	r1, #2
 8001072:	4840      	ldr	r0, [pc, #256]	; (8001174 <MX_GPIO_Init+0x224>)
 8001074:	f002 fd20 	bl	8003ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001078:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107e:	2300      	movs	r3, #0
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108a:	4619      	mov	r1, r3
 800108c:	483a      	ldr	r0, [pc, #232]	; (8001178 <MX_GPIO_Init+0x228>)
 800108e:	f002 fb63 	bl	8003758 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80010a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a8:	4619      	mov	r1, r3
 80010aa:	4830      	ldr	r0, [pc, #192]	; (800116c <MX_GPIO_Init+0x21c>)
 80010ac:	f002 fb54 	bl	8003758 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80010b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b6:	2301      	movs	r3, #1
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c6:	4619      	mov	r1, r3
 80010c8:	4829      	ldr	r0, [pc, #164]	; (8001170 <MX_GPIO_Init+0x220>)
 80010ca:	f002 fb45 	bl	8003758 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e0:	4619      	mov	r1, r3
 80010e2:	4826      	ldr	r0, [pc, #152]	; (800117c <MX_GPIO_Init+0x22c>)
 80010e4:	f002 fb38 	bl	8003758 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80010e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fa:	4619      	mov	r1, r3
 80010fc:	4820      	ldr	r0, [pc, #128]	; (8001180 <MX_GPIO_Init+0x230>)
 80010fe:	f002 fb2b 	bl	8003758 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2300      	movs	r3, #0
 8001112:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001114:	230a      	movs	r3, #10
 8001116:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111c:	4619      	mov	r1, r3
 800111e:	4818      	ldr	r0, [pc, #96]	; (8001180 <MX_GPIO_Init+0x230>)
 8001120:	f002 fb1a 	bl	8003758 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001124:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113a:	4619      	mov	r1, r3
 800113c:	4810      	ldr	r0, [pc, #64]	; (8001180 <MX_GPIO_Init+0x230>)
 800113e:	f002 fb0b 	bl	8003758 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001142:	2302      	movs	r3, #2
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001146:	2301      	movs	r3, #1
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001156:	4619      	mov	r1, r3
 8001158:	4806      	ldr	r0, [pc, #24]	; (8001174 <MX_GPIO_Init+0x224>)
 800115a:	f002 fafd 	bl	8003758 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800115e:	bf00      	nop
 8001160:	3738      	adds	r7, #56	; 0x38
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	58024400 	.word	0x58024400
 800116c:	58021400 	.word	0x58021400
 8001170:	58020400 	.word	0x58020400
 8001174:	58021000 	.word	0x58021000
 8001178:	58020800 	.word	0x58020800
 800117c:	58021800 	.word	0x58021800
 8001180:	58020000 	.word	0x58020000

08001184 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001188:	b672      	cpsid	i
}
 800118a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800118c:	e7fe      	b.n	800118c <Error_Handler+0x8>
	...

08001190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <HAL_MspInit+0x30>)
 8001198:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800119c:	4a08      	ldr	r2, [pc, #32]	; (80011c0 <HAL_MspInit+0x30>)
 800119e:	f043 0302 	orr.w	r3, r3, #2
 80011a2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_MspInit+0x30>)
 80011a8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	58024400 	.word	0x58024400

080011c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b0ba      	sub	sp, #232	; 0xe8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	22c0      	movs	r2, #192	; 0xc0
 80011e2:	2100      	movs	r1, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f009 fb1b 	bl	800a820 <memset>
  if(hadc->Instance==ADC2)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a2b      	ldr	r2, [pc, #172]	; (800129c <HAL_ADC_MspInit+0xd8>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d14f      	bne.n	8001294 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011f4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011f8:	f04f 0300 	mov.w	r3, #0
 80011fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001200:	2301      	movs	r3, #1
 8001202:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8001204:	2310      	movs	r3, #16
 8001206:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 8001208:	2303      	movs	r3, #3
 800120a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800120c:	2302      	movs	r3, #2
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001210:	2302      	movs	r3, #2
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001214:	23c0      	movs	r3, #192	; 0xc0
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001218:	2300      	movs	r3, #0
 800121a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001220:	2300      	movs	r3, #0
 8001222:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001226:	f107 0310 	add.w	r3, r7, #16
 800122a:	4618      	mov	r0, r3
 800122c:	f003 fc76 	bl	8004b1c <HAL_RCCEx_PeriphCLKConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8001236:	f7ff ffa5 	bl	8001184 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800123a:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <HAL_ADC_MspInit+0xdc>)
 800123c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001240:	4a17      	ldr	r2, [pc, #92]	; (80012a0 <HAL_ADC_MspInit+0xdc>)
 8001242:	f043 0320 	orr.w	r3, r3, #32
 8001246:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <HAL_ADC_MspInit+0xdc>)
 800124c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001250:	f003 0320 	and.w	r3, r3, #32
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <HAL_ADC_MspInit+0xdc>)
 800125a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800125e:	4a10      	ldr	r2, [pc, #64]	; (80012a0 <HAL_ADC_MspInit+0xdc>)
 8001260:	f043 0302 	orr.w	r3, r3, #2
 8001264:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001268:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <HAL_ADC_MspInit+0xdc>)
 800126a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PB1     ------> ADC2_INP5
    */
    GPIO_InitStruct.Pin = THERMOCOUPLE_Pin;
 8001276:	2302      	movs	r3, #2
 8001278:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800127c:	2303      	movs	r3, #3
 800127e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(THERMOCOUPLE_GPIO_Port, &GPIO_InitStruct);
 8001288:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800128c:	4619      	mov	r1, r3
 800128e:	4805      	ldr	r0, [pc, #20]	; (80012a4 <HAL_ADC_MspInit+0xe0>)
 8001290:	f002 fa62 	bl	8003758 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001294:	bf00      	nop
 8001296:	37e8      	adds	r7, #232	; 0xe8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40022100 	.word	0x40022100
 80012a0:	58024400 	.word	0x58024400
 80012a4:	58020400 	.word	0x58020400

080012a8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012c8:	d135      	bne.n	8001336 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ca:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <HAL_TIM_Encoder_MspInit+0x98>)
 80012cc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80012d0:	4a1b      	ldr	r2, [pc, #108]	; (8001340 <HAL_TIM_Encoder_MspInit+0x98>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80012da:	4b19      	ldr	r3, [pc, #100]	; (8001340 <HAL_TIM_Encoder_MspInit+0x98>)
 80012dc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e8:	4b15      	ldr	r3, [pc, #84]	; (8001340 <HAL_TIM_Encoder_MspInit+0x98>)
 80012ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012ee:	4a14      	ldr	r2, [pc, #80]	; (8001340 <HAL_TIM_Encoder_MspInit+0x98>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <HAL_TIM_Encoder_MspInit+0x98>)
 80012fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PLUNGE_ENC_A_Pin|PLUNGE_ENC_B_Pin;
 8001306:	2303      	movs	r3, #3
 8001308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2300      	movs	r3, #0
 8001314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001316:	2301      	movs	r3, #1
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	4808      	ldr	r0, [pc, #32]	; (8001344 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001322:	f002 fa19 	bl	8003758 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	201c      	movs	r0, #28
 800132c:	f001 fc7b 	bl	8002c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001330:	201c      	movs	r0, #28
 8001332:	f001 fc92 	bl	8002c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001336:	bf00      	nop
 8001338:	3728      	adds	r7, #40	; 0x28
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	58024400 	.word	0x58024400
 8001344:	58020000 	.word	0x58020000

08001348 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <HAL_TIM_Base_MspInit+0x48>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d116      	bne.n	8001388 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <HAL_TIM_Base_MspInit+0x4c>)
 800135c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001360:	4a0c      	ldr	r2, [pc, #48]	; (8001394 <HAL_TIM_Base_MspInit+0x4c>)
 8001362:	f043 0308 	orr.w	r3, r3, #8
 8001366:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_TIM_Base_MspInit+0x4c>)
 800136c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001378:	2200      	movs	r2, #0
 800137a:	2100      	movs	r1, #0
 800137c:	2032      	movs	r0, #50	; 0x32
 800137e:	f001 fc52 	bl	8002c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001382:	2032      	movs	r0, #50	; 0x32
 8001384:	f001 fc69 	bl	8002c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001388:	bf00      	nop
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40000c00 	.word	0x40000c00
 8001394:	58024400 	.word	0x58024400

08001398 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b0ba      	sub	sp, #232	; 0xe8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	22c0      	movs	r2, #192	; 0xc0
 80013b6:	2100      	movs	r1, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f009 fa31 	bl	800a820 <memset>
  if(huart->Instance==USART3)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a2b      	ldr	r2, [pc, #172]	; (8001470 <HAL_UART_MspInit+0xd8>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d14e      	bne.n	8001466 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013c8:	f04f 0202 	mov.w	r2, #2
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013da:	f107 0310 	add.w	r3, r7, #16
 80013de:	4618      	mov	r0, r3
 80013e0:	f003 fb9c 	bl	8004b1c <HAL_RCCEx_PeriphCLKConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80013ea:	f7ff fecb 	bl	8001184 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013ee:	4b21      	ldr	r3, [pc, #132]	; (8001474 <HAL_UART_MspInit+0xdc>)
 80013f0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013f4:	4a1f      	ldr	r2, [pc, #124]	; (8001474 <HAL_UART_MspInit+0xdc>)
 80013f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013fa:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80013fe:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <HAL_UART_MspInit+0xdc>)
 8001400:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800140c:	4b19      	ldr	r3, [pc, #100]	; (8001474 <HAL_UART_MspInit+0xdc>)
 800140e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001412:	4a18      	ldr	r2, [pc, #96]	; (8001474 <HAL_UART_MspInit+0xdc>)
 8001414:	f043 0308 	orr.w	r3, r3, #8
 8001418:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800141c:	4b15      	ldr	r3, [pc, #84]	; (8001474 <HAL_UART_MspInit+0xdc>)
 800141e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800142a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800142e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001444:	2307      	movs	r3, #7
 8001446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800144a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800144e:	4619      	mov	r1, r3
 8001450:	4809      	ldr	r0, [pc, #36]	; (8001478 <HAL_UART_MspInit+0xe0>)
 8001452:	f002 f981 	bl	8003758 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	2027      	movs	r0, #39	; 0x27
 800145c:	f001 fbe3 	bl	8002c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001460:	2027      	movs	r0, #39	; 0x27
 8001462:	f001 fbfa 	bl	8002c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001466:	bf00      	nop
 8001468:	37e8      	adds	r7, #232	; 0xe8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40004800 	.word	0x40004800
 8001474:	58024400 	.word	0x58024400
 8001478:	58020c00 	.word	0x58020c00

0800147c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <NMI_Handler+0x4>

08001482 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001486:	e7fe      	b.n	8001486 <HardFault_Handler+0x4>

08001488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800148c:	e7fe      	b.n	800148c <MemManage_Handler+0x4>

0800148e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001492:	e7fe      	b.n	8001492 <BusFault_Handler+0x4>

08001494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <UsageFault_Handler+0x4>

0800149a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c8:	f000 f9a6 	bl	8001818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014d4:	4802      	ldr	r0, [pc, #8]	; (80014e0 <TIM2_IRQHandler+0x10>)
 80014d6:	f006 f829 	bl	800752c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	240000e8 	.word	0x240000e8

080014e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80014e8:	4802      	ldr	r0, [pc, #8]	; (80014f4 <USART3_IRQHandler+0x10>)
 80014ea:	f006 fd77 	bl	8007fdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	24000180 	.word	0x24000180

080014f8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  /* always do the logging portion */
  /* TODO: Convert this datalogging to DMA to speed it up. actually a priority I think it would have big performance gains*/
  log_position += 1; // increment number of data points taken
 80014fc:	4b19      	ldr	r3, [pc, #100]	; (8001564 <TIM5_IRQHandler+0x6c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	3301      	adds	r3, #1
 8001502:	4a18      	ldr	r2, [pc, #96]	; (8001564 <TIM5_IRQHandler+0x6c>)
 8001504:	6013      	str	r3, [r2, #0]
  current_pos = TIM2->CNT;
 8001506:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800150a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150c:	4a16      	ldr	r2, [pc, #88]	; (8001568 <TIM5_IRQHandler+0x70>)
 800150e:	6013      	str	r3, [r2, #0]
  HAL_ADC_Start(&hadc2);
 8001510:	4816      	ldr	r0, [pc, #88]	; (800156c <TIM5_IRQHandler+0x74>)
 8001512:	f000 fcdd 	bl	8001ed0 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001516:	f04f 31ff 	mov.w	r1, #4294967295
 800151a:	4814      	ldr	r0, [pc, #80]	; (800156c <TIM5_IRQHandler+0x74>)
 800151c:	f000 fd92 	bl	8002044 <HAL_ADC_PollForConversion>
  current_temp = HAL_ADC_GetValue(&hadc2);
 8001520:	4812      	ldr	r0, [pc, #72]	; (800156c <TIM5_IRQHandler+0x74>)
 8001522:	f000 fe67 	bl	80021f4 <HAL_ADC_GetValue>
 8001526:	4603      	mov	r3, r0
 8001528:	4a11      	ldr	r2, [pc, #68]	; (8001570 <TIM5_IRQHandler+0x78>)
 800152a:	6013      	str	r3, [r2, #0]
  posLog[log_position] = current_pos; // update log of positions
 800152c:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <TIM5_IRQHandler+0x70>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <TIM5_IRQHandler+0x6c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	b291      	uxth	r1, r2
 8001536:	4a0f      	ldr	r2, [pc, #60]	; (8001574 <TIM5_IRQHandler+0x7c>)
 8001538:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  thermoLog[log_position] = current_temp; 
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <TIM5_IRQHandler+0x78>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <TIM5_IRQHandler+0x6c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	b291      	uxth	r1, r2
 8001546:	4a0c      	ldr	r2, [pc, #48]	; (8001578 <TIM5_IRQHandler+0x80>)
 8001548:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

  TIM5->SR &= ~TIM_SR_UIF; // Clear the TIM5 update flag
 800154c:	4b0b      	ldr	r3, [pc, #44]	; (800157c <TIM5_IRQHandler+0x84>)
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	4a0a      	ldr	r2, [pc, #40]	; (800157c <TIM5_IRQHandler+0x84>)
 8001552:	f023 0301 	bic.w	r3, r3, #1
 8001556:	6113      	str	r3, [r2, #16]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001558:	4809      	ldr	r0, [pc, #36]	; (8001580 <TIM5_IRQHandler+0x88>)
 800155a:	f005 ffe7 	bl	800752c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	2401d6d4 	.word	0x2401d6d4
 8001568:	2401d744 	.word	0x2401d744
 800156c:	24000084 	.word	0x24000084
 8001570:	2401d748 	.word	0x2401d748
 8001574:	24000214 	.word	0x24000214
 8001578:	2400ec74 	.word	0x2400ec74
 800157c:	40000c00 	.word	0x40000c00
 8001580:	24000134 	.word	0x24000134

08001584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800158c:	4a14      	ldr	r2, [pc, #80]	; (80015e0 <_sbrk+0x5c>)
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <_sbrk+0x60>)
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <_sbrk+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d102      	bne.n	80015a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <_sbrk+0x64>)
 80015a2:	4a12      	ldr	r2, [pc, #72]	; (80015ec <_sbrk+0x68>)
 80015a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <_sbrk+0x64>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d207      	bcs.n	80015c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b4:	f009 f93c 	bl	800a830 <__errno>
 80015b8:	4603      	mov	r3, r0
 80015ba:	220c      	movs	r2, #12
 80015bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	e009      	b.n	80015d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <_sbrk+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ca:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <_sbrk+0x64>)
 80015d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015d6:	68fb      	ldr	r3, [r7, #12]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	24100000 	.word	0x24100000
 80015e4:	00000400 	.word	0x00000400
 80015e8:	2401d74c 	.word	0x2401d74c
 80015ec:	2401d8a0 	.word	0x2401d8a0

080015f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015f4:	4b32      	ldr	r3, [pc, #200]	; (80016c0 <SystemInit+0xd0>)
 80015f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015fa:	4a31      	ldr	r2, [pc, #196]	; (80016c0 <SystemInit+0xd0>)
 80015fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001604:	4b2f      	ldr	r3, [pc, #188]	; (80016c4 <SystemInit+0xd4>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 030f 	and.w	r3, r3, #15
 800160c:	2b02      	cmp	r3, #2
 800160e:	d807      	bhi.n	8001620 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001610:	4b2c      	ldr	r3, [pc, #176]	; (80016c4 <SystemInit+0xd4>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f023 030f 	bic.w	r3, r3, #15
 8001618:	4a2a      	ldr	r2, [pc, #168]	; (80016c4 <SystemInit+0xd4>)
 800161a:	f043 0303 	orr.w	r3, r3, #3
 800161e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001620:	4b29      	ldr	r3, [pc, #164]	; (80016c8 <SystemInit+0xd8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a28      	ldr	r2, [pc, #160]	; (80016c8 <SystemInit+0xd8>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800162c:	4b26      	ldr	r3, [pc, #152]	; (80016c8 <SystemInit+0xd8>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001632:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <SystemInit+0xd8>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	4924      	ldr	r1, [pc, #144]	; (80016c8 <SystemInit+0xd8>)
 8001638:	4b24      	ldr	r3, [pc, #144]	; (80016cc <SystemInit+0xdc>)
 800163a:	4013      	ands	r3, r2
 800163c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800163e:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <SystemInit+0xd4>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 030c 	and.w	r3, r3, #12
 8001646:	2b00      	cmp	r3, #0
 8001648:	d007      	beq.n	800165a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800164a:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <SystemInit+0xd4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f023 030f 	bic.w	r3, r3, #15
 8001652:	4a1c      	ldr	r2, [pc, #112]	; (80016c4 <SystemInit+0xd4>)
 8001654:	f043 0303 	orr.w	r3, r3, #3
 8001658:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800165a:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <SystemInit+0xd8>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001660:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <SystemInit+0xd8>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <SystemInit+0xd8>)
 8001668:	2200      	movs	r2, #0
 800166a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800166c:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <SystemInit+0xd8>)
 800166e:	4a18      	ldr	r2, [pc, #96]	; (80016d0 <SystemInit+0xe0>)
 8001670:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <SystemInit+0xd8>)
 8001674:	4a17      	ldr	r2, [pc, #92]	; (80016d4 <SystemInit+0xe4>)
 8001676:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001678:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <SystemInit+0xd8>)
 800167a:	4a17      	ldr	r2, [pc, #92]	; (80016d8 <SystemInit+0xe8>)
 800167c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800167e:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <SystemInit+0xd8>)
 8001680:	2200      	movs	r2, #0
 8001682:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001684:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <SystemInit+0xd8>)
 8001686:	4a14      	ldr	r2, [pc, #80]	; (80016d8 <SystemInit+0xe8>)
 8001688:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800168a:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <SystemInit+0xd8>)
 800168c:	2200      	movs	r2, #0
 800168e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001690:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <SystemInit+0xd8>)
 8001692:	4a11      	ldr	r2, [pc, #68]	; (80016d8 <SystemInit+0xe8>)
 8001694:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001696:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <SystemInit+0xd8>)
 8001698:	2200      	movs	r2, #0
 800169a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800169c:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <SystemInit+0xd8>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a09      	ldr	r2, [pc, #36]	; (80016c8 <SystemInit+0xd8>)
 80016a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80016a8:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <SystemInit+0xd8>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <SystemInit+0xec>)
 80016b0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80016b4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000ed00 	.word	0xe000ed00
 80016c4:	52002000 	.word	0x52002000
 80016c8:	58024400 	.word	0x58024400
 80016cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80016d0:	02020200 	.word	0x02020200
 80016d4:	01ff0000 	.word	0x01ff0000
 80016d8:	01010280 	.word	0x01010280
 80016dc:	52004000 	.word	0x52004000

080016e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001718 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80016e4:	f7ff ff84 	bl	80015f0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016e8:	480c      	ldr	r0, [pc, #48]	; (800171c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016ea:	490d      	ldr	r1, [pc, #52]	; (8001720 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016ec:	4a0d      	ldr	r2, [pc, #52]	; (8001724 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f0:	e002      	b.n	80016f8 <LoopCopyDataInit>

080016f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016f6:	3304      	adds	r3, #4

080016f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80016f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016fc:	d3f9      	bcc.n	80016f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016fe:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001700:	4c0a      	ldr	r4, [pc, #40]	; (800172c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001704:	e001      	b.n	800170a <LoopFillZerobss>

08001706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001708:	3204      	adds	r2, #4

0800170a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800170c:	d3fb      	bcc.n	8001706 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800170e:	f009 f895 	bl	800a83c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001712:	f7ff f8ef 	bl	80008f4 <main>
  bx  lr
 8001716:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001718:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800171c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001720:	24000068 	.word	0x24000068
  ldr r2, =_sidata
 8001724:	0800b1c0 	.word	0x0800b1c0
  ldr r2, =_sbss
 8001728:	24000068 	.word	0x24000068
  ldr r4, =_ebss
 800172c:	2401d89c 	.word	0x2401d89c

08001730 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001730:	e7fe      	b.n	8001730 <ADC_IRQHandler>
	...

08001734 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800173a:	2003      	movs	r0, #3
 800173c:	f001 fa68 	bl	8002c10 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001740:	f003 f816 	bl	8004770 <HAL_RCC_GetSysClockFreq>
 8001744:	4602      	mov	r2, r0
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_Init+0x68>)
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	0a1b      	lsrs	r3, r3, #8
 800174c:	f003 030f 	and.w	r3, r3, #15
 8001750:	4913      	ldr	r1, [pc, #76]	; (80017a0 <HAL_Init+0x6c>)
 8001752:	5ccb      	ldrb	r3, [r1, r3]
 8001754:	f003 031f 	and.w	r3, r3, #31
 8001758:	fa22 f303 	lsr.w	r3, r2, r3
 800175c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800175e:	4b0f      	ldr	r3, [pc, #60]	; (800179c <HAL_Init+0x68>)
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	4a0e      	ldr	r2, [pc, #56]	; (80017a0 <HAL_Init+0x6c>)
 8001768:	5cd3      	ldrb	r3, [r2, r3]
 800176a:	f003 031f 	and.w	r3, r3, #31
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	fa22 f303 	lsr.w	r3, r2, r3
 8001774:	4a0b      	ldr	r2, [pc, #44]	; (80017a4 <HAL_Init+0x70>)
 8001776:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001778:	4a0b      	ldr	r2, [pc, #44]	; (80017a8 <HAL_Init+0x74>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800177e:	2000      	movs	r0, #0
 8001780:	f000 f814 	bl	80017ac <HAL_InitTick>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e002      	b.n	8001794 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800178e:	f7ff fcff 	bl	8001190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	58024400 	.word	0x58024400
 80017a0:	0800b144 	.word	0x0800b144
 80017a4:	2400000c 	.word	0x2400000c
 80017a8:	24000008 	.word	0x24000008

080017ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017b4:	4b15      	ldr	r3, [pc, #84]	; (800180c <HAL_InitTick+0x60>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e021      	b.n	8001804 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017c0:	4b13      	ldr	r3, [pc, #76]	; (8001810 <HAL_InitTick+0x64>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b11      	ldr	r3, [pc, #68]	; (800180c <HAL_InitTick+0x60>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	4619      	mov	r1, r3
 80017ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80017d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d6:	4618      	mov	r0, r3
 80017d8:	f001 fa4d 	bl	8002c76 <HAL_SYSTICK_Config>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00e      	b.n	8001804 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b0f      	cmp	r3, #15
 80017ea:	d80a      	bhi.n	8001802 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ec:	2200      	movs	r2, #0
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f001 fa17 	bl	8002c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f8:	4a06      	ldr	r2, [pc, #24]	; (8001814 <HAL_InitTick+0x68>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	e000      	b.n	8001804 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
}
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	24000014 	.word	0x24000014
 8001810:	24000008 	.word	0x24000008
 8001814:	24000010 	.word	0x24000010

08001818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_IncTick+0x20>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_IncTick+0x24>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4413      	add	r3, r2
 8001828:	4a04      	ldr	r2, [pc, #16]	; (800183c <HAL_IncTick+0x24>)
 800182a:	6013      	str	r3, [r2, #0]
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	24000014 	.word	0x24000014
 800183c:	2401d750 	.word	0x2401d750

08001840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return uwTick;
 8001844:	4b03      	ldr	r3, [pc, #12]	; (8001854 <HAL_GetTick+0x14>)
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	2401d750 	.word	0x2401d750

08001858 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	431a      	orrs	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	609a      	str	r2, [r3, #8]
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	431a      	orrs	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	609a      	str	r2, [r3, #8]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b087      	sub	sp, #28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
 80018cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	3360      	adds	r3, #96	; 0x60
 80018d2:	461a      	mov	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	430b      	orrs	r3, r1
 80018ee:	431a      	orrs	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80018f4:	bf00      	nop
 80018f6:	371c      	adds	r7, #28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	f003 031f 	and.w	r3, r3, #31
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	fa01 f303 	lsl.w	r3, r1, r3
 8001920:	431a      	orrs	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	611a      	str	r2, [r3, #16]
}
 8001926:	bf00      	nop
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001932:	b480      	push	{r7}
 8001934:	b087      	sub	sp, #28
 8001936:	af00      	add	r7, sp, #0
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	3360      	adds	r3, #96	; 0x60
 8001942:	461a      	mov	r2, r3
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	431a      	orrs	r2, r3
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	601a      	str	r2, [r3, #0]
  }
}
 800195c:	bf00      	nop
 800195e:	371c      	adds	r7, #28
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800197c:	2301      	movs	r3, #1
 800197e:	e000      	b.n	8001982 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800198e:	b480      	push	{r7}
 8001990:	b087      	sub	sp, #28
 8001992:	af00      	add	r7, sp, #0
 8001994:	60f8      	str	r0, [r7, #12]
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	3330      	adds	r3, #48	; 0x30
 800199e:	461a      	mov	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	0a1b      	lsrs	r3, r3, #8
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	f003 030c 	and.w	r3, r3, #12
 80019aa:	4413      	add	r3, r2
 80019ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	f003 031f 	and.w	r3, r3, #31
 80019b8:	211f      	movs	r1, #31
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	401a      	ands	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	0e9b      	lsrs	r3, r3, #26
 80019c6:	f003 011f 	and.w	r1, r3, #31
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	f003 031f 	and.w	r3, r3, #31
 80019d0:	fa01 f303 	lsl.w	r3, r1, r3
 80019d4:	431a      	orrs	r2, r3
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019da:	bf00      	nop
 80019dc:	371c      	adds	r7, #28
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b087      	sub	sp, #28
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	60f8      	str	r0, [r7, #12]
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	3314      	adds	r3, #20
 80019f6:	461a      	mov	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	0e5b      	lsrs	r3, r3, #25
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	4413      	add	r3, r2
 8001a04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	0d1b      	lsrs	r3, r3, #20
 8001a0e:	f003 031f 	and.w	r3, r3, #31
 8001a12:	2107      	movs	r1, #7
 8001a14:	fa01 f303 	lsl.w	r3, r1, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	0d1b      	lsrs	r3, r3, #20
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a30:	bf00      	nop
 8001a32:	371c      	adds	r7, #28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a54:	43db      	mvns	r3, r3
 8001a56:	401a      	ands	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f003 0318 	and.w	r3, r3, #24
 8001a5e:	4908      	ldr	r1, [pc, #32]	; (8001a80 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a60:	40d9      	lsrs	r1, r3
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	400b      	ands	r3, r1
 8001a66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001a72:	bf00      	nop
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	000fffff 	.word	0x000fffff

08001a84 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 031f 	and.w	r3, r3, #31
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	4b04      	ldr	r3, [pc, #16]	; (8001adc <LL_ADC_DisableDeepPowerDown+0x20>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6093      	str	r3, [r2, #8]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	5fffffc0 	.word	0x5fffffc0

08001ae0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001af0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001af4:	d101      	bne.n	8001afa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001af6:	2301      	movs	r3, #1
 8001af8:	e000      	b.n	8001afc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <LL_ADC_EnableInternalRegulator+0x24>)
 8001b16:	4013      	ands	r3, r2
 8001b18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	6fffffc0 	.word	0x6fffffc0

08001b30 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b44:	d101      	bne.n	8001b4a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b46:	2301      	movs	r3, #1
 8001b48:	e000      	b.n	8001b4c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <LL_ADC_Enable+0x24>)
 8001b66:	4013      	ands	r3, r2
 8001b68:	f043 0201 	orr.w	r2, r3, #1
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	7fffffc0 	.word	0x7fffffc0

08001b80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d101      	bne.n	8001b98 <LL_ADC_IsEnabled+0x18>
 8001b94:	2301      	movs	r3, #1
 8001b96:	e000      	b.n	8001b9a <LL_ADC_IsEnabled+0x1a>
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <LL_ADC_REG_StartConversion+0x24>)
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	f043 0204 	orr.w	r2, r3, #4
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	7fffffc0 	.word	0x7fffffc0

08001bd0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d101      	bne.n	8001be8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001be4:	2301      	movs	r3, #1
 8001be6:	e000      	b.n	8001bea <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d101      	bne.n	8001c0e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c1c:	b590      	push	{r4, r7, lr}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c24:	2300      	movs	r3, #0
 8001c26:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e138      	b.n	8001ea8 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d109      	bne.n	8001c58 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff fabd 	bl	80011c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff3f 	bl	8001ae0 <LL_ADC_IsDeepPowerDownEnabled>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d004      	beq.n	8001c72 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff25 	bl	8001abc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff ff5a 	bl	8001b30 <LL_ADC_IsInternalRegulatorEnabled>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d114      	bne.n	8001cac <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff ff3e 	bl	8001b08 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c8c:	4b88      	ldr	r3, [pc, #544]	; (8001eb0 <HAL_ADC_Init+0x294>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	099b      	lsrs	r3, r3, #6
 8001c92:	4a88      	ldr	r2, [pc, #544]	; (8001eb4 <HAL_ADC_Init+0x298>)
 8001c94:	fba2 2303 	umull	r2, r3, r2, r3
 8001c98:	099b      	lsrs	r3, r3, #6
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c9e:	e002      	b.n	8001ca6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f9      	bne.n	8001ca0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff3d 	bl	8001b30 <LL_ADC_IsInternalRegulatorEnabled>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10d      	bne.n	8001cd8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc0:	f043 0210 	orr.w	r2, r3, #16
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ccc:	f043 0201 	orr.w	r2, r3, #1
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff77 	bl	8001bd0 <LL_ADC_REG_IsConversionOngoing>
 8001ce2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce8:	f003 0310 	and.w	r3, r3, #16
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f040 80d2 	bne.w	8001e96 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f040 80ce 	bne.w	8001e96 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfe:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d02:	f043 0202 	orr.w	r2, r3, #2
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff ff36 	bl	8001b80 <LL_ADC_IsEnabled>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d110      	bne.n	8001d3c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d1a:	4867      	ldr	r0, [pc, #412]	; (8001eb8 <HAL_ADC_Init+0x29c>)
 8001d1c:	f7ff ff30 	bl	8001b80 <LL_ADC_IsEnabled>
 8001d20:	4604      	mov	r4, r0
 8001d22:	4866      	ldr	r0, [pc, #408]	; (8001ebc <HAL_ADC_Init+0x2a0>)
 8001d24:	f7ff ff2c 	bl	8001b80 <LL_ADC_IsEnabled>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	4323      	orrs	r3, r4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d105      	bne.n	8001d3c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	4619      	mov	r1, r3
 8001d36:	4862      	ldr	r0, [pc, #392]	; (8001ec0 <HAL_ADC_Init+0x2a4>)
 8001d38:	f7ff fd8e 	bl	8001858 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	7d5b      	ldrb	r3, [r3, #21]
 8001d40:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d46:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001d4c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	7f1b      	ldrb	r3, [r3, #28]
 8001d52:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	7f1b      	ldrb	r3, [r3, #28]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d106      	bne.n	8001d6e <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	045b      	lsls	r3, r3, #17
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d009      	beq.n	8001d8a <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d82:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68da      	ldr	r2, [r3, #12]
 8001d90:	4b4c      	ldr	r3, [pc, #304]	; (8001ec4 <HAL_ADC_Init+0x2a8>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	69b9      	ldr	r1, [r7, #24]
 8001d9a:	430b      	orrs	r3, r1
 8001d9c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff ff14 	bl	8001bd0 <LL_ADC_REG_IsConversionOngoing>
 8001da8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff ff21 	bl	8001bf6 <LL_ADC_INJ_IsConversionOngoing>
 8001db4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d14a      	bne.n	8001e52 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d147      	bne.n	8001e52 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	7d1b      	ldrb	r3, [r3, #20]
 8001dc6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	4b3c      	ldr	r3, [pc, #240]	; (8001ec8 <HAL_ADC_Init+0x2ac>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	69b9      	ldr	r1, [r7, #24]
 8001de0:	430b      	orrs	r3, r1
 8001de2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d11b      	bne.n	8001e26 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691a      	ldr	r2, [r3, #16]
 8001dfa:	4b34      	ldr	r3, [pc, #208]	; (8001ecc <HAL_ADC_Init+0x2b0>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e02:	3a01      	subs	r2, #1
 8001e04:	0411      	lsls	r1, r2, #16
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e0a:	4311      	orrs	r1, r2
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e10:	4311      	orrs	r1, r2
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e16:	430a      	orrs	r2, r1
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 0201 	orr.w	r2, r2, #1
 8001e22:	611a      	str	r2, [r3, #16]
 8001e24:	e007      	b.n	8001e36 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0201 	bic.w	r2, r2, #1
 8001e34:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 fd41 	bl	80028d4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d10c      	bne.n	8001e74 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e60:	f023 010f 	bic.w	r1, r3, #15
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	1e5a      	subs	r2, r3, #1
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	631a      	str	r2, [r3, #48]	; 0x30
 8001e72:	e007      	b.n	8001e84 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 020f 	bic.w	r2, r2, #15
 8001e82:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e88:	f023 0303 	bic.w	r3, r3, #3
 8001e8c:	f043 0201 	orr.w	r2, r3, #1
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	655a      	str	r2, [r3, #84]	; 0x54
 8001e94:	e007      	b.n	8001ea6 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9a:	f043 0210 	orr.w	r2, r3, #16
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ea6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3724      	adds	r7, #36	; 0x24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd90      	pop	{r4, r7, pc}
 8001eb0:	24000008 	.word	0x24000008
 8001eb4:	053e2d63 	.word	0x053e2d63
 8001eb8:	40022000 	.word	0x40022000
 8001ebc:	40022100 	.word	0x40022100
 8001ec0:	40022300 	.word	0x40022300
 8001ec4:	fff0c003 	.word	0xfff0c003
 8001ec8:	ffffbffc 	.word	0xffffbffc
 8001ecc:	fc00f81e 	.word	0xfc00f81e

08001ed0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ed8:	4856      	ldr	r0, [pc, #344]	; (8002034 <HAL_ADC_Start+0x164>)
 8001eda:	f7ff fdd3 	bl	8001a84 <LL_ADC_GetMultimode>
 8001ede:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff fe73 	bl	8001bd0 <LL_ADC_REG_IsConversionOngoing>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f040 809a 	bne.w	8002026 <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d101      	bne.n	8001f00 <HAL_ADC_Start+0x30>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e095      	b.n	800202c <HAL_ADC_Start+0x15c>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 fc67 	bl	80027dc <ADC_Enable>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f12:	7dfb      	ldrb	r3, [r7, #23]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f040 8081 	bne.w	800201c <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f1e:	4b46      	ldr	r3, [pc, #280]	; (8002038 <HAL_ADC_Start+0x168>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a43      	ldr	r2, [pc, #268]	; (800203c <HAL_ADC_Start+0x16c>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d002      	beq.n	8001f3a <HAL_ADC_Start+0x6a>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	e000      	b.n	8001f3c <HAL_ADC_Start+0x6c>
 8001f3a:	4b41      	ldr	r3, [pc, #260]	; (8002040 <HAL_ADC_Start+0x170>)
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6812      	ldr	r2, [r2, #0]
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d002      	beq.n	8001f4a <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d105      	bne.n	8001f56 <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f62:	d106      	bne.n	8001f72 <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f68:	f023 0206 	bic.w	r2, r3, #6
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	659a      	str	r2, [r3, #88]	; 0x58
 8001f70:	e002      	b.n	8001f78 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	221c      	movs	r2, #28
 8001f7e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a2b      	ldr	r2, [pc, #172]	; (800203c <HAL_ADC_Start+0x16c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d002      	beq.n	8001f98 <HAL_ADC_Start+0xc8>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	e000      	b.n	8001f9a <HAL_ADC_Start+0xca>
 8001f98:	4b29      	ldr	r3, [pc, #164]	; (8002040 <HAL_ADC_Start+0x170>)
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6812      	ldr	r2, [r2, #0]
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d008      	beq.n	8001fb4 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d005      	beq.n	8001fb4 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	2b05      	cmp	r3, #5
 8001fac:	d002      	beq.n	8001fb4 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	2b09      	cmp	r3, #9
 8001fb2:	d114      	bne.n	8001fde <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d007      	beq.n	8001fd2 <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff fde6 	bl	8001ba8 <LL_ADC_REG_StartConversion>
 8001fdc:	e025      	b.n	800202a <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a13      	ldr	r2, [pc, #76]	; (800203c <HAL_ADC_Start+0x16c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d002      	beq.n	8001ffa <HAL_ADC_Start+0x12a>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	e000      	b.n	8001ffc <HAL_ADC_Start+0x12c>
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <HAL_ADC_Start+0x170>)
 8001ffc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00f      	beq.n	800202a <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002012:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	655a      	str	r2, [r3, #84]	; 0x54
 800201a:	e006      	b.n	800202a <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002024:	e001      	b.n	800202a <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002026:	2302      	movs	r3, #2
 8002028:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800202a:	7dfb      	ldrb	r3, [r7, #23]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40022300 	.word	0x40022300
 8002038:	fffff0fe 	.word	0xfffff0fe
 800203c:	40022100 	.word	0x40022100
 8002040:	40022000 	.word	0x40022000

08002044 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800204e:	4866      	ldr	r0, [pc, #408]	; (80021e8 <HAL_ADC_PollForConversion+0x1a4>)
 8002050:	f7ff fd18 	bl	8001a84 <LL_ADC_GetMultimode>
 8002054:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	2b08      	cmp	r3, #8
 800205c:	d102      	bne.n	8002064 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800205e:	2308      	movs	r3, #8
 8002060:	61fb      	str	r3, [r7, #28]
 8002062:	e02a      	b.n	80020ba <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d005      	beq.n	8002076 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2b05      	cmp	r3, #5
 800206e:	d002      	beq.n	8002076 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	2b09      	cmp	r3, #9
 8002074:	d111      	bne.n	800209a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d007      	beq.n	8002094 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002088:	f043 0220 	orr.w	r2, r3, #32
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0a4      	b.n	80021de <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002094:	2304      	movs	r3, #4
 8002096:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002098:	e00f      	b.n	80020ba <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800209a:	4853      	ldr	r0, [pc, #332]	; (80021e8 <HAL_ADC_PollForConversion+0x1a4>)
 800209c:	f7ff fd00 	bl	8001aa0 <LL_ADC_GetMultiDMATransfer>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d007      	beq.n	80020b6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020aa:	f043 0220 	orr.w	r2, r3, #32
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e093      	b.n	80021de <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80020b6:	2304      	movs	r3, #4
 80020b8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80020ba:	f7ff fbc1 	bl	8001840 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80020c0:	e021      	b.n	8002106 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c8:	d01d      	beq.n	8002106 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80020ca:	f7ff fbb9 	bl	8001840 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d302      	bcc.n	80020e0 <HAL_ADC_PollForConversion+0x9c>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d112      	bne.n	8002106 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10b      	bne.n	8002106 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f2:	f043 0204 	orr.w	r2, r3, #4
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e06b      	b.n	80021de <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	4013      	ands	r3, r2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0d6      	beq.n	80020c2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002118:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fc1f 	bl	8001968 <LL_ADC_REG_IsTriggerSourceSWStart>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d01c      	beq.n	800216a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	7d5b      	ldrb	r3, [r3, #21]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d118      	bne.n	800216a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b08      	cmp	r3, #8
 8002144:	d111      	bne.n	800216a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002156:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d105      	bne.n	800216a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002162:	f043 0201 	orr.w	r2, r3, #1
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a1f      	ldr	r2, [pc, #124]	; (80021ec <HAL_ADC_PollForConversion+0x1a8>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d002      	beq.n	800217a <HAL_ADC_PollForConversion+0x136>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	e000      	b.n	800217c <HAL_ADC_PollForConversion+0x138>
 800217a:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <HAL_ADC_PollForConversion+0x1ac>)
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	4293      	cmp	r3, r2
 8002182:	d008      	beq.n	8002196 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d005      	beq.n	8002196 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2b05      	cmp	r3, #5
 800218e:	d002      	beq.n	8002196 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	2b09      	cmp	r3, #9
 8002194:	d104      	bne.n	80021a0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	61bb      	str	r3, [r7, #24]
 800219e:	e00c      	b.n	80021ba <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a11      	ldr	r2, [pc, #68]	; (80021ec <HAL_ADC_PollForConversion+0x1a8>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d002      	beq.n	80021b0 <HAL_ADC_PollForConversion+0x16c>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	e000      	b.n	80021b2 <HAL_ADC_PollForConversion+0x16e>
 80021b0:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <HAL_ADC_PollForConversion+0x1ac>)
 80021b2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	2b08      	cmp	r3, #8
 80021be:	d104      	bne.n	80021ca <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2208      	movs	r2, #8
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	e008      	b.n	80021dc <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d103      	bne.n	80021dc <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	220c      	movs	r2, #12
 80021da:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3720      	adds	r7, #32
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40022300 	.word	0x40022300
 80021ec:	40022100 	.word	0x40022100
 80021f0:	40022000 	.word	0x40022000

080021f4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002202:	4618      	mov	r0, r3
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
	...

08002210 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002210:	b590      	push	{r4, r7, lr}
 8002212:	b0a1      	sub	sp, #132	; 0x84
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	4a9a      	ldr	r2, [pc, #616]	; (8002494 <HAL_ADC_ConfigChannel+0x284>)
 800222a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_ADC_ConfigChannel+0x2a>
 8002236:	2302      	movs	r3, #2
 8002238:	e2bc      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x5a4>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff fcc2 	bl	8001bd0 <LL_ADC_REG_IsConversionOngoing>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	f040 82a1 	bne.w	8002796 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800225c:	2b00      	cmp	r3, #0
 800225e:	d108      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x62>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	0e9b      	lsrs	r3, r3, #26
 8002266:	f003 031f 	and.w	r3, r3, #31
 800226a:	2201      	movs	r2, #1
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	e016      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x90>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002278:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800227a:	fa93 f3a3 	rbit	r3, r3
 800227e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002280:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002282:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002284:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800228a:	2320      	movs	r3, #32
 800228c:	e003      	b.n	8002296 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800228e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002290:	fab3 f383 	clz	r3, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	f003 031f 	and.w	r3, r3, #31
 800229a:	2201      	movs	r2, #1
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	69d1      	ldr	r1, [r2, #28]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	430b      	orrs	r3, r1
 80022ac:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	6859      	ldr	r1, [r3, #4]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	f7ff fb67 	bl	800198e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fc83 	bl	8001bd0 <LL_ADC_REG_IsConversionOngoing>
 80022ca:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fc90 	bl	8001bf6 <LL_ADC_INJ_IsConversionOngoing>
 80022d6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f040 80a0 	bne.w	8002420 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f040 809c 	bne.w	8002420 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	6819      	ldr	r1, [r3, #0]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	461a      	mov	r2, r3
 80022f6:	f7ff fb76 	bl	80019e6 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	f003 0310 	and.w	r3, r3, #16
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10b      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x110>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	695a      	ldr	r2, [r3, #20]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	089b      	lsrs	r3, r3, #2
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	e00a      	b.n	8002336 <HAL_ADC_ConfigChannel+0x126>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	695a      	ldr	r2, [r3, #20]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	089b      	lsrs	r3, r3, #2
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	2b04      	cmp	r3, #4
 800233e:	d027      	beq.n	8002390 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	6919      	ldr	r1, [r3, #16]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800234e:	f7ff fab7 	bl	80018c0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	6919      	ldr	r1, [r3, #16]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	7e5b      	ldrb	r3, [r3, #25]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d102      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x158>
 8002362:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002366:	e000      	b.n	800236a <HAL_ADC_ConfigChannel+0x15a>
 8002368:	2300      	movs	r3, #0
 800236a:	461a      	mov	r2, r3
 800236c:	f7ff fae1 	bl	8001932 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6818      	ldr	r0, [r3, #0]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	6919      	ldr	r1, [r3, #16]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	7e1b      	ldrb	r3, [r3, #24]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d102      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x176>
 8002380:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002384:	e000      	b.n	8002388 <HAL_ADC_ConfigChannel+0x178>
 8002386:	2300      	movs	r3, #0
 8002388:	461a      	mov	r2, r3
 800238a:	f7ff fab9 	bl	8001900 <LL_ADC_SetDataRightShift>
 800238e:	e047      	b.n	8002420 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002396:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	069b      	lsls	r3, r3, #26
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d107      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023b2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	069b      	lsls	r3, r3, #26
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d107      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023d6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	069b      	lsls	r3, r3, #26
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d107      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023fa:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002402:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	069b      	lsls	r3, r3, #26
 800240c:	429a      	cmp	r2, r3
 800240e:	d107      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800241e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff fbab 	bl	8001b80 <LL_ADC_IsEnabled>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	f040 81bb 	bne.w	80027a8 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	6819      	ldr	r1, [r3, #0]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	461a      	mov	r2, r3
 8002440:	f7ff fafc 	bl	8001a3c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4a12      	ldr	r2, [pc, #72]	; (8002494 <HAL_ADC_ConfigChannel+0x284>)
 800244a:	4293      	cmp	r3, r2
 800244c:	f040 8130 	bne.w	80026b0 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10b      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x268>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	0e9b      	lsrs	r3, r3, #26
 8002466:	3301      	adds	r3, #1
 8002468:	f003 031f 	and.w	r3, r3, #31
 800246c:	2b09      	cmp	r3, #9
 800246e:	bf94      	ite	ls
 8002470:	2301      	movls	r3, #1
 8002472:	2300      	movhi	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	e01b      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x2a0>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002480:	fa93 f3a3 	rbit	r3, r3
 8002484:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002488:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800248a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d103      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8002490:	2320      	movs	r3, #32
 8002492:	e005      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x290>
 8002494:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8002498:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800249a:	fab3 f383 	clz	r3, r3
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	3301      	adds	r3, #1
 80024a2:	f003 031f 	and.w	r3, r3, #31
 80024a6:	2b09      	cmp	r3, #9
 80024a8:	bf94      	ite	ls
 80024aa:	2301      	movls	r3, #1
 80024ac:	2300      	movhi	r3, #0
 80024ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d079      	beq.n	80025a8 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d107      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x2c0>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	0e9b      	lsrs	r3, r3, #26
 80024c6:	3301      	adds	r3, #1
 80024c8:	069b      	lsls	r3, r3, #26
 80024ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024ce:	e015      	b.n	80024fc <HAL_ADC_ConfigChannel+0x2ec>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d8:	fa93 f3a3 	rbit	r3, r3
 80024dc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80024de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024e0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80024e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 80024e8:	2320      	movs	r3, #32
 80024ea:	e003      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 80024ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024ee:	fab3 f383 	clz	r3, r3
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	3301      	adds	r3, #1
 80024f6:	069b      	lsls	r3, r3, #26
 80024f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002504:	2b00      	cmp	r3, #0
 8002506:	d109      	bne.n	800251c <HAL_ADC_ConfigChannel+0x30c>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	0e9b      	lsrs	r3, r3, #26
 800250e:	3301      	adds	r3, #1
 8002510:	f003 031f 	and.w	r3, r3, #31
 8002514:	2101      	movs	r1, #1
 8002516:	fa01 f303 	lsl.w	r3, r1, r3
 800251a:	e017      	b.n	800254c <HAL_ADC_ConfigChannel+0x33c>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002524:	fa93 f3a3 	rbit	r3, r3
 8002528:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800252a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800252c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800252e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8002534:	2320      	movs	r3, #32
 8002536:	e003      	b.n	8002540 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8002538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800253a:	fab3 f383 	clz	r3, r3
 800253e:	b2db      	uxtb	r3, r3
 8002540:	3301      	adds	r3, #1
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	2101      	movs	r1, #1
 8002548:	fa01 f303 	lsl.w	r3, r1, r3
 800254c:	ea42 0103 	orr.w	r1, r2, r3
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10a      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x362>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	0e9b      	lsrs	r3, r3, #26
 8002562:	3301      	adds	r3, #1
 8002564:	f003 021f 	and.w	r2, r3, #31
 8002568:	4613      	mov	r3, r2
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	4413      	add	r3, r2
 800256e:	051b      	lsls	r3, r3, #20
 8002570:	e018      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x394>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800257a:	fa93 f3a3 	rbit	r3, r3
 800257e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002582:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800258a:	2320      	movs	r3, #32
 800258c:	e003      	b.n	8002596 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 800258e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002590:	fab3 f383 	clz	r3, r3
 8002594:	b2db      	uxtb	r3, r3
 8002596:	3301      	adds	r3, #1
 8002598:	f003 021f 	and.w	r2, r3, #31
 800259c:	4613      	mov	r3, r2
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	4413      	add	r3, r2
 80025a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025a4:	430b      	orrs	r3, r1
 80025a6:	e07e      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d107      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x3b4>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	0e9b      	lsrs	r3, r3, #26
 80025ba:	3301      	adds	r3, #1
 80025bc:	069b      	lsls	r3, r3, #26
 80025be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025c2:	e015      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x3e0>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025cc:	fa93 f3a3 	rbit	r3, r3
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80025d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80025dc:	2320      	movs	r3, #32
 80025de:	e003      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80025e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e2:	fab3 f383 	clz	r3, r3
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	3301      	adds	r3, #1
 80025ea:	069b      	lsls	r3, r3, #26
 80025ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d109      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x400>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	0e9b      	lsrs	r3, r3, #26
 8002602:	3301      	adds	r3, #1
 8002604:	f003 031f 	and.w	r3, r3, #31
 8002608:	2101      	movs	r1, #1
 800260a:	fa01 f303 	lsl.w	r3, r1, r3
 800260e:	e017      	b.n	8002640 <HAL_ADC_ConfigChannel+0x430>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	fa93 f3a3 	rbit	r3, r3
 800261c:	61bb      	str	r3, [r7, #24]
  return result;
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8002628:	2320      	movs	r3, #32
 800262a:	e003      	b.n	8002634 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	fab3 f383 	clz	r3, r3
 8002632:	b2db      	uxtb	r3, r3
 8002634:	3301      	adds	r3, #1
 8002636:	f003 031f 	and.w	r3, r3, #31
 800263a:	2101      	movs	r1, #1
 800263c:	fa01 f303 	lsl.w	r3, r1, r3
 8002640:	ea42 0103 	orr.w	r1, r2, r3
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10d      	bne.n	800266c <HAL_ADC_ConfigChannel+0x45c>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	0e9b      	lsrs	r3, r3, #26
 8002656:	3301      	adds	r3, #1
 8002658:	f003 021f 	and.w	r2, r3, #31
 800265c:	4613      	mov	r3, r2
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	4413      	add	r3, r2
 8002662:	3b1e      	subs	r3, #30
 8002664:	051b      	lsls	r3, r3, #20
 8002666:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800266a:	e01b      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x494>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	fa93 f3a3 	rbit	r3, r3
 8002678:	60fb      	str	r3, [r7, #12]
  return result;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8002684:	2320      	movs	r3, #32
 8002686:	e003      	b.n	8002690 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	fab3 f383 	clz	r3, r3
 800268e:	b2db      	uxtb	r3, r3
 8002690:	3301      	adds	r3, #1
 8002692:	f003 021f 	and.w	r2, r3, #31
 8002696:	4613      	mov	r3, r2
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	4413      	add	r3, r2
 800269c:	3b1e      	subs	r3, #30
 800269e:	051b      	lsls	r3, r3, #20
 80026a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026a4:	430b      	orrs	r3, r1
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	6892      	ldr	r2, [r2, #8]
 80026aa:	4619      	mov	r1, r3
 80026ac:	f7ff f99b 	bl	80019e6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	da77      	bge.n	80027a8 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026b8:	4840      	ldr	r0, [pc, #256]	; (80027bc <HAL_ADC_ConfigChannel+0x5ac>)
 80026ba:	f7ff f8f3 	bl	80018a4 <LL_ADC_GetCommonPathInternalCh>
 80026be:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026c0:	483f      	ldr	r0, [pc, #252]	; (80027c0 <HAL_ADC_ConfigChannel+0x5b0>)
 80026c2:	f7ff fa5d 	bl	8001b80 <LL_ADC_IsEnabled>
 80026c6:	4604      	mov	r4, r0
 80026c8:	483e      	ldr	r0, [pc, #248]	; (80027c4 <HAL_ADC_ConfigChannel+0x5b4>)
 80026ca:	f7ff fa59 	bl	8001b80 <LL_ADC_IsEnabled>
 80026ce:	4603      	mov	r3, r0
 80026d0:	4323      	orrs	r3, r4
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d155      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a3b      	ldr	r2, [pc, #236]	; (80027c8 <HAL_ADC_ConfigChannel+0x5b8>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d122      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x516>
 80026e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d11d      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a35      	ldr	r2, [pc, #212]	; (80027c4 <HAL_ADC_ConfigChannel+0x5b4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d159      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80026f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026fa:	4619      	mov	r1, r3
 80026fc:	482f      	ldr	r0, [pc, #188]	; (80027bc <HAL_ADC_ConfigChannel+0x5ac>)
 80026fe:	f7ff f8be 	bl	800187e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002702:	4b32      	ldr	r3, [pc, #200]	; (80027cc <HAL_ADC_ConfigChannel+0x5bc>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	099b      	lsrs	r3, r3, #6
 8002708:	4a31      	ldr	r2, [pc, #196]	; (80027d0 <HAL_ADC_ConfigChannel+0x5c0>)
 800270a:	fba2 2303 	umull	r2, r3, r2, r3
 800270e:	099b      	lsrs	r3, r3, #6
 8002710:	3301      	adds	r3, #1
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002716:	e002      	b.n	800271e <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	3b01      	subs	r3, #1
 800271c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1f9      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002724:	e040      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a2a      	ldr	r2, [pc, #168]	; (80027d4 <HAL_ADC_ConfigChannel+0x5c4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d111      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x544>
 8002730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002732:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10c      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a21      	ldr	r2, [pc, #132]	; (80027c4 <HAL_ADC_ConfigChannel+0x5b4>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d131      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002746:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800274a:	4619      	mov	r1, r3
 800274c:	481b      	ldr	r0, [pc, #108]	; (80027bc <HAL_ADC_ConfigChannel+0x5ac>)
 800274e:	f7ff f896 	bl	800187e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002752:	e029      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a1f      	ldr	r2, [pc, #124]	; (80027d8 <HAL_ADC_ConfigChannel+0x5c8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d124      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x598>
 800275e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002760:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d11f      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a15      	ldr	r2, [pc, #84]	; (80027c4 <HAL_ADC_ConfigChannel+0x5b4>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d11a      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002774:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002778:	4619      	mov	r1, r3
 800277a:	4810      	ldr	r0, [pc, #64]	; (80027bc <HAL_ADC_ConfigChannel+0x5ac>)
 800277c:	f7ff f87f 	bl	800187e <LL_ADC_SetCommonPathInternalCh>
 8002780:	e012      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002786:	f043 0220 	orr.w	r2, r3, #32
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002794:	e008      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279a:	f043 0220 	orr.w	r2, r3, #32
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80027b0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3784      	adds	r7, #132	; 0x84
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd90      	pop	{r4, r7, pc}
 80027bc:	40022300 	.word	0x40022300
 80027c0:	40022000 	.word	0x40022000
 80027c4:	40022100 	.word	0x40022100
 80027c8:	cb840000 	.word	0xcb840000
 80027cc:	24000008 	.word	0x24000008
 80027d0:	053e2d63 	.word	0x053e2d63
 80027d4:	bac04000 	.word	0xbac04000
 80027d8:	cfb80000 	.word	0xcfb80000

080027dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff f9c9 	bl	8001b80 <LL_ADC_IsEnabled>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d161      	bne.n	80028b8 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	4b32      	ldr	r3, [pc, #200]	; (80028c4 <ADC_Enable+0xe8>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00d      	beq.n	800281e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002806:	f043 0210 	orr.w	r2, r3, #16
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002812:	f043 0201 	orr.w	r2, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e04d      	b.n	80028ba <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff f998 	bl	8001b58 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002828:	f7ff f80a 	bl	8001840 <HAL_GetTick>
 800282c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800282e:	4826      	ldr	r0, [pc, #152]	; (80028c8 <ADC_Enable+0xec>)
 8002830:	f7ff f928 	bl	8001a84 <LL_ADC_GetMultimode>
 8002834:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a24      	ldr	r2, [pc, #144]	; (80028cc <ADC_Enable+0xf0>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d002      	beq.n	8002846 <ADC_Enable+0x6a>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	e000      	b.n	8002848 <ADC_Enable+0x6c>
 8002846:	4b22      	ldr	r3, [pc, #136]	; (80028d0 <ADC_Enable+0xf4>)
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6812      	ldr	r2, [r2, #0]
 800284c:	4293      	cmp	r3, r2
 800284e:	d02c      	beq.n	80028aa <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d130      	bne.n	80028b8 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002856:	e028      	b.n	80028aa <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff f98f 	bl	8001b80 <LL_ADC_IsEnabled>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d104      	bne.n	8002872 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff f973 	bl	8001b58 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002872:	f7fe ffe5 	bl	8001840 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d914      	bls.n	80028aa <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b01      	cmp	r3, #1
 800288c:	d00d      	beq.n	80028aa <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002892:	f043 0210 	orr.w	r2, r3, #16
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289e:	f043 0201 	orr.w	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e007      	b.n	80028ba <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d1cf      	bne.n	8002858 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	8000003f 	.word	0x8000003f
 80028c8:	40022300 	.word	0x40022300
 80028cc:	40022100 	.word	0x40022100
 80028d0:	40022000 	.word	0x40022000

080028d4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80028dc:	4b60      	ldr	r3, [pc, #384]	; (8002a60 <ADC_ConfigureBoostMode+0x18c>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d01c      	beq.n	8002922 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80028e8:	f002 f8bc 	bl	8004a64 <HAL_RCC_GetHCLKFreq>
 80028ec:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028f6:	d010      	beq.n	800291a <ADC_ConfigureBoostMode+0x46>
 80028f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028fc:	d873      	bhi.n	80029e6 <ADC_ConfigureBoostMode+0x112>
 80028fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002902:	d002      	beq.n	800290a <ADC_ConfigureBoostMode+0x36>
 8002904:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002908:	d16d      	bne.n	80029e6 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	0c1b      	lsrs	r3, r3, #16
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	fbb2 f3f3 	udiv	r3, r2, r3
 8002916:	60fb      	str	r3, [r7, #12]
        break;
 8002918:	e068      	b.n	80029ec <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	089b      	lsrs	r3, r3, #2
 800291e:	60fb      	str	r3, [r7, #12]
        break;
 8002920:	e064      	b.n	80029ec <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002922:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002926:	f04f 0100 	mov.w	r1, #0
 800292a:	f003 fab5 	bl	8005e98 <HAL_RCCEx_GetPeriphCLKFreq>
 800292e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002938:	d051      	beq.n	80029de <ADC_ConfigureBoostMode+0x10a>
 800293a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800293e:	d854      	bhi.n	80029ea <ADC_ConfigureBoostMode+0x116>
 8002940:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002944:	d047      	beq.n	80029d6 <ADC_ConfigureBoostMode+0x102>
 8002946:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800294a:	d84e      	bhi.n	80029ea <ADC_ConfigureBoostMode+0x116>
 800294c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002950:	d03d      	beq.n	80029ce <ADC_ConfigureBoostMode+0xfa>
 8002952:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002956:	d848      	bhi.n	80029ea <ADC_ConfigureBoostMode+0x116>
 8002958:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800295c:	d033      	beq.n	80029c6 <ADC_ConfigureBoostMode+0xf2>
 800295e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002962:	d842      	bhi.n	80029ea <ADC_ConfigureBoostMode+0x116>
 8002964:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002968:	d029      	beq.n	80029be <ADC_ConfigureBoostMode+0xea>
 800296a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800296e:	d83c      	bhi.n	80029ea <ADC_ConfigureBoostMode+0x116>
 8002970:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002974:	d01a      	beq.n	80029ac <ADC_ConfigureBoostMode+0xd8>
 8002976:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800297a:	d836      	bhi.n	80029ea <ADC_ConfigureBoostMode+0x116>
 800297c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002980:	d014      	beq.n	80029ac <ADC_ConfigureBoostMode+0xd8>
 8002982:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002986:	d830      	bhi.n	80029ea <ADC_ConfigureBoostMode+0x116>
 8002988:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800298c:	d00e      	beq.n	80029ac <ADC_ConfigureBoostMode+0xd8>
 800298e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002992:	d82a      	bhi.n	80029ea <ADC_ConfigureBoostMode+0x116>
 8002994:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002998:	d008      	beq.n	80029ac <ADC_ConfigureBoostMode+0xd8>
 800299a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800299e:	d824      	bhi.n	80029ea <ADC_ConfigureBoostMode+0x116>
 80029a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029a4:	d002      	beq.n	80029ac <ADC_ConfigureBoostMode+0xd8>
 80029a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029aa:	d11e      	bne.n	80029ea <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	0c9b      	lsrs	r3, r3, #18
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ba:	60fb      	str	r3, [r7, #12]
        break;
 80029bc:	e016      	b.n	80029ec <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	091b      	lsrs	r3, r3, #4
 80029c2:	60fb      	str	r3, [r7, #12]
        break;
 80029c4:	e012      	b.n	80029ec <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	095b      	lsrs	r3, r3, #5
 80029ca:	60fb      	str	r3, [r7, #12]
        break;
 80029cc:	e00e      	b.n	80029ec <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	099b      	lsrs	r3, r3, #6
 80029d2:	60fb      	str	r3, [r7, #12]
        break;
 80029d4:	e00a      	b.n	80029ec <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	09db      	lsrs	r3, r3, #7
 80029da:	60fb      	str	r3, [r7, #12]
        break;
 80029dc:	e006      	b.n	80029ec <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	0a1b      	lsrs	r3, r3, #8
 80029e2:	60fb      	str	r3, [r7, #12]
        break;
 80029e4:	e002      	b.n	80029ec <ADC_ConfigureBoostMode+0x118>
        break;
 80029e6:	bf00      	nop
 80029e8:	e000      	b.n	80029ec <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 80029ea:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	085b      	lsrs	r3, r3, #1
 80029f0:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4a1b      	ldr	r2, [pc, #108]	; (8002a64 <ADC_ConfigureBoostMode+0x190>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d808      	bhi.n	8002a0c <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a08:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002a0a:	e025      	b.n	8002a58 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4a16      	ldr	r2, [pc, #88]	; (8002a68 <ADC_ConfigureBoostMode+0x194>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d80a      	bhi.n	8002a2a <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a26:	609a      	str	r2, [r3, #8]
}
 8002a28:	e016      	b.n	8002a58 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4a0f      	ldr	r2, [pc, #60]	; (8002a6c <ADC_ConfigureBoostMode+0x198>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d80a      	bhi.n	8002a48 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a44:	609a      	str	r2, [r3, #8]
}
 8002a46:	e007      	b.n	8002a58 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002a56:	609a      	str	r2, [r3, #8]
}
 8002a58:	bf00      	nop
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40022300 	.word	0x40022300
 8002a64:	005f5e10 	.word	0x005f5e10
 8002a68:	00bebc20 	.word	0x00bebc20
 8002a6c:	017d7840 	.word	0x017d7840

08002a70 <__NVIC_SetPriorityGrouping>:
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a80:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <__NVIC_SetPriorityGrouping+0x40>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a98:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a9e:	4a04      	ldr	r2, [pc, #16]	; (8002ab0 <__NVIC_SetPriorityGrouping+0x40>)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	60d3      	str	r3, [r2, #12]
}
 8002aa4:	bf00      	nop
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	e000ed00 	.word	0xe000ed00
 8002ab4:	05fa0000 	.word	0x05fa0000

08002ab8 <__NVIC_GetPriorityGrouping>:
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002abc:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	0a1b      	lsrs	r3, r3, #8
 8002ac2:	f003 0307 	and.w	r3, r3, #7
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <__NVIC_EnableIRQ>:
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	db0b      	blt.n	8002afe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ae6:	88fb      	ldrh	r3, [r7, #6]
 8002ae8:	f003 021f 	and.w	r2, r3, #31
 8002aec:	4907      	ldr	r1, [pc, #28]	; (8002b0c <__NVIC_EnableIRQ+0x38>)
 8002aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	2001      	movs	r0, #1
 8002af6:	fa00 f202 	lsl.w	r2, r0, r2
 8002afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	e000e100 	.word	0xe000e100

08002b10 <__NVIC_SetPriority>:
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	6039      	str	r1, [r7, #0]
 8002b1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	db0a      	blt.n	8002b3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	490c      	ldr	r1, [pc, #48]	; (8002b5c <__NVIC_SetPriority+0x4c>)
 8002b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b2e:	0112      	lsls	r2, r2, #4
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	440b      	add	r3, r1
 8002b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b38:	e00a      	b.n	8002b50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	4908      	ldr	r1, [pc, #32]	; (8002b60 <__NVIC_SetPriority+0x50>)
 8002b40:	88fb      	ldrh	r3, [r7, #6]
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	3b04      	subs	r3, #4
 8002b48:	0112      	lsls	r2, r2, #4
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	761a      	strb	r2, [r3, #24]
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	e000e100 	.word	0xe000e100
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b089      	sub	sp, #36	; 0x24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f1c3 0307 	rsb	r3, r3, #7
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	bf28      	it	cs
 8002b82:	2304      	movcs	r3, #4
 8002b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	2b06      	cmp	r3, #6
 8002b8c:	d902      	bls.n	8002b94 <NVIC_EncodePriority+0x30>
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	3b03      	subs	r3, #3
 8002b92:	e000      	b.n	8002b96 <NVIC_EncodePriority+0x32>
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b98:	f04f 32ff 	mov.w	r2, #4294967295
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43da      	mvns	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bac:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb6:	43d9      	mvns	r1, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bbc:	4313      	orrs	r3, r2
         );
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3724      	adds	r7, #36	; 0x24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
	...

08002bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bdc:	d301      	bcc.n	8002be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bde:	2301      	movs	r3, #1
 8002be0:	e00f      	b.n	8002c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002be2:	4a0a      	ldr	r2, [pc, #40]	; (8002c0c <SysTick_Config+0x40>)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bea:	210f      	movs	r1, #15
 8002bec:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf0:	f7ff ff8e 	bl	8002b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bf4:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <SysTick_Config+0x40>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bfa:	4b04      	ldr	r3, [pc, #16]	; (8002c0c <SysTick_Config+0x40>)
 8002bfc:	2207      	movs	r2, #7
 8002bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	e000e010 	.word	0xe000e010

08002c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff ff29 	bl	8002a70 <__NVIC_SetPriorityGrouping>
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b086      	sub	sp, #24
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	60b9      	str	r1, [r7, #8]
 8002c30:	607a      	str	r2, [r7, #4]
 8002c32:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c34:	f7ff ff40 	bl	8002ab8 <__NVIC_GetPriorityGrouping>
 8002c38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	6978      	ldr	r0, [r7, #20]
 8002c40:	f7ff ff90 	bl	8002b64 <NVIC_EncodePriority>
 8002c44:	4602      	mov	r2, r0
 8002c46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff ff5f 	bl	8002b10 <__NVIC_SetPriority>
}
 8002c52:	bf00      	nop
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	4603      	mov	r3, r0
 8002c62:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff ff33 	bl	8002ad4 <__NVIC_EnableIRQ>
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7ff ffa4 	bl	8002bcc <SysTick_Config>
 8002c84:	4603      	mov	r3, r0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002c98:	f7fe fdd2 	bl	8001840 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e2dc      	b.n	8003262 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d008      	beq.n	8002cc6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2280      	movs	r2, #128	; 0x80
 8002cb8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e2cd      	b.n	8003262 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a76      	ldr	r2, [pc, #472]	; (8002ea4 <HAL_DMA_Abort+0x214>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d04a      	beq.n	8002d66 <HAL_DMA_Abort+0xd6>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a74      	ldr	r2, [pc, #464]	; (8002ea8 <HAL_DMA_Abort+0x218>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d045      	beq.n	8002d66 <HAL_DMA_Abort+0xd6>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a73      	ldr	r2, [pc, #460]	; (8002eac <HAL_DMA_Abort+0x21c>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d040      	beq.n	8002d66 <HAL_DMA_Abort+0xd6>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a71      	ldr	r2, [pc, #452]	; (8002eb0 <HAL_DMA_Abort+0x220>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d03b      	beq.n	8002d66 <HAL_DMA_Abort+0xd6>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a70      	ldr	r2, [pc, #448]	; (8002eb4 <HAL_DMA_Abort+0x224>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d036      	beq.n	8002d66 <HAL_DMA_Abort+0xd6>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a6e      	ldr	r2, [pc, #440]	; (8002eb8 <HAL_DMA_Abort+0x228>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d031      	beq.n	8002d66 <HAL_DMA_Abort+0xd6>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a6d      	ldr	r2, [pc, #436]	; (8002ebc <HAL_DMA_Abort+0x22c>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d02c      	beq.n	8002d66 <HAL_DMA_Abort+0xd6>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a6b      	ldr	r2, [pc, #428]	; (8002ec0 <HAL_DMA_Abort+0x230>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d027      	beq.n	8002d66 <HAL_DMA_Abort+0xd6>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a6a      	ldr	r2, [pc, #424]	; (8002ec4 <HAL_DMA_Abort+0x234>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d022      	beq.n	8002d66 <HAL_DMA_Abort+0xd6>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a68      	ldr	r2, [pc, #416]	; (8002ec8 <HAL_DMA_Abort+0x238>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d01d      	beq.n	8002d66 <HAL_DMA_Abort+0xd6>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a67      	ldr	r2, [pc, #412]	; (8002ecc <HAL_DMA_Abort+0x23c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d018      	beq.n	8002d66 <HAL_DMA_Abort+0xd6>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a65      	ldr	r2, [pc, #404]	; (8002ed0 <HAL_DMA_Abort+0x240>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d013      	beq.n	8002d66 <HAL_DMA_Abort+0xd6>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a64      	ldr	r2, [pc, #400]	; (8002ed4 <HAL_DMA_Abort+0x244>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d00e      	beq.n	8002d66 <HAL_DMA_Abort+0xd6>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a62      	ldr	r2, [pc, #392]	; (8002ed8 <HAL_DMA_Abort+0x248>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d009      	beq.n	8002d66 <HAL_DMA_Abort+0xd6>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a61      	ldr	r2, [pc, #388]	; (8002edc <HAL_DMA_Abort+0x24c>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d004      	beq.n	8002d66 <HAL_DMA_Abort+0xd6>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a5f      	ldr	r2, [pc, #380]	; (8002ee0 <HAL_DMA_Abort+0x250>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d101      	bne.n	8002d6a <HAL_DMA_Abort+0xda>
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <HAL_DMA_Abort+0xdc>
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d013      	beq.n	8002d98 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 021e 	bic.w	r2, r2, #30
 8002d7e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695a      	ldr	r2, [r3, #20]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d8e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	617b      	str	r3, [r7, #20]
 8002d96:	e00a      	b.n	8002dae <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 020e 	bic.w	r2, r2, #14
 8002da6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a3c      	ldr	r2, [pc, #240]	; (8002ea4 <HAL_DMA_Abort+0x214>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d072      	beq.n	8002e9e <HAL_DMA_Abort+0x20e>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a3a      	ldr	r2, [pc, #232]	; (8002ea8 <HAL_DMA_Abort+0x218>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d06d      	beq.n	8002e9e <HAL_DMA_Abort+0x20e>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a39      	ldr	r2, [pc, #228]	; (8002eac <HAL_DMA_Abort+0x21c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d068      	beq.n	8002e9e <HAL_DMA_Abort+0x20e>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a37      	ldr	r2, [pc, #220]	; (8002eb0 <HAL_DMA_Abort+0x220>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d063      	beq.n	8002e9e <HAL_DMA_Abort+0x20e>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a36      	ldr	r2, [pc, #216]	; (8002eb4 <HAL_DMA_Abort+0x224>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d05e      	beq.n	8002e9e <HAL_DMA_Abort+0x20e>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a34      	ldr	r2, [pc, #208]	; (8002eb8 <HAL_DMA_Abort+0x228>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d059      	beq.n	8002e9e <HAL_DMA_Abort+0x20e>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a33      	ldr	r2, [pc, #204]	; (8002ebc <HAL_DMA_Abort+0x22c>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d054      	beq.n	8002e9e <HAL_DMA_Abort+0x20e>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a31      	ldr	r2, [pc, #196]	; (8002ec0 <HAL_DMA_Abort+0x230>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d04f      	beq.n	8002e9e <HAL_DMA_Abort+0x20e>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a30      	ldr	r2, [pc, #192]	; (8002ec4 <HAL_DMA_Abort+0x234>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d04a      	beq.n	8002e9e <HAL_DMA_Abort+0x20e>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a2e      	ldr	r2, [pc, #184]	; (8002ec8 <HAL_DMA_Abort+0x238>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d045      	beq.n	8002e9e <HAL_DMA_Abort+0x20e>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a2d      	ldr	r2, [pc, #180]	; (8002ecc <HAL_DMA_Abort+0x23c>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d040      	beq.n	8002e9e <HAL_DMA_Abort+0x20e>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a2b      	ldr	r2, [pc, #172]	; (8002ed0 <HAL_DMA_Abort+0x240>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d03b      	beq.n	8002e9e <HAL_DMA_Abort+0x20e>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a2a      	ldr	r2, [pc, #168]	; (8002ed4 <HAL_DMA_Abort+0x244>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d036      	beq.n	8002e9e <HAL_DMA_Abort+0x20e>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a28      	ldr	r2, [pc, #160]	; (8002ed8 <HAL_DMA_Abort+0x248>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d031      	beq.n	8002e9e <HAL_DMA_Abort+0x20e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a27      	ldr	r2, [pc, #156]	; (8002edc <HAL_DMA_Abort+0x24c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d02c      	beq.n	8002e9e <HAL_DMA_Abort+0x20e>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a25      	ldr	r2, [pc, #148]	; (8002ee0 <HAL_DMA_Abort+0x250>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d027      	beq.n	8002e9e <HAL_DMA_Abort+0x20e>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a24      	ldr	r2, [pc, #144]	; (8002ee4 <HAL_DMA_Abort+0x254>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d022      	beq.n	8002e9e <HAL_DMA_Abort+0x20e>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a22      	ldr	r2, [pc, #136]	; (8002ee8 <HAL_DMA_Abort+0x258>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d01d      	beq.n	8002e9e <HAL_DMA_Abort+0x20e>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a21      	ldr	r2, [pc, #132]	; (8002eec <HAL_DMA_Abort+0x25c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d018      	beq.n	8002e9e <HAL_DMA_Abort+0x20e>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a1f      	ldr	r2, [pc, #124]	; (8002ef0 <HAL_DMA_Abort+0x260>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d013      	beq.n	8002e9e <HAL_DMA_Abort+0x20e>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a1e      	ldr	r2, [pc, #120]	; (8002ef4 <HAL_DMA_Abort+0x264>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d00e      	beq.n	8002e9e <HAL_DMA_Abort+0x20e>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a1c      	ldr	r2, [pc, #112]	; (8002ef8 <HAL_DMA_Abort+0x268>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d009      	beq.n	8002e9e <HAL_DMA_Abort+0x20e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a1b      	ldr	r2, [pc, #108]	; (8002efc <HAL_DMA_Abort+0x26c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d004      	beq.n	8002e9e <HAL_DMA_Abort+0x20e>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a19      	ldr	r2, [pc, #100]	; (8002f00 <HAL_DMA_Abort+0x270>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d132      	bne.n	8002f04 <HAL_DMA_Abort+0x274>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e031      	b.n	8002f06 <HAL_DMA_Abort+0x276>
 8002ea2:	bf00      	nop
 8002ea4:	40020010 	.word	0x40020010
 8002ea8:	40020028 	.word	0x40020028
 8002eac:	40020040 	.word	0x40020040
 8002eb0:	40020058 	.word	0x40020058
 8002eb4:	40020070 	.word	0x40020070
 8002eb8:	40020088 	.word	0x40020088
 8002ebc:	400200a0 	.word	0x400200a0
 8002ec0:	400200b8 	.word	0x400200b8
 8002ec4:	40020410 	.word	0x40020410
 8002ec8:	40020428 	.word	0x40020428
 8002ecc:	40020440 	.word	0x40020440
 8002ed0:	40020458 	.word	0x40020458
 8002ed4:	40020470 	.word	0x40020470
 8002ed8:	40020488 	.word	0x40020488
 8002edc:	400204a0 	.word	0x400204a0
 8002ee0:	400204b8 	.word	0x400204b8
 8002ee4:	58025408 	.word	0x58025408
 8002ee8:	5802541c 	.word	0x5802541c
 8002eec:	58025430 	.word	0x58025430
 8002ef0:	58025444 	.word	0x58025444
 8002ef4:	58025458 	.word	0x58025458
 8002ef8:	5802546c 	.word	0x5802546c
 8002efc:	58025480 	.word	0x58025480
 8002f00:	58025494 	.word	0x58025494
 8002f04:	2300      	movs	r3, #0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d007      	beq.n	8002f1a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f18:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a6d      	ldr	r2, [pc, #436]	; (80030d4 <HAL_DMA_Abort+0x444>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d04a      	beq.n	8002fba <HAL_DMA_Abort+0x32a>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a6b      	ldr	r2, [pc, #428]	; (80030d8 <HAL_DMA_Abort+0x448>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d045      	beq.n	8002fba <HAL_DMA_Abort+0x32a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a6a      	ldr	r2, [pc, #424]	; (80030dc <HAL_DMA_Abort+0x44c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d040      	beq.n	8002fba <HAL_DMA_Abort+0x32a>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a68      	ldr	r2, [pc, #416]	; (80030e0 <HAL_DMA_Abort+0x450>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d03b      	beq.n	8002fba <HAL_DMA_Abort+0x32a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a67      	ldr	r2, [pc, #412]	; (80030e4 <HAL_DMA_Abort+0x454>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d036      	beq.n	8002fba <HAL_DMA_Abort+0x32a>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a65      	ldr	r2, [pc, #404]	; (80030e8 <HAL_DMA_Abort+0x458>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d031      	beq.n	8002fba <HAL_DMA_Abort+0x32a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a64      	ldr	r2, [pc, #400]	; (80030ec <HAL_DMA_Abort+0x45c>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d02c      	beq.n	8002fba <HAL_DMA_Abort+0x32a>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a62      	ldr	r2, [pc, #392]	; (80030f0 <HAL_DMA_Abort+0x460>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d027      	beq.n	8002fba <HAL_DMA_Abort+0x32a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a61      	ldr	r2, [pc, #388]	; (80030f4 <HAL_DMA_Abort+0x464>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d022      	beq.n	8002fba <HAL_DMA_Abort+0x32a>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a5f      	ldr	r2, [pc, #380]	; (80030f8 <HAL_DMA_Abort+0x468>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d01d      	beq.n	8002fba <HAL_DMA_Abort+0x32a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a5e      	ldr	r2, [pc, #376]	; (80030fc <HAL_DMA_Abort+0x46c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d018      	beq.n	8002fba <HAL_DMA_Abort+0x32a>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a5c      	ldr	r2, [pc, #368]	; (8003100 <HAL_DMA_Abort+0x470>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d013      	beq.n	8002fba <HAL_DMA_Abort+0x32a>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a5b      	ldr	r2, [pc, #364]	; (8003104 <HAL_DMA_Abort+0x474>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d00e      	beq.n	8002fba <HAL_DMA_Abort+0x32a>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a59      	ldr	r2, [pc, #356]	; (8003108 <HAL_DMA_Abort+0x478>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d009      	beq.n	8002fba <HAL_DMA_Abort+0x32a>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a58      	ldr	r2, [pc, #352]	; (800310c <HAL_DMA_Abort+0x47c>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d004      	beq.n	8002fba <HAL_DMA_Abort+0x32a>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a56      	ldr	r2, [pc, #344]	; (8003110 <HAL_DMA_Abort+0x480>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d108      	bne.n	8002fcc <HAL_DMA_Abort+0x33c>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0201 	bic.w	r2, r2, #1
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	e007      	b.n	8002fdc <HAL_DMA_Abort+0x34c>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0201 	bic.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002fdc:	e013      	b.n	8003006 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fde:	f7fe fc2f 	bl	8001840 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b05      	cmp	r3, #5
 8002fea:	d90c      	bls.n	8003006 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2203      	movs	r2, #3
 8002ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e12d      	b.n	8003262 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1e5      	bne.n	8002fde <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a2f      	ldr	r2, [pc, #188]	; (80030d4 <HAL_DMA_Abort+0x444>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d04a      	beq.n	80030b2 <HAL_DMA_Abort+0x422>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a2d      	ldr	r2, [pc, #180]	; (80030d8 <HAL_DMA_Abort+0x448>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d045      	beq.n	80030b2 <HAL_DMA_Abort+0x422>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a2c      	ldr	r2, [pc, #176]	; (80030dc <HAL_DMA_Abort+0x44c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d040      	beq.n	80030b2 <HAL_DMA_Abort+0x422>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a2a      	ldr	r2, [pc, #168]	; (80030e0 <HAL_DMA_Abort+0x450>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d03b      	beq.n	80030b2 <HAL_DMA_Abort+0x422>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a29      	ldr	r2, [pc, #164]	; (80030e4 <HAL_DMA_Abort+0x454>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d036      	beq.n	80030b2 <HAL_DMA_Abort+0x422>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a27      	ldr	r2, [pc, #156]	; (80030e8 <HAL_DMA_Abort+0x458>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d031      	beq.n	80030b2 <HAL_DMA_Abort+0x422>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a26      	ldr	r2, [pc, #152]	; (80030ec <HAL_DMA_Abort+0x45c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d02c      	beq.n	80030b2 <HAL_DMA_Abort+0x422>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a24      	ldr	r2, [pc, #144]	; (80030f0 <HAL_DMA_Abort+0x460>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d027      	beq.n	80030b2 <HAL_DMA_Abort+0x422>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a23      	ldr	r2, [pc, #140]	; (80030f4 <HAL_DMA_Abort+0x464>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d022      	beq.n	80030b2 <HAL_DMA_Abort+0x422>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a21      	ldr	r2, [pc, #132]	; (80030f8 <HAL_DMA_Abort+0x468>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d01d      	beq.n	80030b2 <HAL_DMA_Abort+0x422>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a20      	ldr	r2, [pc, #128]	; (80030fc <HAL_DMA_Abort+0x46c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d018      	beq.n	80030b2 <HAL_DMA_Abort+0x422>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a1e      	ldr	r2, [pc, #120]	; (8003100 <HAL_DMA_Abort+0x470>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d013      	beq.n	80030b2 <HAL_DMA_Abort+0x422>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a1d      	ldr	r2, [pc, #116]	; (8003104 <HAL_DMA_Abort+0x474>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d00e      	beq.n	80030b2 <HAL_DMA_Abort+0x422>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a1b      	ldr	r2, [pc, #108]	; (8003108 <HAL_DMA_Abort+0x478>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d009      	beq.n	80030b2 <HAL_DMA_Abort+0x422>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a1a      	ldr	r2, [pc, #104]	; (800310c <HAL_DMA_Abort+0x47c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d004      	beq.n	80030b2 <HAL_DMA_Abort+0x422>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a18      	ldr	r2, [pc, #96]	; (8003110 <HAL_DMA_Abort+0x480>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d101      	bne.n	80030b6 <HAL_DMA_Abort+0x426>
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <HAL_DMA_Abort+0x428>
 80030b6:	2300      	movs	r3, #0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d02b      	beq.n	8003114 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c6:	f003 031f 	and.w	r3, r3, #31
 80030ca:	223f      	movs	r2, #63	; 0x3f
 80030cc:	409a      	lsls	r2, r3
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	609a      	str	r2, [r3, #8]
 80030d2:	e02a      	b.n	800312a <HAL_DMA_Abort+0x49a>
 80030d4:	40020010 	.word	0x40020010
 80030d8:	40020028 	.word	0x40020028
 80030dc:	40020040 	.word	0x40020040
 80030e0:	40020058 	.word	0x40020058
 80030e4:	40020070 	.word	0x40020070
 80030e8:	40020088 	.word	0x40020088
 80030ec:	400200a0 	.word	0x400200a0
 80030f0:	400200b8 	.word	0x400200b8
 80030f4:	40020410 	.word	0x40020410
 80030f8:	40020428 	.word	0x40020428
 80030fc:	40020440 	.word	0x40020440
 8003100:	40020458 	.word	0x40020458
 8003104:	40020470 	.word	0x40020470
 8003108:	40020488 	.word	0x40020488
 800310c:	400204a0 	.word	0x400204a0
 8003110:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003118:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311e:	f003 031f 	and.w	r3, r3, #31
 8003122:	2201      	movs	r2, #1
 8003124:	409a      	lsls	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a4f      	ldr	r2, [pc, #316]	; (800326c <HAL_DMA_Abort+0x5dc>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d072      	beq.n	800321a <HAL_DMA_Abort+0x58a>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a4d      	ldr	r2, [pc, #308]	; (8003270 <HAL_DMA_Abort+0x5e0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d06d      	beq.n	800321a <HAL_DMA_Abort+0x58a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a4c      	ldr	r2, [pc, #304]	; (8003274 <HAL_DMA_Abort+0x5e4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d068      	beq.n	800321a <HAL_DMA_Abort+0x58a>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a4a      	ldr	r2, [pc, #296]	; (8003278 <HAL_DMA_Abort+0x5e8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d063      	beq.n	800321a <HAL_DMA_Abort+0x58a>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a49      	ldr	r2, [pc, #292]	; (800327c <HAL_DMA_Abort+0x5ec>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d05e      	beq.n	800321a <HAL_DMA_Abort+0x58a>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a47      	ldr	r2, [pc, #284]	; (8003280 <HAL_DMA_Abort+0x5f0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d059      	beq.n	800321a <HAL_DMA_Abort+0x58a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a46      	ldr	r2, [pc, #280]	; (8003284 <HAL_DMA_Abort+0x5f4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d054      	beq.n	800321a <HAL_DMA_Abort+0x58a>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a44      	ldr	r2, [pc, #272]	; (8003288 <HAL_DMA_Abort+0x5f8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d04f      	beq.n	800321a <HAL_DMA_Abort+0x58a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a43      	ldr	r2, [pc, #268]	; (800328c <HAL_DMA_Abort+0x5fc>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d04a      	beq.n	800321a <HAL_DMA_Abort+0x58a>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a41      	ldr	r2, [pc, #260]	; (8003290 <HAL_DMA_Abort+0x600>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d045      	beq.n	800321a <HAL_DMA_Abort+0x58a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a40      	ldr	r2, [pc, #256]	; (8003294 <HAL_DMA_Abort+0x604>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d040      	beq.n	800321a <HAL_DMA_Abort+0x58a>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a3e      	ldr	r2, [pc, #248]	; (8003298 <HAL_DMA_Abort+0x608>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d03b      	beq.n	800321a <HAL_DMA_Abort+0x58a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a3d      	ldr	r2, [pc, #244]	; (800329c <HAL_DMA_Abort+0x60c>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d036      	beq.n	800321a <HAL_DMA_Abort+0x58a>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a3b      	ldr	r2, [pc, #236]	; (80032a0 <HAL_DMA_Abort+0x610>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d031      	beq.n	800321a <HAL_DMA_Abort+0x58a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a3a      	ldr	r2, [pc, #232]	; (80032a4 <HAL_DMA_Abort+0x614>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d02c      	beq.n	800321a <HAL_DMA_Abort+0x58a>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a38      	ldr	r2, [pc, #224]	; (80032a8 <HAL_DMA_Abort+0x618>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d027      	beq.n	800321a <HAL_DMA_Abort+0x58a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a37      	ldr	r2, [pc, #220]	; (80032ac <HAL_DMA_Abort+0x61c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d022      	beq.n	800321a <HAL_DMA_Abort+0x58a>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a35      	ldr	r2, [pc, #212]	; (80032b0 <HAL_DMA_Abort+0x620>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d01d      	beq.n	800321a <HAL_DMA_Abort+0x58a>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a34      	ldr	r2, [pc, #208]	; (80032b4 <HAL_DMA_Abort+0x624>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d018      	beq.n	800321a <HAL_DMA_Abort+0x58a>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a32      	ldr	r2, [pc, #200]	; (80032b8 <HAL_DMA_Abort+0x628>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d013      	beq.n	800321a <HAL_DMA_Abort+0x58a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a31      	ldr	r2, [pc, #196]	; (80032bc <HAL_DMA_Abort+0x62c>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00e      	beq.n	800321a <HAL_DMA_Abort+0x58a>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a2f      	ldr	r2, [pc, #188]	; (80032c0 <HAL_DMA_Abort+0x630>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d009      	beq.n	800321a <HAL_DMA_Abort+0x58a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a2e      	ldr	r2, [pc, #184]	; (80032c4 <HAL_DMA_Abort+0x634>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d004      	beq.n	800321a <HAL_DMA_Abort+0x58a>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a2c      	ldr	r2, [pc, #176]	; (80032c8 <HAL_DMA_Abort+0x638>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d101      	bne.n	800321e <HAL_DMA_Abort+0x58e>
 800321a:	2301      	movs	r3, #1
 800321c:	e000      	b.n	8003220 <HAL_DMA_Abort+0x590>
 800321e:	2300      	movs	r3, #0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d015      	beq.n	8003250 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800322c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00c      	beq.n	8003250 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003240:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003244:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800324e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3718      	adds	r7, #24
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	40020010 	.word	0x40020010
 8003270:	40020028 	.word	0x40020028
 8003274:	40020040 	.word	0x40020040
 8003278:	40020058 	.word	0x40020058
 800327c:	40020070 	.word	0x40020070
 8003280:	40020088 	.word	0x40020088
 8003284:	400200a0 	.word	0x400200a0
 8003288:	400200b8 	.word	0x400200b8
 800328c:	40020410 	.word	0x40020410
 8003290:	40020428 	.word	0x40020428
 8003294:	40020440 	.word	0x40020440
 8003298:	40020458 	.word	0x40020458
 800329c:	40020470 	.word	0x40020470
 80032a0:	40020488 	.word	0x40020488
 80032a4:	400204a0 	.word	0x400204a0
 80032a8:	400204b8 	.word	0x400204b8
 80032ac:	58025408 	.word	0x58025408
 80032b0:	5802541c 	.word	0x5802541c
 80032b4:	58025430 	.word	0x58025430
 80032b8:	58025444 	.word	0x58025444
 80032bc:	58025458 	.word	0x58025458
 80032c0:	5802546c 	.word	0x5802546c
 80032c4:	58025480 	.word	0x58025480
 80032c8:	58025494 	.word	0x58025494

080032cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e237      	b.n	800374e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d004      	beq.n	80032f4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2280      	movs	r2, #128	; 0x80
 80032ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e22c      	b.n	800374e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a5c      	ldr	r2, [pc, #368]	; (800346c <HAL_DMA_Abort_IT+0x1a0>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d04a      	beq.n	8003394 <HAL_DMA_Abort_IT+0xc8>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a5b      	ldr	r2, [pc, #364]	; (8003470 <HAL_DMA_Abort_IT+0x1a4>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d045      	beq.n	8003394 <HAL_DMA_Abort_IT+0xc8>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a59      	ldr	r2, [pc, #356]	; (8003474 <HAL_DMA_Abort_IT+0x1a8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d040      	beq.n	8003394 <HAL_DMA_Abort_IT+0xc8>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a58      	ldr	r2, [pc, #352]	; (8003478 <HAL_DMA_Abort_IT+0x1ac>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d03b      	beq.n	8003394 <HAL_DMA_Abort_IT+0xc8>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a56      	ldr	r2, [pc, #344]	; (800347c <HAL_DMA_Abort_IT+0x1b0>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d036      	beq.n	8003394 <HAL_DMA_Abort_IT+0xc8>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a55      	ldr	r2, [pc, #340]	; (8003480 <HAL_DMA_Abort_IT+0x1b4>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d031      	beq.n	8003394 <HAL_DMA_Abort_IT+0xc8>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a53      	ldr	r2, [pc, #332]	; (8003484 <HAL_DMA_Abort_IT+0x1b8>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d02c      	beq.n	8003394 <HAL_DMA_Abort_IT+0xc8>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a52      	ldr	r2, [pc, #328]	; (8003488 <HAL_DMA_Abort_IT+0x1bc>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d027      	beq.n	8003394 <HAL_DMA_Abort_IT+0xc8>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a50      	ldr	r2, [pc, #320]	; (800348c <HAL_DMA_Abort_IT+0x1c0>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d022      	beq.n	8003394 <HAL_DMA_Abort_IT+0xc8>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a4f      	ldr	r2, [pc, #316]	; (8003490 <HAL_DMA_Abort_IT+0x1c4>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d01d      	beq.n	8003394 <HAL_DMA_Abort_IT+0xc8>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a4d      	ldr	r2, [pc, #308]	; (8003494 <HAL_DMA_Abort_IT+0x1c8>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d018      	beq.n	8003394 <HAL_DMA_Abort_IT+0xc8>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a4c      	ldr	r2, [pc, #304]	; (8003498 <HAL_DMA_Abort_IT+0x1cc>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d013      	beq.n	8003394 <HAL_DMA_Abort_IT+0xc8>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a4a      	ldr	r2, [pc, #296]	; (800349c <HAL_DMA_Abort_IT+0x1d0>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d00e      	beq.n	8003394 <HAL_DMA_Abort_IT+0xc8>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a49      	ldr	r2, [pc, #292]	; (80034a0 <HAL_DMA_Abort_IT+0x1d4>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d009      	beq.n	8003394 <HAL_DMA_Abort_IT+0xc8>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a47      	ldr	r2, [pc, #284]	; (80034a4 <HAL_DMA_Abort_IT+0x1d8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d004      	beq.n	8003394 <HAL_DMA_Abort_IT+0xc8>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a46      	ldr	r2, [pc, #280]	; (80034a8 <HAL_DMA_Abort_IT+0x1dc>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d101      	bne.n	8003398 <HAL_DMA_Abort_IT+0xcc>
 8003394:	2301      	movs	r3, #1
 8003396:	e000      	b.n	800339a <HAL_DMA_Abort_IT+0xce>
 8003398:	2300      	movs	r3, #0
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 8086 	beq.w	80034ac <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2204      	movs	r2, #4
 80033a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a2f      	ldr	r2, [pc, #188]	; (800346c <HAL_DMA_Abort_IT+0x1a0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d04a      	beq.n	8003448 <HAL_DMA_Abort_IT+0x17c>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a2e      	ldr	r2, [pc, #184]	; (8003470 <HAL_DMA_Abort_IT+0x1a4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d045      	beq.n	8003448 <HAL_DMA_Abort_IT+0x17c>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a2c      	ldr	r2, [pc, #176]	; (8003474 <HAL_DMA_Abort_IT+0x1a8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d040      	beq.n	8003448 <HAL_DMA_Abort_IT+0x17c>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a2b      	ldr	r2, [pc, #172]	; (8003478 <HAL_DMA_Abort_IT+0x1ac>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d03b      	beq.n	8003448 <HAL_DMA_Abort_IT+0x17c>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a29      	ldr	r2, [pc, #164]	; (800347c <HAL_DMA_Abort_IT+0x1b0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d036      	beq.n	8003448 <HAL_DMA_Abort_IT+0x17c>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a28      	ldr	r2, [pc, #160]	; (8003480 <HAL_DMA_Abort_IT+0x1b4>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d031      	beq.n	8003448 <HAL_DMA_Abort_IT+0x17c>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a26      	ldr	r2, [pc, #152]	; (8003484 <HAL_DMA_Abort_IT+0x1b8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d02c      	beq.n	8003448 <HAL_DMA_Abort_IT+0x17c>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a25      	ldr	r2, [pc, #148]	; (8003488 <HAL_DMA_Abort_IT+0x1bc>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d027      	beq.n	8003448 <HAL_DMA_Abort_IT+0x17c>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a23      	ldr	r2, [pc, #140]	; (800348c <HAL_DMA_Abort_IT+0x1c0>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d022      	beq.n	8003448 <HAL_DMA_Abort_IT+0x17c>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a22      	ldr	r2, [pc, #136]	; (8003490 <HAL_DMA_Abort_IT+0x1c4>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d01d      	beq.n	8003448 <HAL_DMA_Abort_IT+0x17c>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a20      	ldr	r2, [pc, #128]	; (8003494 <HAL_DMA_Abort_IT+0x1c8>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d018      	beq.n	8003448 <HAL_DMA_Abort_IT+0x17c>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a1f      	ldr	r2, [pc, #124]	; (8003498 <HAL_DMA_Abort_IT+0x1cc>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d013      	beq.n	8003448 <HAL_DMA_Abort_IT+0x17c>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a1d      	ldr	r2, [pc, #116]	; (800349c <HAL_DMA_Abort_IT+0x1d0>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d00e      	beq.n	8003448 <HAL_DMA_Abort_IT+0x17c>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a1c      	ldr	r2, [pc, #112]	; (80034a0 <HAL_DMA_Abort_IT+0x1d4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d009      	beq.n	8003448 <HAL_DMA_Abort_IT+0x17c>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a1a      	ldr	r2, [pc, #104]	; (80034a4 <HAL_DMA_Abort_IT+0x1d8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d004      	beq.n	8003448 <HAL_DMA_Abort_IT+0x17c>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a19      	ldr	r2, [pc, #100]	; (80034a8 <HAL_DMA_Abort_IT+0x1dc>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d108      	bne.n	800345a <HAL_DMA_Abort_IT+0x18e>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0201 	bic.w	r2, r2, #1
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	e178      	b.n	800374c <HAL_DMA_Abort_IT+0x480>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0201 	bic.w	r2, r2, #1
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	e16f      	b.n	800374c <HAL_DMA_Abort_IT+0x480>
 800346c:	40020010 	.word	0x40020010
 8003470:	40020028 	.word	0x40020028
 8003474:	40020040 	.word	0x40020040
 8003478:	40020058 	.word	0x40020058
 800347c:	40020070 	.word	0x40020070
 8003480:	40020088 	.word	0x40020088
 8003484:	400200a0 	.word	0x400200a0
 8003488:	400200b8 	.word	0x400200b8
 800348c:	40020410 	.word	0x40020410
 8003490:	40020428 	.word	0x40020428
 8003494:	40020440 	.word	0x40020440
 8003498:	40020458 	.word	0x40020458
 800349c:	40020470 	.word	0x40020470
 80034a0:	40020488 	.word	0x40020488
 80034a4:	400204a0 	.word	0x400204a0
 80034a8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 020e 	bic.w	r2, r2, #14
 80034ba:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a6c      	ldr	r2, [pc, #432]	; (8003674 <HAL_DMA_Abort_IT+0x3a8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d04a      	beq.n	800355c <HAL_DMA_Abort_IT+0x290>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a6b      	ldr	r2, [pc, #428]	; (8003678 <HAL_DMA_Abort_IT+0x3ac>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d045      	beq.n	800355c <HAL_DMA_Abort_IT+0x290>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a69      	ldr	r2, [pc, #420]	; (800367c <HAL_DMA_Abort_IT+0x3b0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d040      	beq.n	800355c <HAL_DMA_Abort_IT+0x290>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a68      	ldr	r2, [pc, #416]	; (8003680 <HAL_DMA_Abort_IT+0x3b4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d03b      	beq.n	800355c <HAL_DMA_Abort_IT+0x290>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a66      	ldr	r2, [pc, #408]	; (8003684 <HAL_DMA_Abort_IT+0x3b8>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d036      	beq.n	800355c <HAL_DMA_Abort_IT+0x290>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a65      	ldr	r2, [pc, #404]	; (8003688 <HAL_DMA_Abort_IT+0x3bc>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d031      	beq.n	800355c <HAL_DMA_Abort_IT+0x290>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a63      	ldr	r2, [pc, #396]	; (800368c <HAL_DMA_Abort_IT+0x3c0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d02c      	beq.n	800355c <HAL_DMA_Abort_IT+0x290>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a62      	ldr	r2, [pc, #392]	; (8003690 <HAL_DMA_Abort_IT+0x3c4>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d027      	beq.n	800355c <HAL_DMA_Abort_IT+0x290>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a60      	ldr	r2, [pc, #384]	; (8003694 <HAL_DMA_Abort_IT+0x3c8>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d022      	beq.n	800355c <HAL_DMA_Abort_IT+0x290>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a5f      	ldr	r2, [pc, #380]	; (8003698 <HAL_DMA_Abort_IT+0x3cc>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d01d      	beq.n	800355c <HAL_DMA_Abort_IT+0x290>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a5d      	ldr	r2, [pc, #372]	; (800369c <HAL_DMA_Abort_IT+0x3d0>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d018      	beq.n	800355c <HAL_DMA_Abort_IT+0x290>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a5c      	ldr	r2, [pc, #368]	; (80036a0 <HAL_DMA_Abort_IT+0x3d4>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d013      	beq.n	800355c <HAL_DMA_Abort_IT+0x290>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a5a      	ldr	r2, [pc, #360]	; (80036a4 <HAL_DMA_Abort_IT+0x3d8>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d00e      	beq.n	800355c <HAL_DMA_Abort_IT+0x290>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a59      	ldr	r2, [pc, #356]	; (80036a8 <HAL_DMA_Abort_IT+0x3dc>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d009      	beq.n	800355c <HAL_DMA_Abort_IT+0x290>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a57      	ldr	r2, [pc, #348]	; (80036ac <HAL_DMA_Abort_IT+0x3e0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d004      	beq.n	800355c <HAL_DMA_Abort_IT+0x290>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a56      	ldr	r2, [pc, #344]	; (80036b0 <HAL_DMA_Abort_IT+0x3e4>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d108      	bne.n	800356e <HAL_DMA_Abort_IT+0x2a2>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0201 	bic.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	e007      	b.n	800357e <HAL_DMA_Abort_IT+0x2b2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0201 	bic.w	r2, r2, #1
 800357c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a3c      	ldr	r2, [pc, #240]	; (8003674 <HAL_DMA_Abort_IT+0x3a8>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d072      	beq.n	800366e <HAL_DMA_Abort_IT+0x3a2>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a3a      	ldr	r2, [pc, #232]	; (8003678 <HAL_DMA_Abort_IT+0x3ac>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d06d      	beq.n	800366e <HAL_DMA_Abort_IT+0x3a2>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a39      	ldr	r2, [pc, #228]	; (800367c <HAL_DMA_Abort_IT+0x3b0>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d068      	beq.n	800366e <HAL_DMA_Abort_IT+0x3a2>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a37      	ldr	r2, [pc, #220]	; (8003680 <HAL_DMA_Abort_IT+0x3b4>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d063      	beq.n	800366e <HAL_DMA_Abort_IT+0x3a2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a36      	ldr	r2, [pc, #216]	; (8003684 <HAL_DMA_Abort_IT+0x3b8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d05e      	beq.n	800366e <HAL_DMA_Abort_IT+0x3a2>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a34      	ldr	r2, [pc, #208]	; (8003688 <HAL_DMA_Abort_IT+0x3bc>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d059      	beq.n	800366e <HAL_DMA_Abort_IT+0x3a2>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a33      	ldr	r2, [pc, #204]	; (800368c <HAL_DMA_Abort_IT+0x3c0>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d054      	beq.n	800366e <HAL_DMA_Abort_IT+0x3a2>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a31      	ldr	r2, [pc, #196]	; (8003690 <HAL_DMA_Abort_IT+0x3c4>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d04f      	beq.n	800366e <HAL_DMA_Abort_IT+0x3a2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a30      	ldr	r2, [pc, #192]	; (8003694 <HAL_DMA_Abort_IT+0x3c8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d04a      	beq.n	800366e <HAL_DMA_Abort_IT+0x3a2>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a2e      	ldr	r2, [pc, #184]	; (8003698 <HAL_DMA_Abort_IT+0x3cc>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d045      	beq.n	800366e <HAL_DMA_Abort_IT+0x3a2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a2d      	ldr	r2, [pc, #180]	; (800369c <HAL_DMA_Abort_IT+0x3d0>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d040      	beq.n	800366e <HAL_DMA_Abort_IT+0x3a2>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a2b      	ldr	r2, [pc, #172]	; (80036a0 <HAL_DMA_Abort_IT+0x3d4>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d03b      	beq.n	800366e <HAL_DMA_Abort_IT+0x3a2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a2a      	ldr	r2, [pc, #168]	; (80036a4 <HAL_DMA_Abort_IT+0x3d8>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d036      	beq.n	800366e <HAL_DMA_Abort_IT+0x3a2>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a28      	ldr	r2, [pc, #160]	; (80036a8 <HAL_DMA_Abort_IT+0x3dc>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d031      	beq.n	800366e <HAL_DMA_Abort_IT+0x3a2>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a27      	ldr	r2, [pc, #156]	; (80036ac <HAL_DMA_Abort_IT+0x3e0>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d02c      	beq.n	800366e <HAL_DMA_Abort_IT+0x3a2>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a25      	ldr	r2, [pc, #148]	; (80036b0 <HAL_DMA_Abort_IT+0x3e4>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d027      	beq.n	800366e <HAL_DMA_Abort_IT+0x3a2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a24      	ldr	r2, [pc, #144]	; (80036b4 <HAL_DMA_Abort_IT+0x3e8>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d022      	beq.n	800366e <HAL_DMA_Abort_IT+0x3a2>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a22      	ldr	r2, [pc, #136]	; (80036b8 <HAL_DMA_Abort_IT+0x3ec>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d01d      	beq.n	800366e <HAL_DMA_Abort_IT+0x3a2>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a21      	ldr	r2, [pc, #132]	; (80036bc <HAL_DMA_Abort_IT+0x3f0>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d018      	beq.n	800366e <HAL_DMA_Abort_IT+0x3a2>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a1f      	ldr	r2, [pc, #124]	; (80036c0 <HAL_DMA_Abort_IT+0x3f4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d013      	beq.n	800366e <HAL_DMA_Abort_IT+0x3a2>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a1e      	ldr	r2, [pc, #120]	; (80036c4 <HAL_DMA_Abort_IT+0x3f8>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d00e      	beq.n	800366e <HAL_DMA_Abort_IT+0x3a2>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a1c      	ldr	r2, [pc, #112]	; (80036c8 <HAL_DMA_Abort_IT+0x3fc>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d009      	beq.n	800366e <HAL_DMA_Abort_IT+0x3a2>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a1b      	ldr	r2, [pc, #108]	; (80036cc <HAL_DMA_Abort_IT+0x400>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d004      	beq.n	800366e <HAL_DMA_Abort_IT+0x3a2>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a19      	ldr	r2, [pc, #100]	; (80036d0 <HAL_DMA_Abort_IT+0x404>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d132      	bne.n	80036d4 <HAL_DMA_Abort_IT+0x408>
 800366e:	2301      	movs	r3, #1
 8003670:	e031      	b.n	80036d6 <HAL_DMA_Abort_IT+0x40a>
 8003672:	bf00      	nop
 8003674:	40020010 	.word	0x40020010
 8003678:	40020028 	.word	0x40020028
 800367c:	40020040 	.word	0x40020040
 8003680:	40020058 	.word	0x40020058
 8003684:	40020070 	.word	0x40020070
 8003688:	40020088 	.word	0x40020088
 800368c:	400200a0 	.word	0x400200a0
 8003690:	400200b8 	.word	0x400200b8
 8003694:	40020410 	.word	0x40020410
 8003698:	40020428 	.word	0x40020428
 800369c:	40020440 	.word	0x40020440
 80036a0:	40020458 	.word	0x40020458
 80036a4:	40020470 	.word	0x40020470
 80036a8:	40020488 	.word	0x40020488
 80036ac:	400204a0 	.word	0x400204a0
 80036b0:	400204b8 	.word	0x400204b8
 80036b4:	58025408 	.word	0x58025408
 80036b8:	5802541c 	.word	0x5802541c
 80036bc:	58025430 	.word	0x58025430
 80036c0:	58025444 	.word	0x58025444
 80036c4:	58025458 	.word	0x58025458
 80036c8:	5802546c 	.word	0x5802546c
 80036cc:	58025480 	.word	0x58025480
 80036d0:	58025494 	.word	0x58025494
 80036d4:	2300      	movs	r3, #0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d028      	beq.n	800372c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036e8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ee:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f4:	f003 031f 	and.w	r3, r3, #31
 80036f8:	2201      	movs	r2, #1
 80036fa:	409a      	lsls	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003708:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00c      	beq.n	800372c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800371c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003720:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800372a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop

08003758 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003758:	b480      	push	{r7}
 800375a:	b089      	sub	sp, #36	; 0x24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003762:	2300      	movs	r3, #0
 8003764:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003766:	4b89      	ldr	r3, [pc, #548]	; (800398c <HAL_GPIO_Init+0x234>)
 8003768:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800376a:	e194      	b.n	8003a96 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	2101      	movs	r1, #1
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	fa01 f303 	lsl.w	r3, r1, r3
 8003778:	4013      	ands	r3, r2
 800377a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 8186 	beq.w	8003a90 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	2b01      	cmp	r3, #1
 800378e:	d005      	beq.n	800379c <HAL_GPIO_Init+0x44>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d130      	bne.n	80037fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	2203      	movs	r2, #3
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	43db      	mvns	r3, r3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4013      	ands	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	68da      	ldr	r2, [r3, #12]
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037d2:	2201      	movs	r2, #1
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	43db      	mvns	r3, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4013      	ands	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	091b      	lsrs	r3, r3, #4
 80037e8:	f003 0201 	and.w	r2, r3, #1
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	2b03      	cmp	r3, #3
 8003808:	d017      	beq.n	800383a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	2203      	movs	r2, #3
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43db      	mvns	r3, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4013      	ands	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4313      	orrs	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d123      	bne.n	800388e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	08da      	lsrs	r2, r3, #3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3208      	adds	r2, #8
 800384e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003852:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	220f      	movs	r2, #15
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	43db      	mvns	r3, r3
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	4013      	ands	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	691a      	ldr	r2, [r3, #16]
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	4313      	orrs	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	08da      	lsrs	r2, r3, #3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3208      	adds	r2, #8
 8003888:	69b9      	ldr	r1, [r7, #24]
 800388a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	2203      	movs	r2, #3
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43db      	mvns	r3, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4013      	ands	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f003 0203 	and.w	r2, r3, #3
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 80e0 	beq.w	8003a90 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038d0:	4b2f      	ldr	r3, [pc, #188]	; (8003990 <HAL_GPIO_Init+0x238>)
 80038d2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80038d6:	4a2e      	ldr	r2, [pc, #184]	; (8003990 <HAL_GPIO_Init+0x238>)
 80038d8:	f043 0302 	orr.w	r3, r3, #2
 80038dc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80038e0:	4b2b      	ldr	r3, [pc, #172]	; (8003990 <HAL_GPIO_Init+0x238>)
 80038e2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038ee:	4a29      	ldr	r2, [pc, #164]	; (8003994 <HAL_GPIO_Init+0x23c>)
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	089b      	lsrs	r3, r3, #2
 80038f4:	3302      	adds	r3, #2
 80038f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f003 0303 	and.w	r3, r3, #3
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	220f      	movs	r2, #15
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	43db      	mvns	r3, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4013      	ands	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a20      	ldr	r2, [pc, #128]	; (8003998 <HAL_GPIO_Init+0x240>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d052      	beq.n	80039c0 <HAL_GPIO_Init+0x268>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a1f      	ldr	r2, [pc, #124]	; (800399c <HAL_GPIO_Init+0x244>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d031      	beq.n	8003986 <HAL_GPIO_Init+0x22e>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a1e      	ldr	r2, [pc, #120]	; (80039a0 <HAL_GPIO_Init+0x248>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d02b      	beq.n	8003982 <HAL_GPIO_Init+0x22a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a1d      	ldr	r2, [pc, #116]	; (80039a4 <HAL_GPIO_Init+0x24c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d025      	beq.n	800397e <HAL_GPIO_Init+0x226>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a1c      	ldr	r2, [pc, #112]	; (80039a8 <HAL_GPIO_Init+0x250>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d01f      	beq.n	800397a <HAL_GPIO_Init+0x222>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a1b      	ldr	r2, [pc, #108]	; (80039ac <HAL_GPIO_Init+0x254>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d019      	beq.n	8003976 <HAL_GPIO_Init+0x21e>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a1a      	ldr	r2, [pc, #104]	; (80039b0 <HAL_GPIO_Init+0x258>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d013      	beq.n	8003972 <HAL_GPIO_Init+0x21a>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a19      	ldr	r2, [pc, #100]	; (80039b4 <HAL_GPIO_Init+0x25c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d00d      	beq.n	800396e <HAL_GPIO_Init+0x216>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a18      	ldr	r2, [pc, #96]	; (80039b8 <HAL_GPIO_Init+0x260>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d007      	beq.n	800396a <HAL_GPIO_Init+0x212>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a17      	ldr	r2, [pc, #92]	; (80039bc <HAL_GPIO_Init+0x264>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d101      	bne.n	8003966 <HAL_GPIO_Init+0x20e>
 8003962:	2309      	movs	r3, #9
 8003964:	e02d      	b.n	80039c2 <HAL_GPIO_Init+0x26a>
 8003966:	230a      	movs	r3, #10
 8003968:	e02b      	b.n	80039c2 <HAL_GPIO_Init+0x26a>
 800396a:	2308      	movs	r3, #8
 800396c:	e029      	b.n	80039c2 <HAL_GPIO_Init+0x26a>
 800396e:	2307      	movs	r3, #7
 8003970:	e027      	b.n	80039c2 <HAL_GPIO_Init+0x26a>
 8003972:	2306      	movs	r3, #6
 8003974:	e025      	b.n	80039c2 <HAL_GPIO_Init+0x26a>
 8003976:	2305      	movs	r3, #5
 8003978:	e023      	b.n	80039c2 <HAL_GPIO_Init+0x26a>
 800397a:	2304      	movs	r3, #4
 800397c:	e021      	b.n	80039c2 <HAL_GPIO_Init+0x26a>
 800397e:	2303      	movs	r3, #3
 8003980:	e01f      	b.n	80039c2 <HAL_GPIO_Init+0x26a>
 8003982:	2302      	movs	r3, #2
 8003984:	e01d      	b.n	80039c2 <HAL_GPIO_Init+0x26a>
 8003986:	2301      	movs	r3, #1
 8003988:	e01b      	b.n	80039c2 <HAL_GPIO_Init+0x26a>
 800398a:	bf00      	nop
 800398c:	58000080 	.word	0x58000080
 8003990:	58024400 	.word	0x58024400
 8003994:	58000400 	.word	0x58000400
 8003998:	58020000 	.word	0x58020000
 800399c:	58020400 	.word	0x58020400
 80039a0:	58020800 	.word	0x58020800
 80039a4:	58020c00 	.word	0x58020c00
 80039a8:	58021000 	.word	0x58021000
 80039ac:	58021400 	.word	0x58021400
 80039b0:	58021800 	.word	0x58021800
 80039b4:	58021c00 	.word	0x58021c00
 80039b8:	58022000 	.word	0x58022000
 80039bc:	58022400 	.word	0x58022400
 80039c0:	2300      	movs	r3, #0
 80039c2:	69fa      	ldr	r2, [r7, #28]
 80039c4:	f002 0203 	and.w	r2, r2, #3
 80039c8:	0092      	lsls	r2, r2, #2
 80039ca:	4093      	lsls	r3, r2
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039d2:	4938      	ldr	r1, [pc, #224]	; (8003ab4 <HAL_GPIO_Init+0x35c>)
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	089b      	lsrs	r3, r3, #2
 80039d8:	3302      	adds	r3, #2
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	43db      	mvns	r3, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4013      	ands	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003a06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003a34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	43db      	mvns	r3, r3
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4013      	ands	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	3301      	adds	r3, #1
 8003a94:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f47f ae63 	bne.w	800376c <HAL_GPIO_Init+0x14>
  }
}
 8003aa6:	bf00      	nop
 8003aa8:	bf00      	nop
 8003aaa:	3724      	adds	r7, #36	; 0x24
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	58000400 	.word	0x58000400

08003ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	807b      	strh	r3, [r7, #2]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ac8:	787b      	ldrb	r3, [r7, #1]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ace:	887a      	ldrh	r2, [r7, #2]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003ad4:	e003      	b.n	8003ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003ad6:	887b      	ldrh	r3, [r7, #2]
 8003ad8:	041a      	lsls	r2, r3, #16
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	619a      	str	r2, [r3, #24]
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
	...

08003aec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003af4:	4b29      	ldr	r3, [pc, #164]	; (8003b9c <HAL_PWREx_ConfigSupply+0xb0>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	2b06      	cmp	r3, #6
 8003afe:	d00a      	beq.n	8003b16 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003b00:	4b26      	ldr	r3, [pc, #152]	; (8003b9c <HAL_PWREx_ConfigSupply+0xb0>)
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d001      	beq.n	8003b12 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e040      	b.n	8003b94 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	e03e      	b.n	8003b94 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003b16:	4b21      	ldr	r3, [pc, #132]	; (8003b9c <HAL_PWREx_ConfigSupply+0xb0>)
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003b1e:	491f      	ldr	r1, [pc, #124]	; (8003b9c <HAL_PWREx_ConfigSupply+0xb0>)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003b26:	f7fd fe8b 	bl	8001840 <HAL_GetTick>
 8003b2a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003b2c:	e009      	b.n	8003b42 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003b2e:	f7fd fe87 	bl	8001840 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b3c:	d901      	bls.n	8003b42 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e028      	b.n	8003b94 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003b42:	4b16      	ldr	r3, [pc, #88]	; (8003b9c <HAL_PWREx_ConfigSupply+0xb0>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b4e:	d1ee      	bne.n	8003b2e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b1e      	cmp	r3, #30
 8003b54:	d008      	beq.n	8003b68 <HAL_PWREx_ConfigSupply+0x7c>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b2e      	cmp	r3, #46	; 0x2e
 8003b5a:	d005      	beq.n	8003b68 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b1d      	cmp	r3, #29
 8003b60:	d002      	beq.n	8003b68 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b2d      	cmp	r3, #45	; 0x2d
 8003b66:	d114      	bne.n	8003b92 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003b68:	f7fd fe6a 	bl	8001840 <HAL_GetTick>
 8003b6c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003b6e:	e009      	b.n	8003b84 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003b70:	f7fd fe66 	bl	8001840 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b7e:	d901      	bls.n	8003b84 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e007      	b.n	8003b94 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003b84:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <HAL_PWREx_ConfigSupply+0xb0>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b90:	d1ee      	bne.n	8003b70 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	58024800 	.word	0x58024800

08003ba0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08c      	sub	sp, #48	; 0x30
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d102      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	f000 bc1f 	b.w	80043f2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 80b3 	beq.w	8003d28 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bc2:	4b95      	ldr	r3, [pc, #596]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bcc:	4b92      	ldr	r3, [pc, #584]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd4:	2b10      	cmp	r3, #16
 8003bd6:	d007      	beq.n	8003be8 <HAL_RCC_OscConfig+0x48>
 8003bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bda:	2b18      	cmp	r3, #24
 8003bdc:	d112      	bne.n	8003c04 <HAL_RCC_OscConfig+0x64>
 8003bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be0:	f003 0303 	and.w	r3, r3, #3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d10d      	bne.n	8003c04 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be8:	4b8b      	ldr	r3, [pc, #556]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 8098 	beq.w	8003d26 <HAL_RCC_OscConfig+0x186>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f040 8093 	bne.w	8003d26 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e3f6      	b.n	80043f2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c0c:	d106      	bne.n	8003c1c <HAL_RCC_OscConfig+0x7c>
 8003c0e:	4b82      	ldr	r3, [pc, #520]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a81      	ldr	r2, [pc, #516]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	e058      	b.n	8003cce <HAL_RCC_OscConfig+0x12e>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d112      	bne.n	8003c4a <HAL_RCC_OscConfig+0xaa>
 8003c24:	4b7c      	ldr	r3, [pc, #496]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a7b      	ldr	r2, [pc, #492]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c2e:	6013      	str	r3, [r2, #0]
 8003c30:	4b79      	ldr	r3, [pc, #484]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a78      	ldr	r2, [pc, #480]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003c36:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	4b76      	ldr	r3, [pc, #472]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a75      	ldr	r2, [pc, #468]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c46:	6013      	str	r3, [r2, #0]
 8003c48:	e041      	b.n	8003cce <HAL_RCC_OscConfig+0x12e>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c52:	d112      	bne.n	8003c7a <HAL_RCC_OscConfig+0xda>
 8003c54:	4b70      	ldr	r3, [pc, #448]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a6f      	ldr	r2, [pc, #444]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003c5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	4b6d      	ldr	r3, [pc, #436]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a6c      	ldr	r2, [pc, #432]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003c66:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003c6a:	6013      	str	r3, [r2, #0]
 8003c6c:	4b6a      	ldr	r3, [pc, #424]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a69      	ldr	r2, [pc, #420]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c76:	6013      	str	r3, [r2, #0]
 8003c78:	e029      	b.n	8003cce <HAL_RCC_OscConfig+0x12e>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003c82:	d112      	bne.n	8003caa <HAL_RCC_OscConfig+0x10a>
 8003c84:	4b64      	ldr	r3, [pc, #400]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a63      	ldr	r2, [pc, #396]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003c8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	4b61      	ldr	r3, [pc, #388]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a60      	ldr	r2, [pc, #384]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003c96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c9a:	6013      	str	r3, [r2, #0]
 8003c9c:	4b5e      	ldr	r3, [pc, #376]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a5d      	ldr	r2, [pc, #372]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca6:	6013      	str	r3, [r2, #0]
 8003ca8:	e011      	b.n	8003cce <HAL_RCC_OscConfig+0x12e>
 8003caa:	4b5b      	ldr	r3, [pc, #364]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a5a      	ldr	r2, [pc, #360]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	4b58      	ldr	r3, [pc, #352]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a57      	ldr	r2, [pc, #348]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003cbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	4b55      	ldr	r3, [pc, #340]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a54      	ldr	r2, [pc, #336]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003cc8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003ccc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d013      	beq.n	8003cfe <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd6:	f7fd fdb3 	bl	8001840 <HAL_GetTick>
 8003cda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cde:	f7fd fdaf 	bl	8001840 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b64      	cmp	r3, #100	; 0x64
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e380      	b.n	80043f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cf0:	4b49      	ldr	r3, [pc, #292]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0f0      	beq.n	8003cde <HAL_RCC_OscConfig+0x13e>
 8003cfc:	e014      	b.n	8003d28 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfe:	f7fd fd9f 	bl	8001840 <HAL_GetTick>
 8003d02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d06:	f7fd fd9b 	bl	8001840 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b64      	cmp	r3, #100	; 0x64
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e36c      	b.n	80043f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d18:	4b3f      	ldr	r3, [pc, #252]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1f0      	bne.n	8003d06 <HAL_RCC_OscConfig+0x166>
 8003d24:	e000      	b.n	8003d28 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d26:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 808c 	beq.w	8003e4e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d36:	4b38      	ldr	r3, [pc, #224]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d3e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d40:	4b35      	ldr	r3, [pc, #212]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d44:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d007      	beq.n	8003d5c <HAL_RCC_OscConfig+0x1bc>
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	2b18      	cmp	r3, #24
 8003d50:	d137      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x222>
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	f003 0303 	and.w	r3, r3, #3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d132      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d5c:	4b2e      	ldr	r3, [pc, #184]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d005      	beq.n	8003d74 <HAL_RCC_OscConfig+0x1d4>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e33e      	b.n	80043f2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003d74:	4b28      	ldr	r3, [pc, #160]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f023 0219 	bic.w	r2, r3, #25
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	4925      	ldr	r1, [pc, #148]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d86:	f7fd fd5b 	bl	8001840 <HAL_GetTick>
 8003d8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d8e:	f7fd fd57 	bl	8001840 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e328      	b.n	80043f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003da0:	4b1d      	ldr	r3, [pc, #116]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0f0      	beq.n	8003d8e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dac:	4b1a      	ldr	r3, [pc, #104]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	061b      	lsls	r3, r3, #24
 8003dba:	4917      	ldr	r1, [pc, #92]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dc0:	e045      	b.n	8003e4e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d028      	beq.n	8003e1c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003dca:	4b13      	ldr	r3, [pc, #76]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f023 0219 	bic.w	r2, r3, #25
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	4910      	ldr	r1, [pc, #64]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ddc:	f7fd fd30 	bl	8001840 <HAL_GetTick>
 8003de0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003de4:	f7fd fd2c 	bl	8001840 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e2fd      	b.n	80043f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003df6:	4b08      	ldr	r3, [pc, #32]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0304 	and.w	r3, r3, #4
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0f0      	beq.n	8003de4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e02:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	061b      	lsls	r3, r3, #24
 8003e10:	4901      	ldr	r1, [pc, #4]	; (8003e18 <HAL_RCC_OscConfig+0x278>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	604b      	str	r3, [r1, #4]
 8003e16:	e01a      	b.n	8003e4e <HAL_RCC_OscConfig+0x2ae>
 8003e18:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e1c:	4b97      	ldr	r3, [pc, #604]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a96      	ldr	r2, [pc, #600]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 8003e22:	f023 0301 	bic.w	r3, r3, #1
 8003e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e28:	f7fd fd0a 	bl	8001840 <HAL_GetTick>
 8003e2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e30:	f7fd fd06 	bl	8001840 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e2d7      	b.n	80043f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e42:	4b8e      	ldr	r3, [pc, #568]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0304 	and.w	r3, r3, #4
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1f0      	bne.n	8003e30 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d06a      	beq.n	8003f30 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e5a:	4b88      	ldr	r3, [pc, #544]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e62:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e64:	4b85      	ldr	r3, [pc, #532]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 8003e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e68:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d007      	beq.n	8003e80 <HAL_RCC_OscConfig+0x2e0>
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	2b18      	cmp	r3, #24
 8003e74:	d11b      	bne.n	8003eae <HAL_RCC_OscConfig+0x30e>
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f003 0303 	and.w	r3, r3, #3
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d116      	bne.n	8003eae <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e80:	4b7e      	ldr	r3, [pc, #504]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d005      	beq.n	8003e98 <HAL_RCC_OscConfig+0x2f8>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	2b80      	cmp	r3, #128	; 0x80
 8003e92:	d001      	beq.n	8003e98 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e2ac      	b.n	80043f2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e98:	4b78      	ldr	r3, [pc, #480]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	061b      	lsls	r3, r3, #24
 8003ea6:	4975      	ldr	r1, [pc, #468]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003eac:	e040      	b.n	8003f30 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d023      	beq.n	8003efe <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003eb6:	4b71      	ldr	r3, [pc, #452]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a70      	ldr	r2, [pc, #448]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 8003ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec2:	f7fd fcbd 	bl	8001840 <HAL_GetTick>
 8003ec6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003eca:	f7fd fcb9 	bl	8001840 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e28a      	b.n	80043f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003edc:	4b67      	ldr	r3, [pc, #412]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0f0      	beq.n	8003eca <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ee8:	4b64      	ldr	r3, [pc, #400]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	061b      	lsls	r3, r3, #24
 8003ef6:	4961      	ldr	r1, [pc, #388]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	60cb      	str	r3, [r1, #12]
 8003efc:	e018      	b.n	8003f30 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003efe:	4b5f      	ldr	r3, [pc, #380]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a5e      	ldr	r2, [pc, #376]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 8003f04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0a:	f7fd fc99 	bl	8001840 <HAL_GetTick>
 8003f0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003f12:	f7fd fc95 	bl	8001840 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e266      	b.n	80043f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f24:	4b55      	ldr	r3, [pc, #340]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1f0      	bne.n	8003f12 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0308 	and.w	r3, r3, #8
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d036      	beq.n	8003faa <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d019      	beq.n	8003f78 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f44:	4b4d      	ldr	r3, [pc, #308]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 8003f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f48:	4a4c      	ldr	r2, [pc, #304]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 8003f4a:	f043 0301 	orr.w	r3, r3, #1
 8003f4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f50:	f7fd fc76 	bl	8001840 <HAL_GetTick>
 8003f54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f58:	f7fd fc72 	bl	8001840 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e243      	b.n	80043f2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f6a:	4b44      	ldr	r3, [pc, #272]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 8003f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0f0      	beq.n	8003f58 <HAL_RCC_OscConfig+0x3b8>
 8003f76:	e018      	b.n	8003faa <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f78:	4b40      	ldr	r3, [pc, #256]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 8003f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f7c:	4a3f      	ldr	r2, [pc, #252]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 8003f7e:	f023 0301 	bic.w	r3, r3, #1
 8003f82:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f84:	f7fd fc5c 	bl	8001840 <HAL_GetTick>
 8003f88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f8c:	f7fd fc58 	bl	8001840 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e229      	b.n	80043f2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f9e:	4b37      	ldr	r3, [pc, #220]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 8003fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f0      	bne.n	8003f8c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0320 	and.w	r3, r3, #32
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d036      	beq.n	8004024 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d019      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003fbe:	4b2f      	ldr	r3, [pc, #188]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a2e      	ldr	r2, [pc, #184]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 8003fc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fc8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003fca:	f7fd fc39 	bl	8001840 <HAL_GetTick>
 8003fce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fd2:	f7fd fc35 	bl	8001840 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e206      	b.n	80043f2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003fe4:	4b25      	ldr	r3, [pc, #148]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0f0      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x432>
 8003ff0:	e018      	b.n	8004024 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ff2:	4b22      	ldr	r3, [pc, #136]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a21      	ldr	r2, [pc, #132]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 8003ff8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ffc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ffe:	f7fd fc1f 	bl	8001840 <HAL_GetTick>
 8004002:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004004:	e008      	b.n	8004018 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004006:	f7fd fc1b 	bl	8001840 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e1ec      	b.n	80043f2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004018:	4b18      	ldr	r3, [pc, #96]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1f0      	bne.n	8004006 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 80af 	beq.w	8004190 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004032:	4b13      	ldr	r3, [pc, #76]	; (8004080 <HAL_RCC_OscConfig+0x4e0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a12      	ldr	r2, [pc, #72]	; (8004080 <HAL_RCC_OscConfig+0x4e0>)
 8004038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800403c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800403e:	f7fd fbff 	bl	8001840 <HAL_GetTick>
 8004042:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004046:	f7fd fbfb 	bl	8001840 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b64      	cmp	r3, #100	; 0x64
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e1cc      	b.n	80043f2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004058:	4b09      	ldr	r3, [pc, #36]	; (8004080 <HAL_RCC_OscConfig+0x4e0>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0f0      	beq.n	8004046 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d10b      	bne.n	8004084 <HAL_RCC_OscConfig+0x4e4>
 800406c:	4b03      	ldr	r3, [pc, #12]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 800406e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004070:	4a02      	ldr	r2, [pc, #8]	; (800407c <HAL_RCC_OscConfig+0x4dc>)
 8004072:	f043 0301 	orr.w	r3, r3, #1
 8004076:	6713      	str	r3, [r2, #112]	; 0x70
 8004078:	e05b      	b.n	8004132 <HAL_RCC_OscConfig+0x592>
 800407a:	bf00      	nop
 800407c:	58024400 	.word	0x58024400
 8004080:	58024800 	.word	0x58024800
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d112      	bne.n	80040b2 <HAL_RCC_OscConfig+0x512>
 800408c:	4b9d      	ldr	r3, [pc, #628]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 800408e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004090:	4a9c      	ldr	r2, [pc, #624]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 8004092:	f023 0301 	bic.w	r3, r3, #1
 8004096:	6713      	str	r3, [r2, #112]	; 0x70
 8004098:	4b9a      	ldr	r3, [pc, #616]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 800409a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409c:	4a99      	ldr	r2, [pc, #612]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 800409e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040a2:	6713      	str	r3, [r2, #112]	; 0x70
 80040a4:	4b97      	ldr	r3, [pc, #604]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 80040a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a8:	4a96      	ldr	r2, [pc, #600]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 80040aa:	f023 0304 	bic.w	r3, r3, #4
 80040ae:	6713      	str	r3, [r2, #112]	; 0x70
 80040b0:	e03f      	b.n	8004132 <HAL_RCC_OscConfig+0x592>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2b05      	cmp	r3, #5
 80040b8:	d112      	bne.n	80040e0 <HAL_RCC_OscConfig+0x540>
 80040ba:	4b92      	ldr	r3, [pc, #584]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 80040bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040be:	4a91      	ldr	r2, [pc, #580]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 80040c0:	f043 0304 	orr.w	r3, r3, #4
 80040c4:	6713      	str	r3, [r2, #112]	; 0x70
 80040c6:	4b8f      	ldr	r3, [pc, #572]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 80040c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ca:	4a8e      	ldr	r2, [pc, #568]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 80040cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040d0:	6713      	str	r3, [r2, #112]	; 0x70
 80040d2:	4b8c      	ldr	r3, [pc, #560]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 80040d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d6:	4a8b      	ldr	r2, [pc, #556]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 80040d8:	f043 0301 	orr.w	r3, r3, #1
 80040dc:	6713      	str	r3, [r2, #112]	; 0x70
 80040de:	e028      	b.n	8004132 <HAL_RCC_OscConfig+0x592>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	2b85      	cmp	r3, #133	; 0x85
 80040e6:	d112      	bne.n	800410e <HAL_RCC_OscConfig+0x56e>
 80040e8:	4b86      	ldr	r3, [pc, #536]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 80040ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ec:	4a85      	ldr	r2, [pc, #532]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 80040ee:	f043 0304 	orr.w	r3, r3, #4
 80040f2:	6713      	str	r3, [r2, #112]	; 0x70
 80040f4:	4b83      	ldr	r3, [pc, #524]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 80040f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f8:	4a82      	ldr	r2, [pc, #520]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 80040fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004100:	4b80      	ldr	r3, [pc, #512]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 8004102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004104:	4a7f      	ldr	r2, [pc, #508]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 8004106:	f043 0301 	orr.w	r3, r3, #1
 800410a:	6713      	str	r3, [r2, #112]	; 0x70
 800410c:	e011      	b.n	8004132 <HAL_RCC_OscConfig+0x592>
 800410e:	4b7d      	ldr	r3, [pc, #500]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 8004110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004112:	4a7c      	ldr	r2, [pc, #496]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 8004114:	f023 0301 	bic.w	r3, r3, #1
 8004118:	6713      	str	r3, [r2, #112]	; 0x70
 800411a:	4b7a      	ldr	r3, [pc, #488]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 800411c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411e:	4a79      	ldr	r2, [pc, #484]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 8004120:	f023 0304 	bic.w	r3, r3, #4
 8004124:	6713      	str	r3, [r2, #112]	; 0x70
 8004126:	4b77      	ldr	r3, [pc, #476]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 8004128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412a:	4a76      	ldr	r2, [pc, #472]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 800412c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004130:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d015      	beq.n	8004166 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413a:	f7fd fb81 	bl	8001840 <HAL_GetTick>
 800413e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004140:	e00a      	b.n	8004158 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004142:	f7fd fb7d 	bl	8001840 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004150:	4293      	cmp	r3, r2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e14c      	b.n	80043f2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004158:	4b6a      	ldr	r3, [pc, #424]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 800415a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0ee      	beq.n	8004142 <HAL_RCC_OscConfig+0x5a2>
 8004164:	e014      	b.n	8004190 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004166:	f7fd fb6b 	bl	8001840 <HAL_GetTick>
 800416a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800416c:	e00a      	b.n	8004184 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800416e:	f7fd fb67 	bl	8001840 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	f241 3288 	movw	r2, #5000	; 0x1388
 800417c:	4293      	cmp	r3, r2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e136      	b.n	80043f2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004184:	4b5f      	ldr	r3, [pc, #380]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 8004186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1ee      	bne.n	800416e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 812b 	beq.w	80043f0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800419a:	4b5a      	ldr	r3, [pc, #360]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041a2:	2b18      	cmp	r3, #24
 80041a4:	f000 80bb 	beq.w	800431e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	f040 8095 	bne.w	80042dc <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b2:	4b54      	ldr	r3, [pc, #336]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a53      	ldr	r2, [pc, #332]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 80041b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041be:	f7fd fb3f 	bl	8001840 <HAL_GetTick>
 80041c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c6:	f7fd fb3b 	bl	8001840 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e10c      	b.n	80043f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041d8:	4b4a      	ldr	r3, [pc, #296]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1f0      	bne.n	80041c6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041e4:	4b47      	ldr	r3, [pc, #284]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 80041e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041e8:	4b47      	ldr	r3, [pc, #284]	; (8004308 <HAL_RCC_OscConfig+0x768>)
 80041ea:	4013      	ands	r3, r2
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80041f4:	0112      	lsls	r2, r2, #4
 80041f6:	430a      	orrs	r2, r1
 80041f8:	4942      	ldr	r1, [pc, #264]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	628b      	str	r3, [r1, #40]	; 0x28
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	3b01      	subs	r3, #1
 8004204:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800420c:	3b01      	subs	r3, #1
 800420e:	025b      	lsls	r3, r3, #9
 8004210:	b29b      	uxth	r3, r3
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004218:	3b01      	subs	r3, #1
 800421a:	041b      	lsls	r3, r3, #16
 800421c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004220:	431a      	orrs	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004226:	3b01      	subs	r3, #1
 8004228:	061b      	lsls	r3, r3, #24
 800422a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800422e:	4935      	ldr	r1, [pc, #212]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 8004230:	4313      	orrs	r3, r2
 8004232:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004234:	4b33      	ldr	r3, [pc, #204]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 8004236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004238:	4a32      	ldr	r2, [pc, #200]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 800423a:	f023 0301 	bic.w	r3, r3, #1
 800423e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004240:	4b30      	ldr	r3, [pc, #192]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 8004242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004244:	4b31      	ldr	r3, [pc, #196]	; (800430c <HAL_RCC_OscConfig+0x76c>)
 8004246:	4013      	ands	r3, r2
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800424c:	00d2      	lsls	r2, r2, #3
 800424e:	492d      	ldr	r1, [pc, #180]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 8004250:	4313      	orrs	r3, r2
 8004252:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004254:	4b2b      	ldr	r3, [pc, #172]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	f023 020c 	bic.w	r2, r3, #12
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	4928      	ldr	r1, [pc, #160]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 8004262:	4313      	orrs	r3, r2
 8004264:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004266:	4b27      	ldr	r3, [pc, #156]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 8004268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426a:	f023 0202 	bic.w	r2, r3, #2
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004272:	4924      	ldr	r1, [pc, #144]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 8004274:	4313      	orrs	r3, r2
 8004276:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004278:	4b22      	ldr	r3, [pc, #136]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	4a21      	ldr	r2, [pc, #132]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 800427e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004282:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004284:	4b1f      	ldr	r3, [pc, #124]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 8004286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004288:	4a1e      	ldr	r2, [pc, #120]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 800428a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800428e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004290:	4b1c      	ldr	r3, [pc, #112]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 8004292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004294:	4a1b      	ldr	r2, [pc, #108]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 8004296:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800429a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800429c:	4b19      	ldr	r3, [pc, #100]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 800429e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a0:	4a18      	ldr	r2, [pc, #96]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 80042a2:	f043 0301 	orr.w	r3, r3, #1
 80042a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042a8:	4b16      	ldr	r3, [pc, #88]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a15      	ldr	r2, [pc, #84]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 80042ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b4:	f7fd fac4 	bl	8001840 <HAL_GetTick>
 80042b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042bc:	f7fd fac0 	bl	8001840 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e091      	b.n	80043f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042ce:	4b0d      	ldr	r3, [pc, #52]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0f0      	beq.n	80042bc <HAL_RCC_OscConfig+0x71c>
 80042da:	e089      	b.n	80043f0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042dc:	4b09      	ldr	r3, [pc, #36]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a08      	ldr	r2, [pc, #32]	; (8004304 <HAL_RCC_OscConfig+0x764>)
 80042e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e8:	f7fd faaa 	bl	8001840 <HAL_GetTick>
 80042ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042ee:	e00f      	b.n	8004310 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f0:	f7fd faa6 	bl	8001840 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d908      	bls.n	8004310 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e077      	b.n	80043f2 <HAL_RCC_OscConfig+0x852>
 8004302:	bf00      	nop
 8004304:	58024400 	.word	0x58024400
 8004308:	fffffc0c 	.word	0xfffffc0c
 800430c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004310:	4b3a      	ldr	r3, [pc, #232]	; (80043fc <HAL_RCC_OscConfig+0x85c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1e9      	bne.n	80042f0 <HAL_RCC_OscConfig+0x750>
 800431c:	e068      	b.n	80043f0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800431e:	4b37      	ldr	r3, [pc, #220]	; (80043fc <HAL_RCC_OscConfig+0x85c>)
 8004320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004322:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004324:	4b35      	ldr	r3, [pc, #212]	; (80043fc <HAL_RCC_OscConfig+0x85c>)
 8004326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004328:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	2b01      	cmp	r3, #1
 8004330:	d031      	beq.n	8004396 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f003 0203 	and.w	r2, r3, #3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800433c:	429a      	cmp	r2, r3
 800433e:	d12a      	bne.n	8004396 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	091b      	lsrs	r3, r3, #4
 8004344:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800434c:	429a      	cmp	r2, r3
 800434e:	d122      	bne.n	8004396 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800435c:	429a      	cmp	r2, r3
 800435e:	d11a      	bne.n	8004396 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	0a5b      	lsrs	r3, r3, #9
 8004364:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800436e:	429a      	cmp	r2, r3
 8004370:	d111      	bne.n	8004396 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	0c1b      	lsrs	r3, r3, #16
 8004376:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004380:	429a      	cmp	r2, r3
 8004382:	d108      	bne.n	8004396 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	0e1b      	lsrs	r3, r3, #24
 8004388:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004390:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004392:	429a      	cmp	r2, r3
 8004394:	d001      	beq.n	800439a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e02b      	b.n	80043f2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800439a:	4b18      	ldr	r3, [pc, #96]	; (80043fc <HAL_RCC_OscConfig+0x85c>)
 800439c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439e:	08db      	lsrs	r3, r3, #3
 80043a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043a4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d01f      	beq.n	80043f0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80043b0:	4b12      	ldr	r3, [pc, #72]	; (80043fc <HAL_RCC_OscConfig+0x85c>)
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	4a11      	ldr	r2, [pc, #68]	; (80043fc <HAL_RCC_OscConfig+0x85c>)
 80043b6:	f023 0301 	bic.w	r3, r3, #1
 80043ba:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043bc:	f7fd fa40 	bl	8001840 <HAL_GetTick>
 80043c0:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80043c2:	bf00      	nop
 80043c4:	f7fd fa3c 	bl	8001840 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d0f9      	beq.n	80043c4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80043d0:	4b0a      	ldr	r3, [pc, #40]	; (80043fc <HAL_RCC_OscConfig+0x85c>)
 80043d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043d4:	4b0a      	ldr	r3, [pc, #40]	; (8004400 <HAL_RCC_OscConfig+0x860>)
 80043d6:	4013      	ands	r3, r2
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80043dc:	00d2      	lsls	r2, r2, #3
 80043de:	4907      	ldr	r1, [pc, #28]	; (80043fc <HAL_RCC_OscConfig+0x85c>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80043e4:	4b05      	ldr	r3, [pc, #20]	; (80043fc <HAL_RCC_OscConfig+0x85c>)
 80043e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e8:	4a04      	ldr	r2, [pc, #16]	; (80043fc <HAL_RCC_OscConfig+0x85c>)
 80043ea:	f043 0301 	orr.w	r3, r3, #1
 80043ee:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3730      	adds	r7, #48	; 0x30
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	58024400 	.word	0x58024400
 8004400:	ffff0007 	.word	0xffff0007

08004404 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e19c      	b.n	8004752 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004418:	4b8a      	ldr	r3, [pc, #552]	; (8004644 <HAL_RCC_ClockConfig+0x240>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 030f 	and.w	r3, r3, #15
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	429a      	cmp	r2, r3
 8004424:	d910      	bls.n	8004448 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004426:	4b87      	ldr	r3, [pc, #540]	; (8004644 <HAL_RCC_ClockConfig+0x240>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f023 020f 	bic.w	r2, r3, #15
 800442e:	4985      	ldr	r1, [pc, #532]	; (8004644 <HAL_RCC_ClockConfig+0x240>)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	4313      	orrs	r3, r2
 8004434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004436:	4b83      	ldr	r3, [pc, #524]	; (8004644 <HAL_RCC_ClockConfig+0x240>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	429a      	cmp	r2, r3
 8004442:	d001      	beq.n	8004448 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e184      	b.n	8004752 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b00      	cmp	r3, #0
 8004452:	d010      	beq.n	8004476 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691a      	ldr	r2, [r3, #16]
 8004458:	4b7b      	ldr	r3, [pc, #492]	; (8004648 <HAL_RCC_ClockConfig+0x244>)
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004460:	429a      	cmp	r2, r3
 8004462:	d908      	bls.n	8004476 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004464:	4b78      	ldr	r3, [pc, #480]	; (8004648 <HAL_RCC_ClockConfig+0x244>)
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	4975      	ldr	r1, [pc, #468]	; (8004648 <HAL_RCC_ClockConfig+0x244>)
 8004472:	4313      	orrs	r3, r2
 8004474:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0308 	and.w	r3, r3, #8
 800447e:	2b00      	cmp	r3, #0
 8004480:	d010      	beq.n	80044a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	695a      	ldr	r2, [r3, #20]
 8004486:	4b70      	ldr	r3, [pc, #448]	; (8004648 <HAL_RCC_ClockConfig+0x244>)
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800448e:	429a      	cmp	r2, r3
 8004490:	d908      	bls.n	80044a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004492:	4b6d      	ldr	r3, [pc, #436]	; (8004648 <HAL_RCC_ClockConfig+0x244>)
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	496a      	ldr	r1, [pc, #424]	; (8004648 <HAL_RCC_ClockConfig+0x244>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0310 	and.w	r3, r3, #16
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d010      	beq.n	80044d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	699a      	ldr	r2, [r3, #24]
 80044b4:	4b64      	ldr	r3, [pc, #400]	; (8004648 <HAL_RCC_ClockConfig+0x244>)
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044bc:	429a      	cmp	r2, r3
 80044be:	d908      	bls.n	80044d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80044c0:	4b61      	ldr	r3, [pc, #388]	; (8004648 <HAL_RCC_ClockConfig+0x244>)
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	495e      	ldr	r1, [pc, #376]	; (8004648 <HAL_RCC_ClockConfig+0x244>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d010      	beq.n	8004500 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	69da      	ldr	r2, [r3, #28]
 80044e2:	4b59      	ldr	r3, [pc, #356]	; (8004648 <HAL_RCC_ClockConfig+0x244>)
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d908      	bls.n	8004500 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80044ee:	4b56      	ldr	r3, [pc, #344]	; (8004648 <HAL_RCC_ClockConfig+0x244>)
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	4953      	ldr	r1, [pc, #332]	; (8004648 <HAL_RCC_ClockConfig+0x244>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d010      	beq.n	800452e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68da      	ldr	r2, [r3, #12]
 8004510:	4b4d      	ldr	r3, [pc, #308]	; (8004648 <HAL_RCC_ClockConfig+0x244>)
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	f003 030f 	and.w	r3, r3, #15
 8004518:	429a      	cmp	r2, r3
 800451a:	d908      	bls.n	800452e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800451c:	4b4a      	ldr	r3, [pc, #296]	; (8004648 <HAL_RCC_ClockConfig+0x244>)
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	f023 020f 	bic.w	r2, r3, #15
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	4947      	ldr	r1, [pc, #284]	; (8004648 <HAL_RCC_ClockConfig+0x244>)
 800452a:	4313      	orrs	r3, r2
 800452c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d055      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800453a:	4b43      	ldr	r3, [pc, #268]	; (8004648 <HAL_RCC_ClockConfig+0x244>)
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	4940      	ldr	r1, [pc, #256]	; (8004648 <HAL_RCC_ClockConfig+0x244>)
 8004548:	4313      	orrs	r3, r2
 800454a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	2b02      	cmp	r3, #2
 8004552:	d107      	bne.n	8004564 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004554:	4b3c      	ldr	r3, [pc, #240]	; (8004648 <HAL_RCC_ClockConfig+0x244>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d121      	bne.n	80045a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e0f6      	b.n	8004752 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b03      	cmp	r3, #3
 800456a:	d107      	bne.n	800457c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800456c:	4b36      	ldr	r3, [pc, #216]	; (8004648 <HAL_RCC_ClockConfig+0x244>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d115      	bne.n	80045a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e0ea      	b.n	8004752 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d107      	bne.n	8004594 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004584:	4b30      	ldr	r3, [pc, #192]	; (8004648 <HAL_RCC_ClockConfig+0x244>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458c:	2b00      	cmp	r3, #0
 800458e:	d109      	bne.n	80045a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e0de      	b.n	8004752 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004594:	4b2c      	ldr	r3, [pc, #176]	; (8004648 <HAL_RCC_ClockConfig+0x244>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e0d6      	b.n	8004752 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045a4:	4b28      	ldr	r3, [pc, #160]	; (8004648 <HAL_RCC_ClockConfig+0x244>)
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	f023 0207 	bic.w	r2, r3, #7
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	4925      	ldr	r1, [pc, #148]	; (8004648 <HAL_RCC_ClockConfig+0x244>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045b6:	f7fd f943 	bl	8001840 <HAL_GetTick>
 80045ba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045bc:	e00a      	b.n	80045d4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045be:	f7fd f93f 	bl	8001840 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e0be      	b.n	8004752 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d4:	4b1c      	ldr	r3, [pc, #112]	; (8004648 <HAL_RCC_ClockConfig+0x244>)
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d1eb      	bne.n	80045be <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d010      	beq.n	8004614 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	4b14      	ldr	r3, [pc, #80]	; (8004648 <HAL_RCC_ClockConfig+0x244>)
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	429a      	cmp	r2, r3
 8004600:	d208      	bcs.n	8004614 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004602:	4b11      	ldr	r3, [pc, #68]	; (8004648 <HAL_RCC_ClockConfig+0x244>)
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	f023 020f 	bic.w	r2, r3, #15
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	490e      	ldr	r1, [pc, #56]	; (8004648 <HAL_RCC_ClockConfig+0x244>)
 8004610:	4313      	orrs	r3, r2
 8004612:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004614:	4b0b      	ldr	r3, [pc, #44]	; (8004644 <HAL_RCC_ClockConfig+0x240>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 030f 	and.w	r3, r3, #15
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d214      	bcs.n	800464c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004622:	4b08      	ldr	r3, [pc, #32]	; (8004644 <HAL_RCC_ClockConfig+0x240>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f023 020f 	bic.w	r2, r3, #15
 800462a:	4906      	ldr	r1, [pc, #24]	; (8004644 <HAL_RCC_ClockConfig+0x240>)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	4313      	orrs	r3, r2
 8004630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004632:	4b04      	ldr	r3, [pc, #16]	; (8004644 <HAL_RCC_ClockConfig+0x240>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	429a      	cmp	r2, r3
 800463e:	d005      	beq.n	800464c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e086      	b.n	8004752 <HAL_RCC_ClockConfig+0x34e>
 8004644:	52002000 	.word	0x52002000
 8004648:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b00      	cmp	r3, #0
 8004656:	d010      	beq.n	800467a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	4b3f      	ldr	r3, [pc, #252]	; (800475c <HAL_RCC_ClockConfig+0x358>)
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004664:	429a      	cmp	r2, r3
 8004666:	d208      	bcs.n	800467a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004668:	4b3c      	ldr	r3, [pc, #240]	; (800475c <HAL_RCC_ClockConfig+0x358>)
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	4939      	ldr	r1, [pc, #228]	; (800475c <HAL_RCC_ClockConfig+0x358>)
 8004676:	4313      	orrs	r3, r2
 8004678:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0308 	and.w	r3, r3, #8
 8004682:	2b00      	cmp	r3, #0
 8004684:	d010      	beq.n	80046a8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695a      	ldr	r2, [r3, #20]
 800468a:	4b34      	ldr	r3, [pc, #208]	; (800475c <HAL_RCC_ClockConfig+0x358>)
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004692:	429a      	cmp	r2, r3
 8004694:	d208      	bcs.n	80046a8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004696:	4b31      	ldr	r3, [pc, #196]	; (800475c <HAL_RCC_ClockConfig+0x358>)
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	492e      	ldr	r1, [pc, #184]	; (800475c <HAL_RCC_ClockConfig+0x358>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0310 	and.w	r3, r3, #16
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d010      	beq.n	80046d6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	699a      	ldr	r2, [r3, #24]
 80046b8:	4b28      	ldr	r3, [pc, #160]	; (800475c <HAL_RCC_ClockConfig+0x358>)
 80046ba:	69db      	ldr	r3, [r3, #28]
 80046bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d208      	bcs.n	80046d6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80046c4:	4b25      	ldr	r3, [pc, #148]	; (800475c <HAL_RCC_ClockConfig+0x358>)
 80046c6:	69db      	ldr	r3, [r3, #28]
 80046c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	4922      	ldr	r1, [pc, #136]	; (800475c <HAL_RCC_ClockConfig+0x358>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0320 	and.w	r3, r3, #32
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d010      	beq.n	8004704 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69da      	ldr	r2, [r3, #28]
 80046e6:	4b1d      	ldr	r3, [pc, #116]	; (800475c <HAL_RCC_ClockConfig+0x358>)
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d208      	bcs.n	8004704 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80046f2:	4b1a      	ldr	r3, [pc, #104]	; (800475c <HAL_RCC_ClockConfig+0x358>)
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	4917      	ldr	r1, [pc, #92]	; (800475c <HAL_RCC_ClockConfig+0x358>)
 8004700:	4313      	orrs	r3, r2
 8004702:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004704:	f000 f834 	bl	8004770 <HAL_RCC_GetSysClockFreq>
 8004708:	4602      	mov	r2, r0
 800470a:	4b14      	ldr	r3, [pc, #80]	; (800475c <HAL_RCC_ClockConfig+0x358>)
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	0a1b      	lsrs	r3, r3, #8
 8004710:	f003 030f 	and.w	r3, r3, #15
 8004714:	4912      	ldr	r1, [pc, #72]	; (8004760 <HAL_RCC_ClockConfig+0x35c>)
 8004716:	5ccb      	ldrb	r3, [r1, r3]
 8004718:	f003 031f 	and.w	r3, r3, #31
 800471c:	fa22 f303 	lsr.w	r3, r2, r3
 8004720:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004722:	4b0e      	ldr	r3, [pc, #56]	; (800475c <HAL_RCC_ClockConfig+0x358>)
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	4a0d      	ldr	r2, [pc, #52]	; (8004760 <HAL_RCC_ClockConfig+0x35c>)
 800472c:	5cd3      	ldrb	r3, [r2, r3]
 800472e:	f003 031f 	and.w	r3, r3, #31
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	fa22 f303 	lsr.w	r3, r2, r3
 8004738:	4a0a      	ldr	r2, [pc, #40]	; (8004764 <HAL_RCC_ClockConfig+0x360>)
 800473a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800473c:	4a0a      	ldr	r2, [pc, #40]	; (8004768 <HAL_RCC_ClockConfig+0x364>)
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004742:	4b0a      	ldr	r3, [pc, #40]	; (800476c <HAL_RCC_ClockConfig+0x368>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4618      	mov	r0, r3
 8004748:	f7fd f830 	bl	80017ac <HAL_InitTick>
 800474c:	4603      	mov	r3, r0
 800474e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004750:	7bfb      	ldrb	r3, [r7, #15]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3718      	adds	r7, #24
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	58024400 	.word	0x58024400
 8004760:	0800b144 	.word	0x0800b144
 8004764:	2400000c 	.word	0x2400000c
 8004768:	24000008 	.word	0x24000008
 800476c:	24000010 	.word	0x24000010

08004770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004770:	b480      	push	{r7}
 8004772:	b089      	sub	sp, #36	; 0x24
 8004774:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004776:	4bb3      	ldr	r3, [pc, #716]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800477e:	2b18      	cmp	r3, #24
 8004780:	f200 8155 	bhi.w	8004a2e <HAL_RCC_GetSysClockFreq+0x2be>
 8004784:	a201      	add	r2, pc, #4	; (adr r2, 800478c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478a:	bf00      	nop
 800478c:	080047f1 	.word	0x080047f1
 8004790:	08004a2f 	.word	0x08004a2f
 8004794:	08004a2f 	.word	0x08004a2f
 8004798:	08004a2f 	.word	0x08004a2f
 800479c:	08004a2f 	.word	0x08004a2f
 80047a0:	08004a2f 	.word	0x08004a2f
 80047a4:	08004a2f 	.word	0x08004a2f
 80047a8:	08004a2f 	.word	0x08004a2f
 80047ac:	08004817 	.word	0x08004817
 80047b0:	08004a2f 	.word	0x08004a2f
 80047b4:	08004a2f 	.word	0x08004a2f
 80047b8:	08004a2f 	.word	0x08004a2f
 80047bc:	08004a2f 	.word	0x08004a2f
 80047c0:	08004a2f 	.word	0x08004a2f
 80047c4:	08004a2f 	.word	0x08004a2f
 80047c8:	08004a2f 	.word	0x08004a2f
 80047cc:	0800481d 	.word	0x0800481d
 80047d0:	08004a2f 	.word	0x08004a2f
 80047d4:	08004a2f 	.word	0x08004a2f
 80047d8:	08004a2f 	.word	0x08004a2f
 80047dc:	08004a2f 	.word	0x08004a2f
 80047e0:	08004a2f 	.word	0x08004a2f
 80047e4:	08004a2f 	.word	0x08004a2f
 80047e8:	08004a2f 	.word	0x08004a2f
 80047ec:	08004823 	.word	0x08004823
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047f0:	4b94      	ldr	r3, [pc, #592]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0320 	and.w	r3, r3, #32
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d009      	beq.n	8004810 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047fc:	4b91      	ldr	r3, [pc, #580]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	08db      	lsrs	r3, r3, #3
 8004802:	f003 0303 	and.w	r3, r3, #3
 8004806:	4a90      	ldr	r2, [pc, #576]	; (8004a48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004808:	fa22 f303 	lsr.w	r3, r2, r3
 800480c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800480e:	e111      	b.n	8004a34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004810:	4b8d      	ldr	r3, [pc, #564]	; (8004a48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004812:	61bb      	str	r3, [r7, #24]
      break;
 8004814:	e10e      	b.n	8004a34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004816:	4b8d      	ldr	r3, [pc, #564]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004818:	61bb      	str	r3, [r7, #24]
      break;
 800481a:	e10b      	b.n	8004a34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800481c:	4b8c      	ldr	r3, [pc, #560]	; (8004a50 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800481e:	61bb      	str	r3, [r7, #24]
      break;
 8004820:	e108      	b.n	8004a34 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004822:	4b88      	ldr	r3, [pc, #544]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800482c:	4b85      	ldr	r3, [pc, #532]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800482e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004830:	091b      	lsrs	r3, r3, #4
 8004832:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004836:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004838:	4b82      	ldr	r3, [pc, #520]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800483a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004842:	4b80      	ldr	r3, [pc, #512]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004846:	08db      	lsrs	r3, r3, #3
 8004848:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	fb02 f303 	mul.w	r3, r2, r3
 8004852:	ee07 3a90 	vmov	s15, r3
 8004856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800485a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 80e1 	beq.w	8004a28 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	2b02      	cmp	r3, #2
 800486a:	f000 8083 	beq.w	8004974 <HAL_RCC_GetSysClockFreq+0x204>
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2b02      	cmp	r3, #2
 8004872:	f200 80a1 	bhi.w	80049b8 <HAL_RCC_GetSysClockFreq+0x248>
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d003      	beq.n	8004884 <HAL_RCC_GetSysClockFreq+0x114>
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d056      	beq.n	8004930 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004882:	e099      	b.n	80049b8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004884:	4b6f      	ldr	r3, [pc, #444]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0320 	and.w	r3, r3, #32
 800488c:	2b00      	cmp	r3, #0
 800488e:	d02d      	beq.n	80048ec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004890:	4b6c      	ldr	r3, [pc, #432]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	08db      	lsrs	r3, r3, #3
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	4a6b      	ldr	r2, [pc, #428]	; (8004a48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800489c:	fa22 f303 	lsr.w	r3, r2, r3
 80048a0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	ee07 3a90 	vmov	s15, r3
 80048a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	ee07 3a90 	vmov	s15, r3
 80048b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ba:	4b62      	ldr	r3, [pc, #392]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048c2:	ee07 3a90 	vmov	s15, r3
 80048c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80048ce:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004a54 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80048ea:	e087      	b.n	80049fc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	ee07 3a90 	vmov	s15, r3
 80048f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004a58 <HAL_RCC_GetSysClockFreq+0x2e8>
 80048fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048fe:	4b51      	ldr	r3, [pc, #324]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004906:	ee07 3a90 	vmov	s15, r3
 800490a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800490e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004912:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004a54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800491a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800491e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800492a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800492e:	e065      	b.n	80049fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	ee07 3a90 	vmov	s15, r3
 8004936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800493a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004a5c <HAL_RCC_GetSysClockFreq+0x2ec>
 800493e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004942:	4b40      	ldr	r3, [pc, #256]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800494a:	ee07 3a90 	vmov	s15, r3
 800494e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004952:	ed97 6a02 	vldr	s12, [r7, #8]
 8004956:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004a54 <HAL_RCC_GetSysClockFreq+0x2e4>
 800495a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800495e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800496a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800496e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004972:	e043      	b.n	80049fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	ee07 3a90 	vmov	s15, r3
 800497a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004a60 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004986:	4b2f      	ldr	r3, [pc, #188]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800498e:	ee07 3a90 	vmov	s15, r3
 8004992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004996:	ed97 6a02 	vldr	s12, [r7, #8]
 800499a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004a54 <HAL_RCC_GetSysClockFreq+0x2e4>
 800499e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80049b6:	e021      	b.n	80049fc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	ee07 3a90 	vmov	s15, r3
 80049be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004a5c <HAL_RCC_GetSysClockFreq+0x2ec>
 80049c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ca:	4b1e      	ldr	r3, [pc, #120]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d2:	ee07 3a90 	vmov	s15, r3
 80049d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049da:	ed97 6a02 	vldr	s12, [r7, #8]
 80049de:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004a54 <HAL_RCC_GetSysClockFreq+0x2e4>
 80049e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80049fa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80049fc:	4b11      	ldr	r3, [pc, #68]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a00:	0a5b      	lsrs	r3, r3, #9
 8004a02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a06:	3301      	adds	r3, #1
 8004a08:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	ee07 3a90 	vmov	s15, r3
 8004a10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a14:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a20:	ee17 3a90 	vmov	r3, s15
 8004a24:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004a26:	e005      	b.n	8004a34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	61bb      	str	r3, [r7, #24]
      break;
 8004a2c:	e002      	b.n	8004a34 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004a2e:	4b07      	ldr	r3, [pc, #28]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004a30:	61bb      	str	r3, [r7, #24]
      break;
 8004a32:	bf00      	nop
  }

  return sysclockfreq;
 8004a34:	69bb      	ldr	r3, [r7, #24]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3724      	adds	r7, #36	; 0x24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	58024400 	.word	0x58024400
 8004a48:	03d09000 	.word	0x03d09000
 8004a4c:	003d0900 	.word	0x003d0900
 8004a50:	007a1200 	.word	0x007a1200
 8004a54:	46000000 	.word	0x46000000
 8004a58:	4c742400 	.word	0x4c742400
 8004a5c:	4a742400 	.word	0x4a742400
 8004a60:	4af42400 	.word	0x4af42400

08004a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8004a6a:	f7ff fe81 	bl	8004770 <HAL_RCC_GetSysClockFreq>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	4b10      	ldr	r3, [pc, #64]	; (8004ab4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	0a1b      	lsrs	r3, r3, #8
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	490f      	ldr	r1, [pc, #60]	; (8004ab8 <HAL_RCC_GetHCLKFreq+0x54>)
 8004a7c:	5ccb      	ldrb	r3, [r1, r3]
 8004a7e:	f003 031f 	and.w	r3, r3, #31
 8004a82:	fa22 f303 	lsr.w	r3, r2, r3
 8004a86:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004a88:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	f003 030f 	and.w	r3, r3, #15
 8004a90:	4a09      	ldr	r2, [pc, #36]	; (8004ab8 <HAL_RCC_GetHCLKFreq+0x54>)
 8004a92:	5cd3      	ldrb	r3, [r2, r3]
 8004a94:	f003 031f 	and.w	r3, r3, #31
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a9e:	4a07      	ldr	r2, [pc, #28]	; (8004abc <HAL_RCC_GetHCLKFreq+0x58>)
 8004aa0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004aa2:	4a07      	ldr	r2, [pc, #28]	; (8004ac0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004aa8:	4b04      	ldr	r3, [pc, #16]	; (8004abc <HAL_RCC_GetHCLKFreq+0x58>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	58024400 	.word	0x58024400
 8004ab8:	0800b144 	.word	0x0800b144
 8004abc:	2400000c 	.word	0x2400000c
 8004ac0:	24000008 	.word	0x24000008

08004ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004ac8:	f7ff ffcc 	bl	8004a64 <HAL_RCC_GetHCLKFreq>
 8004acc:	4602      	mov	r2, r0
 8004ace:	4b06      	ldr	r3, [pc, #24]	; (8004ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	091b      	lsrs	r3, r3, #4
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	4904      	ldr	r1, [pc, #16]	; (8004aec <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ada:	5ccb      	ldrb	r3, [r1, r3]
 8004adc:	f003 031f 	and.w	r3, r3, #31
 8004ae0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	58024400 	.word	0x58024400
 8004aec:	0800b144 	.word	0x0800b144

08004af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8004af4:	f7ff ffb6 	bl	8004a64 <HAL_RCC_GetHCLKFreq>
 8004af8:	4602      	mov	r2, r0
 8004afa:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	0a1b      	lsrs	r3, r3, #8
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	4904      	ldr	r1, [pc, #16]	; (8004b18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b06:	5ccb      	ldrb	r3, [r1, r3]
 8004b08:	f003 031f 	and.w	r3, r3, #31
 8004b0c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	58024400 	.word	0x58024400
 8004b18:	0800b144 	.word	0x0800b144

08004b1c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b20:	b0c8      	sub	sp, #288	; 0x120
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b28:	2300      	movs	r3, #0
 8004b2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b2e:	2300      	movs	r3, #0
 8004b30:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004b40:	2500      	movs	r5, #0
 8004b42:	ea54 0305 	orrs.w	r3, r4, r5
 8004b46:	d049      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b52:	d02f      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004b54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b58:	d828      	bhi.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004b5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b5e:	d01a      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004b60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b64:	d822      	bhi.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004b6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b6e:	d007      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004b70:	e01c      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b72:	4ba7      	ldr	r3, [pc, #668]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b76:	4aa6      	ldr	r2, [pc, #664]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004b7e:	e01a      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b84:	3308      	adds	r3, #8
 8004b86:	2102      	movs	r1, #2
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f002 fa6d 	bl	8007068 <RCCEx_PLL2_Config>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004b94:	e00f      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b9a:	3328      	adds	r3, #40	; 0x28
 8004b9c:	2102      	movs	r1, #2
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f002 fb14 	bl	80071cc <RCCEx_PLL3_Config>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004baa:	e004      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004bb2:	e000      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004bb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bb6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10a      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004bbe:	4b94      	ldr	r3, [pc, #592]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bcc:	4a90      	ldr	r2, [pc, #576]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bce:	430b      	orrs	r3, r1
 8004bd0:	6513      	str	r3, [r2, #80]	; 0x50
 8004bd2:	e003      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004bd8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004bdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004be8:	f04f 0900 	mov.w	r9, #0
 8004bec:	ea58 0309 	orrs.w	r3, r8, r9
 8004bf0:	d047      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf8:	2b04      	cmp	r3, #4
 8004bfa:	d82a      	bhi.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004bfc:	a201      	add	r2, pc, #4	; (adr r2, 8004c04 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c02:	bf00      	nop
 8004c04:	08004c19 	.word	0x08004c19
 8004c08:	08004c27 	.word	0x08004c27
 8004c0c:	08004c3d 	.word	0x08004c3d
 8004c10:	08004c5b 	.word	0x08004c5b
 8004c14:	08004c5b 	.word	0x08004c5b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c18:	4b7d      	ldr	r3, [pc, #500]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1c:	4a7c      	ldr	r2, [pc, #496]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c24:	e01a      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c2a:	3308      	adds	r3, #8
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f002 fa1a 	bl	8007068 <RCCEx_PLL2_Config>
 8004c34:	4603      	mov	r3, r0
 8004c36:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c3a:	e00f      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c40:	3328      	adds	r3, #40	; 0x28
 8004c42:	2100      	movs	r1, #0
 8004c44:	4618      	mov	r0, r3
 8004c46:	f002 fac1 	bl	80071cc <RCCEx_PLL3_Config>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c50:	e004      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004c58:	e000      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004c5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c5c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10a      	bne.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c64:	4b6a      	ldr	r3, [pc, #424]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c68:	f023 0107 	bic.w	r1, r3, #7
 8004c6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c72:	4a67      	ldr	r2, [pc, #412]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c74:	430b      	orrs	r3, r1
 8004c76:	6513      	str	r3, [r2, #80]	; 0x50
 8004c78:	e003      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c7e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004c82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8004c8e:	f04f 0b00 	mov.w	fp, #0
 8004c92:	ea5a 030b 	orrs.w	r3, sl, fp
 8004c96:	d054      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8004c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c9e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004ca2:	d036      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004ca4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004ca8:	d82f      	bhi.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cae:	d032      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cb4:	d829      	bhi.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004cb6:	2bc0      	cmp	r3, #192	; 0xc0
 8004cb8:	d02f      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8004cba:	2bc0      	cmp	r3, #192	; 0xc0
 8004cbc:	d825      	bhi.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004cbe:	2b80      	cmp	r3, #128	; 0x80
 8004cc0:	d018      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004cc2:	2b80      	cmp	r3, #128	; 0x80
 8004cc4:	d821      	bhi.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d002      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004cca:	2b40      	cmp	r3, #64	; 0x40
 8004ccc:	d007      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8004cce:	e01c      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cd0:	4b4f      	ldr	r3, [pc, #316]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	4a4e      	ldr	r2, [pc, #312]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004cdc:	e01e      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ce2:	3308      	adds	r3, #8
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f002 f9be 	bl	8007068 <RCCEx_PLL2_Config>
 8004cec:	4603      	mov	r3, r0
 8004cee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004cf2:	e013      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cf8:	3328      	adds	r3, #40	; 0x28
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f002 fa65 	bl	80071cc <RCCEx_PLL3_Config>
 8004d02:	4603      	mov	r3, r0
 8004d04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004d08:	e008      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004d10:	e004      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004d12:	bf00      	nop
 8004d14:	e002      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004d16:	bf00      	nop
 8004d18:	e000      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004d1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10a      	bne.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004d24:	4b3a      	ldr	r3, [pc, #232]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d28:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d32:	4a37      	ldr	r2, [pc, #220]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d34:	430b      	orrs	r3, r1
 8004d36:	6513      	str	r3, [r2, #80]	; 0x50
 8004d38:	e003      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d3e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004d4e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004d52:	2300      	movs	r3, #0
 8004d54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004d58:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	d05c      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8004d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d68:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004d6c:	d03b      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004d6e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004d72:	d834      	bhi.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004d74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d78:	d037      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d7e:	d82e      	bhi.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004d80:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004d84:	d033      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004d86:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004d8a:	d828      	bhi.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d90:	d01a      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d96:	d822      	bhi.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004da0:	d007      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004da2:	e01c      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004da4:	4b1a      	ldr	r3, [pc, #104]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da8:	4a19      	ldr	r2, [pc, #100]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004db0:	e01e      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004db2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004db6:	3308      	adds	r3, #8
 8004db8:	2100      	movs	r1, #0
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f002 f954 	bl	8007068 <RCCEx_PLL2_Config>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004dc6:	e013      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dcc:	3328      	adds	r3, #40	; 0x28
 8004dce:	2100      	movs	r1, #0
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f002 f9fb 	bl	80071cc <RCCEx_PLL3_Config>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004ddc:	e008      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004de4:	e004      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004de6:	bf00      	nop
 8004de8:	e002      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004dea:	bf00      	nop
 8004dec:	e000      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004dee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004df0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10d      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004df8:	4b05      	ldr	r3, [pc, #20]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dfc:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e06:	4a02      	ldr	r2, [pc, #8]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e08:	430b      	orrs	r3, r1
 8004e0a:	6513      	str	r3, [r2, #80]	; 0x50
 8004e0c:	e006      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004e0e:	bf00      	nop
 8004e10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e18:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e24:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004e28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004e32:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004e36:	460b      	mov	r3, r1
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	d03a      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e42:	2b30      	cmp	r3, #48	; 0x30
 8004e44:	d01f      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004e46:	2b30      	cmp	r3, #48	; 0x30
 8004e48:	d819      	bhi.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004e4a:	2b20      	cmp	r3, #32
 8004e4c:	d00c      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004e4e:	2b20      	cmp	r3, #32
 8004e50:	d815      	bhi.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d019      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004e56:	2b10      	cmp	r3, #16
 8004e58:	d111      	bne.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e5a:	4bae      	ldr	r3, [pc, #696]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5e:	4aad      	ldr	r2, [pc, #692]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004e66:	e011      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e6c:	3308      	adds	r3, #8
 8004e6e:	2102      	movs	r1, #2
 8004e70:	4618      	mov	r0, r3
 8004e72:	f002 f8f9 	bl	8007068 <RCCEx_PLL2_Config>
 8004e76:	4603      	mov	r3, r0
 8004e78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004e7c:	e006      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004e84:	e002      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004e86:	bf00      	nop
 8004e88:	e000      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004e8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10a      	bne.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004e94:	4b9f      	ldr	r3, [pc, #636]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e98:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea2:	4a9c      	ldr	r2, [pc, #624]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ea4:	430b      	orrs	r3, r1
 8004ea6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ea8:	e003      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eaa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004eae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004eb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eba:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004ebe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004ec8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	d051      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004ed2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ed8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004edc:	d035      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004ede:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ee2:	d82e      	bhi.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004ee4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ee8:	d031      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004eea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004eee:	d828      	bhi.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004ef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ef4:	d01a      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004efa:	d822      	bhi.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f04:	d007      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004f06:	e01c      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f08:	4b82      	ldr	r3, [pc, #520]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0c:	4a81      	ldr	r2, [pc, #516]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004f0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004f14:	e01c      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f1a:	3308      	adds	r3, #8
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f002 f8a2 	bl	8007068 <RCCEx_PLL2_Config>
 8004f24:	4603      	mov	r3, r0
 8004f26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004f2a:	e011      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f30:	3328      	adds	r3, #40	; 0x28
 8004f32:	2100      	movs	r1, #0
 8004f34:	4618      	mov	r0, r3
 8004f36:	f002 f949 	bl	80071cc <RCCEx_PLL3_Config>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004f40:	e006      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004f48:	e002      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004f4a:	bf00      	nop
 8004f4c:	e000      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004f4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10a      	bne.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004f58:	4b6e      	ldr	r3, [pc, #440]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f5c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f66:	4a6b      	ldr	r2, [pc, #428]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004f68:	430b      	orrs	r3, r1
 8004f6a:	6513      	str	r3, [r2, #80]	; 0x50
 8004f6c:	e003      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f6e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f72:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004f82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f86:	2300      	movs	r3, #0
 8004f88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f8c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004f90:	460b      	mov	r3, r1
 8004f92:	4313      	orrs	r3, r2
 8004f94:	d053      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004f96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fa0:	d033      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004fa2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fa6:	d82c      	bhi.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004fa8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fac:	d02f      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004fae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fb2:	d826      	bhi.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004fb4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004fb8:	d02b      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004fba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004fbe:	d820      	bhi.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004fc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fc4:	d012      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004fc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fca:	d81a      	bhi.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d022      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd4:	d115      	bne.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fda:	3308      	adds	r3, #8
 8004fdc:	2101      	movs	r1, #1
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f002 f842 	bl	8007068 <RCCEx_PLL2_Config>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004fea:	e015      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ff0:	3328      	adds	r3, #40	; 0x28
 8004ff2:	2101      	movs	r1, #1
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f002 f8e9 	bl	80071cc <RCCEx_PLL3_Config>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005000:	e00a      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005008:	e006      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800500a:	bf00      	nop
 800500c:	e004      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800500e:	bf00      	nop
 8005010:	e002      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005012:	bf00      	nop
 8005014:	e000      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005016:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005018:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10a      	bne.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005020:	4b3c      	ldr	r3, [pc, #240]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005024:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005028:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800502c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800502e:	4a39      	ldr	r2, [pc, #228]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005030:	430b      	orrs	r3, r1
 8005032:	6513      	str	r3, [r2, #80]	; 0x50
 8005034:	e003      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005036:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800503a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800503e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005046:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800504a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800504e:	2300      	movs	r3, #0
 8005050:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005054:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005058:	460b      	mov	r3, r1
 800505a:	4313      	orrs	r3, r2
 800505c:	d060      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800505e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005062:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005066:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800506a:	d039      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800506c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005070:	d832      	bhi.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005072:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005076:	d035      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005078:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800507c:	d82c      	bhi.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800507e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005082:	d031      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005088:	d826      	bhi.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800508a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800508e:	d02d      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005090:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005094:	d820      	bhi.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005096:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800509a:	d012      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800509c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050a0:	d81a      	bhi.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d024      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80050a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050aa:	d115      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050b0:	3308      	adds	r3, #8
 80050b2:	2101      	movs	r1, #1
 80050b4:	4618      	mov	r0, r3
 80050b6:	f001 ffd7 	bl	8007068 <RCCEx_PLL2_Config>
 80050ba:	4603      	mov	r3, r0
 80050bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80050c0:	e017      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050c6:	3328      	adds	r3, #40	; 0x28
 80050c8:	2101      	movs	r1, #1
 80050ca:	4618      	mov	r0, r3
 80050cc:	f002 f87e 	bl	80071cc <RCCEx_PLL3_Config>
 80050d0:	4603      	mov	r3, r0
 80050d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80050d6:	e00c      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80050de:	e008      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80050e0:	bf00      	nop
 80050e2:	e006      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80050e4:	bf00      	nop
 80050e6:	e004      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80050e8:	bf00      	nop
 80050ea:	e002      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80050ec:	bf00      	nop
 80050ee:	e000      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80050f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10e      	bne.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80050fa:	4b06      	ldr	r3, [pc, #24]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80050fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050fe:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005102:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005106:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800510a:	4a02      	ldr	r2, [pc, #8]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800510c:	430b      	orrs	r3, r1
 800510e:	6593      	str	r3, [r2, #88]	; 0x58
 8005110:	e006      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005112:	bf00      	nop
 8005114:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005118:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800511c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005120:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005128:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800512c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005130:	2300      	movs	r3, #0
 8005132:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005136:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800513a:	460b      	mov	r3, r1
 800513c:	4313      	orrs	r3, r2
 800513e:	d037      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005140:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005146:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800514a:	d00e      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800514c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005150:	d816      	bhi.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005152:	2b00      	cmp	r3, #0
 8005154:	d018      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800515a:	d111      	bne.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800515c:	4bc4      	ldr	r3, [pc, #784]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800515e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005160:	4ac3      	ldr	r2, [pc, #780]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005166:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005168:	e00f      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800516a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800516e:	3308      	adds	r3, #8
 8005170:	2101      	movs	r1, #1
 8005172:	4618      	mov	r0, r3
 8005174:	f001 ff78 	bl	8007068 <RCCEx_PLL2_Config>
 8005178:	4603      	mov	r3, r0
 800517a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800517e:	e004      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005186:	e000      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800518a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10a      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005192:	4bb7      	ldr	r3, [pc, #732]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005196:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800519a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800519e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051a0:	4ab3      	ldr	r2, [pc, #716]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051a2:	430b      	orrs	r3, r1
 80051a4:	6513      	str	r3, [r2, #80]	; 0x50
 80051a6:	e003      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80051ac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80051b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80051bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051c0:	2300      	movs	r3, #0
 80051c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80051c6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80051ca:	460b      	mov	r3, r1
 80051cc:	4313      	orrs	r3, r2
 80051ce:	d039      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80051d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051d6:	2b03      	cmp	r3, #3
 80051d8:	d81c      	bhi.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80051da:	a201      	add	r2, pc, #4	; (adr r2, 80051e0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80051dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e0:	0800521d 	.word	0x0800521d
 80051e4:	080051f1 	.word	0x080051f1
 80051e8:	080051ff 	.word	0x080051ff
 80051ec:	0800521d 	.word	0x0800521d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051f0:	4b9f      	ldr	r3, [pc, #636]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f4:	4a9e      	ldr	r2, [pc, #632]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80051fc:	e00f      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005202:	3308      	adds	r3, #8
 8005204:	2102      	movs	r1, #2
 8005206:	4618      	mov	r0, r3
 8005208:	f001 ff2e 	bl	8007068 <RCCEx_PLL2_Config>
 800520c:	4603      	mov	r3, r0
 800520e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005212:	e004      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800521a:	e000      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800521c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800521e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10a      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005226:	4b92      	ldr	r3, [pc, #584]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800522a:	f023 0103 	bic.w	r1, r3, #3
 800522e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005234:	4a8e      	ldr	r2, [pc, #568]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005236:	430b      	orrs	r3, r1
 8005238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800523a:	e003      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800523c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005240:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005244:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005250:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005254:	2300      	movs	r3, #0
 8005256:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800525a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800525e:	460b      	mov	r3, r1
 8005260:	4313      	orrs	r3, r2
 8005262:	f000 8099 	beq.w	8005398 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005266:	4b83      	ldr	r3, [pc, #524]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a82      	ldr	r2, [pc, #520]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800526c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005270:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005272:	f7fc fae5 	bl	8001840 <HAL_GetTick>
 8005276:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800527a:	e00b      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800527c:	f7fc fae0 	bl	8001840 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b64      	cmp	r3, #100	; 0x64
 800528a:	d903      	bls.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005292:	e005      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005294:	4b77      	ldr	r3, [pc, #476]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529c:	2b00      	cmp	r3, #0
 800529e:	d0ed      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80052a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d173      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80052a8:	4b71      	ldr	r3, [pc, #452]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80052b4:	4053      	eors	r3, r2
 80052b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d015      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052be:	4b6c      	ldr	r3, [pc, #432]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052ca:	4b69      	ldr	r3, [pc, #420]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ce:	4a68      	ldr	r2, [pc, #416]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052d4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052d6:	4b66      	ldr	r3, [pc, #408]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052da:	4a65      	ldr	r2, [pc, #404]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052e0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80052e2:	4a63      	ldr	r2, [pc, #396]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052e8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80052ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80052f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052f6:	d118      	bne.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f8:	f7fc faa2 	bl	8001840 <HAL_GetTick>
 80052fc:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005300:	e00d      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005302:	f7fc fa9d 	bl	8001840 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800530c:	1ad2      	subs	r2, r2, r3
 800530e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005312:	429a      	cmp	r2, r3
 8005314:	d903      	bls.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800531c:	e005      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800531e:	4b54      	ldr	r3, [pc, #336]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	2b00      	cmp	r3, #0
 8005328:	d0eb      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800532a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800532e:	2b00      	cmp	r3, #0
 8005330:	d129      	bne.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005332:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005336:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800533a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800533e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005342:	d10e      	bne.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005344:	4b4a      	ldr	r3, [pc, #296]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800534c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005350:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005354:	091a      	lsrs	r2, r3, #4
 8005356:	4b48      	ldr	r3, [pc, #288]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005358:	4013      	ands	r3, r2
 800535a:	4a45      	ldr	r2, [pc, #276]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800535c:	430b      	orrs	r3, r1
 800535e:	6113      	str	r3, [r2, #16]
 8005360:	e005      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005362:	4b43      	ldr	r3, [pc, #268]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	4a42      	ldr	r2, [pc, #264]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005368:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800536c:	6113      	str	r3, [r2, #16]
 800536e:	4b40      	ldr	r3, [pc, #256]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005370:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005372:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005376:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800537a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800537e:	4a3c      	ldr	r2, [pc, #240]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005380:	430b      	orrs	r3, r1
 8005382:	6713      	str	r3, [r2, #112]	; 0x70
 8005384:	e008      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005386:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800538a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800538e:	e003      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005390:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005394:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005398:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800539c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a0:	f002 0301 	and.w	r3, r2, #1
 80053a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053a8:	2300      	movs	r3, #0
 80053aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80053b2:	460b      	mov	r3, r1
 80053b4:	4313      	orrs	r3, r2
 80053b6:	f000 8090 	beq.w	80054da <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80053ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053c2:	2b28      	cmp	r3, #40	; 0x28
 80053c4:	d870      	bhi.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80053c6:	a201      	add	r2, pc, #4	; (adr r2, 80053cc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80053c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053cc:	080054b1 	.word	0x080054b1
 80053d0:	080054a9 	.word	0x080054a9
 80053d4:	080054a9 	.word	0x080054a9
 80053d8:	080054a9 	.word	0x080054a9
 80053dc:	080054a9 	.word	0x080054a9
 80053e0:	080054a9 	.word	0x080054a9
 80053e4:	080054a9 	.word	0x080054a9
 80053e8:	080054a9 	.word	0x080054a9
 80053ec:	0800547d 	.word	0x0800547d
 80053f0:	080054a9 	.word	0x080054a9
 80053f4:	080054a9 	.word	0x080054a9
 80053f8:	080054a9 	.word	0x080054a9
 80053fc:	080054a9 	.word	0x080054a9
 8005400:	080054a9 	.word	0x080054a9
 8005404:	080054a9 	.word	0x080054a9
 8005408:	080054a9 	.word	0x080054a9
 800540c:	08005493 	.word	0x08005493
 8005410:	080054a9 	.word	0x080054a9
 8005414:	080054a9 	.word	0x080054a9
 8005418:	080054a9 	.word	0x080054a9
 800541c:	080054a9 	.word	0x080054a9
 8005420:	080054a9 	.word	0x080054a9
 8005424:	080054a9 	.word	0x080054a9
 8005428:	080054a9 	.word	0x080054a9
 800542c:	080054b1 	.word	0x080054b1
 8005430:	080054a9 	.word	0x080054a9
 8005434:	080054a9 	.word	0x080054a9
 8005438:	080054a9 	.word	0x080054a9
 800543c:	080054a9 	.word	0x080054a9
 8005440:	080054a9 	.word	0x080054a9
 8005444:	080054a9 	.word	0x080054a9
 8005448:	080054a9 	.word	0x080054a9
 800544c:	080054b1 	.word	0x080054b1
 8005450:	080054a9 	.word	0x080054a9
 8005454:	080054a9 	.word	0x080054a9
 8005458:	080054a9 	.word	0x080054a9
 800545c:	080054a9 	.word	0x080054a9
 8005460:	080054a9 	.word	0x080054a9
 8005464:	080054a9 	.word	0x080054a9
 8005468:	080054a9 	.word	0x080054a9
 800546c:	080054b1 	.word	0x080054b1
 8005470:	58024400 	.word	0x58024400
 8005474:	58024800 	.word	0x58024800
 8005478:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800547c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005480:	3308      	adds	r3, #8
 8005482:	2101      	movs	r1, #1
 8005484:	4618      	mov	r0, r3
 8005486:	f001 fdef 	bl	8007068 <RCCEx_PLL2_Config>
 800548a:	4603      	mov	r3, r0
 800548c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005490:	e00f      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005492:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005496:	3328      	adds	r3, #40	; 0x28
 8005498:	2101      	movs	r1, #1
 800549a:	4618      	mov	r0, r3
 800549c:	f001 fe96 	bl	80071cc <RCCEx_PLL3_Config>
 80054a0:	4603      	mov	r3, r0
 80054a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80054a6:	e004      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80054ae:	e000      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80054b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054b2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10b      	bne.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80054ba:	4bc0      	ldr	r3, [pc, #768]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80054bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054be:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80054c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ca:	4abc      	ldr	r2, [pc, #752]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80054cc:	430b      	orrs	r3, r1
 80054ce:	6553      	str	r3, [r2, #84]	; 0x54
 80054d0:	e003      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80054d6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80054da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e2:	f002 0302 	and.w	r3, r2, #2
 80054e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054ea:	2300      	movs	r3, #0
 80054ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80054f0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80054f4:	460b      	mov	r3, r1
 80054f6:	4313      	orrs	r3, r2
 80054f8:	d043      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80054fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005502:	2b05      	cmp	r3, #5
 8005504:	d824      	bhi.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8005506:	a201      	add	r2, pc, #4	; (adr r2, 800550c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8005508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550c:	08005559 	.word	0x08005559
 8005510:	08005525 	.word	0x08005525
 8005514:	0800553b 	.word	0x0800553b
 8005518:	08005559 	.word	0x08005559
 800551c:	08005559 	.word	0x08005559
 8005520:	08005559 	.word	0x08005559
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005524:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005528:	3308      	adds	r3, #8
 800552a:	2101      	movs	r1, #1
 800552c:	4618      	mov	r0, r3
 800552e:	f001 fd9b 	bl	8007068 <RCCEx_PLL2_Config>
 8005532:	4603      	mov	r3, r0
 8005534:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005538:	e00f      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800553a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800553e:	3328      	adds	r3, #40	; 0x28
 8005540:	2101      	movs	r1, #1
 8005542:	4618      	mov	r0, r3
 8005544:	f001 fe42 	bl	80071cc <RCCEx_PLL3_Config>
 8005548:	4603      	mov	r3, r0
 800554a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800554e:	e004      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005556:	e000      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8005558:	bf00      	nop
    }

    if (ret == HAL_OK)
 800555a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10b      	bne.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005562:	4b96      	ldr	r3, [pc, #600]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005566:	f023 0107 	bic.w	r1, r3, #7
 800556a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800556e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005572:	4a92      	ldr	r2, [pc, #584]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005574:	430b      	orrs	r3, r1
 8005576:	6553      	str	r3, [r2, #84]	; 0x54
 8005578:	e003      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800557a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800557e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005582:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558a:	f002 0304 	and.w	r3, r2, #4
 800558e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005592:	2300      	movs	r3, #0
 8005594:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005598:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800559c:	460b      	mov	r3, r1
 800559e:	4313      	orrs	r3, r2
 80055a0:	d043      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80055a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055aa:	2b05      	cmp	r3, #5
 80055ac:	d824      	bhi.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80055ae:	a201      	add	r2, pc, #4	; (adr r2, 80055b4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80055b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b4:	08005601 	.word	0x08005601
 80055b8:	080055cd 	.word	0x080055cd
 80055bc:	080055e3 	.word	0x080055e3
 80055c0:	08005601 	.word	0x08005601
 80055c4:	08005601 	.word	0x08005601
 80055c8:	08005601 	.word	0x08005601
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055d0:	3308      	adds	r3, #8
 80055d2:	2101      	movs	r1, #1
 80055d4:	4618      	mov	r0, r3
 80055d6:	f001 fd47 	bl	8007068 <RCCEx_PLL2_Config>
 80055da:	4603      	mov	r3, r0
 80055dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80055e0:	e00f      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055e6:	3328      	adds	r3, #40	; 0x28
 80055e8:	2101      	movs	r1, #1
 80055ea:	4618      	mov	r0, r3
 80055ec:	f001 fdee 	bl	80071cc <RCCEx_PLL3_Config>
 80055f0:	4603      	mov	r3, r0
 80055f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80055f6:	e004      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80055fe:	e000      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8005600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005602:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10b      	bne.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800560a:	4b6c      	ldr	r3, [pc, #432]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800560c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800560e:	f023 0107 	bic.w	r1, r3, #7
 8005612:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005616:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800561a:	4a68      	ldr	r2, [pc, #416]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800561c:	430b      	orrs	r3, r1
 800561e:	6593      	str	r3, [r2, #88]	; 0x58
 8005620:	e003      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005622:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005626:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800562a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800562e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005632:	f002 0320 	and.w	r3, r2, #32
 8005636:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800563a:	2300      	movs	r3, #0
 800563c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005640:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005644:	460b      	mov	r3, r1
 8005646:	4313      	orrs	r3, r2
 8005648:	d055      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800564a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800564e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005652:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005656:	d033      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005658:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800565c:	d82c      	bhi.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800565e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005662:	d02f      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005668:	d826      	bhi.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800566a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800566e:	d02b      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005670:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005674:	d820      	bhi.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005676:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800567a:	d012      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800567c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005680:	d81a      	bhi.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005682:	2b00      	cmp	r3, #0
 8005684:	d022      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8005686:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800568a:	d115      	bne.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800568c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005690:	3308      	adds	r3, #8
 8005692:	2100      	movs	r1, #0
 8005694:	4618      	mov	r0, r3
 8005696:	f001 fce7 	bl	8007068 <RCCEx_PLL2_Config>
 800569a:	4603      	mov	r3, r0
 800569c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80056a0:	e015      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056a6:	3328      	adds	r3, #40	; 0x28
 80056a8:	2102      	movs	r1, #2
 80056aa:	4618      	mov	r0, r3
 80056ac:	f001 fd8e 	bl	80071cc <RCCEx_PLL3_Config>
 80056b0:	4603      	mov	r3, r0
 80056b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80056b6:	e00a      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80056be:	e006      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80056c0:	bf00      	nop
 80056c2:	e004      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80056c4:	bf00      	nop
 80056c6:	e002      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80056c8:	bf00      	nop
 80056ca:	e000      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80056cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10b      	bne.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056d6:	4b39      	ldr	r3, [pc, #228]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80056d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056da:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80056de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056e6:	4a35      	ldr	r2, [pc, #212]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80056e8:	430b      	orrs	r3, r1
 80056ea:	6553      	str	r3, [r2, #84]	; 0x54
 80056ec:	e003      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80056f2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80056f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fe:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005702:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005706:	2300      	movs	r3, #0
 8005708:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800570c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005710:	460b      	mov	r3, r1
 8005712:	4313      	orrs	r3, r2
 8005714:	d058      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005716:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800571a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800571e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005722:	d033      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005724:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005728:	d82c      	bhi.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800572a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800572e:	d02f      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005734:	d826      	bhi.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005736:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800573a:	d02b      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800573c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005740:	d820      	bhi.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005742:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005746:	d012      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8005748:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800574c:	d81a      	bhi.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800574e:	2b00      	cmp	r3, #0
 8005750:	d022      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8005752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005756:	d115      	bne.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005758:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800575c:	3308      	adds	r3, #8
 800575e:	2100      	movs	r1, #0
 8005760:	4618      	mov	r0, r3
 8005762:	f001 fc81 	bl	8007068 <RCCEx_PLL2_Config>
 8005766:	4603      	mov	r3, r0
 8005768:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800576c:	e015      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800576e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005772:	3328      	adds	r3, #40	; 0x28
 8005774:	2102      	movs	r1, #2
 8005776:	4618      	mov	r0, r3
 8005778:	f001 fd28 	bl	80071cc <RCCEx_PLL3_Config>
 800577c:	4603      	mov	r3, r0
 800577e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005782:	e00a      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800578a:	e006      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800578c:	bf00      	nop
 800578e:	e004      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005790:	bf00      	nop
 8005792:	e002      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005794:	bf00      	nop
 8005796:	e000      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800579a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10e      	bne.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057a2:	4b06      	ldr	r3, [pc, #24]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80057a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80057aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80057b2:	4a02      	ldr	r2, [pc, #8]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80057b4:	430b      	orrs	r3, r1
 80057b6:	6593      	str	r3, [r2, #88]	; 0x58
 80057b8:	e006      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80057ba:	bf00      	nop
 80057bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80057c4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80057c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80057d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80057d8:	2300      	movs	r3, #0
 80057da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80057de:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80057e2:	460b      	mov	r3, r1
 80057e4:	4313      	orrs	r3, r2
 80057e6:	d055      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80057e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80057f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80057f4:	d033      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80057f6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80057fa:	d82c      	bhi.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80057fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005800:	d02f      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005802:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005806:	d826      	bhi.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005808:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800580c:	d02b      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800580e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005812:	d820      	bhi.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005814:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005818:	d012      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800581a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800581e:	d81a      	bhi.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005820:	2b00      	cmp	r3, #0
 8005822:	d022      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8005824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005828:	d115      	bne.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800582a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800582e:	3308      	adds	r3, #8
 8005830:	2100      	movs	r1, #0
 8005832:	4618      	mov	r0, r3
 8005834:	f001 fc18 	bl	8007068 <RCCEx_PLL2_Config>
 8005838:	4603      	mov	r3, r0
 800583a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800583e:	e015      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005840:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005844:	3328      	adds	r3, #40	; 0x28
 8005846:	2102      	movs	r1, #2
 8005848:	4618      	mov	r0, r3
 800584a:	f001 fcbf 	bl	80071cc <RCCEx_PLL3_Config>
 800584e:	4603      	mov	r3, r0
 8005850:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005854:	e00a      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800585c:	e006      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800585e:	bf00      	nop
 8005860:	e004      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005862:	bf00      	nop
 8005864:	e002      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005866:	bf00      	nop
 8005868:	e000      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800586a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800586c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10b      	bne.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005874:	4ba1      	ldr	r3, [pc, #644]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005878:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800587c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005880:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005884:	4a9d      	ldr	r2, [pc, #628]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005886:	430b      	orrs	r3, r1
 8005888:	6593      	str	r3, [r2, #88]	; 0x58
 800588a:	e003      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800588c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005890:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005894:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589c:	f002 0308 	and.w	r3, r2, #8
 80058a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058a4:	2300      	movs	r3, #0
 80058a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80058aa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80058ae:	460b      	mov	r3, r1
 80058b0:	4313      	orrs	r3, r2
 80058b2:	d01e      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80058b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c0:	d10c      	bne.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80058c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058c6:	3328      	adds	r3, #40	; 0x28
 80058c8:	2102      	movs	r1, #2
 80058ca:	4618      	mov	r0, r3
 80058cc:	f001 fc7e 	bl	80071cc <RCCEx_PLL3_Config>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80058dc:	4b87      	ldr	r3, [pc, #540]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80058de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058ec:	4a83      	ldr	r2, [pc, #524]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80058ee:	430b      	orrs	r3, r1
 80058f0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fa:	f002 0310 	and.w	r3, r2, #16
 80058fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005902:	2300      	movs	r3, #0
 8005904:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005908:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800590c:	460b      	mov	r3, r1
 800590e:	4313      	orrs	r3, r2
 8005910:	d01e      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005912:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005916:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800591a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800591e:	d10c      	bne.n	800593a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005920:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005924:	3328      	adds	r3, #40	; 0x28
 8005926:	2102      	movs	r1, #2
 8005928:	4618      	mov	r0, r3
 800592a:	f001 fc4f 	bl	80071cc <RCCEx_PLL3_Config>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d002      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800593a:	4b70      	ldr	r3, [pc, #448]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800593c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005942:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005946:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800594a:	4a6c      	ldr	r2, [pc, #432]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800594c:	430b      	orrs	r3, r1
 800594e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005950:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005958:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800595c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005960:	2300      	movs	r3, #0
 8005962:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005966:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800596a:	460b      	mov	r3, r1
 800596c:	4313      	orrs	r3, r2
 800596e:	d03e      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005970:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005974:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005978:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800597c:	d022      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800597e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005982:	d81b      	bhi.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005984:	2b00      	cmp	r3, #0
 8005986:	d003      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8005988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800598c:	d00b      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800598e:	e015      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005990:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005994:	3308      	adds	r3, #8
 8005996:	2100      	movs	r1, #0
 8005998:	4618      	mov	r0, r3
 800599a:	f001 fb65 	bl	8007068 <RCCEx_PLL2_Config>
 800599e:	4603      	mov	r3, r0
 80059a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80059a4:	e00f      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059aa:	3328      	adds	r3, #40	; 0x28
 80059ac:	2102      	movs	r1, #2
 80059ae:	4618      	mov	r0, r3
 80059b0:	f001 fc0c 	bl	80071cc <RCCEx_PLL3_Config>
 80059b4:	4603      	mov	r3, r0
 80059b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80059ba:	e004      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80059c2:	e000      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80059c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10b      	bne.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059ce:	4b4b      	ldr	r3, [pc, #300]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80059d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80059d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80059de:	4a47      	ldr	r2, [pc, #284]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80059e0:	430b      	orrs	r3, r1
 80059e2:	6593      	str	r3, [r2, #88]	; 0x58
 80059e4:	e003      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80059ea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80059ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80059fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80059fc:	2300      	movs	r3, #0
 80059fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a00:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005a04:	460b      	mov	r3, r1
 8005a06:	4313      	orrs	r3, r2
 8005a08:	d03b      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005a0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a16:	d01f      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8005a18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a1c:	d818      	bhi.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a22:	d003      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8005a24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a28:	d007      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8005a2a:	e011      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a2c:	4b33      	ldr	r3, [pc, #204]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a30:	4a32      	ldr	r2, [pc, #200]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005a38:	e00f      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a3e:	3328      	adds	r3, #40	; 0x28
 8005a40:	2101      	movs	r1, #1
 8005a42:	4618      	mov	r0, r3
 8005a44:	f001 fbc2 	bl	80071cc <RCCEx_PLL3_Config>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8005a4e:	e004      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005a56:	e000      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8005a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10b      	bne.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a62:	4b26      	ldr	r3, [pc, #152]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a66:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005a6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a72:	4a22      	ldr	r2, [pc, #136]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005a74:	430b      	orrs	r3, r1
 8005a76:	6553      	str	r3, [r2, #84]	; 0x54
 8005a78:	e003      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a7e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005a8e:	673b      	str	r3, [r7, #112]	; 0x70
 8005a90:	2300      	movs	r3, #0
 8005a92:	677b      	str	r3, [r7, #116]	; 0x74
 8005a94:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005a98:	460b      	mov	r3, r1
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	d034      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d003      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8005aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aac:	d007      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8005aae:	e011      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ab0:	4b12      	ldr	r3, [pc, #72]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab4:	4a11      	ldr	r2, [pc, #68]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005abc:	e00e      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ac2:	3308      	adds	r3, #8
 8005ac4:	2102      	movs	r1, #2
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f001 face 	bl	8007068 <RCCEx_PLL2_Config>
 8005acc:	4603      	mov	r3, r0
 8005ace:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005ad2:	e003      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005ada:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005adc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10d      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005ae4:	4b05      	ldr	r3, [pc, #20]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ae8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005aec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af2:	4a02      	ldr	r2, [pc, #8]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005af4:	430b      	orrs	r3, r1
 8005af6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005af8:	e006      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8005afa:	bf00      	nop
 8005afc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b04:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b10:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005b14:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b16:	2300      	movs	r3, #0
 8005b18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b1a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005b1e:	460b      	mov	r3, r1
 8005b20:	4313      	orrs	r3, r2
 8005b22:	d00c      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005b24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b28:	3328      	adds	r3, #40	; 0x28
 8005b2a:	2102      	movs	r1, #2
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f001 fb4d 	bl	80071cc <RCCEx_PLL3_Config>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d002      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005b3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b46:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005b4a:	663b      	str	r3, [r7, #96]	; 0x60
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	667b      	str	r3, [r7, #100]	; 0x64
 8005b50:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005b54:	460b      	mov	r3, r1
 8005b56:	4313      	orrs	r3, r2
 8005b58:	d038      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b66:	d018      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8005b68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b6c:	d811      	bhi.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005b6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b72:	d014      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8005b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b78:	d80b      	bhi.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d011      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8005b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b82:	d106      	bne.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b84:	4bc3      	ldr	r3, [pc, #780]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b88:	4ac2      	ldr	r2, [pc, #776]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005b90:	e008      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005b98:	e004      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005b9a:	bf00      	nop
 8005b9c:	e002      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005b9e:	bf00      	nop
 8005ba0:	e000      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005ba2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ba4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10b      	bne.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005bac:	4bb9      	ldr	r3, [pc, #740]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bbc:	4ab5      	ldr	r2, [pc, #724]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005bbe:	430b      	orrs	r3, r1
 8005bc0:	6553      	str	r3, [r2, #84]	; 0x54
 8005bc2:	e003      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005bc8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005bd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bda:	2300      	movs	r3, #0
 8005bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bde:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005be2:	460b      	mov	r3, r1
 8005be4:	4313      	orrs	r3, r2
 8005be6:	d009      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005be8:	4baa      	ldr	r3, [pc, #680]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005bf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bf6:	4aa7      	ldr	r2, [pc, #668]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005bf8:	430b      	orrs	r3, r1
 8005bfa:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c04:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005c08:	653b      	str	r3, [r7, #80]	; 0x50
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	657b      	str	r3, [r7, #84]	; 0x54
 8005c0e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005c12:	460b      	mov	r3, r1
 8005c14:	4313      	orrs	r3, r2
 8005c16:	d009      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c18:	4b9e      	ldr	r3, [pc, #632]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c1c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c26:	4a9b      	ldr	r2, [pc, #620]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005c28:	430b      	orrs	r3, r1
 8005c2a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005c2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c34:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005c38:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c3e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005c42:	460b      	mov	r3, r1
 8005c44:	4313      	orrs	r3, r2
 8005c46:	d009      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005c48:	4b92      	ldr	r3, [pc, #584]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c4c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8005c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c56:	4a8f      	ldr	r2, [pc, #572]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005c58:	430b      	orrs	r3, r1
 8005c5a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c64:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005c68:	643b      	str	r3, [r7, #64]	; 0x40
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	647b      	str	r3, [r7, #68]	; 0x44
 8005c6e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005c72:	460b      	mov	r3, r1
 8005c74:	4313      	orrs	r3, r2
 8005c76:	d00e      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c78:	4b86      	ldr	r3, [pc, #536]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	4a85      	ldr	r2, [pc, #532]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005c7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c82:	6113      	str	r3, [r2, #16]
 8005c84:	4b83      	ldr	r3, [pc, #524]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005c86:	6919      	ldr	r1, [r3, #16]
 8005c88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c8c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005c90:	4a80      	ldr	r2, [pc, #512]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005c92:	430b      	orrs	r3, r1
 8005c94:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005ca2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ca8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005cac:	460b      	mov	r3, r1
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	d009      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005cb2:	4b78      	ldr	r3, [pc, #480]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cb6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc0:	4a74      	ldr	r2, [pc, #464]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005cc2:	430b      	orrs	r3, r1
 8005cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cce:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005cd2:	633b      	str	r3, [r7, #48]	; 0x30
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8005cd8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005cdc:	460b      	mov	r3, r1
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	d00a      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ce2:	4b6c      	ldr	r3, [pc, #432]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005cea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cf2:	4a68      	ldr	r2, [pc, #416]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005cf4:	430b      	orrs	r3, r1
 8005cf6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005cf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d00:	2100      	movs	r1, #0
 8005d02:	62b9      	str	r1, [r7, #40]	; 0x28
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d0a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005d0e:	460b      	mov	r3, r1
 8005d10:	4313      	orrs	r3, r2
 8005d12:	d011      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d18:	3308      	adds	r3, #8
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f001 f9a3 	bl	8007068 <RCCEx_PLL2_Config>
 8005d22:	4603      	mov	r3, r0
 8005d24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005d28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d003      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d34:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005d38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d40:	2100      	movs	r1, #0
 8005d42:	6239      	str	r1, [r7, #32]
 8005d44:	f003 0302 	and.w	r3, r3, #2
 8005d48:	627b      	str	r3, [r7, #36]	; 0x24
 8005d4a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005d4e:	460b      	mov	r3, r1
 8005d50:	4313      	orrs	r3, r2
 8005d52:	d011      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d58:	3308      	adds	r3, #8
 8005d5a:	2101      	movs	r1, #1
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f001 f983 	bl	8007068 <RCCEx_PLL2_Config>
 8005d62:	4603      	mov	r3, r0
 8005d64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005d68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d003      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d74:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d80:	2100      	movs	r1, #0
 8005d82:	61b9      	str	r1, [r7, #24]
 8005d84:	f003 0304 	and.w	r3, r3, #4
 8005d88:	61fb      	str	r3, [r7, #28]
 8005d8a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005d8e:	460b      	mov	r3, r1
 8005d90:	4313      	orrs	r3, r2
 8005d92:	d011      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d98:	3308      	adds	r3, #8
 8005d9a:	2102      	movs	r1, #2
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f001 f963 	bl	8007068 <RCCEx_PLL2_Config>
 8005da2:	4603      	mov	r3, r0
 8005da4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005da8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d003      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005db4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005db8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	6139      	str	r1, [r7, #16]
 8005dc4:	f003 0308 	and.w	r3, r3, #8
 8005dc8:	617b      	str	r3, [r7, #20]
 8005dca:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005dce:	460b      	mov	r3, r1
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	d011      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005dd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dd8:	3328      	adds	r3, #40	; 0x28
 8005dda:	2100      	movs	r1, #0
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f001 f9f5 	bl	80071cc <RCCEx_PLL3_Config>
 8005de2:	4603      	mov	r3, r0
 8005de4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8005de8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d003      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005df4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e00:	2100      	movs	r1, #0
 8005e02:	60b9      	str	r1, [r7, #8]
 8005e04:	f003 0310 	and.w	r3, r3, #16
 8005e08:	60fb      	str	r3, [r7, #12]
 8005e0a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005e0e:	460b      	mov	r3, r1
 8005e10:	4313      	orrs	r3, r2
 8005e12:	d011      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e18:	3328      	adds	r3, #40	; 0x28
 8005e1a:	2101      	movs	r1, #1
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f001 f9d5 	bl	80071cc <RCCEx_PLL3_Config>
 8005e22:	4603      	mov	r3, r0
 8005e24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005e28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e34:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e40:	2100      	movs	r1, #0
 8005e42:	6039      	str	r1, [r7, #0]
 8005e44:	f003 0320 	and.w	r3, r3, #32
 8005e48:	607b      	str	r3, [r7, #4]
 8005e4a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005e4e:	460b      	mov	r3, r1
 8005e50:	4313      	orrs	r3, r2
 8005e52:	d011      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e58:	3328      	adds	r3, #40	; 0x28
 8005e5a:	2102      	movs	r1, #2
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f001 f9b5 	bl	80071cc <RCCEx_PLL3_Config>
 8005e62:	4603      	mov	r3, r0
 8005e64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005e68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d003      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e74:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8005e78:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d101      	bne.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8005e80:	2300      	movs	r3, #0
 8005e82:	e000      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e92:	bf00      	nop
 8005e94:	58024400 	.word	0x58024400

08005e98 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b090      	sub	sp, #64	; 0x40
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005ea2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ea6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8005eaa:	430b      	orrs	r3, r1
 8005eac:	f040 8094 	bne.w	8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005eb0:	4b97      	ldr	r3, [pc, #604]	; (8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb4:	f003 0307 	and.w	r3, r3, #7
 8005eb8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	f200 8087 	bhi.w	8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005ec2:	a201      	add	r2, pc, #4	; (adr r2, 8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec8:	08005edd 	.word	0x08005edd
 8005ecc:	08005f05 	.word	0x08005f05
 8005ed0:	08005f2d 	.word	0x08005f2d
 8005ed4:	08005fc9 	.word	0x08005fc9
 8005ed8:	08005f55 	.word	0x08005f55
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005edc:	4b8c      	ldr	r3, [pc, #560]	; (8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ee4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ee8:	d108      	bne.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 ff68 	bl	8006dc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ef8:	f000 bc97 	b.w	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005efc:	2300      	movs	r3, #0
 8005efe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f00:	f000 bc93 	b.w	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f04:	4b82      	ldr	r3, [pc, #520]	; (8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f10:	d108      	bne.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f12:	f107 0318 	add.w	r3, r7, #24
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 fcac 	bl	8006874 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f20:	f000 bc83 	b.w	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005f24:	2300      	movs	r3, #0
 8005f26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f28:	f000 bc7f 	b.w	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f2c:	4b78      	ldr	r3, [pc, #480]	; (8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f38:	d108      	bne.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f3a:	f107 030c 	add.w	r3, r7, #12
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f000 fdec 	bl	8006b1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f48:	f000 bc6f 	b.w	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f50:	f000 bc6b 	b.w	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f54:	4b6e      	ldr	r3, [pc, #440]	; (8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f5c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f5e:	4b6c      	ldr	r3, [pc, #432]	; (8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0304 	and.w	r3, r3, #4
 8005f66:	2b04      	cmp	r3, #4
 8005f68:	d10c      	bne.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d109      	bne.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f70:	4b67      	ldr	r3, [pc, #412]	; (8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	08db      	lsrs	r3, r3, #3
 8005f76:	f003 0303 	and.w	r3, r3, #3
 8005f7a:	4a66      	ldr	r2, [pc, #408]	; (8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f82:	e01f      	b.n	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f84:	4b62      	ldr	r3, [pc, #392]	; (8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f90:	d106      	bne.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f98:	d102      	bne.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005f9a:	4b5f      	ldr	r3, [pc, #380]	; (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f9e:	e011      	b.n	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005fa0:	4b5b      	ldr	r3, [pc, #364]	; (8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fac:	d106      	bne.n	8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fb4:	d102      	bne.n	8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005fb6:	4b59      	ldr	r3, [pc, #356]	; (800611c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fba:	e003      	b.n	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005fc0:	f000 bc33 	b.w	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005fc4:	f000 bc31 	b.w	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005fc8:	4b55      	ldr	r3, [pc, #340]	; (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005fca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fcc:	f000 bc2d 	b.w	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fd4:	f000 bc29 	b.w	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8005fd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fdc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8005fe0:	430b      	orrs	r3, r1
 8005fe2:	f040 809f 	bne.w	8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8005fe6:	4b4a      	ldr	r3, [pc, #296]	; (8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fea:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005fee:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ff6:	d04d      	beq.n	8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ffe:	f200 8084 	bhi.w	800610a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8006002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006004:	2bc0      	cmp	r3, #192	; 0xc0
 8006006:	d07d      	beq.n	8006104 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8006008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600a:	2bc0      	cmp	r3, #192	; 0xc0
 800600c:	d87d      	bhi.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006010:	2b80      	cmp	r3, #128	; 0x80
 8006012:	d02d      	beq.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8006014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006016:	2b80      	cmp	r3, #128	; 0x80
 8006018:	d877      	bhi.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800601a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8006020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006022:	2b40      	cmp	r3, #64	; 0x40
 8006024:	d012      	beq.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8006026:	e070      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006028:	4b39      	ldr	r3, [pc, #228]	; (8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006030:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006034:	d107      	bne.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800603a:	4618      	mov	r0, r3
 800603c:	f000 fec2 	bl	8006dc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006042:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006044:	e3f1      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006046:	2300      	movs	r3, #0
 8006048:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800604a:	e3ee      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800604c:	4b30      	ldr	r3, [pc, #192]	; (8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006054:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006058:	d107      	bne.n	800606a <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800605a:	f107 0318 	add.w	r3, r7, #24
 800605e:	4618      	mov	r0, r3
 8006060:	f000 fc08 	bl	8006874 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006068:	e3df      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800606a:	2300      	movs	r3, #0
 800606c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800606e:	e3dc      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006070:	4b27      	ldr	r3, [pc, #156]	; (8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800607c:	d107      	bne.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800607e:	f107 030c 	add.w	r3, r7, #12
 8006082:	4618      	mov	r0, r3
 8006084:	f000 fd4a 	bl	8006b1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800608c:	e3cd      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800608e:	2300      	movs	r3, #0
 8006090:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006092:	e3ca      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006094:	4b1e      	ldr	r3, [pc, #120]	; (8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006098:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800609c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800609e:	4b1c      	ldr	r3, [pc, #112]	; (8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0304 	and.w	r3, r3, #4
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	d10c      	bne.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80060aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d109      	bne.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060b0:	4b17      	ldr	r3, [pc, #92]	; (8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	08db      	lsrs	r3, r3, #3
 80060b6:	f003 0303 	and.w	r3, r3, #3
 80060ba:	4a16      	ldr	r2, [pc, #88]	; (8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80060bc:	fa22 f303 	lsr.w	r3, r2, r3
 80060c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060c2:	e01e      	b.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80060c4:	4b12      	ldr	r3, [pc, #72]	; (8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060d0:	d106      	bne.n	80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 80060d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060d8:	d102      	bne.n	80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80060da:	4b0f      	ldr	r3, [pc, #60]	; (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80060dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060de:	e010      	b.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80060e0:	4b0b      	ldr	r3, [pc, #44]	; (8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060ec:	d106      	bne.n	80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80060ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060f4:	d102      	bne.n	80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80060f6:	4b09      	ldr	r3, [pc, #36]	; (800611c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80060f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060fa:	e002      	b.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80060fc:	2300      	movs	r3, #0
 80060fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006100:	e393      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006102:	e392      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006104:	4b06      	ldr	r3, [pc, #24]	; (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006106:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006108:	e38f      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800610a:	2300      	movs	r3, #0
 800610c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800610e:	e38c      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006110:	58024400 	.word	0x58024400
 8006114:	03d09000 	.word	0x03d09000
 8006118:	003d0900 	.word	0x003d0900
 800611c:	007a1200 	.word	0x007a1200
 8006120:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8006124:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006128:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800612c:	430b      	orrs	r3, r1
 800612e:	f040 809c 	bne.w	800626a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8006132:	4b9e      	ldr	r3, [pc, #632]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006136:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800613a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800613c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006142:	d054      	beq.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8006144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006146:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800614a:	f200 808b 	bhi.w	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800614e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006150:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006154:	f000 8083 	beq.w	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8006158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800615e:	f200 8081 	bhi.w	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006168:	d02f      	beq.n	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800616a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006170:	d878      	bhi.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006174:	2b00      	cmp	r3, #0
 8006176:	d004      	beq.n	8006182 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8006178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800617e:	d012      	beq.n	80061a6 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8006180:	e070      	b.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006182:	4b8a      	ldr	r3, [pc, #552]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800618a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800618e:	d107      	bne.n	80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006194:	4618      	mov	r0, r3
 8006196:	f000 fe15 	bl	8006dc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800619e:	e344      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80061a0:	2300      	movs	r3, #0
 80061a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061a4:	e341      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061a6:	4b81      	ldr	r3, [pc, #516]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061b2:	d107      	bne.n	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061b4:	f107 0318 	add.w	r3, r7, #24
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 fb5b 	bl	8006874 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061c2:	e332      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80061c4:	2300      	movs	r3, #0
 80061c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061c8:	e32f      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80061ca:	4b78      	ldr	r3, [pc, #480]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061d6:	d107      	bne.n	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061d8:	f107 030c 	add.w	r3, r7, #12
 80061dc:	4618      	mov	r0, r3
 80061de:	f000 fc9d 	bl	8006b1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061e6:	e320      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80061e8:	2300      	movs	r3, #0
 80061ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061ec:	e31d      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80061ee:	4b6f      	ldr	r3, [pc, #444]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80061f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80061f6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80061f8:	4b6c      	ldr	r3, [pc, #432]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0304 	and.w	r3, r3, #4
 8006200:	2b04      	cmp	r3, #4
 8006202:	d10c      	bne.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8006204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006206:	2b00      	cmp	r3, #0
 8006208:	d109      	bne.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800620a:	4b68      	ldr	r3, [pc, #416]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	08db      	lsrs	r3, r3, #3
 8006210:	f003 0303 	and.w	r3, r3, #3
 8006214:	4a66      	ldr	r2, [pc, #408]	; (80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8006216:	fa22 f303 	lsr.w	r3, r2, r3
 800621a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800621c:	e01e      	b.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800621e:	4b63      	ldr	r3, [pc, #396]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800622a:	d106      	bne.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800622c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800622e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006232:	d102      	bne.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006234:	4b5f      	ldr	r3, [pc, #380]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8006236:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006238:	e010      	b.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800623a:	4b5c      	ldr	r3, [pc, #368]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006242:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006246:	d106      	bne.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800624a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800624e:	d102      	bne.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006250:	4b59      	ldr	r3, [pc, #356]	; (80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8006252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006254:	e002      	b.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006256:	2300      	movs	r3, #0
 8006258:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 800625a:	e2e6      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800625c:	e2e5      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800625e:	4b57      	ldr	r3, [pc, #348]	; (80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006260:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006262:	e2e2      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006264:	2300      	movs	r3, #0
 8006266:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006268:	e2df      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800626a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800626e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006272:	430b      	orrs	r3, r1
 8006274:	f040 80a7 	bne.w	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006278:	4b4c      	ldr	r3, [pc, #304]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800627a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800627c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006280:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006284:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006288:	d055      	beq.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800628a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006290:	f200 8096 	bhi.w	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006296:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800629a:	f000 8084 	beq.w	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800629e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062a4:	f200 808c 	bhi.w	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80062a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ae:	d030      	beq.n	8006312 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 80062b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062b6:	f200 8083 	bhi.w	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80062ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d004      	beq.n	80062ca <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80062c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062c6:	d012      	beq.n	80062ee <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 80062c8:	e07a      	b.n	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80062ca:	4b38      	ldr	r3, [pc, #224]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062d6:	d107      	bne.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80062d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062dc:	4618      	mov	r0, r3
 80062de:	f000 fd71 	bl	8006dc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80062e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80062e6:	e2a0      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80062e8:	2300      	movs	r3, #0
 80062ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062ec:	e29d      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80062ee:	4b2f      	ldr	r3, [pc, #188]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062fa:	d107      	bne.n	800630c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062fc:	f107 0318 	add.w	r3, r7, #24
 8006300:	4618      	mov	r0, r3
 8006302:	f000 fab7 	bl	8006874 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800630a:	e28e      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800630c:	2300      	movs	r3, #0
 800630e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006310:	e28b      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006312:	4b26      	ldr	r3, [pc, #152]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800631a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800631e:	d107      	bne.n	8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006320:	f107 030c 	add.w	r3, r7, #12
 8006324:	4618      	mov	r0, r3
 8006326:	f000 fbf9 	bl	8006b1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800632e:	e27c      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006330:	2300      	movs	r3, #0
 8006332:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006334:	e279      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006336:	4b1d      	ldr	r3, [pc, #116]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800633a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800633e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006340:	4b1a      	ldr	r3, [pc, #104]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	2b04      	cmp	r3, #4
 800634a:	d10c      	bne.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800634c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800634e:	2b00      	cmp	r3, #0
 8006350:	d109      	bne.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006352:	4b16      	ldr	r3, [pc, #88]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	08db      	lsrs	r3, r3, #3
 8006358:	f003 0303 	and.w	r3, r3, #3
 800635c:	4a14      	ldr	r2, [pc, #80]	; (80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800635e:	fa22 f303 	lsr.w	r3, r2, r3
 8006362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006364:	e01e      	b.n	80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006366:	4b11      	ldr	r3, [pc, #68]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800636e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006372:	d106      	bne.n	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006376:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800637a:	d102      	bne.n	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800637c:	4b0d      	ldr	r3, [pc, #52]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800637e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006380:	e010      	b.n	80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006382:	4b0a      	ldr	r3, [pc, #40]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800638a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800638e:	d106      	bne.n	800639e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006392:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006396:	d102      	bne.n	800639e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006398:	4b07      	ldr	r3, [pc, #28]	; (80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800639a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800639c:	e002      	b.n	80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800639e:	2300      	movs	r3, #0
 80063a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80063a2:	e242      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80063a4:	e241      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80063a6:	4b05      	ldr	r3, [pc, #20]	; (80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80063a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063aa:	e23e      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80063ac:	58024400 	.word	0x58024400
 80063b0:	03d09000 	.word	0x03d09000
 80063b4:	003d0900 	.word	0x003d0900
 80063b8:	007a1200 	.word	0x007a1200
 80063bc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80063c0:	2300      	movs	r3, #0
 80063c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063c4:	e231      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80063c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063ca:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80063ce:	430b      	orrs	r3, r1
 80063d0:	f040 8085 	bne.w	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80063d4:	4b9c      	ldr	r3, [pc, #624]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80063d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80063dc:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80063de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063e4:	d06b      	beq.n	80064be <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80063e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063ec:	d874      	bhi.n	80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80063ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063f4:	d056      	beq.n	80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 80063f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063fc:	d86c      	bhi.n	80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80063fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006400:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006404:	d03b      	beq.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8006406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006408:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800640c:	d864      	bhi.n	80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800640e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006410:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006414:	d021      	beq.n	800645a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8006416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006418:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800641c:	d85c      	bhi.n	80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800641e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006420:	2b00      	cmp	r3, #0
 8006422:	d004      	beq.n	800642e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8006424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800642a:	d004      	beq.n	8006436 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800642c:	e054      	b.n	80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800642e:	f7fe fb49 	bl	8004ac4 <HAL_RCC_GetPCLK1Freq>
 8006432:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006434:	e1f9      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006436:	4b84      	ldr	r3, [pc, #528]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800643e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006442:	d107      	bne.n	8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006444:	f107 0318 	add.w	r3, r7, #24
 8006448:	4618      	mov	r0, r3
 800644a:	f000 fa13 	bl	8006874 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006452:	e1ea      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006454:	2300      	movs	r3, #0
 8006456:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006458:	e1e7      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800645a:	4b7b      	ldr	r3, [pc, #492]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006462:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006466:	d107      	bne.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006468:	f107 030c 	add.w	r3, r7, #12
 800646c:	4618      	mov	r0, r3
 800646e:	f000 fb55 	bl	8006b1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006476:	e1d8      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006478:	2300      	movs	r3, #0
 800647a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800647c:	e1d5      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800647e:	4b72      	ldr	r3, [pc, #456]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0304 	and.w	r3, r3, #4
 8006486:	2b04      	cmp	r3, #4
 8006488:	d109      	bne.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800648a:	4b6f      	ldr	r3, [pc, #444]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	08db      	lsrs	r3, r3, #3
 8006490:	f003 0303 	and.w	r3, r3, #3
 8006494:	4a6d      	ldr	r2, [pc, #436]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006496:	fa22 f303 	lsr.w	r3, r2, r3
 800649a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800649c:	e1c5      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800649e:	2300      	movs	r3, #0
 80064a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064a2:	e1c2      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80064a4:	4b68      	ldr	r3, [pc, #416]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064b0:	d102      	bne.n	80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 80064b2:	4b67      	ldr	r3, [pc, #412]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80064b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064b6:	e1b8      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80064b8:	2300      	movs	r3, #0
 80064ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064bc:	e1b5      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80064be:	4b62      	ldr	r3, [pc, #392]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064ca:	d102      	bne.n	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 80064cc:	4b61      	ldr	r3, [pc, #388]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80064ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064d0:	e1ab      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80064d2:	2300      	movs	r3, #0
 80064d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064d6:	e1a8      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80064d8:	2300      	movs	r3, #0
 80064da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064dc:	e1a5      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80064de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064e2:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80064e6:	430b      	orrs	r3, r1
 80064e8:	d173      	bne.n	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80064ea:	4b57      	ldr	r3, [pc, #348]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80064ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064f2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80064f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064fa:	d02f      	beq.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 80064fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006502:	d863      	bhi.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8006504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006506:	2b00      	cmp	r3, #0
 8006508:	d004      	beq.n	8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800650a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006510:	d012      	beq.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8006512:	e05b      	b.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006514:	4b4c      	ldr	r3, [pc, #304]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800651c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006520:	d107      	bne.n	8006532 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006522:	f107 0318 	add.w	r3, r7, #24
 8006526:	4618      	mov	r0, r3
 8006528:	f000 f9a4 	bl	8006874 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006530:	e17b      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006532:	2300      	movs	r3, #0
 8006534:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006536:	e178      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006538:	4b43      	ldr	r3, [pc, #268]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006544:	d107      	bne.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006546:	f107 030c 	add.w	r3, r7, #12
 800654a:	4618      	mov	r0, r3
 800654c:	f000 fae6 	bl	8006b1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006554:	e169      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006556:	2300      	movs	r3, #0
 8006558:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800655a:	e166      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800655c:	4b3a      	ldr	r3, [pc, #232]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800655e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006560:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006564:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006566:	4b38      	ldr	r3, [pc, #224]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0304 	and.w	r3, r3, #4
 800656e:	2b04      	cmp	r3, #4
 8006570:	d10c      	bne.n	800658c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8006572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006574:	2b00      	cmp	r3, #0
 8006576:	d109      	bne.n	800658c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006578:	4b33      	ldr	r3, [pc, #204]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	08db      	lsrs	r3, r3, #3
 800657e:	f003 0303 	and.w	r3, r3, #3
 8006582:	4a32      	ldr	r2, [pc, #200]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006584:	fa22 f303 	lsr.w	r3, r2, r3
 8006588:	63fb      	str	r3, [r7, #60]	; 0x3c
 800658a:	e01e      	b.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800658c:	4b2e      	ldr	r3, [pc, #184]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006598:	d106      	bne.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800659a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800659c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065a0:	d102      	bne.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80065a2:	4b2b      	ldr	r3, [pc, #172]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80065a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065a6:	e010      	b.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80065a8:	4b27      	ldr	r3, [pc, #156]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065b4:	d106      	bne.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80065b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065bc:	d102      	bne.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80065be:	4b25      	ldr	r3, [pc, #148]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80065c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065c2:	e002      	b.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80065c4:	2300      	movs	r3, #0
 80065c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80065c8:	e12f      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80065ca:	e12e      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80065cc:	2300      	movs	r3, #0
 80065ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065d0:	e12b      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80065d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065d6:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80065da:	430b      	orrs	r3, r1
 80065dc:	d13c      	bne.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80065de:	4b1a      	ldr	r3, [pc, #104]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80065e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065e6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80065e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d004      	beq.n	80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 80065ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065f4:	d012      	beq.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80065f6:	e023      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065f8:	4b13      	ldr	r3, [pc, #76]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006600:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006604:	d107      	bne.n	8006616 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800660a:	4618      	mov	r0, r3
 800660c:	f000 fbda 	bl	8006dc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006612:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006614:	e109      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006616:	2300      	movs	r3, #0
 8006618:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800661a:	e106      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800661c:	4b0a      	ldr	r3, [pc, #40]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006624:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006628:	d107      	bne.n	800663a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800662a:	f107 0318 	add.w	r3, r7, #24
 800662e:	4618      	mov	r0, r3
 8006630:	f000 f920 	bl	8006874 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006634:	6a3b      	ldr	r3, [r7, #32]
 8006636:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006638:	e0f7      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800663a:	2300      	movs	r3, #0
 800663c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800663e:	e0f4      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006640:	2300      	movs	r3, #0
 8006642:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006644:	e0f1      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006646:	bf00      	nop
 8006648:	58024400 	.word	0x58024400
 800664c:	03d09000 	.word	0x03d09000
 8006650:	003d0900 	.word	0x003d0900
 8006654:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006658:	e9d7 2300 	ldrd	r2, r3, [r7]
 800665c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006660:	430b      	orrs	r3, r1
 8006662:	f040 8091 	bne.w	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006666:	4b73      	ldr	r3, [pc, #460]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800666a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800666e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006672:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006676:	f000 8081 	beq.w	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800667a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006680:	d87f      	bhi.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006684:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006688:	d06b      	beq.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800668a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006690:	d877      	bhi.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006698:	d056      	beq.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800669a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a0:	d86f      	bhi.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80066a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066a8:	d03b      	beq.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80066aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066b0:	d867      	bhi.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80066b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066b8:	d021      	beq.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80066ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066c0:	d85f      	bhi.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80066c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d004      	beq.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80066c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066ce:	d004      	beq.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80066d0:	e057      	b.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80066d2:	f000 f8b9 	bl	8006848 <HAL_RCCEx_GetD3PCLK1Freq>
 80066d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80066d8:	e0a7      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066da:	4b56      	ldr	r3, [pc, #344]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066e6:	d107      	bne.n	80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066e8:	f107 0318 	add.w	r3, r7, #24
 80066ec:	4618      	mov	r0, r3
 80066ee:	f000 f8c1 	bl	8006874 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066f6:	e098      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80066f8:	2300      	movs	r3, #0
 80066fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066fc:	e095      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80066fe:	4b4d      	ldr	r3, [pc, #308]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006706:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800670a:	d107      	bne.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800670c:	f107 030c 	add.w	r3, r7, #12
 8006710:	4618      	mov	r0, r3
 8006712:	f000 fa03 	bl	8006b1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800671a:	e086      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800671c:	2300      	movs	r3, #0
 800671e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006720:	e083      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006722:	4b44      	ldr	r3, [pc, #272]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0304 	and.w	r3, r3, #4
 800672a:	2b04      	cmp	r3, #4
 800672c:	d109      	bne.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800672e:	4b41      	ldr	r3, [pc, #260]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	08db      	lsrs	r3, r3, #3
 8006734:	f003 0303 	and.w	r3, r3, #3
 8006738:	4a3f      	ldr	r2, [pc, #252]	; (8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800673a:	fa22 f303 	lsr.w	r3, r2, r3
 800673e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006740:	e073      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006742:	2300      	movs	r3, #0
 8006744:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006746:	e070      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006748:	4b3a      	ldr	r3, [pc, #232]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006754:	d102      	bne.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8006756:	4b39      	ldr	r3, [pc, #228]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8006758:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800675a:	e066      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800675c:	2300      	movs	r3, #0
 800675e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006760:	e063      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006762:	4b34      	ldr	r3, [pc, #208]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800676a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800676e:	d102      	bne.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8006770:	4b33      	ldr	r3, [pc, #204]	; (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006772:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006774:	e059      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006776:	2300      	movs	r3, #0
 8006778:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800677a:	e056      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800677c:	4b31      	ldr	r3, [pc, #196]	; (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800677e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006780:	e053      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006782:	2300      	movs	r3, #0
 8006784:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006786:	e050      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006788:	e9d7 2300 	ldrd	r2, r3, [r7]
 800678c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006790:	430b      	orrs	r3, r1
 8006792:	d148      	bne.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006794:	4b27      	ldr	r3, [pc, #156]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006798:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800679c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800679e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067a4:	d02a      	beq.n	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80067a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067ac:	d838      	bhi.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80067ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d004      	beq.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80067b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067ba:	d00d      	beq.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80067bc:	e030      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80067be:	4b1d      	ldr	r3, [pc, #116]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067ca:	d102      	bne.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 80067cc:	4b1c      	ldr	r3, [pc, #112]	; (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80067ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067d0:	e02b      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80067d2:	2300      	movs	r3, #0
 80067d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067d6:	e028      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80067d8:	4b16      	ldr	r3, [pc, #88]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067e4:	d107      	bne.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 faea 	bl	8006dc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067f4:	e019      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80067f6:	2300      	movs	r3, #0
 80067f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067fa:	e016      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067fc:	4b0d      	ldr	r3, [pc, #52]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006804:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006808:	d107      	bne.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800680a:	f107 0318 	add.w	r3, r7, #24
 800680e:	4618      	mov	r0, r3
 8006810:	f000 f830 	bl	8006874 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006818:	e007      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800681a:	2300      	movs	r3, #0
 800681c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800681e:	e004      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8006820:	2300      	movs	r3, #0
 8006822:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006824:	e001      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8006826:	2300      	movs	r3, #0
 8006828:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800682a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800682c:	4618      	mov	r0, r3
 800682e:	3740      	adds	r7, #64	; 0x40
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	58024400 	.word	0x58024400
 8006838:	03d09000 	.word	0x03d09000
 800683c:	003d0900 	.word	0x003d0900
 8006840:	007a1200 	.word	0x007a1200
 8006844:	00bb8000 	.word	0x00bb8000

08006848 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800684c:	f7fe f90a 	bl	8004a64 <HAL_RCC_GetHCLKFreq>
 8006850:	4602      	mov	r2, r0
 8006852:	4b06      	ldr	r3, [pc, #24]	; (800686c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	091b      	lsrs	r3, r3, #4
 8006858:	f003 0307 	and.w	r3, r3, #7
 800685c:	4904      	ldr	r1, [pc, #16]	; (8006870 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800685e:	5ccb      	ldrb	r3, [r1, r3]
 8006860:	f003 031f 	and.w	r3, r3, #31
 8006864:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006868:	4618      	mov	r0, r3
 800686a:	bd80      	pop	{r7, pc}
 800686c:	58024400 	.word	0x58024400
 8006870:	0800b144 	.word	0x0800b144

08006874 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006874:	b480      	push	{r7}
 8006876:	b089      	sub	sp, #36	; 0x24
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800687c:	4ba1      	ldr	r3, [pc, #644]	; (8006b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800687e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006880:	f003 0303 	and.w	r3, r3, #3
 8006884:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006886:	4b9f      	ldr	r3, [pc, #636]	; (8006b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688a:	0b1b      	lsrs	r3, r3, #12
 800688c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006890:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006892:	4b9c      	ldr	r3, [pc, #624]	; (8006b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006896:	091b      	lsrs	r3, r3, #4
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800689e:	4b99      	ldr	r3, [pc, #612]	; (8006b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068a2:	08db      	lsrs	r3, r3, #3
 80068a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	fb02 f303 	mul.w	r3, r2, r3
 80068ae:	ee07 3a90 	vmov	s15, r3
 80068b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 8111 	beq.w	8006ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	f000 8083 	beq.w	80069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	f200 80a1 	bhi.w	8006a14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d003      	beq.n	80068e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d056      	beq.n	800698c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80068de:	e099      	b.n	8006a14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068e0:	4b88      	ldr	r3, [pc, #544]	; (8006b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0320 	and.w	r3, r3, #32
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d02d      	beq.n	8006948 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068ec:	4b85      	ldr	r3, [pc, #532]	; (8006b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	08db      	lsrs	r3, r3, #3
 80068f2:	f003 0303 	and.w	r3, r3, #3
 80068f6:	4a84      	ldr	r2, [pc, #528]	; (8006b08 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80068f8:	fa22 f303 	lsr.w	r3, r2, r3
 80068fc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	ee07 3a90 	vmov	s15, r3
 8006904:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	ee07 3a90 	vmov	s15, r3
 800690e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006916:	4b7b      	ldr	r3, [pc, #492]	; (8006b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800691e:	ee07 3a90 	vmov	s15, r3
 8006922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006926:	ed97 6a03 	vldr	s12, [r7, #12]
 800692a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800692e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800693a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800693e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006942:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006946:	e087      	b.n	8006a58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	ee07 3a90 	vmov	s15, r3
 800694e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006952:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006b10 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800695a:	4b6a      	ldr	r3, [pc, #424]	; (8006b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800695c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006962:	ee07 3a90 	vmov	s15, r3
 8006966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800696a:	ed97 6a03 	vldr	s12, [r7, #12]
 800696e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800697a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800697e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006986:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800698a:	e065      	b.n	8006a58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	ee07 3a90 	vmov	s15, r3
 8006992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006996:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006b14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800699a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800699e:	4b59      	ldr	r3, [pc, #356]	; (8006b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069a6:	ee07 3a90 	vmov	s15, r3
 80069aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80069b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069ce:	e043      	b.n	8006a58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	ee07 3a90 	vmov	s15, r3
 80069d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006b18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80069de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069e2:	4b48      	ldr	r3, [pc, #288]	; (8006b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ea:	ee07 3a90 	vmov	s15, r3
 80069ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80069f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a12:	e021      	b.n	8006a58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	ee07 3a90 	vmov	s15, r3
 8006a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a1e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006b14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a26:	4b37      	ldr	r3, [pc, #220]	; (8006b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a2e:	ee07 3a90 	vmov	s15, r3
 8006a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a36:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a3a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a56:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006a58:	4b2a      	ldr	r3, [pc, #168]	; (8006b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5c:	0a5b      	lsrs	r3, r3, #9
 8006a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a62:	ee07 3a90 	vmov	s15, r3
 8006a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a72:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a7e:	ee17 2a90 	vmov	r2, s15
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006a86:	4b1f      	ldr	r3, [pc, #124]	; (8006b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8a:	0c1b      	lsrs	r3, r3, #16
 8006a8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a90:	ee07 3a90 	vmov	s15, r3
 8006a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006aa0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006aa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006aa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006aac:	ee17 2a90 	vmov	r2, s15
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006ab4:	4b13      	ldr	r3, [pc, #76]	; (8006b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab8:	0e1b      	lsrs	r3, r3, #24
 8006aba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006abe:	ee07 3a90 	vmov	s15, r3
 8006ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ac6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006aca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ace:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ada:	ee17 2a90 	vmov	r2, s15
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006ae2:	e008      	b.n	8006af6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	609a      	str	r2, [r3, #8]
}
 8006af6:	bf00      	nop
 8006af8:	3724      	adds	r7, #36	; 0x24
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	58024400 	.word	0x58024400
 8006b08:	03d09000 	.word	0x03d09000
 8006b0c:	46000000 	.word	0x46000000
 8006b10:	4c742400 	.word	0x4c742400
 8006b14:	4a742400 	.word	0x4a742400
 8006b18:	4af42400 	.word	0x4af42400

08006b1c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b089      	sub	sp, #36	; 0x24
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b24:	4ba1      	ldr	r3, [pc, #644]	; (8006dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b28:	f003 0303 	and.w	r3, r3, #3
 8006b2c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006b2e:	4b9f      	ldr	r3, [pc, #636]	; (8006dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b32:	0d1b      	lsrs	r3, r3, #20
 8006b34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b38:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006b3a:	4b9c      	ldr	r3, [pc, #624]	; (8006dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3e:	0a1b      	lsrs	r3, r3, #8
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006b46:	4b99      	ldr	r3, [pc, #612]	; (8006dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b4a:	08db      	lsrs	r3, r3, #3
 8006b4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	fb02 f303 	mul.w	r3, r2, r3
 8006b56:	ee07 3a90 	vmov	s15, r3
 8006b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f000 8111 	beq.w	8006d8c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	f000 8083 	beq.w	8006c78 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	f200 80a1 	bhi.w	8006cbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d003      	beq.n	8006b88 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d056      	beq.n	8006c34 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006b86:	e099      	b.n	8006cbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b88:	4b88      	ldr	r3, [pc, #544]	; (8006dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0320 	and.w	r3, r3, #32
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d02d      	beq.n	8006bf0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b94:	4b85      	ldr	r3, [pc, #532]	; (8006dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	08db      	lsrs	r3, r3, #3
 8006b9a:	f003 0303 	and.w	r3, r3, #3
 8006b9e:	4a84      	ldr	r2, [pc, #528]	; (8006db0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	ee07 3a90 	vmov	s15, r3
 8006bac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	ee07 3a90 	vmov	s15, r3
 8006bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bbe:	4b7b      	ldr	r3, [pc, #492]	; (8006dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc6:	ee07 3a90 	vmov	s15, r3
 8006bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bd2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006bee:	e087      	b.n	8006d00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	ee07 3a90 	vmov	s15, r3
 8006bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bfa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006db8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c02:	4b6a      	ldr	r3, [pc, #424]	; (8006dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c0a:	ee07 3a90 	vmov	s15, r3
 8006c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c16:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c32:	e065      	b.n	8006d00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	ee07 3a90 	vmov	s15, r3
 8006c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c3e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006dbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c46:	4b59      	ldr	r3, [pc, #356]	; (8006dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c4e:	ee07 3a90 	vmov	s15, r3
 8006c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c5a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c76:	e043      	b.n	8006d00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	ee07 3a90 	vmov	s15, r3
 8006c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c82:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c8a:	4b48      	ldr	r3, [pc, #288]	; (8006dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c92:	ee07 3a90 	vmov	s15, r3
 8006c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c9e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006caa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cba:	e021      	b.n	8006d00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	ee07 3a90 	vmov	s15, r3
 8006cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006dbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cce:	4b37      	ldr	r3, [pc, #220]	; (8006dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd6:	ee07 3a90 	vmov	s15, r3
 8006cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cde:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ce2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cfe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006d00:	4b2a      	ldr	r3, [pc, #168]	; (8006dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d04:	0a5b      	lsrs	r3, r3, #9
 8006d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d0a:	ee07 3a90 	vmov	s15, r3
 8006d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d26:	ee17 2a90 	vmov	r2, s15
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006d2e:	4b1f      	ldr	r3, [pc, #124]	; (8006dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d32:	0c1b      	lsrs	r3, r3, #16
 8006d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d38:	ee07 3a90 	vmov	s15, r3
 8006d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d48:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d54:	ee17 2a90 	vmov	r2, s15
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006d5c:	4b13      	ldr	r3, [pc, #76]	; (8006dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d60:	0e1b      	lsrs	r3, r3, #24
 8006d62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d66:	ee07 3a90 	vmov	s15, r3
 8006d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d76:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d82:	ee17 2a90 	vmov	r2, s15
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006d8a:	e008      	b.n	8006d9e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	609a      	str	r2, [r3, #8]
}
 8006d9e:	bf00      	nop
 8006da0:	3724      	adds	r7, #36	; 0x24
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	58024400 	.word	0x58024400
 8006db0:	03d09000 	.word	0x03d09000
 8006db4:	46000000 	.word	0x46000000
 8006db8:	4c742400 	.word	0x4c742400
 8006dbc:	4a742400 	.word	0x4a742400
 8006dc0:	4af42400 	.word	0x4af42400

08006dc4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b089      	sub	sp, #36	; 0x24
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006dcc:	4ba0      	ldr	r3, [pc, #640]	; (8007050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd0:	f003 0303 	and.w	r3, r3, #3
 8006dd4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006dd6:	4b9e      	ldr	r3, [pc, #632]	; (8007050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dda:	091b      	lsrs	r3, r3, #4
 8006ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006de0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006de2:	4b9b      	ldr	r3, [pc, #620]	; (8007050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006dec:	4b98      	ldr	r3, [pc, #608]	; (8007050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df0:	08db      	lsrs	r3, r3, #3
 8006df2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	fb02 f303 	mul.w	r3, r2, r3
 8006dfc:	ee07 3a90 	vmov	s15, r3
 8006e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e04:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f000 8111 	beq.w	8007032 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	f000 8083 	beq.w	8006f1e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	f200 80a1 	bhi.w	8006f62 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d003      	beq.n	8006e2e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d056      	beq.n	8006eda <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006e2c:	e099      	b.n	8006f62 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e2e:	4b88      	ldr	r3, [pc, #544]	; (8007050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 0320 	and.w	r3, r3, #32
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d02d      	beq.n	8006e96 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e3a:	4b85      	ldr	r3, [pc, #532]	; (8007050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	08db      	lsrs	r3, r3, #3
 8006e40:	f003 0303 	and.w	r3, r3, #3
 8006e44:	4a83      	ldr	r2, [pc, #524]	; (8007054 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006e46:	fa22 f303 	lsr.w	r3, r2, r3
 8006e4a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	ee07 3a90 	vmov	s15, r3
 8006e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	ee07 3a90 	vmov	s15, r3
 8006e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e64:	4b7a      	ldr	r3, [pc, #488]	; (8007050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e6c:	ee07 3a90 	vmov	s15, r3
 8006e70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e74:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e78:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007058 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006e7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e90:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006e94:	e087      	b.n	8006fa6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	ee07 3a90 	vmov	s15, r3
 8006e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ea0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800705c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006ea4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ea8:	4b69      	ldr	r3, [pc, #420]	; (8007050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eb0:	ee07 3a90 	vmov	s15, r3
 8006eb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eb8:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ebc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007058 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006ec0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ec4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ec8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ecc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ed4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ed8:	e065      	b.n	8006fa6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	ee07 3a90 	vmov	s15, r3
 8006ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007060 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006ee8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eec:	4b58      	ldr	r3, [pc, #352]	; (8007050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ef4:	ee07 3a90 	vmov	s15, r3
 8006ef8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006efc:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f00:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007058 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006f04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f1c:	e043      	b.n	8006fa6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	ee07 3a90 	vmov	s15, r3
 8006f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f28:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007064 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006f2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f30:	4b47      	ldr	r3, [pc, #284]	; (8007050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f38:	ee07 3a90 	vmov	s15, r3
 8006f3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f40:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f44:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007058 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006f48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f60:	e021      	b.n	8006fa6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	ee07 3a90 	vmov	s15, r3
 8006f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f6c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800705c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006f70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f74:	4b36      	ldr	r3, [pc, #216]	; (8007050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f7c:	ee07 3a90 	vmov	s15, r3
 8006f80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f84:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f88:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007058 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006f8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fa0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fa4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006fa6:	4b2a      	ldr	r3, [pc, #168]	; (8007050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006faa:	0a5b      	lsrs	r3, r3, #9
 8006fac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fb0:	ee07 3a90 	vmov	s15, r3
 8006fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fcc:	ee17 2a90 	vmov	r2, s15
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006fd4:	4b1e      	ldr	r3, [pc, #120]	; (8007050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd8:	0c1b      	lsrs	r3, r3, #16
 8006fda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fde:	ee07 3a90 	vmov	s15, r3
 8006fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fe6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fee:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ff2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ff6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ffa:	ee17 2a90 	vmov	r2, s15
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007002:	4b13      	ldr	r3, [pc, #76]	; (8007050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007006:	0e1b      	lsrs	r3, r3, #24
 8007008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800700c:	ee07 3a90 	vmov	s15, r3
 8007010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007014:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007018:	ee37 7a87 	vadd.f32	s14, s15, s14
 800701c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007020:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007028:	ee17 2a90 	vmov	r2, s15
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007030:	e008      	b.n	8007044 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	609a      	str	r2, [r3, #8]
}
 8007044:	bf00      	nop
 8007046:	3724      	adds	r7, #36	; 0x24
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	58024400 	.word	0x58024400
 8007054:	03d09000 	.word	0x03d09000
 8007058:	46000000 	.word	0x46000000
 800705c:	4c742400 	.word	0x4c742400
 8007060:	4a742400 	.word	0x4a742400
 8007064:	4af42400 	.word	0x4af42400

08007068 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007076:	4b53      	ldr	r3, [pc, #332]	; (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707a:	f003 0303 	and.w	r3, r3, #3
 800707e:	2b03      	cmp	r3, #3
 8007080:	d101      	bne.n	8007086 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e099      	b.n	80071ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007086:	4b4f      	ldr	r3, [pc, #316]	; (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a4e      	ldr	r2, [pc, #312]	; (80071c4 <RCCEx_PLL2_Config+0x15c>)
 800708c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007090:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007092:	f7fa fbd5 	bl	8001840 <HAL_GetTick>
 8007096:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007098:	e008      	b.n	80070ac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800709a:	f7fa fbd1 	bl	8001840 <HAL_GetTick>
 800709e:	4602      	mov	r2, r0
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d901      	bls.n	80070ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e086      	b.n	80071ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80070ac:	4b45      	ldr	r3, [pc, #276]	; (80071c4 <RCCEx_PLL2_Config+0x15c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1f0      	bne.n	800709a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80070b8:	4b42      	ldr	r3, [pc, #264]	; (80071c4 <RCCEx_PLL2_Config+0x15c>)
 80070ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	031b      	lsls	r3, r3, #12
 80070c6:	493f      	ldr	r1, [pc, #252]	; (80071c4 <RCCEx_PLL2_Config+0x15c>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	628b      	str	r3, [r1, #40]	; 0x28
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	3b01      	subs	r3, #1
 80070d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	3b01      	subs	r3, #1
 80070dc:	025b      	lsls	r3, r3, #9
 80070de:	b29b      	uxth	r3, r3
 80070e0:	431a      	orrs	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	3b01      	subs	r3, #1
 80070e8:	041b      	lsls	r3, r3, #16
 80070ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80070ee:	431a      	orrs	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	3b01      	subs	r3, #1
 80070f6:	061b      	lsls	r3, r3, #24
 80070f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80070fc:	4931      	ldr	r1, [pc, #196]	; (80071c4 <RCCEx_PLL2_Config+0x15c>)
 80070fe:	4313      	orrs	r3, r2
 8007100:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007102:	4b30      	ldr	r3, [pc, #192]	; (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007106:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	492d      	ldr	r1, [pc, #180]	; (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007110:	4313      	orrs	r3, r2
 8007112:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007114:	4b2b      	ldr	r3, [pc, #172]	; (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007118:	f023 0220 	bic.w	r2, r3, #32
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	4928      	ldr	r1, [pc, #160]	; (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007122:	4313      	orrs	r3, r2
 8007124:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007126:	4b27      	ldr	r3, [pc, #156]	; (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712a:	4a26      	ldr	r2, [pc, #152]	; (80071c4 <RCCEx_PLL2_Config+0x15c>)
 800712c:	f023 0310 	bic.w	r3, r3, #16
 8007130:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007132:	4b24      	ldr	r3, [pc, #144]	; (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007134:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007136:	4b24      	ldr	r3, [pc, #144]	; (80071c8 <RCCEx_PLL2_Config+0x160>)
 8007138:	4013      	ands	r3, r2
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	69d2      	ldr	r2, [r2, #28]
 800713e:	00d2      	lsls	r2, r2, #3
 8007140:	4920      	ldr	r1, [pc, #128]	; (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007142:	4313      	orrs	r3, r2
 8007144:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007146:	4b1f      	ldr	r3, [pc, #124]	; (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714a:	4a1e      	ldr	r2, [pc, #120]	; (80071c4 <RCCEx_PLL2_Config+0x15c>)
 800714c:	f043 0310 	orr.w	r3, r3, #16
 8007150:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d106      	bne.n	8007166 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007158:	4b1a      	ldr	r3, [pc, #104]	; (80071c4 <RCCEx_PLL2_Config+0x15c>)
 800715a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715c:	4a19      	ldr	r2, [pc, #100]	; (80071c4 <RCCEx_PLL2_Config+0x15c>)
 800715e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007162:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007164:	e00f      	b.n	8007186 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d106      	bne.n	800717a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800716c:	4b15      	ldr	r3, [pc, #84]	; (80071c4 <RCCEx_PLL2_Config+0x15c>)
 800716e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007170:	4a14      	ldr	r2, [pc, #80]	; (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007172:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007176:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007178:	e005      	b.n	8007186 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800717a:	4b12      	ldr	r3, [pc, #72]	; (80071c4 <RCCEx_PLL2_Config+0x15c>)
 800717c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717e:	4a11      	ldr	r2, [pc, #68]	; (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007180:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007184:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007186:	4b0f      	ldr	r3, [pc, #60]	; (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a0e      	ldr	r2, [pc, #56]	; (80071c4 <RCCEx_PLL2_Config+0x15c>)
 800718c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007190:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007192:	f7fa fb55 	bl	8001840 <HAL_GetTick>
 8007196:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007198:	e008      	b.n	80071ac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800719a:	f7fa fb51 	bl	8001840 <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d901      	bls.n	80071ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e006      	b.n	80071ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071ac:	4b05      	ldr	r3, [pc, #20]	; (80071c4 <RCCEx_PLL2_Config+0x15c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d0f0      	beq.n	800719a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	58024400 	.word	0x58024400
 80071c8:	ffff0007 	.word	0xffff0007

080071cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071d6:	2300      	movs	r3, #0
 80071d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80071da:	4b53      	ldr	r3, [pc, #332]	; (8007328 <RCCEx_PLL3_Config+0x15c>)
 80071dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071de:	f003 0303 	and.w	r3, r3, #3
 80071e2:	2b03      	cmp	r3, #3
 80071e4:	d101      	bne.n	80071ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e099      	b.n	800731e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80071ea:	4b4f      	ldr	r3, [pc, #316]	; (8007328 <RCCEx_PLL3_Config+0x15c>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a4e      	ldr	r2, [pc, #312]	; (8007328 <RCCEx_PLL3_Config+0x15c>)
 80071f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071f6:	f7fa fb23 	bl	8001840 <HAL_GetTick>
 80071fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80071fc:	e008      	b.n	8007210 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80071fe:	f7fa fb1f 	bl	8001840 <HAL_GetTick>
 8007202:	4602      	mov	r2, r0
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	2b02      	cmp	r3, #2
 800720a:	d901      	bls.n	8007210 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e086      	b.n	800731e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007210:	4b45      	ldr	r3, [pc, #276]	; (8007328 <RCCEx_PLL3_Config+0x15c>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1f0      	bne.n	80071fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800721c:	4b42      	ldr	r3, [pc, #264]	; (8007328 <RCCEx_PLL3_Config+0x15c>)
 800721e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007220:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	051b      	lsls	r3, r3, #20
 800722a:	493f      	ldr	r1, [pc, #252]	; (8007328 <RCCEx_PLL3_Config+0x15c>)
 800722c:	4313      	orrs	r3, r2
 800722e:	628b      	str	r3, [r1, #40]	; 0x28
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	3b01      	subs	r3, #1
 8007236:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	3b01      	subs	r3, #1
 8007240:	025b      	lsls	r3, r3, #9
 8007242:	b29b      	uxth	r3, r3
 8007244:	431a      	orrs	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	3b01      	subs	r3, #1
 800724c:	041b      	lsls	r3, r3, #16
 800724e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007252:	431a      	orrs	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	3b01      	subs	r3, #1
 800725a:	061b      	lsls	r3, r3, #24
 800725c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007260:	4931      	ldr	r1, [pc, #196]	; (8007328 <RCCEx_PLL3_Config+0x15c>)
 8007262:	4313      	orrs	r3, r2
 8007264:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007266:	4b30      	ldr	r3, [pc, #192]	; (8007328 <RCCEx_PLL3_Config+0x15c>)
 8007268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	492d      	ldr	r1, [pc, #180]	; (8007328 <RCCEx_PLL3_Config+0x15c>)
 8007274:	4313      	orrs	r3, r2
 8007276:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007278:	4b2b      	ldr	r3, [pc, #172]	; (8007328 <RCCEx_PLL3_Config+0x15c>)
 800727a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	4928      	ldr	r1, [pc, #160]	; (8007328 <RCCEx_PLL3_Config+0x15c>)
 8007286:	4313      	orrs	r3, r2
 8007288:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800728a:	4b27      	ldr	r3, [pc, #156]	; (8007328 <RCCEx_PLL3_Config+0x15c>)
 800728c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728e:	4a26      	ldr	r2, [pc, #152]	; (8007328 <RCCEx_PLL3_Config+0x15c>)
 8007290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007294:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007296:	4b24      	ldr	r3, [pc, #144]	; (8007328 <RCCEx_PLL3_Config+0x15c>)
 8007298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800729a:	4b24      	ldr	r3, [pc, #144]	; (800732c <RCCEx_PLL3_Config+0x160>)
 800729c:	4013      	ands	r3, r2
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	69d2      	ldr	r2, [r2, #28]
 80072a2:	00d2      	lsls	r2, r2, #3
 80072a4:	4920      	ldr	r1, [pc, #128]	; (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80072aa:	4b1f      	ldr	r3, [pc, #124]	; (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ae:	4a1e      	ldr	r2, [pc, #120]	; (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d106      	bne.n	80072ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80072bc:	4b1a      	ldr	r3, [pc, #104]	; (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c0:	4a19      	ldr	r2, [pc, #100]	; (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80072c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80072c8:	e00f      	b.n	80072ea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d106      	bne.n	80072de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80072d0:	4b15      	ldr	r3, [pc, #84]	; (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d4:	4a14      	ldr	r2, [pc, #80]	; (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80072da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80072dc:	e005      	b.n	80072ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80072de:	4b12      	ldr	r3, [pc, #72]	; (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e2:	4a11      	ldr	r2, [pc, #68]	; (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80072ea:	4b0f      	ldr	r3, [pc, #60]	; (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a0e      	ldr	r2, [pc, #56]	; (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072f6:	f7fa faa3 	bl	8001840 <HAL_GetTick>
 80072fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80072fc:	e008      	b.n	8007310 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80072fe:	f7fa fa9f 	bl	8001840 <HAL_GetTick>
 8007302:	4602      	mov	r2, r0
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	2b02      	cmp	r3, #2
 800730a:	d901      	bls.n	8007310 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e006      	b.n	800731e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007310:	4b05      	ldr	r3, [pc, #20]	; (8007328 <RCCEx_PLL3_Config+0x15c>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007318:	2b00      	cmp	r3, #0
 800731a:	d0f0      	beq.n	80072fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800731c:	7bfb      	ldrb	r3, [r7, #15]
}
 800731e:	4618      	mov	r0, r3
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	58024400 	.word	0x58024400
 800732c:	ffff0007 	.word	0xffff0007

08007330 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d101      	bne.n	8007342 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e049      	b.n	80073d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b00      	cmp	r3, #0
 800734c:	d106      	bne.n	800735c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f7f9 fff6 	bl	8001348 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2202      	movs	r2, #2
 8007360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	3304      	adds	r3, #4
 800736c:	4619      	mov	r1, r3
 800736e:	4610      	mov	r0, r2
 8007370:	f000 fb26 	bl	80079c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3708      	adds	r7, #8
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
	...

080073e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d101      	bne.n	80073f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e08f      	b.n	8007514 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d106      	bne.n	800740e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f7f9 ff4d 	bl	80012a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2202      	movs	r2, #2
 8007412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	6899      	ldr	r1, [r3, #8]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	4b3e      	ldr	r3, [pc, #248]	; (800751c <HAL_TIM_Encoder_Init+0x13c>)
 8007422:	400b      	ands	r3, r1
 8007424:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	3304      	adds	r3, #4
 800742e:	4619      	mov	r1, r3
 8007430:	4610      	mov	r0, r2
 8007432:	f000 fac5 	bl	80079c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	6a1b      	ldr	r3, [r3, #32]
 800744c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	4313      	orrs	r3, r2
 8007456:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	4b31      	ldr	r3, [pc, #196]	; (8007520 <HAL_TIM_Encoder_Init+0x140>)
 800745c:	4013      	ands	r3, r2
 800745e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	689a      	ldr	r2, [r3, #8]
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	021b      	lsls	r3, r3, #8
 800746a:	4313      	orrs	r3, r2
 800746c:	693a      	ldr	r2, [r7, #16]
 800746e:	4313      	orrs	r3, r2
 8007470:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	4b2b      	ldr	r3, [pc, #172]	; (8007524 <HAL_TIM_Encoder_Init+0x144>)
 8007476:	4013      	ands	r3, r2
 8007478:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	4b2a      	ldr	r3, [pc, #168]	; (8007528 <HAL_TIM_Encoder_Init+0x148>)
 800747e:	4013      	ands	r3, r2
 8007480:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	68da      	ldr	r2, [r3, #12]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	69db      	ldr	r3, [r3, #28]
 800748a:	021b      	lsls	r3, r3, #8
 800748c:	4313      	orrs	r3, r2
 800748e:	693a      	ldr	r2, [r7, #16]
 8007490:	4313      	orrs	r3, r2
 8007492:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	011a      	lsls	r2, r3, #4
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	031b      	lsls	r3, r3, #12
 80074a0:	4313      	orrs	r3, r2
 80074a2:	693a      	ldr	r2, [r7, #16]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80074ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80074b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	685a      	ldr	r2, [r3, #4]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	695b      	ldr	r3, [r3, #20]
 80074c0:	011b      	lsls	r3, r3, #4
 80074c2:	4313      	orrs	r3, r2
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	697a      	ldr	r2, [r7, #20]
 80074d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	693a      	ldr	r2, [r7, #16]
 80074d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3718      	adds	r7, #24
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	fffebff8 	.word	0xfffebff8
 8007520:	fffffcfc 	.word	0xfffffcfc
 8007524:	fffff3f3 	.word	0xfffff3f3
 8007528:	ffff0f0f 	.word	0xffff0f0f

0800752c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	f003 0302 	and.w	r3, r3, #2
 800753e:	2b02      	cmp	r3, #2
 8007540:	d122      	bne.n	8007588 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	f003 0302 	and.w	r3, r3, #2
 800754c:	2b02      	cmp	r3, #2
 800754e:	d11b      	bne.n	8007588 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f06f 0202 	mvn.w	r2, #2
 8007558:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	f003 0303 	and.w	r3, r3, #3
 800756a:	2b00      	cmp	r3, #0
 800756c:	d003      	beq.n	8007576 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fa08 	bl	8007984 <HAL_TIM_IC_CaptureCallback>
 8007574:	e005      	b.n	8007582 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f9fa 	bl	8007970 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 fa0b 	bl	8007998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	f003 0304 	and.w	r3, r3, #4
 8007592:	2b04      	cmp	r3, #4
 8007594:	d122      	bne.n	80075dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	f003 0304 	and.w	r3, r3, #4
 80075a0:	2b04      	cmp	r3, #4
 80075a2:	d11b      	bne.n	80075dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f06f 0204 	mvn.w	r2, #4
 80075ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2202      	movs	r2, #2
 80075b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d003      	beq.n	80075ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f9de 	bl	8007984 <HAL_TIM_IC_CaptureCallback>
 80075c8:	e005      	b.n	80075d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f9d0 	bl	8007970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f9e1 	bl	8007998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	f003 0308 	and.w	r3, r3, #8
 80075e6:	2b08      	cmp	r3, #8
 80075e8:	d122      	bne.n	8007630 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	f003 0308 	and.w	r3, r3, #8
 80075f4:	2b08      	cmp	r3, #8
 80075f6:	d11b      	bne.n	8007630 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f06f 0208 	mvn.w	r2, #8
 8007600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2204      	movs	r2, #4
 8007606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	f003 0303 	and.w	r3, r3, #3
 8007612:	2b00      	cmp	r3, #0
 8007614:	d003      	beq.n	800761e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f9b4 	bl	8007984 <HAL_TIM_IC_CaptureCallback>
 800761c:	e005      	b.n	800762a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f9a6 	bl	8007970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 f9b7 	bl	8007998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	f003 0310 	and.w	r3, r3, #16
 800763a:	2b10      	cmp	r3, #16
 800763c:	d122      	bne.n	8007684 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	f003 0310 	and.w	r3, r3, #16
 8007648:	2b10      	cmp	r3, #16
 800764a:	d11b      	bne.n	8007684 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f06f 0210 	mvn.w	r2, #16
 8007654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2208      	movs	r2, #8
 800765a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	69db      	ldr	r3, [r3, #28]
 8007662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007666:	2b00      	cmp	r3, #0
 8007668:	d003      	beq.n	8007672 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f98a 	bl	8007984 <HAL_TIM_IC_CaptureCallback>
 8007670:	e005      	b.n	800767e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f97c 	bl	8007970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 f98d 	bl	8007998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	2b01      	cmp	r3, #1
 8007690:	d10e      	bne.n	80076b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	f003 0301 	and.w	r3, r3, #1
 800769c:	2b01      	cmp	r3, #1
 800769e:	d107      	bne.n	80076b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f06f 0201 	mvn.w	r2, #1
 80076a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 f956 	bl	800795c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ba:	2b80      	cmp	r3, #128	; 0x80
 80076bc:	d10e      	bne.n	80076dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076c8:	2b80      	cmp	r3, #128	; 0x80
 80076ca:	d107      	bne.n	80076dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80076d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fb42 	bl	8007d60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076ea:	d10e      	bne.n	800770a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076f6:	2b80      	cmp	r3, #128	; 0x80
 80076f8:	d107      	bne.n	800770a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fb35 	bl	8007d74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007714:	2b40      	cmp	r3, #64	; 0x40
 8007716:	d10e      	bne.n	8007736 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007722:	2b40      	cmp	r3, #64	; 0x40
 8007724:	d107      	bne.n	8007736 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800772e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 f93b 	bl	80079ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	f003 0320 	and.w	r3, r3, #32
 8007740:	2b20      	cmp	r3, #32
 8007742:	d10e      	bne.n	8007762 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	f003 0320 	and.w	r3, r3, #32
 800774e:	2b20      	cmp	r3, #32
 8007750:	d107      	bne.n	8007762 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f06f 0220 	mvn.w	r2, #32
 800775a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 faf5 	bl	8007d4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007762:	bf00      	nop
 8007764:	3708      	adds	r7, #8
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
	...

0800776c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007776:	2300      	movs	r3, #0
 8007778:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007780:	2b01      	cmp	r3, #1
 8007782:	d101      	bne.n	8007788 <HAL_TIM_ConfigClockSource+0x1c>
 8007784:	2302      	movs	r3, #2
 8007786:	e0dc      	b.n	8007942 <HAL_TIM_ConfigClockSource+0x1d6>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2202      	movs	r2, #2
 8007794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	4b6a      	ldr	r3, [pc, #424]	; (800794c <HAL_TIM_ConfigClockSource+0x1e0>)
 80077a4:	4013      	ands	r3, r2
 80077a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a64      	ldr	r2, [pc, #400]	; (8007950 <HAL_TIM_ConfigClockSource+0x1e4>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	f000 80a9 	beq.w	8007916 <HAL_TIM_ConfigClockSource+0x1aa>
 80077c4:	4a62      	ldr	r2, [pc, #392]	; (8007950 <HAL_TIM_ConfigClockSource+0x1e4>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	f200 80ae 	bhi.w	8007928 <HAL_TIM_ConfigClockSource+0x1bc>
 80077cc:	4a61      	ldr	r2, [pc, #388]	; (8007954 <HAL_TIM_ConfigClockSource+0x1e8>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	f000 80a1 	beq.w	8007916 <HAL_TIM_ConfigClockSource+0x1aa>
 80077d4:	4a5f      	ldr	r2, [pc, #380]	; (8007954 <HAL_TIM_ConfigClockSource+0x1e8>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	f200 80a6 	bhi.w	8007928 <HAL_TIM_ConfigClockSource+0x1bc>
 80077dc:	4a5e      	ldr	r2, [pc, #376]	; (8007958 <HAL_TIM_ConfigClockSource+0x1ec>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	f000 8099 	beq.w	8007916 <HAL_TIM_ConfigClockSource+0x1aa>
 80077e4:	4a5c      	ldr	r2, [pc, #368]	; (8007958 <HAL_TIM_ConfigClockSource+0x1ec>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	f200 809e 	bhi.w	8007928 <HAL_TIM_ConfigClockSource+0x1bc>
 80077ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80077f0:	f000 8091 	beq.w	8007916 <HAL_TIM_ConfigClockSource+0x1aa>
 80077f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80077f8:	f200 8096 	bhi.w	8007928 <HAL_TIM_ConfigClockSource+0x1bc>
 80077fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007800:	f000 8089 	beq.w	8007916 <HAL_TIM_ConfigClockSource+0x1aa>
 8007804:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007808:	f200 808e 	bhi.w	8007928 <HAL_TIM_ConfigClockSource+0x1bc>
 800780c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007810:	d03e      	beq.n	8007890 <HAL_TIM_ConfigClockSource+0x124>
 8007812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007816:	f200 8087 	bhi.w	8007928 <HAL_TIM_ConfigClockSource+0x1bc>
 800781a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800781e:	f000 8086 	beq.w	800792e <HAL_TIM_ConfigClockSource+0x1c2>
 8007822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007826:	d87f      	bhi.n	8007928 <HAL_TIM_ConfigClockSource+0x1bc>
 8007828:	2b70      	cmp	r3, #112	; 0x70
 800782a:	d01a      	beq.n	8007862 <HAL_TIM_ConfigClockSource+0xf6>
 800782c:	2b70      	cmp	r3, #112	; 0x70
 800782e:	d87b      	bhi.n	8007928 <HAL_TIM_ConfigClockSource+0x1bc>
 8007830:	2b60      	cmp	r3, #96	; 0x60
 8007832:	d050      	beq.n	80078d6 <HAL_TIM_ConfigClockSource+0x16a>
 8007834:	2b60      	cmp	r3, #96	; 0x60
 8007836:	d877      	bhi.n	8007928 <HAL_TIM_ConfigClockSource+0x1bc>
 8007838:	2b50      	cmp	r3, #80	; 0x50
 800783a:	d03c      	beq.n	80078b6 <HAL_TIM_ConfigClockSource+0x14a>
 800783c:	2b50      	cmp	r3, #80	; 0x50
 800783e:	d873      	bhi.n	8007928 <HAL_TIM_ConfigClockSource+0x1bc>
 8007840:	2b40      	cmp	r3, #64	; 0x40
 8007842:	d058      	beq.n	80078f6 <HAL_TIM_ConfigClockSource+0x18a>
 8007844:	2b40      	cmp	r3, #64	; 0x40
 8007846:	d86f      	bhi.n	8007928 <HAL_TIM_ConfigClockSource+0x1bc>
 8007848:	2b30      	cmp	r3, #48	; 0x30
 800784a:	d064      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0x1aa>
 800784c:	2b30      	cmp	r3, #48	; 0x30
 800784e:	d86b      	bhi.n	8007928 <HAL_TIM_ConfigClockSource+0x1bc>
 8007850:	2b20      	cmp	r3, #32
 8007852:	d060      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0x1aa>
 8007854:	2b20      	cmp	r3, #32
 8007856:	d867      	bhi.n	8007928 <HAL_TIM_ConfigClockSource+0x1bc>
 8007858:	2b00      	cmp	r3, #0
 800785a:	d05c      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0x1aa>
 800785c:	2b10      	cmp	r3, #16
 800785e:	d05a      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0x1aa>
 8007860:	e062      	b.n	8007928 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007872:	f000 f9bd 	bl	8007bf0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007884:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68ba      	ldr	r2, [r7, #8]
 800788c:	609a      	str	r2, [r3, #8]
      break;
 800788e:	e04f      	b.n	8007930 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078a0:	f000 f9a6 	bl	8007bf0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	689a      	ldr	r2, [r3, #8]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078b2:	609a      	str	r2, [r3, #8]
      break;
 80078b4:	e03c      	b.n	8007930 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078c2:	461a      	mov	r2, r3
 80078c4:	f000 f916 	bl	8007af4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2150      	movs	r1, #80	; 0x50
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 f970 	bl	8007bb4 <TIM_ITRx_SetConfig>
      break;
 80078d4:	e02c      	b.n	8007930 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80078e2:	461a      	mov	r2, r3
 80078e4:	f000 f935 	bl	8007b52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2160      	movs	r1, #96	; 0x60
 80078ee:	4618      	mov	r0, r3
 80078f0:	f000 f960 	bl	8007bb4 <TIM_ITRx_SetConfig>
      break;
 80078f4:	e01c      	b.n	8007930 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007902:	461a      	mov	r2, r3
 8007904:	f000 f8f6 	bl	8007af4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2140      	movs	r1, #64	; 0x40
 800790e:	4618      	mov	r0, r3
 8007910:	f000 f950 	bl	8007bb4 <TIM_ITRx_SetConfig>
      break;
 8007914:	e00c      	b.n	8007930 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4619      	mov	r1, r3
 8007920:	4610      	mov	r0, r2
 8007922:	f000 f947 	bl	8007bb4 <TIM_ITRx_SetConfig>
      break;
 8007926:	e003      	b.n	8007930 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	73fb      	strb	r3, [r7, #15]
      break;
 800792c:	e000      	b.n	8007930 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800792e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007940:	7bfb      	ldrb	r3, [r7, #15]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	ffceff88 	.word	0xffceff88
 8007950:	00100040 	.word	0x00100040
 8007954:	00100030 	.word	0x00100030
 8007958:	00100020 	.word	0x00100020

0800795c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079b4:	bf00      	nop
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a40      	ldr	r2, [pc, #256]	; (8007ad4 <TIM_Base_SetConfig+0x114>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d013      	beq.n	8007a00 <TIM_Base_SetConfig+0x40>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079de:	d00f      	beq.n	8007a00 <TIM_Base_SetConfig+0x40>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a3d      	ldr	r2, [pc, #244]	; (8007ad8 <TIM_Base_SetConfig+0x118>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d00b      	beq.n	8007a00 <TIM_Base_SetConfig+0x40>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a3c      	ldr	r2, [pc, #240]	; (8007adc <TIM_Base_SetConfig+0x11c>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d007      	beq.n	8007a00 <TIM_Base_SetConfig+0x40>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4a3b      	ldr	r2, [pc, #236]	; (8007ae0 <TIM_Base_SetConfig+0x120>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d003      	beq.n	8007a00 <TIM_Base_SetConfig+0x40>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a3a      	ldr	r2, [pc, #232]	; (8007ae4 <TIM_Base_SetConfig+0x124>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d108      	bne.n	8007a12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a2f      	ldr	r2, [pc, #188]	; (8007ad4 <TIM_Base_SetConfig+0x114>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d01f      	beq.n	8007a5a <TIM_Base_SetConfig+0x9a>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a20:	d01b      	beq.n	8007a5a <TIM_Base_SetConfig+0x9a>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a2c      	ldr	r2, [pc, #176]	; (8007ad8 <TIM_Base_SetConfig+0x118>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d017      	beq.n	8007a5a <TIM_Base_SetConfig+0x9a>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a2b      	ldr	r2, [pc, #172]	; (8007adc <TIM_Base_SetConfig+0x11c>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d013      	beq.n	8007a5a <TIM_Base_SetConfig+0x9a>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a2a      	ldr	r2, [pc, #168]	; (8007ae0 <TIM_Base_SetConfig+0x120>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d00f      	beq.n	8007a5a <TIM_Base_SetConfig+0x9a>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a29      	ldr	r2, [pc, #164]	; (8007ae4 <TIM_Base_SetConfig+0x124>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d00b      	beq.n	8007a5a <TIM_Base_SetConfig+0x9a>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a28      	ldr	r2, [pc, #160]	; (8007ae8 <TIM_Base_SetConfig+0x128>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d007      	beq.n	8007a5a <TIM_Base_SetConfig+0x9a>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a27      	ldr	r2, [pc, #156]	; (8007aec <TIM_Base_SetConfig+0x12c>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d003      	beq.n	8007a5a <TIM_Base_SetConfig+0x9a>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a26      	ldr	r2, [pc, #152]	; (8007af0 <TIM_Base_SetConfig+0x130>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d108      	bne.n	8007a6c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	689a      	ldr	r2, [r3, #8]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a10      	ldr	r2, [pc, #64]	; (8007ad4 <TIM_Base_SetConfig+0x114>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d00f      	beq.n	8007ab8 <TIM_Base_SetConfig+0xf8>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a12      	ldr	r2, [pc, #72]	; (8007ae4 <TIM_Base_SetConfig+0x124>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d00b      	beq.n	8007ab8 <TIM_Base_SetConfig+0xf8>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a11      	ldr	r2, [pc, #68]	; (8007ae8 <TIM_Base_SetConfig+0x128>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d007      	beq.n	8007ab8 <TIM_Base_SetConfig+0xf8>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a10      	ldr	r2, [pc, #64]	; (8007aec <TIM_Base_SetConfig+0x12c>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d003      	beq.n	8007ab8 <TIM_Base_SetConfig+0xf8>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a0f      	ldr	r2, [pc, #60]	; (8007af0 <TIM_Base_SetConfig+0x130>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d103      	bne.n	8007ac0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	691a      	ldr	r2, [r3, #16]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	615a      	str	r2, [r3, #20]
}
 8007ac6:	bf00      	nop
 8007ac8:	3714      	adds	r7, #20
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	40010000 	.word	0x40010000
 8007ad8:	40000400 	.word	0x40000400
 8007adc:	40000800 	.word	0x40000800
 8007ae0:	40000c00 	.word	0x40000c00
 8007ae4:	40010400 	.word	0x40010400
 8007ae8:	40014000 	.word	0x40014000
 8007aec:	40014400 	.word	0x40014400
 8007af0:	40014800 	.word	0x40014800

08007af4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b087      	sub	sp, #28
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6a1b      	ldr	r3, [r3, #32]
 8007b04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6a1b      	ldr	r3, [r3, #32]
 8007b0a:	f023 0201 	bic.w	r2, r3, #1
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	011b      	lsls	r3, r3, #4
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	f023 030a 	bic.w	r3, r3, #10
 8007b30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	693a      	ldr	r2, [r7, #16]
 8007b3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	697a      	ldr	r2, [r7, #20]
 8007b44:	621a      	str	r2, [r3, #32]
}
 8007b46:	bf00      	nop
 8007b48:	371c      	adds	r7, #28
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b087      	sub	sp, #28
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	60f8      	str	r0, [r7, #12]
 8007b5a:	60b9      	str	r1, [r7, #8]
 8007b5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	f023 0210 	bic.w	r2, r3, #16
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6a1b      	ldr	r3, [r3, #32]
 8007b74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	031b      	lsls	r3, r3, #12
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	011b      	lsls	r3, r3, #4
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	693a      	ldr	r2, [r7, #16]
 8007ba4:	621a      	str	r2, [r3, #32]
}
 8007ba6:	bf00      	nop
 8007ba8:	371c      	adds	r7, #28
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
	...

08007bb4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	4b09      	ldr	r3, [pc, #36]	; (8007bec <TIM_ITRx_SetConfig+0x38>)
 8007bc8:	4013      	ands	r3, r2
 8007bca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bcc:	683a      	ldr	r2, [r7, #0]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	f043 0307 	orr.w	r3, r3, #7
 8007bd6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	609a      	str	r2, [r3, #8]
}
 8007bde:	bf00      	nop
 8007be0:	3714      	adds	r7, #20
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	ffcfff8f 	.word	0xffcfff8f

08007bf0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b087      	sub	sp, #28
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
 8007bfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	021a      	lsls	r2, r3, #8
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	431a      	orrs	r2, r3
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	697a      	ldr	r2, [r7, #20]
 8007c22:	609a      	str	r2, [r3, #8]
}
 8007c24:	bf00      	nop
 8007c26:	371c      	adds	r7, #28
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d101      	bne.n	8007c48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c44:	2302      	movs	r3, #2
 8007c46:	e06d      	b.n	8007d24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2202      	movs	r2, #2
 8007c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a30      	ldr	r2, [pc, #192]	; (8007d30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d004      	beq.n	8007c7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a2f      	ldr	r2, [pc, #188]	; (8007d34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d108      	bne.n	8007c8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007c82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68fa      	ldr	r2, [r7, #12]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a20      	ldr	r2, [pc, #128]	; (8007d30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d022      	beq.n	8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cba:	d01d      	beq.n	8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a1d      	ldr	r2, [pc, #116]	; (8007d38 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d018      	beq.n	8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a1c      	ldr	r2, [pc, #112]	; (8007d3c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d013      	beq.n	8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a1a      	ldr	r2, [pc, #104]	; (8007d40 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d00e      	beq.n	8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a15      	ldr	r2, [pc, #84]	; (8007d34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d009      	beq.n	8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a16      	ldr	r2, [pc, #88]	; (8007d44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d004      	beq.n	8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a15      	ldr	r2, [pc, #84]	; (8007d48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d10c      	bne.n	8007d12 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cfe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	40010000 	.word	0x40010000
 8007d34:	40010400 	.word	0x40010400
 8007d38:	40000400 	.word	0x40000400
 8007d3c:	40000800 	.word	0x40000800
 8007d40:	40000c00 	.word	0x40000c00
 8007d44:	40001800 	.word	0x40001800
 8007d48:	40014000 	.word	0x40014000

08007d4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d54:	bf00      	nop
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d68:	bf00      	nop
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d7c:	bf00      	nop
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d101      	bne.n	8007d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e042      	b.n	8007e20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d106      	bne.n	8007db2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f7f9 faf3 	bl	8001398 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2224      	movs	r2, #36	; 0x24
 8007db6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f022 0201 	bic.w	r2, r2, #1
 8007dc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 fce0 	bl	8008790 <UART_SetConfig>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d101      	bne.n	8007dda <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e022      	b.n	8007e20 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d002      	beq.n	8007de8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f001 fb40 	bl	8009468 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	685a      	ldr	r2, [r3, #4]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007df6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	689a      	ldr	r2, [r3, #8]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f042 0201 	orr.w	r2, r2, #1
 8007e16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f001 fbc7 	bl	80095ac <UART_CheckIdleState>
 8007e1e:	4603      	mov	r3, r0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b08a      	sub	sp, #40	; 0x28
 8007e2c:	af02      	add	r7, sp, #8
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	60b9      	str	r1, [r7, #8]
 8007e32:	603b      	str	r3, [r7, #0]
 8007e34:	4613      	mov	r3, r2
 8007e36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e3e:	2b20      	cmp	r3, #32
 8007e40:	d17b      	bne.n	8007f3a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d002      	beq.n	8007e4e <HAL_UART_Transmit+0x26>
 8007e48:	88fb      	ldrh	r3, [r7, #6]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d101      	bne.n	8007e52 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e074      	b.n	8007f3c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2221      	movs	r2, #33	; 0x21
 8007e5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e62:	f7f9 fced 	bl	8001840 <HAL_GetTick>
 8007e66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	88fa      	ldrh	r2, [r7, #6]
 8007e6c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	88fa      	ldrh	r2, [r7, #6]
 8007e74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e80:	d108      	bne.n	8007e94 <HAL_UART_Transmit+0x6c>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d104      	bne.n	8007e94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	61bb      	str	r3, [r7, #24]
 8007e92:	e003      	b.n	8007e9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e9c:	e030      	b.n	8007f00 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	9300      	str	r3, [sp, #0]
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	2180      	movs	r1, #128	; 0x80
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f001 fc29 	bl	8009700 <UART_WaitOnFlagUntilTimeout>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d005      	beq.n	8007ec0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2220      	movs	r2, #32
 8007eb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007ebc:	2303      	movs	r3, #3
 8007ebe:	e03d      	b.n	8007f3c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d10b      	bne.n	8007ede <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	881b      	ldrh	r3, [r3, #0]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ed4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	3302      	adds	r3, #2
 8007eda:	61bb      	str	r3, [r7, #24]
 8007edc:	e007      	b.n	8007eee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	781a      	ldrb	r2, [r3, #0]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	3301      	adds	r3, #1
 8007eec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1c8      	bne.n	8007e9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	9300      	str	r3, [sp, #0]
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	2200      	movs	r2, #0
 8007f14:	2140      	movs	r1, #64	; 0x40
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f001 fbf2 	bl	8009700 <UART_WaitOnFlagUntilTimeout>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d005      	beq.n	8007f2e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2220      	movs	r2, #32
 8007f26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	e006      	b.n	8007f3c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2220      	movs	r2, #32
 8007f32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007f36:	2300      	movs	r3, #0
 8007f38:	e000      	b.n	8007f3c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007f3a:	2302      	movs	r3, #2
  }
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3720      	adds	r7, #32
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b08a      	sub	sp, #40	; 0x28
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f58:	2b20      	cmp	r3, #32
 8007f5a:	d137      	bne.n	8007fcc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d002      	beq.n	8007f68 <HAL_UART_Receive_IT+0x24>
 8007f62:	88fb      	ldrh	r3, [r7, #6]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d101      	bne.n	8007f6c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e030      	b.n	8007fce <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a18      	ldr	r2, [pc, #96]	; (8007fd8 <HAL_UART_Receive_IT+0x94>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d01f      	beq.n	8007fbc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d018      	beq.n	8007fbc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	e853 3f00 	ldrex	r3, [r3]
 8007f96:	613b      	str	r3, [r7, #16]
   return(result);
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa8:	623b      	str	r3, [r7, #32]
 8007faa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fac:	69f9      	ldr	r1, [r7, #28]
 8007fae:	6a3a      	ldr	r2, [r7, #32]
 8007fb0:	e841 2300 	strex	r3, r2, [r1]
 8007fb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1e6      	bne.n	8007f8a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007fbc:	88fb      	ldrh	r3, [r7, #6]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	68b9      	ldr	r1, [r7, #8]
 8007fc2:	68f8      	ldr	r0, [r7, #12]
 8007fc4:	f001 fc04 	bl	80097d0 <UART_Start_Receive_IT>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	e000      	b.n	8007fce <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007fcc:	2302      	movs	r3, #2
  }
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3728      	adds	r7, #40	; 0x28
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	58000c00 	.word	0x58000c00

08007fdc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b0ba      	sub	sp, #232	; 0xe8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	69db      	ldr	r3, [r3, #28]
 8007fea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008002:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008006:	f640 030f 	movw	r3, #2063	; 0x80f
 800800a:	4013      	ands	r3, r2
 800800c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008010:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008014:	2b00      	cmp	r3, #0
 8008016:	d11b      	bne.n	8008050 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800801c:	f003 0320 	and.w	r3, r3, #32
 8008020:	2b00      	cmp	r3, #0
 8008022:	d015      	beq.n	8008050 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008028:	f003 0320 	and.w	r3, r3, #32
 800802c:	2b00      	cmp	r3, #0
 800802e:	d105      	bne.n	800803c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008038:	2b00      	cmp	r3, #0
 800803a:	d009      	beq.n	8008050 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 8377 	beq.w	8008734 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	4798      	blx	r3
      }
      return;
 800804e:	e371      	b.n	8008734 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008050:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008054:	2b00      	cmp	r3, #0
 8008056:	f000 8123 	beq.w	80082a0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800805a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800805e:	4b8d      	ldr	r3, [pc, #564]	; (8008294 <HAL_UART_IRQHandler+0x2b8>)
 8008060:	4013      	ands	r3, r2
 8008062:	2b00      	cmp	r3, #0
 8008064:	d106      	bne.n	8008074 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008066:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800806a:	4b8b      	ldr	r3, [pc, #556]	; (8008298 <HAL_UART_IRQHandler+0x2bc>)
 800806c:	4013      	ands	r3, r2
 800806e:	2b00      	cmp	r3, #0
 8008070:	f000 8116 	beq.w	80082a0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008078:	f003 0301 	and.w	r3, r3, #1
 800807c:	2b00      	cmp	r3, #0
 800807e:	d011      	beq.n	80080a4 <HAL_UART_IRQHandler+0xc8>
 8008080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00b      	beq.n	80080a4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2201      	movs	r2, #1
 8008092:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800809a:	f043 0201 	orr.w	r2, r3, #1
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080a8:	f003 0302 	and.w	r3, r3, #2
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d011      	beq.n	80080d4 <HAL_UART_IRQHandler+0xf8>
 80080b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080b4:	f003 0301 	and.w	r3, r3, #1
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00b      	beq.n	80080d4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2202      	movs	r2, #2
 80080c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080ca:	f043 0204 	orr.w	r2, r3, #4
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080d8:	f003 0304 	and.w	r3, r3, #4
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d011      	beq.n	8008104 <HAL_UART_IRQHandler+0x128>
 80080e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080e4:	f003 0301 	and.w	r3, r3, #1
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00b      	beq.n	8008104 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2204      	movs	r2, #4
 80080f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080fa:	f043 0202 	orr.w	r2, r3, #2
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008108:	f003 0308 	and.w	r3, r3, #8
 800810c:	2b00      	cmp	r3, #0
 800810e:	d017      	beq.n	8008140 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008114:	f003 0320 	and.w	r3, r3, #32
 8008118:	2b00      	cmp	r3, #0
 800811a:	d105      	bne.n	8008128 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800811c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008120:	4b5c      	ldr	r3, [pc, #368]	; (8008294 <HAL_UART_IRQHandler+0x2b8>)
 8008122:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00b      	beq.n	8008140 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2208      	movs	r2, #8
 800812e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008136:	f043 0208 	orr.w	r2, r3, #8
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008148:	2b00      	cmp	r3, #0
 800814a:	d012      	beq.n	8008172 <HAL_UART_IRQHandler+0x196>
 800814c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008150:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00c      	beq.n	8008172 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008160:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008168:	f043 0220 	orr.w	r2, r3, #32
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 82dd 	beq.w	8008738 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800817e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008182:	f003 0320 	and.w	r3, r3, #32
 8008186:	2b00      	cmp	r3, #0
 8008188:	d013      	beq.n	80081b2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800818a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800818e:	f003 0320 	and.w	r3, r3, #32
 8008192:	2b00      	cmp	r3, #0
 8008194:	d105      	bne.n	80081a2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008196:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800819a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d007      	beq.n	80081b2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d003      	beq.n	80081b2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081c6:	2b40      	cmp	r3, #64	; 0x40
 80081c8:	d005      	beq.n	80081d6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80081ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d054      	beq.n	8008280 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f001 fc1c 	bl	8009a14 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e6:	2b40      	cmp	r3, #64	; 0x40
 80081e8:	d146      	bne.n	8008278 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	3308      	adds	r3, #8
 80081f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081f8:	e853 3f00 	ldrex	r3, [r3]
 80081fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008200:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008204:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008208:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	3308      	adds	r3, #8
 8008212:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008216:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800821a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008222:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008226:	e841 2300 	strex	r3, r2, [r1]
 800822a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800822e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1d9      	bne.n	80081ea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800823c:	2b00      	cmp	r3, #0
 800823e:	d017      	beq.n	8008270 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008246:	4a15      	ldr	r2, [pc, #84]	; (800829c <HAL_UART_IRQHandler+0x2c0>)
 8008248:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008250:	4618      	mov	r0, r3
 8008252:	f7fb f83b 	bl	80032cc <HAL_DMA_Abort_IT>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d019      	beq.n	8008290 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800826a:	4610      	mov	r0, r2
 800826c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800826e:	e00f      	b.n	8008290 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fa77 	bl	8008764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008276:	e00b      	b.n	8008290 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 fa73 	bl	8008764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800827e:	e007      	b.n	8008290 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 fa6f 	bl	8008764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800828e:	e253      	b.n	8008738 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008290:	bf00      	nop
    return;
 8008292:	e251      	b.n	8008738 <HAL_UART_IRQHandler+0x75c>
 8008294:	10000001 	.word	0x10000001
 8008298:	04000120 	.word	0x04000120
 800829c:	08009ae1 	.word	0x08009ae1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	f040 81e7 	bne.w	8008678 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80082aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ae:	f003 0310 	and.w	r3, r3, #16
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f000 81e0 	beq.w	8008678 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80082b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082bc:	f003 0310 	and.w	r3, r3, #16
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f000 81d9 	beq.w	8008678 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2210      	movs	r2, #16
 80082cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082d8:	2b40      	cmp	r3, #64	; 0x40
 80082da:	f040 8151 	bne.w	8008580 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a96      	ldr	r2, [pc, #600]	; (8008540 <HAL_UART_IRQHandler+0x564>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d068      	beq.n	80083be <HAL_UART_IRQHandler+0x3e2>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a93      	ldr	r2, [pc, #588]	; (8008544 <HAL_UART_IRQHandler+0x568>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d061      	beq.n	80083be <HAL_UART_IRQHandler+0x3e2>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a91      	ldr	r2, [pc, #580]	; (8008548 <HAL_UART_IRQHandler+0x56c>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d05a      	beq.n	80083be <HAL_UART_IRQHandler+0x3e2>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a8e      	ldr	r2, [pc, #568]	; (800854c <HAL_UART_IRQHandler+0x570>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d053      	beq.n	80083be <HAL_UART_IRQHandler+0x3e2>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a8c      	ldr	r2, [pc, #560]	; (8008550 <HAL_UART_IRQHandler+0x574>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d04c      	beq.n	80083be <HAL_UART_IRQHandler+0x3e2>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a89      	ldr	r2, [pc, #548]	; (8008554 <HAL_UART_IRQHandler+0x578>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d045      	beq.n	80083be <HAL_UART_IRQHandler+0x3e2>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a87      	ldr	r2, [pc, #540]	; (8008558 <HAL_UART_IRQHandler+0x57c>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d03e      	beq.n	80083be <HAL_UART_IRQHandler+0x3e2>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a84      	ldr	r2, [pc, #528]	; (800855c <HAL_UART_IRQHandler+0x580>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d037      	beq.n	80083be <HAL_UART_IRQHandler+0x3e2>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a82      	ldr	r2, [pc, #520]	; (8008560 <HAL_UART_IRQHandler+0x584>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d030      	beq.n	80083be <HAL_UART_IRQHandler+0x3e2>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a7f      	ldr	r2, [pc, #508]	; (8008564 <HAL_UART_IRQHandler+0x588>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d029      	beq.n	80083be <HAL_UART_IRQHandler+0x3e2>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a7d      	ldr	r2, [pc, #500]	; (8008568 <HAL_UART_IRQHandler+0x58c>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d022      	beq.n	80083be <HAL_UART_IRQHandler+0x3e2>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a7a      	ldr	r2, [pc, #488]	; (800856c <HAL_UART_IRQHandler+0x590>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d01b      	beq.n	80083be <HAL_UART_IRQHandler+0x3e2>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a78      	ldr	r2, [pc, #480]	; (8008570 <HAL_UART_IRQHandler+0x594>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d014      	beq.n	80083be <HAL_UART_IRQHandler+0x3e2>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a75      	ldr	r2, [pc, #468]	; (8008574 <HAL_UART_IRQHandler+0x598>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d00d      	beq.n	80083be <HAL_UART_IRQHandler+0x3e2>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a73      	ldr	r2, [pc, #460]	; (8008578 <HAL_UART_IRQHandler+0x59c>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d006      	beq.n	80083be <HAL_UART_IRQHandler+0x3e2>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a70      	ldr	r2, [pc, #448]	; (800857c <HAL_UART_IRQHandler+0x5a0>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d106      	bne.n	80083cc <HAL_UART_IRQHandler+0x3f0>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	e005      	b.n	80083d8 <HAL_UART_IRQHandler+0x3fc>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80083dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f000 81ab 	beq.w	800873c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80083ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083f0:	429a      	cmp	r2, r3
 80083f2:	f080 81a3 	bcs.w	800873c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008406:	69db      	ldr	r3, [r3, #28]
 8008408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800840c:	f000 8087 	beq.w	800851e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008418:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800841c:	e853 3f00 	ldrex	r3, [r3]
 8008420:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008424:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800842c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	461a      	mov	r2, r3
 8008436:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800843a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800843e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008442:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008446:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800844a:	e841 2300 	strex	r3, r2, [r1]
 800844e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008452:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1da      	bne.n	8008410 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	3308      	adds	r3, #8
 8008460:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008464:	e853 3f00 	ldrex	r3, [r3]
 8008468:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800846a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800846c:	f023 0301 	bic.w	r3, r3, #1
 8008470:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	3308      	adds	r3, #8
 800847a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800847e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008482:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008484:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008486:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800848a:	e841 2300 	strex	r3, r2, [r1]
 800848e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008490:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1e1      	bne.n	800845a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	3308      	adds	r3, #8
 800849c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084a0:	e853 3f00 	ldrex	r3, [r3]
 80084a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80084a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	3308      	adds	r3, #8
 80084b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80084ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80084bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80084c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80084c2:	e841 2300 	strex	r3, r2, [r1]
 80084c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80084c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1e3      	bne.n	8008496 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2220      	movs	r2, #32
 80084d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084e4:	e853 3f00 	ldrex	r3, [r3]
 80084e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084ec:	f023 0310 	bic.w	r3, r3, #16
 80084f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	461a      	mov	r2, r3
 80084fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8008500:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008502:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008504:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008506:	e841 2300 	strex	r3, r2, [r1]
 800850a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800850c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800850e:	2b00      	cmp	r3, #0
 8008510:	d1e4      	bne.n	80084dc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008518:	4618      	mov	r0, r3
 800851a:	f7fa fbb9 	bl	8002c90 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2202      	movs	r2, #2
 8008522:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008530:	b29b      	uxth	r3, r3
 8008532:	1ad3      	subs	r3, r2, r3
 8008534:	b29b      	uxth	r3, r3
 8008536:	4619      	mov	r1, r3
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f91d 	bl	8008778 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800853e:	e0fd      	b.n	800873c <HAL_UART_IRQHandler+0x760>
 8008540:	40020010 	.word	0x40020010
 8008544:	40020028 	.word	0x40020028
 8008548:	40020040 	.word	0x40020040
 800854c:	40020058 	.word	0x40020058
 8008550:	40020070 	.word	0x40020070
 8008554:	40020088 	.word	0x40020088
 8008558:	400200a0 	.word	0x400200a0
 800855c:	400200b8 	.word	0x400200b8
 8008560:	40020410 	.word	0x40020410
 8008564:	40020428 	.word	0x40020428
 8008568:	40020440 	.word	0x40020440
 800856c:	40020458 	.word	0x40020458
 8008570:	40020470 	.word	0x40020470
 8008574:	40020488 	.word	0x40020488
 8008578:	400204a0 	.word	0x400204a0
 800857c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800858c:	b29b      	uxth	r3, r3
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800859a:	b29b      	uxth	r3, r3
 800859c:	2b00      	cmp	r3, #0
 800859e:	f000 80cf 	beq.w	8008740 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80085a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	f000 80ca 	beq.w	8008740 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b4:	e853 3f00 	ldrex	r3, [r3]
 80085b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	461a      	mov	r2, r3
 80085ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085ce:	647b      	str	r3, [r7, #68]	; 0x44
 80085d0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085d6:	e841 2300 	strex	r3, r2, [r1]
 80085da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d1e4      	bne.n	80085ac <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	3308      	adds	r3, #8
 80085e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ec:	e853 3f00 	ldrex	r3, [r3]
 80085f0:	623b      	str	r3, [r7, #32]
   return(result);
 80085f2:	6a3a      	ldr	r2, [r7, #32]
 80085f4:	4b55      	ldr	r3, [pc, #340]	; (800874c <HAL_UART_IRQHandler+0x770>)
 80085f6:	4013      	ands	r3, r2
 80085f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	3308      	adds	r3, #8
 8008602:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008606:	633a      	str	r2, [r7, #48]	; 0x30
 8008608:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800860c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800860e:	e841 2300 	strex	r3, r2, [r1]
 8008612:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008616:	2b00      	cmp	r3, #0
 8008618:	d1e3      	bne.n	80085e2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2220      	movs	r2, #32
 800861e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	e853 3f00 	ldrex	r3, [r3]
 800863a:	60fb      	str	r3, [r7, #12]
   return(result);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f023 0310 	bic.w	r3, r3, #16
 8008642:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	461a      	mov	r2, r3
 800864c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008650:	61fb      	str	r3, [r7, #28]
 8008652:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008654:	69b9      	ldr	r1, [r7, #24]
 8008656:	69fa      	ldr	r2, [r7, #28]
 8008658:	e841 2300 	strex	r3, r2, [r1]
 800865c:	617b      	str	r3, [r7, #20]
   return(result);
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1e4      	bne.n	800862e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2202      	movs	r2, #2
 8008668:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800866a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800866e:	4619      	mov	r1, r3
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 f881 	bl	8008778 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008676:	e063      	b.n	8008740 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800867c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00e      	beq.n	80086a2 <HAL_UART_IRQHandler+0x6c6>
 8008684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800868c:	2b00      	cmp	r3, #0
 800868e:	d008      	beq.n	80086a2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008698:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f001 ff7e 	bl	800a59c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086a0:	e051      	b.n	8008746 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80086a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d014      	beq.n	80086d8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80086ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d105      	bne.n	80086c6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80086ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d008      	beq.n	80086d8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d03a      	beq.n	8008744 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	4798      	blx	r3
    }
    return;
 80086d6:	e035      	b.n	8008744 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80086d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d009      	beq.n	80086f8 <HAL_UART_IRQHandler+0x71c>
 80086e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d003      	beq.n	80086f8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f001 fa0b 	bl	8009b0c <UART_EndTransmit_IT>
    return;
 80086f6:	e026      	b.n	8008746 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80086f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008700:	2b00      	cmp	r3, #0
 8008702:	d009      	beq.n	8008718 <HAL_UART_IRQHandler+0x73c>
 8008704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008708:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800870c:	2b00      	cmp	r3, #0
 800870e:	d003      	beq.n	8008718 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f001 ff57 	bl	800a5c4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008716:	e016      	b.n	8008746 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800871c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008720:	2b00      	cmp	r3, #0
 8008722:	d010      	beq.n	8008746 <HAL_UART_IRQHandler+0x76a>
 8008724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008728:	2b00      	cmp	r3, #0
 800872a:	da0c      	bge.n	8008746 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f001 ff3f 	bl	800a5b0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008732:	e008      	b.n	8008746 <HAL_UART_IRQHandler+0x76a>
      return;
 8008734:	bf00      	nop
 8008736:	e006      	b.n	8008746 <HAL_UART_IRQHandler+0x76a>
    return;
 8008738:	bf00      	nop
 800873a:	e004      	b.n	8008746 <HAL_UART_IRQHandler+0x76a>
      return;
 800873c:	bf00      	nop
 800873e:	e002      	b.n	8008746 <HAL_UART_IRQHandler+0x76a>
      return;
 8008740:	bf00      	nop
 8008742:	e000      	b.n	8008746 <HAL_UART_IRQHandler+0x76a>
    return;
 8008744:	bf00      	nop
  }
}
 8008746:	37e8      	adds	r7, #232	; 0xe8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	effffffe 	.word	0xeffffffe

08008750 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008758:	bf00      	nop
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	460b      	mov	r3, r1
 8008782:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008784:	bf00      	nop
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008794:	b092      	sub	sp, #72	; 0x48
 8008796:	af00      	add	r7, sp, #0
 8008798:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800879a:	2300      	movs	r3, #0
 800879c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	689a      	ldr	r2, [r3, #8]
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	431a      	orrs	r2, r3
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	431a      	orrs	r2, r3
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	69db      	ldr	r3, [r3, #28]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	4bbe      	ldr	r3, [pc, #760]	; (8008ab8 <UART_SetConfig+0x328>)
 80087c0:	4013      	ands	r3, r2
 80087c2:	697a      	ldr	r2, [r7, #20]
 80087c4:	6812      	ldr	r2, [r2, #0]
 80087c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80087c8:	430b      	orrs	r3, r1
 80087ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	68da      	ldr	r2, [r3, #12]
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	430a      	orrs	r2, r1
 80087e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4ab3      	ldr	r2, [pc, #716]	; (8008abc <UART_SetConfig+0x32c>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d004      	beq.n	80087fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	6a1b      	ldr	r3, [r3, #32]
 80087f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087f8:	4313      	orrs	r3, r2
 80087fa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	689a      	ldr	r2, [r3, #8]
 8008802:	4baf      	ldr	r3, [pc, #700]	; (8008ac0 <UART_SetConfig+0x330>)
 8008804:	4013      	ands	r3, r2
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	6812      	ldr	r2, [r2, #0]
 800880a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800880c:	430b      	orrs	r3, r1
 800880e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008816:	f023 010f 	bic.w	r1, r3, #15
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	430a      	orrs	r2, r1
 8008824:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4aa6      	ldr	r2, [pc, #664]	; (8008ac4 <UART_SetConfig+0x334>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d177      	bne.n	8008920 <UART_SetConfig+0x190>
 8008830:	4ba5      	ldr	r3, [pc, #660]	; (8008ac8 <UART_SetConfig+0x338>)
 8008832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008834:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008838:	2b28      	cmp	r3, #40	; 0x28
 800883a:	d86d      	bhi.n	8008918 <UART_SetConfig+0x188>
 800883c:	a201      	add	r2, pc, #4	; (adr r2, 8008844 <UART_SetConfig+0xb4>)
 800883e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008842:	bf00      	nop
 8008844:	080088e9 	.word	0x080088e9
 8008848:	08008919 	.word	0x08008919
 800884c:	08008919 	.word	0x08008919
 8008850:	08008919 	.word	0x08008919
 8008854:	08008919 	.word	0x08008919
 8008858:	08008919 	.word	0x08008919
 800885c:	08008919 	.word	0x08008919
 8008860:	08008919 	.word	0x08008919
 8008864:	080088f1 	.word	0x080088f1
 8008868:	08008919 	.word	0x08008919
 800886c:	08008919 	.word	0x08008919
 8008870:	08008919 	.word	0x08008919
 8008874:	08008919 	.word	0x08008919
 8008878:	08008919 	.word	0x08008919
 800887c:	08008919 	.word	0x08008919
 8008880:	08008919 	.word	0x08008919
 8008884:	080088f9 	.word	0x080088f9
 8008888:	08008919 	.word	0x08008919
 800888c:	08008919 	.word	0x08008919
 8008890:	08008919 	.word	0x08008919
 8008894:	08008919 	.word	0x08008919
 8008898:	08008919 	.word	0x08008919
 800889c:	08008919 	.word	0x08008919
 80088a0:	08008919 	.word	0x08008919
 80088a4:	08008901 	.word	0x08008901
 80088a8:	08008919 	.word	0x08008919
 80088ac:	08008919 	.word	0x08008919
 80088b0:	08008919 	.word	0x08008919
 80088b4:	08008919 	.word	0x08008919
 80088b8:	08008919 	.word	0x08008919
 80088bc:	08008919 	.word	0x08008919
 80088c0:	08008919 	.word	0x08008919
 80088c4:	08008909 	.word	0x08008909
 80088c8:	08008919 	.word	0x08008919
 80088cc:	08008919 	.word	0x08008919
 80088d0:	08008919 	.word	0x08008919
 80088d4:	08008919 	.word	0x08008919
 80088d8:	08008919 	.word	0x08008919
 80088dc:	08008919 	.word	0x08008919
 80088e0:	08008919 	.word	0x08008919
 80088e4:	08008911 	.word	0x08008911
 80088e8:	2301      	movs	r3, #1
 80088ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ee:	e326      	b.n	8008f3e <UART_SetConfig+0x7ae>
 80088f0:	2304      	movs	r3, #4
 80088f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088f6:	e322      	b.n	8008f3e <UART_SetConfig+0x7ae>
 80088f8:	2308      	movs	r3, #8
 80088fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088fe:	e31e      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008900:	2310      	movs	r3, #16
 8008902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008906:	e31a      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008908:	2320      	movs	r3, #32
 800890a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800890e:	e316      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008910:	2340      	movs	r3, #64	; 0x40
 8008912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008916:	e312      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008918:	2380      	movs	r3, #128	; 0x80
 800891a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800891e:	e30e      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a69      	ldr	r2, [pc, #420]	; (8008acc <UART_SetConfig+0x33c>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d130      	bne.n	800898c <UART_SetConfig+0x1fc>
 800892a:	4b67      	ldr	r3, [pc, #412]	; (8008ac8 <UART_SetConfig+0x338>)
 800892c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800892e:	f003 0307 	and.w	r3, r3, #7
 8008932:	2b05      	cmp	r3, #5
 8008934:	d826      	bhi.n	8008984 <UART_SetConfig+0x1f4>
 8008936:	a201      	add	r2, pc, #4	; (adr r2, 800893c <UART_SetConfig+0x1ac>)
 8008938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800893c:	08008955 	.word	0x08008955
 8008940:	0800895d 	.word	0x0800895d
 8008944:	08008965 	.word	0x08008965
 8008948:	0800896d 	.word	0x0800896d
 800894c:	08008975 	.word	0x08008975
 8008950:	0800897d 	.word	0x0800897d
 8008954:	2300      	movs	r3, #0
 8008956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800895a:	e2f0      	b.n	8008f3e <UART_SetConfig+0x7ae>
 800895c:	2304      	movs	r3, #4
 800895e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008962:	e2ec      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008964:	2308      	movs	r3, #8
 8008966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800896a:	e2e8      	b.n	8008f3e <UART_SetConfig+0x7ae>
 800896c:	2310      	movs	r3, #16
 800896e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008972:	e2e4      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008974:	2320      	movs	r3, #32
 8008976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800897a:	e2e0      	b.n	8008f3e <UART_SetConfig+0x7ae>
 800897c:	2340      	movs	r3, #64	; 0x40
 800897e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008982:	e2dc      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008984:	2380      	movs	r3, #128	; 0x80
 8008986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800898a:	e2d8      	b.n	8008f3e <UART_SetConfig+0x7ae>
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a4f      	ldr	r2, [pc, #316]	; (8008ad0 <UART_SetConfig+0x340>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d130      	bne.n	80089f8 <UART_SetConfig+0x268>
 8008996:	4b4c      	ldr	r3, [pc, #304]	; (8008ac8 <UART_SetConfig+0x338>)
 8008998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800899a:	f003 0307 	and.w	r3, r3, #7
 800899e:	2b05      	cmp	r3, #5
 80089a0:	d826      	bhi.n	80089f0 <UART_SetConfig+0x260>
 80089a2:	a201      	add	r2, pc, #4	; (adr r2, 80089a8 <UART_SetConfig+0x218>)
 80089a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a8:	080089c1 	.word	0x080089c1
 80089ac:	080089c9 	.word	0x080089c9
 80089b0:	080089d1 	.word	0x080089d1
 80089b4:	080089d9 	.word	0x080089d9
 80089b8:	080089e1 	.word	0x080089e1
 80089bc:	080089e9 	.word	0x080089e9
 80089c0:	2300      	movs	r3, #0
 80089c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089c6:	e2ba      	b.n	8008f3e <UART_SetConfig+0x7ae>
 80089c8:	2304      	movs	r3, #4
 80089ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ce:	e2b6      	b.n	8008f3e <UART_SetConfig+0x7ae>
 80089d0:	2308      	movs	r3, #8
 80089d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089d6:	e2b2      	b.n	8008f3e <UART_SetConfig+0x7ae>
 80089d8:	2310      	movs	r3, #16
 80089da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089de:	e2ae      	b.n	8008f3e <UART_SetConfig+0x7ae>
 80089e0:	2320      	movs	r3, #32
 80089e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089e6:	e2aa      	b.n	8008f3e <UART_SetConfig+0x7ae>
 80089e8:	2340      	movs	r3, #64	; 0x40
 80089ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ee:	e2a6      	b.n	8008f3e <UART_SetConfig+0x7ae>
 80089f0:	2380      	movs	r3, #128	; 0x80
 80089f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089f6:	e2a2      	b.n	8008f3e <UART_SetConfig+0x7ae>
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a35      	ldr	r2, [pc, #212]	; (8008ad4 <UART_SetConfig+0x344>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d130      	bne.n	8008a64 <UART_SetConfig+0x2d4>
 8008a02:	4b31      	ldr	r3, [pc, #196]	; (8008ac8 <UART_SetConfig+0x338>)
 8008a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a06:	f003 0307 	and.w	r3, r3, #7
 8008a0a:	2b05      	cmp	r3, #5
 8008a0c:	d826      	bhi.n	8008a5c <UART_SetConfig+0x2cc>
 8008a0e:	a201      	add	r2, pc, #4	; (adr r2, 8008a14 <UART_SetConfig+0x284>)
 8008a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a14:	08008a2d 	.word	0x08008a2d
 8008a18:	08008a35 	.word	0x08008a35
 8008a1c:	08008a3d 	.word	0x08008a3d
 8008a20:	08008a45 	.word	0x08008a45
 8008a24:	08008a4d 	.word	0x08008a4d
 8008a28:	08008a55 	.word	0x08008a55
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a32:	e284      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008a34:	2304      	movs	r3, #4
 8008a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a3a:	e280      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008a3c:	2308      	movs	r3, #8
 8008a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a42:	e27c      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008a44:	2310      	movs	r3, #16
 8008a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a4a:	e278      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008a4c:	2320      	movs	r3, #32
 8008a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a52:	e274      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008a54:	2340      	movs	r3, #64	; 0x40
 8008a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a5a:	e270      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008a5c:	2380      	movs	r3, #128	; 0x80
 8008a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a62:	e26c      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a1b      	ldr	r2, [pc, #108]	; (8008ad8 <UART_SetConfig+0x348>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d142      	bne.n	8008af4 <UART_SetConfig+0x364>
 8008a6e:	4b16      	ldr	r3, [pc, #88]	; (8008ac8 <UART_SetConfig+0x338>)
 8008a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a72:	f003 0307 	and.w	r3, r3, #7
 8008a76:	2b05      	cmp	r3, #5
 8008a78:	d838      	bhi.n	8008aec <UART_SetConfig+0x35c>
 8008a7a:	a201      	add	r2, pc, #4	; (adr r2, 8008a80 <UART_SetConfig+0x2f0>)
 8008a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a80:	08008a99 	.word	0x08008a99
 8008a84:	08008aa1 	.word	0x08008aa1
 8008a88:	08008aa9 	.word	0x08008aa9
 8008a8c:	08008ab1 	.word	0x08008ab1
 8008a90:	08008add 	.word	0x08008add
 8008a94:	08008ae5 	.word	0x08008ae5
 8008a98:	2300      	movs	r3, #0
 8008a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a9e:	e24e      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008aa0:	2304      	movs	r3, #4
 8008aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aa6:	e24a      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008aa8:	2308      	movs	r3, #8
 8008aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aae:	e246      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008ab0:	2310      	movs	r3, #16
 8008ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ab6:	e242      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008ab8:	cfff69f3 	.word	0xcfff69f3
 8008abc:	58000c00 	.word	0x58000c00
 8008ac0:	11fff4ff 	.word	0x11fff4ff
 8008ac4:	40011000 	.word	0x40011000
 8008ac8:	58024400 	.word	0x58024400
 8008acc:	40004400 	.word	0x40004400
 8008ad0:	40004800 	.word	0x40004800
 8008ad4:	40004c00 	.word	0x40004c00
 8008ad8:	40005000 	.word	0x40005000
 8008adc:	2320      	movs	r3, #32
 8008ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ae2:	e22c      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008ae4:	2340      	movs	r3, #64	; 0x40
 8008ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aea:	e228      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008aec:	2380      	movs	r3, #128	; 0x80
 8008aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008af2:	e224      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4ab1      	ldr	r2, [pc, #708]	; (8008dc0 <UART_SetConfig+0x630>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d176      	bne.n	8008bec <UART_SetConfig+0x45c>
 8008afe:	4bb1      	ldr	r3, [pc, #708]	; (8008dc4 <UART_SetConfig+0x634>)
 8008b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b06:	2b28      	cmp	r3, #40	; 0x28
 8008b08:	d86c      	bhi.n	8008be4 <UART_SetConfig+0x454>
 8008b0a:	a201      	add	r2, pc, #4	; (adr r2, 8008b10 <UART_SetConfig+0x380>)
 8008b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b10:	08008bb5 	.word	0x08008bb5
 8008b14:	08008be5 	.word	0x08008be5
 8008b18:	08008be5 	.word	0x08008be5
 8008b1c:	08008be5 	.word	0x08008be5
 8008b20:	08008be5 	.word	0x08008be5
 8008b24:	08008be5 	.word	0x08008be5
 8008b28:	08008be5 	.word	0x08008be5
 8008b2c:	08008be5 	.word	0x08008be5
 8008b30:	08008bbd 	.word	0x08008bbd
 8008b34:	08008be5 	.word	0x08008be5
 8008b38:	08008be5 	.word	0x08008be5
 8008b3c:	08008be5 	.word	0x08008be5
 8008b40:	08008be5 	.word	0x08008be5
 8008b44:	08008be5 	.word	0x08008be5
 8008b48:	08008be5 	.word	0x08008be5
 8008b4c:	08008be5 	.word	0x08008be5
 8008b50:	08008bc5 	.word	0x08008bc5
 8008b54:	08008be5 	.word	0x08008be5
 8008b58:	08008be5 	.word	0x08008be5
 8008b5c:	08008be5 	.word	0x08008be5
 8008b60:	08008be5 	.word	0x08008be5
 8008b64:	08008be5 	.word	0x08008be5
 8008b68:	08008be5 	.word	0x08008be5
 8008b6c:	08008be5 	.word	0x08008be5
 8008b70:	08008bcd 	.word	0x08008bcd
 8008b74:	08008be5 	.word	0x08008be5
 8008b78:	08008be5 	.word	0x08008be5
 8008b7c:	08008be5 	.word	0x08008be5
 8008b80:	08008be5 	.word	0x08008be5
 8008b84:	08008be5 	.word	0x08008be5
 8008b88:	08008be5 	.word	0x08008be5
 8008b8c:	08008be5 	.word	0x08008be5
 8008b90:	08008bd5 	.word	0x08008bd5
 8008b94:	08008be5 	.word	0x08008be5
 8008b98:	08008be5 	.word	0x08008be5
 8008b9c:	08008be5 	.word	0x08008be5
 8008ba0:	08008be5 	.word	0x08008be5
 8008ba4:	08008be5 	.word	0x08008be5
 8008ba8:	08008be5 	.word	0x08008be5
 8008bac:	08008be5 	.word	0x08008be5
 8008bb0:	08008bdd 	.word	0x08008bdd
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bba:	e1c0      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008bbc:	2304      	movs	r3, #4
 8008bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bc2:	e1bc      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008bc4:	2308      	movs	r3, #8
 8008bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bca:	e1b8      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008bcc:	2310      	movs	r3, #16
 8008bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bd2:	e1b4      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008bd4:	2320      	movs	r3, #32
 8008bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bda:	e1b0      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008bdc:	2340      	movs	r3, #64	; 0x40
 8008bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008be2:	e1ac      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008be4:	2380      	movs	r3, #128	; 0x80
 8008be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bea:	e1a8      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a75      	ldr	r2, [pc, #468]	; (8008dc8 <UART_SetConfig+0x638>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d130      	bne.n	8008c58 <UART_SetConfig+0x4c8>
 8008bf6:	4b73      	ldr	r3, [pc, #460]	; (8008dc4 <UART_SetConfig+0x634>)
 8008bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bfa:	f003 0307 	and.w	r3, r3, #7
 8008bfe:	2b05      	cmp	r3, #5
 8008c00:	d826      	bhi.n	8008c50 <UART_SetConfig+0x4c0>
 8008c02:	a201      	add	r2, pc, #4	; (adr r2, 8008c08 <UART_SetConfig+0x478>)
 8008c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c08:	08008c21 	.word	0x08008c21
 8008c0c:	08008c29 	.word	0x08008c29
 8008c10:	08008c31 	.word	0x08008c31
 8008c14:	08008c39 	.word	0x08008c39
 8008c18:	08008c41 	.word	0x08008c41
 8008c1c:	08008c49 	.word	0x08008c49
 8008c20:	2300      	movs	r3, #0
 8008c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c26:	e18a      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008c28:	2304      	movs	r3, #4
 8008c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c2e:	e186      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008c30:	2308      	movs	r3, #8
 8008c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c36:	e182      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008c38:	2310      	movs	r3, #16
 8008c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c3e:	e17e      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008c40:	2320      	movs	r3, #32
 8008c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c46:	e17a      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008c48:	2340      	movs	r3, #64	; 0x40
 8008c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c4e:	e176      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008c50:	2380      	movs	r3, #128	; 0x80
 8008c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c56:	e172      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a5b      	ldr	r2, [pc, #364]	; (8008dcc <UART_SetConfig+0x63c>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d130      	bne.n	8008cc4 <UART_SetConfig+0x534>
 8008c62:	4b58      	ldr	r3, [pc, #352]	; (8008dc4 <UART_SetConfig+0x634>)
 8008c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c66:	f003 0307 	and.w	r3, r3, #7
 8008c6a:	2b05      	cmp	r3, #5
 8008c6c:	d826      	bhi.n	8008cbc <UART_SetConfig+0x52c>
 8008c6e:	a201      	add	r2, pc, #4	; (adr r2, 8008c74 <UART_SetConfig+0x4e4>)
 8008c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c74:	08008c8d 	.word	0x08008c8d
 8008c78:	08008c95 	.word	0x08008c95
 8008c7c:	08008c9d 	.word	0x08008c9d
 8008c80:	08008ca5 	.word	0x08008ca5
 8008c84:	08008cad 	.word	0x08008cad
 8008c88:	08008cb5 	.word	0x08008cb5
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c92:	e154      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008c94:	2304      	movs	r3, #4
 8008c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c9a:	e150      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008c9c:	2308      	movs	r3, #8
 8008c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ca2:	e14c      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008ca4:	2310      	movs	r3, #16
 8008ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008caa:	e148      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008cac:	2320      	movs	r3, #32
 8008cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cb2:	e144      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008cb4:	2340      	movs	r3, #64	; 0x40
 8008cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cba:	e140      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008cbc:	2380      	movs	r3, #128	; 0x80
 8008cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cc2:	e13c      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a41      	ldr	r2, [pc, #260]	; (8008dd0 <UART_SetConfig+0x640>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	f040 8082 	bne.w	8008dd4 <UART_SetConfig+0x644>
 8008cd0:	4b3c      	ldr	r3, [pc, #240]	; (8008dc4 <UART_SetConfig+0x634>)
 8008cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cd8:	2b28      	cmp	r3, #40	; 0x28
 8008cda:	d86d      	bhi.n	8008db8 <UART_SetConfig+0x628>
 8008cdc:	a201      	add	r2, pc, #4	; (adr r2, 8008ce4 <UART_SetConfig+0x554>)
 8008cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce2:	bf00      	nop
 8008ce4:	08008d89 	.word	0x08008d89
 8008ce8:	08008db9 	.word	0x08008db9
 8008cec:	08008db9 	.word	0x08008db9
 8008cf0:	08008db9 	.word	0x08008db9
 8008cf4:	08008db9 	.word	0x08008db9
 8008cf8:	08008db9 	.word	0x08008db9
 8008cfc:	08008db9 	.word	0x08008db9
 8008d00:	08008db9 	.word	0x08008db9
 8008d04:	08008d91 	.word	0x08008d91
 8008d08:	08008db9 	.word	0x08008db9
 8008d0c:	08008db9 	.word	0x08008db9
 8008d10:	08008db9 	.word	0x08008db9
 8008d14:	08008db9 	.word	0x08008db9
 8008d18:	08008db9 	.word	0x08008db9
 8008d1c:	08008db9 	.word	0x08008db9
 8008d20:	08008db9 	.word	0x08008db9
 8008d24:	08008d99 	.word	0x08008d99
 8008d28:	08008db9 	.word	0x08008db9
 8008d2c:	08008db9 	.word	0x08008db9
 8008d30:	08008db9 	.word	0x08008db9
 8008d34:	08008db9 	.word	0x08008db9
 8008d38:	08008db9 	.word	0x08008db9
 8008d3c:	08008db9 	.word	0x08008db9
 8008d40:	08008db9 	.word	0x08008db9
 8008d44:	08008da1 	.word	0x08008da1
 8008d48:	08008db9 	.word	0x08008db9
 8008d4c:	08008db9 	.word	0x08008db9
 8008d50:	08008db9 	.word	0x08008db9
 8008d54:	08008db9 	.word	0x08008db9
 8008d58:	08008db9 	.word	0x08008db9
 8008d5c:	08008db9 	.word	0x08008db9
 8008d60:	08008db9 	.word	0x08008db9
 8008d64:	08008da9 	.word	0x08008da9
 8008d68:	08008db9 	.word	0x08008db9
 8008d6c:	08008db9 	.word	0x08008db9
 8008d70:	08008db9 	.word	0x08008db9
 8008d74:	08008db9 	.word	0x08008db9
 8008d78:	08008db9 	.word	0x08008db9
 8008d7c:	08008db9 	.word	0x08008db9
 8008d80:	08008db9 	.word	0x08008db9
 8008d84:	08008db1 	.word	0x08008db1
 8008d88:	2301      	movs	r3, #1
 8008d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d8e:	e0d6      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008d90:	2304      	movs	r3, #4
 8008d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d96:	e0d2      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008d98:	2308      	movs	r3, #8
 8008d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d9e:	e0ce      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008da0:	2310      	movs	r3, #16
 8008da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008da6:	e0ca      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008da8:	2320      	movs	r3, #32
 8008daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dae:	e0c6      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008db0:	2340      	movs	r3, #64	; 0x40
 8008db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008db6:	e0c2      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008db8:	2380      	movs	r3, #128	; 0x80
 8008dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dbe:	e0be      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008dc0:	40011400 	.word	0x40011400
 8008dc4:	58024400 	.word	0x58024400
 8008dc8:	40007800 	.word	0x40007800
 8008dcc:	40007c00 	.word	0x40007c00
 8008dd0:	40011800 	.word	0x40011800
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4aad      	ldr	r2, [pc, #692]	; (8009090 <UART_SetConfig+0x900>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d176      	bne.n	8008ecc <UART_SetConfig+0x73c>
 8008dde:	4bad      	ldr	r3, [pc, #692]	; (8009094 <UART_SetConfig+0x904>)
 8008de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008de2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008de6:	2b28      	cmp	r3, #40	; 0x28
 8008de8:	d86c      	bhi.n	8008ec4 <UART_SetConfig+0x734>
 8008dea:	a201      	add	r2, pc, #4	; (adr r2, 8008df0 <UART_SetConfig+0x660>)
 8008dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df0:	08008e95 	.word	0x08008e95
 8008df4:	08008ec5 	.word	0x08008ec5
 8008df8:	08008ec5 	.word	0x08008ec5
 8008dfc:	08008ec5 	.word	0x08008ec5
 8008e00:	08008ec5 	.word	0x08008ec5
 8008e04:	08008ec5 	.word	0x08008ec5
 8008e08:	08008ec5 	.word	0x08008ec5
 8008e0c:	08008ec5 	.word	0x08008ec5
 8008e10:	08008e9d 	.word	0x08008e9d
 8008e14:	08008ec5 	.word	0x08008ec5
 8008e18:	08008ec5 	.word	0x08008ec5
 8008e1c:	08008ec5 	.word	0x08008ec5
 8008e20:	08008ec5 	.word	0x08008ec5
 8008e24:	08008ec5 	.word	0x08008ec5
 8008e28:	08008ec5 	.word	0x08008ec5
 8008e2c:	08008ec5 	.word	0x08008ec5
 8008e30:	08008ea5 	.word	0x08008ea5
 8008e34:	08008ec5 	.word	0x08008ec5
 8008e38:	08008ec5 	.word	0x08008ec5
 8008e3c:	08008ec5 	.word	0x08008ec5
 8008e40:	08008ec5 	.word	0x08008ec5
 8008e44:	08008ec5 	.word	0x08008ec5
 8008e48:	08008ec5 	.word	0x08008ec5
 8008e4c:	08008ec5 	.word	0x08008ec5
 8008e50:	08008ead 	.word	0x08008ead
 8008e54:	08008ec5 	.word	0x08008ec5
 8008e58:	08008ec5 	.word	0x08008ec5
 8008e5c:	08008ec5 	.word	0x08008ec5
 8008e60:	08008ec5 	.word	0x08008ec5
 8008e64:	08008ec5 	.word	0x08008ec5
 8008e68:	08008ec5 	.word	0x08008ec5
 8008e6c:	08008ec5 	.word	0x08008ec5
 8008e70:	08008eb5 	.word	0x08008eb5
 8008e74:	08008ec5 	.word	0x08008ec5
 8008e78:	08008ec5 	.word	0x08008ec5
 8008e7c:	08008ec5 	.word	0x08008ec5
 8008e80:	08008ec5 	.word	0x08008ec5
 8008e84:	08008ec5 	.word	0x08008ec5
 8008e88:	08008ec5 	.word	0x08008ec5
 8008e8c:	08008ec5 	.word	0x08008ec5
 8008e90:	08008ebd 	.word	0x08008ebd
 8008e94:	2301      	movs	r3, #1
 8008e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e9a:	e050      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008e9c:	2304      	movs	r3, #4
 8008e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ea2:	e04c      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008ea4:	2308      	movs	r3, #8
 8008ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eaa:	e048      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008eac:	2310      	movs	r3, #16
 8008eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eb2:	e044      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008eb4:	2320      	movs	r3, #32
 8008eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eba:	e040      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008ebc:	2340      	movs	r3, #64	; 0x40
 8008ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ec2:	e03c      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008ec4:	2380      	movs	r3, #128	; 0x80
 8008ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eca:	e038      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a71      	ldr	r2, [pc, #452]	; (8009098 <UART_SetConfig+0x908>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d130      	bne.n	8008f38 <UART_SetConfig+0x7a8>
 8008ed6:	4b6f      	ldr	r3, [pc, #444]	; (8009094 <UART_SetConfig+0x904>)
 8008ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eda:	f003 0307 	and.w	r3, r3, #7
 8008ede:	2b05      	cmp	r3, #5
 8008ee0:	d826      	bhi.n	8008f30 <UART_SetConfig+0x7a0>
 8008ee2:	a201      	add	r2, pc, #4	; (adr r2, 8008ee8 <UART_SetConfig+0x758>)
 8008ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee8:	08008f01 	.word	0x08008f01
 8008eec:	08008f09 	.word	0x08008f09
 8008ef0:	08008f11 	.word	0x08008f11
 8008ef4:	08008f19 	.word	0x08008f19
 8008ef8:	08008f21 	.word	0x08008f21
 8008efc:	08008f29 	.word	0x08008f29
 8008f00:	2302      	movs	r3, #2
 8008f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f06:	e01a      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008f08:	2304      	movs	r3, #4
 8008f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f0e:	e016      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008f10:	2308      	movs	r3, #8
 8008f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f16:	e012      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008f18:	2310      	movs	r3, #16
 8008f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f1e:	e00e      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008f20:	2320      	movs	r3, #32
 8008f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f26:	e00a      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008f28:	2340      	movs	r3, #64	; 0x40
 8008f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f2e:	e006      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008f30:	2380      	movs	r3, #128	; 0x80
 8008f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f36:	e002      	b.n	8008f3e <UART_SetConfig+0x7ae>
 8008f38:	2380      	movs	r3, #128	; 0x80
 8008f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a55      	ldr	r2, [pc, #340]	; (8009098 <UART_SetConfig+0x908>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	f040 80f8 	bne.w	800913a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008f4a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008f4e:	2b20      	cmp	r3, #32
 8008f50:	dc46      	bgt.n	8008fe0 <UART_SetConfig+0x850>
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	db75      	blt.n	8009042 <UART_SetConfig+0x8b2>
 8008f56:	3b02      	subs	r3, #2
 8008f58:	2b1e      	cmp	r3, #30
 8008f5a:	d872      	bhi.n	8009042 <UART_SetConfig+0x8b2>
 8008f5c:	a201      	add	r2, pc, #4	; (adr r2, 8008f64 <UART_SetConfig+0x7d4>)
 8008f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f62:	bf00      	nop
 8008f64:	08008fe7 	.word	0x08008fe7
 8008f68:	08009043 	.word	0x08009043
 8008f6c:	08008fef 	.word	0x08008fef
 8008f70:	08009043 	.word	0x08009043
 8008f74:	08009043 	.word	0x08009043
 8008f78:	08009043 	.word	0x08009043
 8008f7c:	08008fff 	.word	0x08008fff
 8008f80:	08009043 	.word	0x08009043
 8008f84:	08009043 	.word	0x08009043
 8008f88:	08009043 	.word	0x08009043
 8008f8c:	08009043 	.word	0x08009043
 8008f90:	08009043 	.word	0x08009043
 8008f94:	08009043 	.word	0x08009043
 8008f98:	08009043 	.word	0x08009043
 8008f9c:	0800900f 	.word	0x0800900f
 8008fa0:	08009043 	.word	0x08009043
 8008fa4:	08009043 	.word	0x08009043
 8008fa8:	08009043 	.word	0x08009043
 8008fac:	08009043 	.word	0x08009043
 8008fb0:	08009043 	.word	0x08009043
 8008fb4:	08009043 	.word	0x08009043
 8008fb8:	08009043 	.word	0x08009043
 8008fbc:	08009043 	.word	0x08009043
 8008fc0:	08009043 	.word	0x08009043
 8008fc4:	08009043 	.word	0x08009043
 8008fc8:	08009043 	.word	0x08009043
 8008fcc:	08009043 	.word	0x08009043
 8008fd0:	08009043 	.word	0x08009043
 8008fd4:	08009043 	.word	0x08009043
 8008fd8:	08009043 	.word	0x08009043
 8008fdc:	08009035 	.word	0x08009035
 8008fe0:	2b40      	cmp	r3, #64	; 0x40
 8008fe2:	d02a      	beq.n	800903a <UART_SetConfig+0x8aa>
 8008fe4:	e02d      	b.n	8009042 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008fe6:	f7fd fc2f 	bl	8006848 <HAL_RCCEx_GetD3PCLK1Freq>
 8008fea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008fec:	e02f      	b.n	800904e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7fd fc3e 	bl	8006874 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ffc:	e027      	b.n	800904e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ffe:	f107 0318 	add.w	r3, r7, #24
 8009002:	4618      	mov	r0, r3
 8009004:	f7fd fd8a 	bl	8006b1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800900c:	e01f      	b.n	800904e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800900e:	4b21      	ldr	r3, [pc, #132]	; (8009094 <UART_SetConfig+0x904>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f003 0320 	and.w	r3, r3, #32
 8009016:	2b00      	cmp	r3, #0
 8009018:	d009      	beq.n	800902e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800901a:	4b1e      	ldr	r3, [pc, #120]	; (8009094 <UART_SetConfig+0x904>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	08db      	lsrs	r3, r3, #3
 8009020:	f003 0303 	and.w	r3, r3, #3
 8009024:	4a1d      	ldr	r2, [pc, #116]	; (800909c <UART_SetConfig+0x90c>)
 8009026:	fa22 f303 	lsr.w	r3, r2, r3
 800902a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800902c:	e00f      	b.n	800904e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800902e:	4b1b      	ldr	r3, [pc, #108]	; (800909c <UART_SetConfig+0x90c>)
 8009030:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009032:	e00c      	b.n	800904e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009034:	4b1a      	ldr	r3, [pc, #104]	; (80090a0 <UART_SetConfig+0x910>)
 8009036:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009038:	e009      	b.n	800904e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800903a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800903e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009040:	e005      	b.n	800904e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009042:	2300      	movs	r3, #0
 8009044:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800904c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800904e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009050:	2b00      	cmp	r3, #0
 8009052:	f000 81ee 	beq.w	8009432 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905a:	4a12      	ldr	r2, [pc, #72]	; (80090a4 <UART_SetConfig+0x914>)
 800905c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009060:	461a      	mov	r2, r3
 8009062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009064:	fbb3 f3f2 	udiv	r3, r3, r2
 8009068:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	685a      	ldr	r2, [r3, #4]
 800906e:	4613      	mov	r3, r2
 8009070:	005b      	lsls	r3, r3, #1
 8009072:	4413      	add	r3, r2
 8009074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009076:	429a      	cmp	r2, r3
 8009078:	d305      	bcc.n	8009086 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009082:	429a      	cmp	r2, r3
 8009084:	d910      	bls.n	80090a8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800908c:	e1d1      	b.n	8009432 <UART_SetConfig+0xca2>
 800908e:	bf00      	nop
 8009090:	40011c00 	.word	0x40011c00
 8009094:	58024400 	.word	0x58024400
 8009098:	58000c00 	.word	0x58000c00
 800909c:	03d09000 	.word	0x03d09000
 80090a0:	003d0900 	.word	0x003d0900
 80090a4:	0800b154 	.word	0x0800b154
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090aa:	2200      	movs	r2, #0
 80090ac:	60bb      	str	r3, [r7, #8]
 80090ae:	60fa      	str	r2, [r7, #12]
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b4:	4ac0      	ldr	r2, [pc, #768]	; (80093b8 <UART_SetConfig+0xc28>)
 80090b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	2200      	movs	r2, #0
 80090be:	603b      	str	r3, [r7, #0]
 80090c0:	607a      	str	r2, [r7, #4]
 80090c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80090ca:	f7f7 f969 	bl	80003a0 <__aeabi_uldivmod>
 80090ce:	4602      	mov	r2, r0
 80090d0:	460b      	mov	r3, r1
 80090d2:	4610      	mov	r0, r2
 80090d4:	4619      	mov	r1, r3
 80090d6:	f04f 0200 	mov.w	r2, #0
 80090da:	f04f 0300 	mov.w	r3, #0
 80090de:	020b      	lsls	r3, r1, #8
 80090e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80090e4:	0202      	lsls	r2, r0, #8
 80090e6:	6979      	ldr	r1, [r7, #20]
 80090e8:	6849      	ldr	r1, [r1, #4]
 80090ea:	0849      	lsrs	r1, r1, #1
 80090ec:	2000      	movs	r0, #0
 80090ee:	460c      	mov	r4, r1
 80090f0:	4605      	mov	r5, r0
 80090f2:	eb12 0804 	adds.w	r8, r2, r4
 80090f6:	eb43 0905 	adc.w	r9, r3, r5
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	469a      	mov	sl, r3
 8009102:	4693      	mov	fp, r2
 8009104:	4652      	mov	r2, sl
 8009106:	465b      	mov	r3, fp
 8009108:	4640      	mov	r0, r8
 800910a:	4649      	mov	r1, r9
 800910c:	f7f7 f948 	bl	80003a0 <__aeabi_uldivmod>
 8009110:	4602      	mov	r2, r0
 8009112:	460b      	mov	r3, r1
 8009114:	4613      	mov	r3, r2
 8009116:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800911e:	d308      	bcc.n	8009132 <UART_SetConfig+0x9a2>
 8009120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009122:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009126:	d204      	bcs.n	8009132 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800912e:	60da      	str	r2, [r3, #12]
 8009130:	e17f      	b.n	8009432 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009138:	e17b      	b.n	8009432 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	69db      	ldr	r3, [r3, #28]
 800913e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009142:	f040 80bd 	bne.w	80092c0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009146:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800914a:	2b20      	cmp	r3, #32
 800914c:	dc48      	bgt.n	80091e0 <UART_SetConfig+0xa50>
 800914e:	2b00      	cmp	r3, #0
 8009150:	db7b      	blt.n	800924a <UART_SetConfig+0xaba>
 8009152:	2b20      	cmp	r3, #32
 8009154:	d879      	bhi.n	800924a <UART_SetConfig+0xaba>
 8009156:	a201      	add	r2, pc, #4	; (adr r2, 800915c <UART_SetConfig+0x9cc>)
 8009158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800915c:	080091e7 	.word	0x080091e7
 8009160:	080091ef 	.word	0x080091ef
 8009164:	0800924b 	.word	0x0800924b
 8009168:	0800924b 	.word	0x0800924b
 800916c:	080091f7 	.word	0x080091f7
 8009170:	0800924b 	.word	0x0800924b
 8009174:	0800924b 	.word	0x0800924b
 8009178:	0800924b 	.word	0x0800924b
 800917c:	08009207 	.word	0x08009207
 8009180:	0800924b 	.word	0x0800924b
 8009184:	0800924b 	.word	0x0800924b
 8009188:	0800924b 	.word	0x0800924b
 800918c:	0800924b 	.word	0x0800924b
 8009190:	0800924b 	.word	0x0800924b
 8009194:	0800924b 	.word	0x0800924b
 8009198:	0800924b 	.word	0x0800924b
 800919c:	08009217 	.word	0x08009217
 80091a0:	0800924b 	.word	0x0800924b
 80091a4:	0800924b 	.word	0x0800924b
 80091a8:	0800924b 	.word	0x0800924b
 80091ac:	0800924b 	.word	0x0800924b
 80091b0:	0800924b 	.word	0x0800924b
 80091b4:	0800924b 	.word	0x0800924b
 80091b8:	0800924b 	.word	0x0800924b
 80091bc:	0800924b 	.word	0x0800924b
 80091c0:	0800924b 	.word	0x0800924b
 80091c4:	0800924b 	.word	0x0800924b
 80091c8:	0800924b 	.word	0x0800924b
 80091cc:	0800924b 	.word	0x0800924b
 80091d0:	0800924b 	.word	0x0800924b
 80091d4:	0800924b 	.word	0x0800924b
 80091d8:	0800924b 	.word	0x0800924b
 80091dc:	0800923d 	.word	0x0800923d
 80091e0:	2b40      	cmp	r3, #64	; 0x40
 80091e2:	d02e      	beq.n	8009242 <UART_SetConfig+0xab2>
 80091e4:	e031      	b.n	800924a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091e6:	f7fb fc6d 	bl	8004ac4 <HAL_RCC_GetPCLK1Freq>
 80091ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80091ec:	e033      	b.n	8009256 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091ee:	f7fb fc7f 	bl	8004af0 <HAL_RCC_GetPCLK2Freq>
 80091f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80091f4:	e02f      	b.n	8009256 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7fd fb3a 	bl	8006874 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009202:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009204:	e027      	b.n	8009256 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009206:	f107 0318 	add.w	r3, r7, #24
 800920a:	4618      	mov	r0, r3
 800920c:	f7fd fc86 	bl	8006b1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009214:	e01f      	b.n	8009256 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009216:	4b69      	ldr	r3, [pc, #420]	; (80093bc <UART_SetConfig+0xc2c>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f003 0320 	and.w	r3, r3, #32
 800921e:	2b00      	cmp	r3, #0
 8009220:	d009      	beq.n	8009236 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009222:	4b66      	ldr	r3, [pc, #408]	; (80093bc <UART_SetConfig+0xc2c>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	08db      	lsrs	r3, r3, #3
 8009228:	f003 0303 	and.w	r3, r3, #3
 800922c:	4a64      	ldr	r2, [pc, #400]	; (80093c0 <UART_SetConfig+0xc30>)
 800922e:	fa22 f303 	lsr.w	r3, r2, r3
 8009232:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009234:	e00f      	b.n	8009256 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009236:	4b62      	ldr	r3, [pc, #392]	; (80093c0 <UART_SetConfig+0xc30>)
 8009238:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800923a:	e00c      	b.n	8009256 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800923c:	4b61      	ldr	r3, [pc, #388]	; (80093c4 <UART_SetConfig+0xc34>)
 800923e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009240:	e009      	b.n	8009256 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009246:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009248:	e005      	b.n	8009256 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800924a:	2300      	movs	r3, #0
 800924c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800924e:	2301      	movs	r3, #1
 8009250:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009254:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009258:	2b00      	cmp	r3, #0
 800925a:	f000 80ea 	beq.w	8009432 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009262:	4a55      	ldr	r2, [pc, #340]	; (80093b8 <UART_SetConfig+0xc28>)
 8009264:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009268:	461a      	mov	r2, r3
 800926a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800926c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009270:	005a      	lsls	r2, r3, #1
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	085b      	lsrs	r3, r3, #1
 8009278:	441a      	add	r2, r3
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009282:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009286:	2b0f      	cmp	r3, #15
 8009288:	d916      	bls.n	80092b8 <UART_SetConfig+0xb28>
 800928a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800928c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009290:	d212      	bcs.n	80092b8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009294:	b29b      	uxth	r3, r3
 8009296:	f023 030f 	bic.w	r3, r3, #15
 800929a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800929c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929e:	085b      	lsrs	r3, r3, #1
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	f003 0307 	and.w	r3, r3, #7
 80092a6:	b29a      	uxth	r2, r3
 80092a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80092aa:	4313      	orrs	r3, r2
 80092ac:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80092b4:	60da      	str	r2, [r3, #12]
 80092b6:	e0bc      	b.n	8009432 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80092be:	e0b8      	b.n	8009432 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80092c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80092c4:	2b20      	cmp	r3, #32
 80092c6:	dc4b      	bgt.n	8009360 <UART_SetConfig+0xbd0>
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f2c0 8087 	blt.w	80093dc <UART_SetConfig+0xc4c>
 80092ce:	2b20      	cmp	r3, #32
 80092d0:	f200 8084 	bhi.w	80093dc <UART_SetConfig+0xc4c>
 80092d4:	a201      	add	r2, pc, #4	; (adr r2, 80092dc <UART_SetConfig+0xb4c>)
 80092d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092da:	bf00      	nop
 80092dc:	08009367 	.word	0x08009367
 80092e0:	0800936f 	.word	0x0800936f
 80092e4:	080093dd 	.word	0x080093dd
 80092e8:	080093dd 	.word	0x080093dd
 80092ec:	08009377 	.word	0x08009377
 80092f0:	080093dd 	.word	0x080093dd
 80092f4:	080093dd 	.word	0x080093dd
 80092f8:	080093dd 	.word	0x080093dd
 80092fc:	08009387 	.word	0x08009387
 8009300:	080093dd 	.word	0x080093dd
 8009304:	080093dd 	.word	0x080093dd
 8009308:	080093dd 	.word	0x080093dd
 800930c:	080093dd 	.word	0x080093dd
 8009310:	080093dd 	.word	0x080093dd
 8009314:	080093dd 	.word	0x080093dd
 8009318:	080093dd 	.word	0x080093dd
 800931c:	08009397 	.word	0x08009397
 8009320:	080093dd 	.word	0x080093dd
 8009324:	080093dd 	.word	0x080093dd
 8009328:	080093dd 	.word	0x080093dd
 800932c:	080093dd 	.word	0x080093dd
 8009330:	080093dd 	.word	0x080093dd
 8009334:	080093dd 	.word	0x080093dd
 8009338:	080093dd 	.word	0x080093dd
 800933c:	080093dd 	.word	0x080093dd
 8009340:	080093dd 	.word	0x080093dd
 8009344:	080093dd 	.word	0x080093dd
 8009348:	080093dd 	.word	0x080093dd
 800934c:	080093dd 	.word	0x080093dd
 8009350:	080093dd 	.word	0x080093dd
 8009354:	080093dd 	.word	0x080093dd
 8009358:	080093dd 	.word	0x080093dd
 800935c:	080093cf 	.word	0x080093cf
 8009360:	2b40      	cmp	r3, #64	; 0x40
 8009362:	d037      	beq.n	80093d4 <UART_SetConfig+0xc44>
 8009364:	e03a      	b.n	80093dc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009366:	f7fb fbad 	bl	8004ac4 <HAL_RCC_GetPCLK1Freq>
 800936a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800936c:	e03c      	b.n	80093e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800936e:	f7fb fbbf 	bl	8004af0 <HAL_RCC_GetPCLK2Freq>
 8009372:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009374:	e038      	b.n	80093e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800937a:	4618      	mov	r0, r3
 800937c:	f7fd fa7a 	bl	8006874 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009382:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009384:	e030      	b.n	80093e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009386:	f107 0318 	add.w	r3, r7, #24
 800938a:	4618      	mov	r0, r3
 800938c:	f7fd fbc6 	bl	8006b1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009394:	e028      	b.n	80093e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009396:	4b09      	ldr	r3, [pc, #36]	; (80093bc <UART_SetConfig+0xc2c>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f003 0320 	and.w	r3, r3, #32
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d012      	beq.n	80093c8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80093a2:	4b06      	ldr	r3, [pc, #24]	; (80093bc <UART_SetConfig+0xc2c>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	08db      	lsrs	r3, r3, #3
 80093a8:	f003 0303 	and.w	r3, r3, #3
 80093ac:	4a04      	ldr	r2, [pc, #16]	; (80093c0 <UART_SetConfig+0xc30>)
 80093ae:	fa22 f303 	lsr.w	r3, r2, r3
 80093b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80093b4:	e018      	b.n	80093e8 <UART_SetConfig+0xc58>
 80093b6:	bf00      	nop
 80093b8:	0800b154 	.word	0x0800b154
 80093bc:	58024400 	.word	0x58024400
 80093c0:	03d09000 	.word	0x03d09000
 80093c4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80093c8:	4b24      	ldr	r3, [pc, #144]	; (800945c <UART_SetConfig+0xccc>)
 80093ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093cc:	e00c      	b.n	80093e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80093ce:	4b24      	ldr	r3, [pc, #144]	; (8009460 <UART_SetConfig+0xcd0>)
 80093d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093d2:	e009      	b.n	80093e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093da:	e005      	b.n	80093e8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80093dc:	2300      	movs	r3, #0
 80093de:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80093e0:	2301      	movs	r3, #1
 80093e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80093e6:	bf00      	nop
    }

    if (pclk != 0U)
 80093e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d021      	beq.n	8009432 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f2:	4a1c      	ldr	r2, [pc, #112]	; (8009464 <UART_SetConfig+0xcd4>)
 80093f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093f8:	461a      	mov	r2, r3
 80093fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093fc:	fbb3 f2f2 	udiv	r2, r3, r2
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	085b      	lsrs	r3, r3, #1
 8009406:	441a      	add	r2, r3
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009410:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009414:	2b0f      	cmp	r3, #15
 8009416:	d909      	bls.n	800942c <UART_SetConfig+0xc9c>
 8009418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800941e:	d205      	bcs.n	800942c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009422:	b29a      	uxth	r2, r3
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	60da      	str	r2, [r3, #12]
 800942a:	e002      	b.n	8009432 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800942c:	2301      	movs	r3, #1
 800942e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	2201      	movs	r2, #1
 8009436:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	2201      	movs	r2, #1
 800943e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	2200      	movs	r2, #0
 8009446:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	2200      	movs	r2, #0
 800944c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800944e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009452:	4618      	mov	r0, r3
 8009454:	3748      	adds	r7, #72	; 0x48
 8009456:	46bd      	mov	sp, r7
 8009458:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800945c:	03d09000 	.word	0x03d09000
 8009460:	003d0900 	.word	0x003d0900
 8009464:	0800b154 	.word	0x0800b154

08009468 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009474:	f003 0301 	and.w	r3, r3, #1
 8009478:	2b00      	cmp	r3, #0
 800947a:	d00a      	beq.n	8009492 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	430a      	orrs	r2, r1
 8009490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009496:	f003 0302 	and.w	r3, r3, #2
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00a      	beq.n	80094b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	430a      	orrs	r2, r1
 80094b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b8:	f003 0304 	and.w	r3, r3, #4
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d00a      	beq.n	80094d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	430a      	orrs	r2, r1
 80094d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094da:	f003 0308 	and.w	r3, r3, #8
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d00a      	beq.n	80094f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	430a      	orrs	r2, r1
 80094f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094fc:	f003 0310 	and.w	r3, r3, #16
 8009500:	2b00      	cmp	r3, #0
 8009502:	d00a      	beq.n	800951a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	430a      	orrs	r2, r1
 8009518:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800951e:	f003 0320 	and.w	r3, r3, #32
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00a      	beq.n	800953c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	689b      	ldr	r3, [r3, #8]
 800952c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	430a      	orrs	r2, r1
 800953a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009544:	2b00      	cmp	r3, #0
 8009546:	d01a      	beq.n	800957e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	430a      	orrs	r2, r1
 800955c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009566:	d10a      	bne.n	800957e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	430a      	orrs	r2, r1
 800957c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00a      	beq.n	80095a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	430a      	orrs	r2, r1
 800959e:	605a      	str	r2, [r3, #4]
  }
}
 80095a0:	bf00      	nop
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b098      	sub	sp, #96	; 0x60
 80095b0:	af02      	add	r7, sp, #8
 80095b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80095bc:	f7f8 f940 	bl	8001840 <HAL_GetTick>
 80095c0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f003 0308 	and.w	r3, r3, #8
 80095cc:	2b08      	cmp	r3, #8
 80095ce:	d12f      	bne.n	8009630 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80095d4:	9300      	str	r3, [sp, #0]
 80095d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095d8:	2200      	movs	r2, #0
 80095da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 f88e 	bl	8009700 <UART_WaitOnFlagUntilTimeout>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d022      	beq.n	8009630 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f2:	e853 3f00 	ldrex	r3, [r3]
 80095f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80095f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095fe:	653b      	str	r3, [r7, #80]	; 0x50
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	461a      	mov	r2, r3
 8009606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009608:	647b      	str	r3, [r7, #68]	; 0x44
 800960a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800960e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009610:	e841 2300 	strex	r3, r2, [r1]
 8009614:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009618:	2b00      	cmp	r3, #0
 800961a:	d1e6      	bne.n	80095ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2220      	movs	r2, #32
 8009620:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2200      	movs	r2, #0
 8009628:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800962c:	2303      	movs	r3, #3
 800962e:	e063      	b.n	80096f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f003 0304 	and.w	r3, r3, #4
 800963a:	2b04      	cmp	r3, #4
 800963c:	d149      	bne.n	80096d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800963e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009642:	9300      	str	r3, [sp, #0]
 8009644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009646:	2200      	movs	r2, #0
 8009648:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 f857 	bl	8009700 <UART_WaitOnFlagUntilTimeout>
 8009652:	4603      	mov	r3, r0
 8009654:	2b00      	cmp	r3, #0
 8009656:	d03c      	beq.n	80096d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009660:	e853 3f00 	ldrex	r3, [r3]
 8009664:	623b      	str	r3, [r7, #32]
   return(result);
 8009666:	6a3b      	ldr	r3, [r7, #32]
 8009668:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800966c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	461a      	mov	r2, r3
 8009674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009676:	633b      	str	r3, [r7, #48]	; 0x30
 8009678:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800967c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800967e:	e841 2300 	strex	r3, r2, [r1]
 8009682:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009686:	2b00      	cmp	r3, #0
 8009688:	d1e6      	bne.n	8009658 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	3308      	adds	r3, #8
 8009690:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	e853 3f00 	ldrex	r3, [r3]
 8009698:	60fb      	str	r3, [r7, #12]
   return(result);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f023 0301 	bic.w	r3, r3, #1
 80096a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	3308      	adds	r3, #8
 80096a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096aa:	61fa      	str	r2, [r7, #28]
 80096ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ae:	69b9      	ldr	r1, [r7, #24]
 80096b0:	69fa      	ldr	r2, [r7, #28]
 80096b2:	e841 2300 	strex	r3, r2, [r1]
 80096b6:	617b      	str	r3, [r7, #20]
   return(result);
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d1e5      	bne.n	800968a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2220      	movs	r2, #32
 80096c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096ce:	2303      	movs	r3, #3
 80096d0:	e012      	b.n	80096f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2220      	movs	r2, #32
 80096d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2220      	movs	r2, #32
 80096de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80096f6:	2300      	movs	r3, #0
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3758      	adds	r7, #88	; 0x58
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	603b      	str	r3, [r7, #0]
 800970c:	4613      	mov	r3, r2
 800970e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009710:	e049      	b.n	80097a6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009718:	d045      	beq.n	80097a6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800971a:	f7f8 f891 	bl	8001840 <HAL_GetTick>
 800971e:	4602      	mov	r2, r0
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	69ba      	ldr	r2, [r7, #24]
 8009726:	429a      	cmp	r2, r3
 8009728:	d302      	bcc.n	8009730 <UART_WaitOnFlagUntilTimeout+0x30>
 800972a:	69bb      	ldr	r3, [r7, #24]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d101      	bne.n	8009734 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009730:	2303      	movs	r3, #3
 8009732:	e048      	b.n	80097c6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f003 0304 	and.w	r3, r3, #4
 800973e:	2b00      	cmp	r3, #0
 8009740:	d031      	beq.n	80097a6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	69db      	ldr	r3, [r3, #28]
 8009748:	f003 0308 	and.w	r3, r3, #8
 800974c:	2b08      	cmp	r3, #8
 800974e:	d110      	bne.n	8009772 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2208      	movs	r2, #8
 8009756:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f000 f95b 	bl	8009a14 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2208      	movs	r2, #8
 8009762:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2200      	movs	r2, #0
 800976a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	e029      	b.n	80097c6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	69db      	ldr	r3, [r3, #28]
 8009778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800977c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009780:	d111      	bne.n	80097a6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800978a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f000 f941 	bl	8009a14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2220      	movs	r2, #32
 8009796:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2200      	movs	r2, #0
 800979e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80097a2:	2303      	movs	r3, #3
 80097a4:	e00f      	b.n	80097c6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	69da      	ldr	r2, [r3, #28]
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	4013      	ands	r3, r2
 80097b0:	68ba      	ldr	r2, [r7, #8]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	bf0c      	ite	eq
 80097b6:	2301      	moveq	r3, #1
 80097b8:	2300      	movne	r3, #0
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	461a      	mov	r2, r3
 80097be:	79fb      	ldrb	r3, [r7, #7]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d0a6      	beq.n	8009712 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
	...

080097d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b0a3      	sub	sp, #140	; 0x8c
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	4613      	mov	r3, r2
 80097dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	68ba      	ldr	r2, [r7, #8]
 80097e2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	88fa      	ldrh	r2, [r7, #6]
 80097e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	88fa      	ldrh	r2, [r7, #6]
 80097f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2200      	movs	r2, #0
 80097f8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009802:	d10e      	bne.n	8009822 <UART_Start_Receive_IT+0x52>
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	691b      	ldr	r3, [r3, #16]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d105      	bne.n	8009818 <UART_Start_Receive_IT+0x48>
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009812:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009816:	e02d      	b.n	8009874 <UART_Start_Receive_IT+0xa4>
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	22ff      	movs	r2, #255	; 0xff
 800981c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009820:	e028      	b.n	8009874 <UART_Start_Receive_IT+0xa4>
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d10d      	bne.n	8009846 <UART_Start_Receive_IT+0x76>
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	691b      	ldr	r3, [r3, #16]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d104      	bne.n	800983c <UART_Start_Receive_IT+0x6c>
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	22ff      	movs	r2, #255	; 0xff
 8009836:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800983a:	e01b      	b.n	8009874 <UART_Start_Receive_IT+0xa4>
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	227f      	movs	r2, #127	; 0x7f
 8009840:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009844:	e016      	b.n	8009874 <UART_Start_Receive_IT+0xa4>
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800984e:	d10d      	bne.n	800986c <UART_Start_Receive_IT+0x9c>
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d104      	bne.n	8009862 <UART_Start_Receive_IT+0x92>
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	227f      	movs	r2, #127	; 0x7f
 800985c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009860:	e008      	b.n	8009874 <UART_Start_Receive_IT+0xa4>
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	223f      	movs	r2, #63	; 0x3f
 8009866:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800986a:	e003      	b.n	8009874 <UART_Start_Receive_IT+0xa4>
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2200      	movs	r2, #0
 8009870:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2200      	movs	r2, #0
 8009878:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2222      	movs	r2, #34	; 0x22
 8009880:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	3308      	adds	r3, #8
 800988a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800988e:	e853 3f00 	ldrex	r3, [r3]
 8009892:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009894:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009896:	f043 0301 	orr.w	r3, r3, #1
 800989a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	3308      	adds	r3, #8
 80098a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80098a8:	673a      	str	r2, [r7, #112]	; 0x70
 80098aa:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ac:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80098ae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80098b0:	e841 2300 	strex	r3, r2, [r1]
 80098b4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80098b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d1e3      	bne.n	8009884 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098c4:	d14f      	bne.n	8009966 <UART_Start_Receive_IT+0x196>
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80098cc:	88fa      	ldrh	r2, [r7, #6]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d349      	bcc.n	8009966 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098da:	d107      	bne.n	80098ec <UART_Start_Receive_IT+0x11c>
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d103      	bne.n	80098ec <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	4a47      	ldr	r2, [pc, #284]	; (8009a04 <UART_Start_Receive_IT+0x234>)
 80098e8:	675a      	str	r2, [r3, #116]	; 0x74
 80098ea:	e002      	b.n	80098f2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	4a46      	ldr	r2, [pc, #280]	; (8009a08 <UART_Start_Receive_IT+0x238>)
 80098f0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	691b      	ldr	r3, [r3, #16]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d01a      	beq.n	8009930 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009902:	e853 3f00 	ldrex	r3, [r3]
 8009906:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800990a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800990e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	461a      	mov	r2, r3
 8009918:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800991c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800991e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009920:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009922:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009924:	e841 2300 	strex	r3, r2, [r1]
 8009928:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800992a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800992c:	2b00      	cmp	r3, #0
 800992e:	d1e4      	bne.n	80098fa <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	3308      	adds	r3, #8
 8009936:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800993a:	e853 3f00 	ldrex	r3, [r3]
 800993e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009946:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	3308      	adds	r3, #8
 800994e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009950:	64ba      	str	r2, [r7, #72]	; 0x48
 8009952:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009954:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009956:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009958:	e841 2300 	strex	r3, r2, [r1]
 800995c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800995e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009960:	2b00      	cmp	r3, #0
 8009962:	d1e5      	bne.n	8009930 <UART_Start_Receive_IT+0x160>
 8009964:	e046      	b.n	80099f4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800996e:	d107      	bne.n	8009980 <UART_Start_Receive_IT+0x1b0>
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	691b      	ldr	r3, [r3, #16]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d103      	bne.n	8009980 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	4a24      	ldr	r2, [pc, #144]	; (8009a0c <UART_Start_Receive_IT+0x23c>)
 800997c:	675a      	str	r2, [r3, #116]	; 0x74
 800997e:	e002      	b.n	8009986 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	4a23      	ldr	r2, [pc, #140]	; (8009a10 <UART_Start_Receive_IT+0x240>)
 8009984:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d019      	beq.n	80099c2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009996:	e853 3f00 	ldrex	r3, [r3]
 800999a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800999c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80099a2:	677b      	str	r3, [r7, #116]	; 0x74
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	461a      	mov	r2, r3
 80099aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099ac:	637b      	str	r3, [r7, #52]	; 0x34
 80099ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80099b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099b4:	e841 2300 	strex	r3, r2, [r1]
 80099b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80099ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d1e6      	bne.n	800998e <UART_Start_Receive_IT+0x1be>
 80099c0:	e018      	b.n	80099f4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	e853 3f00 	ldrex	r3, [r3]
 80099ce:	613b      	str	r3, [r7, #16]
   return(result);
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	f043 0320 	orr.w	r3, r3, #32
 80099d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	461a      	mov	r2, r3
 80099de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099e0:	623b      	str	r3, [r7, #32]
 80099e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e4:	69f9      	ldr	r1, [r7, #28]
 80099e6:	6a3a      	ldr	r2, [r7, #32]
 80099e8:	e841 2300 	strex	r3, r2, [r1]
 80099ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80099ee:	69bb      	ldr	r3, [r7, #24]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d1e6      	bne.n	80099c2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80099f4:	2300      	movs	r3, #0
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	378c      	adds	r7, #140	; 0x8c
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	0800a235 	.word	0x0800a235
 8009a08:	08009ed5 	.word	0x08009ed5
 8009a0c:	08009d1d 	.word	0x08009d1d
 8009a10:	08009b65 	.word	0x08009b65

08009a14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b095      	sub	sp, #84	; 0x54
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a24:	e853 3f00 	ldrex	r3, [r3]
 8009a28:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	461a      	mov	r2, r3
 8009a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a3a:	643b      	str	r3, [r7, #64]	; 0x40
 8009a3c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a42:	e841 2300 	strex	r3, r2, [r1]
 8009a46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d1e6      	bne.n	8009a1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	3308      	adds	r3, #8
 8009a54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a56:	6a3b      	ldr	r3, [r7, #32]
 8009a58:	e853 3f00 	ldrex	r3, [r3]
 8009a5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a5e:	69fa      	ldr	r2, [r7, #28]
 8009a60:	4b1e      	ldr	r3, [pc, #120]	; (8009adc <UART_EndRxTransfer+0xc8>)
 8009a62:	4013      	ands	r3, r2
 8009a64:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	3308      	adds	r3, #8
 8009a6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a76:	e841 2300 	strex	r3, r2, [r1]
 8009a7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d1e5      	bne.n	8009a4e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d118      	bne.n	8009abc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	e853 3f00 	ldrex	r3, [r3]
 8009a96:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	f023 0310 	bic.w	r3, r3, #16
 8009a9e:	647b      	str	r3, [r7, #68]	; 0x44
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009aa8:	61bb      	str	r3, [r7, #24]
 8009aaa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aac:	6979      	ldr	r1, [r7, #20]
 8009aae:	69ba      	ldr	r2, [r7, #24]
 8009ab0:	e841 2300 	strex	r3, r2, [r1]
 8009ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d1e6      	bne.n	8009a8a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2220      	movs	r2, #32
 8009ac0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2200      	movs	r2, #0
 8009ace:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009ad0:	bf00      	nop
 8009ad2:	3754      	adds	r7, #84	; 0x54
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr
 8009adc:	effffffe 	.word	0xeffffffe

08009ae0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2200      	movs	r2, #0
 8009af2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2200      	movs	r2, #0
 8009afa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009afe:	68f8      	ldr	r0, [r7, #12]
 8009b00:	f7fe fe30 	bl	8008764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b04:	bf00      	nop
 8009b06:	3710      	adds	r7, #16
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b088      	sub	sp, #32
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	e853 3f00 	ldrex	r3, [r3]
 8009b20:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b28:	61fb      	str	r3, [r7, #28]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	461a      	mov	r2, r3
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	61bb      	str	r3, [r7, #24]
 8009b34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b36:	6979      	ldr	r1, [r7, #20]
 8009b38:	69ba      	ldr	r2, [r7, #24]
 8009b3a:	e841 2300 	strex	r3, r2, [r1]
 8009b3e:	613b      	str	r3, [r7, #16]
   return(result);
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d1e6      	bne.n	8009b14 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2220      	movs	r2, #32
 8009b4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f7fe fdfb 	bl	8008750 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b5a:	bf00      	nop
 8009b5c:	3720      	adds	r7, #32
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
	...

08009b64 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b09c      	sub	sp, #112	; 0x70
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009b72:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b7c:	2b22      	cmp	r3, #34	; 0x22
 8009b7e:	f040 80be 	bne.w	8009cfe <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b88:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009b8c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009b90:	b2d9      	uxtb	r1, r3
 8009b92:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009b96:	b2da      	uxtb	r2, r3
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b9c:	400a      	ands	r2, r1
 8009b9e:	b2d2      	uxtb	r2, r2
 8009ba0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ba6:	1c5a      	adds	r2, r3, #1
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	b29a      	uxth	r2, r3
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	f040 80a1 	bne.w	8009d0e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bd4:	e853 3f00 	ldrex	r3, [r3]
 8009bd8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009be0:	66bb      	str	r3, [r7, #104]	; 0x68
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	461a      	mov	r2, r3
 8009be8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009bea:	65bb      	str	r3, [r7, #88]	; 0x58
 8009bec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009bf0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009bf2:	e841 2300 	strex	r3, r2, [r1]
 8009bf6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d1e6      	bne.n	8009bcc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	3308      	adds	r3, #8
 8009c04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c08:	e853 3f00 	ldrex	r3, [r3]
 8009c0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c10:	f023 0301 	bic.w	r3, r3, #1
 8009c14:	667b      	str	r3, [r7, #100]	; 0x64
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	3308      	adds	r3, #8
 8009c1c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009c1e:	647a      	str	r2, [r7, #68]	; 0x44
 8009c20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009c24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c26:	e841 2300 	strex	r3, r2, [r1]
 8009c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1e5      	bne.n	8009bfe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2220      	movs	r2, #32
 8009c36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4a33      	ldr	r2, [pc, #204]	; (8009d18 <UART_RxISR_8BIT+0x1b4>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d01f      	beq.n	8009c90 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	685b      	ldr	r3, [r3, #4]
 8009c56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d018      	beq.n	8009c90 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c66:	e853 3f00 	ldrex	r3, [r3]
 8009c6a:	623b      	str	r3, [r7, #32]
   return(result);
 8009c6c:	6a3b      	ldr	r3, [r7, #32]
 8009c6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009c72:	663b      	str	r3, [r7, #96]	; 0x60
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	461a      	mov	r2, r3
 8009c7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c7c:	633b      	str	r3, [r7, #48]	; 0x30
 8009c7e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c84:	e841 2300 	strex	r3, r2, [r1]
 8009c88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d1e6      	bne.n	8009c5e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d12e      	bne.n	8009cf6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	e853 3f00 	ldrex	r3, [r3]
 8009caa:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f023 0310 	bic.w	r3, r3, #16
 8009cb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	461a      	mov	r2, r3
 8009cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cbc:	61fb      	str	r3, [r7, #28]
 8009cbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc0:	69b9      	ldr	r1, [r7, #24]
 8009cc2:	69fa      	ldr	r2, [r7, #28]
 8009cc4:	e841 2300 	strex	r3, r2, [r1]
 8009cc8:	617b      	str	r3, [r7, #20]
   return(result);
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d1e6      	bne.n	8009c9e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	69db      	ldr	r3, [r3, #28]
 8009cd6:	f003 0310 	and.w	r3, r3, #16
 8009cda:	2b10      	cmp	r3, #16
 8009cdc:	d103      	bne.n	8009ce6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	2210      	movs	r2, #16
 8009ce4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009cec:	4619      	mov	r1, r3
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f7fe fd42 	bl	8008778 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009cf4:	e00b      	b.n	8009d0e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f7f6 fd18 	bl	800072c <HAL_UART_RxCpltCallback>
}
 8009cfc:	e007      	b.n	8009d0e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	699a      	ldr	r2, [r3, #24]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f042 0208 	orr.w	r2, r2, #8
 8009d0c:	619a      	str	r2, [r3, #24]
}
 8009d0e:	bf00      	nop
 8009d10:	3770      	adds	r7, #112	; 0x70
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	58000c00 	.word	0x58000c00

08009d1c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b09c      	sub	sp, #112	; 0x70
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009d2a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d34:	2b22      	cmp	r3, #34	; 0x22
 8009d36:	f040 80be 	bne.w	8009eb6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d40:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d48:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009d4a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009d4e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009d52:	4013      	ands	r3, r2
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d58:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d5e:	1c9a      	adds	r2, r3, #2
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	f040 80a1 	bne.w	8009ec6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d8c:	e853 3f00 	ldrex	r3, [r3]
 8009d90:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d98:	667b      	str	r3, [r7, #100]	; 0x64
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	461a      	mov	r2, r3
 8009da0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009da2:	657b      	str	r3, [r7, #84]	; 0x54
 8009da4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009da8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009daa:	e841 2300 	strex	r3, r2, [r1]
 8009dae:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d1e6      	bne.n	8009d84 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	3308      	adds	r3, #8
 8009dbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dc0:	e853 3f00 	ldrex	r3, [r3]
 8009dc4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc8:	f023 0301 	bic.w	r3, r3, #1
 8009dcc:	663b      	str	r3, [r7, #96]	; 0x60
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	3308      	adds	r3, #8
 8009dd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009dd6:	643a      	str	r2, [r7, #64]	; 0x40
 8009dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009ddc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009dde:	e841 2300 	strex	r3, r2, [r1]
 8009de2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d1e5      	bne.n	8009db6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2220      	movs	r2, #32
 8009dee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2200      	movs	r2, #0
 8009df6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a33      	ldr	r2, [pc, #204]	; (8009ed0 <UART_RxISR_16BIT+0x1b4>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d01f      	beq.n	8009e48 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d018      	beq.n	8009e48 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e1c:	6a3b      	ldr	r3, [r7, #32]
 8009e1e:	e853 3f00 	ldrex	r3, [r3]
 8009e22:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009e2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	461a      	mov	r2, r3
 8009e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e36:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e3c:	e841 2300 	strex	r3, r2, [r1]
 8009e40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d1e6      	bne.n	8009e16 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d12e      	bne.n	8009eae <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	e853 3f00 	ldrex	r3, [r3]
 8009e62:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	f023 0310 	bic.w	r3, r3, #16
 8009e6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	461a      	mov	r2, r3
 8009e72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e74:	61bb      	str	r3, [r7, #24]
 8009e76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e78:	6979      	ldr	r1, [r7, #20]
 8009e7a:	69ba      	ldr	r2, [r7, #24]
 8009e7c:	e841 2300 	strex	r3, r2, [r1]
 8009e80:	613b      	str	r3, [r7, #16]
   return(result);
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d1e6      	bne.n	8009e56 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	69db      	ldr	r3, [r3, #28]
 8009e8e:	f003 0310 	and.w	r3, r3, #16
 8009e92:	2b10      	cmp	r3, #16
 8009e94:	d103      	bne.n	8009e9e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	2210      	movs	r2, #16
 8009e9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f7fe fc66 	bl	8008778 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009eac:	e00b      	b.n	8009ec6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f7f6 fc3c 	bl	800072c <HAL_UART_RxCpltCallback>
}
 8009eb4:	e007      	b.n	8009ec6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	699a      	ldr	r2, [r3, #24]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f042 0208 	orr.w	r2, r2, #8
 8009ec4:	619a      	str	r2, [r3, #24]
}
 8009ec6:	bf00      	nop
 8009ec8:	3770      	adds	r7, #112	; 0x70
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	58000c00 	.word	0x58000c00

08009ed4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b0ac      	sub	sp, #176	; 0xb0
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009ee2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	69db      	ldr	r3, [r3, #28]
 8009eec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	689b      	ldr	r3, [r3, #8]
 8009f00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f0a:	2b22      	cmp	r3, #34	; 0x22
 8009f0c:	f040 8180 	bne.w	800a210 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009f16:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f1a:	e123      	b.n	800a164 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f22:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009f26:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8009f2a:	b2d9      	uxtb	r1, r3
 8009f2c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009f30:	b2da      	uxtb	r2, r3
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f36:	400a      	ands	r2, r1
 8009f38:	b2d2      	uxtb	r2, r2
 8009f3a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f40:	1c5a      	adds	r2, r3, #1
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	3b01      	subs	r3, #1
 8009f50:	b29a      	uxth	r2, r3
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	69db      	ldr	r3, [r3, #28]
 8009f5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009f62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f66:	f003 0307 	and.w	r3, r3, #7
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d053      	beq.n	800a016 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f72:	f003 0301 	and.w	r3, r3, #1
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d011      	beq.n	8009f9e <UART_RxISR_8BIT_FIFOEN+0xca>
 8009f7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d00b      	beq.n	8009f9e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f94:	f043 0201 	orr.w	r2, r3, #1
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009fa2:	f003 0302 	and.w	r3, r3, #2
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d011      	beq.n	8009fce <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009faa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009fae:	f003 0301 	and.w	r3, r3, #1
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d00b      	beq.n	8009fce <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	2202      	movs	r2, #2
 8009fbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fc4:	f043 0204 	orr.w	r2, r3, #4
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009fd2:	f003 0304 	and.w	r3, r3, #4
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d011      	beq.n	8009ffe <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009fda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009fde:	f003 0301 	and.w	r3, r3, #1
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d00b      	beq.n	8009ffe <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2204      	movs	r2, #4
 8009fec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ff4:	f043 0202 	orr.w	r2, r3, #2
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a004:	2b00      	cmp	r3, #0
 800a006:	d006      	beq.n	800a016 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f7fe fbab 	bl	8008764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2200      	movs	r2, #0
 800a012:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	2b00      	cmp	r3, #0
 800a020:	f040 80a0 	bne.w	800a164 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a02c:	e853 3f00 	ldrex	r3, [r3]
 800a030:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800a032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a038:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	461a      	mov	r2, r3
 800a042:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a046:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a048:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800a04c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a04e:	e841 2300 	strex	r3, r2, [r1]
 800a052:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800a054:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a056:	2b00      	cmp	r3, #0
 800a058:	d1e4      	bne.n	800a024 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	3308      	adds	r3, #8
 800a060:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a064:	e853 3f00 	ldrex	r3, [r3]
 800a068:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800a06a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a06c:	4b6e      	ldr	r3, [pc, #440]	; (800a228 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800a06e:	4013      	ands	r3, r2
 800a070:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	3308      	adds	r3, #8
 800a07a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a07e:	66ba      	str	r2, [r7, #104]	; 0x68
 800a080:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a082:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a084:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a086:	e841 2300 	strex	r3, r2, [r1]
 800a08a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a08c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d1e3      	bne.n	800a05a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2220      	movs	r2, #32
 800a096:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2200      	movs	r2, #0
 800a09e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a60      	ldr	r2, [pc, #384]	; (800a22c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d021      	beq.n	800a0f4 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d01a      	beq.n	800a0f4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0c6:	e853 3f00 	ldrex	r3, [r3]
 800a0ca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a0cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a0d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	461a      	mov	r2, r3
 800a0dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a0e0:	657b      	str	r3, [r7, #84]	; 0x54
 800a0e2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a0e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a0e8:	e841 2300 	strex	r3, r2, [r1]
 800a0ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a0ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d1e4      	bne.n	800a0be <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d130      	bne.n	800a15e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a10a:	e853 3f00 	ldrex	r3, [r3]
 800a10e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a112:	f023 0310 	bic.w	r3, r3, #16
 800a116:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	461a      	mov	r2, r3
 800a120:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a124:	643b      	str	r3, [r7, #64]	; 0x40
 800a126:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a128:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a12a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a12c:	e841 2300 	strex	r3, r2, [r1]
 800a130:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a134:	2b00      	cmp	r3, #0
 800a136:	d1e4      	bne.n	800a102 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	69db      	ldr	r3, [r3, #28]
 800a13e:	f003 0310 	and.w	r3, r3, #16
 800a142:	2b10      	cmp	r3, #16
 800a144:	d103      	bne.n	800a14e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	2210      	movs	r2, #16
 800a14c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a154:	4619      	mov	r1, r3
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f7fe fb0e 	bl	8008778 <HAL_UARTEx_RxEventCallback>
 800a15c:	e002      	b.n	800a164 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f7f6 fae4 	bl	800072c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a164:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d006      	beq.n	800a17a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800a16c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a170:	f003 0320 	and.w	r3, r3, #32
 800a174:	2b00      	cmp	r3, #0
 800a176:	f47f aed1 	bne.w	8009f1c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a180:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a184:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d049      	beq.n	800a220 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a192:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800a196:	429a      	cmp	r2, r3
 800a198:	d242      	bcs.n	800a220 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	3308      	adds	r3, #8
 800a1a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a2:	6a3b      	ldr	r3, [r7, #32]
 800a1a4:	e853 3f00 	ldrex	r3, [r3]
 800a1a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	3308      	adds	r3, #8
 800a1ba:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a1be:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a1c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1c6:	e841 2300 	strex	r3, r2, [r1]
 800a1ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1e3      	bne.n	800a19a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4a16      	ldr	r2, [pc, #88]	; (800a230 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800a1d6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	e853 3f00 	ldrex	r3, [r3]
 800a1e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	f043 0320 	orr.w	r3, r3, #32
 800a1ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a1fa:	61bb      	str	r3, [r7, #24]
 800a1fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1fe:	6979      	ldr	r1, [r7, #20]
 800a200:	69ba      	ldr	r2, [r7, #24]
 800a202:	e841 2300 	strex	r3, r2, [r1]
 800a206:	613b      	str	r3, [r7, #16]
   return(result);
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d1e4      	bne.n	800a1d8 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a20e:	e007      	b.n	800a220 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	699a      	ldr	r2, [r3, #24]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f042 0208 	orr.w	r2, r2, #8
 800a21e:	619a      	str	r2, [r3, #24]
}
 800a220:	bf00      	nop
 800a222:	37b0      	adds	r7, #176	; 0xb0
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	effffffe 	.word	0xeffffffe
 800a22c:	58000c00 	.word	0x58000c00
 800a230:	08009b65 	.word	0x08009b65

0800a234 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b0ae      	sub	sp, #184	; 0xb8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a242:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	69db      	ldr	r3, [r3, #28]
 800a24c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	689b      	ldr	r3, [r3, #8]
 800a260:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a26a:	2b22      	cmp	r3, #34	; 0x22
 800a26c:	f040 8184 	bne.w	800a578 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a276:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a27a:	e127      	b.n	800a4cc <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a282:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a28a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a28e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800a292:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800a296:	4013      	ands	r3, r2
 800a298:	b29a      	uxth	r2, r3
 800a29a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a29e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2a4:	1c9a      	adds	r2, r3, #2
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	3b01      	subs	r3, #1
 800a2b4:	b29a      	uxth	r2, r3
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	69db      	ldr	r3, [r3, #28]
 800a2c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a2c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a2ca:	f003 0307 	and.w	r3, r3, #7
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d053      	beq.n	800a37a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a2d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a2d6:	f003 0301 	and.w	r3, r3, #1
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d011      	beq.n	800a302 <UART_RxISR_16BIT_FIFOEN+0xce>
 800a2de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a2e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00b      	beq.n	800a302 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2f8:	f043 0201 	orr.w	r2, r3, #1
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a302:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a306:	f003 0302 	and.w	r3, r3, #2
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d011      	beq.n	800a332 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a30e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a312:	f003 0301 	and.w	r3, r3, #1
 800a316:	2b00      	cmp	r3, #0
 800a318:	d00b      	beq.n	800a332 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2202      	movs	r2, #2
 800a320:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a328:	f043 0204 	orr.w	r2, r3, #4
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a332:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a336:	f003 0304 	and.w	r3, r3, #4
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d011      	beq.n	800a362 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a33e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a342:	f003 0301 	and.w	r3, r3, #1
 800a346:	2b00      	cmp	r3, #0
 800a348:	d00b      	beq.n	800a362 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	2204      	movs	r2, #4
 800a350:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a358:	f043 0202 	orr.w	r2, r3, #2
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d006      	beq.n	800a37a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f7fe f9f9 	bl	8008764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2200      	movs	r2, #0
 800a376:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a380:	b29b      	uxth	r3, r3
 800a382:	2b00      	cmp	r3, #0
 800a384:	f040 80a2 	bne.w	800a4cc <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a390:	e853 3f00 	ldrex	r3, [r3]
 800a394:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a39c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a3aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a3ae:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a3b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a3b6:	e841 2300 	strex	r3, r2, [r1]
 800a3ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a3bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d1e2      	bne.n	800a388 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	3308      	adds	r3, #8
 800a3c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3cc:	e853 3f00 	ldrex	r3, [r3]
 800a3d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a3d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a3d4:	4b6e      	ldr	r3, [pc, #440]	; (800a590 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800a3d6:	4013      	ands	r3, r2
 800a3d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	3308      	adds	r3, #8
 800a3e2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a3e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a3e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a3ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a3ee:	e841 2300 	strex	r3, r2, [r1]
 800a3f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a3f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d1e3      	bne.n	800a3c2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2220      	movs	r2, #32
 800a3fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2200      	movs	r2, #0
 800a40c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4a60      	ldr	r2, [pc, #384]	; (800a594 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d021      	beq.n	800a45c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a422:	2b00      	cmp	r3, #0
 800a424:	d01a      	beq.n	800a45c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a42c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a42e:	e853 3f00 	ldrex	r3, [r3]
 800a432:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a436:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a43a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	461a      	mov	r2, r3
 800a444:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a448:	65bb      	str	r3, [r7, #88]	; 0x58
 800a44a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a44c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a44e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a450:	e841 2300 	strex	r3, r2, [r1]
 800a454:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d1e4      	bne.n	800a426 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a460:	2b01      	cmp	r3, #1
 800a462:	d130      	bne.n	800a4c6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2200      	movs	r2, #0
 800a468:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a472:	e853 3f00 	ldrex	r3, [r3]
 800a476:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a47a:	f023 0310 	bic.w	r3, r3, #16
 800a47e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	461a      	mov	r2, r3
 800a488:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a48c:	647b      	str	r3, [r7, #68]	; 0x44
 800a48e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a490:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a492:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a494:	e841 2300 	strex	r3, r2, [r1]
 800a498:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a49a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d1e4      	bne.n	800a46a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	69db      	ldr	r3, [r3, #28]
 800a4a6:	f003 0310 	and.w	r3, r3, #16
 800a4aa:	2b10      	cmp	r3, #16
 800a4ac:	d103      	bne.n	800a4b6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	2210      	movs	r2, #16
 800a4b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a4bc:	4619      	mov	r1, r3
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f7fe f95a 	bl	8008778 <HAL_UARTEx_RxEventCallback>
 800a4c4:	e002      	b.n	800a4cc <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f7f6 f930 	bl	800072c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a4cc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d006      	beq.n	800a4e2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800a4d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a4d8:	f003 0320 	and.w	r3, r3, #32
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f47f aecd 	bne.w	800a27c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a4e8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a4ec:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d049      	beq.n	800a588 <UART_RxISR_16BIT_FIFOEN+0x354>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a4fa:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d242      	bcs.n	800a588 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	3308      	adds	r3, #8
 800a508:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50c:	e853 3f00 	ldrex	r3, [r3]
 800a510:	623b      	str	r3, [r7, #32]
   return(result);
 800a512:	6a3b      	ldr	r3, [r7, #32]
 800a514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a518:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	3308      	adds	r3, #8
 800a522:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a526:	633a      	str	r2, [r7, #48]	; 0x30
 800a528:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a52a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a52c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a52e:	e841 2300 	strex	r3, r2, [r1]
 800a532:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a536:	2b00      	cmp	r3, #0
 800a538:	d1e3      	bne.n	800a502 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	4a16      	ldr	r2, [pc, #88]	; (800a598 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a53e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	e853 3f00 	ldrex	r3, [r3]
 800a54c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f043 0320 	orr.w	r3, r3, #32
 800a554:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	461a      	mov	r2, r3
 800a55e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a562:	61fb      	str	r3, [r7, #28]
 800a564:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a566:	69b9      	ldr	r1, [r7, #24]
 800a568:	69fa      	ldr	r2, [r7, #28]
 800a56a:	e841 2300 	strex	r3, r2, [r1]
 800a56e:	617b      	str	r3, [r7, #20]
   return(result);
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d1e4      	bne.n	800a540 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a576:	e007      	b.n	800a588 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	699a      	ldr	r2, [r3, #24]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f042 0208 	orr.w	r2, r2, #8
 800a586:	619a      	str	r2, [r3, #24]
}
 800a588:	bf00      	nop
 800a58a:	37b8      	adds	r7, #184	; 0xb8
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	effffffe 	.word	0xeffffffe
 800a594:	58000c00 	.word	0x58000c00
 800a598:	08009d1d 	.word	0x08009d1d

0800a59c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a5a4:	bf00      	nop
 800a5a6:	370c      	adds	r7, #12
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b083      	sub	sp, #12
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a5b8:	bf00      	nop
 800a5ba:	370c      	adds	r7, #12
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b083      	sub	sp, #12
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a5cc:	bf00      	nop
 800a5ce:	370c      	adds	r7, #12
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr

0800a5d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b085      	sub	sp, #20
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d101      	bne.n	800a5ee <HAL_UARTEx_DisableFifoMode+0x16>
 800a5ea:	2302      	movs	r3, #2
 800a5ec:	e027      	b.n	800a63e <HAL_UARTEx_DisableFifoMode+0x66>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2224      	movs	r2, #36	; 0x24
 800a5fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f022 0201 	bic.w	r2, r2, #1
 800a614:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a61c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	68fa      	ldr	r2, [r7, #12]
 800a62a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2220      	movs	r2, #32
 800a630:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2200      	movs	r2, #0
 800a638:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a63c:	2300      	movs	r3, #0
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3714      	adds	r7, #20
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr

0800a64a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a64a:	b580      	push	{r7, lr}
 800a64c:	b084      	sub	sp, #16
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
 800a652:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d101      	bne.n	800a662 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a65e:	2302      	movs	r3, #2
 800a660:	e02d      	b.n	800a6be <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2201      	movs	r2, #1
 800a666:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2224      	movs	r2, #36	; 0x24
 800a66e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f022 0201 	bic.w	r2, r2, #1
 800a688:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	683a      	ldr	r2, [r7, #0]
 800a69a:	430a      	orrs	r2, r1
 800a69c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 f850 	bl	800a744 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2220      	movs	r2, #32
 800a6b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a6bc:	2300      	movs	r3, #0
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3710      	adds	r7, #16
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b084      	sub	sp, #16
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
 800a6ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d101      	bne.n	800a6de <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a6da:	2302      	movs	r3, #2
 800a6dc:	e02d      	b.n	800a73a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2224      	movs	r2, #36	; 0x24
 800a6ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f022 0201 	bic.w	r2, r2, #1
 800a704:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	683a      	ldr	r2, [r7, #0]
 800a716:	430a      	orrs	r2, r1
 800a718:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f000 f812 	bl	800a744 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	68fa      	ldr	r2, [r7, #12]
 800a726:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2220      	movs	r2, #32
 800a72c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2200      	movs	r2, #0
 800a734:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3710      	adds	r7, #16
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
	...

0800a744 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a744:	b480      	push	{r7}
 800a746:	b085      	sub	sp, #20
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a750:	2b00      	cmp	r3, #0
 800a752:	d108      	bne.n	800a766 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2201      	movs	r2, #1
 800a760:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a764:	e031      	b.n	800a7ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a766:	2310      	movs	r3, #16
 800a768:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a76a:	2310      	movs	r3, #16
 800a76c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	0e5b      	lsrs	r3, r3, #25
 800a776:	b2db      	uxtb	r3, r3
 800a778:	f003 0307 	and.w	r3, r3, #7
 800a77c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	0f5b      	lsrs	r3, r3, #29
 800a786:	b2db      	uxtb	r3, r3
 800a788:	f003 0307 	and.w	r3, r3, #7
 800a78c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a78e:	7bbb      	ldrb	r3, [r7, #14]
 800a790:	7b3a      	ldrb	r2, [r7, #12]
 800a792:	4911      	ldr	r1, [pc, #68]	; (800a7d8 <UARTEx_SetNbDataToProcess+0x94>)
 800a794:	5c8a      	ldrb	r2, [r1, r2]
 800a796:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a79a:	7b3a      	ldrb	r2, [r7, #12]
 800a79c:	490f      	ldr	r1, [pc, #60]	; (800a7dc <UARTEx_SetNbDataToProcess+0x98>)
 800a79e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a7a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a7a4:	b29a      	uxth	r2, r3
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a7ac:	7bfb      	ldrb	r3, [r7, #15]
 800a7ae:	7b7a      	ldrb	r2, [r7, #13]
 800a7b0:	4909      	ldr	r1, [pc, #36]	; (800a7d8 <UARTEx_SetNbDataToProcess+0x94>)
 800a7b2:	5c8a      	ldrb	r2, [r1, r2]
 800a7b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a7b8:	7b7a      	ldrb	r2, [r7, #13]
 800a7ba:	4908      	ldr	r1, [pc, #32]	; (800a7dc <UARTEx_SetNbDataToProcess+0x98>)
 800a7bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a7be:	fb93 f3f2 	sdiv	r3, r3, r2
 800a7c2:	b29a      	uxth	r2, r3
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a7ca:	bf00      	nop
 800a7cc:	3714      	adds	r7, #20
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d4:	4770      	bx	lr
 800a7d6:	bf00      	nop
 800a7d8:	0800b16c 	.word	0x0800b16c
 800a7dc:	0800b174 	.word	0x0800b174

0800a7e0 <siprintf>:
 800a7e0:	b40e      	push	{r1, r2, r3}
 800a7e2:	b500      	push	{lr}
 800a7e4:	b09c      	sub	sp, #112	; 0x70
 800a7e6:	ab1d      	add	r3, sp, #116	; 0x74
 800a7e8:	9002      	str	r0, [sp, #8]
 800a7ea:	9006      	str	r0, [sp, #24]
 800a7ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a7f0:	4809      	ldr	r0, [pc, #36]	; (800a818 <siprintf+0x38>)
 800a7f2:	9107      	str	r1, [sp, #28]
 800a7f4:	9104      	str	r1, [sp, #16]
 800a7f6:	4909      	ldr	r1, [pc, #36]	; (800a81c <siprintf+0x3c>)
 800a7f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7fc:	9105      	str	r1, [sp, #20]
 800a7fe:	6800      	ldr	r0, [r0, #0]
 800a800:	9301      	str	r3, [sp, #4]
 800a802:	a902      	add	r1, sp, #8
 800a804:	f000 f992 	bl	800ab2c <_svfiprintf_r>
 800a808:	9b02      	ldr	r3, [sp, #8]
 800a80a:	2200      	movs	r2, #0
 800a80c:	701a      	strb	r2, [r3, #0]
 800a80e:	b01c      	add	sp, #112	; 0x70
 800a810:	f85d eb04 	ldr.w	lr, [sp], #4
 800a814:	b003      	add	sp, #12
 800a816:	4770      	bx	lr
 800a818:	24000064 	.word	0x24000064
 800a81c:	ffff0208 	.word	0xffff0208

0800a820 <memset>:
 800a820:	4402      	add	r2, r0
 800a822:	4603      	mov	r3, r0
 800a824:	4293      	cmp	r3, r2
 800a826:	d100      	bne.n	800a82a <memset+0xa>
 800a828:	4770      	bx	lr
 800a82a:	f803 1b01 	strb.w	r1, [r3], #1
 800a82e:	e7f9      	b.n	800a824 <memset+0x4>

0800a830 <__errno>:
 800a830:	4b01      	ldr	r3, [pc, #4]	; (800a838 <__errno+0x8>)
 800a832:	6818      	ldr	r0, [r3, #0]
 800a834:	4770      	bx	lr
 800a836:	bf00      	nop
 800a838:	24000064 	.word	0x24000064

0800a83c <__libc_init_array>:
 800a83c:	b570      	push	{r4, r5, r6, lr}
 800a83e:	4d0d      	ldr	r5, [pc, #52]	; (800a874 <__libc_init_array+0x38>)
 800a840:	4c0d      	ldr	r4, [pc, #52]	; (800a878 <__libc_init_array+0x3c>)
 800a842:	1b64      	subs	r4, r4, r5
 800a844:	10a4      	asrs	r4, r4, #2
 800a846:	2600      	movs	r6, #0
 800a848:	42a6      	cmp	r6, r4
 800a84a:	d109      	bne.n	800a860 <__libc_init_array+0x24>
 800a84c:	4d0b      	ldr	r5, [pc, #44]	; (800a87c <__libc_init_array+0x40>)
 800a84e:	4c0c      	ldr	r4, [pc, #48]	; (800a880 <__libc_init_array+0x44>)
 800a850:	f000 fc6a 	bl	800b128 <_init>
 800a854:	1b64      	subs	r4, r4, r5
 800a856:	10a4      	asrs	r4, r4, #2
 800a858:	2600      	movs	r6, #0
 800a85a:	42a6      	cmp	r6, r4
 800a85c:	d105      	bne.n	800a86a <__libc_init_array+0x2e>
 800a85e:	bd70      	pop	{r4, r5, r6, pc}
 800a860:	f855 3b04 	ldr.w	r3, [r5], #4
 800a864:	4798      	blx	r3
 800a866:	3601      	adds	r6, #1
 800a868:	e7ee      	b.n	800a848 <__libc_init_array+0xc>
 800a86a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a86e:	4798      	blx	r3
 800a870:	3601      	adds	r6, #1
 800a872:	e7f2      	b.n	800a85a <__libc_init_array+0x1e>
 800a874:	0800b1b8 	.word	0x0800b1b8
 800a878:	0800b1b8 	.word	0x0800b1b8
 800a87c:	0800b1b8 	.word	0x0800b1b8
 800a880:	0800b1bc 	.word	0x0800b1bc

0800a884 <__retarget_lock_acquire_recursive>:
 800a884:	4770      	bx	lr

0800a886 <__retarget_lock_release_recursive>:
 800a886:	4770      	bx	lr

0800a888 <_free_r>:
 800a888:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a88a:	2900      	cmp	r1, #0
 800a88c:	d044      	beq.n	800a918 <_free_r+0x90>
 800a88e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a892:	9001      	str	r0, [sp, #4]
 800a894:	2b00      	cmp	r3, #0
 800a896:	f1a1 0404 	sub.w	r4, r1, #4
 800a89a:	bfb8      	it	lt
 800a89c:	18e4      	addlt	r4, r4, r3
 800a89e:	f000 f8df 	bl	800aa60 <__malloc_lock>
 800a8a2:	4a1e      	ldr	r2, [pc, #120]	; (800a91c <_free_r+0x94>)
 800a8a4:	9801      	ldr	r0, [sp, #4]
 800a8a6:	6813      	ldr	r3, [r2, #0]
 800a8a8:	b933      	cbnz	r3, 800a8b8 <_free_r+0x30>
 800a8aa:	6063      	str	r3, [r4, #4]
 800a8ac:	6014      	str	r4, [r2, #0]
 800a8ae:	b003      	add	sp, #12
 800a8b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8b4:	f000 b8da 	b.w	800aa6c <__malloc_unlock>
 800a8b8:	42a3      	cmp	r3, r4
 800a8ba:	d908      	bls.n	800a8ce <_free_r+0x46>
 800a8bc:	6825      	ldr	r5, [r4, #0]
 800a8be:	1961      	adds	r1, r4, r5
 800a8c0:	428b      	cmp	r3, r1
 800a8c2:	bf01      	itttt	eq
 800a8c4:	6819      	ldreq	r1, [r3, #0]
 800a8c6:	685b      	ldreq	r3, [r3, #4]
 800a8c8:	1949      	addeq	r1, r1, r5
 800a8ca:	6021      	streq	r1, [r4, #0]
 800a8cc:	e7ed      	b.n	800a8aa <_free_r+0x22>
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	b10b      	cbz	r3, 800a8d8 <_free_r+0x50>
 800a8d4:	42a3      	cmp	r3, r4
 800a8d6:	d9fa      	bls.n	800a8ce <_free_r+0x46>
 800a8d8:	6811      	ldr	r1, [r2, #0]
 800a8da:	1855      	adds	r5, r2, r1
 800a8dc:	42a5      	cmp	r5, r4
 800a8de:	d10b      	bne.n	800a8f8 <_free_r+0x70>
 800a8e0:	6824      	ldr	r4, [r4, #0]
 800a8e2:	4421      	add	r1, r4
 800a8e4:	1854      	adds	r4, r2, r1
 800a8e6:	42a3      	cmp	r3, r4
 800a8e8:	6011      	str	r1, [r2, #0]
 800a8ea:	d1e0      	bne.n	800a8ae <_free_r+0x26>
 800a8ec:	681c      	ldr	r4, [r3, #0]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	6053      	str	r3, [r2, #4]
 800a8f2:	440c      	add	r4, r1
 800a8f4:	6014      	str	r4, [r2, #0]
 800a8f6:	e7da      	b.n	800a8ae <_free_r+0x26>
 800a8f8:	d902      	bls.n	800a900 <_free_r+0x78>
 800a8fa:	230c      	movs	r3, #12
 800a8fc:	6003      	str	r3, [r0, #0]
 800a8fe:	e7d6      	b.n	800a8ae <_free_r+0x26>
 800a900:	6825      	ldr	r5, [r4, #0]
 800a902:	1961      	adds	r1, r4, r5
 800a904:	428b      	cmp	r3, r1
 800a906:	bf04      	itt	eq
 800a908:	6819      	ldreq	r1, [r3, #0]
 800a90a:	685b      	ldreq	r3, [r3, #4]
 800a90c:	6063      	str	r3, [r4, #4]
 800a90e:	bf04      	itt	eq
 800a910:	1949      	addeq	r1, r1, r5
 800a912:	6021      	streq	r1, [r4, #0]
 800a914:	6054      	str	r4, [r2, #4]
 800a916:	e7ca      	b.n	800a8ae <_free_r+0x26>
 800a918:	b003      	add	sp, #12
 800a91a:	bd30      	pop	{r4, r5, pc}
 800a91c:	2401d894 	.word	0x2401d894

0800a920 <sbrk_aligned>:
 800a920:	b570      	push	{r4, r5, r6, lr}
 800a922:	4e0e      	ldr	r6, [pc, #56]	; (800a95c <sbrk_aligned+0x3c>)
 800a924:	460c      	mov	r4, r1
 800a926:	6831      	ldr	r1, [r6, #0]
 800a928:	4605      	mov	r5, r0
 800a92a:	b911      	cbnz	r1, 800a932 <sbrk_aligned+0x12>
 800a92c:	f000 fba6 	bl	800b07c <_sbrk_r>
 800a930:	6030      	str	r0, [r6, #0]
 800a932:	4621      	mov	r1, r4
 800a934:	4628      	mov	r0, r5
 800a936:	f000 fba1 	bl	800b07c <_sbrk_r>
 800a93a:	1c43      	adds	r3, r0, #1
 800a93c:	d00a      	beq.n	800a954 <sbrk_aligned+0x34>
 800a93e:	1cc4      	adds	r4, r0, #3
 800a940:	f024 0403 	bic.w	r4, r4, #3
 800a944:	42a0      	cmp	r0, r4
 800a946:	d007      	beq.n	800a958 <sbrk_aligned+0x38>
 800a948:	1a21      	subs	r1, r4, r0
 800a94a:	4628      	mov	r0, r5
 800a94c:	f000 fb96 	bl	800b07c <_sbrk_r>
 800a950:	3001      	adds	r0, #1
 800a952:	d101      	bne.n	800a958 <sbrk_aligned+0x38>
 800a954:	f04f 34ff 	mov.w	r4, #4294967295
 800a958:	4620      	mov	r0, r4
 800a95a:	bd70      	pop	{r4, r5, r6, pc}
 800a95c:	2401d898 	.word	0x2401d898

0800a960 <_malloc_r>:
 800a960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a964:	1ccd      	adds	r5, r1, #3
 800a966:	f025 0503 	bic.w	r5, r5, #3
 800a96a:	3508      	adds	r5, #8
 800a96c:	2d0c      	cmp	r5, #12
 800a96e:	bf38      	it	cc
 800a970:	250c      	movcc	r5, #12
 800a972:	2d00      	cmp	r5, #0
 800a974:	4607      	mov	r7, r0
 800a976:	db01      	blt.n	800a97c <_malloc_r+0x1c>
 800a978:	42a9      	cmp	r1, r5
 800a97a:	d905      	bls.n	800a988 <_malloc_r+0x28>
 800a97c:	230c      	movs	r3, #12
 800a97e:	603b      	str	r3, [r7, #0]
 800a980:	2600      	movs	r6, #0
 800a982:	4630      	mov	r0, r6
 800a984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a988:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aa5c <_malloc_r+0xfc>
 800a98c:	f000 f868 	bl	800aa60 <__malloc_lock>
 800a990:	f8d8 3000 	ldr.w	r3, [r8]
 800a994:	461c      	mov	r4, r3
 800a996:	bb5c      	cbnz	r4, 800a9f0 <_malloc_r+0x90>
 800a998:	4629      	mov	r1, r5
 800a99a:	4638      	mov	r0, r7
 800a99c:	f7ff ffc0 	bl	800a920 <sbrk_aligned>
 800a9a0:	1c43      	adds	r3, r0, #1
 800a9a2:	4604      	mov	r4, r0
 800a9a4:	d155      	bne.n	800aa52 <_malloc_r+0xf2>
 800a9a6:	f8d8 4000 	ldr.w	r4, [r8]
 800a9aa:	4626      	mov	r6, r4
 800a9ac:	2e00      	cmp	r6, #0
 800a9ae:	d145      	bne.n	800aa3c <_malloc_r+0xdc>
 800a9b0:	2c00      	cmp	r4, #0
 800a9b2:	d048      	beq.n	800aa46 <_malloc_r+0xe6>
 800a9b4:	6823      	ldr	r3, [r4, #0]
 800a9b6:	4631      	mov	r1, r6
 800a9b8:	4638      	mov	r0, r7
 800a9ba:	eb04 0903 	add.w	r9, r4, r3
 800a9be:	f000 fb5d 	bl	800b07c <_sbrk_r>
 800a9c2:	4581      	cmp	r9, r0
 800a9c4:	d13f      	bne.n	800aa46 <_malloc_r+0xe6>
 800a9c6:	6821      	ldr	r1, [r4, #0]
 800a9c8:	1a6d      	subs	r5, r5, r1
 800a9ca:	4629      	mov	r1, r5
 800a9cc:	4638      	mov	r0, r7
 800a9ce:	f7ff ffa7 	bl	800a920 <sbrk_aligned>
 800a9d2:	3001      	adds	r0, #1
 800a9d4:	d037      	beq.n	800aa46 <_malloc_r+0xe6>
 800a9d6:	6823      	ldr	r3, [r4, #0]
 800a9d8:	442b      	add	r3, r5
 800a9da:	6023      	str	r3, [r4, #0]
 800a9dc:	f8d8 3000 	ldr.w	r3, [r8]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d038      	beq.n	800aa56 <_malloc_r+0xf6>
 800a9e4:	685a      	ldr	r2, [r3, #4]
 800a9e6:	42a2      	cmp	r2, r4
 800a9e8:	d12b      	bne.n	800aa42 <_malloc_r+0xe2>
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	605a      	str	r2, [r3, #4]
 800a9ee:	e00f      	b.n	800aa10 <_malloc_r+0xb0>
 800a9f0:	6822      	ldr	r2, [r4, #0]
 800a9f2:	1b52      	subs	r2, r2, r5
 800a9f4:	d41f      	bmi.n	800aa36 <_malloc_r+0xd6>
 800a9f6:	2a0b      	cmp	r2, #11
 800a9f8:	d917      	bls.n	800aa2a <_malloc_r+0xca>
 800a9fa:	1961      	adds	r1, r4, r5
 800a9fc:	42a3      	cmp	r3, r4
 800a9fe:	6025      	str	r5, [r4, #0]
 800aa00:	bf18      	it	ne
 800aa02:	6059      	strne	r1, [r3, #4]
 800aa04:	6863      	ldr	r3, [r4, #4]
 800aa06:	bf08      	it	eq
 800aa08:	f8c8 1000 	streq.w	r1, [r8]
 800aa0c:	5162      	str	r2, [r4, r5]
 800aa0e:	604b      	str	r3, [r1, #4]
 800aa10:	4638      	mov	r0, r7
 800aa12:	f104 060b 	add.w	r6, r4, #11
 800aa16:	f000 f829 	bl	800aa6c <__malloc_unlock>
 800aa1a:	f026 0607 	bic.w	r6, r6, #7
 800aa1e:	1d23      	adds	r3, r4, #4
 800aa20:	1af2      	subs	r2, r6, r3
 800aa22:	d0ae      	beq.n	800a982 <_malloc_r+0x22>
 800aa24:	1b9b      	subs	r3, r3, r6
 800aa26:	50a3      	str	r3, [r4, r2]
 800aa28:	e7ab      	b.n	800a982 <_malloc_r+0x22>
 800aa2a:	42a3      	cmp	r3, r4
 800aa2c:	6862      	ldr	r2, [r4, #4]
 800aa2e:	d1dd      	bne.n	800a9ec <_malloc_r+0x8c>
 800aa30:	f8c8 2000 	str.w	r2, [r8]
 800aa34:	e7ec      	b.n	800aa10 <_malloc_r+0xb0>
 800aa36:	4623      	mov	r3, r4
 800aa38:	6864      	ldr	r4, [r4, #4]
 800aa3a:	e7ac      	b.n	800a996 <_malloc_r+0x36>
 800aa3c:	4634      	mov	r4, r6
 800aa3e:	6876      	ldr	r6, [r6, #4]
 800aa40:	e7b4      	b.n	800a9ac <_malloc_r+0x4c>
 800aa42:	4613      	mov	r3, r2
 800aa44:	e7cc      	b.n	800a9e0 <_malloc_r+0x80>
 800aa46:	230c      	movs	r3, #12
 800aa48:	603b      	str	r3, [r7, #0]
 800aa4a:	4638      	mov	r0, r7
 800aa4c:	f000 f80e 	bl	800aa6c <__malloc_unlock>
 800aa50:	e797      	b.n	800a982 <_malloc_r+0x22>
 800aa52:	6025      	str	r5, [r4, #0]
 800aa54:	e7dc      	b.n	800aa10 <_malloc_r+0xb0>
 800aa56:	605b      	str	r3, [r3, #4]
 800aa58:	deff      	udf	#255	; 0xff
 800aa5a:	bf00      	nop
 800aa5c:	2401d894 	.word	0x2401d894

0800aa60 <__malloc_lock>:
 800aa60:	4801      	ldr	r0, [pc, #4]	; (800aa68 <__malloc_lock+0x8>)
 800aa62:	f7ff bf0f 	b.w	800a884 <__retarget_lock_acquire_recursive>
 800aa66:	bf00      	nop
 800aa68:	2401d890 	.word	0x2401d890

0800aa6c <__malloc_unlock>:
 800aa6c:	4801      	ldr	r0, [pc, #4]	; (800aa74 <__malloc_unlock+0x8>)
 800aa6e:	f7ff bf0a 	b.w	800a886 <__retarget_lock_release_recursive>
 800aa72:	bf00      	nop
 800aa74:	2401d890 	.word	0x2401d890

0800aa78 <__ssputs_r>:
 800aa78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa7c:	688e      	ldr	r6, [r1, #8]
 800aa7e:	461f      	mov	r7, r3
 800aa80:	42be      	cmp	r6, r7
 800aa82:	680b      	ldr	r3, [r1, #0]
 800aa84:	4682      	mov	sl, r0
 800aa86:	460c      	mov	r4, r1
 800aa88:	4690      	mov	r8, r2
 800aa8a:	d82c      	bhi.n	800aae6 <__ssputs_r+0x6e>
 800aa8c:	898a      	ldrh	r2, [r1, #12]
 800aa8e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa92:	d026      	beq.n	800aae2 <__ssputs_r+0x6a>
 800aa94:	6965      	ldr	r5, [r4, #20]
 800aa96:	6909      	ldr	r1, [r1, #16]
 800aa98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa9c:	eba3 0901 	sub.w	r9, r3, r1
 800aaa0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aaa4:	1c7b      	adds	r3, r7, #1
 800aaa6:	444b      	add	r3, r9
 800aaa8:	106d      	asrs	r5, r5, #1
 800aaaa:	429d      	cmp	r5, r3
 800aaac:	bf38      	it	cc
 800aaae:	461d      	movcc	r5, r3
 800aab0:	0553      	lsls	r3, r2, #21
 800aab2:	d527      	bpl.n	800ab04 <__ssputs_r+0x8c>
 800aab4:	4629      	mov	r1, r5
 800aab6:	f7ff ff53 	bl	800a960 <_malloc_r>
 800aaba:	4606      	mov	r6, r0
 800aabc:	b360      	cbz	r0, 800ab18 <__ssputs_r+0xa0>
 800aabe:	6921      	ldr	r1, [r4, #16]
 800aac0:	464a      	mov	r2, r9
 800aac2:	f000 faeb 	bl	800b09c <memcpy>
 800aac6:	89a3      	ldrh	r3, [r4, #12]
 800aac8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aacc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aad0:	81a3      	strh	r3, [r4, #12]
 800aad2:	6126      	str	r6, [r4, #16]
 800aad4:	6165      	str	r5, [r4, #20]
 800aad6:	444e      	add	r6, r9
 800aad8:	eba5 0509 	sub.w	r5, r5, r9
 800aadc:	6026      	str	r6, [r4, #0]
 800aade:	60a5      	str	r5, [r4, #8]
 800aae0:	463e      	mov	r6, r7
 800aae2:	42be      	cmp	r6, r7
 800aae4:	d900      	bls.n	800aae8 <__ssputs_r+0x70>
 800aae6:	463e      	mov	r6, r7
 800aae8:	6820      	ldr	r0, [r4, #0]
 800aaea:	4632      	mov	r2, r6
 800aaec:	4641      	mov	r1, r8
 800aaee:	f000 faab 	bl	800b048 <memmove>
 800aaf2:	68a3      	ldr	r3, [r4, #8]
 800aaf4:	1b9b      	subs	r3, r3, r6
 800aaf6:	60a3      	str	r3, [r4, #8]
 800aaf8:	6823      	ldr	r3, [r4, #0]
 800aafa:	4433      	add	r3, r6
 800aafc:	6023      	str	r3, [r4, #0]
 800aafe:	2000      	movs	r0, #0
 800ab00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab04:	462a      	mov	r2, r5
 800ab06:	f000 fad7 	bl	800b0b8 <_realloc_r>
 800ab0a:	4606      	mov	r6, r0
 800ab0c:	2800      	cmp	r0, #0
 800ab0e:	d1e0      	bne.n	800aad2 <__ssputs_r+0x5a>
 800ab10:	6921      	ldr	r1, [r4, #16]
 800ab12:	4650      	mov	r0, sl
 800ab14:	f7ff feb8 	bl	800a888 <_free_r>
 800ab18:	230c      	movs	r3, #12
 800ab1a:	f8ca 3000 	str.w	r3, [sl]
 800ab1e:	89a3      	ldrh	r3, [r4, #12]
 800ab20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab24:	81a3      	strh	r3, [r4, #12]
 800ab26:	f04f 30ff 	mov.w	r0, #4294967295
 800ab2a:	e7e9      	b.n	800ab00 <__ssputs_r+0x88>

0800ab2c <_svfiprintf_r>:
 800ab2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab30:	4698      	mov	r8, r3
 800ab32:	898b      	ldrh	r3, [r1, #12]
 800ab34:	061b      	lsls	r3, r3, #24
 800ab36:	b09d      	sub	sp, #116	; 0x74
 800ab38:	4607      	mov	r7, r0
 800ab3a:	460d      	mov	r5, r1
 800ab3c:	4614      	mov	r4, r2
 800ab3e:	d50e      	bpl.n	800ab5e <_svfiprintf_r+0x32>
 800ab40:	690b      	ldr	r3, [r1, #16]
 800ab42:	b963      	cbnz	r3, 800ab5e <_svfiprintf_r+0x32>
 800ab44:	2140      	movs	r1, #64	; 0x40
 800ab46:	f7ff ff0b 	bl	800a960 <_malloc_r>
 800ab4a:	6028      	str	r0, [r5, #0]
 800ab4c:	6128      	str	r0, [r5, #16]
 800ab4e:	b920      	cbnz	r0, 800ab5a <_svfiprintf_r+0x2e>
 800ab50:	230c      	movs	r3, #12
 800ab52:	603b      	str	r3, [r7, #0]
 800ab54:	f04f 30ff 	mov.w	r0, #4294967295
 800ab58:	e0d0      	b.n	800acfc <_svfiprintf_r+0x1d0>
 800ab5a:	2340      	movs	r3, #64	; 0x40
 800ab5c:	616b      	str	r3, [r5, #20]
 800ab5e:	2300      	movs	r3, #0
 800ab60:	9309      	str	r3, [sp, #36]	; 0x24
 800ab62:	2320      	movs	r3, #32
 800ab64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab68:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab6c:	2330      	movs	r3, #48	; 0x30
 800ab6e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ad14 <_svfiprintf_r+0x1e8>
 800ab72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab76:	f04f 0901 	mov.w	r9, #1
 800ab7a:	4623      	mov	r3, r4
 800ab7c:	469a      	mov	sl, r3
 800ab7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab82:	b10a      	cbz	r2, 800ab88 <_svfiprintf_r+0x5c>
 800ab84:	2a25      	cmp	r2, #37	; 0x25
 800ab86:	d1f9      	bne.n	800ab7c <_svfiprintf_r+0x50>
 800ab88:	ebba 0b04 	subs.w	fp, sl, r4
 800ab8c:	d00b      	beq.n	800aba6 <_svfiprintf_r+0x7a>
 800ab8e:	465b      	mov	r3, fp
 800ab90:	4622      	mov	r2, r4
 800ab92:	4629      	mov	r1, r5
 800ab94:	4638      	mov	r0, r7
 800ab96:	f7ff ff6f 	bl	800aa78 <__ssputs_r>
 800ab9a:	3001      	adds	r0, #1
 800ab9c:	f000 80a9 	beq.w	800acf2 <_svfiprintf_r+0x1c6>
 800aba0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aba2:	445a      	add	r2, fp
 800aba4:	9209      	str	r2, [sp, #36]	; 0x24
 800aba6:	f89a 3000 	ldrb.w	r3, [sl]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	f000 80a1 	beq.w	800acf2 <_svfiprintf_r+0x1c6>
 800abb0:	2300      	movs	r3, #0
 800abb2:	f04f 32ff 	mov.w	r2, #4294967295
 800abb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abba:	f10a 0a01 	add.w	sl, sl, #1
 800abbe:	9304      	str	r3, [sp, #16]
 800abc0:	9307      	str	r3, [sp, #28]
 800abc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abc6:	931a      	str	r3, [sp, #104]	; 0x68
 800abc8:	4654      	mov	r4, sl
 800abca:	2205      	movs	r2, #5
 800abcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abd0:	4850      	ldr	r0, [pc, #320]	; (800ad14 <_svfiprintf_r+0x1e8>)
 800abd2:	f7f5 fb95 	bl	8000300 <memchr>
 800abd6:	9a04      	ldr	r2, [sp, #16]
 800abd8:	b9d8      	cbnz	r0, 800ac12 <_svfiprintf_r+0xe6>
 800abda:	06d0      	lsls	r0, r2, #27
 800abdc:	bf44      	itt	mi
 800abde:	2320      	movmi	r3, #32
 800abe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abe4:	0711      	lsls	r1, r2, #28
 800abe6:	bf44      	itt	mi
 800abe8:	232b      	movmi	r3, #43	; 0x2b
 800abea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abee:	f89a 3000 	ldrb.w	r3, [sl]
 800abf2:	2b2a      	cmp	r3, #42	; 0x2a
 800abf4:	d015      	beq.n	800ac22 <_svfiprintf_r+0xf6>
 800abf6:	9a07      	ldr	r2, [sp, #28]
 800abf8:	4654      	mov	r4, sl
 800abfa:	2000      	movs	r0, #0
 800abfc:	f04f 0c0a 	mov.w	ip, #10
 800ac00:	4621      	mov	r1, r4
 800ac02:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac06:	3b30      	subs	r3, #48	; 0x30
 800ac08:	2b09      	cmp	r3, #9
 800ac0a:	d94d      	bls.n	800aca8 <_svfiprintf_r+0x17c>
 800ac0c:	b1b0      	cbz	r0, 800ac3c <_svfiprintf_r+0x110>
 800ac0e:	9207      	str	r2, [sp, #28]
 800ac10:	e014      	b.n	800ac3c <_svfiprintf_r+0x110>
 800ac12:	eba0 0308 	sub.w	r3, r0, r8
 800ac16:	fa09 f303 	lsl.w	r3, r9, r3
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	9304      	str	r3, [sp, #16]
 800ac1e:	46a2      	mov	sl, r4
 800ac20:	e7d2      	b.n	800abc8 <_svfiprintf_r+0x9c>
 800ac22:	9b03      	ldr	r3, [sp, #12]
 800ac24:	1d19      	adds	r1, r3, #4
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	9103      	str	r1, [sp, #12]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	bfbb      	ittet	lt
 800ac2e:	425b      	neglt	r3, r3
 800ac30:	f042 0202 	orrlt.w	r2, r2, #2
 800ac34:	9307      	strge	r3, [sp, #28]
 800ac36:	9307      	strlt	r3, [sp, #28]
 800ac38:	bfb8      	it	lt
 800ac3a:	9204      	strlt	r2, [sp, #16]
 800ac3c:	7823      	ldrb	r3, [r4, #0]
 800ac3e:	2b2e      	cmp	r3, #46	; 0x2e
 800ac40:	d10c      	bne.n	800ac5c <_svfiprintf_r+0x130>
 800ac42:	7863      	ldrb	r3, [r4, #1]
 800ac44:	2b2a      	cmp	r3, #42	; 0x2a
 800ac46:	d134      	bne.n	800acb2 <_svfiprintf_r+0x186>
 800ac48:	9b03      	ldr	r3, [sp, #12]
 800ac4a:	1d1a      	adds	r2, r3, #4
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	9203      	str	r2, [sp, #12]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	bfb8      	it	lt
 800ac54:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac58:	3402      	adds	r4, #2
 800ac5a:	9305      	str	r3, [sp, #20]
 800ac5c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ad24 <_svfiprintf_r+0x1f8>
 800ac60:	7821      	ldrb	r1, [r4, #0]
 800ac62:	2203      	movs	r2, #3
 800ac64:	4650      	mov	r0, sl
 800ac66:	f7f5 fb4b 	bl	8000300 <memchr>
 800ac6a:	b138      	cbz	r0, 800ac7c <_svfiprintf_r+0x150>
 800ac6c:	9b04      	ldr	r3, [sp, #16]
 800ac6e:	eba0 000a 	sub.w	r0, r0, sl
 800ac72:	2240      	movs	r2, #64	; 0x40
 800ac74:	4082      	lsls	r2, r0
 800ac76:	4313      	orrs	r3, r2
 800ac78:	3401      	adds	r4, #1
 800ac7a:	9304      	str	r3, [sp, #16]
 800ac7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac80:	4825      	ldr	r0, [pc, #148]	; (800ad18 <_svfiprintf_r+0x1ec>)
 800ac82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac86:	2206      	movs	r2, #6
 800ac88:	f7f5 fb3a 	bl	8000300 <memchr>
 800ac8c:	2800      	cmp	r0, #0
 800ac8e:	d038      	beq.n	800ad02 <_svfiprintf_r+0x1d6>
 800ac90:	4b22      	ldr	r3, [pc, #136]	; (800ad1c <_svfiprintf_r+0x1f0>)
 800ac92:	bb1b      	cbnz	r3, 800acdc <_svfiprintf_r+0x1b0>
 800ac94:	9b03      	ldr	r3, [sp, #12]
 800ac96:	3307      	adds	r3, #7
 800ac98:	f023 0307 	bic.w	r3, r3, #7
 800ac9c:	3308      	adds	r3, #8
 800ac9e:	9303      	str	r3, [sp, #12]
 800aca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aca2:	4433      	add	r3, r6
 800aca4:	9309      	str	r3, [sp, #36]	; 0x24
 800aca6:	e768      	b.n	800ab7a <_svfiprintf_r+0x4e>
 800aca8:	fb0c 3202 	mla	r2, ip, r2, r3
 800acac:	460c      	mov	r4, r1
 800acae:	2001      	movs	r0, #1
 800acb0:	e7a6      	b.n	800ac00 <_svfiprintf_r+0xd4>
 800acb2:	2300      	movs	r3, #0
 800acb4:	3401      	adds	r4, #1
 800acb6:	9305      	str	r3, [sp, #20]
 800acb8:	4619      	mov	r1, r3
 800acba:	f04f 0c0a 	mov.w	ip, #10
 800acbe:	4620      	mov	r0, r4
 800acc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acc4:	3a30      	subs	r2, #48	; 0x30
 800acc6:	2a09      	cmp	r2, #9
 800acc8:	d903      	bls.n	800acd2 <_svfiprintf_r+0x1a6>
 800acca:	2b00      	cmp	r3, #0
 800accc:	d0c6      	beq.n	800ac5c <_svfiprintf_r+0x130>
 800acce:	9105      	str	r1, [sp, #20]
 800acd0:	e7c4      	b.n	800ac5c <_svfiprintf_r+0x130>
 800acd2:	fb0c 2101 	mla	r1, ip, r1, r2
 800acd6:	4604      	mov	r4, r0
 800acd8:	2301      	movs	r3, #1
 800acda:	e7f0      	b.n	800acbe <_svfiprintf_r+0x192>
 800acdc:	ab03      	add	r3, sp, #12
 800acde:	9300      	str	r3, [sp, #0]
 800ace0:	462a      	mov	r2, r5
 800ace2:	4b0f      	ldr	r3, [pc, #60]	; (800ad20 <_svfiprintf_r+0x1f4>)
 800ace4:	a904      	add	r1, sp, #16
 800ace6:	4638      	mov	r0, r7
 800ace8:	f3af 8000 	nop.w
 800acec:	1c42      	adds	r2, r0, #1
 800acee:	4606      	mov	r6, r0
 800acf0:	d1d6      	bne.n	800aca0 <_svfiprintf_r+0x174>
 800acf2:	89ab      	ldrh	r3, [r5, #12]
 800acf4:	065b      	lsls	r3, r3, #25
 800acf6:	f53f af2d 	bmi.w	800ab54 <_svfiprintf_r+0x28>
 800acfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acfc:	b01d      	add	sp, #116	; 0x74
 800acfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad02:	ab03      	add	r3, sp, #12
 800ad04:	9300      	str	r3, [sp, #0]
 800ad06:	462a      	mov	r2, r5
 800ad08:	4b05      	ldr	r3, [pc, #20]	; (800ad20 <_svfiprintf_r+0x1f4>)
 800ad0a:	a904      	add	r1, sp, #16
 800ad0c:	4638      	mov	r0, r7
 800ad0e:	f000 f879 	bl	800ae04 <_printf_i>
 800ad12:	e7eb      	b.n	800acec <_svfiprintf_r+0x1c0>
 800ad14:	0800b17c 	.word	0x0800b17c
 800ad18:	0800b186 	.word	0x0800b186
 800ad1c:	00000000 	.word	0x00000000
 800ad20:	0800aa79 	.word	0x0800aa79
 800ad24:	0800b182 	.word	0x0800b182

0800ad28 <_printf_common>:
 800ad28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad2c:	4616      	mov	r6, r2
 800ad2e:	4699      	mov	r9, r3
 800ad30:	688a      	ldr	r2, [r1, #8]
 800ad32:	690b      	ldr	r3, [r1, #16]
 800ad34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	bfb8      	it	lt
 800ad3c:	4613      	movlt	r3, r2
 800ad3e:	6033      	str	r3, [r6, #0]
 800ad40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ad44:	4607      	mov	r7, r0
 800ad46:	460c      	mov	r4, r1
 800ad48:	b10a      	cbz	r2, 800ad4e <_printf_common+0x26>
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	6033      	str	r3, [r6, #0]
 800ad4e:	6823      	ldr	r3, [r4, #0]
 800ad50:	0699      	lsls	r1, r3, #26
 800ad52:	bf42      	ittt	mi
 800ad54:	6833      	ldrmi	r3, [r6, #0]
 800ad56:	3302      	addmi	r3, #2
 800ad58:	6033      	strmi	r3, [r6, #0]
 800ad5a:	6825      	ldr	r5, [r4, #0]
 800ad5c:	f015 0506 	ands.w	r5, r5, #6
 800ad60:	d106      	bne.n	800ad70 <_printf_common+0x48>
 800ad62:	f104 0a19 	add.w	sl, r4, #25
 800ad66:	68e3      	ldr	r3, [r4, #12]
 800ad68:	6832      	ldr	r2, [r6, #0]
 800ad6a:	1a9b      	subs	r3, r3, r2
 800ad6c:	42ab      	cmp	r3, r5
 800ad6e:	dc26      	bgt.n	800adbe <_printf_common+0x96>
 800ad70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ad74:	1e13      	subs	r3, r2, #0
 800ad76:	6822      	ldr	r2, [r4, #0]
 800ad78:	bf18      	it	ne
 800ad7a:	2301      	movne	r3, #1
 800ad7c:	0692      	lsls	r2, r2, #26
 800ad7e:	d42b      	bmi.n	800add8 <_printf_common+0xb0>
 800ad80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ad84:	4649      	mov	r1, r9
 800ad86:	4638      	mov	r0, r7
 800ad88:	47c0      	blx	r8
 800ad8a:	3001      	adds	r0, #1
 800ad8c:	d01e      	beq.n	800adcc <_printf_common+0xa4>
 800ad8e:	6823      	ldr	r3, [r4, #0]
 800ad90:	6922      	ldr	r2, [r4, #16]
 800ad92:	f003 0306 	and.w	r3, r3, #6
 800ad96:	2b04      	cmp	r3, #4
 800ad98:	bf02      	ittt	eq
 800ad9a:	68e5      	ldreq	r5, [r4, #12]
 800ad9c:	6833      	ldreq	r3, [r6, #0]
 800ad9e:	1aed      	subeq	r5, r5, r3
 800ada0:	68a3      	ldr	r3, [r4, #8]
 800ada2:	bf0c      	ite	eq
 800ada4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ada8:	2500      	movne	r5, #0
 800adaa:	4293      	cmp	r3, r2
 800adac:	bfc4      	itt	gt
 800adae:	1a9b      	subgt	r3, r3, r2
 800adb0:	18ed      	addgt	r5, r5, r3
 800adb2:	2600      	movs	r6, #0
 800adb4:	341a      	adds	r4, #26
 800adb6:	42b5      	cmp	r5, r6
 800adb8:	d11a      	bne.n	800adf0 <_printf_common+0xc8>
 800adba:	2000      	movs	r0, #0
 800adbc:	e008      	b.n	800add0 <_printf_common+0xa8>
 800adbe:	2301      	movs	r3, #1
 800adc0:	4652      	mov	r2, sl
 800adc2:	4649      	mov	r1, r9
 800adc4:	4638      	mov	r0, r7
 800adc6:	47c0      	blx	r8
 800adc8:	3001      	adds	r0, #1
 800adca:	d103      	bne.n	800add4 <_printf_common+0xac>
 800adcc:	f04f 30ff 	mov.w	r0, #4294967295
 800add0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800add4:	3501      	adds	r5, #1
 800add6:	e7c6      	b.n	800ad66 <_printf_common+0x3e>
 800add8:	18e1      	adds	r1, r4, r3
 800adda:	1c5a      	adds	r2, r3, #1
 800addc:	2030      	movs	r0, #48	; 0x30
 800adde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ade2:	4422      	add	r2, r4
 800ade4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ade8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800adec:	3302      	adds	r3, #2
 800adee:	e7c7      	b.n	800ad80 <_printf_common+0x58>
 800adf0:	2301      	movs	r3, #1
 800adf2:	4622      	mov	r2, r4
 800adf4:	4649      	mov	r1, r9
 800adf6:	4638      	mov	r0, r7
 800adf8:	47c0      	blx	r8
 800adfa:	3001      	adds	r0, #1
 800adfc:	d0e6      	beq.n	800adcc <_printf_common+0xa4>
 800adfe:	3601      	adds	r6, #1
 800ae00:	e7d9      	b.n	800adb6 <_printf_common+0x8e>
	...

0800ae04 <_printf_i>:
 800ae04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae08:	7e0f      	ldrb	r7, [r1, #24]
 800ae0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ae0c:	2f78      	cmp	r7, #120	; 0x78
 800ae0e:	4691      	mov	r9, r2
 800ae10:	4680      	mov	r8, r0
 800ae12:	460c      	mov	r4, r1
 800ae14:	469a      	mov	sl, r3
 800ae16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ae1a:	d807      	bhi.n	800ae2c <_printf_i+0x28>
 800ae1c:	2f62      	cmp	r7, #98	; 0x62
 800ae1e:	d80a      	bhi.n	800ae36 <_printf_i+0x32>
 800ae20:	2f00      	cmp	r7, #0
 800ae22:	f000 80d4 	beq.w	800afce <_printf_i+0x1ca>
 800ae26:	2f58      	cmp	r7, #88	; 0x58
 800ae28:	f000 80c0 	beq.w	800afac <_printf_i+0x1a8>
 800ae2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ae34:	e03a      	b.n	800aeac <_printf_i+0xa8>
 800ae36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ae3a:	2b15      	cmp	r3, #21
 800ae3c:	d8f6      	bhi.n	800ae2c <_printf_i+0x28>
 800ae3e:	a101      	add	r1, pc, #4	; (adr r1, 800ae44 <_printf_i+0x40>)
 800ae40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae44:	0800ae9d 	.word	0x0800ae9d
 800ae48:	0800aeb1 	.word	0x0800aeb1
 800ae4c:	0800ae2d 	.word	0x0800ae2d
 800ae50:	0800ae2d 	.word	0x0800ae2d
 800ae54:	0800ae2d 	.word	0x0800ae2d
 800ae58:	0800ae2d 	.word	0x0800ae2d
 800ae5c:	0800aeb1 	.word	0x0800aeb1
 800ae60:	0800ae2d 	.word	0x0800ae2d
 800ae64:	0800ae2d 	.word	0x0800ae2d
 800ae68:	0800ae2d 	.word	0x0800ae2d
 800ae6c:	0800ae2d 	.word	0x0800ae2d
 800ae70:	0800afb5 	.word	0x0800afb5
 800ae74:	0800aedd 	.word	0x0800aedd
 800ae78:	0800af6f 	.word	0x0800af6f
 800ae7c:	0800ae2d 	.word	0x0800ae2d
 800ae80:	0800ae2d 	.word	0x0800ae2d
 800ae84:	0800afd7 	.word	0x0800afd7
 800ae88:	0800ae2d 	.word	0x0800ae2d
 800ae8c:	0800aedd 	.word	0x0800aedd
 800ae90:	0800ae2d 	.word	0x0800ae2d
 800ae94:	0800ae2d 	.word	0x0800ae2d
 800ae98:	0800af77 	.word	0x0800af77
 800ae9c:	682b      	ldr	r3, [r5, #0]
 800ae9e:	1d1a      	adds	r2, r3, #4
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	602a      	str	r2, [r5, #0]
 800aea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aea8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aeac:	2301      	movs	r3, #1
 800aeae:	e09f      	b.n	800aff0 <_printf_i+0x1ec>
 800aeb0:	6820      	ldr	r0, [r4, #0]
 800aeb2:	682b      	ldr	r3, [r5, #0]
 800aeb4:	0607      	lsls	r7, r0, #24
 800aeb6:	f103 0104 	add.w	r1, r3, #4
 800aeba:	6029      	str	r1, [r5, #0]
 800aebc:	d501      	bpl.n	800aec2 <_printf_i+0xbe>
 800aebe:	681e      	ldr	r6, [r3, #0]
 800aec0:	e003      	b.n	800aeca <_printf_i+0xc6>
 800aec2:	0646      	lsls	r6, r0, #25
 800aec4:	d5fb      	bpl.n	800aebe <_printf_i+0xba>
 800aec6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800aeca:	2e00      	cmp	r6, #0
 800aecc:	da03      	bge.n	800aed6 <_printf_i+0xd2>
 800aece:	232d      	movs	r3, #45	; 0x2d
 800aed0:	4276      	negs	r6, r6
 800aed2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aed6:	485a      	ldr	r0, [pc, #360]	; (800b040 <_printf_i+0x23c>)
 800aed8:	230a      	movs	r3, #10
 800aeda:	e012      	b.n	800af02 <_printf_i+0xfe>
 800aedc:	682b      	ldr	r3, [r5, #0]
 800aede:	6820      	ldr	r0, [r4, #0]
 800aee0:	1d19      	adds	r1, r3, #4
 800aee2:	6029      	str	r1, [r5, #0]
 800aee4:	0605      	lsls	r5, r0, #24
 800aee6:	d501      	bpl.n	800aeec <_printf_i+0xe8>
 800aee8:	681e      	ldr	r6, [r3, #0]
 800aeea:	e002      	b.n	800aef2 <_printf_i+0xee>
 800aeec:	0641      	lsls	r1, r0, #25
 800aeee:	d5fb      	bpl.n	800aee8 <_printf_i+0xe4>
 800aef0:	881e      	ldrh	r6, [r3, #0]
 800aef2:	4853      	ldr	r0, [pc, #332]	; (800b040 <_printf_i+0x23c>)
 800aef4:	2f6f      	cmp	r7, #111	; 0x6f
 800aef6:	bf0c      	ite	eq
 800aef8:	2308      	moveq	r3, #8
 800aefa:	230a      	movne	r3, #10
 800aefc:	2100      	movs	r1, #0
 800aefe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800af02:	6865      	ldr	r5, [r4, #4]
 800af04:	60a5      	str	r5, [r4, #8]
 800af06:	2d00      	cmp	r5, #0
 800af08:	bfa2      	ittt	ge
 800af0a:	6821      	ldrge	r1, [r4, #0]
 800af0c:	f021 0104 	bicge.w	r1, r1, #4
 800af10:	6021      	strge	r1, [r4, #0]
 800af12:	b90e      	cbnz	r6, 800af18 <_printf_i+0x114>
 800af14:	2d00      	cmp	r5, #0
 800af16:	d04b      	beq.n	800afb0 <_printf_i+0x1ac>
 800af18:	4615      	mov	r5, r2
 800af1a:	fbb6 f1f3 	udiv	r1, r6, r3
 800af1e:	fb03 6711 	mls	r7, r3, r1, r6
 800af22:	5dc7      	ldrb	r7, [r0, r7]
 800af24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800af28:	4637      	mov	r7, r6
 800af2a:	42bb      	cmp	r3, r7
 800af2c:	460e      	mov	r6, r1
 800af2e:	d9f4      	bls.n	800af1a <_printf_i+0x116>
 800af30:	2b08      	cmp	r3, #8
 800af32:	d10b      	bne.n	800af4c <_printf_i+0x148>
 800af34:	6823      	ldr	r3, [r4, #0]
 800af36:	07de      	lsls	r6, r3, #31
 800af38:	d508      	bpl.n	800af4c <_printf_i+0x148>
 800af3a:	6923      	ldr	r3, [r4, #16]
 800af3c:	6861      	ldr	r1, [r4, #4]
 800af3e:	4299      	cmp	r1, r3
 800af40:	bfde      	ittt	le
 800af42:	2330      	movle	r3, #48	; 0x30
 800af44:	f805 3c01 	strble.w	r3, [r5, #-1]
 800af48:	f105 35ff 	addle.w	r5, r5, #4294967295
 800af4c:	1b52      	subs	r2, r2, r5
 800af4e:	6122      	str	r2, [r4, #16]
 800af50:	f8cd a000 	str.w	sl, [sp]
 800af54:	464b      	mov	r3, r9
 800af56:	aa03      	add	r2, sp, #12
 800af58:	4621      	mov	r1, r4
 800af5a:	4640      	mov	r0, r8
 800af5c:	f7ff fee4 	bl	800ad28 <_printf_common>
 800af60:	3001      	adds	r0, #1
 800af62:	d14a      	bne.n	800affa <_printf_i+0x1f6>
 800af64:	f04f 30ff 	mov.w	r0, #4294967295
 800af68:	b004      	add	sp, #16
 800af6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af6e:	6823      	ldr	r3, [r4, #0]
 800af70:	f043 0320 	orr.w	r3, r3, #32
 800af74:	6023      	str	r3, [r4, #0]
 800af76:	4833      	ldr	r0, [pc, #204]	; (800b044 <_printf_i+0x240>)
 800af78:	2778      	movs	r7, #120	; 0x78
 800af7a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800af7e:	6823      	ldr	r3, [r4, #0]
 800af80:	6829      	ldr	r1, [r5, #0]
 800af82:	061f      	lsls	r7, r3, #24
 800af84:	f851 6b04 	ldr.w	r6, [r1], #4
 800af88:	d402      	bmi.n	800af90 <_printf_i+0x18c>
 800af8a:	065f      	lsls	r7, r3, #25
 800af8c:	bf48      	it	mi
 800af8e:	b2b6      	uxthmi	r6, r6
 800af90:	07df      	lsls	r7, r3, #31
 800af92:	bf48      	it	mi
 800af94:	f043 0320 	orrmi.w	r3, r3, #32
 800af98:	6029      	str	r1, [r5, #0]
 800af9a:	bf48      	it	mi
 800af9c:	6023      	strmi	r3, [r4, #0]
 800af9e:	b91e      	cbnz	r6, 800afa8 <_printf_i+0x1a4>
 800afa0:	6823      	ldr	r3, [r4, #0]
 800afa2:	f023 0320 	bic.w	r3, r3, #32
 800afa6:	6023      	str	r3, [r4, #0]
 800afa8:	2310      	movs	r3, #16
 800afaa:	e7a7      	b.n	800aefc <_printf_i+0xf8>
 800afac:	4824      	ldr	r0, [pc, #144]	; (800b040 <_printf_i+0x23c>)
 800afae:	e7e4      	b.n	800af7a <_printf_i+0x176>
 800afb0:	4615      	mov	r5, r2
 800afb2:	e7bd      	b.n	800af30 <_printf_i+0x12c>
 800afb4:	682b      	ldr	r3, [r5, #0]
 800afb6:	6826      	ldr	r6, [r4, #0]
 800afb8:	6961      	ldr	r1, [r4, #20]
 800afba:	1d18      	adds	r0, r3, #4
 800afbc:	6028      	str	r0, [r5, #0]
 800afbe:	0635      	lsls	r5, r6, #24
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	d501      	bpl.n	800afc8 <_printf_i+0x1c4>
 800afc4:	6019      	str	r1, [r3, #0]
 800afc6:	e002      	b.n	800afce <_printf_i+0x1ca>
 800afc8:	0670      	lsls	r0, r6, #25
 800afca:	d5fb      	bpl.n	800afc4 <_printf_i+0x1c0>
 800afcc:	8019      	strh	r1, [r3, #0]
 800afce:	2300      	movs	r3, #0
 800afd0:	6123      	str	r3, [r4, #16]
 800afd2:	4615      	mov	r5, r2
 800afd4:	e7bc      	b.n	800af50 <_printf_i+0x14c>
 800afd6:	682b      	ldr	r3, [r5, #0]
 800afd8:	1d1a      	adds	r2, r3, #4
 800afda:	602a      	str	r2, [r5, #0]
 800afdc:	681d      	ldr	r5, [r3, #0]
 800afde:	6862      	ldr	r2, [r4, #4]
 800afe0:	2100      	movs	r1, #0
 800afe2:	4628      	mov	r0, r5
 800afe4:	f7f5 f98c 	bl	8000300 <memchr>
 800afe8:	b108      	cbz	r0, 800afee <_printf_i+0x1ea>
 800afea:	1b40      	subs	r0, r0, r5
 800afec:	6060      	str	r0, [r4, #4]
 800afee:	6863      	ldr	r3, [r4, #4]
 800aff0:	6123      	str	r3, [r4, #16]
 800aff2:	2300      	movs	r3, #0
 800aff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aff8:	e7aa      	b.n	800af50 <_printf_i+0x14c>
 800affa:	6923      	ldr	r3, [r4, #16]
 800affc:	462a      	mov	r2, r5
 800affe:	4649      	mov	r1, r9
 800b000:	4640      	mov	r0, r8
 800b002:	47d0      	blx	sl
 800b004:	3001      	adds	r0, #1
 800b006:	d0ad      	beq.n	800af64 <_printf_i+0x160>
 800b008:	6823      	ldr	r3, [r4, #0]
 800b00a:	079b      	lsls	r3, r3, #30
 800b00c:	d413      	bmi.n	800b036 <_printf_i+0x232>
 800b00e:	68e0      	ldr	r0, [r4, #12]
 800b010:	9b03      	ldr	r3, [sp, #12]
 800b012:	4298      	cmp	r0, r3
 800b014:	bfb8      	it	lt
 800b016:	4618      	movlt	r0, r3
 800b018:	e7a6      	b.n	800af68 <_printf_i+0x164>
 800b01a:	2301      	movs	r3, #1
 800b01c:	4632      	mov	r2, r6
 800b01e:	4649      	mov	r1, r9
 800b020:	4640      	mov	r0, r8
 800b022:	47d0      	blx	sl
 800b024:	3001      	adds	r0, #1
 800b026:	d09d      	beq.n	800af64 <_printf_i+0x160>
 800b028:	3501      	adds	r5, #1
 800b02a:	68e3      	ldr	r3, [r4, #12]
 800b02c:	9903      	ldr	r1, [sp, #12]
 800b02e:	1a5b      	subs	r3, r3, r1
 800b030:	42ab      	cmp	r3, r5
 800b032:	dcf2      	bgt.n	800b01a <_printf_i+0x216>
 800b034:	e7eb      	b.n	800b00e <_printf_i+0x20a>
 800b036:	2500      	movs	r5, #0
 800b038:	f104 0619 	add.w	r6, r4, #25
 800b03c:	e7f5      	b.n	800b02a <_printf_i+0x226>
 800b03e:	bf00      	nop
 800b040:	0800b18d 	.word	0x0800b18d
 800b044:	0800b19e 	.word	0x0800b19e

0800b048 <memmove>:
 800b048:	4288      	cmp	r0, r1
 800b04a:	b510      	push	{r4, lr}
 800b04c:	eb01 0402 	add.w	r4, r1, r2
 800b050:	d902      	bls.n	800b058 <memmove+0x10>
 800b052:	4284      	cmp	r4, r0
 800b054:	4623      	mov	r3, r4
 800b056:	d807      	bhi.n	800b068 <memmove+0x20>
 800b058:	1e43      	subs	r3, r0, #1
 800b05a:	42a1      	cmp	r1, r4
 800b05c:	d008      	beq.n	800b070 <memmove+0x28>
 800b05e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b062:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b066:	e7f8      	b.n	800b05a <memmove+0x12>
 800b068:	4402      	add	r2, r0
 800b06a:	4601      	mov	r1, r0
 800b06c:	428a      	cmp	r2, r1
 800b06e:	d100      	bne.n	800b072 <memmove+0x2a>
 800b070:	bd10      	pop	{r4, pc}
 800b072:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b076:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b07a:	e7f7      	b.n	800b06c <memmove+0x24>

0800b07c <_sbrk_r>:
 800b07c:	b538      	push	{r3, r4, r5, lr}
 800b07e:	4d06      	ldr	r5, [pc, #24]	; (800b098 <_sbrk_r+0x1c>)
 800b080:	2300      	movs	r3, #0
 800b082:	4604      	mov	r4, r0
 800b084:	4608      	mov	r0, r1
 800b086:	602b      	str	r3, [r5, #0]
 800b088:	f7f6 fa7c 	bl	8001584 <_sbrk>
 800b08c:	1c43      	adds	r3, r0, #1
 800b08e:	d102      	bne.n	800b096 <_sbrk_r+0x1a>
 800b090:	682b      	ldr	r3, [r5, #0]
 800b092:	b103      	cbz	r3, 800b096 <_sbrk_r+0x1a>
 800b094:	6023      	str	r3, [r4, #0]
 800b096:	bd38      	pop	{r3, r4, r5, pc}
 800b098:	2401d88c 	.word	0x2401d88c

0800b09c <memcpy>:
 800b09c:	440a      	add	r2, r1
 800b09e:	4291      	cmp	r1, r2
 800b0a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b0a4:	d100      	bne.n	800b0a8 <memcpy+0xc>
 800b0a6:	4770      	bx	lr
 800b0a8:	b510      	push	{r4, lr}
 800b0aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0b2:	4291      	cmp	r1, r2
 800b0b4:	d1f9      	bne.n	800b0aa <memcpy+0xe>
 800b0b6:	bd10      	pop	{r4, pc}

0800b0b8 <_realloc_r>:
 800b0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0bc:	4680      	mov	r8, r0
 800b0be:	4614      	mov	r4, r2
 800b0c0:	460e      	mov	r6, r1
 800b0c2:	b921      	cbnz	r1, 800b0ce <_realloc_r+0x16>
 800b0c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0c8:	4611      	mov	r1, r2
 800b0ca:	f7ff bc49 	b.w	800a960 <_malloc_r>
 800b0ce:	b92a      	cbnz	r2, 800b0dc <_realloc_r+0x24>
 800b0d0:	f7ff fbda 	bl	800a888 <_free_r>
 800b0d4:	4625      	mov	r5, r4
 800b0d6:	4628      	mov	r0, r5
 800b0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0dc:	f000 f81b 	bl	800b116 <_malloc_usable_size_r>
 800b0e0:	4284      	cmp	r4, r0
 800b0e2:	4607      	mov	r7, r0
 800b0e4:	d802      	bhi.n	800b0ec <_realloc_r+0x34>
 800b0e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b0ea:	d812      	bhi.n	800b112 <_realloc_r+0x5a>
 800b0ec:	4621      	mov	r1, r4
 800b0ee:	4640      	mov	r0, r8
 800b0f0:	f7ff fc36 	bl	800a960 <_malloc_r>
 800b0f4:	4605      	mov	r5, r0
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	d0ed      	beq.n	800b0d6 <_realloc_r+0x1e>
 800b0fa:	42bc      	cmp	r4, r7
 800b0fc:	4622      	mov	r2, r4
 800b0fe:	4631      	mov	r1, r6
 800b100:	bf28      	it	cs
 800b102:	463a      	movcs	r2, r7
 800b104:	f7ff ffca 	bl	800b09c <memcpy>
 800b108:	4631      	mov	r1, r6
 800b10a:	4640      	mov	r0, r8
 800b10c:	f7ff fbbc 	bl	800a888 <_free_r>
 800b110:	e7e1      	b.n	800b0d6 <_realloc_r+0x1e>
 800b112:	4635      	mov	r5, r6
 800b114:	e7df      	b.n	800b0d6 <_realloc_r+0x1e>

0800b116 <_malloc_usable_size_r>:
 800b116:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b11a:	1f18      	subs	r0, r3, #4
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	bfbc      	itt	lt
 800b120:	580b      	ldrlt	r3, [r1, r0]
 800b122:	18c0      	addlt	r0, r0, r3
 800b124:	4770      	bx	lr
	...

0800b128 <_init>:
 800b128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b12a:	bf00      	nop
 800b12c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b12e:	bc08      	pop	{r3}
 800b130:	469e      	mov	lr, r3
 800b132:	4770      	bx	lr

0800b134 <_fini>:
 800b134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b136:	bf00      	nop
 800b138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b13a:	bc08      	pop	{r3}
 800b13c:	469e      	mov	lr, r3
 800b13e:	4770      	bx	lr
