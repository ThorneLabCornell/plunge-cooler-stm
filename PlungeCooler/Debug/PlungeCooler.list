
PlungeCooler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b740  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800b9f0  0800b9f0  0001b9f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ba60  0800ba60  0001ba60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ba68  0800ba68  0001ba68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ba6c  0800ba6c  0001ba6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  0800ba70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001d8b8  24000070  0800badc  00020070  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  2401d928  0800badc  0002d928  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001b3bf  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002ef2  00000000  00000000  0003b49c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001558  00000000  00000000  0003e390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000010b3  00000000  00000000  0003f8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00032dff  00000000  00000000  0004099b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001c3d6  00000000  00000000  0007379a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001542da  00000000  00000000  0008fb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006174  00000000  00000000  001e3e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  001e9fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000070 	.word	0x24000070
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800b9d8 	.word	0x0800b9d8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000074 	.word	0x24000074
 80002ec:	0800b9d8 	.word	0x0800b9d8

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b970 	b.w	8000698 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9e08      	ldr	r6, [sp, #32]
 80003d6:	460d      	mov	r5, r1
 80003d8:	4604      	mov	r4, r0
 80003da:	460f      	mov	r7, r1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d14a      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4694      	mov	ip, r2
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0xe2>
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	b143      	cbz	r3, 80003fe <__udivmoddi4+0x2e>
 80003ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80003f0:	f1c3 0220 	rsb	r2, r3, #32
 80003f4:	409f      	lsls	r7, r3
 80003f6:	fa20 f202 	lsr.w	r2, r0, r2
 80003fa:	4317      	orrs	r7, r2
 80003fc:	409c      	lsls	r4, r3
 80003fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000402:	fa1f f58c 	uxth.w	r5, ip
 8000406:	fbb7 f1fe 	udiv	r1, r7, lr
 800040a:	0c22      	lsrs	r2, r4, #16
 800040c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000410:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000414:	fb01 f005 	mul.w	r0, r1, r5
 8000418:	4290      	cmp	r0, r2
 800041a:	d90a      	bls.n	8000432 <__udivmoddi4+0x62>
 800041c:	eb1c 0202 	adds.w	r2, ip, r2
 8000420:	f101 37ff 	add.w	r7, r1, #4294967295
 8000424:	f080 811c 	bcs.w	8000660 <__udivmoddi4+0x290>
 8000428:	4290      	cmp	r0, r2
 800042a:	f240 8119 	bls.w	8000660 <__udivmoddi4+0x290>
 800042e:	3902      	subs	r1, #2
 8000430:	4462      	add	r2, ip
 8000432:	1a12      	subs	r2, r2, r0
 8000434:	b2a4      	uxth	r4, r4
 8000436:	fbb2 f0fe 	udiv	r0, r2, lr
 800043a:	fb0e 2210 	mls	r2, lr, r0, r2
 800043e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000442:	fb00 f505 	mul.w	r5, r0, r5
 8000446:	42a5      	cmp	r5, r4
 8000448:	d90a      	bls.n	8000460 <__udivmoddi4+0x90>
 800044a:	eb1c 0404 	adds.w	r4, ip, r4
 800044e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000452:	f080 8107 	bcs.w	8000664 <__udivmoddi4+0x294>
 8000456:	42a5      	cmp	r5, r4
 8000458:	f240 8104 	bls.w	8000664 <__udivmoddi4+0x294>
 800045c:	4464      	add	r4, ip
 800045e:	3802      	subs	r0, #2
 8000460:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000464:	1b64      	subs	r4, r4, r5
 8000466:	2100      	movs	r1, #0
 8000468:	b11e      	cbz	r6, 8000472 <__udivmoddi4+0xa2>
 800046a:	40dc      	lsrs	r4, r3
 800046c:	2300      	movs	r3, #0
 800046e:	e9c6 4300 	strd	r4, r3, [r6]
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0xbc>
 800047a:	2e00      	cmp	r6, #0
 800047c:	f000 80ed 	beq.w	800065a <__udivmoddi4+0x28a>
 8000480:	2100      	movs	r1, #0
 8000482:	e9c6 0500 	strd	r0, r5, [r6]
 8000486:	4608      	mov	r0, r1
 8000488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048c:	fab3 f183 	clz	r1, r3
 8000490:	2900      	cmp	r1, #0
 8000492:	d149      	bne.n	8000528 <__udivmoddi4+0x158>
 8000494:	42ab      	cmp	r3, r5
 8000496:	d302      	bcc.n	800049e <__udivmoddi4+0xce>
 8000498:	4282      	cmp	r2, r0
 800049a:	f200 80f8 	bhi.w	800068e <__udivmoddi4+0x2be>
 800049e:	1a84      	subs	r4, r0, r2
 80004a0:	eb65 0203 	sbc.w	r2, r5, r3
 80004a4:	2001      	movs	r0, #1
 80004a6:	4617      	mov	r7, r2
 80004a8:	2e00      	cmp	r6, #0
 80004aa:	d0e2      	beq.n	8000472 <__udivmoddi4+0xa2>
 80004ac:	e9c6 4700 	strd	r4, r7, [r6]
 80004b0:	e7df      	b.n	8000472 <__udivmoddi4+0xa2>
 80004b2:	b902      	cbnz	r2, 80004b6 <__udivmoddi4+0xe6>
 80004b4:	deff      	udf	#255	; 0xff
 80004b6:	fab2 f382 	clz	r3, r2
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	f040 8090 	bne.w	80005e0 <__udivmoddi4+0x210>
 80004c0:	1a8a      	subs	r2, r1, r2
 80004c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c6:	fa1f fe8c 	uxth.w	lr, ip
 80004ca:	2101      	movs	r1, #1
 80004cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004d0:	fb07 2015 	mls	r0, r7, r5, r2
 80004d4:	0c22      	lsrs	r2, r4, #16
 80004d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004da:	fb0e f005 	mul.w	r0, lr, r5
 80004de:	4290      	cmp	r0, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x124>
 80004e2:	eb1c 0202 	adds.w	r2, ip, r2
 80004e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x122>
 80004ec:	4290      	cmp	r0, r2
 80004ee:	f200 80cb 	bhi.w	8000688 <__udivmoddi4+0x2b8>
 80004f2:	4645      	mov	r5, r8
 80004f4:	1a12      	subs	r2, r2, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000500:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000504:	fb0e fe00 	mul.w	lr, lr, r0
 8000508:	45a6      	cmp	lr, r4
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x14e>
 800050c:	eb1c 0404 	adds.w	r4, ip, r4
 8000510:	f100 32ff 	add.w	r2, r0, #4294967295
 8000514:	d202      	bcs.n	800051c <__udivmoddi4+0x14c>
 8000516:	45a6      	cmp	lr, r4
 8000518:	f200 80bb 	bhi.w	8000692 <__udivmoddi4+0x2c2>
 800051c:	4610      	mov	r0, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000526:	e79f      	b.n	8000468 <__udivmoddi4+0x98>
 8000528:	f1c1 0720 	rsb	r7, r1, #32
 800052c:	408b      	lsls	r3, r1
 800052e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000532:	ea4c 0c03 	orr.w	ip, ip, r3
 8000536:	fa05 f401 	lsl.w	r4, r5, r1
 800053a:	fa20 f307 	lsr.w	r3, r0, r7
 800053e:	40fd      	lsrs	r5, r7
 8000540:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000544:	4323      	orrs	r3, r4
 8000546:	fbb5 f8f9 	udiv	r8, r5, r9
 800054a:	fa1f fe8c 	uxth.w	lr, ip
 800054e:	fb09 5518 	mls	r5, r9, r8, r5
 8000552:	0c1c      	lsrs	r4, r3, #16
 8000554:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000558:	fb08 f50e 	mul.w	r5, r8, lr
 800055c:	42a5      	cmp	r5, r4
 800055e:	fa02 f201 	lsl.w	r2, r2, r1
 8000562:	fa00 f001 	lsl.w	r0, r0, r1
 8000566:	d90b      	bls.n	8000580 <__udivmoddi4+0x1b0>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000570:	f080 8088 	bcs.w	8000684 <__udivmoddi4+0x2b4>
 8000574:	42a5      	cmp	r5, r4
 8000576:	f240 8085 	bls.w	8000684 <__udivmoddi4+0x2b4>
 800057a:	f1a8 0802 	sub.w	r8, r8, #2
 800057e:	4464      	add	r4, ip
 8000580:	1b64      	subs	r4, r4, r5
 8000582:	b29d      	uxth	r5, r3
 8000584:	fbb4 f3f9 	udiv	r3, r4, r9
 8000588:	fb09 4413 	mls	r4, r9, r3, r4
 800058c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000590:	fb03 fe0e 	mul.w	lr, r3, lr
 8000594:	45a6      	cmp	lr, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x1da>
 8000598:	eb1c 0404 	adds.w	r4, ip, r4
 800059c:	f103 35ff 	add.w	r5, r3, #4294967295
 80005a0:	d26c      	bcs.n	800067c <__udivmoddi4+0x2ac>
 80005a2:	45a6      	cmp	lr, r4
 80005a4:	d96a      	bls.n	800067c <__udivmoddi4+0x2ac>
 80005a6:	3b02      	subs	r3, #2
 80005a8:	4464      	add	r4, ip
 80005aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ae:	fba3 9502 	umull	r9, r5, r3, r2
 80005b2:	eba4 040e 	sub.w	r4, r4, lr
 80005b6:	42ac      	cmp	r4, r5
 80005b8:	46c8      	mov	r8, r9
 80005ba:	46ae      	mov	lr, r5
 80005bc:	d356      	bcc.n	800066c <__udivmoddi4+0x29c>
 80005be:	d053      	beq.n	8000668 <__udivmoddi4+0x298>
 80005c0:	b156      	cbz	r6, 80005d8 <__udivmoddi4+0x208>
 80005c2:	ebb0 0208 	subs.w	r2, r0, r8
 80005c6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ca:	fa04 f707 	lsl.w	r7, r4, r7
 80005ce:	40ca      	lsrs	r2, r1
 80005d0:	40cc      	lsrs	r4, r1
 80005d2:	4317      	orrs	r7, r2
 80005d4:	e9c6 7400 	strd	r7, r4, [r6]
 80005d8:	4618      	mov	r0, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e0:	f1c3 0120 	rsb	r1, r3, #32
 80005e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005e8:	fa20 f201 	lsr.w	r2, r0, r1
 80005ec:	fa25 f101 	lsr.w	r1, r5, r1
 80005f0:	409d      	lsls	r5, r3
 80005f2:	432a      	orrs	r2, r5
 80005f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f8:	fa1f fe8c 	uxth.w	lr, ip
 80005fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000600:	fb07 1510 	mls	r5, r7, r0, r1
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800060a:	fb00 f50e 	mul.w	r5, r0, lr
 800060e:	428d      	cmp	r5, r1
 8000610:	fa04 f403 	lsl.w	r4, r4, r3
 8000614:	d908      	bls.n	8000628 <__udivmoddi4+0x258>
 8000616:	eb1c 0101 	adds.w	r1, ip, r1
 800061a:	f100 38ff 	add.w	r8, r0, #4294967295
 800061e:	d22f      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000620:	428d      	cmp	r5, r1
 8000622:	d92d      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000624:	3802      	subs	r0, #2
 8000626:	4461      	add	r1, ip
 8000628:	1b49      	subs	r1, r1, r5
 800062a:	b292      	uxth	r2, r2
 800062c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000630:	fb07 1115 	mls	r1, r7, r5, r1
 8000634:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000638:	fb05 f10e 	mul.w	r1, r5, lr
 800063c:	4291      	cmp	r1, r2
 800063e:	d908      	bls.n	8000652 <__udivmoddi4+0x282>
 8000640:	eb1c 0202 	adds.w	r2, ip, r2
 8000644:	f105 38ff 	add.w	r8, r5, #4294967295
 8000648:	d216      	bcs.n	8000678 <__udivmoddi4+0x2a8>
 800064a:	4291      	cmp	r1, r2
 800064c:	d914      	bls.n	8000678 <__udivmoddi4+0x2a8>
 800064e:	3d02      	subs	r5, #2
 8000650:	4462      	add	r2, ip
 8000652:	1a52      	subs	r2, r2, r1
 8000654:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000658:	e738      	b.n	80004cc <__udivmoddi4+0xfc>
 800065a:	4631      	mov	r1, r6
 800065c:	4630      	mov	r0, r6
 800065e:	e708      	b.n	8000472 <__udivmoddi4+0xa2>
 8000660:	4639      	mov	r1, r7
 8000662:	e6e6      	b.n	8000432 <__udivmoddi4+0x62>
 8000664:	4610      	mov	r0, r2
 8000666:	e6fb      	b.n	8000460 <__udivmoddi4+0x90>
 8000668:	4548      	cmp	r0, r9
 800066a:	d2a9      	bcs.n	80005c0 <__udivmoddi4+0x1f0>
 800066c:	ebb9 0802 	subs.w	r8, r9, r2
 8000670:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000674:	3b01      	subs	r3, #1
 8000676:	e7a3      	b.n	80005c0 <__udivmoddi4+0x1f0>
 8000678:	4645      	mov	r5, r8
 800067a:	e7ea      	b.n	8000652 <__udivmoddi4+0x282>
 800067c:	462b      	mov	r3, r5
 800067e:	e794      	b.n	80005aa <__udivmoddi4+0x1da>
 8000680:	4640      	mov	r0, r8
 8000682:	e7d1      	b.n	8000628 <__udivmoddi4+0x258>
 8000684:	46d0      	mov	r8, sl
 8000686:	e77b      	b.n	8000580 <__udivmoddi4+0x1b0>
 8000688:	3d02      	subs	r5, #2
 800068a:	4462      	add	r2, ip
 800068c:	e732      	b.n	80004f4 <__udivmoddi4+0x124>
 800068e:	4608      	mov	r0, r1
 8000690:	e70a      	b.n	80004a8 <__udivmoddi4+0xd8>
 8000692:	4464      	add	r4, ip
 8000694:	3802      	subs	r0, #2
 8000696:	e742      	b.n	800051e <__udivmoddi4+0x14e>

08000698 <__aeabi_idiv0>:
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <dispense>:
 */
#include "globals.h"
#include "main.h"
#include <stdio.h>

void dispense(void) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
//	char a[] = "DEPOSITING!!!\r\n";
//	HAL_UART_Transmit(&huart3, (uint8_t*)a, strlen(a), HAL_MAX_DELAY);
	HAL_GPIO_WritePin(DROP_GPIO_Port, DROP_Pin, 1); //Dispense drop
 80006a2:	2201      	movs	r2, #1
 80006a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a8:	480e      	ldr	r0, [pc, #56]	; (80006e4 <dispense+0x48>)
 80006aa:	f003 fe5d 	bl	8004368 <HAL_GPIO_WritePin>
	for(int i=0; i<20000; i+=2) i--; 		//pseudo-delay. replace with a short timer setup is ideal
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	e005      	b.n	80006c0 <dispense+0x24>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3b01      	subs	r3, #1
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	3302      	adds	r3, #2
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80006c6:	4293      	cmp	r3, r2
 80006c8:	ddf4      	ble.n	80006b4 <dispense+0x18>
	HAL_GPIO_WritePin(DROP_GPIO_Port, DROP_Pin, 0); //Dispense drop
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <dispense+0x48>)
 80006d2:	f003 fe49 	bl	8004368 <HAL_GPIO_WritePin>

	DEPOSITED = 1;
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <dispense+0x4c>)
 80006d8:	2201      	movs	r2, #1
 80006da:	701a      	strb	r2, [r3, #0]
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	58021000 	.word	0x58021000
 80006e8:	2401d745 	.word	0x2401d745

080006ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80006f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	db0b      	blt.n	8000716 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006fe:	88fb      	ldrh	r3, [r7, #6]
 8000700:	f003 021f 	and.w	r2, r3, #31
 8000704:	4907      	ldr	r1, [pc, #28]	; (8000724 <__NVIC_EnableIRQ+0x38>)
 8000706:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800070a:	095b      	lsrs	r3, r3, #5
 800070c:	2001      	movs	r0, #1
 800070e:	fa00 f202 	lsl.w	r2, r0, r2
 8000712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000e100 	.word	0xe000e100

08000728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	6039      	str	r1, [r7, #0]
 8000732:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000734:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000738:	2b00      	cmp	r3, #0
 800073a:	db0a      	blt.n	8000752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	b2da      	uxtb	r2, r3
 8000740:	490c      	ldr	r1, [pc, #48]	; (8000774 <__NVIC_SetPriority+0x4c>)
 8000742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000746:	0112      	lsls	r2, r2, #4
 8000748:	b2d2      	uxtb	r2, r2
 800074a:	440b      	add	r3, r1
 800074c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000750:	e00a      	b.n	8000768 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4908      	ldr	r1, [pc, #32]	; (8000778 <__NVIC_SetPriority+0x50>)
 8000758:	88fb      	ldrh	r3, [r7, #6]
 800075a:	f003 030f 	and.w	r3, r3, #15
 800075e:	3b04      	subs	r3, #4
 8000760:	0112      	lsls	r2, r2, #4
 8000762:	b2d2      	uxtb	r2, r2
 8000764:	440b      	add	r3, r1
 8000766:	761a      	strb	r2, [r3, #24]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	e000e100 	.word	0xe000e100
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <move_tilt_steps>:
uint8_t rx_flag = 0;
int panPos = 0;
int tiltPos = 0;

/*** MOTOR CONTROL FUNCTIONS ***/
void move_tilt_steps(uint32_t delay, uint8_t dir, uint32_t num_steps) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	460b      	mov	r3, r1
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	72fb      	strb	r3, [r7, #11]
	for(int i=0; i<num_steps; i++) {
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	e012      	b.n	80007b6 <move_tilt_steps+0x3a>
		HAL_GPIO_WritePin(TILT_STP_GPIO_Port, TILT_STP_Pin, GPIO_PIN_SET);
 8000790:	2201      	movs	r2, #1
 8000792:	2108      	movs	r1, #8
 8000794:	4813      	ldr	r0, [pc, #76]	; (80007e4 <move_tilt_steps+0x68>)
 8000796:	f003 fde7 	bl	8004368 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 800079a:	68f8      	ldr	r0, [r7, #12]
 800079c:	f001 fbce 	bl	8001f3c <HAL_Delay>
		HAL_GPIO_WritePin(TILT_STP_GPIO_Port, TILT_STP_Pin, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2108      	movs	r1, #8
 80007a4:	480f      	ldr	r0, [pc, #60]	; (80007e4 <move_tilt_steps+0x68>)
 80007a6:	f003 fddf 	bl	8004368 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 80007aa:	68f8      	ldr	r0, [r7, #12]
 80007ac:	f001 fbc6 	bl	8001f3c <HAL_Delay>
	for(int i=0; i<num_steps; i++) {
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	3301      	adds	r3, #1
 80007b4:	617b      	str	r3, [r7, #20]
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d8e8      	bhi.n	8000790 <move_tilt_steps+0x14>

	}
//	char b[] = "done steps\r\n";
//	HAL_UART_Transmit(&huart3, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);

	tiltPos += num_steps * (1 - 2 * dir); // + if dir is 0, else -
 80007be:	7afb      	ldrb	r3, [r7, #11]
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	f1c3 0301 	rsb	r3, r3, #1
 80007c6:	461a      	mov	r2, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	fb02 f303 	mul.w	r3, r2, r3
 80007ce:	4a06      	ldr	r2, [pc, #24]	; (80007e8 <move_tilt_steps+0x6c>)
 80007d0:	6812      	ldr	r2, [r2, #0]
 80007d2:	4413      	add	r3, r2
 80007d4:	461a      	mov	r2, r3
 80007d6:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <move_tilt_steps+0x6c>)
 80007d8:	601a      	str	r2, [r3, #0]
//	HAL_GPIO_WritePin(TILT_EN_GPIO_Port, TILT_EN_Pin, 1);

}
 80007da:	bf00      	nop
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	58020800 	.word	0x58020800
 80007e8:	2401d7bc 	.word	0x2401d7bc

080007ec <move_tilt_deg>:

void move_tilt_deg(uint32_t degrees, uint8_t dir) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	70fb      	strb	r3, [r7, #3]
	move_tilt_steps(TILT_DEFAULT_DELAY, dir, degrees*TILT_DEG_TO_STEPS);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f44f 5248 	mov.w	r2, #12800	; 0x3200
 80007fe:	fb03 f202 	mul.w	r2, r3, r2
 8000802:	78fb      	ldrb	r3, [r7, #3]
 8000804:	4619      	mov	r1, r3
 8000806:	2001      	movs	r0, #1
 8000808:	f7ff ffb8 	bl	800077c <move_tilt_steps>
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <move_pan_steps>:

void move_pan_steps(uint32_t delay, uint8_t dir, uint32_t num_steps) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	460b      	mov	r3, r1
 800081e:	607a      	str	r2, [r7, #4]
 8000820:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(PAN_EN_GPIO_Port, PAN_EN_Pin, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2101      	movs	r1, #1
 8000826:	481b      	ldr	r0, [pc, #108]	; (8000894 <move_pan_steps+0x80>)
 8000828:	f003 fd9e 	bl	8004368 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PAN_DIR_GPIO_Port, PAN_DIR_Pin, dir);
 800082c:	7afb      	ldrb	r3, [r7, #11]
 800082e:	461a      	mov	r2, r3
 8000830:	2108      	movs	r1, #8
 8000832:	4819      	ldr	r0, [pc, #100]	; (8000898 <move_pan_steps+0x84>)
 8000834:	f003 fd98 	bl	8004368 <HAL_GPIO_WritePin>
	for(int i=0; i<num_steps; i++) {
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	e014      	b.n	8000868 <move_pan_steps+0x54>
		HAL_GPIO_WritePin(PAN_STP_GPIO_Port, PAN_STP_Pin, GPIO_PIN_SET);
 800083e:	2201      	movs	r2, #1
 8000840:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000844:	4815      	ldr	r0, [pc, #84]	; (800089c <move_pan_steps+0x88>)
 8000846:	f003 fd8f 	bl	8004368 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 800084a:	68f8      	ldr	r0, [r7, #12]
 800084c:	f001 fb76 	bl	8001f3c <HAL_Delay>
		HAL_GPIO_WritePin(PAN_STP_GPIO_Port, PAN_STP_Pin, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000856:	4811      	ldr	r0, [pc, #68]	; (800089c <move_pan_steps+0x88>)
 8000858:	f003 fd86 	bl	8004368 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 800085c:	68f8      	ldr	r0, [r7, #12]
 800085e:	f001 fb6d 	bl	8001f3c <HAL_Delay>
	for(int i=0; i<num_steps; i++) {
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	3301      	adds	r3, #1
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	429a      	cmp	r2, r3
 800086e:	d8e6      	bhi.n	800083e <move_pan_steps+0x2a>
	}
//	char b[] = "done steps\r\n";
//	HAL_UART_Transmit(&huart3, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);

	panPos += num_steps * (1 - 2 * dir); // + if dir is 0, else -
 8000870:	7afb      	ldrb	r3, [r7, #11]
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	f1c3 0301 	rsb	r3, r3, #1
 8000878:	461a      	mov	r2, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	fb02 f303 	mul.w	r3, r2, r3
 8000880:	4a07      	ldr	r2, [pc, #28]	; (80008a0 <move_pan_steps+0x8c>)
 8000882:	6812      	ldr	r2, [r2, #0]
 8000884:	4413      	add	r3, r2
 8000886:	461a      	mov	r2, r3
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <move_pan_steps+0x8c>)
 800088a:	601a      	str	r2, [r3, #0]
//	HAL_GPIO_WritePin(PAN_EN_GPIO_Port, PAN_EN_Pin, 1);

}
 800088c:	bf00      	nop
 800088e:	3718      	adds	r7, #24
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	58020800 	.word	0x58020800
 8000898:	58020000 	.word	0x58020000
 800089c:	58021400 	.word	0x58021400
 80008a0:	2401d7b8 	.word	0x2401d7b8

080008a4 <move_pan_deg>:

void move_pan_deg(uint32_t degrees, uint8_t dir) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	; 0x28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	460b      	mov	r3, r1
 80008ae:	70fb      	strb	r3, [r7, #3]
	move_pan_steps(PAN_DEFAULT_DELAY, dir, degrees*PAN_DEG_TO_STEPS);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f44f 5248 	mov.w	r2, #12800	; 0x3200
 80008b6:	fb03 f202 	mul.w	r2, r3, r2
 80008ba:	78fb      	ldrb	r3, [r7, #3]
 80008bc:	4619      	mov	r1, r3
 80008be:	2001      	movs	r0, #1
 80008c0:	f7ff ffa8 	bl	8000814 <move_pan_steps>
	char pos[30];
//	sprintf(pos, "panPos: %d\r\n", panPos);
//	HAL_UART_Transmit(&huart3, (uint8_t*)pos, strlen(pos), HAL_MAX_DELAY);

}
 80008c4:	bf00      	nop
 80008c6:	3728      	adds	r7, #40	; 0x28
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <ack>:
void start_plunge(void) {

}

/*** USART Rx HANDLE ***/
void ack(void) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart3, tx_ack, 3, HAL_MAX_DELAY);
 80008d0:	f04f 33ff 	mov.w	r3, #4294967295
 80008d4:	2203      	movs	r2, #3
 80008d6:	4903      	ldr	r1, [pc, #12]	; (80008e4 <ack+0x18>)
 80008d8:	4803      	ldr	r0, [pc, #12]	; (80008e8 <ack+0x1c>)
 80008da:	f007 fefd 	bl	80086d8 <HAL_UART_Transmit>
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	24000004 	.word	0x24000004
 80008e8:	240001d4 	.word	0x240001d4

080008ec <bad>:

void bad(void) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, tx_bad, 3, HAL_MAX_DELAY);
 80008f0:	f04f 33ff 	mov.w	r3, #4294967295
 80008f4:	2203      	movs	r2, #3
 80008f6:	4903      	ldr	r1, [pc, #12]	; (8000904 <bad+0x18>)
 80008f8:	4803      	ldr	r0, [pc, #12]	; (8000908 <bad+0x1c>)
 80008fa:	f007 feed 	bl	80086d8 <HAL_UART_Transmit>
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	24000008 	.word	0x24000008
 8000908:	240001d4 	.word	0x240001d4

0800090c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
    rxBuffer[rxIndex] = received_character[0];
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <HAL_UART_RxCpltCallback+0x54>)
 8000916:	881b      	ldrh	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <HAL_UART_RxCpltCallback+0x58>)
 800091c:	7819      	ldrb	r1, [r3, #0]
 800091e:	4b12      	ldr	r3, [pc, #72]	; (8000968 <HAL_UART_RxCpltCallback+0x5c>)
 8000920:	5499      	strb	r1, [r3, r2]
	rxIndex++;
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <HAL_UART_RxCpltCallback+0x54>)
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	3301      	adds	r3, #1
 8000928:	b29a      	uxth	r2, r3
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <HAL_UART_RxCpltCallback+0x54>)
 800092c:	801a      	strh	r2, [r3, #0]

	if (received_character[0] == '\n' || received_character[0] == '\r') {
 800092e:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <HAL_UART_RxCpltCallback+0x58>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b0a      	cmp	r3, #10
 8000934:	d003      	beq.n	800093e <HAL_UART_RxCpltCallback+0x32>
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <HAL_UART_RxCpltCallback+0x58>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b0d      	cmp	r3, #13
 800093c:	d106      	bne.n	800094c <HAL_UART_RxCpltCallback+0x40>
    	rxIndex = 0;
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <HAL_UART_RxCpltCallback+0x54>)
 8000940:	2200      	movs	r2, #0
 8000942:	801a      	strh	r2, [r3, #0]
    	rx_flag = 1;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <HAL_UART_RxCpltCallback+0x60>)
 8000946:	2201      	movs	r2, #1
 8000948:	701a      	strb	r2, [r3, #0]
 800094a:	e005      	b.n	8000958 <HAL_UART_RxCpltCallback+0x4c>
    } else {
        HAL_UART_Receive_IT(&huart3, received_character, 1);
 800094c:	2201      	movs	r2, #1
 800094e:	4905      	ldr	r1, [pc, #20]	; (8000964 <HAL_UART_RxCpltCallback+0x58>)
 8000950:	4807      	ldr	r0, [pc, #28]	; (8000970 <HAL_UART_RxCpltCallback+0x64>)
 8000952:	f007 ff4f 	bl	80087f4 <HAL_UART_Receive_IT>
    }
}
 8000956:	bf00      	nop
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	2401d7b0 	.word	0x2401d7b0
 8000964:	2401d7b4 	.word	0x2401d7b4
 8000968:	2401d74c 	.word	0x2401d74c
 800096c:	2401d7b5 	.word	0x2401d7b5
 8000970:	240001d4 	.word	0x240001d4

08000974 <rx_handle>:

void rx_handle(void) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b0a0      	sub	sp, #128	; 0x80
 8000978:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, val);
 800097a:	4b5a      	ldr	r3, [pc, #360]	; (8000ae4 <rx_handle+0x170>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	461a      	mov	r2, r3
 8000980:	2102      	movs	r1, #2
 8000982:	4859      	ldr	r0, [pc, #356]	; (8000ae8 <rx_handle+0x174>)
 8000984:	f003 fcf0 	bl	8004368 <HAL_GPIO_WritePin>
	if(val)
 8000988:	4b56      	ldr	r3, [pc, #344]	; (8000ae4 <rx_handle+0x170>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d003      	beq.n	8000998 <rx_handle+0x24>
		val = 0;
 8000990:	4b54      	ldr	r3, [pc, #336]	; (8000ae4 <rx_handle+0x170>)
 8000992:	2200      	movs	r2, #0
 8000994:	701a      	strb	r2, [r3, #0]
 8000996:	e002      	b.n	800099e <rx_handle+0x2a>
	else
		val = 1;
 8000998:	4b52      	ldr	r3, [pc, #328]	; (8000ae4 <rx_handle+0x170>)
 800099a:	2201      	movs	r2, #1
 800099c:	701a      	strb	r2, [r3, #0]
	//sprintf(num, "RX0: %d\r\n", rxBuffer[0]);
	//HAL_UART_Transmit(&huart3, (uint8_t*)num, strlen(num), HAL_MAX_DELAY);
	switch(rxBuffer[0]) {
 800099e:	4b53      	ldr	r3, [pc, #332]	; (8000aec <rx_handle+0x178>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	3b31      	subs	r3, #49	; 0x31
 80009a4:	2b05      	cmp	r3, #5
 80009a6:	f200 8193 	bhi.w	8000cd0 <rx_handle+0x35c>
 80009aa:	a201      	add	r2, pc, #4	; (adr r2, 80009b0 <rx_handle+0x3c>)
 80009ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b0:	080009c9 	.word	0x080009c9
 80009b4:	08000a71 	.word	0x08000a71
 80009b8:	08000cd1 	.word	0x08000cd1
 80009bc:	08000c89 	.word	0x08000c89
 80009c0:	08000ca3 	.word	0x08000ca3
 80009c4:	08000cbd 	.word	0x08000cbd
    	case MOVE: ;
    		uint32_t amount = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	67fb      	str	r3, [r7, #124]	; 0x7c
			for(int i=2; i<=4; i++) {
 80009cc:	2302      	movs	r3, #2
 80009ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80009d0:	e01b      	b.n	8000a0a <rx_handle+0x96>
				 char digit = rxBuffer[i];
 80009d2:	4a46      	ldr	r2, [pc, #280]	; (8000aec <rx_handle+0x178>)
 80009d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80009d6:	4413      	add	r3, r2
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
				 if (digit >= '0' && digit <= '9') {
 80009de:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80009e2:	2b2f      	cmp	r3, #47	; 0x2f
 80009e4:	d90e      	bls.n	8000a04 <rx_handle+0x90>
 80009e6:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80009ea:	2b39      	cmp	r3, #57	; 0x39
 80009ec:	d80a      	bhi.n	8000a04 <rx_handle+0x90>
					 amount = (amount * 10) + (digit - '0');	// Shift the existing result left by one decimal place and add the digit value
 80009ee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80009f0:	4613      	mov	r3, r2
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	4413      	add	r3, r2
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	461a      	mov	r2, r3
 80009fa:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80009fe:	4413      	add	r3, r2
 8000a00:	3b30      	subs	r3, #48	; 0x30
 8000a02:	67fb      	str	r3, [r7, #124]	; 0x7c
			for(int i=2; i<=4; i++) {
 8000a04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a06:	3301      	adds	r3, #1
 8000a08:	67bb      	str	r3, [r7, #120]	; 0x78
 8000a0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a0c:	2b04      	cmp	r3, #4
 8000a0e:	dde0      	ble.n	80009d2 <rx_handle+0x5e>

			char response[100];
//			sprintf(response, "%c%c received this amount: %d\r\n", (int)rxBuffer[0], (int)rxBuffer[1], (int)amount);
//			HAL_UART_Transmit(&huart3, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);

			switch(rxBuffer[1]) {
 8000a10:	4b36      	ldr	r3, [pc, #216]	; (8000aec <rx_handle+0x178>)
 8000a12:	785b      	ldrb	r3, [r3, #1]
 8000a14:	3b31      	subs	r3, #49	; 0x31
 8000a16:	2b03      	cmp	r3, #3
 8000a18:	d826      	bhi.n	8000a68 <rx_handle+0xf4>
 8000a1a:	a201      	add	r2, pc, #4	; (adr r2, 8000a20 <rx_handle+0xac>)
 8000a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a20:	08000a31 	.word	0x08000a31
 8000a24:	08000a3f 	.word	0x08000a3f
 8000a28:	08000a4d 	.word	0x08000a4d
 8000a2c:	08000a5b 	.word	0x08000a5b
				case UP: ;
					move_tilt_deg(amount, DIR_TILT_UP);
 8000a30:	2101      	movs	r1, #1
 8000a32:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000a34:	f7ff feda 	bl	80007ec <move_tilt_deg>
					ack();
 8000a38:	f7ff ff48 	bl	80008cc <ack>
					break;
 8000a3c:	e017      	b.n	8000a6e <rx_handle+0xfa>
				case DOWN: ;
					move_tilt_deg(amount, DIR_TILT_DOWN);
 8000a3e:	2100      	movs	r1, #0
 8000a40:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000a42:	f7ff fed3 	bl	80007ec <move_tilt_deg>
					ack();
 8000a46:	f7ff ff41 	bl	80008cc <ack>
					break;
 8000a4a:	e010      	b.n	8000a6e <rx_handle+0xfa>
				case LEFT: ;
					move_pan_deg(amount, DIR_PAN_LEFT);
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000a50:	f7ff ff28 	bl	80008a4 <move_pan_deg>
					ack();
 8000a54:	f7ff ff3a 	bl	80008cc <ack>
					break;
 8000a58:	e009      	b.n	8000a6e <rx_handle+0xfa>
				case RIGHT: ;
					move_pan_deg(amount, DIR_PAN_RIGHT);
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000a5e:	f7ff ff21 	bl	80008a4 <move_pan_deg>
					ack();
 8000a62:	f7ff ff33 	bl	80008cc <ack>
					break;
 8000a66:	e002      	b.n	8000a6e <rx_handle+0xfa>
				default: ;
					bad();
 8000a68:	f7ff ff40 	bl	80008ec <bad>
					break;
 8000a6c:	bf00      	nop
			}

			break;
 8000a6e:	e12f      	b.n	8000cd0 <rx_handle+0x35c>

		case PLUNGE: ;
			HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 1); //disengage brake
 8000a70:	2201      	movs	r2, #1
 8000a72:	2140      	movs	r1, #64	; 0x40
 8000a74:	481e      	ldr	r0, [pc, #120]	; (8000af0 <rx_handle+0x17c>)
 8000a76:	f003 fc77 	bl	8004368 <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7e:	2203      	movs	r2, #3
 8000a80:	491c      	ldr	r1, [pc, #112]	; (8000af4 <rx_handle+0x180>)
 8000a82:	481d      	ldr	r0, [pc, #116]	; (8000af8 <rx_handle+0x184>)
 8000a84:	f007 fe28 	bl	80086d8 <HAL_UART_Transmit>

		/* retrieve info */
			plunge_done_flag = 0;
 8000a88:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <rx_handle+0x188>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	701a      	strb	r2, [r3, #0]

			uint32_t brake_pos = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	677b      	str	r3, [r7, #116]	; 0x74
			timepoint_pos = 0;
 8000a92:	4b1b      	ldr	r3, [pc, #108]	; (8000b00 <rx_handle+0x18c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
			for(int i=1; i<=6; i++) {
 8000a98:	2301      	movs	r3, #1
 8000a9a:	673b      	str	r3, [r7, #112]	; 0x70
 8000a9c:	e01b      	b.n	8000ad6 <rx_handle+0x162>
				 char digit = rxBuffer[i];
 8000a9e:	4a13      	ldr	r2, [pc, #76]	; (8000aec <rx_handle+0x178>)
 8000aa0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000aa2:	4413      	add	r3, r2
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
				 if (digit >= '0' && digit <= '9') {
 8000aaa:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8000aae:	2b2f      	cmp	r3, #47	; 0x2f
 8000ab0:	d90e      	bls.n	8000ad0 <rx_handle+0x15c>
 8000ab2:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8000ab6:	2b39      	cmp	r3, #57	; 0x39
 8000ab8:	d80a      	bhi.n	8000ad0 <rx_handle+0x15c>
					 brake_pos = (brake_pos * 10) + (digit - '0');	// Shift the existing result left by one decimal place and add the digit value
 8000aba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000abc:	4613      	mov	r3, r2
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	4413      	add	r3, r2
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8000aca:	4413      	add	r3, r2
 8000acc:	3b30      	subs	r3, #48	; 0x30
 8000ace:	677b      	str	r3, [r7, #116]	; 0x74
			for(int i=1; i<=6; i++) {
 8000ad0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	673b      	str	r3, [r7, #112]	; 0x70
 8000ad6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ad8:	2b06      	cmp	r3, #6
 8000ada:	dde0      	ble.n	8000a9e <rx_handle+0x12a>
				 }
			}
			for(int i=7; i<=12; i++) {
 8000adc:	2307      	movs	r3, #7
 8000ade:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000ae0:	e02e      	b.n	8000b40 <rx_handle+0x1cc>
 8000ae2:	bf00      	nop
 8000ae4:	24000000 	.word	0x24000000
 8000ae8:	58021000 	.word	0x58021000
 8000aec:	2401d74c 	.word	0x2401d74c
 8000af0:	58020000 	.word	0x58020000
 8000af4:	24000004 	.word	0x24000004
 8000af8:	240001d4 	.word	0x240001d4
 8000afc:	2401d744 	.word	0x2401d744
 8000b00:	2401d730 	.word	0x2401d730
				 char digit = rxBuffer[i];
 8000b04:	4a78      	ldr	r2, [pc, #480]	; (8000ce8 <rx_handle+0x374>)
 8000b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b08:	4413      	add	r3, r2
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
				 if (digit >= '0' && digit <= '9') {
 8000b10:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000b14:	2b2f      	cmp	r3, #47	; 0x2f
 8000b16:	d910      	bls.n	8000b3a <rx_handle+0x1c6>
 8000b18:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000b1c:	2b39      	cmp	r3, #57	; 0x39
 8000b1e:	d80c      	bhi.n	8000b3a <rx_handle+0x1c6>
					 timepoint_pos = (timepoint_pos * 10) + (digit - '0');	// Shift the existing result left by one decimal place and add the digit value
 8000b20:	4b72      	ldr	r3, [pc, #456]	; (8000cec <rx_handle+0x378>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	4613      	mov	r3, r2
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	4413      	add	r3, r2
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000b32:	4413      	add	r3, r2
 8000b34:	3b30      	subs	r3, #48	; 0x30
 8000b36:	4a6d      	ldr	r2, [pc, #436]	; (8000cec <rx_handle+0x378>)
 8000b38:	6013      	str	r3, [r2, #0]
			for(int i=7; i<=12; i++) {
 8000b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b42:	2b0c      	cmp	r3, #12
 8000b44:	ddde      	ble.n	8000b04 <rx_handle+0x190>
	//		HAL_UART_Transmit(&huart3, (uint8_t*)num, strlen(num), HAL_MAX_DELAY);

			/***TODO: figure out what angle to tilt to given timepoint_pos***/

			/* reset tracking variables */
			log_position = 0;
 8000b46:	4b6a      	ldr	r3, [pc, #424]	; (8000cf0 <rx_handle+0x37c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
			running_sum = 0;
 8000b4c:	4b69      	ldr	r3, [pc, #420]	; (8000cf4 <rx_handle+0x380>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
			memset(posLog, 0, sizeof(posLog));
 8000b52:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000b56:	2100      	movs	r1, #0
 8000b58:	4867      	ldr	r0, [pc, #412]	; (8000cf8 <rx_handle+0x384>)
 8000b5a:	f00a fab9 	bl	800b0d0 <memset>
      memset(thermoLog, 0, sizeof(thermoLog));
 8000b5e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000b62:	2100      	movs	r1, #0
 8000b64:	4865      	ldr	r0, [pc, #404]	; (8000cfc <rx_handle+0x388>)
 8000b66:	f00a fab3 	bl	800b0d0 <memset>
			DEPOSITED = 0;
 8000b6a:	4b65      	ldr	r3, [pc, #404]	; (8000d00 <rx_handle+0x38c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]

			/* dispense position calculation */
			//						    us								mm						mm/s	   s->us
			dispense_delay_clocks = 10000;//(DISPENSE_LATENCY + (TARGET_DIST_ORTH*cos(tiltPos*M_PI/180))/DROP_SPEED*1000*1000)*US_TO_TICKS;
 8000b70:	4b64      	ldr	r3, [pc, #400]	; (8000d04 <rx_handle+0x390>)
 8000b72:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b76:	601a      	str	r2, [r3, #0]
			// ^ delay in ticks between dispensing and drop hit target in x direction


			/* configure tim4 for final dispense timing */
			TIM4->CR1  &= ~TIM_CR1_CEN;
 8000b78:	4b63      	ldr	r3, [pc, #396]	; (8000d08 <rx_handle+0x394>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a62      	ldr	r2, [pc, #392]	; (8000d08 <rx_handle+0x394>)
 8000b7e:	f023 0301 	bic.w	r3, r3, #1
 8000b82:	6013      	str	r3, [r2, #0]

			TIM4->CNT   =  100;				// 100 included here and in ARR to make sure it doesnt immediately underflow if it vibrates up
 8000b84:	4b60      	ldr	r3, [pc, #384]	; (8000d08 <rx_handle+0x394>)
 8000b86:	2264      	movs	r2, #100	; 0x64
 8000b88:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->ARR 	= brake_pos; 	// Counter rolls over at brake_pos which triggers an interrupt handled in TIM2_IRQHandler (stm32h7xx_it.c)
 8000b8a:	4a5f      	ldr	r2, [pc, #380]	; (8000d08 <rx_handle+0x394>)
 8000b8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b8e:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM4->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000b90:	4b5d      	ldr	r3, [pc, #372]	; (8000d08 <rx_handle+0x394>)
 8000b92:	691b      	ldr	r3, [r3, #16]
 8000b94:	4a5c      	ldr	r2, [pc, #368]	; (8000d08 <rx_handle+0x394>)
 8000b96:	f023 0301 	bic.w	r3, r3, #1
 8000b9a:	6113      	str	r3, [r2, #16]
			TIM4->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000b9c:	4b5a      	ldr	r3, [pc, #360]	; (8000d08 <rx_handle+0x394>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a59      	ldr	r2, [pc, #356]	; (8000d08 <rx_handle+0x394>)
 8000ba2:	f023 0302 	bic.w	r3, r3, #2
 8000ba6:	6013      	str	r3, [r2, #0]
			TIM4->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000ba8:	4b57      	ldr	r3, [pc, #348]	; (8000d08 <rx_handle+0x394>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	4a56      	ldr	r2, [pc, #344]	; (8000d08 <rx_handle+0x394>)
 8000bae:	f043 0301 	orr.w	r3, r3, #1
 8000bb2:	60d3      	str	r3, [r2, #12]
			TIM4->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000bb4:	4b54      	ldr	r3, [pc, #336]	; (8000d08 <rx_handle+0x394>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a53      	ldr	r2, [pc, #332]	; (8000d08 <rx_handle+0x394>)
 8000bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bbe:	6013      	str	r3, [r2, #0]

			/* configuring encoder counter */
			TIM2->CR1  &= ~TIM_CR1_CEN;
 8000bc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bca:	f023 0301 	bic.w	r3, r3, #1
 8000bce:	6013      	str	r3, [r2, #0]

			TIM2->CNT   =  100;				// 100 included here and in ARR to make sure it doesnt immediately underflow if it vibrates up
 8000bd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bd4:	2264      	movs	r2, #100	; 0x64
 8000bd6:	625a      	str	r2, [r3, #36]	; 0x24
			TIM2->ARR 	= brake_pos; 		// Counter rolls over at brake_pos which triggers an interrupt handled in TIM2_IRQHandler (stm32h7xx_it.c)
 8000bd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000bde:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM2->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000be0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000be4:	691b      	ldr	r3, [r3, #16]
 8000be6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bea:	f023 0301 	bic.w	r3, r3, #1
 8000bee:	6113      	str	r3, [r2, #16]
			TIM2->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000bf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bfa:	f023 0302 	bic.w	r3, r3, #2
 8000bfe:	6013      	str	r3, [r2, #0]
			TIM2->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000c00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	60d3      	str	r3, [r2, #12]
			TIM2->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000c10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c1e:	6013      	str	r3, [r2, #0]

			TIM2->CR1  |=  TIM_CR1_CEN; 	//start counter
 8000c20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c2a:	f043 0301 	orr.w	r3, r3, #1
 8000c2e:	6013      	str	r3, [r2, #0]

			/* configuring data logging timer */
			TIM5->CR1  &= ~TIM_CR1_CEN; // Start TIM5 to commence data collection
 8000c30:	4b36      	ldr	r3, [pc, #216]	; (8000d0c <rx_handle+0x398>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a35      	ldr	r2, [pc, #212]	; (8000d0c <rx_handle+0x398>)
 8000c36:	f023 0301 	bic.w	r3, r3, #1
 8000c3a:	6013      	str	r3, [r2, #0]

			TIM5-> CNT  = 100;				//
 8000c3c:	4b33      	ldr	r3, [pc, #204]	; (8000d0c <rx_handle+0x398>)
 8000c3e:	2264      	movs	r2, #100	; 0x64
 8000c40:	625a      	str	r2, [r3, #36]	; 0x24
			TIM5->ARR 	= CLOCKS_PER_LOG; 	// check positione interval
 8000c42:	4b32      	ldr	r3, [pc, #200]	; (8000d0c <rx_handle+0x398>)
 8000c44:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8000c48:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM5->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000c4a:	4b30      	ldr	r3, [pc, #192]	; (8000d0c <rx_handle+0x398>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a2f      	ldr	r2, [pc, #188]	; (8000d0c <rx_handle+0x398>)
 8000c50:	f023 0302 	bic.w	r3, r3, #2
 8000c54:	6013      	str	r3, [r2, #0]
			TIM5->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000c56:	4b2d      	ldr	r3, [pc, #180]	; (8000d0c <rx_handle+0x398>)
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	4a2c      	ldr	r2, [pc, #176]	; (8000d0c <rx_handle+0x398>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	60d3      	str	r3, [r2, #12]
			TIM5->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000c62:	4b2a      	ldr	r3, [pc, #168]	; (8000d0c <rx_handle+0x398>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a29      	ldr	r2, [pc, #164]	; (8000d0c <rx_handle+0x398>)
 8000c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c6c:	6013      	str	r3, [r2, #0]
			TIM5->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000c6e:	4b27      	ldr	r3, [pc, #156]	; (8000d0c <rx_handle+0x398>)
 8000c70:	691b      	ldr	r3, [r3, #16]
 8000c72:	4a26      	ldr	r2, [pc, #152]	; (8000d0c <rx_handle+0x398>)
 8000c74:	f023 0301 	bic.w	r3, r3, #1
 8000c78:	6113      	str	r3, [r2, #16]

			TIM5->CR1  |= TIM_CR1_CEN; // Start TIM5 to commence data collection
 8000c7a:	4b24      	ldr	r3, [pc, #144]	; (8000d0c <rx_handle+0x398>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a23      	ldr	r2, [pc, #140]	; (8000d0c <rx_handle+0x398>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6013      	str	r3, [r2, #0]
//				char response[100] = {0};
//				enc_pos = TIM2->CNT;
//				sprintf(response, "enc: %d; disp_f: %d; runsum: %d; tim4: %d; log_pos: %d, clocks_to_disp: %d; disp: %d\r\n", (int)enc_pos, (int)disp_flag, (int)running_sum, (int)TIM4->CNT, (int)log_position, (int)TIM4->ARR, (int)DEPOSITED);
//				HAL_UART_Transmit(&huart3, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
//			}
			break;
 8000c86:	e023      	b.n	8000cd0 <rx_handle+0x35c>

		case RELEASE: ;
			HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000c88:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	4920      	ldr	r1, [pc, #128]	; (8000d10 <rx_handle+0x39c>)
 8000c90:	4820      	ldr	r0, [pc, #128]	; (8000d14 <rx_handle+0x3a0>)
 8000c92:	f007 fd21 	bl	80086d8 <HAL_UART_Transmit>

			HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 1); //disengage brake
 8000c96:	2201      	movs	r2, #1
 8000c98:	2140      	movs	r1, #64	; 0x40
 8000c9a:	481f      	ldr	r0, [pc, #124]	; (8000d18 <rx_handle+0x3a4>)
 8000c9c:	f003 fb64 	bl	8004368 <HAL_GPIO_WritePin>
//			char j[100] = {0};
//			sprintf(j, "RELEASE\r\n");
//			HAL_UART_Transmit(&huart3, (uint8_t*)j, strlen(j), HAL_MAX_DELAY);

			break;
 8000ca0:	e016      	b.n	8000cd0 <rx_handle+0x35c>
		case '5': ;
			HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	4919      	ldr	r1, [pc, #100]	; (8000d10 <rx_handle+0x39c>)
 8000caa:	481a      	ldr	r0, [pc, #104]	; (8000d14 <rx_handle+0x3a0>)
 8000cac:	f007 fd14 	bl	80086d8 <HAL_UART_Transmit>

			HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 0); //engage brake
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2140      	movs	r1, #64	; 0x40
 8000cb4:	4818      	ldr	r0, [pc, #96]	; (8000d18 <rx_handle+0x3a4>)
 8000cb6:	f003 fb57 	bl	8004368 <HAL_GPIO_WritePin>
//			char k[100] = {0};
//			sprintf(k, "BRAKE\r\n");
//			HAL_UART_Transmit(&huart3, (uint8_t*)k, strlen(k), HAL_MAX_DELAY);

			break;
 8000cba:	e009      	b.n	8000cd0 <rx_handle+0x35c>
		case '6': ;
			char lm[100] = {0};
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	f107 0308 	add.w	r3, r7, #8
 8000cc4:	2260      	movs	r2, #96	; 0x60
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f00a fa01 	bl	800b0d0 <memset>
			//sprintf(lm, "current position: %d\r\n braked at: %d\r\n", TIM2->CNT, posn_braked_at);
			//HAL_UART_Transmit(&huart3, (uint8_t*)lm, strlen(lm), HAL_MAX_DELAY);
			break;
 8000cce:	bf00      	nop

    }
//	char b[] = "done handling\r\n";
//	HAL_UART_Transmit(&huart3, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);

    rx_flag = 0;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <rx_handle+0x3a8>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart3, received_character, 1);
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	4911      	ldr	r1, [pc, #68]	; (8000d20 <rx_handle+0x3ac>)
 8000cda:	480e      	ldr	r0, [pc, #56]	; (8000d14 <rx_handle+0x3a0>)
 8000cdc:	f007 fd8a 	bl	80087f4 <HAL_UART_Receive_IT>
}
 8000ce0:	bf00      	nop
 8000ce2:	3780      	adds	r7, #128	; 0x80
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	2401d74c 	.word	0x2401d74c
 8000cec:	2401d730 	.word	0x2401d730
 8000cf0:	2401d728 	.word	0x2401d728
 8000cf4:	2401d72c 	.word	0x2401d72c
 8000cf8:	24000268 	.word	0x24000268
 8000cfc:	2400ecc8 	.word	0x2400ecc8
 8000d00:	2401d745 	.word	0x2401d745
 8000d04:	2401d734 	.word	0x2401d734
 8000d08:	40000800 	.word	0x40000800
 8000d0c:	40000c00 	.word	0x40000c00
 8000d10:	24000004 	.word	0x24000004
 8000d14:	240001d4 	.word	0x240001d4
 8000d18:	58020000 	.word	0x58020000
 8000d1c:	2401d7b5 	.word	0x2401d7b5
 8000d20:	2401d7b4 	.word	0x2401d7b4

08000d24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d2a:	f001 f875 	bl	8001e18 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2e:	f000 f8a7 	bl	8000e80 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d32:	f000 faf9 	bl	8001328 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d36:	f000 f991 	bl	800105c <MX_TIM2_Init>
  MX_USB_OTG_HS_USB_Init();
 8000d3a:	f000 faed 	bl	8001318 <MX_USB_OTG_HS_USB_Init>
  MX_USART3_UART_Init();
 8000d3e:	f000 fa9f 	bl	8001280 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8000d42:	f000 fa4f 	bl	80011e4 <MX_TIM5_Init>
  MX_TIM4_Init();
 8000d46:	f000 f9f5 	bl	8001134 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000d4a:	f000 f90f 	bl	8000f6c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, received_character, 1); // initialize interrupts
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4941      	ldr	r1, [pc, #260]	; (8000e58 <main+0x134>)
 8000d52:	4842      	ldr	r0, [pc, #264]	; (8000e5c <main+0x138>)
 8000d54:	f007 fd4e 	bl	80087f4 <HAL_UART_Receive_IT>

//  char msg[] = "program start \r\n";
//  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

  // TIM2 for encoder tick counting
  NVIC_SetPriority(TIM2_IRQn, 1); // Braking is priority as long as dispense isnt happening
 8000d58:	2101      	movs	r1, #1
 8000d5a:	201c      	movs	r0, #28
 8000d5c:	f7ff fce4 	bl	8000728 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000d60:	201c      	movs	r0, #28
 8000d62:	f7ff fcc3 	bl	80006ec <__NVIC_EnableIRQ>

  // TIM5 for logkeeping and speed calculations and TIM4 setup
  NVIC_SetPriority(TIM5_IRQn, 2); // Log keeping should be interruptable
 8000d66:	2102      	movs	r1, #2
 8000d68:	2032      	movs	r0, #50	; 0x32
 8000d6a:	f7ff fcdd 	bl	8000728 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 8000d6e:	2032      	movs	r0, #50	; 0x32
 8000d70:	f7ff fcbc 	bl	80006ec <__NVIC_EnableIRQ>

  // TIM4 for dispense timing after commenced by TIM5
  NVIC_SetPriority(TIM4_IRQn, 0); // Dispense accuracy is top priority
 8000d74:	2100      	movs	r1, #0
 8000d76:	201e      	movs	r0, #30
 8000d78:	f7ff fcd6 	bl	8000728 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 8000d7c:	201e      	movs	r0, #30
 8000d7e:	f7ff fcb5 	bl	80006ec <__NVIC_EnableIRQ>

  HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 1); // Ensure brake is disengaged after reset
 8000d82:	2201      	movs	r2, #1
 8000d84:	2140      	movs	r1, #64	; 0x40
 8000d86:	4836      	ldr	r0, [pc, #216]	; (8000e60 <main+0x13c>)
 8000d88:	f003 faee 	bl	8004368 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1) {
	  if(rx_flag) rx_handle();
 8000d8c:	4b35      	ldr	r3, [pc, #212]	; (8000e64 <main+0x140>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <main+0x74>
 8000d94:	f7ff fdee 	bl	8000974 <rx_handle>


	  if(plunge_done_flag) {
 8000d98:	4b33      	ldr	r3, [pc, #204]	; (8000e68 <main+0x144>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d0f5      	beq.n	8000d8c <main+0x68>
		  HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000da0:	f04f 33ff 	mov.w	r3, #4294967295
 8000da4:	2203      	movs	r2, #3
 8000da6:	4931      	ldr	r1, [pc, #196]	; (8000e6c <main+0x148>)
 8000da8:	482c      	ldr	r0, [pc, #176]	; (8000e5c <main+0x138>)
 8000daa:	f007 fc95 	bl	80086d8 <HAL_UART_Transmit>
		  char msg[10];
		  for(int i=0 ; i<log_position; i++) {
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	e018      	b.n	8000de6 <main+0xc2>
			  sprintf(msg, "%u\n", posLog[i]);
 8000db4:	4a2e      	ldr	r2, [pc, #184]	; (8000e70 <main+0x14c>)
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	492c      	ldr	r1, [pc, #176]	; (8000e74 <main+0x150>)
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f00a f964 	bl	800b090 <siprintf>
//			  bytes[2] = ((posLog[i] >> 8) 		& 0xFF);
//			  bytes[3] = ((posLog[i])	 		& 0xFF);
//
//			  HAL_UART_Transmit(&huart3, bytes, 4, HAL_MAX_DELAY);
//			  HAL_UART_Transmit(&huart3, (uint8_t*)rn, strlen(rn), HAL_MAX_DELAY);
			  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fa90 	bl	80002f0 <strlen>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	1d39      	adds	r1, r7, #4
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dda:	4820      	ldr	r0, [pc, #128]	; (8000e5c <main+0x138>)
 8000ddc:	f007 fc7c 	bl	80086d8 <HAL_UART_Transmit>
		  for(int i=0 ; i<log_position; i++) {
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	3301      	adds	r3, #1
 8000de4:	617b      	str	r3, [r7, #20]
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	4b23      	ldr	r3, [pc, #140]	; (8000e78 <main+0x154>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d3e1      	bcc.n	8000db4 <main+0x90>
		  }
		  HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000df0:	f04f 33ff 	mov.w	r3, #4294967295
 8000df4:	2203      	movs	r2, #3
 8000df6:	491d      	ldr	r1, [pc, #116]	; (8000e6c <main+0x148>)
 8000df8:	4818      	ldr	r0, [pc, #96]	; (8000e5c <main+0x138>)
 8000dfa:	f007 fc6d 	bl	80086d8 <HAL_UART_Transmit>

      for(int i=0 ; i<log_position; i++) {
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	e018      	b.n	8000e36 <main+0x112>
			  sprintf(msg, "%u\n", thermoLog[i]);
 8000e04:	4a1d      	ldr	r2, [pc, #116]	; (8000e7c <main+0x158>)
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	4918      	ldr	r1, [pc, #96]	; (8000e74 <main+0x150>)
 8000e12:	4618      	mov	r0, r3
 8000e14:	f00a f93c 	bl	800b090 <siprintf>
//			  bytes[2] = ((posLog[i] >> 8) 		& 0xFF);
//			  bytes[3] = ((posLog[i])	 		& 0xFF);
//
//			  HAL_UART_Transmit(&huart3, bytes, 4, HAL_MAX_DELAY);
//			  HAL_UART_Transmit(&huart3, (uint8_t*)rn, strlen(rn), HAL_MAX_DELAY);
			  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fa68 	bl	80002f0 <strlen>
 8000e20:	4603      	mov	r3, r0
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	1d39      	adds	r1, r7, #4
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	480c      	ldr	r0, [pc, #48]	; (8000e5c <main+0x138>)
 8000e2c:	f007 fc54 	bl	80086d8 <HAL_UART_Transmit>
      for(int i=0 ; i<log_position; i++) {
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	3301      	adds	r3, #1
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <main+0x154>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d3e1      	bcc.n	8000e04 <main+0xe0>
		  }
      HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000e40:	f04f 33ff 	mov.w	r3, #4294967295
 8000e44:	2203      	movs	r2, #3
 8000e46:	4909      	ldr	r1, [pc, #36]	; (8000e6c <main+0x148>)
 8000e48:	4804      	ldr	r0, [pc, #16]	; (8000e5c <main+0x138>)
 8000e4a:	f007 fc45 	bl	80086d8 <HAL_UART_Transmit>
		  plunge_done_flag = 0;
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <main+0x144>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
	  if(rx_flag) rx_handle();
 8000e54:	e79a      	b.n	8000d8c <main+0x68>
 8000e56:	bf00      	nop
 8000e58:	2401d7b4 	.word	0x2401d7b4
 8000e5c:	240001d4 	.word	0x240001d4
 8000e60:	58020000 	.word	0x58020000
 8000e64:	2401d7b5 	.word	0x2401d7b5
 8000e68:	2401d744 	.word	0x2401d744
 8000e6c:	24000004 	.word	0x24000004
 8000e70:	24000268 	.word	0x24000268
 8000e74:	0800b9f0 	.word	0x0800b9f0
 8000e78:	2401d728 	.word	0x2401d728
 8000e7c:	2400ecc8 	.word	0x2400ecc8

08000e80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b09c      	sub	sp, #112	; 0x70
 8000e84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8a:	224c      	movs	r2, #76	; 0x4c
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f00a f91e 	bl	800b0d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	2220      	movs	r2, #32
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f00a f918 	bl	800b0d0 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000ea0:	4b30      	ldr	r3, [pc, #192]	; (8000f64 <SystemClock_Config+0xe4>)
 8000ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000eaa:	2004      	movs	r0, #4
 8000eac:	f003 fa76 	bl	800439c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	603b      	str	r3, [r7, #0]
 8000eb4:	4b2c      	ldr	r3, [pc, #176]	; (8000f68 <SystemClock_Config+0xe8>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	4a2b      	ldr	r2, [pc, #172]	; (8000f68 <SystemClock_Config+0xe8>)
 8000eba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ebe:	6193      	str	r3, [r2, #24]
 8000ec0:	4b29      	ldr	r3, [pc, #164]	; (8000f68 <SystemClock_Config+0xe8>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ec8:	603b      	str	r3, [r7, #0]
 8000eca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ecc:	bf00      	nop
 8000ece:	4b26      	ldr	r3, [pc, #152]	; (8000f68 <SystemClock_Config+0xe8>)
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eda:	d1f8      	bne.n	8000ece <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000edc:	2321      	movs	r3, #33	; 0x21
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ee0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eea:	2302      	movs	r3, #2
 8000eec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000ef6:	2318      	movs	r3, #24
 8000ef8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000efa:	2302      	movs	r3, #2
 8000efc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000efe:	2304      	movs	r3, #4
 8000f00:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f02:	2302      	movs	r3, #2
 8000f04:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f06:	230c      	movs	r3, #12
 8000f08:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f16:	4618      	mov	r0, r3
 8000f18:	f003 fa9a 	bl	8004450 <HAL_RCC_OscConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f22:	f000 fb51 	bl	80015c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f26:	233f      	movs	r3, #63	; 0x3f
 8000f28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000f42:	2300      	movs	r3, #0
 8000f44:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2102      	movs	r1, #2
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f003 feb2 	bl	8004cb4 <HAL_RCC_ClockConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000f56:	f000 fb37 	bl	80015c8 <Error_Handler>
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	3770      	adds	r7, #112	; 0x70
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	58024400 	.word	0x58024400
 8000f68:	58024800 	.word	0x58024800

08000f6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f7e:	463b      	mov	r3, r7
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
 8000f8c:	615a      	str	r2, [r3, #20]
 8000f8e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f90:	4b2f      	ldr	r3, [pc, #188]	; (8001050 <MX_ADC1_Init+0xe4>)
 8000f92:	4a30      	ldr	r2, [pc, #192]	; (8001054 <MX_ADC1_Init+0xe8>)
 8000f94:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f96:	4b2e      	ldr	r3, [pc, #184]	; (8001050 <MX_ADC1_Init+0xe4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000f9c:	4b2c      	ldr	r3, [pc, #176]	; (8001050 <MX_ADC1_Init+0xe4>)
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fa2:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <MX_ADC1_Init+0xe4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fa8:	4b29      	ldr	r3, [pc, #164]	; (8001050 <MX_ADC1_Init+0xe4>)
 8000faa:	2204      	movs	r2, #4
 8000fac:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fae:	4b28      	ldr	r3, [pc, #160]	; (8001050 <MX_ADC1_Init+0xe4>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fb4:	4b26      	ldr	r3, [pc, #152]	; (8001050 <MX_ADC1_Init+0xe4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000fba:	4b25      	ldr	r3, [pc, #148]	; (8001050 <MX_ADC1_Init+0xe4>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fc0:	4b23      	ldr	r3, [pc, #140]	; (8001050 <MX_ADC1_Init+0xe4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc6:	4b22      	ldr	r3, [pc, #136]	; (8001050 <MX_ADC1_Init+0xe4>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fcc:	4b20      	ldr	r3, [pc, #128]	; (8001050 <MX_ADC1_Init+0xe4>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000fd2:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <MX_ADC1_Init+0xe4>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <MX_ADC1_Init+0xe4>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000fde:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <MX_ADC1_Init+0xe4>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <MX_ADC1_Init+0xe4>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fec:	4818      	ldr	r0, [pc, #96]	; (8001050 <MX_ADC1_Init+0xe4>)
 8000fee:	f001 f9ab 	bl	8002348 <HAL_ADC_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ff8:	f000 fae6 	bl	80015c8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4619      	mov	r1, r3
 8001006:	4812      	ldr	r0, [pc, #72]	; (8001050 <MX_ADC1_Init+0xe4>)
 8001008:	f002 f8ee 	bl	80031e8 <HAL_ADCEx_MultiModeConfigChannel>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001012:	f000 fad9 	bl	80015c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <MX_ADC1_Init+0xec>)
 8001018:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800101a:	2306      	movs	r3, #6
 800101c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001022:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001026:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001028:	2304      	movs	r3, #4
 800102a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001030:	2300      	movs	r3, #0
 8001032:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001034:	463b      	mov	r3, r7
 8001036:	4619      	mov	r1, r3
 8001038:	4805      	ldr	r0, [pc, #20]	; (8001050 <MX_ADC1_Init+0xe4>)
 800103a:	f001 fc7f 	bl	800293c <HAL_ADC_ConfigChannel>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001044:	f000 fac0 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001048:	bf00      	nop
 800104a:	3728      	adds	r7, #40	; 0x28
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	2400008c 	.word	0x2400008c
 8001054:	40022000 	.word	0x40022000
 8001058:	14f00020 	.word	0x14f00020

0800105c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08c      	sub	sp, #48	; 0x30
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	2224      	movs	r2, #36	; 0x24
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f00a f830 	bl	800b0d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001070:	463b      	mov	r3, r7
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800107a:	4b2d      	ldr	r3, [pc, #180]	; (8001130 <MX_TIM2_Init+0xd4>)
 800107c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001080:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001082:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <MX_TIM2_Init+0xd4>)
 8001084:	2200      	movs	r2, #0
 8001086:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001088:	4b29      	ldr	r3, [pc, #164]	; (8001130 <MX_TIM2_Init+0xd4>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800108e:	4b28      	ldr	r3, [pc, #160]	; (8001130 <MX_TIM2_Init+0xd4>)
 8001090:	f04f 32ff 	mov.w	r2, #4294967295
 8001094:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001096:	4b26      	ldr	r3, [pc, #152]	; (8001130 <MX_TIM2_Init+0xd4>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109c:	4b24      	ldr	r3, [pc, #144]	; (8001130 <MX_TIM2_Init+0xd4>)
 800109e:	2200      	movs	r2, #0
 80010a0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80010a2:	2301      	movs	r3, #1
 80010a4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010aa:	2301      	movs	r3, #1
 80010ac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010b6:	2300      	movs	r3, #0
 80010b8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010ba:	2301      	movs	r3, #1
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010be:	2300      	movs	r3, #0
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	4619      	mov	r1, r3
 80010cc:	4818      	ldr	r0, [pc, #96]	; (8001130 <MX_TIM2_Init+0xd4>)
 80010ce:	f006 fddf 	bl	8007c90 <HAL_TIM_Encoder_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80010d8:	f000 fa76 	bl	80015c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010dc:	2300      	movs	r3, #0
 80010de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010e4:	463b      	mov	r3, r7
 80010e6:	4619      	mov	r1, r3
 80010e8:	4811      	ldr	r0, [pc, #68]	; (8001130 <MX_TIM2_Init+0xd4>)
 80010ea:	f007 f9f9 	bl	80084e0 <HAL_TIMEx_MasterConfigSynchronization>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80010f4:	f000 fa68 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
	TIM2->CR1  |= TIM_CR1_UDIS;	// make sure update is enabled
 80010f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001102:	f043 0302 	orr.w	r3, r3, #2
 8001106:	6013      	str	r3, [r2, #0]
	TIM2->DIER &=  ~TIM_DIER_UIE; 	// update interrupt enabled
 8001108:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001112:	f023 0301 	bic.w	r3, r3, #1
 8001116:	60d3      	str	r3, [r2, #12]
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8001118:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001122:	f023 0301 	bic.w	r3, r3, #1
 8001126:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	3730      	adds	r7, #48	; 0x30
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	240000f0 	.word	0x240000f0

08001134 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800113a:	f107 0310 	add.w	r3, r7, #16
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001152:	4b22      	ldr	r3, [pc, #136]	; (80011dc <MX_TIM4_Init+0xa8>)
 8001154:	4a22      	ldr	r2, [pc, #136]	; (80011e0 <MX_TIM4_Init+0xac>)
 8001156:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001158:	4b20      	ldr	r3, [pc, #128]	; (80011dc <MX_TIM4_Init+0xa8>)
 800115a:	2200      	movs	r2, #0
 800115c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115e:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <MX_TIM4_Init+0xa8>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <MX_TIM4_Init+0xa8>)
 8001166:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800116a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <MX_TIM4_Init+0xa8>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001172:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <MX_TIM4_Init+0xa8>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001178:	4818      	ldr	r0, [pc, #96]	; (80011dc <MX_TIM4_Init+0xa8>)
 800117a:	f006 fd31 	bl	8007be0 <HAL_TIM_Base_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001184:	f000 fa20 	bl	80015c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800118e:	f107 0310 	add.w	r3, r7, #16
 8001192:	4619      	mov	r1, r3
 8001194:	4811      	ldr	r0, [pc, #68]	; (80011dc <MX_TIM4_Init+0xa8>)
 8001196:	f006 ff41 	bl	800801c <HAL_TIM_ConfigClockSource>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80011a0:	f000 fa12 	bl	80015c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a4:	2300      	movs	r3, #0
 80011a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	4619      	mov	r1, r3
 80011b0:	480a      	ldr	r0, [pc, #40]	; (80011dc <MX_TIM4_Init+0xa8>)
 80011b2:	f007 f995 	bl	80084e0 <HAL_TIMEx_MasterConfigSynchronization>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80011bc:	f000 fa04 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
	TIM4->CR1 &= ~TIM_CR1_CEN; 	// dont start it
 80011c0:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <MX_TIM4_Init+0xac>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a06      	ldr	r2, [pc, #24]	; (80011e0 <MX_TIM4_Init+0xac>)
 80011c6:	f023 0301 	bic.w	r3, r3, #1
 80011ca:	6013      	str	r3, [r2, #0]
	TIM4->CNT = 0;				//reset it
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <MX_TIM4_Init+0xac>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE END TIM4_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	3720      	adds	r7, #32
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	2400013c 	.word	0x2400013c
 80011e0:	40000800 	.word	0x40000800

080011e4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ea:	f107 0310 	add.w	r3, r7, #16
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001202:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <MX_TIM5_Init+0x94>)
 8001204:	4a1d      	ldr	r2, [pc, #116]	; (800127c <MX_TIM5_Init+0x98>)
 8001206:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001208:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <MX_TIM5_Init+0x94>)
 800120a:	2200      	movs	r2, #0
 800120c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120e:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <MX_TIM5_Init+0x94>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001214:	4b18      	ldr	r3, [pc, #96]	; (8001278 <MX_TIM5_Init+0x94>)
 8001216:	f04f 32ff 	mov.w	r2, #4294967295
 800121a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121c:	4b16      	ldr	r3, [pc, #88]	; (8001278 <MX_TIM5_Init+0x94>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001222:	4b15      	ldr	r3, [pc, #84]	; (8001278 <MX_TIM5_Init+0x94>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001228:	4813      	ldr	r0, [pc, #76]	; (8001278 <MX_TIM5_Init+0x94>)
 800122a:	f006 fcd9 	bl	8007be0 <HAL_TIM_Base_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001234:	f000 f9c8 	bl	80015c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800123e:	f107 0310 	add.w	r3, r7, #16
 8001242:	4619      	mov	r1, r3
 8001244:	480c      	ldr	r0, [pc, #48]	; (8001278 <MX_TIM5_Init+0x94>)
 8001246:	f006 fee9 	bl	800801c <HAL_TIM_ConfigClockSource>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001250:	f000 f9ba 	bl	80015c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001254:	2300      	movs	r3, #0
 8001256:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_TIM5_Init+0x94>)
 8001262:	f007 f93d 	bl	80084e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800126c:	f000 f9ac 	bl	80015c8 <Error_Handler>
//  TIM5->DIER |= TIM_DIER_UIE; // Enable update interrupt
//  TIM5->ARR = ENC_DMA_POLL_FREQ; // Timebase

  /* USER CODE END TIM5_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	3720      	adds	r7, #32
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	24000188 	.word	0x24000188
 800127c:	40000c00 	.word	0x40000c00

08001280 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001284:	4b22      	ldr	r3, [pc, #136]	; (8001310 <MX_USART3_UART_Init+0x90>)
 8001286:	4a23      	ldr	r2, [pc, #140]	; (8001314 <MX_USART3_UART_Init+0x94>)
 8001288:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800128a:	4b21      	ldr	r3, [pc, #132]	; (8001310 <MX_USART3_UART_Init+0x90>)
 800128c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001290:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001292:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <MX_USART3_UART_Init+0x90>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001298:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <MX_USART3_UART_Init+0x90>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800129e:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <MX_USART3_UART_Init+0x90>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012a4:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <MX_USART3_UART_Init+0x90>)
 80012a6:	220c      	movs	r2, #12
 80012a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012aa:	4b19      	ldr	r3, [pc, #100]	; (8001310 <MX_USART3_UART_Init+0x90>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b0:	4b17      	ldr	r3, [pc, #92]	; (8001310 <MX_USART3_UART_Init+0x90>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012b6:	4b16      	ldr	r3, [pc, #88]	; (8001310 <MX_USART3_UART_Init+0x90>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012bc:	4b14      	ldr	r3, [pc, #80]	; (8001310 <MX_USART3_UART_Init+0x90>)
 80012be:	2200      	movs	r2, #0
 80012c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c2:	4b13      	ldr	r3, [pc, #76]	; (8001310 <MX_USART3_UART_Init+0x90>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012c8:	4811      	ldr	r0, [pc, #68]	; (8001310 <MX_USART3_UART_Init+0x90>)
 80012ca:	f007 f9b5 	bl	8008638 <HAL_UART_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80012d4:	f000 f978 	bl	80015c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d8:	2100      	movs	r1, #0
 80012da:	480d      	ldr	r0, [pc, #52]	; (8001310 <MX_USART3_UART_Init+0x90>)
 80012dc:	f009 fe0d 	bl	800aefa <HAL_UARTEx_SetTxFifoThreshold>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80012e6:	f000 f96f 	bl	80015c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ea:	2100      	movs	r1, #0
 80012ec:	4808      	ldr	r0, [pc, #32]	; (8001310 <MX_USART3_UART_Init+0x90>)
 80012ee:	f009 fe42 	bl	800af76 <HAL_UARTEx_SetRxFifoThreshold>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80012f8:	f000 f966 	bl	80015c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80012fc:	4804      	ldr	r0, [pc, #16]	; (8001310 <MX_USART3_UART_Init+0x90>)
 80012fe:	f009 fdc3 	bl	800ae88 <HAL_UARTEx_DisableFifoMode>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001308:	f000 f95e 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	240001d4 	.word	0x240001d4
 8001314:	40004800 	.word	0x40004800

08001318 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08e      	sub	sp, #56	; 0x38
 800132c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800133e:	4b9b      	ldr	r3, [pc, #620]	; (80015ac <MX_GPIO_Init+0x284>)
 8001340:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001344:	4a99      	ldr	r2, [pc, #612]	; (80015ac <MX_GPIO_Init+0x284>)
 8001346:	f043 0304 	orr.w	r3, r3, #4
 800134a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800134e:	4b97      	ldr	r3, [pc, #604]	; (80015ac <MX_GPIO_Init+0x284>)
 8001350:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	623b      	str	r3, [r7, #32]
 800135a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800135c:	4b93      	ldr	r3, [pc, #588]	; (80015ac <MX_GPIO_Init+0x284>)
 800135e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001362:	4a92      	ldr	r2, [pc, #584]	; (80015ac <MX_GPIO_Init+0x284>)
 8001364:	f043 0320 	orr.w	r3, r3, #32
 8001368:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800136c:	4b8f      	ldr	r3, [pc, #572]	; (80015ac <MX_GPIO_Init+0x284>)
 800136e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001372:	f003 0320 	and.w	r3, r3, #32
 8001376:	61fb      	str	r3, [r7, #28]
 8001378:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800137a:	4b8c      	ldr	r3, [pc, #560]	; (80015ac <MX_GPIO_Init+0x284>)
 800137c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001380:	4a8a      	ldr	r2, [pc, #552]	; (80015ac <MX_GPIO_Init+0x284>)
 8001382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001386:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800138a:	4b88      	ldr	r3, [pc, #544]	; (80015ac <MX_GPIO_Init+0x284>)
 800138c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001394:	61bb      	str	r3, [r7, #24]
 8001396:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001398:	4b84      	ldr	r3, [pc, #528]	; (80015ac <MX_GPIO_Init+0x284>)
 800139a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800139e:	4a83      	ldr	r2, [pc, #524]	; (80015ac <MX_GPIO_Init+0x284>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013a8:	4b80      	ldr	r3, [pc, #512]	; (80015ac <MX_GPIO_Init+0x284>)
 80013aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	4b7d      	ldr	r3, [pc, #500]	; (80015ac <MX_GPIO_Init+0x284>)
 80013b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013bc:	4a7b      	ldr	r2, [pc, #492]	; (80015ac <MX_GPIO_Init+0x284>)
 80013be:	f043 0302 	orr.w	r3, r3, #2
 80013c2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013c6:	4b79      	ldr	r3, [pc, #484]	; (80015ac <MX_GPIO_Init+0x284>)
 80013c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013d4:	4b75      	ldr	r3, [pc, #468]	; (80015ac <MX_GPIO_Init+0x284>)
 80013d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013da:	4a74      	ldr	r2, [pc, #464]	; (80015ac <MX_GPIO_Init+0x284>)
 80013dc:	f043 0310 	orr.w	r3, r3, #16
 80013e0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013e4:	4b71      	ldr	r3, [pc, #452]	; (80015ac <MX_GPIO_Init+0x284>)
 80013e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013ea:	f003 0310 	and.w	r3, r3, #16
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f2:	4b6e      	ldr	r3, [pc, #440]	; (80015ac <MX_GPIO_Init+0x284>)
 80013f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013f8:	4a6c      	ldr	r2, [pc, #432]	; (80015ac <MX_GPIO_Init+0x284>)
 80013fa:	f043 0308 	orr.w	r3, r3, #8
 80013fe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001402:	4b6a      	ldr	r3, [pc, #424]	; (80015ac <MX_GPIO_Init+0x284>)
 8001404:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001408:	f003 0308 	and.w	r3, r3, #8
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001410:	4b66      	ldr	r3, [pc, #408]	; (80015ac <MX_GPIO_Init+0x284>)
 8001412:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001416:	4a65      	ldr	r2, [pc, #404]	; (80015ac <MX_GPIO_Init+0x284>)
 8001418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800141c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001420:	4b62      	ldr	r3, [pc, #392]	; (80015ac <MX_GPIO_Init+0x284>)
 8001422:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, USB_FS_PWR_EN_Pin|PAN_STP_Pin, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001434:	485e      	ldr	r0, [pc, #376]	; (80015b0 <MX_GPIO_Init+0x288>)
 8001436:	f002 ff97 	bl	8004368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PAN_EN_Pin|TILT_EN_Pin|TILT_STP_Pin, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	210d      	movs	r1, #13
 800143e:	485d      	ldr	r0, [pc, #372]	; (80015b4 <MX_GPIO_Init+0x28c>)
 8001440:	f002 ff92 	bl	8004368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PAN_DIR_Pin|BRAKE_Pin, GPIO_PIN_RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	2148      	movs	r1, #72	; 0x48
 8001448:	485b      	ldr	r0, [pc, #364]	; (80015b8 <MX_GPIO_Init+0x290>)
 800144a:	f002 ff8d 	bl	8004368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DROP_Pin|LD2_Pin, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	f240 4102 	movw	r1, #1026	; 0x402
 8001454:	4859      	ldr	r0, [pc, #356]	; (80015bc <MX_GPIO_Init+0x294>)
 8001456:	f002 ff87 	bl	8004368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800145a:	2200      	movs	r2, #0
 800145c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001460:	4857      	ldr	r0, [pc, #348]	; (80015c0 <MX_GPIO_Init+0x298>)
 8001462:	f002 ff81 	bl	8004368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001466:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800146c:	2300      	movs	r3, #0
 800146e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001478:	4619      	mov	r1, r3
 800147a:	484e      	ldr	r0, [pc, #312]	; (80015b4 <MX_GPIO_Init+0x28c>)
 800147c:	f002 fdc4 	bl	8004008 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin PAN_STP_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|PAN_STP_Pin;
 8001480:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001486:	2301      	movs	r3, #1
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148e:	2300      	movs	r3, #0
 8001490:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001496:	4619      	mov	r1, r3
 8001498:	4845      	ldr	r0, [pc, #276]	; (80015b0 <MX_GPIO_Init+0x288>)
 800149a:	f002 fdb5 	bl	8004008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN_EN_Pin TILT_EN_Pin TILT_STP_Pin */
  GPIO_InitStruct.Pin = PAN_EN_Pin|TILT_EN_Pin|TILT_STP_Pin;
 800149e:	230d      	movs	r3, #13
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a2:	2301      	movs	r3, #1
 80014a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b2:	4619      	mov	r1, r3
 80014b4:	483f      	ldr	r0, [pc, #252]	; (80015b4 <MX_GPIO_Init+0x28c>)
 80014b6:	f002 fda7 	bl	8004008 <HAL_GPIO_Init>

  /*Configure GPIO pin : PAN_DIR_Pin */
  GPIO_InitStruct.Pin = PAN_DIR_Pin;
 80014ba:	2308      	movs	r3, #8
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014be:	2301      	movs	r3, #1
 80014c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PAN_DIR_GPIO_Port, &GPIO_InitStruct);
 80014ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ce:	4619      	mov	r1, r3
 80014d0:	4839      	ldr	r0, [pc, #228]	; (80015b8 <MX_GPIO_Init+0x290>)
 80014d2:	f002 fd99 	bl	8004008 <HAL_GPIO_Init>

  /*Configure GPIO pin : BRAKE_Pin */
  GPIO_InitStruct.Pin = BRAKE_Pin;
 80014d6:	2340      	movs	r3, #64	; 0x40
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014da:	2301      	movs	r3, #1
 80014dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014de:	2302      	movs	r3, #2
 80014e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BRAKE_GPIO_Port, &GPIO_InitStruct);
 80014e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ea:	4619      	mov	r1, r3
 80014ec:	4832      	ldr	r0, [pc, #200]	; (80015b8 <MX_GPIO_Init+0x290>)
 80014ee:	f002 fd8b 	bl	8004008 <HAL_GPIO_Init>

  /*Configure GPIO pins : DROP_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DROP_Pin|LD2_Pin;
 80014f2:	f240 4302 	movw	r3, #1026	; 0x402
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001508:	4619      	mov	r1, r3
 800150a:	482c      	ldr	r0, [pc, #176]	; (80015bc <MX_GPIO_Init+0x294>)
 800150c:	f002 fd7c 	bl	8004008 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001510:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001516:	2301      	movs	r3, #1
 8001518:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001526:	4619      	mov	r1, r3
 8001528:	4825      	ldr	r0, [pc, #148]	; (80015c0 <MX_GPIO_Init+0x298>)
 800152a:	f002 fd6d 	bl	8004008 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001532:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800153c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001540:	4619      	mov	r1, r3
 8001542:	4820      	ldr	r0, [pc, #128]	; (80015c4 <MX_GPIO_Init+0x29c>)
 8001544:	f002 fd60 	bl	8004008 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001548:	f44f 7300 	mov.w	r3, #512	; 0x200
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154e:	2300      	movs	r3, #0
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155a:	4619      	mov	r1, r3
 800155c:	4816      	ldr	r0, [pc, #88]	; (80015b8 <MX_GPIO_Init+0x290>)
 800155e:	f002 fd53 	bl	8004008 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	2302      	movs	r3, #2
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001574:	230a      	movs	r3, #10
 8001576:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157c:	4619      	mov	r1, r3
 800157e:	480e      	ldr	r0, [pc, #56]	; (80015b8 <MX_GPIO_Init+0x290>)
 8001580:	f002 fd42 	bl	8004008 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001584:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159a:	4619      	mov	r1, r3
 800159c:	4806      	ldr	r0, [pc, #24]	; (80015b8 <MX_GPIO_Init+0x290>)
 800159e:	f002 fd33 	bl	8004008 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015a2:	bf00      	nop
 80015a4:	3738      	adds	r7, #56	; 0x38
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	58024400 	.word	0x58024400
 80015b0:	58021400 	.word	0x58021400
 80015b4:	58020800 	.word	0x58020800
 80015b8:	58020000 	.word	0x58020000
 80015bc:	58021000 	.word	0x58021000
 80015c0:	58020400 	.word	0x58020400
 80015c4:	58021800 	.word	0x58021800

080015c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015cc:	b672      	cpsid	i
}
 80015ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <Error_Handler+0x8>
	...

080015d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015da:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <HAL_MspInit+0x30>)
 80015dc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80015e0:	4a08      	ldr	r2, [pc, #32]	; (8001604 <HAL_MspInit+0x30>)
 80015e2:	f043 0302 	orr.w	r3, r3, #2
 80015e6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_MspInit+0x30>)
 80015ec:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	607b      	str	r3, [r7, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	58024400 	.word	0x58024400

08001608 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b0ba      	sub	sp, #232	; 0xe8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001620:	f107 0310 	add.w	r3, r7, #16
 8001624:	22c0      	movs	r2, #192	; 0xc0
 8001626:	2100      	movs	r1, #0
 8001628:	4618      	mov	r0, r3
 800162a:	f009 fd51 	bl	800b0d0 <memset>
  if(hadc->Instance==ADC1)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a2b      	ldr	r2, [pc, #172]	; (80016e0 <HAL_ADC_MspInit+0xd8>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d14f      	bne.n	80016d8 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001638:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800163c:	f04f 0300 	mov.w	r3, #0
 8001640:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001644:	2301      	movs	r3, #1
 8001646:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8001648:	2310      	movs	r3, #16
 800164a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 800164c:	2303      	movs	r3, #3
 800164e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001650:	2302      	movs	r3, #2
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001654:	2302      	movs	r3, #2
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001658:	23c0      	movs	r3, #192	; 0xc0
 800165a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800165c:	2300      	movs	r3, #0
 800165e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001664:	2300      	movs	r3, #0
 8001666:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800166a:	f107 0310 	add.w	r3, r7, #16
 800166e:	4618      	mov	r0, r3
 8001670:	f003 feac 	bl	80053cc <HAL_RCCEx_PeriphCLKConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 800167a:	f7ff ffa5 	bl	80015c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800167e:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <HAL_ADC_MspInit+0xdc>)
 8001680:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001684:	4a17      	ldr	r2, [pc, #92]	; (80016e4 <HAL_ADC_MspInit+0xdc>)
 8001686:	f043 0320 	orr.w	r3, r3, #32
 800168a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <HAL_ADC_MspInit+0xdc>)
 8001690:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001694:	f003 0320 	and.w	r3, r3, #32
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <HAL_ADC_MspInit+0xdc>)
 800169e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016a2:	4a10      	ldr	r2, [pc, #64]	; (80016e4 <HAL_ADC_MspInit+0xdc>)
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80016ac:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <HAL_ADC_MspInit+0xdc>)
 80016ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = THERMOCOUPLE_Pin;
 80016ba:	2302      	movs	r3, #2
 80016bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c0:	2303      	movs	r3, #3
 80016c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(THERMOCOUPLE_GPIO_Port, &GPIO_InitStruct);
 80016cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016d0:	4619      	mov	r1, r3
 80016d2:	4805      	ldr	r0, [pc, #20]	; (80016e8 <HAL_ADC_MspInit+0xe0>)
 80016d4:	f002 fc98 	bl	8004008 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016d8:	bf00      	nop
 80016da:	37e8      	adds	r7, #232	; 0xe8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40022000 	.word	0x40022000
 80016e4:	58024400 	.word	0x58024400
 80016e8:	58020400 	.word	0x58020400

080016ec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08a      	sub	sp, #40	; 0x28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800170c:	d135      	bne.n	800177a <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <HAL_TIM_Encoder_MspInit+0x98>)
 8001710:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001714:	4a1b      	ldr	r2, [pc, #108]	; (8001784 <HAL_TIM_Encoder_MspInit+0x98>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <HAL_TIM_Encoder_MspInit+0x98>)
 8001720:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <HAL_TIM_Encoder_MspInit+0x98>)
 800172e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001732:	4a14      	ldr	r2, [pc, #80]	; (8001784 <HAL_TIM_Encoder_MspInit+0x98>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <HAL_TIM_Encoder_MspInit+0x98>)
 800173e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PLUNGE_ENC_A_Pin|PLUNGE_ENC_B_Pin;
 800174a:	2303      	movs	r3, #3
 800174c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800175a:	2301      	movs	r3, #1
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	4619      	mov	r1, r3
 8001764:	4808      	ldr	r0, [pc, #32]	; (8001788 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001766:	f002 fc4f 	bl	8004008 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	2100      	movs	r1, #0
 800176e:	201c      	movs	r0, #28
 8001770:	f001 feb1 	bl	80034d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001774:	201c      	movs	r0, #28
 8001776:	f001 fec8 	bl	800350a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800177a:	bf00      	nop
 800177c:	3728      	adds	r7, #40	; 0x28
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	58024400 	.word	0x58024400
 8001788:	58020000 	.word	0x58020000

0800178c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a1d      	ldr	r2, [pc, #116]	; (8001810 <HAL_TIM_Base_MspInit+0x84>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d117      	bne.n	80017ce <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800179e:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <HAL_TIM_Base_MspInit+0x88>)
 80017a0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80017a4:	4a1b      	ldr	r2, [pc, #108]	; (8001814 <HAL_TIM_Base_MspInit+0x88>)
 80017a6:	f043 0304 	orr.w	r3, r3, #4
 80017aa:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80017ae:	4b19      	ldr	r3, [pc, #100]	; (8001814 <HAL_TIM_Base_MspInit+0x88>)
 80017b0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80017bc:	2200      	movs	r2, #0
 80017be:	2100      	movs	r1, #0
 80017c0:	201e      	movs	r0, #30
 80017c2:	f001 fe88 	bl	80034d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80017c6:	201e      	movs	r0, #30
 80017c8:	f001 fe9f 	bl	800350a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80017cc:	e01b      	b.n	8001806 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM5)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a11      	ldr	r2, [pc, #68]	; (8001818 <HAL_TIM_Base_MspInit+0x8c>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d116      	bne.n	8001806 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80017d8:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <HAL_TIM_Base_MspInit+0x88>)
 80017da:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80017de:	4a0d      	ldr	r2, [pc, #52]	; (8001814 <HAL_TIM_Base_MspInit+0x88>)
 80017e0:	f043 0308 	orr.w	r3, r3, #8
 80017e4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <HAL_TIM_Base_MspInit+0x88>)
 80017ea:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2100      	movs	r1, #0
 80017fa:	2032      	movs	r0, #50	; 0x32
 80017fc:	f001 fe6b 	bl	80034d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001800:	2032      	movs	r0, #50	; 0x32
 8001802:	f001 fe82 	bl	800350a <HAL_NVIC_EnableIRQ>
}
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40000800 	.word	0x40000800
 8001814:	58024400 	.word	0x58024400
 8001818:	40000c00 	.word	0x40000c00

0800181c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b0ba      	sub	sp, #232	; 0xe8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001834:	f107 0310 	add.w	r3, r7, #16
 8001838:	22c0      	movs	r2, #192	; 0xc0
 800183a:	2100      	movs	r1, #0
 800183c:	4618      	mov	r0, r3
 800183e:	f009 fc47 	bl	800b0d0 <memset>
  if(huart->Instance==USART3)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a2b      	ldr	r2, [pc, #172]	; (80018f4 <HAL_UART_MspInit+0xd8>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d14e      	bne.n	80018ea <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800184c:	f04f 0202 	mov.w	r2, #2
 8001850:	f04f 0300 	mov.w	r3, #0
 8001854:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001858:	2300      	movs	r3, #0
 800185a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800185e:	f107 0310 	add.w	r3, r7, #16
 8001862:	4618      	mov	r0, r3
 8001864:	f003 fdb2 	bl	80053cc <HAL_RCCEx_PeriphCLKConfig>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800186e:	f7ff feab 	bl	80015c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001872:	4b21      	ldr	r3, [pc, #132]	; (80018f8 <HAL_UART_MspInit+0xdc>)
 8001874:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001878:	4a1f      	ldr	r2, [pc, #124]	; (80018f8 <HAL_UART_MspInit+0xdc>)
 800187a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800187e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001882:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <HAL_UART_MspInit+0xdc>)
 8001884:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001888:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <HAL_UART_MspInit+0xdc>)
 8001892:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001896:	4a18      	ldr	r2, [pc, #96]	; (80018f8 <HAL_UART_MspInit+0xdc>)
 8001898:	f043 0308 	orr.w	r3, r3, #8
 800189c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80018a0:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <HAL_UART_MspInit+0xdc>)
 80018a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80018ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b6:	2302      	movs	r3, #2
 80018b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c2:	2300      	movs	r3, #0
 80018c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018c8:	2307      	movs	r3, #7
 80018ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ce:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018d2:	4619      	mov	r1, r3
 80018d4:	4809      	ldr	r0, [pc, #36]	; (80018fc <HAL_UART_MspInit+0xe0>)
 80018d6:	f002 fb97 	bl	8004008 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	2027      	movs	r0, #39	; 0x27
 80018e0:	f001 fdf9 	bl	80034d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80018e4:	2027      	movs	r0, #39	; 0x27
 80018e6:	f001 fe10 	bl	800350a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018ea:	bf00      	nop
 80018ec:	37e8      	adds	r7, #232	; 0xe8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40004800 	.word	0x40004800
 80018f8:	58024400 	.word	0x58024400
 80018fc:	58020c00 	.word	0x58020c00

08001900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001904:	e7fe      	b.n	8001904 <NMI_Handler+0x4>

08001906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190a:	e7fe      	b.n	800190a <HardFault_Handler+0x4>

0800190c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <MemManage_Handler+0x4>

08001912 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001916:	e7fe      	b.n	8001916 <BusFault_Handler+0x4>

08001918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800191c:	e7fe      	b.n	800191c <UsageFault_Handler+0x4>

0800191e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800194c:	f000 fad6 	bl	8001efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}

08001954 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
//NOTE TO MORNING LEO: LOG SEEMS TO WORK, SHOULD TRANSMIT IT TO PC FOR EASY VISUALIZATION
	if ((TIM2->SR & TIM_SR_UIF) != 0) { // check if update interrupt occured
 8001958:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d02a      	beq.n	80019bc <TIM2_IRQHandler+0x68>
		HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 0); //engage brake
 8001966:	2200      	movs	r2, #0
 8001968:	2140      	movs	r1, #64	; 0x40
 800196a:	4817      	ldr	r0, [pc, #92]	; (80019c8 <TIM2_IRQHandler+0x74>)
 800196c:	f002 fcfc 	bl	8004368 <HAL_GPIO_WritePin>
		posn_braked_at = TIM2->CNT;
 8001970:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	4a15      	ldr	r2, [pc, #84]	; (80019cc <TIM2_IRQHandler+0x78>)
 8001978:	6013      	str	r3, [r2, #0]
		//also somehow make sure motor is stopped

		plunge_done_flag = 1;
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <TIM2_IRQHandler+0x7c>)
 800197c:	2201      	movs	r2, #1
 800197e:	701a      	strb	r2, [r3, #0]

		TIM2->CR1  |= TIM_CR1_UDIS;	// make sure update is enabled
 8001980:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800198a:	f043 0302 	orr.w	r3, r3, #2
 800198e:	6013      	str	r3, [r2, #0]
		TIM2->DIER &=  ~TIM_DIER_UIE; 	// update interrupt enabled
 8001990:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800199a:	f023 0301 	bic.w	r3, r3, #1
 800199e:	60d3      	str	r3, [r2, #12]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// disable tim2
 80019a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019aa:	f023 0301 	bic.w	r3, r3, #1
 80019ae:	6013      	str	r3, [r2, #0]
		TIM5->CR1  &= ~TIM_CR1_CEN; 	// disable tim5
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <TIM2_IRQHandler+0x80>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a07      	ldr	r2, [pc, #28]	; (80019d4 <TIM2_IRQHandler+0x80>)
 80019b6:	f023 0301 	bic.w	r3, r3, #1
 80019ba:	6013      	str	r3, [r2, #0]

		//TIM2->ARR = 999999;			//massive so that we dont hit it when we try to move around. later i can just diable timer but for debugging i want to preserve tim2->cnt
    }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019bc:	4806      	ldr	r0, [pc, #24]	; (80019d8 <TIM2_IRQHandler+0x84>)
 80019be:	f006 fa0d 	bl	8007ddc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	58020000 	.word	0x58020000
 80019cc:	2401d740 	.word	0x2401d740
 80019d0:	2401d744 	.word	0x2401d744
 80019d4:	40000c00 	.word	0x40000c00
 80019d8:	240000f0 	.word	0x240000f0

080019dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if ((TIM4->SR & TIM_SR_UIF) != 0) {
 80019e0:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <TIM4_IRQHandler+0x3c>)
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d010      	beq.n	8001a0e <TIM4_IRQHandler+0x32>
		DEPOSITED = 1;
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <TIM4_IRQHandler+0x40>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	701a      	strb	r2, [r3, #0]
		dispense();
 80019f2:	f7fe fe53 	bl	800069c <dispense>
		TIM4->DIER &=  ~TIM_DIER_UIE; 	// update interrupt disabled
 80019f6:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <TIM4_IRQHandler+0x3c>)
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	4a07      	ldr	r2, [pc, #28]	; (8001a18 <TIM4_IRQHandler+0x3c>)
 80019fc:	f023 0301 	bic.w	r3, r3, #1
 8001a00:	60d3      	str	r3, [r2, #12]
		TIM4->CR1 &= ~TIM_CR1_CEN; 	// only fire this timer once
 8001a02:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <TIM4_IRQHandler+0x3c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <TIM4_IRQHandler+0x3c>)
 8001a08:	f023 0301 	bic.w	r3, r3, #1
 8001a0c:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a0e:	4804      	ldr	r0, [pc, #16]	; (8001a20 <TIM4_IRQHandler+0x44>)
 8001a10:	f006 f9e4 	bl	8007ddc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40000800 	.word	0x40000800
 8001a1c:	2401d745 	.word	0x2401d745
 8001a20:	2400013c 	.word	0x2400013c

08001a24 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	//dispense();
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a28:	4802      	ldr	r0, [pc, #8]	; (8001a34 <USART3_IRQHandler+0x10>)
 8001a2a:	f006 ff2f 	bl	800888c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	240001d4 	.word	0x240001d4

08001a38 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
		/* always do the logging portion */
		/* TODO: Convert this datalogging to DMA to speed it up. actually a priority I think it would have big performance gains*/
		log_position += 1; // increment number of data points taken
 8001a3e:	4b78      	ldr	r3, [pc, #480]	; (8001c20 <TIM5_IRQHandler+0x1e8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	3301      	adds	r3, #1
 8001a44:	4a76      	ldr	r2, [pc, #472]	; (8001c20 <TIM5_IRQHandler+0x1e8>)
 8001a46:	6013      	str	r3, [r2, #0]
		current_pos = TIM2->CNT;
 8001a48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	4a75      	ldr	r2, [pc, #468]	; (8001c24 <TIM5_IRQHandler+0x1ec>)
 8001a50:	6013      	str	r3, [r2, #0]
		HAL_ADC_Start(&hadc1);
 8001a52:	4875      	ldr	r0, [pc, #468]	; (8001c28 <TIM5_IRQHandler+0x1f0>)
 8001a54:	f000 fdd2 	bl	80025fc <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001a58:	f04f 31ff 	mov.w	r1, #4294967295
 8001a5c:	4872      	ldr	r0, [pc, #456]	; (8001c28 <TIM5_IRQHandler+0x1f0>)
 8001a5e:	f000 fe87 	bl	8002770 <HAL_ADC_PollForConversion>
		current_temp = HAL_ADC_GetValue(&hadc1);
 8001a62:	4871      	ldr	r0, [pc, #452]	; (8001c28 <TIM5_IRQHandler+0x1f0>)
 8001a64:	f000 ff5c 	bl	8002920 <HAL_ADC_GetValue>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	4a70      	ldr	r2, [pc, #448]	; (8001c2c <TIM5_IRQHandler+0x1f4>)
 8001a6c:	6013      	str	r3, [r2, #0]
		posLog[log_position] = current_pos; 
 8001a6e:	4b6d      	ldr	r3, [pc, #436]	; (8001c24 <TIM5_IRQHandler+0x1ec>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	4b6b      	ldr	r3, [pc, #428]	; (8001c20 <TIM5_IRQHandler+0x1e8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	b291      	uxth	r1, r2
 8001a78:	4a6d      	ldr	r2, [pc, #436]	; (8001c30 <TIM5_IRQHandler+0x1f8>)
 8001a7a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		thermoLog[log_position] = current_temp; // update log of positions
 8001a7e:	4b6b      	ldr	r3, [pc, #428]	; (8001c2c <TIM5_IRQHandler+0x1f4>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	4b67      	ldr	r3, [pc, #412]	; (8001c20 <TIM5_IRQHandler+0x1e8>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	b291      	uxth	r1, r2
 8001a88:	4a6a      	ldr	r2, [pc, #424]	; (8001c34 <TIM5_IRQHandler+0x1fc>)
 8001a8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		running_sum += current_pos - prev_pos;
 8001a8e:	4b65      	ldr	r3, [pc, #404]	; (8001c24 <TIM5_IRQHandler+0x1ec>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	4b69      	ldr	r3, [pc, #420]	; (8001c38 <TIM5_IRQHandler+0x200>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	1ad2      	subs	r2, r2, r3
 8001a98:	4b68      	ldr	r3, [pc, #416]	; (8001c3c <TIM5_IRQHandler+0x204>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	4a67      	ldr	r2, [pc, #412]	; (8001c3c <TIM5_IRQHandler+0x204>)
 8001aa0:	6013      	str	r3, [r2, #0]
		prev_pos = current_pos;
 8001aa2:	4b60      	ldr	r3, [pc, #384]	; (8001c24 <TIM5_IRQHandler+0x1ec>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a64      	ldr	r2, [pc, #400]	; (8001c38 <TIM5_IRQHandler+0x200>)
 8001aa8:	6013      	str	r3, [r2, #0]
		/* if disp hasnt triggered yet, calculate speed and find disp pos */
		if(!disp_flag){
 8001aaa:	4b65      	ldr	r3, [pc, #404]	; (8001c40 <TIM5_IRQHandler+0x208>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f040 809f 	bne.w	8001bf2 <TIM5_IRQHandler+0x1ba>
			if(log_position >= MOVING_AVG_LENGTH) {
 8001ab4:	4b5a      	ldr	r3, [pc, #360]	; (8001c20 <TIM5_IRQHandler+0x1e8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2bc7      	cmp	r3, #199	; 0xc7
 8001aba:	f240 809a 	bls.w	8001bf2 <TIM5_IRQHandler+0x1ba>
				/*update running sum of most recent n data points*/
				running_sum -= (posLog[log_position - MOVING_AVG_LENGTH + 1] - posLog[log_position - MOVING_AVG_LENGTH]);
 8001abe:	4b5f      	ldr	r3, [pc, #380]	; (8001c3c <TIM5_IRQHandler+0x204>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a57      	ldr	r2, [pc, #348]	; (8001c20 <TIM5_IRQHandler+0x1e8>)
 8001ac4:	6812      	ldr	r2, [r2, #0]
 8001ac6:	3ac7      	subs	r2, #199	; 0xc7
 8001ac8:	4959      	ldr	r1, [pc, #356]	; (8001c30 <TIM5_IRQHandler+0x1f8>)
 8001aca:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4a53      	ldr	r2, [pc, #332]	; (8001c20 <TIM5_IRQHandler+0x1e8>)
 8001ad2:	6812      	ldr	r2, [r2, #0]
 8001ad4:	3ac8      	subs	r2, #200	; 0xc8
 8001ad6:	4956      	ldr	r1, [pc, #344]	; (8001c30 <TIM5_IRQHandler+0x1f8>)
 8001ad8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001adc:	1a82      	subs	r2, r0, r2
 8001ade:	1a9b      	subs	r3, r3, r2
 8001ae0:	4a56      	ldr	r2, [pc, #344]	; (8001c3c <TIM5_IRQHandler+0x204>)
 8001ae2:	6013      	str	r3, [r2, #0]
				speed = (double)running_sum / (double)MOVING_AVG_LENGTH; // speed in pulses per log
 8001ae4:	4b55      	ldr	r3, [pc, #340]	; (8001c3c <TIM5_IRQHandler+0x204>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	ee07 3a90 	vmov	s15, r3
 8001aec:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001af0:	ed9f 5b47 	vldr	d5, [pc, #284]	; 8001c10 <TIM5_IRQHandler+0x1d8>
 8001af4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001af8:	4b52      	ldr	r3, [pc, #328]	; (8001c44 <TIM5_IRQHandler+0x20c>)
 8001afa:	ed83 7b00 	vstr	d7, [r3]

				uint32_t clocks_per_encoder_pulse = (CLOCKS_PER_LOG / speed); // a form of speed measurement
 8001afe:	4b51      	ldr	r3, [pc, #324]	; (8001c44 <TIM5_IRQHandler+0x20c>)
 8001b00:	ed93 6b00 	vldr	d6, [r3]
 8001b04:	ed9f 5b44 	vldr	d5, [pc, #272]	; 8001c18 <TIM5_IRQHandler+0x1e0>
 8001b08:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001b0c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001b10:	ee17 3a90 	vmov	r3, s15
 8001b14:	607b      	str	r3, [r7, #4]

				next_next_pos = current_pos + 2*speed;	// predicted position 2 TIM5 updates from now. if this is beyond disp_pos we want to trigger TIM4
 8001b16:	4b43      	ldr	r3, [pc, #268]	; (8001c24 <TIM5_IRQHandler+0x1ec>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	ee07 3a90 	vmov	s15, r3
 8001b1e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001b22:	4b48      	ldr	r3, [pc, #288]	; (8001c44 <TIM5_IRQHandler+0x20c>)
 8001b24:	ed93 7b00 	vldr	d7, [r3]
 8001b28:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001b2c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b30:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001b34:	ee17 2a90 	vmov	r2, s15
 8001b38:	4b43      	ldr	r3, [pc, #268]	; (8001c48 <TIM5_IRQHandler+0x210>)
 8001b3a:	601a      	str	r2, [r3, #0]

				// enc				enc		   enc/log			clocks 				clocks/log
				dispense_pos = (timepoint_pos) - (speed * (dispense_delay_clocks / CLOCKS_PER_LOG));
 8001b3c:	4b43      	ldr	r3, [pc, #268]	; (8001c4c <TIM5_IRQHandler+0x214>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	ee07 3a90 	vmov	s15, r3
 8001b44:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001b48:	4b41      	ldr	r3, [pc, #260]	; (8001c50 <TIM5_IRQHandler+0x218>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	ee07 3a90 	vmov	s15, r3
 8001b50:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001b54:	ed9f 4b30 	vldr	d4, [pc, #192]	; 8001c18 <TIM5_IRQHandler+0x1e0>
 8001b58:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8001b5c:	4b39      	ldr	r3, [pc, #228]	; (8001c44 <TIM5_IRQHandler+0x20c>)
 8001b5e:	ed93 7b00 	vldr	d7, [r3]
 8001b62:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001b66:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b6a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001b6e:	ee17 2a90 	vmov	r2, s15
 8001b72:	4b38      	ldr	r3, [pc, #224]	; (8001c54 <TIM5_IRQHandler+0x21c>)
 8001b74:	601a      	str	r2, [r3, #0]
				//		(enc ticks @ intersection) - (encoder ticks between disp signal and contact )
				// dispense_delay_clocks is based on the geometry of the dipense (ie distance and speed that the drop is shooting at)

				if(next_next_pos > dispense_pos) { // dispense comes within the next timebase
 8001b76:	4b34      	ldr	r3, [pc, #208]	; (8001c48 <TIM5_IRQHandler+0x210>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	4b36      	ldr	r3, [pc, #216]	; (8001c54 <TIM5_IRQHandler+0x21c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d937      	bls.n	8001bf2 <TIM5_IRQHandler+0x1ba>

					/* Insert a marker for when dispense happened */
					//log_position += 1;
					//posLog[log_position] = 12345678;

					disp_flag = 1;
 8001b82:	4b2f      	ldr	r3, [pc, #188]	; (8001c40 <TIM5_IRQHandler+0x208>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	701a      	strb	r2, [r3, #0]

					// using this with a third timer is likely the most accurate. allows inter-encoder values
					clocks_to_disp = clocks_per_encoder_pulse*(dispense_pos-current_pos);
 8001b88:	4b32      	ldr	r3, [pc, #200]	; (8001c54 <TIM5_IRQHandler+0x21c>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4b25      	ldr	r3, [pc, #148]	; (8001c24 <TIM5_IRQHandler+0x1ec>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	fb02 f303 	mul.w	r3, r2, r3
 8001b98:	4a2f      	ldr	r2, [pc, #188]	; (8001c58 <TIM5_IRQHandler+0x220>)
 8001b9a:	6013      	str	r3, [r2, #0]

					/* start TIM4 to count to clocks_to_disp */
					TIM4->CR1  &= ~TIM_CR1_CEN; 	//stop counter
 8001b9c:	4b2f      	ldr	r3, [pc, #188]	; (8001c5c <TIM5_IRQHandler+0x224>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a2e      	ldr	r2, [pc, #184]	; (8001c5c <TIM5_IRQHandler+0x224>)
 8001ba2:	f023 0301 	bic.w	r3, r3, #1
 8001ba6:	6013      	str	r3, [r2, #0]
					TIM4->CNT   = 0;				// Reset count
 8001ba8:	4b2c      	ldr	r3, [pc, #176]	; (8001c5c <TIM5_IRQHandler+0x224>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	625a      	str	r2, [r3, #36]	; 0x24
					TIM4->ARR 	= clocks_to_disp; 	// Update event when we want to dispense
 8001bae:	4a2b      	ldr	r2, [pc, #172]	; (8001c5c <TIM5_IRQHandler+0x224>)
 8001bb0:	4b29      	ldr	r3, [pc, #164]	; (8001c58 <TIM5_IRQHandler+0x220>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	62d3      	str	r3, [r2, #44]	; 0x2c
					TIM4->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8001bb6:	4b29      	ldr	r3, [pc, #164]	; (8001c5c <TIM5_IRQHandler+0x224>)
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	4a28      	ldr	r2, [pc, #160]	; (8001c5c <TIM5_IRQHandler+0x224>)
 8001bbc:	f023 0301 	bic.w	r3, r3, #1
 8001bc0:	6113      	str	r3, [r2, #16]
					TIM4->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8001bc2:	4b26      	ldr	r3, [pc, #152]	; (8001c5c <TIM5_IRQHandler+0x224>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a25      	ldr	r2, [pc, #148]	; (8001c5c <TIM5_IRQHandler+0x224>)
 8001bc8:	f023 0302 	bic.w	r3, r3, #2
 8001bcc:	6013      	str	r3, [r2, #0]
					TIM4->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8001bce:	4b23      	ldr	r3, [pc, #140]	; (8001c5c <TIM5_IRQHandler+0x224>)
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	4a22      	ldr	r2, [pc, #136]	; (8001c5c <TIM5_IRQHandler+0x224>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	60d3      	str	r3, [r2, #12]
					TIM4->CR1  |=  TIM_CR1_ARPE;	// enable auto reload preload
 8001bda:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <TIM5_IRQHandler+0x224>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a1f      	ldr	r2, [pc, #124]	; (8001c5c <TIM5_IRQHandler+0x224>)
 8001be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be4:	6013      	str	r3, [r2, #0]
					TIM4->CR1  |=  TIM_CR1_CEN; 	//start counter
 8001be6:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <TIM5_IRQHandler+0x224>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a1c      	ldr	r2, [pc, #112]	; (8001c5c <TIM5_IRQHandler+0x224>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6013      	str	r3, [r2, #0]
			}


		}

		TIM5->SR &= ~TIM_SR_UIF; // Clear the TIM5 update flag
 8001bf2:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <TIM5_IRQHandler+0x228>)
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	4a1a      	ldr	r2, [pc, #104]	; (8001c60 <TIM5_IRQHandler+0x228>)
 8001bf8:	f023 0301 	bic.w	r3, r3, #1
 8001bfc:	6113      	str	r3, [r2, #16]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001bfe:	4819      	ldr	r0, [pc, #100]	; (8001c64 <TIM5_IRQHandler+0x22c>)
 8001c00:	f006 f8ec 	bl	8007ddc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	f3af 8000 	nop.w
 8001c10:	00000000 	.word	0x00000000
 8001c14:	40690000 	.word	0x40690000
 8001c18:	00000000 	.word	0x00000000
 8001c1c:	409e0000 	.word	0x409e0000
 8001c20:	2401d728 	.word	0x2401d728
 8001c24:	2401d7c8 	.word	0x2401d7c8
 8001c28:	2400008c 	.word	0x2400008c
 8001c2c:	2401d7cc 	.word	0x2401d7cc
 8001c30:	24000268 	.word	0x24000268
 8001c34:	2400ecc8 	.word	0x2400ecc8
 8001c38:	2401d7d0 	.word	0x2401d7d0
 8001c3c:	2401d72c 	.word	0x2401d72c
 8001c40:	2401d738 	.word	0x2401d738
 8001c44:	2401d7c0 	.word	0x2401d7c0
 8001c48:	2401d7d4 	.word	0x2401d7d4
 8001c4c:	2401d730 	.word	0x2401d730
 8001c50:	2401d734 	.word	0x2401d734
 8001c54:	2401d73c 	.word	0x2401d73c
 8001c58:	2401d748 	.word	0x2401d748
 8001c5c:	40000800 	.word	0x40000800
 8001c60:	40000c00 	.word	0x40000c00
 8001c64:	24000188 	.word	0x24000188

08001c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c70:	4a14      	ldr	r2, [pc, #80]	; (8001cc4 <_sbrk+0x5c>)
 8001c72:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <_sbrk+0x60>)
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c7c:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <_sbrk+0x64>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c84:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <_sbrk+0x64>)
 8001c86:	4a12      	ldr	r2, [pc, #72]	; (8001cd0 <_sbrk+0x68>)
 8001c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <_sbrk+0x64>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d207      	bcs.n	8001ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c98:	f009 fa22 	bl	800b0e0 <__errno>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca6:	e009      	b.n	8001cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ca8:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <_sbrk+0x64>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <_sbrk+0x64>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4a05      	ldr	r2, [pc, #20]	; (8001ccc <_sbrk+0x64>)
 8001cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cba:	68fb      	ldr	r3, [r7, #12]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	24100000 	.word	0x24100000
 8001cc8:	00000400 	.word	0x00000400
 8001ccc:	2401d7d8 	.word	0x2401d7d8
 8001cd0:	2401d928 	.word	0x2401d928

08001cd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001cd8:	4b32      	ldr	r3, [pc, #200]	; (8001da4 <SystemInit+0xd0>)
 8001cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cde:	4a31      	ldr	r2, [pc, #196]	; (8001da4 <SystemInit+0xd0>)
 8001ce0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ce4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ce8:	4b2f      	ldr	r3, [pc, #188]	; (8001da8 <SystemInit+0xd4>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 030f 	and.w	r3, r3, #15
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d807      	bhi.n	8001d04 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cf4:	4b2c      	ldr	r3, [pc, #176]	; (8001da8 <SystemInit+0xd4>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f023 030f 	bic.w	r3, r3, #15
 8001cfc:	4a2a      	ldr	r2, [pc, #168]	; (8001da8 <SystemInit+0xd4>)
 8001cfe:	f043 0303 	orr.w	r3, r3, #3
 8001d02:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d04:	4b29      	ldr	r3, [pc, #164]	; (8001dac <SystemInit+0xd8>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a28      	ldr	r2, [pc, #160]	; (8001dac <SystemInit+0xd8>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d10:	4b26      	ldr	r3, [pc, #152]	; (8001dac <SystemInit+0xd8>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d16:	4b25      	ldr	r3, [pc, #148]	; (8001dac <SystemInit+0xd8>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	4924      	ldr	r1, [pc, #144]	; (8001dac <SystemInit+0xd8>)
 8001d1c:	4b24      	ldr	r3, [pc, #144]	; (8001db0 <SystemInit+0xdc>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d22:	4b21      	ldr	r3, [pc, #132]	; (8001da8 <SystemInit+0xd4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 030c 	and.w	r3, r3, #12
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d007      	beq.n	8001d3e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d2e:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <SystemInit+0xd4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 030f 	bic.w	r3, r3, #15
 8001d36:	4a1c      	ldr	r2, [pc, #112]	; (8001da8 <SystemInit+0xd4>)
 8001d38:	f043 0303 	orr.w	r3, r3, #3
 8001d3c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <SystemInit+0xd8>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001d44:	4b19      	ldr	r3, [pc, #100]	; (8001dac <SystemInit+0xd8>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001d4a:	4b18      	ldr	r3, [pc, #96]	; (8001dac <SystemInit+0xd8>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001d50:	4b16      	ldr	r3, [pc, #88]	; (8001dac <SystemInit+0xd8>)
 8001d52:	4a18      	ldr	r2, [pc, #96]	; (8001db4 <SystemInit+0xe0>)
 8001d54:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001d56:	4b15      	ldr	r3, [pc, #84]	; (8001dac <SystemInit+0xd8>)
 8001d58:	4a17      	ldr	r2, [pc, #92]	; (8001db8 <SystemInit+0xe4>)
 8001d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001d5c:	4b13      	ldr	r3, [pc, #76]	; (8001dac <SystemInit+0xd8>)
 8001d5e:	4a17      	ldr	r2, [pc, #92]	; (8001dbc <SystemInit+0xe8>)
 8001d60:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001d62:	4b12      	ldr	r3, [pc, #72]	; (8001dac <SystemInit+0xd8>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001d68:	4b10      	ldr	r3, [pc, #64]	; (8001dac <SystemInit+0xd8>)
 8001d6a:	4a14      	ldr	r2, [pc, #80]	; (8001dbc <SystemInit+0xe8>)
 8001d6c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <SystemInit+0xd8>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001d74:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <SystemInit+0xd8>)
 8001d76:	4a11      	ldr	r2, [pc, #68]	; (8001dbc <SystemInit+0xe8>)
 8001d78:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <SystemInit+0xd8>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d80:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <SystemInit+0xd8>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a09      	ldr	r2, [pc, #36]	; (8001dac <SystemInit+0xd8>)
 8001d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d8a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d8c:	4b07      	ldr	r3, [pc, #28]	; (8001dac <SystemInit+0xd8>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d92:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <SystemInit+0xec>)
 8001d94:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001d98:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001d9a:	bf00      	nop
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000ed00 	.word	0xe000ed00
 8001da8:	52002000 	.word	0x52002000
 8001dac:	58024400 	.word	0x58024400
 8001db0:	eaf6ed7f 	.word	0xeaf6ed7f
 8001db4:	02020200 	.word	0x02020200
 8001db8:	01ff0000 	.word	0x01ff0000
 8001dbc:	01010280 	.word	0x01010280
 8001dc0:	52004000 	.word	0x52004000

08001dc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001dc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dfc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001dc8:	f7ff ff84 	bl	8001cd4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dcc:	480c      	ldr	r0, [pc, #48]	; (8001e00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dce:	490d      	ldr	r1, [pc, #52]	; (8001e04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dd0:	4a0d      	ldr	r2, [pc, #52]	; (8001e08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dd4:	e002      	b.n	8001ddc <LoopCopyDataInit>

08001dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dda:	3304      	adds	r3, #4

08001ddc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001de0:	d3f9      	bcc.n	8001dd6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001de2:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001de4:	4c0a      	ldr	r4, [pc, #40]	; (8001e10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001de8:	e001      	b.n	8001dee <LoopFillZerobss>

08001dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dec:	3204      	adds	r2, #4

08001dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001df0:	d3fb      	bcc.n	8001dea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001df2:	f009 f97b 	bl	800b0ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001df6:	f7fe ff95 	bl	8000d24 <main>
  bx  lr
 8001dfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dfc:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001e00:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e04:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8001e08:	0800ba70 	.word	0x0800ba70
  ldr r2, =_sbss
 8001e0c:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8001e10:	2401d928 	.word	0x2401d928

08001e14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e14:	e7fe      	b.n	8001e14 <ADC_IRQHandler>
	...

08001e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e1e:	2003      	movs	r0, #3
 8001e20:	f001 fb4e 	bl	80034c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001e24:	f003 f8fc 	bl	8005020 <HAL_RCC_GetSysClockFreq>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <HAL_Init+0x68>)
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	0a1b      	lsrs	r3, r3, #8
 8001e30:	f003 030f 	and.w	r3, r3, #15
 8001e34:	4913      	ldr	r1, [pc, #76]	; (8001e84 <HAL_Init+0x6c>)
 8001e36:	5ccb      	ldrb	r3, [r1, r3]
 8001e38:	f003 031f 	and.w	r3, r3, #31
 8001e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e40:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001e42:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <HAL_Init+0x68>)
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	4a0e      	ldr	r2, [pc, #56]	; (8001e84 <HAL_Init+0x6c>)
 8001e4c:	5cd3      	ldrb	r3, [r2, r3]
 8001e4e:	f003 031f 	and.w	r3, r3, #31
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	fa22 f303 	lsr.w	r3, r2, r3
 8001e58:	4a0b      	ldr	r2, [pc, #44]	; (8001e88 <HAL_Init+0x70>)
 8001e5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e5c:	4a0b      	ldr	r2, [pc, #44]	; (8001e8c <HAL_Init+0x74>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e62:	2000      	movs	r0, #0
 8001e64:	f000 f814 	bl	8001e90 <HAL_InitTick>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e002      	b.n	8001e78 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e72:	f7ff fbaf 	bl	80015d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	58024400 	.word	0x58024400
 8001e84:	0800b9f4 	.word	0x0800b9f4
 8001e88:	24000010 	.word	0x24000010
 8001e8c:	2400000c 	.word	0x2400000c

08001e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e98:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <HAL_InitTick+0x60>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e021      	b.n	8001ee8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ea4:	4b13      	ldr	r3, [pc, #76]	; (8001ef4 <HAL_InitTick+0x64>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <HAL_InitTick+0x60>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f001 fb33 	bl	8003526 <HAL_SYSTICK_Config>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e00e      	b.n	8001ee8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b0f      	cmp	r3, #15
 8001ece:	d80a      	bhi.n	8001ee6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed8:	f001 fafd 	bl	80034d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001edc:	4a06      	ldr	r2, [pc, #24]	; (8001ef8 <HAL_InitTick+0x68>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e000      	b.n	8001ee8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	24000018 	.word	0x24000018
 8001ef4:	2400000c 	.word	0x2400000c
 8001ef8:	24000014 	.word	0x24000014

08001efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_IncTick+0x20>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_IncTick+0x24>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <HAL_IncTick+0x24>)
 8001f0e:	6013      	str	r3, [r2, #0]
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	24000018 	.word	0x24000018
 8001f20:	2401d7dc 	.word	0x2401d7dc

08001f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return uwTick;
 8001f28:	4b03      	ldr	r3, [pc, #12]	; (8001f38 <HAL_GetTick+0x14>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	2401d7dc 	.word	0x2401d7dc

08001f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f44:	f7ff ffee 	bl	8001f24 <HAL_GetTick>
 8001f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f54:	d005      	beq.n	8001f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <HAL_Delay+0x44>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4413      	add	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f62:	bf00      	nop
 8001f64:	f7ff ffde 	bl	8001f24 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d8f7      	bhi.n	8001f64 <HAL_Delay+0x28>
  {
  }
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	24000018 	.word	0x24000018

08001f84 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	609a      	str	r2, [r3, #8]
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b087      	sub	sp, #28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	3360      	adds	r3, #96	; 0x60
 8001ffe:	461a      	mov	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	430b      	orrs	r3, r1
 800201a:	431a      	orrs	r2, r3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002020:	bf00      	nop
 8002022:	371c      	adds	r7, #28
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	f003 031f 	and.w	r3, r3, #31
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	fa01 f303 	lsl.w	r3, r1, r3
 800204c:	431a      	orrs	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	611a      	str	r2, [r3, #16]
}
 8002052:	bf00      	nop
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800205e:	b480      	push	{r7}
 8002060:	b087      	sub	sp, #28
 8002062:	af00      	add	r7, sp, #0
 8002064:	60f8      	str	r0, [r7, #12]
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	3360      	adds	r3, #96	; 0x60
 800206e:	461a      	mov	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	431a      	orrs	r2, r3
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	601a      	str	r2, [r3, #0]
  }
}
 8002088:	bf00      	nop
 800208a:	371c      	adds	r7, #28
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80020a8:	2301      	movs	r3, #1
 80020aa:	e000      	b.n	80020ae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b087      	sub	sp, #28
 80020be:	af00      	add	r7, sp, #0
 80020c0:	60f8      	str	r0, [r7, #12]
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	3330      	adds	r3, #48	; 0x30
 80020ca:	461a      	mov	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	0a1b      	lsrs	r3, r3, #8
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	4413      	add	r3, r2
 80020d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	f003 031f 	and.w	r3, r3, #31
 80020e4:	211f      	movs	r1, #31
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	401a      	ands	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	0e9b      	lsrs	r3, r3, #26
 80020f2:	f003 011f 	and.w	r1, r3, #31
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	f003 031f 	and.w	r3, r3, #31
 80020fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002100:	431a      	orrs	r2, r3
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002106:	bf00      	nop
 8002108:	371c      	adds	r7, #28
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002112:	b480      	push	{r7}
 8002114:	b087      	sub	sp, #28
 8002116:	af00      	add	r7, sp, #0
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	3314      	adds	r3, #20
 8002122:	461a      	mov	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	0e5b      	lsrs	r3, r3, #25
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	f003 0304 	and.w	r3, r3, #4
 800212e:	4413      	add	r3, r2
 8002130:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	0d1b      	lsrs	r3, r3, #20
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	2107      	movs	r1, #7
 8002140:	fa01 f303 	lsl.w	r3, r1, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	401a      	ands	r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	0d1b      	lsrs	r3, r3, #20
 800214c:	f003 031f 	and.w	r3, r3, #31
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	431a      	orrs	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800215c:	bf00      	nop
 800215e:	371c      	adds	r7, #28
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002180:	43db      	mvns	r3, r3
 8002182:	401a      	ands	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f003 0318 	and.w	r3, r3, #24
 800218a:	4908      	ldr	r1, [pc, #32]	; (80021ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800218c:	40d9      	lsrs	r1, r3
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	400b      	ands	r3, r1
 8002192:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002196:	431a      	orrs	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800219e:	bf00      	nop
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	000fffff 	.word	0x000fffff

080021b0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 031f 	and.w	r3, r3, #31
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80021dc:	4618      	mov	r0, r3
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	4b04      	ldr	r3, [pc, #16]	; (8002208 <LL_ADC_DisableDeepPowerDown+0x20>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6093      	str	r3, [r2, #8]
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	5fffffc0 	.word	0x5fffffc0

0800220c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800221c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002220:	d101      	bne.n	8002226 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <LL_ADC_EnableInternalRegulator+0x24>)
 8002242:	4013      	ands	r3, r2
 8002244:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	6fffffc0 	.word	0x6fffffc0

0800225c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002270:	d101      	bne.n	8002276 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002272:	2301      	movs	r3, #1
 8002274:	e000      	b.n	8002278 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <LL_ADC_Enable+0x24>)
 8002292:	4013      	ands	r3, r2
 8002294:	f043 0201 	orr.w	r2, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	7fffffc0 	.word	0x7fffffc0

080022ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d101      	bne.n	80022c4 <LL_ADC_IsEnabled+0x18>
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <LL_ADC_IsEnabled+0x1a>
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <LL_ADC_REG_StartConversion+0x24>)
 80022e2:	4013      	ands	r3, r2
 80022e4:	f043 0204 	orr.w	r2, r3, #4
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	7fffffc0 	.word	0x7fffffc0

080022fc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b04      	cmp	r3, #4
 800230e:	d101      	bne.n	8002314 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002310:	2301      	movs	r3, #1
 8002312:	e000      	b.n	8002316 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b08      	cmp	r3, #8
 8002334:	d101      	bne.n	800233a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002348:	b590      	push	{r4, r7, lr}
 800234a:	b089      	sub	sp, #36	; 0x24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002350:	2300      	movs	r3, #0
 8002352:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002354:	2300      	movs	r3, #0
 8002356:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e138      	b.n	80025d4 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236c:	2b00      	cmp	r3, #0
 800236e:	d109      	bne.n	8002384 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7ff f949 	bl	8001608 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff ff3f 	bl	800220c <LL_ADC_IsDeepPowerDownEnabled>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d004      	beq.n	800239e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff ff25 	bl	80021e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff ff5a 	bl	800225c <LL_ADC_IsInternalRegulatorEnabled>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d114      	bne.n	80023d8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff ff3e 	bl	8002234 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023b8:	4b88      	ldr	r3, [pc, #544]	; (80025dc <HAL_ADC_Init+0x294>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	099b      	lsrs	r3, r3, #6
 80023be:	4a88      	ldr	r2, [pc, #544]	; (80025e0 <HAL_ADC_Init+0x298>)
 80023c0:	fba2 2303 	umull	r2, r3, r2, r3
 80023c4:	099b      	lsrs	r3, r3, #6
 80023c6:	3301      	adds	r3, #1
 80023c8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023ca:	e002      	b.n	80023d2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1f9      	bne.n	80023cc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff3d 	bl	800225c <LL_ADC_IsInternalRegulatorEnabled>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10d      	bne.n	8002404 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ec:	f043 0210 	orr.w	r2, r3, #16
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f8:	f043 0201 	orr.w	r2, r3, #1
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff ff77 	bl	80022fc <LL_ADC_REG_IsConversionOngoing>
 800240e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002414:	f003 0310 	and.w	r3, r3, #16
 8002418:	2b00      	cmp	r3, #0
 800241a:	f040 80d2 	bne.w	80025c2 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2b00      	cmp	r3, #0
 8002422:	f040 80ce 	bne.w	80025c2 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800242e:	f043 0202 	orr.w	r2, r3, #2
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff ff36 	bl	80022ac <LL_ADC_IsEnabled>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d110      	bne.n	8002468 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002446:	4867      	ldr	r0, [pc, #412]	; (80025e4 <HAL_ADC_Init+0x29c>)
 8002448:	f7ff ff30 	bl	80022ac <LL_ADC_IsEnabled>
 800244c:	4604      	mov	r4, r0
 800244e:	4866      	ldr	r0, [pc, #408]	; (80025e8 <HAL_ADC_Init+0x2a0>)
 8002450:	f7ff ff2c 	bl	80022ac <LL_ADC_IsEnabled>
 8002454:	4603      	mov	r3, r0
 8002456:	4323      	orrs	r3, r4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d105      	bne.n	8002468 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	4619      	mov	r1, r3
 8002462:	4862      	ldr	r0, [pc, #392]	; (80025ec <HAL_ADC_Init+0x2a4>)
 8002464:	f7ff fd8e 	bl	8001f84 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	7d5b      	ldrb	r3, [r3, #21]
 800246c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002472:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8002478:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	7f1b      	ldrb	r3, [r3, #28]
 800247e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	7f1b      	ldrb	r3, [r3, #28]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d106      	bne.n	800249a <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	3b01      	subs	r3, #1
 8002492:	045b      	lsls	r3, r3, #17
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d009      	beq.n	80024b6 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ae:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68da      	ldr	r2, [r3, #12]
 80024bc:	4b4c      	ldr	r3, [pc, #304]	; (80025f0 <HAL_ADC_Init+0x2a8>)
 80024be:	4013      	ands	r3, r2
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6812      	ldr	r2, [r2, #0]
 80024c4:	69b9      	ldr	r1, [r7, #24]
 80024c6:	430b      	orrs	r3, r1
 80024c8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff ff14 	bl	80022fc <LL_ADC_REG_IsConversionOngoing>
 80024d4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff ff21 	bl	8002322 <LL_ADC_INJ_IsConversionOngoing>
 80024e0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d14a      	bne.n	800257e <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d147      	bne.n	800257e <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	7d1b      	ldrb	r3, [r3, #20]
 80024f2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	4b3c      	ldr	r3, [pc, #240]	; (80025f4 <HAL_ADC_Init+0x2ac>)
 8002504:	4013      	ands	r3, r2
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6812      	ldr	r2, [r2, #0]
 800250a:	69b9      	ldr	r1, [r7, #24]
 800250c:	430b      	orrs	r3, r1
 800250e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002516:	2b01      	cmp	r3, #1
 8002518:	d11b      	bne.n	8002552 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691a      	ldr	r2, [r3, #16]
 8002526:	4b34      	ldr	r3, [pc, #208]	; (80025f8 <HAL_ADC_Init+0x2b0>)
 8002528:	4013      	ands	r3, r2
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800252e:	3a01      	subs	r2, #1
 8002530:	0411      	lsls	r1, r2, #16
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002536:	4311      	orrs	r1, r2
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800253c:	4311      	orrs	r1, r2
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002542:	430a      	orrs	r2, r1
 8002544:	431a      	orrs	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	611a      	str	r2, [r3, #16]
 8002550:	e007      	b.n	8002562 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 0201 	bic.w	r2, r2, #1
 8002560:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 fd41 	bl	8003000 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d10c      	bne.n	80025a0 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	f023 010f 	bic.w	r1, r3, #15
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	1e5a      	subs	r2, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	631a      	str	r2, [r3, #48]	; 0x30
 800259e:	e007      	b.n	80025b0 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 020f 	bic.w	r2, r2, #15
 80025ae:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b4:	f023 0303 	bic.w	r3, r3, #3
 80025b8:	f043 0201 	orr.w	r2, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	655a      	str	r2, [r3, #84]	; 0x54
 80025c0:	e007      	b.n	80025d2 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c6:	f043 0210 	orr.w	r2, r3, #16
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80025d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3724      	adds	r7, #36	; 0x24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd90      	pop	{r4, r7, pc}
 80025dc:	2400000c 	.word	0x2400000c
 80025e0:	053e2d63 	.word	0x053e2d63
 80025e4:	40022000 	.word	0x40022000
 80025e8:	40022100 	.word	0x40022100
 80025ec:	40022300 	.word	0x40022300
 80025f0:	fff0c003 	.word	0xfff0c003
 80025f4:	ffffbffc 	.word	0xffffbffc
 80025f8:	fc00f81e 	.word	0xfc00f81e

080025fc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002604:	4856      	ldr	r0, [pc, #344]	; (8002760 <HAL_ADC_Start+0x164>)
 8002606:	f7ff fdd3 	bl	80021b0 <LL_ADC_GetMultimode>
 800260a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fe73 	bl	80022fc <LL_ADC_REG_IsConversionOngoing>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	f040 809a 	bne.w	8002752 <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002624:	2b01      	cmp	r3, #1
 8002626:	d101      	bne.n	800262c <HAL_ADC_Start+0x30>
 8002628:	2302      	movs	r3, #2
 800262a:	e095      	b.n	8002758 <HAL_ADC_Start+0x15c>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 fc67 	bl	8002f08 <ADC_Enable>
 800263a:	4603      	mov	r3, r0
 800263c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800263e:	7dfb      	ldrb	r3, [r7, #23]
 8002640:	2b00      	cmp	r3, #0
 8002642:	f040 8081 	bne.w	8002748 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800264a:	4b46      	ldr	r3, [pc, #280]	; (8002764 <HAL_ADC_Start+0x168>)
 800264c:	4013      	ands	r3, r2
 800264e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a43      	ldr	r2, [pc, #268]	; (8002768 <HAL_ADC_Start+0x16c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d002      	beq.n	8002666 <HAL_ADC_Start+0x6a>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	e000      	b.n	8002668 <HAL_ADC_Start+0x6c>
 8002666:	4b41      	ldr	r3, [pc, #260]	; (800276c <HAL_ADC_Start+0x170>)
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6812      	ldr	r2, [r2, #0]
 800266c:	4293      	cmp	r3, r2
 800266e:	d002      	beq.n	8002676 <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d105      	bne.n	8002682 <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002686:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800268a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800268e:	d106      	bne.n	800269e <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002694:	f023 0206 	bic.w	r2, r3, #6
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	659a      	str	r2, [r3, #88]	; 0x58
 800269c:	e002      	b.n	80026a4 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	221c      	movs	r2, #28
 80026aa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a2b      	ldr	r2, [pc, #172]	; (8002768 <HAL_ADC_Start+0x16c>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d002      	beq.n	80026c4 <HAL_ADC_Start+0xc8>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	e000      	b.n	80026c6 <HAL_ADC_Start+0xca>
 80026c4:	4b29      	ldr	r3, [pc, #164]	; (800276c <HAL_ADC_Start+0x170>)
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d008      	beq.n	80026e0 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d005      	beq.n	80026e0 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	2b05      	cmp	r3, #5
 80026d8:	d002      	beq.n	80026e0 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	2b09      	cmp	r3, #9
 80026de:	d114      	bne.n	800270a <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d007      	beq.n	80026fe <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fde6 	bl	80022d4 <LL_ADC_REG_StartConversion>
 8002708:	e025      	b.n	8002756 <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a13      	ldr	r2, [pc, #76]	; (8002768 <HAL_ADC_Start+0x16c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d002      	beq.n	8002726 <HAL_ADC_Start+0x12a>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	e000      	b.n	8002728 <HAL_ADC_Start+0x12c>
 8002726:	4b11      	ldr	r3, [pc, #68]	; (800276c <HAL_ADC_Start+0x170>)
 8002728:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00f      	beq.n	8002756 <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800273e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	655a      	str	r2, [r3, #84]	; 0x54
 8002746:	e006      	b.n	8002756 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002750:	e001      	b.n	8002756 <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002752:	2302      	movs	r3, #2
 8002754:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002756:	7dfb      	ldrb	r3, [r7, #23]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40022300 	.word	0x40022300
 8002764:	fffff0fe 	.word	0xfffff0fe
 8002768:	40022100 	.word	0x40022100
 800276c:	40022000 	.word	0x40022000

08002770 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b088      	sub	sp, #32
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800277a:	4866      	ldr	r0, [pc, #408]	; (8002914 <HAL_ADC_PollForConversion+0x1a4>)
 800277c:	f7ff fd18 	bl	80021b0 <LL_ADC_GetMultimode>
 8002780:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	2b08      	cmp	r3, #8
 8002788:	d102      	bne.n	8002790 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800278a:	2308      	movs	r3, #8
 800278c:	61fb      	str	r3, [r7, #28]
 800278e:	e02a      	b.n	80027e6 <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	2b05      	cmp	r3, #5
 800279a:	d002      	beq.n	80027a2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	2b09      	cmp	r3, #9
 80027a0:	d111      	bne.n	80027c6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d007      	beq.n	80027c0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b4:	f043 0220 	orr.w	r2, r3, #32
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0a4      	b.n	800290a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80027c0:	2304      	movs	r3, #4
 80027c2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80027c4:	e00f      	b.n	80027e6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80027c6:	4853      	ldr	r0, [pc, #332]	; (8002914 <HAL_ADC_PollForConversion+0x1a4>)
 80027c8:	f7ff fd00 	bl	80021cc <LL_ADC_GetMultiDMATransfer>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d007      	beq.n	80027e2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d6:	f043 0220 	orr.w	r2, r3, #32
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e093      	b.n	800290a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80027e2:	2304      	movs	r3, #4
 80027e4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80027e6:	f7ff fb9d 	bl	8001f24 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80027ec:	e021      	b.n	8002832 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f4:	d01d      	beq.n	8002832 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80027f6:	f7ff fb95 	bl	8001f24 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d302      	bcc.n	800280c <HAL_ADC_PollForConversion+0x9c>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d112      	bne.n	8002832 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	4013      	ands	r3, r2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10b      	bne.n	8002832 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281e:	f043 0204 	orr.w	r2, r3, #4
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e06b      	b.n	800290a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	4013      	ands	r3, r2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0d6      	beq.n	80027ee <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002844:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fc1f 	bl	8002094 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d01c      	beq.n	8002896 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	7d5b      	ldrb	r3, [r3, #21]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d118      	bne.n	8002896 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b08      	cmp	r3, #8
 8002870:	d111      	bne.n	8002896 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002876:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002882:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d105      	bne.n	8002896 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288e:	f043 0201 	orr.w	r2, r3, #1
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a1f      	ldr	r2, [pc, #124]	; (8002918 <HAL_ADC_PollForConversion+0x1a8>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d002      	beq.n	80028a6 <HAL_ADC_PollForConversion+0x136>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	e000      	b.n	80028a8 <HAL_ADC_PollForConversion+0x138>
 80028a6:	4b1d      	ldr	r3, [pc, #116]	; (800291c <HAL_ADC_PollForConversion+0x1ac>)
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d008      	beq.n	80028c2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d005      	beq.n	80028c2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2b05      	cmp	r3, #5
 80028ba:	d002      	beq.n	80028c2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	2b09      	cmp	r3, #9
 80028c0:	d104      	bne.n	80028cc <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	61bb      	str	r3, [r7, #24]
 80028ca:	e00c      	b.n	80028e6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a11      	ldr	r2, [pc, #68]	; (8002918 <HAL_ADC_PollForConversion+0x1a8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d002      	beq.n	80028dc <HAL_ADC_PollForConversion+0x16c>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	e000      	b.n	80028de <HAL_ADC_PollForConversion+0x16e>
 80028dc:	4b0f      	ldr	r3, [pc, #60]	; (800291c <HAL_ADC_PollForConversion+0x1ac>)
 80028de:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d104      	bne.n	80028f6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2208      	movs	r2, #8
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	e008      	b.n	8002908 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d103      	bne.n	8002908 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	220c      	movs	r2, #12
 8002906:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3720      	adds	r7, #32
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40022300 	.word	0x40022300
 8002918:	40022100 	.word	0x40022100
 800291c:	40022000 	.word	0x40022000

08002920 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800292e:	4618      	mov	r0, r3
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
	...

0800293c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800293c:	b590      	push	{r4, r7, lr}
 800293e:	b0a1      	sub	sp, #132	; 0x84
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800294c:	2300      	movs	r3, #0
 800294e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	4a9a      	ldr	r2, [pc, #616]	; (8002bc0 <HAL_ADC_ConfigChannel+0x284>)
 8002956:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800295e:	2b01      	cmp	r3, #1
 8002960:	d101      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x2a>
 8002962:	2302      	movs	r3, #2
 8002964:	e2bc      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x5a4>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff fcc2 	bl	80022fc <LL_ADC_REG_IsConversionOngoing>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	f040 82a1 	bne.w	8002ec2 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002988:	2b00      	cmp	r3, #0
 800298a:	d108      	bne.n	800299e <HAL_ADC_ConfigChannel+0x62>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	0e9b      	lsrs	r3, r3, #26
 8002992:	f003 031f 	and.w	r3, r3, #31
 8002996:	2201      	movs	r2, #1
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	e016      	b.n	80029cc <HAL_ADC_ConfigChannel+0x90>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029a6:	fa93 f3a3 	rbit	r3, r3
 80029aa:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029ae:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80029b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80029b6:	2320      	movs	r3, #32
 80029b8:	e003      	b.n	80029c2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80029ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029bc:	fab3 f383 	clz	r3, r3
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	f003 031f 	and.w	r3, r3, #31
 80029c6:	2201      	movs	r2, #1
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	69d1      	ldr	r1, [r2, #28]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6812      	ldr	r2, [r2, #0]
 80029d6:	430b      	orrs	r3, r1
 80029d8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6818      	ldr	r0, [r3, #0]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	6859      	ldr	r1, [r3, #4]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	f7ff fb67 	bl	80020ba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff fc83 	bl	80022fc <LL_ADC_REG_IsConversionOngoing>
 80029f6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fc90 	bl	8002322 <LL_ADC_INJ_IsConversionOngoing>
 8002a02:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f040 80a0 	bne.w	8002b4c <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f040 809c 	bne.w	8002b4c <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6818      	ldr	r0, [r3, #0]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	6819      	ldr	r1, [r3, #0]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	461a      	mov	r2, r3
 8002a22:	f7ff fb76 	bl	8002112 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f003 0310 	and.w	r3, r3, #16
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10b      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x110>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	695a      	ldr	r2, [r3, #20]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	089b      	lsrs	r3, r3, #2
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	e00a      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x126>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	695a      	ldr	r2, [r3, #20]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	089b      	lsrs	r3, r3, #2
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	d027      	beq.n	8002abc <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6818      	ldr	r0, [r3, #0]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	6919      	ldr	r1, [r3, #16]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a7a:	f7ff fab7 	bl	8001fec <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	6919      	ldr	r1, [r3, #16]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	7e5b      	ldrb	r3, [r3, #25]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d102      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x158>
 8002a8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002a92:	e000      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x15a>
 8002a94:	2300      	movs	r3, #0
 8002a96:	461a      	mov	r2, r3
 8002a98:	f7ff fae1 	bl	800205e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6818      	ldr	r0, [r3, #0]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	6919      	ldr	r1, [r3, #16]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	7e1b      	ldrb	r3, [r3, #24]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d102      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x176>
 8002aac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ab0:	e000      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0x178>
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	f7ff fab9 	bl	800202c <LL_ADC_SetDataRightShift>
 8002aba:	e047      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	069b      	lsls	r3, r3, #26
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d107      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ade:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ae6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	069b      	lsls	r3, r3, #26
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d107      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b02:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	069b      	lsls	r3, r3, #26
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d107      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b26:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	069b      	lsls	r3, r3, #26
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d107      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b4a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff fbab 	bl	80022ac <LL_ADC_IsEnabled>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f040 81bb 	bne.w	8002ed4 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	6819      	ldr	r1, [r3, #0]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	f7ff fafc 	bl	8002168 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	4a12      	ldr	r2, [pc, #72]	; (8002bc0 <HAL_ADC_ConfigChannel+0x284>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	f040 8130 	bne.w	8002ddc <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10b      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x268>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	0e9b      	lsrs	r3, r3, #26
 8002b92:	3301      	adds	r3, #1
 8002b94:	f003 031f 	and.w	r3, r3, #31
 8002b98:	2b09      	cmp	r3, #9
 8002b9a:	bf94      	ite	ls
 8002b9c:	2301      	movls	r3, #1
 8002b9e:	2300      	movhi	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	e01b      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x2a0>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bac:	fa93 f3a3 	rbit	r3, r3
 8002bb0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002bb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d103      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8002bbc:	2320      	movs	r3, #32
 8002bbe:	e005      	b.n	8002bcc <HAL_ADC_ConfigChannel+0x290>
 8002bc0:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8002bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bc6:	fab3 f383 	clz	r3, r3
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	3301      	adds	r3, #1
 8002bce:	f003 031f 	and.w	r3, r3, #31
 8002bd2:	2b09      	cmp	r3, #9
 8002bd4:	bf94      	ite	ls
 8002bd6:	2301      	movls	r3, #1
 8002bd8:	2300      	movhi	r3, #0
 8002bda:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d079      	beq.n	8002cd4 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d107      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x2c0>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	0e9b      	lsrs	r3, r3, #26
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	069b      	lsls	r3, r3, #26
 8002bf6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bfa:	e015      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x2ec>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c04:	fa93 f3a3 	rbit	r3, r3
 8002c08:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c0c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8002c14:	2320      	movs	r3, #32
 8002c16:	e003      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8002c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c1a:	fab3 f383 	clz	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	3301      	adds	r3, #1
 8002c22:	069b      	lsls	r3, r3, #26
 8002c24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d109      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x30c>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	0e9b      	lsrs	r3, r3, #26
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	f003 031f 	and.w	r3, r3, #31
 8002c40:	2101      	movs	r1, #1
 8002c42:	fa01 f303 	lsl.w	r3, r1, r3
 8002c46:	e017      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x33c>
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c50:	fa93 f3a3 	rbit	r3, r3
 8002c54:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c58:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8002c60:	2320      	movs	r3, #32
 8002c62:	e003      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8002c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c66:	fab3 f383 	clz	r3, r3
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	f003 031f 	and.w	r3, r3, #31
 8002c72:	2101      	movs	r1, #1
 8002c74:	fa01 f303 	lsl.w	r3, r1, r3
 8002c78:	ea42 0103 	orr.w	r1, r2, r3
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10a      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x362>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	0e9b      	lsrs	r3, r3, #26
 8002c8e:	3301      	adds	r3, #1
 8002c90:	f003 021f 	and.w	r2, r3, #31
 8002c94:	4613      	mov	r3, r2
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	4413      	add	r3, r2
 8002c9a:	051b      	lsls	r3, r3, #20
 8002c9c:	e018      	b.n	8002cd0 <HAL_ADC_ConfigChannel+0x394>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002cb6:	2320      	movs	r3, #32
 8002cb8:	e003      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8002cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cbc:	fab3 f383 	clz	r3, r3
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	f003 021f 	and.w	r2, r3, #31
 8002cc8:	4613      	mov	r3, r2
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	4413      	add	r3, r2
 8002cce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	e07e      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d107      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x3b4>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	0e9b      	lsrs	r3, r3, #26
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	069b      	lsls	r3, r3, #26
 8002cea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cee:	e015      	b.n	8002d1c <HAL_ADC_ConfigChannel+0x3e0>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf8:	fa93 f3a3 	rbit	r3, r3
 8002cfc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002d08:	2320      	movs	r3, #32
 8002d0a:	e003      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	3301      	adds	r3, #1
 8002d16:	069b      	lsls	r3, r3, #26
 8002d18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d109      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x400>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	0e9b      	lsrs	r3, r3, #26
 8002d2e:	3301      	adds	r3, #1
 8002d30:	f003 031f 	and.w	r3, r3, #31
 8002d34:	2101      	movs	r1, #1
 8002d36:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3a:	e017      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x430>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	fa93 f3a3 	rbit	r3, r3
 8002d48:	61bb      	str	r3, [r7, #24]
  return result;
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8002d54:	2320      	movs	r3, #32
 8002d56:	e003      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	fab3 f383 	clz	r3, r3
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	3301      	adds	r3, #1
 8002d62:	f003 031f 	and.w	r3, r3, #31
 8002d66:	2101      	movs	r1, #1
 8002d68:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6c:	ea42 0103 	orr.w	r1, r2, r3
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10d      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x45c>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	0e9b      	lsrs	r3, r3, #26
 8002d82:	3301      	adds	r3, #1
 8002d84:	f003 021f 	and.w	r2, r3, #31
 8002d88:	4613      	mov	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3b1e      	subs	r3, #30
 8002d90:	051b      	lsls	r3, r3, #20
 8002d92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d96:	e01b      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x494>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	fa93 f3a3 	rbit	r3, r3
 8002da4:	60fb      	str	r3, [r7, #12]
  return result;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8002db0:	2320      	movs	r3, #32
 8002db2:	e003      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	fab3 f383 	clz	r3, r3
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	f003 021f 	and.w	r2, r3, #31
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3b1e      	subs	r3, #30
 8002dca:	051b      	lsls	r3, r3, #20
 8002dcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	6892      	ldr	r2, [r2, #8]
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	f7ff f99b 	bl	8002112 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	da77      	bge.n	8002ed4 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002de4:	4840      	ldr	r0, [pc, #256]	; (8002ee8 <HAL_ADC_ConfigChannel+0x5ac>)
 8002de6:	f7ff f8f3 	bl	8001fd0 <LL_ADC_GetCommonPathInternalCh>
 8002dea:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dec:	483f      	ldr	r0, [pc, #252]	; (8002eec <HAL_ADC_ConfigChannel+0x5b0>)
 8002dee:	f7ff fa5d 	bl	80022ac <LL_ADC_IsEnabled>
 8002df2:	4604      	mov	r4, r0
 8002df4:	483e      	ldr	r0, [pc, #248]	; (8002ef0 <HAL_ADC_ConfigChannel+0x5b4>)
 8002df6:	f7ff fa59 	bl	80022ac <LL_ADC_IsEnabled>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	4323      	orrs	r3, r4
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d155      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a3b      	ldr	r2, [pc, #236]	; (8002ef4 <HAL_ADC_ConfigChannel+0x5b8>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d122      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x516>
 8002e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d11d      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a35      	ldr	r2, [pc, #212]	; (8002ef0 <HAL_ADC_ConfigChannel+0x5b4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d159      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e26:	4619      	mov	r1, r3
 8002e28:	482f      	ldr	r0, [pc, #188]	; (8002ee8 <HAL_ADC_ConfigChannel+0x5ac>)
 8002e2a:	f7ff f8be 	bl	8001faa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e2e:	4b32      	ldr	r3, [pc, #200]	; (8002ef8 <HAL_ADC_ConfigChannel+0x5bc>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	099b      	lsrs	r3, r3, #6
 8002e34:	4a31      	ldr	r2, [pc, #196]	; (8002efc <HAL_ADC_ConfigChannel+0x5c0>)
 8002e36:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3a:	099b      	lsrs	r3, r3, #6
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002e42:	e002      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1f9      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e50:	e040      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a2a      	ldr	r2, [pc, #168]	; (8002f00 <HAL_ADC_ConfigChannel+0x5c4>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d111      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x544>
 8002e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10c      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a21      	ldr	r2, [pc, #132]	; (8002ef0 <HAL_ADC_ConfigChannel+0x5b4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d131      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e76:	4619      	mov	r1, r3
 8002e78:	481b      	ldr	r0, [pc, #108]	; (8002ee8 <HAL_ADC_ConfigChannel+0x5ac>)
 8002e7a:	f7ff f896 	bl	8001faa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e7e:	e029      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a1f      	ldr	r2, [pc, #124]	; (8002f04 <HAL_ADC_ConfigChannel+0x5c8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d124      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x598>
 8002e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d11f      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a15      	ldr	r2, [pc, #84]	; (8002ef0 <HAL_ADC_ConfigChannel+0x5b4>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d11a      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4810      	ldr	r0, [pc, #64]	; (8002ee8 <HAL_ADC_ConfigChannel+0x5ac>)
 8002ea8:	f7ff f87f 	bl	8001faa <LL_ADC_SetCommonPathInternalCh>
 8002eac:	e012      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb2:	f043 0220 	orr.w	r2, r3, #32
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002ec0:	e008      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec6:	f043 0220 	orr.w	r2, r3, #32
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002edc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3784      	adds	r7, #132	; 0x84
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd90      	pop	{r4, r7, pc}
 8002ee8:	40022300 	.word	0x40022300
 8002eec:	40022000 	.word	0x40022000
 8002ef0:	40022100 	.word	0x40022100
 8002ef4:	cb840000 	.word	0xcb840000
 8002ef8:	2400000c 	.word	0x2400000c
 8002efc:	053e2d63 	.word	0x053e2d63
 8002f00:	bac04000 	.word	0xbac04000
 8002f04:	cfb80000 	.word	0xcfb80000

08002f08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff f9c9 	bl	80022ac <LL_ADC_IsEnabled>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d161      	bne.n	8002fe4 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	4b32      	ldr	r3, [pc, #200]	; (8002ff0 <ADC_Enable+0xe8>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00d      	beq.n	8002f4a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f32:	f043 0210 	orr.w	r2, r3, #16
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3e:	f043 0201 	orr.w	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e04d      	b.n	8002fe6 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff f998 	bl	8002284 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f54:	f7fe ffe6 	bl	8001f24 <HAL_GetTick>
 8002f58:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f5a:	4826      	ldr	r0, [pc, #152]	; (8002ff4 <ADC_Enable+0xec>)
 8002f5c:	f7ff f928 	bl	80021b0 <LL_ADC_GetMultimode>
 8002f60:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a24      	ldr	r2, [pc, #144]	; (8002ff8 <ADC_Enable+0xf0>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d002      	beq.n	8002f72 <ADC_Enable+0x6a>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	e000      	b.n	8002f74 <ADC_Enable+0x6c>
 8002f72:	4b22      	ldr	r3, [pc, #136]	; (8002ffc <ADC_Enable+0xf4>)
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6812      	ldr	r2, [r2, #0]
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d02c      	beq.n	8002fd6 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d130      	bne.n	8002fe4 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f82:	e028      	b.n	8002fd6 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff f98f 	bl	80022ac <LL_ADC_IsEnabled>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d104      	bne.n	8002f9e <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff f973 	bl	8002284 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f9e:	f7fe ffc1 	bl	8001f24 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d914      	bls.n	8002fd6 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d00d      	beq.n	8002fd6 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbe:	f043 0210 	orr.w	r2, r3, #16
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fca:	f043 0201 	orr.w	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e007      	b.n	8002fe6 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d1cf      	bne.n	8002f84 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	8000003f 	.word	0x8000003f
 8002ff4:	40022300 	.word	0x40022300
 8002ff8:	40022100 	.word	0x40022100
 8002ffc:	40022000 	.word	0x40022000

08003000 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003008:	4b60      	ldr	r3, [pc, #384]	; (800318c <ADC_ConfigureBoostMode+0x18c>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d01c      	beq.n	800304e <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003014:	f002 f97e 	bl	8005314 <HAL_RCC_GetHCLKFreq>
 8003018:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003022:	d010      	beq.n	8003046 <ADC_ConfigureBoostMode+0x46>
 8003024:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003028:	d873      	bhi.n	8003112 <ADC_ConfigureBoostMode+0x112>
 800302a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800302e:	d002      	beq.n	8003036 <ADC_ConfigureBoostMode+0x36>
 8003030:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003034:	d16d      	bne.n	8003112 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	0c1b      	lsrs	r3, r3, #16
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003042:	60fb      	str	r3, [r7, #12]
        break;
 8003044:	e068      	b.n	8003118 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	089b      	lsrs	r3, r3, #2
 800304a:	60fb      	str	r3, [r7, #12]
        break;
 800304c:	e064      	b.n	8003118 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800304e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003052:	f04f 0100 	mov.w	r1, #0
 8003056:	f003 fb77 	bl	8006748 <HAL_RCCEx_GetPeriphCLKFreq>
 800305a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003064:	d051      	beq.n	800310a <ADC_ConfigureBoostMode+0x10a>
 8003066:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800306a:	d854      	bhi.n	8003116 <ADC_ConfigureBoostMode+0x116>
 800306c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003070:	d047      	beq.n	8003102 <ADC_ConfigureBoostMode+0x102>
 8003072:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003076:	d84e      	bhi.n	8003116 <ADC_ConfigureBoostMode+0x116>
 8003078:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800307c:	d03d      	beq.n	80030fa <ADC_ConfigureBoostMode+0xfa>
 800307e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003082:	d848      	bhi.n	8003116 <ADC_ConfigureBoostMode+0x116>
 8003084:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003088:	d033      	beq.n	80030f2 <ADC_ConfigureBoostMode+0xf2>
 800308a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800308e:	d842      	bhi.n	8003116 <ADC_ConfigureBoostMode+0x116>
 8003090:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003094:	d029      	beq.n	80030ea <ADC_ConfigureBoostMode+0xea>
 8003096:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800309a:	d83c      	bhi.n	8003116 <ADC_ConfigureBoostMode+0x116>
 800309c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80030a0:	d01a      	beq.n	80030d8 <ADC_ConfigureBoostMode+0xd8>
 80030a2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80030a6:	d836      	bhi.n	8003116 <ADC_ConfigureBoostMode+0x116>
 80030a8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80030ac:	d014      	beq.n	80030d8 <ADC_ConfigureBoostMode+0xd8>
 80030ae:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80030b2:	d830      	bhi.n	8003116 <ADC_ConfigureBoostMode+0x116>
 80030b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030b8:	d00e      	beq.n	80030d8 <ADC_ConfigureBoostMode+0xd8>
 80030ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030be:	d82a      	bhi.n	8003116 <ADC_ConfigureBoostMode+0x116>
 80030c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80030c4:	d008      	beq.n	80030d8 <ADC_ConfigureBoostMode+0xd8>
 80030c6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80030ca:	d824      	bhi.n	8003116 <ADC_ConfigureBoostMode+0x116>
 80030cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030d0:	d002      	beq.n	80030d8 <ADC_ConfigureBoostMode+0xd8>
 80030d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030d6:	d11e      	bne.n	8003116 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	0c9b      	lsrs	r3, r3, #18
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e6:	60fb      	str	r3, [r7, #12]
        break;
 80030e8:	e016      	b.n	8003118 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	091b      	lsrs	r3, r3, #4
 80030ee:	60fb      	str	r3, [r7, #12]
        break;
 80030f0:	e012      	b.n	8003118 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	095b      	lsrs	r3, r3, #5
 80030f6:	60fb      	str	r3, [r7, #12]
        break;
 80030f8:	e00e      	b.n	8003118 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	099b      	lsrs	r3, r3, #6
 80030fe:	60fb      	str	r3, [r7, #12]
        break;
 8003100:	e00a      	b.n	8003118 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	09db      	lsrs	r3, r3, #7
 8003106:	60fb      	str	r3, [r7, #12]
        break;
 8003108:	e006      	b.n	8003118 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	0a1b      	lsrs	r3, r3, #8
 800310e:	60fb      	str	r3, [r7, #12]
        break;
 8003110:	e002      	b.n	8003118 <ADC_ConfigureBoostMode+0x118>
        break;
 8003112:	bf00      	nop
 8003114:	e000      	b.n	8003118 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8003116:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	085b      	lsrs	r3, r3, #1
 800311c:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4a1b      	ldr	r2, [pc, #108]	; (8003190 <ADC_ConfigureBoostMode+0x190>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d808      	bhi.n	8003138 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003134:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003136:	e025      	b.n	8003184 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4a16      	ldr	r2, [pc, #88]	; (8003194 <ADC_ConfigureBoostMode+0x194>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d80a      	bhi.n	8003156 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003152:	609a      	str	r2, [r3, #8]
}
 8003154:	e016      	b.n	8003184 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	4a0f      	ldr	r2, [pc, #60]	; (8003198 <ADC_ConfigureBoostMode+0x198>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d80a      	bhi.n	8003174 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003170:	609a      	str	r2, [r3, #8]
}
 8003172:	e007      	b.n	8003184 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003182:	609a      	str	r2, [r3, #8]
}
 8003184:	bf00      	nop
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40022300 	.word	0x40022300
 8003190:	005f5e10 	.word	0x005f5e10
 8003194:	00bebc20 	.word	0x00bebc20
 8003198:	017d7840 	.word	0x017d7840

0800319c <LL_ADC_IsEnabled>:
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d101      	bne.n	80031b4 <LL_ADC_IsEnabled+0x18>
 80031b0:	2301      	movs	r3, #1
 80031b2:	e000      	b.n	80031b6 <LL_ADC_IsEnabled+0x1a>
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <LL_ADC_REG_IsConversionOngoing>:
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 0304 	and.w	r3, r3, #4
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d101      	bne.n	80031da <LL_ADC_REG_IsConversionOngoing+0x18>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80031e8:	b590      	push	{r4, r7, lr}
 80031ea:	b09f      	sub	sp, #124	; 0x7c
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003202:	2302      	movs	r3, #2
 8003204:	e080      	b.n	8003308 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800320e:	2300      	movs	r3, #0
 8003210:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003212:	2300      	movs	r3, #0
 8003214:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a3d      	ldr	r2, [pc, #244]	; (8003310 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d102      	bne.n	8003226 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003220:	4b3c      	ldr	r3, [pc, #240]	; (8003314 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003222:	60bb      	str	r3, [r7, #8]
 8003224:	e001      	b.n	800322a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003226:	2300      	movs	r3, #0
 8003228:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10b      	bne.n	8003248 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003234:	f043 0220 	orr.w	r2, r3, #32
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e05f      	b.n	8003308 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff ffb9 	bl	80031c2 <LL_ADC_REG_IsConversionOngoing>
 8003250:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff ffb3 	bl	80031c2 <LL_ADC_REG_IsConversionOngoing>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d141      	bne.n	80032e6 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003262:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003264:	2b00      	cmp	r3, #0
 8003266:	d13e      	bne.n	80032e6 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003268:	4b2b      	ldr	r3, [pc, #172]	; (8003318 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 800326a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d020      	beq.n	80032b6 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	431a      	orrs	r2, r3
 8003282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003284:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003286:	4822      	ldr	r0, [pc, #136]	; (8003310 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003288:	f7ff ff88 	bl	800319c <LL_ADC_IsEnabled>
 800328c:	4604      	mov	r4, r0
 800328e:	4821      	ldr	r0, [pc, #132]	; (8003314 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003290:	f7ff ff84 	bl	800319c <LL_ADC_IsEnabled>
 8003294:	4603      	mov	r3, r0
 8003296:	4323      	orrs	r3, r4
 8003298:	2b00      	cmp	r3, #0
 800329a:	d12e      	bne.n	80032fa <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800329c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	4b1e      	ldr	r3, [pc, #120]	; (800331c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	6811      	ldr	r1, [r2, #0]
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	6892      	ldr	r2, [r2, #8]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	431a      	orrs	r2, r3
 80032b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032b2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032b4:	e021      	b.n	80032fa <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80032b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032c0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032c2:	4813      	ldr	r0, [pc, #76]	; (8003310 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80032c4:	f7ff ff6a 	bl	800319c <LL_ADC_IsEnabled>
 80032c8:	4604      	mov	r4, r0
 80032ca:	4812      	ldr	r0, [pc, #72]	; (8003314 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80032cc:	f7ff ff66 	bl	800319c <LL_ADC_IsEnabled>
 80032d0:	4603      	mov	r3, r0
 80032d2:	4323      	orrs	r3, r4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d110      	bne.n	80032fa <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80032d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	4b0f      	ldr	r3, [pc, #60]	; (800331c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80032de:	4013      	ands	r3, r2
 80032e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032e2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032e4:	e009      	b.n	80032fa <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ea:	f043 0220 	orr.w	r2, r3, #32
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80032f8:	e000      	b.n	80032fc <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032fa:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003304:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003308:	4618      	mov	r0, r3
 800330a:	377c      	adds	r7, #124	; 0x7c
 800330c:	46bd      	mov	sp, r7
 800330e:	bd90      	pop	{r4, r7, pc}
 8003310:	40022000 	.word	0x40022000
 8003314:	40022100 	.word	0x40022100
 8003318:	40022300 	.word	0x40022300
 800331c:	fffff0e0 	.word	0xfffff0e0

08003320 <__NVIC_SetPriorityGrouping>:
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003330:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <__NVIC_SetPriorityGrouping+0x40>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800333c:	4013      	ands	r3, r2
 800333e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003348:	4b06      	ldr	r3, [pc, #24]	; (8003364 <__NVIC_SetPriorityGrouping+0x44>)
 800334a:	4313      	orrs	r3, r2
 800334c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800334e:	4a04      	ldr	r2, [pc, #16]	; (8003360 <__NVIC_SetPriorityGrouping+0x40>)
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	60d3      	str	r3, [r2, #12]
}
 8003354:	bf00      	nop
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	e000ed00 	.word	0xe000ed00
 8003364:	05fa0000 	.word	0x05fa0000

08003368 <__NVIC_GetPriorityGrouping>:
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800336c:	4b04      	ldr	r3, [pc, #16]	; (8003380 <__NVIC_GetPriorityGrouping+0x18>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	0a1b      	lsrs	r3, r3, #8
 8003372:	f003 0307 	and.w	r3, r3, #7
}
 8003376:	4618      	mov	r0, r3
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	e000ed00 	.word	0xe000ed00

08003384 <__NVIC_EnableIRQ>:
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800338e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003392:	2b00      	cmp	r3, #0
 8003394:	db0b      	blt.n	80033ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003396:	88fb      	ldrh	r3, [r7, #6]
 8003398:	f003 021f 	and.w	r2, r3, #31
 800339c:	4907      	ldr	r1, [pc, #28]	; (80033bc <__NVIC_EnableIRQ+0x38>)
 800339e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	2001      	movs	r0, #1
 80033a6:	fa00 f202 	lsl.w	r2, r0, r2
 80033aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	e000e100 	.word	0xe000e100

080033c0 <__NVIC_SetPriority>:
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	6039      	str	r1, [r7, #0]
 80033ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	db0a      	blt.n	80033ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	490c      	ldr	r1, [pc, #48]	; (800340c <__NVIC_SetPriority+0x4c>)
 80033da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033de:	0112      	lsls	r2, r2, #4
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	440b      	add	r3, r1
 80033e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80033e8:	e00a      	b.n	8003400 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	4908      	ldr	r1, [pc, #32]	; (8003410 <__NVIC_SetPriority+0x50>)
 80033f0:	88fb      	ldrh	r3, [r7, #6]
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	3b04      	subs	r3, #4
 80033f8:	0112      	lsls	r2, r2, #4
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	440b      	add	r3, r1
 80033fe:	761a      	strb	r2, [r3, #24]
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	e000e100 	.word	0xe000e100
 8003410:	e000ed00 	.word	0xe000ed00

08003414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003414:	b480      	push	{r7}
 8003416:	b089      	sub	sp, #36	; 0x24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f1c3 0307 	rsb	r3, r3, #7
 800342e:	2b04      	cmp	r3, #4
 8003430:	bf28      	it	cs
 8003432:	2304      	movcs	r3, #4
 8003434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	3304      	adds	r3, #4
 800343a:	2b06      	cmp	r3, #6
 800343c:	d902      	bls.n	8003444 <NVIC_EncodePriority+0x30>
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	3b03      	subs	r3, #3
 8003442:	e000      	b.n	8003446 <NVIC_EncodePriority+0x32>
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003448:	f04f 32ff 	mov.w	r2, #4294967295
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43da      	mvns	r2, r3
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	401a      	ands	r2, r3
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800345c:	f04f 31ff 	mov.w	r1, #4294967295
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	fa01 f303 	lsl.w	r3, r1, r3
 8003466:	43d9      	mvns	r1, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800346c:	4313      	orrs	r3, r2
         );
}
 800346e:	4618      	mov	r0, r3
 8003470:	3724      	adds	r7, #36	; 0x24
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
	...

0800347c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3b01      	subs	r3, #1
 8003488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800348c:	d301      	bcc.n	8003492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800348e:	2301      	movs	r3, #1
 8003490:	e00f      	b.n	80034b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003492:	4a0a      	ldr	r2, [pc, #40]	; (80034bc <SysTick_Config+0x40>)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3b01      	subs	r3, #1
 8003498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800349a:	210f      	movs	r1, #15
 800349c:	f04f 30ff 	mov.w	r0, #4294967295
 80034a0:	f7ff ff8e 	bl	80033c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034a4:	4b05      	ldr	r3, [pc, #20]	; (80034bc <SysTick_Config+0x40>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034aa:	4b04      	ldr	r3, [pc, #16]	; (80034bc <SysTick_Config+0x40>)
 80034ac:	2207      	movs	r2, #7
 80034ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	e000e010 	.word	0xe000e010

080034c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7ff ff29 	bl	8003320 <__NVIC_SetPriorityGrouping>
}
 80034ce:	bf00      	nop
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b086      	sub	sp, #24
 80034da:	af00      	add	r7, sp, #0
 80034dc:	4603      	mov	r3, r0
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	607a      	str	r2, [r7, #4]
 80034e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034e4:	f7ff ff40 	bl	8003368 <__NVIC_GetPriorityGrouping>
 80034e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	68b9      	ldr	r1, [r7, #8]
 80034ee:	6978      	ldr	r0, [r7, #20]
 80034f0:	f7ff ff90 	bl	8003414 <NVIC_EncodePriority>
 80034f4:	4602      	mov	r2, r0
 80034f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034fa:	4611      	mov	r1, r2
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff ff5f 	bl	80033c0 <__NVIC_SetPriority>
}
 8003502:	bf00      	nop
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b082      	sub	sp, #8
 800350e:	af00      	add	r7, sp, #0
 8003510:	4603      	mov	r3, r0
 8003512:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003514:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff ff33 	bl	8003384 <__NVIC_EnableIRQ>
}
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b082      	sub	sp, #8
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7ff ffa4 	bl	800347c <SysTick_Config>
 8003534:	4603      	mov	r3, r0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003548:	f7fe fcec 	bl	8001f24 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e2dc      	b.n	8003b12 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d008      	beq.n	8003576 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2280      	movs	r2, #128	; 0x80
 8003568:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e2cd      	b.n	8003b12 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a76      	ldr	r2, [pc, #472]	; (8003754 <HAL_DMA_Abort+0x214>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d04a      	beq.n	8003616 <HAL_DMA_Abort+0xd6>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a74      	ldr	r2, [pc, #464]	; (8003758 <HAL_DMA_Abort+0x218>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d045      	beq.n	8003616 <HAL_DMA_Abort+0xd6>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a73      	ldr	r2, [pc, #460]	; (800375c <HAL_DMA_Abort+0x21c>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d040      	beq.n	8003616 <HAL_DMA_Abort+0xd6>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a71      	ldr	r2, [pc, #452]	; (8003760 <HAL_DMA_Abort+0x220>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d03b      	beq.n	8003616 <HAL_DMA_Abort+0xd6>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a70      	ldr	r2, [pc, #448]	; (8003764 <HAL_DMA_Abort+0x224>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d036      	beq.n	8003616 <HAL_DMA_Abort+0xd6>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a6e      	ldr	r2, [pc, #440]	; (8003768 <HAL_DMA_Abort+0x228>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d031      	beq.n	8003616 <HAL_DMA_Abort+0xd6>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a6d      	ldr	r2, [pc, #436]	; (800376c <HAL_DMA_Abort+0x22c>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d02c      	beq.n	8003616 <HAL_DMA_Abort+0xd6>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a6b      	ldr	r2, [pc, #428]	; (8003770 <HAL_DMA_Abort+0x230>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d027      	beq.n	8003616 <HAL_DMA_Abort+0xd6>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a6a      	ldr	r2, [pc, #424]	; (8003774 <HAL_DMA_Abort+0x234>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d022      	beq.n	8003616 <HAL_DMA_Abort+0xd6>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a68      	ldr	r2, [pc, #416]	; (8003778 <HAL_DMA_Abort+0x238>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d01d      	beq.n	8003616 <HAL_DMA_Abort+0xd6>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a67      	ldr	r2, [pc, #412]	; (800377c <HAL_DMA_Abort+0x23c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d018      	beq.n	8003616 <HAL_DMA_Abort+0xd6>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a65      	ldr	r2, [pc, #404]	; (8003780 <HAL_DMA_Abort+0x240>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d013      	beq.n	8003616 <HAL_DMA_Abort+0xd6>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a64      	ldr	r2, [pc, #400]	; (8003784 <HAL_DMA_Abort+0x244>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d00e      	beq.n	8003616 <HAL_DMA_Abort+0xd6>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a62      	ldr	r2, [pc, #392]	; (8003788 <HAL_DMA_Abort+0x248>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d009      	beq.n	8003616 <HAL_DMA_Abort+0xd6>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a61      	ldr	r2, [pc, #388]	; (800378c <HAL_DMA_Abort+0x24c>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d004      	beq.n	8003616 <HAL_DMA_Abort+0xd6>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a5f      	ldr	r2, [pc, #380]	; (8003790 <HAL_DMA_Abort+0x250>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d101      	bne.n	800361a <HAL_DMA_Abort+0xda>
 8003616:	2301      	movs	r3, #1
 8003618:	e000      	b.n	800361c <HAL_DMA_Abort+0xdc>
 800361a:	2300      	movs	r3, #0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d013      	beq.n	8003648 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 021e 	bic.w	r2, r2, #30
 800362e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695a      	ldr	r2, [r3, #20]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800363e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	617b      	str	r3, [r7, #20]
 8003646:	e00a      	b.n	800365e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 020e 	bic.w	r2, r2, #14
 8003656:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a3c      	ldr	r2, [pc, #240]	; (8003754 <HAL_DMA_Abort+0x214>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d072      	beq.n	800374e <HAL_DMA_Abort+0x20e>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a3a      	ldr	r2, [pc, #232]	; (8003758 <HAL_DMA_Abort+0x218>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d06d      	beq.n	800374e <HAL_DMA_Abort+0x20e>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a39      	ldr	r2, [pc, #228]	; (800375c <HAL_DMA_Abort+0x21c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d068      	beq.n	800374e <HAL_DMA_Abort+0x20e>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a37      	ldr	r2, [pc, #220]	; (8003760 <HAL_DMA_Abort+0x220>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d063      	beq.n	800374e <HAL_DMA_Abort+0x20e>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a36      	ldr	r2, [pc, #216]	; (8003764 <HAL_DMA_Abort+0x224>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d05e      	beq.n	800374e <HAL_DMA_Abort+0x20e>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a34      	ldr	r2, [pc, #208]	; (8003768 <HAL_DMA_Abort+0x228>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d059      	beq.n	800374e <HAL_DMA_Abort+0x20e>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a33      	ldr	r2, [pc, #204]	; (800376c <HAL_DMA_Abort+0x22c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d054      	beq.n	800374e <HAL_DMA_Abort+0x20e>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a31      	ldr	r2, [pc, #196]	; (8003770 <HAL_DMA_Abort+0x230>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d04f      	beq.n	800374e <HAL_DMA_Abort+0x20e>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a30      	ldr	r2, [pc, #192]	; (8003774 <HAL_DMA_Abort+0x234>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d04a      	beq.n	800374e <HAL_DMA_Abort+0x20e>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a2e      	ldr	r2, [pc, #184]	; (8003778 <HAL_DMA_Abort+0x238>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d045      	beq.n	800374e <HAL_DMA_Abort+0x20e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a2d      	ldr	r2, [pc, #180]	; (800377c <HAL_DMA_Abort+0x23c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d040      	beq.n	800374e <HAL_DMA_Abort+0x20e>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a2b      	ldr	r2, [pc, #172]	; (8003780 <HAL_DMA_Abort+0x240>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d03b      	beq.n	800374e <HAL_DMA_Abort+0x20e>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a2a      	ldr	r2, [pc, #168]	; (8003784 <HAL_DMA_Abort+0x244>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d036      	beq.n	800374e <HAL_DMA_Abort+0x20e>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a28      	ldr	r2, [pc, #160]	; (8003788 <HAL_DMA_Abort+0x248>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d031      	beq.n	800374e <HAL_DMA_Abort+0x20e>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a27      	ldr	r2, [pc, #156]	; (800378c <HAL_DMA_Abort+0x24c>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d02c      	beq.n	800374e <HAL_DMA_Abort+0x20e>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a25      	ldr	r2, [pc, #148]	; (8003790 <HAL_DMA_Abort+0x250>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d027      	beq.n	800374e <HAL_DMA_Abort+0x20e>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a24      	ldr	r2, [pc, #144]	; (8003794 <HAL_DMA_Abort+0x254>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d022      	beq.n	800374e <HAL_DMA_Abort+0x20e>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a22      	ldr	r2, [pc, #136]	; (8003798 <HAL_DMA_Abort+0x258>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d01d      	beq.n	800374e <HAL_DMA_Abort+0x20e>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a21      	ldr	r2, [pc, #132]	; (800379c <HAL_DMA_Abort+0x25c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d018      	beq.n	800374e <HAL_DMA_Abort+0x20e>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a1f      	ldr	r2, [pc, #124]	; (80037a0 <HAL_DMA_Abort+0x260>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d013      	beq.n	800374e <HAL_DMA_Abort+0x20e>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a1e      	ldr	r2, [pc, #120]	; (80037a4 <HAL_DMA_Abort+0x264>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d00e      	beq.n	800374e <HAL_DMA_Abort+0x20e>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a1c      	ldr	r2, [pc, #112]	; (80037a8 <HAL_DMA_Abort+0x268>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d009      	beq.n	800374e <HAL_DMA_Abort+0x20e>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a1b      	ldr	r2, [pc, #108]	; (80037ac <HAL_DMA_Abort+0x26c>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d004      	beq.n	800374e <HAL_DMA_Abort+0x20e>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a19      	ldr	r2, [pc, #100]	; (80037b0 <HAL_DMA_Abort+0x270>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d132      	bne.n	80037b4 <HAL_DMA_Abort+0x274>
 800374e:	2301      	movs	r3, #1
 8003750:	e031      	b.n	80037b6 <HAL_DMA_Abort+0x276>
 8003752:	bf00      	nop
 8003754:	40020010 	.word	0x40020010
 8003758:	40020028 	.word	0x40020028
 800375c:	40020040 	.word	0x40020040
 8003760:	40020058 	.word	0x40020058
 8003764:	40020070 	.word	0x40020070
 8003768:	40020088 	.word	0x40020088
 800376c:	400200a0 	.word	0x400200a0
 8003770:	400200b8 	.word	0x400200b8
 8003774:	40020410 	.word	0x40020410
 8003778:	40020428 	.word	0x40020428
 800377c:	40020440 	.word	0x40020440
 8003780:	40020458 	.word	0x40020458
 8003784:	40020470 	.word	0x40020470
 8003788:	40020488 	.word	0x40020488
 800378c:	400204a0 	.word	0x400204a0
 8003790:	400204b8 	.word	0x400204b8
 8003794:	58025408 	.word	0x58025408
 8003798:	5802541c 	.word	0x5802541c
 800379c:	58025430 	.word	0x58025430
 80037a0:	58025444 	.word	0x58025444
 80037a4:	58025458 	.word	0x58025458
 80037a8:	5802546c 	.word	0x5802546c
 80037ac:	58025480 	.word	0x58025480
 80037b0:	58025494 	.word	0x58025494
 80037b4:	2300      	movs	r3, #0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d007      	beq.n	80037ca <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a6d      	ldr	r2, [pc, #436]	; (8003984 <HAL_DMA_Abort+0x444>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d04a      	beq.n	800386a <HAL_DMA_Abort+0x32a>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a6b      	ldr	r2, [pc, #428]	; (8003988 <HAL_DMA_Abort+0x448>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d045      	beq.n	800386a <HAL_DMA_Abort+0x32a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a6a      	ldr	r2, [pc, #424]	; (800398c <HAL_DMA_Abort+0x44c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d040      	beq.n	800386a <HAL_DMA_Abort+0x32a>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a68      	ldr	r2, [pc, #416]	; (8003990 <HAL_DMA_Abort+0x450>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d03b      	beq.n	800386a <HAL_DMA_Abort+0x32a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a67      	ldr	r2, [pc, #412]	; (8003994 <HAL_DMA_Abort+0x454>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d036      	beq.n	800386a <HAL_DMA_Abort+0x32a>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a65      	ldr	r2, [pc, #404]	; (8003998 <HAL_DMA_Abort+0x458>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d031      	beq.n	800386a <HAL_DMA_Abort+0x32a>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a64      	ldr	r2, [pc, #400]	; (800399c <HAL_DMA_Abort+0x45c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d02c      	beq.n	800386a <HAL_DMA_Abort+0x32a>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a62      	ldr	r2, [pc, #392]	; (80039a0 <HAL_DMA_Abort+0x460>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d027      	beq.n	800386a <HAL_DMA_Abort+0x32a>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a61      	ldr	r2, [pc, #388]	; (80039a4 <HAL_DMA_Abort+0x464>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d022      	beq.n	800386a <HAL_DMA_Abort+0x32a>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a5f      	ldr	r2, [pc, #380]	; (80039a8 <HAL_DMA_Abort+0x468>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d01d      	beq.n	800386a <HAL_DMA_Abort+0x32a>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a5e      	ldr	r2, [pc, #376]	; (80039ac <HAL_DMA_Abort+0x46c>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d018      	beq.n	800386a <HAL_DMA_Abort+0x32a>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a5c      	ldr	r2, [pc, #368]	; (80039b0 <HAL_DMA_Abort+0x470>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d013      	beq.n	800386a <HAL_DMA_Abort+0x32a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a5b      	ldr	r2, [pc, #364]	; (80039b4 <HAL_DMA_Abort+0x474>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d00e      	beq.n	800386a <HAL_DMA_Abort+0x32a>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a59      	ldr	r2, [pc, #356]	; (80039b8 <HAL_DMA_Abort+0x478>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d009      	beq.n	800386a <HAL_DMA_Abort+0x32a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a58      	ldr	r2, [pc, #352]	; (80039bc <HAL_DMA_Abort+0x47c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d004      	beq.n	800386a <HAL_DMA_Abort+0x32a>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a56      	ldr	r2, [pc, #344]	; (80039c0 <HAL_DMA_Abort+0x480>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d108      	bne.n	800387c <HAL_DMA_Abort+0x33c>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0201 	bic.w	r2, r2, #1
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	e007      	b.n	800388c <HAL_DMA_Abort+0x34c>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0201 	bic.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800388c:	e013      	b.n	80038b6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800388e:	f7fe fb49 	bl	8001f24 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b05      	cmp	r3, #5
 800389a:	d90c      	bls.n	80038b6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2220      	movs	r2, #32
 80038a0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2203      	movs	r2, #3
 80038a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e12d      	b.n	8003b12 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1e5      	bne.n	800388e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a2f      	ldr	r2, [pc, #188]	; (8003984 <HAL_DMA_Abort+0x444>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d04a      	beq.n	8003962 <HAL_DMA_Abort+0x422>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a2d      	ldr	r2, [pc, #180]	; (8003988 <HAL_DMA_Abort+0x448>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d045      	beq.n	8003962 <HAL_DMA_Abort+0x422>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a2c      	ldr	r2, [pc, #176]	; (800398c <HAL_DMA_Abort+0x44c>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d040      	beq.n	8003962 <HAL_DMA_Abort+0x422>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a2a      	ldr	r2, [pc, #168]	; (8003990 <HAL_DMA_Abort+0x450>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d03b      	beq.n	8003962 <HAL_DMA_Abort+0x422>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a29      	ldr	r2, [pc, #164]	; (8003994 <HAL_DMA_Abort+0x454>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d036      	beq.n	8003962 <HAL_DMA_Abort+0x422>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a27      	ldr	r2, [pc, #156]	; (8003998 <HAL_DMA_Abort+0x458>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d031      	beq.n	8003962 <HAL_DMA_Abort+0x422>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a26      	ldr	r2, [pc, #152]	; (800399c <HAL_DMA_Abort+0x45c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d02c      	beq.n	8003962 <HAL_DMA_Abort+0x422>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a24      	ldr	r2, [pc, #144]	; (80039a0 <HAL_DMA_Abort+0x460>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d027      	beq.n	8003962 <HAL_DMA_Abort+0x422>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a23      	ldr	r2, [pc, #140]	; (80039a4 <HAL_DMA_Abort+0x464>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d022      	beq.n	8003962 <HAL_DMA_Abort+0x422>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a21      	ldr	r2, [pc, #132]	; (80039a8 <HAL_DMA_Abort+0x468>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d01d      	beq.n	8003962 <HAL_DMA_Abort+0x422>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a20      	ldr	r2, [pc, #128]	; (80039ac <HAL_DMA_Abort+0x46c>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d018      	beq.n	8003962 <HAL_DMA_Abort+0x422>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a1e      	ldr	r2, [pc, #120]	; (80039b0 <HAL_DMA_Abort+0x470>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d013      	beq.n	8003962 <HAL_DMA_Abort+0x422>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a1d      	ldr	r2, [pc, #116]	; (80039b4 <HAL_DMA_Abort+0x474>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d00e      	beq.n	8003962 <HAL_DMA_Abort+0x422>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a1b      	ldr	r2, [pc, #108]	; (80039b8 <HAL_DMA_Abort+0x478>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d009      	beq.n	8003962 <HAL_DMA_Abort+0x422>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a1a      	ldr	r2, [pc, #104]	; (80039bc <HAL_DMA_Abort+0x47c>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d004      	beq.n	8003962 <HAL_DMA_Abort+0x422>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a18      	ldr	r2, [pc, #96]	; (80039c0 <HAL_DMA_Abort+0x480>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d101      	bne.n	8003966 <HAL_DMA_Abort+0x426>
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <HAL_DMA_Abort+0x428>
 8003966:	2300      	movs	r3, #0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d02b      	beq.n	80039c4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003970:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003976:	f003 031f 	and.w	r3, r3, #31
 800397a:	223f      	movs	r2, #63	; 0x3f
 800397c:	409a      	lsls	r2, r3
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	609a      	str	r2, [r3, #8]
 8003982:	e02a      	b.n	80039da <HAL_DMA_Abort+0x49a>
 8003984:	40020010 	.word	0x40020010
 8003988:	40020028 	.word	0x40020028
 800398c:	40020040 	.word	0x40020040
 8003990:	40020058 	.word	0x40020058
 8003994:	40020070 	.word	0x40020070
 8003998:	40020088 	.word	0x40020088
 800399c:	400200a0 	.word	0x400200a0
 80039a0:	400200b8 	.word	0x400200b8
 80039a4:	40020410 	.word	0x40020410
 80039a8:	40020428 	.word	0x40020428
 80039ac:	40020440 	.word	0x40020440
 80039b0:	40020458 	.word	0x40020458
 80039b4:	40020470 	.word	0x40020470
 80039b8:	40020488 	.word	0x40020488
 80039bc:	400204a0 	.word	0x400204a0
 80039c0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ce:	f003 031f 	and.w	r3, r3, #31
 80039d2:	2201      	movs	r2, #1
 80039d4:	409a      	lsls	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a4f      	ldr	r2, [pc, #316]	; (8003b1c <HAL_DMA_Abort+0x5dc>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d072      	beq.n	8003aca <HAL_DMA_Abort+0x58a>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a4d      	ldr	r2, [pc, #308]	; (8003b20 <HAL_DMA_Abort+0x5e0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d06d      	beq.n	8003aca <HAL_DMA_Abort+0x58a>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a4c      	ldr	r2, [pc, #304]	; (8003b24 <HAL_DMA_Abort+0x5e4>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d068      	beq.n	8003aca <HAL_DMA_Abort+0x58a>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a4a      	ldr	r2, [pc, #296]	; (8003b28 <HAL_DMA_Abort+0x5e8>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d063      	beq.n	8003aca <HAL_DMA_Abort+0x58a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a49      	ldr	r2, [pc, #292]	; (8003b2c <HAL_DMA_Abort+0x5ec>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d05e      	beq.n	8003aca <HAL_DMA_Abort+0x58a>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a47      	ldr	r2, [pc, #284]	; (8003b30 <HAL_DMA_Abort+0x5f0>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d059      	beq.n	8003aca <HAL_DMA_Abort+0x58a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a46      	ldr	r2, [pc, #280]	; (8003b34 <HAL_DMA_Abort+0x5f4>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d054      	beq.n	8003aca <HAL_DMA_Abort+0x58a>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a44      	ldr	r2, [pc, #272]	; (8003b38 <HAL_DMA_Abort+0x5f8>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d04f      	beq.n	8003aca <HAL_DMA_Abort+0x58a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a43      	ldr	r2, [pc, #268]	; (8003b3c <HAL_DMA_Abort+0x5fc>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d04a      	beq.n	8003aca <HAL_DMA_Abort+0x58a>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a41      	ldr	r2, [pc, #260]	; (8003b40 <HAL_DMA_Abort+0x600>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d045      	beq.n	8003aca <HAL_DMA_Abort+0x58a>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a40      	ldr	r2, [pc, #256]	; (8003b44 <HAL_DMA_Abort+0x604>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d040      	beq.n	8003aca <HAL_DMA_Abort+0x58a>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a3e      	ldr	r2, [pc, #248]	; (8003b48 <HAL_DMA_Abort+0x608>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d03b      	beq.n	8003aca <HAL_DMA_Abort+0x58a>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a3d      	ldr	r2, [pc, #244]	; (8003b4c <HAL_DMA_Abort+0x60c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d036      	beq.n	8003aca <HAL_DMA_Abort+0x58a>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a3b      	ldr	r2, [pc, #236]	; (8003b50 <HAL_DMA_Abort+0x610>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d031      	beq.n	8003aca <HAL_DMA_Abort+0x58a>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a3a      	ldr	r2, [pc, #232]	; (8003b54 <HAL_DMA_Abort+0x614>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d02c      	beq.n	8003aca <HAL_DMA_Abort+0x58a>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a38      	ldr	r2, [pc, #224]	; (8003b58 <HAL_DMA_Abort+0x618>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d027      	beq.n	8003aca <HAL_DMA_Abort+0x58a>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a37      	ldr	r2, [pc, #220]	; (8003b5c <HAL_DMA_Abort+0x61c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d022      	beq.n	8003aca <HAL_DMA_Abort+0x58a>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a35      	ldr	r2, [pc, #212]	; (8003b60 <HAL_DMA_Abort+0x620>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d01d      	beq.n	8003aca <HAL_DMA_Abort+0x58a>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a34      	ldr	r2, [pc, #208]	; (8003b64 <HAL_DMA_Abort+0x624>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d018      	beq.n	8003aca <HAL_DMA_Abort+0x58a>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a32      	ldr	r2, [pc, #200]	; (8003b68 <HAL_DMA_Abort+0x628>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d013      	beq.n	8003aca <HAL_DMA_Abort+0x58a>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a31      	ldr	r2, [pc, #196]	; (8003b6c <HAL_DMA_Abort+0x62c>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d00e      	beq.n	8003aca <HAL_DMA_Abort+0x58a>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a2f      	ldr	r2, [pc, #188]	; (8003b70 <HAL_DMA_Abort+0x630>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d009      	beq.n	8003aca <HAL_DMA_Abort+0x58a>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a2e      	ldr	r2, [pc, #184]	; (8003b74 <HAL_DMA_Abort+0x634>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d004      	beq.n	8003aca <HAL_DMA_Abort+0x58a>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a2c      	ldr	r2, [pc, #176]	; (8003b78 <HAL_DMA_Abort+0x638>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d101      	bne.n	8003ace <HAL_DMA_Abort+0x58e>
 8003aca:	2301      	movs	r3, #1
 8003acc:	e000      	b.n	8003ad0 <HAL_DMA_Abort+0x590>
 8003ace:	2300      	movs	r3, #0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d015      	beq.n	8003b00 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003adc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00c      	beq.n	8003b00 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003af0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003af4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003afe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40020010 	.word	0x40020010
 8003b20:	40020028 	.word	0x40020028
 8003b24:	40020040 	.word	0x40020040
 8003b28:	40020058 	.word	0x40020058
 8003b2c:	40020070 	.word	0x40020070
 8003b30:	40020088 	.word	0x40020088
 8003b34:	400200a0 	.word	0x400200a0
 8003b38:	400200b8 	.word	0x400200b8
 8003b3c:	40020410 	.word	0x40020410
 8003b40:	40020428 	.word	0x40020428
 8003b44:	40020440 	.word	0x40020440
 8003b48:	40020458 	.word	0x40020458
 8003b4c:	40020470 	.word	0x40020470
 8003b50:	40020488 	.word	0x40020488
 8003b54:	400204a0 	.word	0x400204a0
 8003b58:	400204b8 	.word	0x400204b8
 8003b5c:	58025408 	.word	0x58025408
 8003b60:	5802541c 	.word	0x5802541c
 8003b64:	58025430 	.word	0x58025430
 8003b68:	58025444 	.word	0x58025444
 8003b6c:	58025458 	.word	0x58025458
 8003b70:	5802546c 	.word	0x5802546c
 8003b74:	58025480 	.word	0x58025480
 8003b78:	58025494 	.word	0x58025494

08003b7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e237      	b.n	8003ffe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d004      	beq.n	8003ba4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2280      	movs	r2, #128	; 0x80
 8003b9e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e22c      	b.n	8003ffe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a5c      	ldr	r2, [pc, #368]	; (8003d1c <HAL_DMA_Abort_IT+0x1a0>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d04a      	beq.n	8003c44 <HAL_DMA_Abort_IT+0xc8>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a5b      	ldr	r2, [pc, #364]	; (8003d20 <HAL_DMA_Abort_IT+0x1a4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d045      	beq.n	8003c44 <HAL_DMA_Abort_IT+0xc8>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a59      	ldr	r2, [pc, #356]	; (8003d24 <HAL_DMA_Abort_IT+0x1a8>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d040      	beq.n	8003c44 <HAL_DMA_Abort_IT+0xc8>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a58      	ldr	r2, [pc, #352]	; (8003d28 <HAL_DMA_Abort_IT+0x1ac>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d03b      	beq.n	8003c44 <HAL_DMA_Abort_IT+0xc8>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a56      	ldr	r2, [pc, #344]	; (8003d2c <HAL_DMA_Abort_IT+0x1b0>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d036      	beq.n	8003c44 <HAL_DMA_Abort_IT+0xc8>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a55      	ldr	r2, [pc, #340]	; (8003d30 <HAL_DMA_Abort_IT+0x1b4>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d031      	beq.n	8003c44 <HAL_DMA_Abort_IT+0xc8>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a53      	ldr	r2, [pc, #332]	; (8003d34 <HAL_DMA_Abort_IT+0x1b8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d02c      	beq.n	8003c44 <HAL_DMA_Abort_IT+0xc8>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a52      	ldr	r2, [pc, #328]	; (8003d38 <HAL_DMA_Abort_IT+0x1bc>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d027      	beq.n	8003c44 <HAL_DMA_Abort_IT+0xc8>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a50      	ldr	r2, [pc, #320]	; (8003d3c <HAL_DMA_Abort_IT+0x1c0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d022      	beq.n	8003c44 <HAL_DMA_Abort_IT+0xc8>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a4f      	ldr	r2, [pc, #316]	; (8003d40 <HAL_DMA_Abort_IT+0x1c4>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d01d      	beq.n	8003c44 <HAL_DMA_Abort_IT+0xc8>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a4d      	ldr	r2, [pc, #308]	; (8003d44 <HAL_DMA_Abort_IT+0x1c8>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d018      	beq.n	8003c44 <HAL_DMA_Abort_IT+0xc8>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a4c      	ldr	r2, [pc, #304]	; (8003d48 <HAL_DMA_Abort_IT+0x1cc>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d013      	beq.n	8003c44 <HAL_DMA_Abort_IT+0xc8>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a4a      	ldr	r2, [pc, #296]	; (8003d4c <HAL_DMA_Abort_IT+0x1d0>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d00e      	beq.n	8003c44 <HAL_DMA_Abort_IT+0xc8>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a49      	ldr	r2, [pc, #292]	; (8003d50 <HAL_DMA_Abort_IT+0x1d4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d009      	beq.n	8003c44 <HAL_DMA_Abort_IT+0xc8>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a47      	ldr	r2, [pc, #284]	; (8003d54 <HAL_DMA_Abort_IT+0x1d8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d004      	beq.n	8003c44 <HAL_DMA_Abort_IT+0xc8>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a46      	ldr	r2, [pc, #280]	; (8003d58 <HAL_DMA_Abort_IT+0x1dc>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d101      	bne.n	8003c48 <HAL_DMA_Abort_IT+0xcc>
 8003c44:	2301      	movs	r3, #1
 8003c46:	e000      	b.n	8003c4a <HAL_DMA_Abort_IT+0xce>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 8086 	beq.w	8003d5c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2204      	movs	r2, #4
 8003c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a2f      	ldr	r2, [pc, #188]	; (8003d1c <HAL_DMA_Abort_IT+0x1a0>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d04a      	beq.n	8003cf8 <HAL_DMA_Abort_IT+0x17c>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a2e      	ldr	r2, [pc, #184]	; (8003d20 <HAL_DMA_Abort_IT+0x1a4>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d045      	beq.n	8003cf8 <HAL_DMA_Abort_IT+0x17c>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a2c      	ldr	r2, [pc, #176]	; (8003d24 <HAL_DMA_Abort_IT+0x1a8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d040      	beq.n	8003cf8 <HAL_DMA_Abort_IT+0x17c>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a2b      	ldr	r2, [pc, #172]	; (8003d28 <HAL_DMA_Abort_IT+0x1ac>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d03b      	beq.n	8003cf8 <HAL_DMA_Abort_IT+0x17c>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a29      	ldr	r2, [pc, #164]	; (8003d2c <HAL_DMA_Abort_IT+0x1b0>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d036      	beq.n	8003cf8 <HAL_DMA_Abort_IT+0x17c>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a28      	ldr	r2, [pc, #160]	; (8003d30 <HAL_DMA_Abort_IT+0x1b4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d031      	beq.n	8003cf8 <HAL_DMA_Abort_IT+0x17c>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a26      	ldr	r2, [pc, #152]	; (8003d34 <HAL_DMA_Abort_IT+0x1b8>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d02c      	beq.n	8003cf8 <HAL_DMA_Abort_IT+0x17c>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a25      	ldr	r2, [pc, #148]	; (8003d38 <HAL_DMA_Abort_IT+0x1bc>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d027      	beq.n	8003cf8 <HAL_DMA_Abort_IT+0x17c>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a23      	ldr	r2, [pc, #140]	; (8003d3c <HAL_DMA_Abort_IT+0x1c0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d022      	beq.n	8003cf8 <HAL_DMA_Abort_IT+0x17c>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a22      	ldr	r2, [pc, #136]	; (8003d40 <HAL_DMA_Abort_IT+0x1c4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d01d      	beq.n	8003cf8 <HAL_DMA_Abort_IT+0x17c>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a20      	ldr	r2, [pc, #128]	; (8003d44 <HAL_DMA_Abort_IT+0x1c8>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d018      	beq.n	8003cf8 <HAL_DMA_Abort_IT+0x17c>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a1f      	ldr	r2, [pc, #124]	; (8003d48 <HAL_DMA_Abort_IT+0x1cc>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d013      	beq.n	8003cf8 <HAL_DMA_Abort_IT+0x17c>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a1d      	ldr	r2, [pc, #116]	; (8003d4c <HAL_DMA_Abort_IT+0x1d0>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d00e      	beq.n	8003cf8 <HAL_DMA_Abort_IT+0x17c>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a1c      	ldr	r2, [pc, #112]	; (8003d50 <HAL_DMA_Abort_IT+0x1d4>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d009      	beq.n	8003cf8 <HAL_DMA_Abort_IT+0x17c>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a1a      	ldr	r2, [pc, #104]	; (8003d54 <HAL_DMA_Abort_IT+0x1d8>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d004      	beq.n	8003cf8 <HAL_DMA_Abort_IT+0x17c>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a19      	ldr	r2, [pc, #100]	; (8003d58 <HAL_DMA_Abort_IT+0x1dc>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d108      	bne.n	8003d0a <HAL_DMA_Abort_IT+0x18e>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0201 	bic.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	e178      	b.n	8003ffc <HAL_DMA_Abort_IT+0x480>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0201 	bic.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	e16f      	b.n	8003ffc <HAL_DMA_Abort_IT+0x480>
 8003d1c:	40020010 	.word	0x40020010
 8003d20:	40020028 	.word	0x40020028
 8003d24:	40020040 	.word	0x40020040
 8003d28:	40020058 	.word	0x40020058
 8003d2c:	40020070 	.word	0x40020070
 8003d30:	40020088 	.word	0x40020088
 8003d34:	400200a0 	.word	0x400200a0
 8003d38:	400200b8 	.word	0x400200b8
 8003d3c:	40020410 	.word	0x40020410
 8003d40:	40020428 	.word	0x40020428
 8003d44:	40020440 	.word	0x40020440
 8003d48:	40020458 	.word	0x40020458
 8003d4c:	40020470 	.word	0x40020470
 8003d50:	40020488 	.word	0x40020488
 8003d54:	400204a0 	.word	0x400204a0
 8003d58:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 020e 	bic.w	r2, r2, #14
 8003d6a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a6c      	ldr	r2, [pc, #432]	; (8003f24 <HAL_DMA_Abort_IT+0x3a8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d04a      	beq.n	8003e0c <HAL_DMA_Abort_IT+0x290>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a6b      	ldr	r2, [pc, #428]	; (8003f28 <HAL_DMA_Abort_IT+0x3ac>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d045      	beq.n	8003e0c <HAL_DMA_Abort_IT+0x290>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a69      	ldr	r2, [pc, #420]	; (8003f2c <HAL_DMA_Abort_IT+0x3b0>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d040      	beq.n	8003e0c <HAL_DMA_Abort_IT+0x290>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a68      	ldr	r2, [pc, #416]	; (8003f30 <HAL_DMA_Abort_IT+0x3b4>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d03b      	beq.n	8003e0c <HAL_DMA_Abort_IT+0x290>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a66      	ldr	r2, [pc, #408]	; (8003f34 <HAL_DMA_Abort_IT+0x3b8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d036      	beq.n	8003e0c <HAL_DMA_Abort_IT+0x290>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a65      	ldr	r2, [pc, #404]	; (8003f38 <HAL_DMA_Abort_IT+0x3bc>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d031      	beq.n	8003e0c <HAL_DMA_Abort_IT+0x290>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a63      	ldr	r2, [pc, #396]	; (8003f3c <HAL_DMA_Abort_IT+0x3c0>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d02c      	beq.n	8003e0c <HAL_DMA_Abort_IT+0x290>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a62      	ldr	r2, [pc, #392]	; (8003f40 <HAL_DMA_Abort_IT+0x3c4>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d027      	beq.n	8003e0c <HAL_DMA_Abort_IT+0x290>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a60      	ldr	r2, [pc, #384]	; (8003f44 <HAL_DMA_Abort_IT+0x3c8>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d022      	beq.n	8003e0c <HAL_DMA_Abort_IT+0x290>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a5f      	ldr	r2, [pc, #380]	; (8003f48 <HAL_DMA_Abort_IT+0x3cc>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d01d      	beq.n	8003e0c <HAL_DMA_Abort_IT+0x290>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a5d      	ldr	r2, [pc, #372]	; (8003f4c <HAL_DMA_Abort_IT+0x3d0>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d018      	beq.n	8003e0c <HAL_DMA_Abort_IT+0x290>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a5c      	ldr	r2, [pc, #368]	; (8003f50 <HAL_DMA_Abort_IT+0x3d4>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d013      	beq.n	8003e0c <HAL_DMA_Abort_IT+0x290>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a5a      	ldr	r2, [pc, #360]	; (8003f54 <HAL_DMA_Abort_IT+0x3d8>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d00e      	beq.n	8003e0c <HAL_DMA_Abort_IT+0x290>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a59      	ldr	r2, [pc, #356]	; (8003f58 <HAL_DMA_Abort_IT+0x3dc>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d009      	beq.n	8003e0c <HAL_DMA_Abort_IT+0x290>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a57      	ldr	r2, [pc, #348]	; (8003f5c <HAL_DMA_Abort_IT+0x3e0>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d004      	beq.n	8003e0c <HAL_DMA_Abort_IT+0x290>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a56      	ldr	r2, [pc, #344]	; (8003f60 <HAL_DMA_Abort_IT+0x3e4>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d108      	bne.n	8003e1e <HAL_DMA_Abort_IT+0x2a2>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0201 	bic.w	r2, r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	e007      	b.n	8003e2e <HAL_DMA_Abort_IT+0x2b2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0201 	bic.w	r2, r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a3c      	ldr	r2, [pc, #240]	; (8003f24 <HAL_DMA_Abort_IT+0x3a8>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d072      	beq.n	8003f1e <HAL_DMA_Abort_IT+0x3a2>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a3a      	ldr	r2, [pc, #232]	; (8003f28 <HAL_DMA_Abort_IT+0x3ac>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d06d      	beq.n	8003f1e <HAL_DMA_Abort_IT+0x3a2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a39      	ldr	r2, [pc, #228]	; (8003f2c <HAL_DMA_Abort_IT+0x3b0>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d068      	beq.n	8003f1e <HAL_DMA_Abort_IT+0x3a2>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a37      	ldr	r2, [pc, #220]	; (8003f30 <HAL_DMA_Abort_IT+0x3b4>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d063      	beq.n	8003f1e <HAL_DMA_Abort_IT+0x3a2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a36      	ldr	r2, [pc, #216]	; (8003f34 <HAL_DMA_Abort_IT+0x3b8>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d05e      	beq.n	8003f1e <HAL_DMA_Abort_IT+0x3a2>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a34      	ldr	r2, [pc, #208]	; (8003f38 <HAL_DMA_Abort_IT+0x3bc>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d059      	beq.n	8003f1e <HAL_DMA_Abort_IT+0x3a2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a33      	ldr	r2, [pc, #204]	; (8003f3c <HAL_DMA_Abort_IT+0x3c0>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d054      	beq.n	8003f1e <HAL_DMA_Abort_IT+0x3a2>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a31      	ldr	r2, [pc, #196]	; (8003f40 <HAL_DMA_Abort_IT+0x3c4>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d04f      	beq.n	8003f1e <HAL_DMA_Abort_IT+0x3a2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a30      	ldr	r2, [pc, #192]	; (8003f44 <HAL_DMA_Abort_IT+0x3c8>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d04a      	beq.n	8003f1e <HAL_DMA_Abort_IT+0x3a2>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a2e      	ldr	r2, [pc, #184]	; (8003f48 <HAL_DMA_Abort_IT+0x3cc>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d045      	beq.n	8003f1e <HAL_DMA_Abort_IT+0x3a2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a2d      	ldr	r2, [pc, #180]	; (8003f4c <HAL_DMA_Abort_IT+0x3d0>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d040      	beq.n	8003f1e <HAL_DMA_Abort_IT+0x3a2>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a2b      	ldr	r2, [pc, #172]	; (8003f50 <HAL_DMA_Abort_IT+0x3d4>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d03b      	beq.n	8003f1e <HAL_DMA_Abort_IT+0x3a2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a2a      	ldr	r2, [pc, #168]	; (8003f54 <HAL_DMA_Abort_IT+0x3d8>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d036      	beq.n	8003f1e <HAL_DMA_Abort_IT+0x3a2>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a28      	ldr	r2, [pc, #160]	; (8003f58 <HAL_DMA_Abort_IT+0x3dc>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d031      	beq.n	8003f1e <HAL_DMA_Abort_IT+0x3a2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a27      	ldr	r2, [pc, #156]	; (8003f5c <HAL_DMA_Abort_IT+0x3e0>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d02c      	beq.n	8003f1e <HAL_DMA_Abort_IT+0x3a2>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a25      	ldr	r2, [pc, #148]	; (8003f60 <HAL_DMA_Abort_IT+0x3e4>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d027      	beq.n	8003f1e <HAL_DMA_Abort_IT+0x3a2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a24      	ldr	r2, [pc, #144]	; (8003f64 <HAL_DMA_Abort_IT+0x3e8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d022      	beq.n	8003f1e <HAL_DMA_Abort_IT+0x3a2>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a22      	ldr	r2, [pc, #136]	; (8003f68 <HAL_DMA_Abort_IT+0x3ec>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d01d      	beq.n	8003f1e <HAL_DMA_Abort_IT+0x3a2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a21      	ldr	r2, [pc, #132]	; (8003f6c <HAL_DMA_Abort_IT+0x3f0>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d018      	beq.n	8003f1e <HAL_DMA_Abort_IT+0x3a2>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a1f      	ldr	r2, [pc, #124]	; (8003f70 <HAL_DMA_Abort_IT+0x3f4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d013      	beq.n	8003f1e <HAL_DMA_Abort_IT+0x3a2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a1e      	ldr	r2, [pc, #120]	; (8003f74 <HAL_DMA_Abort_IT+0x3f8>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d00e      	beq.n	8003f1e <HAL_DMA_Abort_IT+0x3a2>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a1c      	ldr	r2, [pc, #112]	; (8003f78 <HAL_DMA_Abort_IT+0x3fc>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d009      	beq.n	8003f1e <HAL_DMA_Abort_IT+0x3a2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a1b      	ldr	r2, [pc, #108]	; (8003f7c <HAL_DMA_Abort_IT+0x400>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d004      	beq.n	8003f1e <HAL_DMA_Abort_IT+0x3a2>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a19      	ldr	r2, [pc, #100]	; (8003f80 <HAL_DMA_Abort_IT+0x404>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d132      	bne.n	8003f84 <HAL_DMA_Abort_IT+0x408>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e031      	b.n	8003f86 <HAL_DMA_Abort_IT+0x40a>
 8003f22:	bf00      	nop
 8003f24:	40020010 	.word	0x40020010
 8003f28:	40020028 	.word	0x40020028
 8003f2c:	40020040 	.word	0x40020040
 8003f30:	40020058 	.word	0x40020058
 8003f34:	40020070 	.word	0x40020070
 8003f38:	40020088 	.word	0x40020088
 8003f3c:	400200a0 	.word	0x400200a0
 8003f40:	400200b8 	.word	0x400200b8
 8003f44:	40020410 	.word	0x40020410
 8003f48:	40020428 	.word	0x40020428
 8003f4c:	40020440 	.word	0x40020440
 8003f50:	40020458 	.word	0x40020458
 8003f54:	40020470 	.word	0x40020470
 8003f58:	40020488 	.word	0x40020488
 8003f5c:	400204a0 	.word	0x400204a0
 8003f60:	400204b8 	.word	0x400204b8
 8003f64:	58025408 	.word	0x58025408
 8003f68:	5802541c 	.word	0x5802541c
 8003f6c:	58025430 	.word	0x58025430
 8003f70:	58025444 	.word	0x58025444
 8003f74:	58025458 	.word	0x58025458
 8003f78:	5802546c 	.word	0x5802546c
 8003f7c:	58025480 	.word	0x58025480
 8003f80:	58025494 	.word	0x58025494
 8003f84:	2300      	movs	r3, #0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d028      	beq.n	8003fdc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f98:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa4:	f003 031f 	and.w	r3, r3, #31
 8003fa8:	2201      	movs	r2, #1
 8003faa:	409a      	lsls	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003fb8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00c      	beq.n	8003fdc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fd0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003fda:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d003      	beq.n	8003ffc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop

08004008 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004008:	b480      	push	{r7}
 800400a:	b089      	sub	sp, #36	; 0x24
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004012:	2300      	movs	r3, #0
 8004014:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004016:	4b89      	ldr	r3, [pc, #548]	; (800423c <HAL_GPIO_Init+0x234>)
 8004018:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800401a:	e194      	b.n	8004346 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	2101      	movs	r1, #1
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	fa01 f303 	lsl.w	r3, r1, r3
 8004028:	4013      	ands	r3, r2
 800402a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 8186 	beq.w	8004340 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f003 0303 	and.w	r3, r3, #3
 800403c:	2b01      	cmp	r3, #1
 800403e:	d005      	beq.n	800404c <HAL_GPIO_Init+0x44>
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f003 0303 	and.w	r3, r3, #3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d130      	bne.n	80040ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	2203      	movs	r2, #3
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	43db      	mvns	r3, r3
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	4013      	ands	r3, r2
 8004062:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	4313      	orrs	r3, r2
 8004074:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004082:	2201      	movs	r2, #1
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	43db      	mvns	r3, r3
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	4013      	ands	r3, r2
 8004090:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	091b      	lsrs	r3, r3, #4
 8004098:	f003 0201 	and.w	r2, r3, #1
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	2b03      	cmp	r3, #3
 80040b8:	d017      	beq.n	80040ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	2203      	movs	r2, #3
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	43db      	mvns	r3, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	4013      	ands	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d123      	bne.n	800413e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	08da      	lsrs	r2, r3, #3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	3208      	adds	r2, #8
 80040fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	220f      	movs	r2, #15
 800410e:	fa02 f303 	lsl.w	r3, r2, r3
 8004112:	43db      	mvns	r3, r3
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	4013      	ands	r3, r2
 8004118:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	691a      	ldr	r2, [r3, #16]
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	4313      	orrs	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	08da      	lsrs	r2, r3, #3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3208      	adds	r2, #8
 8004138:	69b9      	ldr	r1, [r7, #24]
 800413a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	2203      	movs	r2, #3
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	43db      	mvns	r3, r3
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	4013      	ands	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f003 0203 	and.w	r2, r3, #3
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	fa02 f303 	lsl.w	r3, r2, r3
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	4313      	orrs	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800417a:	2b00      	cmp	r3, #0
 800417c:	f000 80e0 	beq.w	8004340 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004180:	4b2f      	ldr	r3, [pc, #188]	; (8004240 <HAL_GPIO_Init+0x238>)
 8004182:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004186:	4a2e      	ldr	r2, [pc, #184]	; (8004240 <HAL_GPIO_Init+0x238>)
 8004188:	f043 0302 	orr.w	r3, r3, #2
 800418c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8004190:	4b2b      	ldr	r3, [pc, #172]	; (8004240 <HAL_GPIO_Init+0x238>)
 8004192:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800419e:	4a29      	ldr	r2, [pc, #164]	; (8004244 <HAL_GPIO_Init+0x23c>)
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	089b      	lsrs	r3, r3, #2
 80041a4:	3302      	adds	r3, #2
 80041a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	220f      	movs	r2, #15
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	43db      	mvns	r3, r3
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	4013      	ands	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a20      	ldr	r2, [pc, #128]	; (8004248 <HAL_GPIO_Init+0x240>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d052      	beq.n	8004270 <HAL_GPIO_Init+0x268>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a1f      	ldr	r2, [pc, #124]	; (800424c <HAL_GPIO_Init+0x244>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d031      	beq.n	8004236 <HAL_GPIO_Init+0x22e>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a1e      	ldr	r2, [pc, #120]	; (8004250 <HAL_GPIO_Init+0x248>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d02b      	beq.n	8004232 <HAL_GPIO_Init+0x22a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a1d      	ldr	r2, [pc, #116]	; (8004254 <HAL_GPIO_Init+0x24c>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d025      	beq.n	800422e <HAL_GPIO_Init+0x226>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a1c      	ldr	r2, [pc, #112]	; (8004258 <HAL_GPIO_Init+0x250>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d01f      	beq.n	800422a <HAL_GPIO_Init+0x222>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a1b      	ldr	r2, [pc, #108]	; (800425c <HAL_GPIO_Init+0x254>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d019      	beq.n	8004226 <HAL_GPIO_Init+0x21e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a1a      	ldr	r2, [pc, #104]	; (8004260 <HAL_GPIO_Init+0x258>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d013      	beq.n	8004222 <HAL_GPIO_Init+0x21a>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a19      	ldr	r2, [pc, #100]	; (8004264 <HAL_GPIO_Init+0x25c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00d      	beq.n	800421e <HAL_GPIO_Init+0x216>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a18      	ldr	r2, [pc, #96]	; (8004268 <HAL_GPIO_Init+0x260>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d007      	beq.n	800421a <HAL_GPIO_Init+0x212>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a17      	ldr	r2, [pc, #92]	; (800426c <HAL_GPIO_Init+0x264>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d101      	bne.n	8004216 <HAL_GPIO_Init+0x20e>
 8004212:	2309      	movs	r3, #9
 8004214:	e02d      	b.n	8004272 <HAL_GPIO_Init+0x26a>
 8004216:	230a      	movs	r3, #10
 8004218:	e02b      	b.n	8004272 <HAL_GPIO_Init+0x26a>
 800421a:	2308      	movs	r3, #8
 800421c:	e029      	b.n	8004272 <HAL_GPIO_Init+0x26a>
 800421e:	2307      	movs	r3, #7
 8004220:	e027      	b.n	8004272 <HAL_GPIO_Init+0x26a>
 8004222:	2306      	movs	r3, #6
 8004224:	e025      	b.n	8004272 <HAL_GPIO_Init+0x26a>
 8004226:	2305      	movs	r3, #5
 8004228:	e023      	b.n	8004272 <HAL_GPIO_Init+0x26a>
 800422a:	2304      	movs	r3, #4
 800422c:	e021      	b.n	8004272 <HAL_GPIO_Init+0x26a>
 800422e:	2303      	movs	r3, #3
 8004230:	e01f      	b.n	8004272 <HAL_GPIO_Init+0x26a>
 8004232:	2302      	movs	r3, #2
 8004234:	e01d      	b.n	8004272 <HAL_GPIO_Init+0x26a>
 8004236:	2301      	movs	r3, #1
 8004238:	e01b      	b.n	8004272 <HAL_GPIO_Init+0x26a>
 800423a:	bf00      	nop
 800423c:	58000080 	.word	0x58000080
 8004240:	58024400 	.word	0x58024400
 8004244:	58000400 	.word	0x58000400
 8004248:	58020000 	.word	0x58020000
 800424c:	58020400 	.word	0x58020400
 8004250:	58020800 	.word	0x58020800
 8004254:	58020c00 	.word	0x58020c00
 8004258:	58021000 	.word	0x58021000
 800425c:	58021400 	.word	0x58021400
 8004260:	58021800 	.word	0x58021800
 8004264:	58021c00 	.word	0x58021c00
 8004268:	58022000 	.word	0x58022000
 800426c:	58022400 	.word	0x58022400
 8004270:	2300      	movs	r3, #0
 8004272:	69fa      	ldr	r2, [r7, #28]
 8004274:	f002 0203 	and.w	r2, r2, #3
 8004278:	0092      	lsls	r2, r2, #2
 800427a:	4093      	lsls	r3, r2
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	4313      	orrs	r3, r2
 8004280:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004282:	4938      	ldr	r1, [pc, #224]	; (8004364 <HAL_GPIO_Init+0x35c>)
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	089b      	lsrs	r3, r3, #2
 8004288:	3302      	adds	r3, #2
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	43db      	mvns	r3, r3
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	4013      	ands	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80042b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80042be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	43db      	mvns	r3, r3
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	4013      	ands	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80042e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	43db      	mvns	r3, r3
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	4013      	ands	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d003      	beq.n	8004310 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	4313      	orrs	r3, r2
 800430e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	43db      	mvns	r3, r3
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	4013      	ands	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	3301      	adds	r3, #1
 8004344:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	fa22 f303 	lsr.w	r3, r2, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	f47f ae63 	bne.w	800401c <HAL_GPIO_Init+0x14>
  }
}
 8004356:	bf00      	nop
 8004358:	bf00      	nop
 800435a:	3724      	adds	r7, #36	; 0x24
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	58000400 	.word	0x58000400

08004368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	807b      	strh	r3, [r7, #2]
 8004374:	4613      	mov	r3, r2
 8004376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004378:	787b      	ldrb	r3, [r7, #1]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800437e:	887a      	ldrh	r2, [r7, #2]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004384:	e003      	b.n	800438e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004386:	887b      	ldrh	r3, [r7, #2]
 8004388:	041a      	lsls	r2, r3, #16
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	619a      	str	r2, [r3, #24]
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
	...

0800439c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80043a4:	4b29      	ldr	r3, [pc, #164]	; (800444c <HAL_PWREx_ConfigSupply+0xb0>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	2b06      	cmp	r3, #6
 80043ae:	d00a      	beq.n	80043c6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80043b0:	4b26      	ldr	r3, [pc, #152]	; (800444c <HAL_PWREx_ConfigSupply+0xb0>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d001      	beq.n	80043c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e040      	b.n	8004444 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80043c2:	2300      	movs	r3, #0
 80043c4:	e03e      	b.n	8004444 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80043c6:	4b21      	ldr	r3, [pc, #132]	; (800444c <HAL_PWREx_ConfigSupply+0xb0>)
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80043ce:	491f      	ldr	r1, [pc, #124]	; (800444c <HAL_PWREx_ConfigSupply+0xb0>)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80043d6:	f7fd fda5 	bl	8001f24 <HAL_GetTick>
 80043da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80043dc:	e009      	b.n	80043f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80043de:	f7fd fda1 	bl	8001f24 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043ec:	d901      	bls.n	80043f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e028      	b.n	8004444 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80043f2:	4b16      	ldr	r3, [pc, #88]	; (800444c <HAL_PWREx_ConfigSupply+0xb0>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043fe:	d1ee      	bne.n	80043de <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b1e      	cmp	r3, #30
 8004404:	d008      	beq.n	8004418 <HAL_PWREx_ConfigSupply+0x7c>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b2e      	cmp	r3, #46	; 0x2e
 800440a:	d005      	beq.n	8004418 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b1d      	cmp	r3, #29
 8004410:	d002      	beq.n	8004418 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b2d      	cmp	r3, #45	; 0x2d
 8004416:	d114      	bne.n	8004442 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004418:	f7fd fd84 	bl	8001f24 <HAL_GetTick>
 800441c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800441e:	e009      	b.n	8004434 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004420:	f7fd fd80 	bl	8001f24 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800442e:	d901      	bls.n	8004434 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e007      	b.n	8004444 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004434:	4b05      	ldr	r3, [pc, #20]	; (800444c <HAL_PWREx_ConfigSupply+0xb0>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800443c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004440:	d1ee      	bne.n	8004420 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	58024800 	.word	0x58024800

08004450 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b08c      	sub	sp, #48	; 0x30
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d102      	bne.n	8004464 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	f000 bc1f 	b.w	8004ca2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 80b3 	beq.w	80045d8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004472:	4b95      	ldr	r3, [pc, #596]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800447a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800447c:	4b92      	ldr	r3, [pc, #584]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 800447e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004480:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004484:	2b10      	cmp	r3, #16
 8004486:	d007      	beq.n	8004498 <HAL_RCC_OscConfig+0x48>
 8004488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448a:	2b18      	cmp	r3, #24
 800448c:	d112      	bne.n	80044b4 <HAL_RCC_OscConfig+0x64>
 800448e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004490:	f003 0303 	and.w	r3, r3, #3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d10d      	bne.n	80044b4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004498:	4b8b      	ldr	r3, [pc, #556]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 8098 	beq.w	80045d6 <HAL_RCC_OscConfig+0x186>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f040 8093 	bne.w	80045d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e3f6      	b.n	8004ca2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044bc:	d106      	bne.n	80044cc <HAL_RCC_OscConfig+0x7c>
 80044be:	4b82      	ldr	r3, [pc, #520]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a81      	ldr	r2, [pc, #516]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 80044c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c8:	6013      	str	r3, [r2, #0]
 80044ca:	e058      	b.n	800457e <HAL_RCC_OscConfig+0x12e>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d112      	bne.n	80044fa <HAL_RCC_OscConfig+0xaa>
 80044d4:	4b7c      	ldr	r3, [pc, #496]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a7b      	ldr	r2, [pc, #492]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 80044da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	4b79      	ldr	r3, [pc, #484]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a78      	ldr	r2, [pc, #480]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 80044e6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80044ea:	6013      	str	r3, [r2, #0]
 80044ec:	4b76      	ldr	r3, [pc, #472]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a75      	ldr	r2, [pc, #468]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 80044f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044f6:	6013      	str	r3, [r2, #0]
 80044f8:	e041      	b.n	800457e <HAL_RCC_OscConfig+0x12e>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004502:	d112      	bne.n	800452a <HAL_RCC_OscConfig+0xda>
 8004504:	4b70      	ldr	r3, [pc, #448]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a6f      	ldr	r2, [pc, #444]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 800450a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800450e:	6013      	str	r3, [r2, #0]
 8004510:	4b6d      	ldr	r3, [pc, #436]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a6c      	ldr	r2, [pc, #432]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 8004516:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	4b6a      	ldr	r3, [pc, #424]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a69      	ldr	r2, [pc, #420]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 8004522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	e029      	b.n	800457e <HAL_RCC_OscConfig+0x12e>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004532:	d112      	bne.n	800455a <HAL_RCC_OscConfig+0x10a>
 8004534:	4b64      	ldr	r3, [pc, #400]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a63      	ldr	r2, [pc, #396]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 800453a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	4b61      	ldr	r3, [pc, #388]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a60      	ldr	r2, [pc, #384]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 8004546:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	4b5e      	ldr	r3, [pc, #376]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a5d      	ldr	r2, [pc, #372]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 8004552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	e011      	b.n	800457e <HAL_RCC_OscConfig+0x12e>
 800455a:	4b5b      	ldr	r3, [pc, #364]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a5a      	ldr	r2, [pc, #360]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 8004560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	4b58      	ldr	r3, [pc, #352]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a57      	ldr	r2, [pc, #348]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 800456c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	4b55      	ldr	r3, [pc, #340]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a54      	ldr	r2, [pc, #336]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 8004578:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800457c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d013      	beq.n	80045ae <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004586:	f7fd fccd 	bl	8001f24 <HAL_GetTick>
 800458a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800458c:	e008      	b.n	80045a0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800458e:	f7fd fcc9 	bl	8001f24 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b64      	cmp	r3, #100	; 0x64
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e380      	b.n	8004ca2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045a0:	4b49      	ldr	r3, [pc, #292]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d0f0      	beq.n	800458e <HAL_RCC_OscConfig+0x13e>
 80045ac:	e014      	b.n	80045d8 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ae:	f7fd fcb9 	bl	8001f24 <HAL_GetTick>
 80045b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045b4:	e008      	b.n	80045c8 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b6:	f7fd fcb5 	bl	8001f24 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b64      	cmp	r3, #100	; 0x64
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e36c      	b.n	8004ca2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045c8:	4b3f      	ldr	r3, [pc, #252]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1f0      	bne.n	80045b6 <HAL_RCC_OscConfig+0x166>
 80045d4:	e000      	b.n	80045d8 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 808c 	beq.w	80046fe <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045e6:	4b38      	ldr	r3, [pc, #224]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045ee:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80045f0:	4b35      	ldr	r3, [pc, #212]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 80045f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d007      	beq.n	800460c <HAL_RCC_OscConfig+0x1bc>
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	2b18      	cmp	r3, #24
 8004600:	d137      	bne.n	8004672 <HAL_RCC_OscConfig+0x222>
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	f003 0303 	and.w	r3, r3, #3
 8004608:	2b00      	cmp	r3, #0
 800460a:	d132      	bne.n	8004672 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800460c:	4b2e      	ldr	r3, [pc, #184]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b00      	cmp	r3, #0
 8004616:	d005      	beq.n	8004624 <HAL_RCC_OscConfig+0x1d4>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e33e      	b.n	8004ca2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004624:	4b28      	ldr	r3, [pc, #160]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f023 0219 	bic.w	r2, r3, #25
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	4925      	ldr	r1, [pc, #148]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 8004632:	4313      	orrs	r3, r2
 8004634:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004636:	f7fd fc75 	bl	8001f24 <HAL_GetTick>
 800463a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800463c:	e008      	b.n	8004650 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800463e:	f7fd fc71 	bl	8001f24 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e328      	b.n	8004ca2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004650:	4b1d      	ldr	r3, [pc, #116]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0f0      	beq.n	800463e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800465c:	4b1a      	ldr	r3, [pc, #104]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	061b      	lsls	r3, r3, #24
 800466a:	4917      	ldr	r1, [pc, #92]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 800466c:	4313      	orrs	r3, r2
 800466e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004670:	e045      	b.n	80046fe <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d028      	beq.n	80046cc <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800467a:	4b13      	ldr	r3, [pc, #76]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f023 0219 	bic.w	r2, r3, #25
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	4910      	ldr	r1, [pc, #64]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 8004688:	4313      	orrs	r3, r2
 800468a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468c:	f7fd fc4a 	bl	8001f24 <HAL_GetTick>
 8004690:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004694:	f7fd fc46 	bl	8001f24 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e2fd      	b.n	8004ca2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046a6:	4b08      	ldr	r3, [pc, #32]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0304 	and.w	r3, r3, #4
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0f0      	beq.n	8004694 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b2:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	061b      	lsls	r3, r3, #24
 80046c0:	4901      	ldr	r1, [pc, #4]	; (80046c8 <HAL_RCC_OscConfig+0x278>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	604b      	str	r3, [r1, #4]
 80046c6:	e01a      	b.n	80046fe <HAL_RCC_OscConfig+0x2ae>
 80046c8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046cc:	4b97      	ldr	r3, [pc, #604]	; (800492c <HAL_RCC_OscConfig+0x4dc>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a96      	ldr	r2, [pc, #600]	; (800492c <HAL_RCC_OscConfig+0x4dc>)
 80046d2:	f023 0301 	bic.w	r3, r3, #1
 80046d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d8:	f7fd fc24 	bl	8001f24 <HAL_GetTick>
 80046dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046e0:	f7fd fc20 	bl	8001f24 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e2d7      	b.n	8004ca2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046f2:	4b8e      	ldr	r3, [pc, #568]	; (800492c <HAL_RCC_OscConfig+0x4dc>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0304 	and.w	r3, r3, #4
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f0      	bne.n	80046e0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0310 	and.w	r3, r3, #16
 8004706:	2b00      	cmp	r3, #0
 8004708:	d06a      	beq.n	80047e0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800470a:	4b88      	ldr	r3, [pc, #544]	; (800492c <HAL_RCC_OscConfig+0x4dc>)
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004712:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004714:	4b85      	ldr	r3, [pc, #532]	; (800492c <HAL_RCC_OscConfig+0x4dc>)
 8004716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004718:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	2b08      	cmp	r3, #8
 800471e:	d007      	beq.n	8004730 <HAL_RCC_OscConfig+0x2e0>
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	2b18      	cmp	r3, #24
 8004724:	d11b      	bne.n	800475e <HAL_RCC_OscConfig+0x30e>
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f003 0303 	and.w	r3, r3, #3
 800472c:	2b01      	cmp	r3, #1
 800472e:	d116      	bne.n	800475e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004730:	4b7e      	ldr	r3, [pc, #504]	; (800492c <HAL_RCC_OscConfig+0x4dc>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004738:	2b00      	cmp	r3, #0
 800473a:	d005      	beq.n	8004748 <HAL_RCC_OscConfig+0x2f8>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	2b80      	cmp	r3, #128	; 0x80
 8004742:	d001      	beq.n	8004748 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e2ac      	b.n	8004ca2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004748:	4b78      	ldr	r3, [pc, #480]	; (800492c <HAL_RCC_OscConfig+0x4dc>)
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	061b      	lsls	r3, r3, #24
 8004756:	4975      	ldr	r1, [pc, #468]	; (800492c <HAL_RCC_OscConfig+0x4dc>)
 8004758:	4313      	orrs	r3, r2
 800475a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800475c:	e040      	b.n	80047e0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d023      	beq.n	80047ae <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004766:	4b71      	ldr	r3, [pc, #452]	; (800492c <HAL_RCC_OscConfig+0x4dc>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a70      	ldr	r2, [pc, #448]	; (800492c <HAL_RCC_OscConfig+0x4dc>)
 800476c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004772:	f7fd fbd7 	bl	8001f24 <HAL_GetTick>
 8004776:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004778:	e008      	b.n	800478c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800477a:	f7fd fbd3 	bl	8001f24 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e28a      	b.n	8004ca2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800478c:	4b67      	ldr	r3, [pc, #412]	; (800492c <HAL_RCC_OscConfig+0x4dc>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0f0      	beq.n	800477a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004798:	4b64      	ldr	r3, [pc, #400]	; (800492c <HAL_RCC_OscConfig+0x4dc>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	061b      	lsls	r3, r3, #24
 80047a6:	4961      	ldr	r1, [pc, #388]	; (800492c <HAL_RCC_OscConfig+0x4dc>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	60cb      	str	r3, [r1, #12]
 80047ac:	e018      	b.n	80047e0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80047ae:	4b5f      	ldr	r3, [pc, #380]	; (800492c <HAL_RCC_OscConfig+0x4dc>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a5e      	ldr	r2, [pc, #376]	; (800492c <HAL_RCC_OscConfig+0x4dc>)
 80047b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ba:	f7fd fbb3 	bl	8001f24 <HAL_GetTick>
 80047be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80047c0:	e008      	b.n	80047d4 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80047c2:	f7fd fbaf 	bl	8001f24 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e266      	b.n	8004ca2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80047d4:	4b55      	ldr	r3, [pc, #340]	; (800492c <HAL_RCC_OscConfig+0x4dc>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1f0      	bne.n	80047c2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0308 	and.w	r3, r3, #8
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d036      	beq.n	800485a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d019      	beq.n	8004828 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047f4:	4b4d      	ldr	r3, [pc, #308]	; (800492c <HAL_RCC_OscConfig+0x4dc>)
 80047f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047f8:	4a4c      	ldr	r2, [pc, #304]	; (800492c <HAL_RCC_OscConfig+0x4dc>)
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004800:	f7fd fb90 	bl	8001f24 <HAL_GetTick>
 8004804:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004808:	f7fd fb8c 	bl	8001f24 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e243      	b.n	8004ca2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800481a:	4b44      	ldr	r3, [pc, #272]	; (800492c <HAL_RCC_OscConfig+0x4dc>)
 800481c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0f0      	beq.n	8004808 <HAL_RCC_OscConfig+0x3b8>
 8004826:	e018      	b.n	800485a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004828:	4b40      	ldr	r3, [pc, #256]	; (800492c <HAL_RCC_OscConfig+0x4dc>)
 800482a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800482c:	4a3f      	ldr	r2, [pc, #252]	; (800492c <HAL_RCC_OscConfig+0x4dc>)
 800482e:	f023 0301 	bic.w	r3, r3, #1
 8004832:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004834:	f7fd fb76 	bl	8001f24 <HAL_GetTick>
 8004838:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800483a:	e008      	b.n	800484e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800483c:	f7fd fb72 	bl	8001f24 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b02      	cmp	r3, #2
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e229      	b.n	8004ca2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800484e:	4b37      	ldr	r3, [pc, #220]	; (800492c <HAL_RCC_OscConfig+0x4dc>)
 8004850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1f0      	bne.n	800483c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0320 	and.w	r3, r3, #32
 8004862:	2b00      	cmp	r3, #0
 8004864:	d036      	beq.n	80048d4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d019      	beq.n	80048a2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800486e:	4b2f      	ldr	r3, [pc, #188]	; (800492c <HAL_RCC_OscConfig+0x4dc>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a2e      	ldr	r2, [pc, #184]	; (800492c <HAL_RCC_OscConfig+0x4dc>)
 8004874:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004878:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800487a:	f7fd fb53 	bl	8001f24 <HAL_GetTick>
 800487e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004880:	e008      	b.n	8004894 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004882:	f7fd fb4f 	bl	8001f24 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e206      	b.n	8004ca2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004894:	4b25      	ldr	r3, [pc, #148]	; (800492c <HAL_RCC_OscConfig+0x4dc>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0f0      	beq.n	8004882 <HAL_RCC_OscConfig+0x432>
 80048a0:	e018      	b.n	80048d4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048a2:	4b22      	ldr	r3, [pc, #136]	; (800492c <HAL_RCC_OscConfig+0x4dc>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a21      	ldr	r2, [pc, #132]	; (800492c <HAL_RCC_OscConfig+0x4dc>)
 80048a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80048ae:	f7fd fb39 	bl	8001f24 <HAL_GetTick>
 80048b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048b4:	e008      	b.n	80048c8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048b6:	f7fd fb35 	bl	8001f24 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e1ec      	b.n	8004ca2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048c8:	4b18      	ldr	r3, [pc, #96]	; (800492c <HAL_RCC_OscConfig+0x4dc>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1f0      	bne.n	80048b6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 80af 	beq.w	8004a40 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80048e2:	4b13      	ldr	r3, [pc, #76]	; (8004930 <HAL_RCC_OscConfig+0x4e0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a12      	ldr	r2, [pc, #72]	; (8004930 <HAL_RCC_OscConfig+0x4e0>)
 80048e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048ee:	f7fd fb19 	bl	8001f24 <HAL_GetTick>
 80048f2:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048f4:	e008      	b.n	8004908 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048f6:	f7fd fb15 	bl	8001f24 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b64      	cmp	r3, #100	; 0x64
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e1cc      	b.n	8004ca2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004908:	4b09      	ldr	r3, [pc, #36]	; (8004930 <HAL_RCC_OscConfig+0x4e0>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0f0      	beq.n	80048f6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d10b      	bne.n	8004934 <HAL_RCC_OscConfig+0x4e4>
 800491c:	4b03      	ldr	r3, [pc, #12]	; (800492c <HAL_RCC_OscConfig+0x4dc>)
 800491e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004920:	4a02      	ldr	r2, [pc, #8]	; (800492c <HAL_RCC_OscConfig+0x4dc>)
 8004922:	f043 0301 	orr.w	r3, r3, #1
 8004926:	6713      	str	r3, [r2, #112]	; 0x70
 8004928:	e05b      	b.n	80049e2 <HAL_RCC_OscConfig+0x592>
 800492a:	bf00      	nop
 800492c:	58024400 	.word	0x58024400
 8004930:	58024800 	.word	0x58024800
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d112      	bne.n	8004962 <HAL_RCC_OscConfig+0x512>
 800493c:	4b9d      	ldr	r3, [pc, #628]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 800493e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004940:	4a9c      	ldr	r2, [pc, #624]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004942:	f023 0301 	bic.w	r3, r3, #1
 8004946:	6713      	str	r3, [r2, #112]	; 0x70
 8004948:	4b9a      	ldr	r3, [pc, #616]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 800494a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494c:	4a99      	ldr	r2, [pc, #612]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 800494e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004952:	6713      	str	r3, [r2, #112]	; 0x70
 8004954:	4b97      	ldr	r3, [pc, #604]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004958:	4a96      	ldr	r2, [pc, #600]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 800495a:	f023 0304 	bic.w	r3, r3, #4
 800495e:	6713      	str	r3, [r2, #112]	; 0x70
 8004960:	e03f      	b.n	80049e2 <HAL_RCC_OscConfig+0x592>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	2b05      	cmp	r3, #5
 8004968:	d112      	bne.n	8004990 <HAL_RCC_OscConfig+0x540>
 800496a:	4b92      	ldr	r3, [pc, #584]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 800496c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496e:	4a91      	ldr	r2, [pc, #580]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004970:	f043 0304 	orr.w	r3, r3, #4
 8004974:	6713      	str	r3, [r2, #112]	; 0x70
 8004976:	4b8f      	ldr	r3, [pc, #572]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497a:	4a8e      	ldr	r2, [pc, #568]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 800497c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004980:	6713      	str	r3, [r2, #112]	; 0x70
 8004982:	4b8c      	ldr	r3, [pc, #560]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004986:	4a8b      	ldr	r2, [pc, #556]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004988:	f043 0301 	orr.w	r3, r3, #1
 800498c:	6713      	str	r3, [r2, #112]	; 0x70
 800498e:	e028      	b.n	80049e2 <HAL_RCC_OscConfig+0x592>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	2b85      	cmp	r3, #133	; 0x85
 8004996:	d112      	bne.n	80049be <HAL_RCC_OscConfig+0x56e>
 8004998:	4b86      	ldr	r3, [pc, #536]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 800499a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499c:	4a85      	ldr	r2, [pc, #532]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 800499e:	f043 0304 	orr.w	r3, r3, #4
 80049a2:	6713      	str	r3, [r2, #112]	; 0x70
 80049a4:	4b83      	ldr	r3, [pc, #524]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 80049a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a8:	4a82      	ldr	r2, [pc, #520]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 80049aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ae:	6713      	str	r3, [r2, #112]	; 0x70
 80049b0:	4b80      	ldr	r3, [pc, #512]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 80049b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b4:	4a7f      	ldr	r2, [pc, #508]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 80049b6:	f043 0301 	orr.w	r3, r3, #1
 80049ba:	6713      	str	r3, [r2, #112]	; 0x70
 80049bc:	e011      	b.n	80049e2 <HAL_RCC_OscConfig+0x592>
 80049be:	4b7d      	ldr	r3, [pc, #500]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 80049c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c2:	4a7c      	ldr	r2, [pc, #496]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 80049c4:	f023 0301 	bic.w	r3, r3, #1
 80049c8:	6713      	str	r3, [r2, #112]	; 0x70
 80049ca:	4b7a      	ldr	r3, [pc, #488]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 80049cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ce:	4a79      	ldr	r2, [pc, #484]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 80049d0:	f023 0304 	bic.w	r3, r3, #4
 80049d4:	6713      	str	r3, [r2, #112]	; 0x70
 80049d6:	4b77      	ldr	r3, [pc, #476]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 80049d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049da:	4a76      	ldr	r2, [pc, #472]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 80049dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d015      	beq.n	8004a16 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ea:	f7fd fa9b 	bl	8001f24 <HAL_GetTick>
 80049ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049f0:	e00a      	b.n	8004a08 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f2:	f7fd fa97 	bl	8001f24 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e14c      	b.n	8004ca2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a08:	4b6a      	ldr	r3, [pc, #424]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0ee      	beq.n	80049f2 <HAL_RCC_OscConfig+0x5a2>
 8004a14:	e014      	b.n	8004a40 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a16:	f7fd fa85 	bl	8001f24 <HAL_GetTick>
 8004a1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a1c:	e00a      	b.n	8004a34 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a1e:	f7fd fa81 	bl	8001f24 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e136      	b.n	8004ca2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a34:	4b5f      	ldr	r3, [pc, #380]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1ee      	bne.n	8004a1e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 812b 	beq.w	8004ca0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004a4a:	4b5a      	ldr	r3, [pc, #360]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a52:	2b18      	cmp	r3, #24
 8004a54:	f000 80bb 	beq.w	8004bce <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	f040 8095 	bne.w	8004b8c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a62:	4b54      	ldr	r3, [pc, #336]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a53      	ldr	r2, [pc, #332]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004a68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6e:	f7fd fa59 	bl	8001f24 <HAL_GetTick>
 8004a72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a74:	e008      	b.n	8004a88 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a76:	f7fd fa55 	bl	8001f24 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d901      	bls.n	8004a88 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e10c      	b.n	8004ca2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a88:	4b4a      	ldr	r3, [pc, #296]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1f0      	bne.n	8004a76 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a94:	4b47      	ldr	r3, [pc, #284]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004a96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a98:	4b47      	ldr	r3, [pc, #284]	; (8004bb8 <HAL_RCC_OscConfig+0x768>)
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004aa4:	0112      	lsls	r2, r2, #4
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	4942      	ldr	r1, [pc, #264]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	628b      	str	r3, [r1, #40]	; 0x28
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004abc:	3b01      	subs	r3, #1
 8004abe:	025b      	lsls	r3, r3, #9
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	041b      	lsls	r3, r3, #16
 8004acc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	061b      	lsls	r3, r3, #24
 8004ada:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ade:	4935      	ldr	r1, [pc, #212]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004ae4:	4b33      	ldr	r3, [pc, #204]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	4a32      	ldr	r2, [pc, #200]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004aea:	f023 0301 	bic.w	r3, r3, #1
 8004aee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004af0:	4b30      	ldr	r3, [pc, #192]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004af2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004af4:	4b31      	ldr	r3, [pc, #196]	; (8004bbc <HAL_RCC_OscConfig+0x76c>)
 8004af6:	4013      	ands	r3, r2
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004afc:	00d2      	lsls	r2, r2, #3
 8004afe:	492d      	ldr	r1, [pc, #180]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004b04:	4b2b      	ldr	r3, [pc, #172]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	f023 020c 	bic.w	r2, r3, #12
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b10:	4928      	ldr	r1, [pc, #160]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004b16:	4b27      	ldr	r3, [pc, #156]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1a:	f023 0202 	bic.w	r2, r3, #2
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b22:	4924      	ldr	r1, [pc, #144]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b28:	4b22      	ldr	r3, [pc, #136]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2c:	4a21      	ldr	r2, [pc, #132]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004b2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b34:	4b1f      	ldr	r3, [pc, #124]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b38:	4a1e      	ldr	r2, [pc, #120]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004b40:	4b1c      	ldr	r3, [pc, #112]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b44:	4a1b      	ldr	r2, [pc, #108]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004b46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004b4c:	4b19      	ldr	r3, [pc, #100]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	4a18      	ldr	r2, [pc, #96]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004b52:	f043 0301 	orr.w	r3, r3, #1
 8004b56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b58:	4b16      	ldr	r3, [pc, #88]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a15      	ldr	r2, [pc, #84]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004b5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b64:	f7fd f9de 	bl	8001f24 <HAL_GetTick>
 8004b68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b6c:	f7fd f9da 	bl	8001f24 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e091      	b.n	8004ca2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b7e:	4b0d      	ldr	r3, [pc, #52]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d0f0      	beq.n	8004b6c <HAL_RCC_OscConfig+0x71c>
 8004b8a:	e089      	b.n	8004ca0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b8c:	4b09      	ldr	r3, [pc, #36]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a08      	ldr	r2, [pc, #32]	; (8004bb4 <HAL_RCC_OscConfig+0x764>)
 8004b92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b98:	f7fd f9c4 	bl	8001f24 <HAL_GetTick>
 8004b9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b9e:	e00f      	b.n	8004bc0 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ba0:	f7fd f9c0 	bl	8001f24 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d908      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e077      	b.n	8004ca2 <HAL_RCC_OscConfig+0x852>
 8004bb2:	bf00      	nop
 8004bb4:	58024400 	.word	0x58024400
 8004bb8:	fffffc0c 	.word	0xfffffc0c
 8004bbc:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bc0:	4b3a      	ldr	r3, [pc, #232]	; (8004cac <HAL_RCC_OscConfig+0x85c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1e9      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x750>
 8004bcc:	e068      	b.n	8004ca0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004bce:	4b37      	ldr	r3, [pc, #220]	; (8004cac <HAL_RCC_OscConfig+0x85c>)
 8004bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004bd4:	4b35      	ldr	r3, [pc, #212]	; (8004cac <HAL_RCC_OscConfig+0x85c>)
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd8:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d031      	beq.n	8004c46 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	f003 0203 	and.w	r2, r3, #3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d12a      	bne.n	8004c46 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	091b      	lsrs	r3, r3, #4
 8004bf4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d122      	bne.n	8004c46 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d11a      	bne.n	8004c46 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	0a5b      	lsrs	r3, r3, #9
 8004c14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d111      	bne.n	8004c46 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	0c1b      	lsrs	r3, r3, #16
 8004c26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d108      	bne.n	8004c46 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	0e1b      	lsrs	r3, r3, #24
 8004c38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c40:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d001      	beq.n	8004c4a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e02b      	b.n	8004ca2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004c4a:	4b18      	ldr	r3, [pc, #96]	; (8004cac <HAL_RCC_OscConfig+0x85c>)
 8004c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c4e:	08db      	lsrs	r3, r3, #3
 8004c50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c54:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d01f      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004c60:	4b12      	ldr	r3, [pc, #72]	; (8004cac <HAL_RCC_OscConfig+0x85c>)
 8004c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c64:	4a11      	ldr	r2, [pc, #68]	; (8004cac <HAL_RCC_OscConfig+0x85c>)
 8004c66:	f023 0301 	bic.w	r3, r3, #1
 8004c6a:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c6c:	f7fd f95a 	bl	8001f24 <HAL_GetTick>
 8004c70:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004c72:	bf00      	nop
 8004c74:	f7fd f956 	bl	8001f24 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d0f9      	beq.n	8004c74 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c80:	4b0a      	ldr	r3, [pc, #40]	; (8004cac <HAL_RCC_OscConfig+0x85c>)
 8004c82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c84:	4b0a      	ldr	r3, [pc, #40]	; (8004cb0 <HAL_RCC_OscConfig+0x860>)
 8004c86:	4013      	ands	r3, r2
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c8c:	00d2      	lsls	r2, r2, #3
 8004c8e:	4907      	ldr	r1, [pc, #28]	; (8004cac <HAL_RCC_OscConfig+0x85c>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004c94:	4b05      	ldr	r3, [pc, #20]	; (8004cac <HAL_RCC_OscConfig+0x85c>)
 8004c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c98:	4a04      	ldr	r2, [pc, #16]	; (8004cac <HAL_RCC_OscConfig+0x85c>)
 8004c9a:	f043 0301 	orr.w	r3, r3, #1
 8004c9e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3730      	adds	r7, #48	; 0x30
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	58024400 	.word	0x58024400
 8004cb0:	ffff0007 	.word	0xffff0007

08004cb4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e19c      	b.n	8005002 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cc8:	4b8a      	ldr	r3, [pc, #552]	; (8004ef4 <HAL_RCC_ClockConfig+0x240>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 030f 	and.w	r3, r3, #15
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d910      	bls.n	8004cf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd6:	4b87      	ldr	r3, [pc, #540]	; (8004ef4 <HAL_RCC_ClockConfig+0x240>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f023 020f 	bic.w	r2, r3, #15
 8004cde:	4985      	ldr	r1, [pc, #532]	; (8004ef4 <HAL_RCC_ClockConfig+0x240>)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce6:	4b83      	ldr	r3, [pc, #524]	; (8004ef4 <HAL_RCC_ClockConfig+0x240>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 030f 	and.w	r3, r3, #15
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d001      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e184      	b.n	8005002 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d010      	beq.n	8004d26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691a      	ldr	r2, [r3, #16]
 8004d08:	4b7b      	ldr	r3, [pc, #492]	; (8004ef8 <HAL_RCC_ClockConfig+0x244>)
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d908      	bls.n	8004d26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d14:	4b78      	ldr	r3, [pc, #480]	; (8004ef8 <HAL_RCC_ClockConfig+0x244>)
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	4975      	ldr	r1, [pc, #468]	; (8004ef8 <HAL_RCC_ClockConfig+0x244>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0308 	and.w	r3, r3, #8
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d010      	beq.n	8004d54 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	695a      	ldr	r2, [r3, #20]
 8004d36:	4b70      	ldr	r3, [pc, #448]	; (8004ef8 <HAL_RCC_ClockConfig+0x244>)
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d908      	bls.n	8004d54 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d42:	4b6d      	ldr	r3, [pc, #436]	; (8004ef8 <HAL_RCC_ClockConfig+0x244>)
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	496a      	ldr	r1, [pc, #424]	; (8004ef8 <HAL_RCC_ClockConfig+0x244>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0310 	and.w	r3, r3, #16
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d010      	beq.n	8004d82 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	699a      	ldr	r2, [r3, #24]
 8004d64:	4b64      	ldr	r3, [pc, #400]	; (8004ef8 <HAL_RCC_ClockConfig+0x244>)
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d908      	bls.n	8004d82 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d70:	4b61      	ldr	r3, [pc, #388]	; (8004ef8 <HAL_RCC_ClockConfig+0x244>)
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	495e      	ldr	r1, [pc, #376]	; (8004ef8 <HAL_RCC_ClockConfig+0x244>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0320 	and.w	r3, r3, #32
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d010      	beq.n	8004db0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	69da      	ldr	r2, [r3, #28]
 8004d92:	4b59      	ldr	r3, [pc, #356]	; (8004ef8 <HAL_RCC_ClockConfig+0x244>)
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d908      	bls.n	8004db0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004d9e:	4b56      	ldr	r3, [pc, #344]	; (8004ef8 <HAL_RCC_ClockConfig+0x244>)
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	4953      	ldr	r1, [pc, #332]	; (8004ef8 <HAL_RCC_ClockConfig+0x244>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d010      	beq.n	8004dde <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68da      	ldr	r2, [r3, #12]
 8004dc0:	4b4d      	ldr	r3, [pc, #308]	; (8004ef8 <HAL_RCC_ClockConfig+0x244>)
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	f003 030f 	and.w	r3, r3, #15
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d908      	bls.n	8004dde <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dcc:	4b4a      	ldr	r3, [pc, #296]	; (8004ef8 <HAL_RCC_ClockConfig+0x244>)
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	f023 020f 	bic.w	r2, r3, #15
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	4947      	ldr	r1, [pc, #284]	; (8004ef8 <HAL_RCC_ClockConfig+0x244>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d055      	beq.n	8004e96 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004dea:	4b43      	ldr	r3, [pc, #268]	; (8004ef8 <HAL_RCC_ClockConfig+0x244>)
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	4940      	ldr	r1, [pc, #256]	; (8004ef8 <HAL_RCC_ClockConfig+0x244>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d107      	bne.n	8004e14 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e04:	4b3c      	ldr	r3, [pc, #240]	; (8004ef8 <HAL_RCC_ClockConfig+0x244>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d121      	bne.n	8004e54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e0f6      	b.n	8005002 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	2b03      	cmp	r3, #3
 8004e1a:	d107      	bne.n	8004e2c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e1c:	4b36      	ldr	r3, [pc, #216]	; (8004ef8 <HAL_RCC_ClockConfig+0x244>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d115      	bne.n	8004e54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e0ea      	b.n	8005002 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d107      	bne.n	8004e44 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e34:	4b30      	ldr	r3, [pc, #192]	; (8004ef8 <HAL_RCC_ClockConfig+0x244>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d109      	bne.n	8004e54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e0de      	b.n	8005002 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e44:	4b2c      	ldr	r3, [pc, #176]	; (8004ef8 <HAL_RCC_ClockConfig+0x244>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e0d6      	b.n	8005002 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e54:	4b28      	ldr	r3, [pc, #160]	; (8004ef8 <HAL_RCC_ClockConfig+0x244>)
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	f023 0207 	bic.w	r2, r3, #7
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	4925      	ldr	r1, [pc, #148]	; (8004ef8 <HAL_RCC_ClockConfig+0x244>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e66:	f7fd f85d 	bl	8001f24 <HAL_GetTick>
 8004e6a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e6c:	e00a      	b.n	8004e84 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e6e:	f7fd f859 	bl	8001f24 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d901      	bls.n	8004e84 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e0be      	b.n	8005002 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e84:	4b1c      	ldr	r3, [pc, #112]	; (8004ef8 <HAL_RCC_ClockConfig+0x244>)
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	00db      	lsls	r3, r3, #3
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d1eb      	bne.n	8004e6e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d010      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	4b14      	ldr	r3, [pc, #80]	; (8004ef8 <HAL_RCC_ClockConfig+0x244>)
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	f003 030f 	and.w	r3, r3, #15
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d208      	bcs.n	8004ec4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eb2:	4b11      	ldr	r3, [pc, #68]	; (8004ef8 <HAL_RCC_ClockConfig+0x244>)
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	f023 020f 	bic.w	r2, r3, #15
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	490e      	ldr	r1, [pc, #56]	; (8004ef8 <HAL_RCC_ClockConfig+0x244>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ec4:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <HAL_RCC_ClockConfig+0x240>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 030f 	and.w	r3, r3, #15
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d214      	bcs.n	8004efc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ed2:	4b08      	ldr	r3, [pc, #32]	; (8004ef4 <HAL_RCC_ClockConfig+0x240>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f023 020f 	bic.w	r2, r3, #15
 8004eda:	4906      	ldr	r1, [pc, #24]	; (8004ef4 <HAL_RCC_ClockConfig+0x240>)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ee2:	4b04      	ldr	r3, [pc, #16]	; (8004ef4 <HAL_RCC_ClockConfig+0x240>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d005      	beq.n	8004efc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e086      	b.n	8005002 <HAL_RCC_ClockConfig+0x34e>
 8004ef4:	52002000 	.word	0x52002000
 8004ef8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0304 	and.w	r3, r3, #4
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d010      	beq.n	8004f2a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	691a      	ldr	r2, [r3, #16]
 8004f0c:	4b3f      	ldr	r3, [pc, #252]	; (800500c <HAL_RCC_ClockConfig+0x358>)
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d208      	bcs.n	8004f2a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f18:	4b3c      	ldr	r3, [pc, #240]	; (800500c <HAL_RCC_ClockConfig+0x358>)
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	4939      	ldr	r1, [pc, #228]	; (800500c <HAL_RCC_ClockConfig+0x358>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0308 	and.w	r3, r3, #8
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d010      	beq.n	8004f58 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	695a      	ldr	r2, [r3, #20]
 8004f3a:	4b34      	ldr	r3, [pc, #208]	; (800500c <HAL_RCC_ClockConfig+0x358>)
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d208      	bcs.n	8004f58 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f46:	4b31      	ldr	r3, [pc, #196]	; (800500c <HAL_RCC_ClockConfig+0x358>)
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	492e      	ldr	r1, [pc, #184]	; (800500c <HAL_RCC_ClockConfig+0x358>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0310 	and.w	r3, r3, #16
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d010      	beq.n	8004f86 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	699a      	ldr	r2, [r3, #24]
 8004f68:	4b28      	ldr	r3, [pc, #160]	; (800500c <HAL_RCC_ClockConfig+0x358>)
 8004f6a:	69db      	ldr	r3, [r3, #28]
 8004f6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d208      	bcs.n	8004f86 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f74:	4b25      	ldr	r3, [pc, #148]	; (800500c <HAL_RCC_ClockConfig+0x358>)
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	4922      	ldr	r1, [pc, #136]	; (800500c <HAL_RCC_ClockConfig+0x358>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0320 	and.w	r3, r3, #32
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d010      	beq.n	8004fb4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	69da      	ldr	r2, [r3, #28]
 8004f96:	4b1d      	ldr	r3, [pc, #116]	; (800500c <HAL_RCC_ClockConfig+0x358>)
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d208      	bcs.n	8004fb4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004fa2:	4b1a      	ldr	r3, [pc, #104]	; (800500c <HAL_RCC_ClockConfig+0x358>)
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	4917      	ldr	r1, [pc, #92]	; (800500c <HAL_RCC_ClockConfig+0x358>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004fb4:	f000 f834 	bl	8005020 <HAL_RCC_GetSysClockFreq>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	4b14      	ldr	r3, [pc, #80]	; (800500c <HAL_RCC_ClockConfig+0x358>)
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	0a1b      	lsrs	r3, r3, #8
 8004fc0:	f003 030f 	and.w	r3, r3, #15
 8004fc4:	4912      	ldr	r1, [pc, #72]	; (8005010 <HAL_RCC_ClockConfig+0x35c>)
 8004fc6:	5ccb      	ldrb	r3, [r1, r3]
 8004fc8:	f003 031f 	and.w	r3, r3, #31
 8004fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8004fd0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004fd2:	4b0e      	ldr	r3, [pc, #56]	; (800500c <HAL_RCC_ClockConfig+0x358>)
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	f003 030f 	and.w	r3, r3, #15
 8004fda:	4a0d      	ldr	r2, [pc, #52]	; (8005010 <HAL_RCC_ClockConfig+0x35c>)
 8004fdc:	5cd3      	ldrb	r3, [r2, r3]
 8004fde:	f003 031f 	and.w	r3, r3, #31
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe8:	4a0a      	ldr	r2, [pc, #40]	; (8005014 <HAL_RCC_ClockConfig+0x360>)
 8004fea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004fec:	4a0a      	ldr	r2, [pc, #40]	; (8005018 <HAL_RCC_ClockConfig+0x364>)
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004ff2:	4b0a      	ldr	r3, [pc, #40]	; (800501c <HAL_RCC_ClockConfig+0x368>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7fc ff4a 	bl	8001e90 <HAL_InitTick>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005000:	7bfb      	ldrb	r3, [r7, #15]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3718      	adds	r7, #24
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	58024400 	.word	0x58024400
 8005010:	0800b9f4 	.word	0x0800b9f4
 8005014:	24000010 	.word	0x24000010
 8005018:	2400000c 	.word	0x2400000c
 800501c:	24000014 	.word	0x24000014

08005020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005020:	b480      	push	{r7}
 8005022:	b089      	sub	sp, #36	; 0x24
 8005024:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005026:	4bb3      	ldr	r3, [pc, #716]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800502e:	2b18      	cmp	r3, #24
 8005030:	f200 8155 	bhi.w	80052de <HAL_RCC_GetSysClockFreq+0x2be>
 8005034:	a201      	add	r2, pc, #4	; (adr r2, 800503c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503a:	bf00      	nop
 800503c:	080050a1 	.word	0x080050a1
 8005040:	080052df 	.word	0x080052df
 8005044:	080052df 	.word	0x080052df
 8005048:	080052df 	.word	0x080052df
 800504c:	080052df 	.word	0x080052df
 8005050:	080052df 	.word	0x080052df
 8005054:	080052df 	.word	0x080052df
 8005058:	080052df 	.word	0x080052df
 800505c:	080050c7 	.word	0x080050c7
 8005060:	080052df 	.word	0x080052df
 8005064:	080052df 	.word	0x080052df
 8005068:	080052df 	.word	0x080052df
 800506c:	080052df 	.word	0x080052df
 8005070:	080052df 	.word	0x080052df
 8005074:	080052df 	.word	0x080052df
 8005078:	080052df 	.word	0x080052df
 800507c:	080050cd 	.word	0x080050cd
 8005080:	080052df 	.word	0x080052df
 8005084:	080052df 	.word	0x080052df
 8005088:	080052df 	.word	0x080052df
 800508c:	080052df 	.word	0x080052df
 8005090:	080052df 	.word	0x080052df
 8005094:	080052df 	.word	0x080052df
 8005098:	080052df 	.word	0x080052df
 800509c:	080050d3 	.word	0x080050d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050a0:	4b94      	ldr	r3, [pc, #592]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0320 	and.w	r3, r3, #32
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d009      	beq.n	80050c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050ac:	4b91      	ldr	r3, [pc, #580]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	08db      	lsrs	r3, r3, #3
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	4a90      	ldr	r2, [pc, #576]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050b8:	fa22 f303 	lsr.w	r3, r2, r3
 80050bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80050be:	e111      	b.n	80052e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80050c0:	4b8d      	ldr	r3, [pc, #564]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050c2:	61bb      	str	r3, [r7, #24]
      break;
 80050c4:	e10e      	b.n	80052e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80050c6:	4b8d      	ldr	r3, [pc, #564]	; (80052fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80050c8:	61bb      	str	r3, [r7, #24]
      break;
 80050ca:	e10b      	b.n	80052e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80050cc:	4b8c      	ldr	r3, [pc, #560]	; (8005300 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80050ce:	61bb      	str	r3, [r7, #24]
      break;
 80050d0:	e108      	b.n	80052e4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050d2:	4b88      	ldr	r3, [pc, #544]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80050dc:	4b85      	ldr	r3, [pc, #532]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e0:	091b      	lsrs	r3, r3, #4
 80050e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050e6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80050e8:	4b82      	ldr	r3, [pc, #520]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80050f2:	4b80      	ldr	r3, [pc, #512]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f6:	08db      	lsrs	r3, r3, #3
 80050f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	fb02 f303 	mul.w	r3, r2, r3
 8005102:	ee07 3a90 	vmov	s15, r3
 8005106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800510a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 80e1 	beq.w	80052d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	2b02      	cmp	r3, #2
 800511a:	f000 8083 	beq.w	8005224 <HAL_RCC_GetSysClockFreq+0x204>
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2b02      	cmp	r3, #2
 8005122:	f200 80a1 	bhi.w	8005268 <HAL_RCC_GetSysClockFreq+0x248>
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d003      	beq.n	8005134 <HAL_RCC_GetSysClockFreq+0x114>
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d056      	beq.n	80051e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005132:	e099      	b.n	8005268 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005134:	4b6f      	ldr	r3, [pc, #444]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0320 	and.w	r3, r3, #32
 800513c:	2b00      	cmp	r3, #0
 800513e:	d02d      	beq.n	800519c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005140:	4b6c      	ldr	r3, [pc, #432]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	08db      	lsrs	r3, r3, #3
 8005146:	f003 0303 	and.w	r3, r3, #3
 800514a:	4a6b      	ldr	r2, [pc, #428]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800514c:	fa22 f303 	lsr.w	r3, r2, r3
 8005150:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	ee07 3a90 	vmov	s15, r3
 8005158:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	ee07 3a90 	vmov	s15, r3
 8005162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800516a:	4b62      	ldr	r3, [pc, #392]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800516c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005172:	ee07 3a90 	vmov	s15, r3
 8005176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800517a:	ed97 6a02 	vldr	s12, [r7, #8]
 800517e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005304 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800518a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800518e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005196:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800519a:	e087      	b.n	80052ac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	ee07 3a90 	vmov	s15, r3
 80051a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051a6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005308 <HAL_RCC_GetSysClockFreq+0x2e8>
 80051aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ae:	4b51      	ldr	r3, [pc, #324]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051b6:	ee07 3a90 	vmov	s15, r3
 80051ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051be:	ed97 6a02 	vldr	s12, [r7, #8]
 80051c2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005304 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80051de:	e065      	b.n	80052ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	ee07 3a90 	vmov	s15, r3
 80051e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ea:	eddf 6a48 	vldr	s13, [pc, #288]	; 800530c <HAL_RCC_GetSysClockFreq+0x2ec>
 80051ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051f2:	4b40      	ldr	r3, [pc, #256]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051fa:	ee07 3a90 	vmov	s15, r3
 80051fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005202:	ed97 6a02 	vldr	s12, [r7, #8]
 8005206:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005304 <HAL_RCC_GetSysClockFreq+0x2e4>
 800520a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800520e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005212:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800521a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800521e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005222:	e043      	b.n	80052ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	ee07 3a90 	vmov	s15, r3
 800522a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800522e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005310 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005236:	4b2f      	ldr	r3, [pc, #188]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800523e:	ee07 3a90 	vmov	s15, r3
 8005242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005246:	ed97 6a02 	vldr	s12, [r7, #8]
 800524a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005304 <HAL_RCC_GetSysClockFreq+0x2e4>
 800524e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800525a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800525e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005262:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005266:	e021      	b.n	80052ac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	ee07 3a90 	vmov	s15, r3
 800526e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005272:	eddf 6a26 	vldr	s13, [pc, #152]	; 800530c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800527a:	4b1e      	ldr	r3, [pc, #120]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800527c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005282:	ee07 3a90 	vmov	s15, r3
 8005286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800528a:	ed97 6a02 	vldr	s12, [r7, #8]
 800528e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005304 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800529a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800529e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052aa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80052ac:	4b11      	ldr	r3, [pc, #68]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b0:	0a5b      	lsrs	r3, r3, #9
 80052b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052b6:	3301      	adds	r3, #1
 80052b8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	ee07 3a90 	vmov	s15, r3
 80052c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80052c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052d0:	ee17 3a90 	vmov	r3, s15
 80052d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80052d6:	e005      	b.n	80052e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	61bb      	str	r3, [r7, #24]
      break;
 80052dc:	e002      	b.n	80052e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80052de:	4b07      	ldr	r3, [pc, #28]	; (80052fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80052e0:	61bb      	str	r3, [r7, #24]
      break;
 80052e2:	bf00      	nop
  }

  return sysclockfreq;
 80052e4:	69bb      	ldr	r3, [r7, #24]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3724      	adds	r7, #36	; 0x24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	58024400 	.word	0x58024400
 80052f8:	03d09000 	.word	0x03d09000
 80052fc:	003d0900 	.word	0x003d0900
 8005300:	007a1200 	.word	0x007a1200
 8005304:	46000000 	.word	0x46000000
 8005308:	4c742400 	.word	0x4c742400
 800530c:	4a742400 	.word	0x4a742400
 8005310:	4af42400 	.word	0x4af42400

08005314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800531a:	f7ff fe81 	bl	8005020 <HAL_RCC_GetSysClockFreq>
 800531e:	4602      	mov	r2, r0
 8005320:	4b10      	ldr	r3, [pc, #64]	; (8005364 <HAL_RCC_GetHCLKFreq+0x50>)
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	0a1b      	lsrs	r3, r3, #8
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	490f      	ldr	r1, [pc, #60]	; (8005368 <HAL_RCC_GetHCLKFreq+0x54>)
 800532c:	5ccb      	ldrb	r3, [r1, r3]
 800532e:	f003 031f 	and.w	r3, r3, #31
 8005332:	fa22 f303 	lsr.w	r3, r2, r3
 8005336:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005338:	4b0a      	ldr	r3, [pc, #40]	; (8005364 <HAL_RCC_GetHCLKFreq+0x50>)
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	f003 030f 	and.w	r3, r3, #15
 8005340:	4a09      	ldr	r2, [pc, #36]	; (8005368 <HAL_RCC_GetHCLKFreq+0x54>)
 8005342:	5cd3      	ldrb	r3, [r2, r3]
 8005344:	f003 031f 	and.w	r3, r3, #31
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	fa22 f303 	lsr.w	r3, r2, r3
 800534e:	4a07      	ldr	r2, [pc, #28]	; (800536c <HAL_RCC_GetHCLKFreq+0x58>)
 8005350:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005352:	4a07      	ldr	r2, [pc, #28]	; (8005370 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005358:	4b04      	ldr	r3, [pc, #16]	; (800536c <HAL_RCC_GetHCLKFreq+0x58>)
 800535a:	681b      	ldr	r3, [r3, #0]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	58024400 	.word	0x58024400
 8005368:	0800b9f4 	.word	0x0800b9f4
 800536c:	24000010 	.word	0x24000010
 8005370:	2400000c 	.word	0x2400000c

08005374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005378:	f7ff ffcc 	bl	8005314 <HAL_RCC_GetHCLKFreq>
 800537c:	4602      	mov	r2, r0
 800537e:	4b06      	ldr	r3, [pc, #24]	; (8005398 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	091b      	lsrs	r3, r3, #4
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	4904      	ldr	r1, [pc, #16]	; (800539c <HAL_RCC_GetPCLK1Freq+0x28>)
 800538a:	5ccb      	ldrb	r3, [r1, r3]
 800538c:	f003 031f 	and.w	r3, r3, #31
 8005390:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005394:	4618      	mov	r0, r3
 8005396:	bd80      	pop	{r7, pc}
 8005398:	58024400 	.word	0x58024400
 800539c:	0800b9f4 	.word	0x0800b9f4

080053a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80053a4:	f7ff ffb6 	bl	8005314 <HAL_RCC_GetHCLKFreq>
 80053a8:	4602      	mov	r2, r0
 80053aa:	4b06      	ldr	r3, [pc, #24]	; (80053c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	0a1b      	lsrs	r3, r3, #8
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	4904      	ldr	r1, [pc, #16]	; (80053c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053b6:	5ccb      	ldrb	r3, [r1, r3]
 80053b8:	f003 031f 	and.w	r3, r3, #31
 80053bc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	58024400 	.word	0x58024400
 80053c8:	0800b9f4 	.word	0x0800b9f4

080053cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053d0:	b0c8      	sub	sp, #288	; 0x120
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053d8:	2300      	movs	r3, #0
 80053da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053de:	2300      	movs	r3, #0
 80053e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80053e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ec:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80053f0:	2500      	movs	r5, #0
 80053f2:	ea54 0305 	orrs.w	r3, r4, r5
 80053f6:	d049      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80053f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005402:	d02f      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005404:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005408:	d828      	bhi.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800540a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800540e:	d01a      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005410:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005414:	d822      	bhi.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800541a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800541e:	d007      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005420:	e01c      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005422:	4ba7      	ldr	r3, [pc, #668]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005426:	4aa6      	ldr	r2, [pc, #664]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800542c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800542e:	e01a      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005430:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005434:	3308      	adds	r3, #8
 8005436:	2102      	movs	r1, #2
 8005438:	4618      	mov	r0, r3
 800543a:	f002 fa6d 	bl	8007918 <RCCEx_PLL2_Config>
 800543e:	4603      	mov	r3, r0
 8005440:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005444:	e00f      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005446:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800544a:	3328      	adds	r3, #40	; 0x28
 800544c:	2102      	movs	r1, #2
 800544e:	4618      	mov	r0, r3
 8005450:	f002 fb14 	bl	8007a7c <RCCEx_PLL3_Config>
 8005454:	4603      	mov	r3, r0
 8005456:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800545a:	e004      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005462:	e000      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005466:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10a      	bne.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800546e:	4b94      	ldr	r3, [pc, #592]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005472:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005476:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800547a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800547c:	4a90      	ldr	r2, [pc, #576]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800547e:	430b      	orrs	r3, r1
 8005480:	6513      	str	r3, [r2, #80]	; 0x50
 8005482:	e003      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005484:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005488:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800548c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005494:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005498:	f04f 0900 	mov.w	r9, #0
 800549c:	ea58 0309 	orrs.w	r3, r8, r9
 80054a0:	d047      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80054a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a8:	2b04      	cmp	r3, #4
 80054aa:	d82a      	bhi.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80054ac:	a201      	add	r2, pc, #4	; (adr r2, 80054b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80054ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b2:	bf00      	nop
 80054b4:	080054c9 	.word	0x080054c9
 80054b8:	080054d7 	.word	0x080054d7
 80054bc:	080054ed 	.word	0x080054ed
 80054c0:	0800550b 	.word	0x0800550b
 80054c4:	0800550b 	.word	0x0800550b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054c8:	4b7d      	ldr	r3, [pc, #500]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054cc:	4a7c      	ldr	r2, [pc, #496]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054d4:	e01a      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054da:	3308      	adds	r3, #8
 80054dc:	2100      	movs	r1, #0
 80054de:	4618      	mov	r0, r3
 80054e0:	f002 fa1a 	bl	8007918 <RCCEx_PLL2_Config>
 80054e4:	4603      	mov	r3, r0
 80054e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054ea:	e00f      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054f0:	3328      	adds	r3, #40	; 0x28
 80054f2:	2100      	movs	r1, #0
 80054f4:	4618      	mov	r0, r3
 80054f6:	f002 fac1 	bl	8007a7c <RCCEx_PLL3_Config>
 80054fa:	4603      	mov	r3, r0
 80054fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005500:	e004      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005508:	e000      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800550a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800550c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10a      	bne.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005514:	4b6a      	ldr	r3, [pc, #424]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005518:	f023 0107 	bic.w	r1, r3, #7
 800551c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005522:	4a67      	ldr	r2, [pc, #412]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005524:	430b      	orrs	r3, r1
 8005526:	6513      	str	r3, [r2, #80]	; 0x50
 8005528:	e003      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800552a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800552e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005532:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800553e:	f04f 0b00 	mov.w	fp, #0
 8005542:	ea5a 030b 	orrs.w	r3, sl, fp
 8005546:	d054      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8005548:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800554c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800554e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005552:	d036      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005554:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005558:	d82f      	bhi.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800555a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800555e:	d032      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005564:	d829      	bhi.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005566:	2bc0      	cmp	r3, #192	; 0xc0
 8005568:	d02f      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800556a:	2bc0      	cmp	r3, #192	; 0xc0
 800556c:	d825      	bhi.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800556e:	2b80      	cmp	r3, #128	; 0x80
 8005570:	d018      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005572:	2b80      	cmp	r3, #128	; 0x80
 8005574:	d821      	bhi.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800557a:	2b40      	cmp	r3, #64	; 0x40
 800557c:	d007      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800557e:	e01c      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005580:	4b4f      	ldr	r3, [pc, #316]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005584:	4a4e      	ldr	r2, [pc, #312]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800558a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800558c:	e01e      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800558e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005592:	3308      	adds	r3, #8
 8005594:	2100      	movs	r1, #0
 8005596:	4618      	mov	r0, r3
 8005598:	f002 f9be 	bl	8007918 <RCCEx_PLL2_Config>
 800559c:	4603      	mov	r3, r0
 800559e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80055a2:	e013      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055a8:	3328      	adds	r3, #40	; 0x28
 80055aa:	2100      	movs	r1, #0
 80055ac:	4618      	mov	r0, r3
 80055ae:	f002 fa65 	bl	8007a7c <RCCEx_PLL3_Config>
 80055b2:	4603      	mov	r3, r0
 80055b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80055b8:	e008      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80055c0:	e004      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80055c2:	bf00      	nop
 80055c4:	e002      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80055c6:	bf00      	nop
 80055c8:	e000      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80055ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10a      	bne.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80055d4:	4b3a      	ldr	r3, [pc, #232]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055d8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80055dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e2:	4a37      	ldr	r2, [pc, #220]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055e4:	430b      	orrs	r3, r1
 80055e6:	6513      	str	r3, [r2, #80]	; 0x50
 80055e8:	e003      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80055ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80055f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fa:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80055fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005602:	2300      	movs	r3, #0
 8005604:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005608:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800560c:	460b      	mov	r3, r1
 800560e:	4313      	orrs	r3, r2
 8005610:	d05c      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8005612:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005618:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800561c:	d03b      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800561e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005622:	d834      	bhi.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005628:	d037      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800562a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800562e:	d82e      	bhi.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005630:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005634:	d033      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005636:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800563a:	d828      	bhi.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800563c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005640:	d01a      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8005642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005646:	d822      	bhi.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800564c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005650:	d007      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005652:	e01c      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005654:	4b1a      	ldr	r3, [pc, #104]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005658:	4a19      	ldr	r2, [pc, #100]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800565a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800565e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005660:	e01e      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005662:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005666:	3308      	adds	r3, #8
 8005668:	2100      	movs	r1, #0
 800566a:	4618      	mov	r0, r3
 800566c:	f002 f954 	bl	8007918 <RCCEx_PLL2_Config>
 8005670:	4603      	mov	r3, r0
 8005672:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005676:	e013      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005678:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800567c:	3328      	adds	r3, #40	; 0x28
 800567e:	2100      	movs	r1, #0
 8005680:	4618      	mov	r0, r3
 8005682:	f002 f9fb 	bl	8007a7c <RCCEx_PLL3_Config>
 8005686:	4603      	mov	r3, r0
 8005688:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800568c:	e008      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005694:	e004      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005696:	bf00      	nop
 8005698:	e002      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800569a:	bf00      	nop
 800569c:	e000      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800569e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10d      	bne.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80056a8:	4b05      	ldr	r3, [pc, #20]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ac:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80056b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056b6:	4a02      	ldr	r2, [pc, #8]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056b8:	430b      	orrs	r3, r1
 80056ba:	6513      	str	r3, [r2, #80]	; 0x50
 80056bc:	e006      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x300>
 80056be:	bf00      	nop
 80056c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80056c8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80056cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80056d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056dc:	2300      	movs	r3, #0
 80056de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80056e2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80056e6:	460b      	mov	r3, r1
 80056e8:	4313      	orrs	r3, r2
 80056ea:	d03a      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80056ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f2:	2b30      	cmp	r3, #48	; 0x30
 80056f4:	d01f      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80056f6:	2b30      	cmp	r3, #48	; 0x30
 80056f8:	d819      	bhi.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x362>
 80056fa:	2b20      	cmp	r3, #32
 80056fc:	d00c      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80056fe:	2b20      	cmp	r3, #32
 8005700:	d815      	bhi.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005702:	2b00      	cmp	r3, #0
 8005704:	d019      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005706:	2b10      	cmp	r3, #16
 8005708:	d111      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800570a:	4bae      	ldr	r3, [pc, #696]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800570c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570e:	4aad      	ldr	r2, [pc, #692]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005714:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005716:	e011      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005718:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800571c:	3308      	adds	r3, #8
 800571e:	2102      	movs	r1, #2
 8005720:	4618      	mov	r0, r3
 8005722:	f002 f8f9 	bl	8007918 <RCCEx_PLL2_Config>
 8005726:	4603      	mov	r3, r0
 8005728:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800572c:	e006      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005734:	e002      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005736:	bf00      	nop
 8005738:	e000      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800573a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800573c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10a      	bne.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005744:	4b9f      	ldr	r3, [pc, #636]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005748:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800574c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005752:	4a9c      	ldr	r2, [pc, #624]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005754:	430b      	orrs	r3, r1
 8005756:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005758:	e003      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800575a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800575e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005762:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800576e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005772:	2300      	movs	r3, #0
 8005774:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005778:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800577c:	460b      	mov	r3, r1
 800577e:	4313      	orrs	r3, r2
 8005780:	d051      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005782:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005788:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800578c:	d035      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800578e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005792:	d82e      	bhi.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005794:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005798:	d031      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x432>
 800579a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800579e:	d828      	bhi.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80057a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057a4:	d01a      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x410>
 80057a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057aa:	d822      	bhi.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80057b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b4:	d007      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80057b6:	e01c      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057b8:	4b82      	ldr	r3, [pc, #520]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80057ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057bc:	4a81      	ldr	r2, [pc, #516]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80057be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057c4:	e01c      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057ca:	3308      	adds	r3, #8
 80057cc:	2100      	movs	r1, #0
 80057ce:	4618      	mov	r0, r3
 80057d0:	f002 f8a2 	bl	8007918 <RCCEx_PLL2_Config>
 80057d4:	4603      	mov	r3, r0
 80057d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057da:	e011      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057e0:	3328      	adds	r3, #40	; 0x28
 80057e2:	2100      	movs	r1, #0
 80057e4:	4618      	mov	r0, r3
 80057e6:	f002 f949 	bl	8007a7c <RCCEx_PLL3_Config>
 80057ea:	4603      	mov	r3, r0
 80057ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057f0:	e006      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80057f8:	e002      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80057fa:	bf00      	nop
 80057fc:	e000      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80057fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005800:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10a      	bne.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005808:	4b6e      	ldr	r3, [pc, #440]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800580a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800580c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005810:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005814:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005816:	4a6b      	ldr	r2, [pc, #428]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005818:	430b      	orrs	r3, r1
 800581a:	6513      	str	r3, [r2, #80]	; 0x50
 800581c:	e003      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800581e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005822:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005826:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800582a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005832:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005836:	2300      	movs	r3, #0
 8005838:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800583c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005840:	460b      	mov	r3, r1
 8005842:	4313      	orrs	r3, r2
 8005844:	d053      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800584a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800584c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005850:	d033      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005852:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005856:	d82c      	bhi.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005858:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800585c:	d02f      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800585e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005862:	d826      	bhi.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005864:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005868:	d02b      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800586a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800586e:	d820      	bhi.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005870:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005874:	d012      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005876:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800587a:	d81a      	bhi.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800587c:	2b00      	cmp	r3, #0
 800587e:	d022      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8005880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005884:	d115      	bne.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005886:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800588a:	3308      	adds	r3, #8
 800588c:	2101      	movs	r1, #1
 800588e:	4618      	mov	r0, r3
 8005890:	f002 f842 	bl	8007918 <RCCEx_PLL2_Config>
 8005894:	4603      	mov	r3, r0
 8005896:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800589a:	e015      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800589c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058a0:	3328      	adds	r3, #40	; 0x28
 80058a2:	2101      	movs	r1, #1
 80058a4:	4618      	mov	r0, r3
 80058a6:	f002 f8e9 	bl	8007a7c <RCCEx_PLL3_Config>
 80058aa:	4603      	mov	r3, r0
 80058ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80058b0:	e00a      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80058b8:	e006      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80058ba:	bf00      	nop
 80058bc:	e004      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80058be:	bf00      	nop
 80058c0:	e002      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80058c2:	bf00      	nop
 80058c4:	e000      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80058c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10a      	bne.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80058d0:	4b3c      	ldr	r3, [pc, #240]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80058d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058de:	4a39      	ldr	r2, [pc, #228]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058e0:	430b      	orrs	r3, r1
 80058e2:	6513      	str	r3, [r2, #80]	; 0x50
 80058e4:	e003      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80058ea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80058ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80058fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058fe:	2300      	movs	r3, #0
 8005900:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005904:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005908:	460b      	mov	r3, r1
 800590a:	4313      	orrs	r3, r2
 800590c:	d060      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800590e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005912:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005916:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800591a:	d039      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800591c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005920:	d832      	bhi.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005922:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005926:	d035      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005928:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800592c:	d82c      	bhi.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800592e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005932:	d031      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005938:	d826      	bhi.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800593a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800593e:	d02d      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005940:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005944:	d820      	bhi.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005946:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800594a:	d012      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800594c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005950:	d81a      	bhi.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005952:	2b00      	cmp	r3, #0
 8005954:	d024      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005956:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800595a:	d115      	bne.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800595c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005960:	3308      	adds	r3, #8
 8005962:	2101      	movs	r1, #1
 8005964:	4618      	mov	r0, r3
 8005966:	f001 ffd7 	bl	8007918 <RCCEx_PLL2_Config>
 800596a:	4603      	mov	r3, r0
 800596c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005970:	e017      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005972:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005976:	3328      	adds	r3, #40	; 0x28
 8005978:	2101      	movs	r1, #1
 800597a:	4618      	mov	r0, r3
 800597c:	f002 f87e 	bl	8007a7c <RCCEx_PLL3_Config>
 8005980:	4603      	mov	r3, r0
 8005982:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005986:	e00c      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800598e:	e008      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005990:	bf00      	nop
 8005992:	e006      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005994:	bf00      	nop
 8005996:	e004      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005998:	bf00      	nop
 800599a:	e002      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800599c:	bf00      	nop
 800599e:	e000      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80059a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10e      	bne.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80059aa:	4b06      	ldr	r3, [pc, #24]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80059ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ae:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80059b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059ba:	4a02      	ldr	r2, [pc, #8]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80059bc:	430b      	orrs	r3, r1
 80059be:	6593      	str	r3, [r2, #88]	; 0x58
 80059c0:	e006      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80059c2:	bf00      	nop
 80059c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80059cc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80059d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80059dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059e0:	2300      	movs	r3, #0
 80059e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80059e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80059ea:	460b      	mov	r3, r1
 80059ec:	4313      	orrs	r3, r2
 80059ee:	d037      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80059f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059fa:	d00e      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80059fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a00:	d816      	bhi.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d018      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005a06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a0a:	d111      	bne.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a0c:	4bc4      	ldr	r3, [pc, #784]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a10:	4ac3      	ldr	r2, [pc, #780]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005a18:	e00f      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a1e:	3308      	adds	r3, #8
 8005a20:	2101      	movs	r1, #1
 8005a22:	4618      	mov	r0, r3
 8005a24:	f001 ff78 	bl	8007918 <RCCEx_PLL2_Config>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005a2e:	e004      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005a36:	e000      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005a38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10a      	bne.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a42:	4bb7      	ldr	r3, [pc, #732]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a46:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a50:	4ab3      	ldr	r2, [pc, #716]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a52:	430b      	orrs	r3, r1
 8005a54:	6513      	str	r3, [r2, #80]	; 0x50
 8005a56:	e003      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a5c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a68:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005a6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a70:	2300      	movs	r3, #0
 8005a72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005a76:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	d039      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	d81c      	bhi.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005a8a:	a201      	add	r2, pc, #4	; (adr r2, 8005a90 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a90:	08005acd 	.word	0x08005acd
 8005a94:	08005aa1 	.word	0x08005aa1
 8005a98:	08005aaf 	.word	0x08005aaf
 8005a9c:	08005acd 	.word	0x08005acd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aa0:	4b9f      	ldr	r3, [pc, #636]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa4:	4a9e      	ldr	r2, [pc, #632]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005aac:	e00f      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ab2:	3308      	adds	r3, #8
 8005ab4:	2102      	movs	r1, #2
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f001 ff2e 	bl	8007918 <RCCEx_PLL2_Config>
 8005abc:	4603      	mov	r3, r0
 8005abe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005ac2:	e004      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005aca:	e000      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005acc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ace:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10a      	bne.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005ad6:	4b92      	ldr	r3, [pc, #584]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ada:	f023 0103 	bic.w	r1, r3, #3
 8005ade:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ae4:	4a8e      	ldr	r2, [pc, #568]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ae6:	430b      	orrs	r3, r1
 8005ae8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005aea:	e003      	b.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005af0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005af4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005b00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b04:	2300      	movs	r3, #0
 8005b06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b0a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005b0e:	460b      	mov	r3, r1
 8005b10:	4313      	orrs	r3, r2
 8005b12:	f000 8099 	beq.w	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b16:	4b83      	ldr	r3, [pc, #524]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a82      	ldr	r2, [pc, #520]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b22:	f7fc f9ff 	bl	8001f24 <HAL_GetTick>
 8005b26:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b2a:	e00b      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b2c:	f7fc f9fa 	bl	8001f24 <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	2b64      	cmp	r3, #100	; 0x64
 8005b3a:	d903      	bls.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005b42:	e005      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b44:	4b77      	ldr	r3, [pc, #476]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d0ed      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005b50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d173      	bne.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005b58:	4b71      	ldr	r3, [pc, #452]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005b64:	4053      	eors	r3, r2
 8005b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d015      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b6e:	4b6c      	ldr	r3, [pc, #432]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b76:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b7a:	4b69      	ldr	r3, [pc, #420]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7e:	4a68      	ldr	r2, [pc, #416]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b84:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b86:	4b66      	ldr	r3, [pc, #408]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8a:	4a65      	ldr	r2, [pc, #404]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b90:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005b92:	4a63      	ldr	r2, [pc, #396]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b98:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ba6:	d118      	bne.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba8:	f7fc f9bc 	bl	8001f24 <HAL_GetTick>
 8005bac:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bb0:	e00d      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bb2:	f7fc f9b7 	bl	8001f24 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005bbc:	1ad2      	subs	r2, r2, r3
 8005bbe:	f241 3388 	movw	r3, #5000	; 0x1388
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d903      	bls.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8005bcc:	e005      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bce:	4b54      	ldr	r3, [pc, #336]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d0eb      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005bda:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d129      	bne.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005be6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bf2:	d10e      	bne.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005bf4:	4b4a      	ldr	r3, [pc, #296]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c04:	091a      	lsrs	r2, r3, #4
 8005c06:	4b48      	ldr	r3, [pc, #288]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005c08:	4013      	ands	r3, r2
 8005c0a:	4a45      	ldr	r2, [pc, #276]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c0c:	430b      	orrs	r3, r1
 8005c0e:	6113      	str	r3, [r2, #16]
 8005c10:	e005      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005c12:	4b43      	ldr	r3, [pc, #268]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	4a42      	ldr	r2, [pc, #264]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c18:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005c1c:	6113      	str	r3, [r2, #16]
 8005c1e:	4b40      	ldr	r3, [pc, #256]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c20:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005c22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c2e:	4a3c      	ldr	r2, [pc, #240]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c30:	430b      	orrs	r3, r1
 8005c32:	6713      	str	r3, [r2, #112]	; 0x70
 8005c34:	e008      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c36:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c3a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8005c3e:	e003      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c44:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c50:	f002 0301 	and.w	r3, r2, #1
 8005c54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c58:	2300      	movs	r3, #0
 8005c5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c5e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c62:	460b      	mov	r3, r1
 8005c64:	4313      	orrs	r3, r2
 8005c66:	f000 8090 	beq.w	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c72:	2b28      	cmp	r3, #40	; 0x28
 8005c74:	d870      	bhi.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005c76:	a201      	add	r2, pc, #4	; (adr r2, 8005c7c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7c:	08005d61 	.word	0x08005d61
 8005c80:	08005d59 	.word	0x08005d59
 8005c84:	08005d59 	.word	0x08005d59
 8005c88:	08005d59 	.word	0x08005d59
 8005c8c:	08005d59 	.word	0x08005d59
 8005c90:	08005d59 	.word	0x08005d59
 8005c94:	08005d59 	.word	0x08005d59
 8005c98:	08005d59 	.word	0x08005d59
 8005c9c:	08005d2d 	.word	0x08005d2d
 8005ca0:	08005d59 	.word	0x08005d59
 8005ca4:	08005d59 	.word	0x08005d59
 8005ca8:	08005d59 	.word	0x08005d59
 8005cac:	08005d59 	.word	0x08005d59
 8005cb0:	08005d59 	.word	0x08005d59
 8005cb4:	08005d59 	.word	0x08005d59
 8005cb8:	08005d59 	.word	0x08005d59
 8005cbc:	08005d43 	.word	0x08005d43
 8005cc0:	08005d59 	.word	0x08005d59
 8005cc4:	08005d59 	.word	0x08005d59
 8005cc8:	08005d59 	.word	0x08005d59
 8005ccc:	08005d59 	.word	0x08005d59
 8005cd0:	08005d59 	.word	0x08005d59
 8005cd4:	08005d59 	.word	0x08005d59
 8005cd8:	08005d59 	.word	0x08005d59
 8005cdc:	08005d61 	.word	0x08005d61
 8005ce0:	08005d59 	.word	0x08005d59
 8005ce4:	08005d59 	.word	0x08005d59
 8005ce8:	08005d59 	.word	0x08005d59
 8005cec:	08005d59 	.word	0x08005d59
 8005cf0:	08005d59 	.word	0x08005d59
 8005cf4:	08005d59 	.word	0x08005d59
 8005cf8:	08005d59 	.word	0x08005d59
 8005cfc:	08005d61 	.word	0x08005d61
 8005d00:	08005d59 	.word	0x08005d59
 8005d04:	08005d59 	.word	0x08005d59
 8005d08:	08005d59 	.word	0x08005d59
 8005d0c:	08005d59 	.word	0x08005d59
 8005d10:	08005d59 	.word	0x08005d59
 8005d14:	08005d59 	.word	0x08005d59
 8005d18:	08005d59 	.word	0x08005d59
 8005d1c:	08005d61 	.word	0x08005d61
 8005d20:	58024400 	.word	0x58024400
 8005d24:	58024800 	.word	0x58024800
 8005d28:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d30:	3308      	adds	r3, #8
 8005d32:	2101      	movs	r1, #1
 8005d34:	4618      	mov	r0, r3
 8005d36:	f001 fdef 	bl	8007918 <RCCEx_PLL2_Config>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d40:	e00f      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d46:	3328      	adds	r3, #40	; 0x28
 8005d48:	2101      	movs	r1, #1
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f001 fe96 	bl	8007a7c <RCCEx_PLL3_Config>
 8005d50:	4603      	mov	r3, r0
 8005d52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d56:	e004      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005d5e:	e000      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005d60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10b      	bne.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005d6a:	4bc0      	ldr	r3, [pc, #768]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d6e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005d72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d7a:	4abc      	ldr	r2, [pc, #752]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005d7c:	430b      	orrs	r3, r1
 8005d7e:	6553      	str	r3, [r2, #84]	; 0x54
 8005d80:	e003      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d82:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d86:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d92:	f002 0302 	and.w	r3, r2, #2
 8005d96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005da0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005da4:	460b      	mov	r3, r1
 8005da6:	4313      	orrs	r3, r2
 8005da8:	d043      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005db2:	2b05      	cmp	r3, #5
 8005db4:	d824      	bhi.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8005db6:	a201      	add	r2, pc, #4	; (adr r2, 8005dbc <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8005db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dbc:	08005e09 	.word	0x08005e09
 8005dc0:	08005dd5 	.word	0x08005dd5
 8005dc4:	08005deb 	.word	0x08005deb
 8005dc8:	08005e09 	.word	0x08005e09
 8005dcc:	08005e09 	.word	0x08005e09
 8005dd0:	08005e09 	.word	0x08005e09
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005dd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dd8:	3308      	adds	r3, #8
 8005dda:	2101      	movs	r1, #1
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f001 fd9b 	bl	8007918 <RCCEx_PLL2_Config>
 8005de2:	4603      	mov	r3, r0
 8005de4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005de8:	e00f      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dee:	3328      	adds	r3, #40	; 0x28
 8005df0:	2101      	movs	r1, #1
 8005df2:	4618      	mov	r0, r3
 8005df4:	f001 fe42 	bl	8007a7c <RCCEx_PLL3_Config>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005dfe:	e004      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005e06:	e000      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8005e08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e0a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10b      	bne.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005e12:	4b96      	ldr	r3, [pc, #600]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e16:	f023 0107 	bic.w	r1, r3, #7
 8005e1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e22:	4a92      	ldr	r2, [pc, #584]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005e24:	430b      	orrs	r3, r1
 8005e26:	6553      	str	r3, [r2, #84]	; 0x54
 8005e28:	e003      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e2a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e2e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3a:	f002 0304 	and.w	r3, r2, #4
 8005e3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e42:	2300      	movs	r3, #0
 8005e44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e48:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	d043      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e5a:	2b05      	cmp	r3, #5
 8005e5c:	d824      	bhi.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005e5e:	a201      	add	r2, pc, #4	; (adr r2, 8005e64 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8005e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e64:	08005eb1 	.word	0x08005eb1
 8005e68:	08005e7d 	.word	0x08005e7d
 8005e6c:	08005e93 	.word	0x08005e93
 8005e70:	08005eb1 	.word	0x08005eb1
 8005e74:	08005eb1 	.word	0x08005eb1
 8005e78:	08005eb1 	.word	0x08005eb1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e80:	3308      	adds	r3, #8
 8005e82:	2101      	movs	r1, #1
 8005e84:	4618      	mov	r0, r3
 8005e86:	f001 fd47 	bl	8007918 <RCCEx_PLL2_Config>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005e90:	e00f      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e96:	3328      	adds	r3, #40	; 0x28
 8005e98:	2101      	movs	r1, #1
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f001 fdee 	bl	8007a7c <RCCEx_PLL3_Config>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005ea6:	e004      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005eae:	e000      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8005eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eb2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10b      	bne.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005eba:	4b6c      	ldr	r3, [pc, #432]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ebe:	f023 0107 	bic.w	r1, r3, #7
 8005ec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ec6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005eca:	4a68      	ldr	r2, [pc, #416]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005ecc:	430b      	orrs	r3, r1
 8005ece:	6593      	str	r3, [r2, #88]	; 0x58
 8005ed0:	e003      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005ed6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005eda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee2:	f002 0320 	and.w	r3, r2, #32
 8005ee6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005eea:	2300      	movs	r3, #0
 8005eec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ef0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	d055      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005efe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f06:	d033      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005f08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f0c:	d82c      	bhi.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f12:	d02f      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f18:	d826      	bhi.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005f1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f1e:	d02b      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005f20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f24:	d820      	bhi.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005f26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f2a:	d012      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f30:	d81a      	bhi.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d022      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8005f36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f3a:	d115      	bne.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f40:	3308      	adds	r3, #8
 8005f42:	2100      	movs	r1, #0
 8005f44:	4618      	mov	r0, r3
 8005f46:	f001 fce7 	bl	8007918 <RCCEx_PLL2_Config>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f50:	e015      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f56:	3328      	adds	r3, #40	; 0x28
 8005f58:	2102      	movs	r1, #2
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f001 fd8e 	bl	8007a7c <RCCEx_PLL3_Config>
 8005f60:	4603      	mov	r3, r0
 8005f62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f66:	e00a      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005f6e:	e006      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005f70:	bf00      	nop
 8005f72:	e004      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005f74:	bf00      	nop
 8005f76:	e002      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005f78:	bf00      	nop
 8005f7a:	e000      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f7e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10b      	bne.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f86:	4b39      	ldr	r3, [pc, #228]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f8a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005f8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f96:	4a35      	ldr	r2, [pc, #212]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005f98:	430b      	orrs	r3, r1
 8005f9a:	6553      	str	r3, [r2, #84]	; 0x54
 8005f9c:	e003      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f9e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005fa2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fae:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005fbc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	d058      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005fc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005fce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005fd2:	d033      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005fd4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005fd8:	d82c      	bhi.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fde:	d02f      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe4:	d826      	bhi.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005fe6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fea:	d02b      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005fec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ff0:	d820      	bhi.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005ff2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ff6:	d012      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8005ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ffc:	d81a      	bhi.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d022      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8006002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006006:	d115      	bne.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006008:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800600c:	3308      	adds	r3, #8
 800600e:	2100      	movs	r1, #0
 8006010:	4618      	mov	r0, r3
 8006012:	f001 fc81 	bl	8007918 <RCCEx_PLL2_Config>
 8006016:	4603      	mov	r3, r0
 8006018:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800601c:	e015      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800601e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006022:	3328      	adds	r3, #40	; 0x28
 8006024:	2102      	movs	r1, #2
 8006026:	4618      	mov	r0, r3
 8006028:	f001 fd28 	bl	8007a7c <RCCEx_PLL3_Config>
 800602c:	4603      	mov	r3, r0
 800602e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006032:	e00a      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800603a:	e006      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800603c:	bf00      	nop
 800603e:	e004      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006040:	bf00      	nop
 8006042:	e002      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006044:	bf00      	nop
 8006046:	e000      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800604a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800604e:	2b00      	cmp	r3, #0
 8006050:	d10e      	bne.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006052:	4b06      	ldr	r3, [pc, #24]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006056:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800605a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800605e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006062:	4a02      	ldr	r2, [pc, #8]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006064:	430b      	orrs	r3, r1
 8006066:	6593      	str	r3, [r2, #88]	; 0x58
 8006068:	e006      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800606a:	bf00      	nop
 800606c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006070:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006074:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006078:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800607c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006080:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006084:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006088:	2300      	movs	r3, #0
 800608a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800608e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006092:	460b      	mov	r3, r1
 8006094:	4313      	orrs	r3, r2
 8006096:	d055      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006098:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800609c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80060a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80060a4:	d033      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80060a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80060aa:	d82c      	bhi.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80060ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060b0:	d02f      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80060b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060b6:	d826      	bhi.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80060b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80060bc:	d02b      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80060be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80060c2:	d820      	bhi.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80060c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060c8:	d012      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80060ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060ce:	d81a      	bhi.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d022      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80060d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060d8:	d115      	bne.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060de:	3308      	adds	r3, #8
 80060e0:	2100      	movs	r1, #0
 80060e2:	4618      	mov	r0, r3
 80060e4:	f001 fc18 	bl	8007918 <RCCEx_PLL2_Config>
 80060e8:	4603      	mov	r3, r0
 80060ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80060ee:	e015      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060f4:	3328      	adds	r3, #40	; 0x28
 80060f6:	2102      	movs	r1, #2
 80060f8:	4618      	mov	r0, r3
 80060fa:	f001 fcbf 	bl	8007a7c <RCCEx_PLL3_Config>
 80060fe:	4603      	mov	r3, r0
 8006100:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006104:	e00a      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800610c:	e006      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800610e:	bf00      	nop
 8006110:	e004      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006112:	bf00      	nop
 8006114:	e002      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006116:	bf00      	nop
 8006118:	e000      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800611a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800611c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10b      	bne.n	800613c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006124:	4ba1      	ldr	r3, [pc, #644]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006128:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800612c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006130:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006134:	4a9d      	ldr	r2, [pc, #628]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006136:	430b      	orrs	r3, r1
 8006138:	6593      	str	r3, [r2, #88]	; 0x58
 800613a:	e003      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800613c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006140:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006144:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614c:	f002 0308 	and.w	r3, r2, #8
 8006150:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006154:	2300      	movs	r3, #0
 8006156:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800615a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800615e:	460b      	mov	r3, r1
 8006160:	4313      	orrs	r3, r2
 8006162:	d01e      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006164:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800616c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006170:	d10c      	bne.n	800618c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006172:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006176:	3328      	adds	r3, #40	; 0x28
 8006178:	2102      	movs	r1, #2
 800617a:	4618      	mov	r0, r3
 800617c:	f001 fc7e 	bl	8007a7c <RCCEx_PLL3_Config>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d002      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800618c:	4b87      	ldr	r3, [pc, #540]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800618e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006190:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006194:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006198:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800619c:	4a83      	ldr	r2, [pc, #524]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800619e:	430b      	orrs	r3, r1
 80061a0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80061a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061aa:	f002 0310 	and.w	r3, r2, #16
 80061ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80061b2:	2300      	movs	r3, #0
 80061b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80061b8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80061bc:	460b      	mov	r3, r1
 80061be:	4313      	orrs	r3, r2
 80061c0:	d01e      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80061c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80061ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061ce:	d10c      	bne.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80061d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061d4:	3328      	adds	r3, #40	; 0x28
 80061d6:	2102      	movs	r1, #2
 80061d8:	4618      	mov	r0, r3
 80061da:	f001 fc4f 	bl	8007a7c <RCCEx_PLL3_Config>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d002      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80061ea:	4b70      	ldr	r3, [pc, #448]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80061ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80061f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80061fa:	4a6c      	ldr	r2, [pc, #432]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80061fc:	430b      	orrs	r3, r1
 80061fe:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006200:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006208:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800620c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006210:	2300      	movs	r3, #0
 8006212:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006216:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800621a:	460b      	mov	r3, r1
 800621c:	4313      	orrs	r3, r2
 800621e:	d03e      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006220:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006224:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006228:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800622c:	d022      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800622e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006232:	d81b      	bhi.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006234:	2b00      	cmp	r3, #0
 8006236:	d003      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8006238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800623c:	d00b      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800623e:	e015      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006240:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006244:	3308      	adds	r3, #8
 8006246:	2100      	movs	r1, #0
 8006248:	4618      	mov	r0, r3
 800624a:	f001 fb65 	bl	8007918 <RCCEx_PLL2_Config>
 800624e:	4603      	mov	r3, r0
 8006250:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006254:	e00f      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006256:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800625a:	3328      	adds	r3, #40	; 0x28
 800625c:	2102      	movs	r1, #2
 800625e:	4618      	mov	r0, r3
 8006260:	f001 fc0c 	bl	8007a7c <RCCEx_PLL3_Config>
 8006264:	4603      	mov	r3, r0
 8006266:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800626a:	e004      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006272:	e000      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8006274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006276:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10b      	bne.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800627e:	4b4b      	ldr	r3, [pc, #300]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006282:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006286:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800628a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800628e:	4a47      	ldr	r2, [pc, #284]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006290:	430b      	orrs	r3, r1
 8006292:	6593      	str	r3, [r2, #88]	; 0x58
 8006294:	e003      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006296:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800629a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800629e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80062aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80062ac:	2300      	movs	r3, #0
 80062ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80062b0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80062b4:	460b      	mov	r3, r1
 80062b6:	4313      	orrs	r3, r2
 80062b8:	d03b      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80062ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062c6:	d01f      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80062c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062cc:	d818      	bhi.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80062ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062d2:	d003      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80062d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062d8:	d007      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80062da:	e011      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062dc:	4b33      	ldr	r3, [pc, #204]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e0:	4a32      	ldr	r2, [pc, #200]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80062e8:	e00f      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062ee:	3328      	adds	r3, #40	; 0x28
 80062f0:	2101      	movs	r1, #1
 80062f2:	4618      	mov	r0, r3
 80062f4:	f001 fbc2 	bl	8007a7c <RCCEx_PLL3_Config>
 80062f8:	4603      	mov	r3, r0
 80062fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80062fe:	e004      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006306:	e000      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8006308:	bf00      	nop
    }

    if (ret == HAL_OK)
 800630a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10b      	bne.n	800632a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006312:	4b26      	ldr	r3, [pc, #152]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006316:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800631a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800631e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006322:	4a22      	ldr	r2, [pc, #136]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006324:	430b      	orrs	r3, r1
 8006326:	6553      	str	r3, [r2, #84]	; 0x54
 8006328:	e003      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800632a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800632e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006332:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800633e:	673b      	str	r3, [r7, #112]	; 0x70
 8006340:	2300      	movs	r3, #0
 8006342:	677b      	str	r3, [r7, #116]	; 0x74
 8006344:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006348:	460b      	mov	r3, r1
 800634a:	4313      	orrs	r3, r2
 800634c:	d034      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800634e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006354:	2b00      	cmp	r3, #0
 8006356:	d003      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8006358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800635c:	d007      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800635e:	e011      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006360:	4b12      	ldr	r3, [pc, #72]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006364:	4a11      	ldr	r2, [pc, #68]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006366:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800636a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800636c:	e00e      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800636e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006372:	3308      	adds	r3, #8
 8006374:	2102      	movs	r1, #2
 8006376:	4618      	mov	r0, r3
 8006378:	f001 face 	bl	8007918 <RCCEx_PLL2_Config>
 800637c:	4603      	mov	r3, r0
 800637e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006382:	e003      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800638a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800638c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10d      	bne.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006394:	4b05      	ldr	r3, [pc, #20]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006398:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800639c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a2:	4a02      	ldr	r2, [pc, #8]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80063a4:	430b      	orrs	r3, r1
 80063a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063a8:	e006      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80063aa:	bf00      	nop
 80063ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80063b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80063b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80063c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80063c6:	2300      	movs	r3, #0
 80063c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063ca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80063ce:	460b      	mov	r3, r1
 80063d0:	4313      	orrs	r3, r2
 80063d2:	d00c      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80063d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063d8:	3328      	adds	r3, #40	; 0x28
 80063da:	2102      	movs	r1, #2
 80063dc:	4618      	mov	r0, r3
 80063de:	f001 fb4d 	bl	8007a7c <RCCEx_PLL3_Config>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d002      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80063ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80063fa:	663b      	str	r3, [r7, #96]	; 0x60
 80063fc:	2300      	movs	r3, #0
 80063fe:	667b      	str	r3, [r7, #100]	; 0x64
 8006400:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006404:	460b      	mov	r3, r1
 8006406:	4313      	orrs	r3, r2
 8006408:	d038      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800640a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800640e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006412:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006416:	d018      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8006418:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800641c:	d811      	bhi.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800641e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006422:	d014      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8006424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006428:	d80b      	bhi.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800642a:	2b00      	cmp	r3, #0
 800642c:	d011      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800642e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006432:	d106      	bne.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006434:	4bc3      	ldr	r3, [pc, #780]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006438:	4ac2      	ldr	r2, [pc, #776]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800643a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800643e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006440:	e008      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006448:	e004      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800644a:	bf00      	nop
 800644c:	e002      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800644e:	bf00      	nop
 8006450:	e000      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006452:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006454:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10b      	bne.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800645c:	4bb9      	ldr	r3, [pc, #740]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800645e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006460:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006464:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800646c:	4ab5      	ldr	r2, [pc, #724]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800646e:	430b      	orrs	r3, r1
 8006470:	6553      	str	r3, [r2, #84]	; 0x54
 8006472:	e003      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006474:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006478:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800647c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006484:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006488:	65bb      	str	r3, [r7, #88]	; 0x58
 800648a:	2300      	movs	r3, #0
 800648c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800648e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006492:	460b      	mov	r3, r1
 8006494:	4313      	orrs	r3, r2
 8006496:	d009      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006498:	4baa      	ldr	r3, [pc, #680]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800649a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800649c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80064a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064a6:	4aa7      	ldr	r2, [pc, #668]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80064a8:	430b      	orrs	r3, r1
 80064aa:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80064ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80064b8:	653b      	str	r3, [r7, #80]	; 0x50
 80064ba:	2300      	movs	r3, #0
 80064bc:	657b      	str	r3, [r7, #84]	; 0x54
 80064be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80064c2:	460b      	mov	r3, r1
 80064c4:	4313      	orrs	r3, r2
 80064c6:	d009      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80064c8:	4b9e      	ldr	r3, [pc, #632]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80064ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064cc:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80064d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d6:	4a9b      	ldr	r2, [pc, #620]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80064d8:	430b      	orrs	r3, r1
 80064da:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80064dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80064e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80064ea:	2300      	movs	r3, #0
 80064ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064ee:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80064f2:	460b      	mov	r3, r1
 80064f4:	4313      	orrs	r3, r2
 80064f6:	d009      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80064f8:	4b92      	ldr	r3, [pc, #584]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80064fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064fc:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8006500:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006506:	4a8f      	ldr	r2, [pc, #572]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006508:	430b      	orrs	r3, r1
 800650a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800650c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006514:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006518:	643b      	str	r3, [r7, #64]	; 0x40
 800651a:	2300      	movs	r3, #0
 800651c:	647b      	str	r3, [r7, #68]	; 0x44
 800651e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006522:	460b      	mov	r3, r1
 8006524:	4313      	orrs	r3, r2
 8006526:	d00e      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006528:	4b86      	ldr	r3, [pc, #536]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	4a85      	ldr	r2, [pc, #532]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800652e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006532:	6113      	str	r3, [r2, #16]
 8006534:	4b83      	ldr	r3, [pc, #524]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006536:	6919      	ldr	r1, [r3, #16]
 8006538:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800653c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006540:	4a80      	ldr	r2, [pc, #512]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006542:	430b      	orrs	r3, r1
 8006544:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006546:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800654a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006552:	63bb      	str	r3, [r7, #56]	; 0x38
 8006554:	2300      	movs	r3, #0
 8006556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006558:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800655c:	460b      	mov	r3, r1
 800655e:	4313      	orrs	r3, r2
 8006560:	d009      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006562:	4b78      	ldr	r3, [pc, #480]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006566:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800656a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800656e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006570:	4a74      	ldr	r2, [pc, #464]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006572:	430b      	orrs	r3, r1
 8006574:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006576:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800657a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006582:	633b      	str	r3, [r7, #48]	; 0x30
 8006584:	2300      	movs	r3, #0
 8006586:	637b      	str	r3, [r7, #52]	; 0x34
 8006588:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800658c:	460b      	mov	r3, r1
 800658e:	4313      	orrs	r3, r2
 8006590:	d00a      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006592:	4b6c      	ldr	r3, [pc, #432]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006596:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800659a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800659e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065a2:	4a68      	ldr	r2, [pc, #416]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80065a4:	430b      	orrs	r3, r1
 80065a6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80065a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b0:	2100      	movs	r1, #0
 80065b2:	62b9      	str	r1, [r7, #40]	; 0x28
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065ba:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80065be:	460b      	mov	r3, r1
 80065c0:	4313      	orrs	r3, r2
 80065c2:	d011      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065c8:	3308      	adds	r3, #8
 80065ca:	2100      	movs	r1, #0
 80065cc:	4618      	mov	r0, r3
 80065ce:	f001 f9a3 	bl	8007918 <RCCEx_PLL2_Config>
 80065d2:	4603      	mov	r3, r0
 80065d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80065d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d003      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80065e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80065e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f0:	2100      	movs	r1, #0
 80065f2:	6239      	str	r1, [r7, #32]
 80065f4:	f003 0302 	and.w	r3, r3, #2
 80065f8:	627b      	str	r3, [r7, #36]	; 0x24
 80065fa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80065fe:	460b      	mov	r3, r1
 8006600:	4313      	orrs	r3, r2
 8006602:	d011      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006604:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006608:	3308      	adds	r3, #8
 800660a:	2101      	movs	r1, #1
 800660c:	4618      	mov	r0, r3
 800660e:	f001 f983 	bl	8007918 <RCCEx_PLL2_Config>
 8006612:	4603      	mov	r3, r0
 8006614:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006618:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800661c:	2b00      	cmp	r3, #0
 800661e:	d003      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006620:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006624:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006628:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800662c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006630:	2100      	movs	r1, #0
 8006632:	61b9      	str	r1, [r7, #24]
 8006634:	f003 0304 	and.w	r3, r3, #4
 8006638:	61fb      	str	r3, [r7, #28]
 800663a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800663e:	460b      	mov	r3, r1
 8006640:	4313      	orrs	r3, r2
 8006642:	d011      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006644:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006648:	3308      	adds	r3, #8
 800664a:	2102      	movs	r1, #2
 800664c:	4618      	mov	r0, r3
 800664e:	f001 f963 	bl	8007918 <RCCEx_PLL2_Config>
 8006652:	4603      	mov	r3, r0
 8006654:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006658:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800665c:	2b00      	cmp	r3, #0
 800665e:	d003      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006660:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006664:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006668:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800666c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006670:	2100      	movs	r1, #0
 8006672:	6139      	str	r1, [r7, #16]
 8006674:	f003 0308 	and.w	r3, r3, #8
 8006678:	617b      	str	r3, [r7, #20]
 800667a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800667e:	460b      	mov	r3, r1
 8006680:	4313      	orrs	r3, r2
 8006682:	d011      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006688:	3328      	adds	r3, #40	; 0x28
 800668a:	2100      	movs	r1, #0
 800668c:	4618      	mov	r0, r3
 800668e:	f001 f9f5 	bl	8007a7c <RCCEx_PLL3_Config>
 8006692:	4603      	mov	r3, r0
 8006694:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8006698:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800669c:	2b00      	cmp	r3, #0
 800669e:	d003      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80066a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80066a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b0:	2100      	movs	r1, #0
 80066b2:	60b9      	str	r1, [r7, #8]
 80066b4:	f003 0310 	and.w	r3, r3, #16
 80066b8:	60fb      	str	r3, [r7, #12]
 80066ba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80066be:	460b      	mov	r3, r1
 80066c0:	4313      	orrs	r3, r2
 80066c2:	d011      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066c8:	3328      	adds	r3, #40	; 0x28
 80066ca:	2101      	movs	r1, #1
 80066cc:	4618      	mov	r0, r3
 80066ce:	f001 f9d5 	bl	8007a7c <RCCEx_PLL3_Config>
 80066d2:	4603      	mov	r3, r0
 80066d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80066d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d003      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80066e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80066e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f0:	2100      	movs	r1, #0
 80066f2:	6039      	str	r1, [r7, #0]
 80066f4:	f003 0320 	and.w	r3, r3, #32
 80066f8:	607b      	str	r3, [r7, #4]
 80066fa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80066fe:	460b      	mov	r3, r1
 8006700:	4313      	orrs	r3, r2
 8006702:	d011      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006704:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006708:	3328      	adds	r3, #40	; 0x28
 800670a:	2102      	movs	r1, #2
 800670c:	4618      	mov	r0, r3
 800670e:	f001 f9b5 	bl	8007a7c <RCCEx_PLL3_Config>
 8006712:	4603      	mov	r3, r0
 8006714:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006718:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800671c:	2b00      	cmp	r3, #0
 800671e:	d003      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006720:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006724:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8006728:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800672c:	2b00      	cmp	r3, #0
 800672e:	d101      	bne.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8006730:	2300      	movs	r3, #0
 8006732:	e000      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
}
 8006736:	4618      	mov	r0, r3
 8006738:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800673c:	46bd      	mov	sp, r7
 800673e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006742:	bf00      	nop
 8006744:	58024400 	.word	0x58024400

08006748 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b090      	sub	sp, #64	; 0x40
 800674c:	af00      	add	r7, sp, #0
 800674e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006752:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006756:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800675a:	430b      	orrs	r3, r1
 800675c:	f040 8094 	bne.w	8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006760:	4b97      	ldr	r3, [pc, #604]	; (80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006764:	f003 0307 	and.w	r3, r3, #7
 8006768:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800676a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676c:	2b04      	cmp	r3, #4
 800676e:	f200 8087 	bhi.w	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006772:	a201      	add	r2, pc, #4	; (adr r2, 8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006778:	0800678d 	.word	0x0800678d
 800677c:	080067b5 	.word	0x080067b5
 8006780:	080067dd 	.word	0x080067dd
 8006784:	08006879 	.word	0x08006879
 8006788:	08006805 	.word	0x08006805
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800678c:	4b8c      	ldr	r3, [pc, #560]	; (80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006794:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006798:	d108      	bne.n	80067ac <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800679a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800679e:	4618      	mov	r0, r3
 80067a0:	f000 ff68 	bl	8007674 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067a8:	f000 bc97 	b.w	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80067ac:	2300      	movs	r3, #0
 80067ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067b0:	f000 bc93 	b.w	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067b4:	4b82      	ldr	r3, [pc, #520]	; (80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067c0:	d108      	bne.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067c2:	f107 0318 	add.w	r3, r7, #24
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 fcac 	bl	8007124 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067d0:	f000 bc83 	b.w	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80067d4:	2300      	movs	r3, #0
 80067d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067d8:	f000 bc7f 	b.w	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80067dc:	4b78      	ldr	r3, [pc, #480]	; (80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067e8:	d108      	bne.n	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067ea:	f107 030c 	add.w	r3, r7, #12
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 fdec 	bl	80073cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067f8:	f000 bc6f 	b.w	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80067fc:	2300      	movs	r3, #0
 80067fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006800:	f000 bc6b 	b.w	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006804:	4b6e      	ldr	r3, [pc, #440]	; (80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006808:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800680c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800680e:	4b6c      	ldr	r3, [pc, #432]	; (80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0304 	and.w	r3, r3, #4
 8006816:	2b04      	cmp	r3, #4
 8006818:	d10c      	bne.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800681a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800681c:	2b00      	cmp	r3, #0
 800681e:	d109      	bne.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006820:	4b67      	ldr	r3, [pc, #412]	; (80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	08db      	lsrs	r3, r3, #3
 8006826:	f003 0303 	and.w	r3, r3, #3
 800682a:	4a66      	ldr	r2, [pc, #408]	; (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800682c:	fa22 f303 	lsr.w	r3, r2, r3
 8006830:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006832:	e01f      	b.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006834:	4b62      	ldr	r3, [pc, #392]	; (80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800683c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006840:	d106      	bne.n	8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006844:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006848:	d102      	bne.n	8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800684a:	4b5f      	ldr	r3, [pc, #380]	; (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800684c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800684e:	e011      	b.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006850:	4b5b      	ldr	r3, [pc, #364]	; (80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006858:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800685c:	d106      	bne.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800685e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006864:	d102      	bne.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006866:	4b59      	ldr	r3, [pc, #356]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006868:	63fb      	str	r3, [r7, #60]	; 0x3c
 800686a:	e003      	b.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800686c:	2300      	movs	r3, #0
 800686e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006870:	f000 bc33 	b.w	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006874:	f000 bc31 	b.w	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006878:	4b55      	ldr	r3, [pc, #340]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800687a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800687c:	f000 bc2d 	b.w	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8006880:	2300      	movs	r3, #0
 8006882:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006884:	f000 bc29 	b.w	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8006888:	e9d7 2300 	ldrd	r2, r3, [r7]
 800688c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006890:	430b      	orrs	r3, r1
 8006892:	f040 809f 	bne.w	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8006896:	4b4a      	ldr	r3, [pc, #296]	; (80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800689a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800689e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80068a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068a6:	d04d      	beq.n	8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80068a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068ae:	f200 8084 	bhi.w	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80068b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b4:	2bc0      	cmp	r3, #192	; 0xc0
 80068b6:	d07d      	beq.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 80068b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ba:	2bc0      	cmp	r3, #192	; 0xc0
 80068bc:	d87d      	bhi.n	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80068be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c0:	2b80      	cmp	r3, #128	; 0x80
 80068c2:	d02d      	beq.n	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 80068c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c6:	2b80      	cmp	r3, #128	; 0x80
 80068c8:	d877      	bhi.n	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80068ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d003      	beq.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 80068d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d2:	2b40      	cmp	r3, #64	; 0x40
 80068d4:	d012      	beq.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80068d6:	e070      	b.n	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068d8:	4b39      	ldr	r3, [pc, #228]	; (80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068e4:	d107      	bne.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 fec2 	bl	8007674 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80068f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068f4:	e3f1      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80068f6:	2300      	movs	r3, #0
 80068f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068fa:	e3ee      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068fc:	4b30      	ldr	r3, [pc, #192]	; (80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006904:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006908:	d107      	bne.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800690a:	f107 0318 	add.w	r3, r7, #24
 800690e:	4618      	mov	r0, r3
 8006910:	f000 fc08 	bl	8007124 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006918:	e3df      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800691a:	2300      	movs	r3, #0
 800691c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800691e:	e3dc      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006920:	4b27      	ldr	r3, [pc, #156]	; (80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006928:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800692c:	d107      	bne.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800692e:	f107 030c 	add.w	r3, r7, #12
 8006932:	4618      	mov	r0, r3
 8006934:	f000 fd4a 	bl	80073cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800693c:	e3cd      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800693e:	2300      	movs	r3, #0
 8006940:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006942:	e3ca      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006944:	4b1e      	ldr	r3, [pc, #120]	; (80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006948:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800694c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800694e:	4b1c      	ldr	r3, [pc, #112]	; (80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0304 	and.w	r3, r3, #4
 8006956:	2b04      	cmp	r3, #4
 8006958:	d10c      	bne.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800695a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800695c:	2b00      	cmp	r3, #0
 800695e:	d109      	bne.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006960:	4b17      	ldr	r3, [pc, #92]	; (80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	08db      	lsrs	r3, r3, #3
 8006966:	f003 0303 	and.w	r3, r3, #3
 800696a:	4a16      	ldr	r2, [pc, #88]	; (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800696c:	fa22 f303 	lsr.w	r3, r2, r3
 8006970:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006972:	e01e      	b.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006974:	4b12      	ldr	r3, [pc, #72]	; (80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800697c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006980:	d106      	bne.n	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8006982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006984:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006988:	d102      	bne.n	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800698a:	4b0f      	ldr	r3, [pc, #60]	; (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800698c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800698e:	e010      	b.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006990:	4b0b      	ldr	r3, [pc, #44]	; (80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006998:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800699c:	d106      	bne.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800699e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069a4:	d102      	bne.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80069a6:	4b09      	ldr	r3, [pc, #36]	; (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80069a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069aa:	e002      	b.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80069ac:	2300      	movs	r3, #0
 80069ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80069b0:	e393      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80069b2:	e392      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80069b4:	4b06      	ldr	r3, [pc, #24]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80069b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069b8:	e38f      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80069ba:	2300      	movs	r3, #0
 80069bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069be:	e38c      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80069c0:	58024400 	.word	0x58024400
 80069c4:	03d09000 	.word	0x03d09000
 80069c8:	003d0900 	.word	0x003d0900
 80069cc:	007a1200 	.word	0x007a1200
 80069d0:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80069d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069d8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80069dc:	430b      	orrs	r3, r1
 80069de:	f040 809c 	bne.w	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 80069e2:	4b9e      	ldr	r3, [pc, #632]	; (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80069e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069e6:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80069ea:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80069ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069f2:	d054      	beq.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 80069f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069fa:	f200 808b 	bhi.w	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80069fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a00:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006a04:	f000 8083 	beq.w	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8006a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006a0e:	f200 8081 	bhi.w	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a18:	d02f      	beq.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a20:	d878      	bhi.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d004      	beq.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8006a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a2e:	d012      	beq.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8006a30:	e070      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a32:	4b8a      	ldr	r3, [pc, #552]	; (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a3e:	d107      	bne.n	8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a44:	4618      	mov	r0, r3
 8006a46:	f000 fe15 	bl	8007674 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a4e:	e344      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006a50:	2300      	movs	r3, #0
 8006a52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a54:	e341      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a56:	4b81      	ldr	r3, [pc, #516]	; (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a62:	d107      	bne.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a64:	f107 0318 	add.w	r3, r7, #24
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f000 fb5b 	bl	8007124 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a72:	e332      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006a74:	2300      	movs	r3, #0
 8006a76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a78:	e32f      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a7a:	4b78      	ldr	r3, [pc, #480]	; (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a86:	d107      	bne.n	8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a88:	f107 030c 	add.w	r3, r7, #12
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 fc9d 	bl	80073cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a96:	e320      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a9c:	e31d      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a9e:	4b6f      	ldr	r3, [pc, #444]	; (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aa2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006aa6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006aa8:	4b6c      	ldr	r3, [pc, #432]	; (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0304 	and.w	r3, r3, #4
 8006ab0:	2b04      	cmp	r3, #4
 8006ab2:	d10c      	bne.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8006ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d109      	bne.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006aba:	4b68      	ldr	r3, [pc, #416]	; (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	08db      	lsrs	r3, r3, #3
 8006ac0:	f003 0303 	and.w	r3, r3, #3
 8006ac4:	4a66      	ldr	r2, [pc, #408]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8006ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8006aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006acc:	e01e      	b.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ace:	4b63      	ldr	r3, [pc, #396]	; (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ada:	d106      	bne.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ade:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ae2:	d102      	bne.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006ae4:	4b5f      	ldr	r3, [pc, #380]	; (8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8006ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ae8:	e010      	b.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006aea:	4b5c      	ldr	r3, [pc, #368]	; (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006af2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006af6:	d106      	bne.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006afa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006afe:	d102      	bne.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006b00:	4b59      	ldr	r3, [pc, #356]	; (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8006b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b04:	e002      	b.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006b06:	2300      	movs	r3, #0
 8006b08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 8006b0a:	e2e6      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006b0c:	e2e5      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006b0e:	4b57      	ldr	r3, [pc, #348]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006b10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b12:	e2e2      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006b14:	2300      	movs	r3, #0
 8006b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b18:	e2df      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006b1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b1e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006b22:	430b      	orrs	r3, r1
 8006b24:	f040 80a7 	bne.w	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006b28:	4b4c      	ldr	r3, [pc, #304]	; (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b2c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006b30:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b38:	d055      	beq.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8006b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b40:	f200 8096 	bhi.w	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b4a:	f000 8084 	beq.w	8006c56 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8006b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b54:	f200 808c 	bhi.w	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b5e:	d030      	beq.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8006b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b66:	f200 8083 	bhi.w	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d004      	beq.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8006b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b76:	d012      	beq.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8006b78:	e07a      	b.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b7a:	4b38      	ldr	r3, [pc, #224]	; (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b86:	d107      	bne.n	8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f000 fd71 	bl	8007674 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b96:	e2a0      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b9c:	e29d      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b9e:	4b2f      	ldr	r3, [pc, #188]	; (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ba6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006baa:	d107      	bne.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bac:	f107 0318 	add.w	r3, r7, #24
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f000 fab7 	bl	8007124 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bba:	e28e      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bc0:	e28b      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006bc2:	4b26      	ldr	r3, [pc, #152]	; (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bce:	d107      	bne.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bd0:	f107 030c 	add.w	r3, r7, #12
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f000 fbf9 	bl	80073cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bde:	e27c      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006be0:	2300      	movs	r3, #0
 8006be2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006be4:	e279      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006be6:	4b1d      	ldr	r3, [pc, #116]	; (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006bee:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006bf0:	4b1a      	ldr	r3, [pc, #104]	; (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 0304 	and.w	r3, r3, #4
 8006bf8:	2b04      	cmp	r3, #4
 8006bfa:	d10c      	bne.n	8006c16 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8006bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d109      	bne.n	8006c16 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c02:	4b16      	ldr	r3, [pc, #88]	; (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	08db      	lsrs	r3, r3, #3
 8006c08:	f003 0303 	and.w	r3, r3, #3
 8006c0c:	4a14      	ldr	r2, [pc, #80]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8006c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c14:	e01e      	b.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c16:	4b11      	ldr	r3, [pc, #68]	; (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c22:	d106      	bne.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c2a:	d102      	bne.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006c2c:	4b0d      	ldr	r3, [pc, #52]	; (8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8006c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c30:	e010      	b.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c32:	4b0a      	ldr	r3, [pc, #40]	; (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c3e:	d106      	bne.n	8006c4e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c46:	d102      	bne.n	8006c4e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006c48:	4b07      	ldr	r3, [pc, #28]	; (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8006c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c4c:	e002      	b.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006c52:	e242      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006c54:	e241      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006c56:	4b05      	ldr	r3, [pc, #20]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006c58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c5a:	e23e      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006c5c:	58024400 	.word	0x58024400
 8006c60:	03d09000 	.word	0x03d09000
 8006c64:	003d0900 	.word	0x003d0900
 8006c68:	007a1200 	.word	0x007a1200
 8006c6c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8006c70:	2300      	movs	r3, #0
 8006c72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c74:	e231      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006c76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c7a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006c7e:	430b      	orrs	r3, r1
 8006c80:	f040 8085 	bne.w	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006c84:	4b9c      	ldr	r3, [pc, #624]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c88:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006c8c:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c94:	d06b      	beq.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8006c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c9c:	d874      	bhi.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ca4:	d056      	beq.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006cac:	d86c      	bhi.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006cb4:	d03b      	beq.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8006cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006cbc:	d864      	bhi.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cc4:	d021      	beq.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8006cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ccc:	d85c      	bhi.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d004      	beq.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8006cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cda:	d004      	beq.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8006cdc:	e054      	b.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006cde:	f7fe fb49 	bl	8005374 <HAL_RCC_GetPCLK1Freq>
 8006ce2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006ce4:	e1f9      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ce6:	4b84      	ldr	r3, [pc, #528]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cf2:	d107      	bne.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cf4:	f107 0318 	add.w	r3, r7, #24
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f000 fa13 	bl	8007124 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d02:	e1ea      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006d04:	2300      	movs	r3, #0
 8006d06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d08:	e1e7      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d0a:	4b7b      	ldr	r3, [pc, #492]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d16:	d107      	bne.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d18:	f107 030c 	add.w	r3, r7, #12
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f000 fb55 	bl	80073cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d26:	e1d8      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d2c:	e1d5      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d2e:	4b72      	ldr	r3, [pc, #456]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0304 	and.w	r3, r3, #4
 8006d36:	2b04      	cmp	r3, #4
 8006d38:	d109      	bne.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d3a:	4b6f      	ldr	r3, [pc, #444]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	08db      	lsrs	r3, r3, #3
 8006d40:	f003 0303 	and.w	r3, r3, #3
 8006d44:	4a6d      	ldr	r2, [pc, #436]	; (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006d46:	fa22 f303 	lsr.w	r3, r2, r3
 8006d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d4c:	e1c5      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d52:	e1c2      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006d54:	4b68      	ldr	r3, [pc, #416]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d60:	d102      	bne.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8006d62:	4b67      	ldr	r3, [pc, #412]	; (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006d64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d66:	e1b8      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d6c:	e1b5      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006d6e:	4b62      	ldr	r3, [pc, #392]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d7a:	d102      	bne.n	8006d82 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8006d7c:	4b61      	ldr	r3, [pc, #388]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8006d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d80:	e1ab      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006d82:	2300      	movs	r3, #0
 8006d84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d86:	e1a8      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d8c:	e1a5      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006d8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d92:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006d96:	430b      	orrs	r3, r1
 8006d98:	d173      	bne.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006d9a:	4b57      	ldr	r3, [pc, #348]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006da2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006daa:	d02f      	beq.n	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8006dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006db2:	d863      	bhi.n	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8006db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d004      	beq.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dc0:	d012      	beq.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8006dc2:	e05b      	b.n	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006dc4:	4b4c      	ldr	r3, [pc, #304]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dd0:	d107      	bne.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dd2:	f107 0318 	add.w	r3, r7, #24
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f000 f9a4 	bl	8007124 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006de0:	e17b      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006de2:	2300      	movs	r3, #0
 8006de4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006de6:	e178      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006de8:	4b43      	ldr	r3, [pc, #268]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006df0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006df4:	d107      	bne.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006df6:	f107 030c 	add.w	r3, r7, #12
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 fae6 	bl	80073cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e04:	e169      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006e06:	2300      	movs	r3, #0
 8006e08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e0a:	e166      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e0c:	4b3a      	ldr	r3, [pc, #232]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e14:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e16:	4b38      	ldr	r3, [pc, #224]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0304 	and.w	r3, r3, #4
 8006e1e:	2b04      	cmp	r3, #4
 8006e20:	d10c      	bne.n	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8006e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d109      	bne.n	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e28:	4b33      	ldr	r3, [pc, #204]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	08db      	lsrs	r3, r3, #3
 8006e2e:	f003 0303 	and.w	r3, r3, #3
 8006e32:	4a32      	ldr	r2, [pc, #200]	; (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006e34:	fa22 f303 	lsr.w	r3, r2, r3
 8006e38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e3a:	e01e      	b.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e3c:	4b2e      	ldr	r3, [pc, #184]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e48:	d106      	bne.n	8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8006e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e50:	d102      	bne.n	8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006e52:	4b2b      	ldr	r3, [pc, #172]	; (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006e54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e56:	e010      	b.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e58:	4b27      	ldr	r3, [pc, #156]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e64:	d106      	bne.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8006e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e6c:	d102      	bne.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006e6e:	4b25      	ldr	r3, [pc, #148]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8006e70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e72:	e002      	b.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006e74:	2300      	movs	r3, #0
 8006e76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006e78:	e12f      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006e7a:	e12e      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e80:	e12b      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006e82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e86:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006e8a:	430b      	orrs	r3, r1
 8006e8c:	d13c      	bne.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006e8e:	4b1a      	ldr	r3, [pc, #104]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e96:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d004      	beq.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8006e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ea4:	d012      	beq.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8006ea6:	e023      	b.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ea8:	4b13      	ldr	r3, [pc, #76]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006eb4:	d107      	bne.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f000 fbda 	bl	8007674 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ec4:	e109      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006eca:	e106      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ecc:	4b0a      	ldr	r3, [pc, #40]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ed4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ed8:	d107      	bne.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006eda:	f107 0318 	add.w	r3, r7, #24
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 f920 	bl	8007124 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006ee4:	6a3b      	ldr	r3, [r7, #32]
 8006ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ee8:	e0f7      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006eea:	2300      	movs	r3, #0
 8006eec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006eee:	e0f4      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ef4:	e0f1      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006ef6:	bf00      	nop
 8006ef8:	58024400 	.word	0x58024400
 8006efc:	03d09000 	.word	0x03d09000
 8006f00:	003d0900 	.word	0x003d0900
 8006f04:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006f08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f0c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006f10:	430b      	orrs	r3, r1
 8006f12:	f040 8091 	bne.w	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006f16:	4b73      	ldr	r3, [pc, #460]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f1a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006f1e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f22:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006f26:	f000 8081 	beq.w	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006f30:	d87f      	bhi.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f38:	d06b      	beq.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8006f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f40:	d877      	bhi.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f48:	d056      	beq.n	8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8006f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f50:	d86f      	bhi.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f58:	d03b      	beq.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8006f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f60:	d867      	bhi.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f68:	d021      	beq.n	8006fae <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8006f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f70:	d85f      	bhi.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d004      	beq.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f7e:	d004      	beq.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8006f80:	e057      	b.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006f82:	f000 f8b9 	bl	80070f8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006f86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006f88:	e0a7      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f8a:	4b56      	ldr	r3, [pc, #344]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f96:	d107      	bne.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f98:	f107 0318 	add.w	r3, r7, #24
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f000 f8c1 	bl	8007124 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fa6:	e098      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fac:	e095      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006fae:	4b4d      	ldr	r3, [pc, #308]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fba:	d107      	bne.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fbc:	f107 030c 	add.w	r3, r7, #12
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f000 fa03 	bl	80073cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fca:	e086      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fd0:	e083      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006fd2:	4b44      	ldr	r3, [pc, #272]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 0304 	and.w	r3, r3, #4
 8006fda:	2b04      	cmp	r3, #4
 8006fdc:	d109      	bne.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fde:	4b41      	ldr	r3, [pc, #260]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	08db      	lsrs	r3, r3, #3
 8006fe4:	f003 0303 	and.w	r3, r3, #3
 8006fe8:	4a3f      	ldr	r2, [pc, #252]	; (80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006fea:	fa22 f303 	lsr.w	r3, r2, r3
 8006fee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ff0:	e073      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ff6:	e070      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006ff8:	4b3a      	ldr	r3, [pc, #232]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007004:	d102      	bne.n	800700c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8007006:	4b39      	ldr	r3, [pc, #228]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8007008:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800700a:	e066      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800700c:	2300      	movs	r3, #0
 800700e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007010:	e063      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007012:	4b34      	ldr	r3, [pc, #208]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800701a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800701e:	d102      	bne.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8007020:	4b33      	ldr	r3, [pc, #204]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8007022:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007024:	e059      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007026:	2300      	movs	r3, #0
 8007028:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800702a:	e056      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800702c:	4b31      	ldr	r3, [pc, #196]	; (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800702e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007030:	e053      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007032:	2300      	movs	r3, #0
 8007034:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007036:	e050      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007038:	e9d7 2300 	ldrd	r2, r3, [r7]
 800703c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007040:	430b      	orrs	r3, r1
 8007042:	d148      	bne.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007044:	4b27      	ldr	r3, [pc, #156]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007048:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800704c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800704e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007050:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007054:	d02a      	beq.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8007056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800705c:	d838      	bhi.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800705e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007060:	2b00      	cmp	r3, #0
 8007062:	d004      	beq.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8007064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007066:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800706a:	d00d      	beq.n	8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800706c:	e030      	b.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800706e:	4b1d      	ldr	r3, [pc, #116]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007076:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800707a:	d102      	bne.n	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800707c:	4b1c      	ldr	r3, [pc, #112]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800707e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007080:	e02b      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007082:	2300      	movs	r3, #0
 8007084:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007086:	e028      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007088:	4b16      	ldr	r3, [pc, #88]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007090:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007094:	d107      	bne.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800709a:	4618      	mov	r0, r3
 800709c:	f000 faea 	bl	8007674 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070a4:	e019      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80070a6:	2300      	movs	r3, #0
 80070a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070aa:	e016      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070ac:	4b0d      	ldr	r3, [pc, #52]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070b8:	d107      	bne.n	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070ba:	f107 0318 	add.w	r3, r7, #24
 80070be:	4618      	mov	r0, r3
 80070c0:	f000 f830 	bl	8007124 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070c8:	e007      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80070ca:	2300      	movs	r3, #0
 80070cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070ce:	e004      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80070d0:	2300      	movs	r3, #0
 80070d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070d4:	e001      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 80070d6:	2300      	movs	r3, #0
 80070d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80070da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3740      	adds	r7, #64	; 0x40
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	58024400 	.word	0x58024400
 80070e8:	03d09000 	.word	0x03d09000
 80070ec:	003d0900 	.word	0x003d0900
 80070f0:	007a1200 	.word	0x007a1200
 80070f4:	00bb8000 	.word	0x00bb8000

080070f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80070fc:	f7fe f90a 	bl	8005314 <HAL_RCC_GetHCLKFreq>
 8007100:	4602      	mov	r2, r0
 8007102:	4b06      	ldr	r3, [pc, #24]	; (800711c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	091b      	lsrs	r3, r3, #4
 8007108:	f003 0307 	and.w	r3, r3, #7
 800710c:	4904      	ldr	r1, [pc, #16]	; (8007120 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800710e:	5ccb      	ldrb	r3, [r1, r3]
 8007110:	f003 031f 	and.w	r3, r3, #31
 8007114:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007118:	4618      	mov	r0, r3
 800711a:	bd80      	pop	{r7, pc}
 800711c:	58024400 	.word	0x58024400
 8007120:	0800b9f4 	.word	0x0800b9f4

08007124 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007124:	b480      	push	{r7}
 8007126:	b089      	sub	sp, #36	; 0x24
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800712c:	4ba1      	ldr	r3, [pc, #644]	; (80073b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800712e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007130:	f003 0303 	and.w	r3, r3, #3
 8007134:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007136:	4b9f      	ldr	r3, [pc, #636]	; (80073b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713a:	0b1b      	lsrs	r3, r3, #12
 800713c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007140:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007142:	4b9c      	ldr	r3, [pc, #624]	; (80073b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007146:	091b      	lsrs	r3, r3, #4
 8007148:	f003 0301 	and.w	r3, r3, #1
 800714c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800714e:	4b99      	ldr	r3, [pc, #612]	; (80073b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007152:	08db      	lsrs	r3, r3, #3
 8007154:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	fb02 f303 	mul.w	r3, r2, r3
 800715e:	ee07 3a90 	vmov	s15, r3
 8007162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007166:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 8111 	beq.w	8007394 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	2b02      	cmp	r3, #2
 8007176:	f000 8083 	beq.w	8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	2b02      	cmp	r3, #2
 800717e:	f200 80a1 	bhi.w	80072c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d003      	beq.n	8007190 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d056      	beq.n	800723c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800718e:	e099      	b.n	80072c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007190:	4b88      	ldr	r3, [pc, #544]	; (80073b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0320 	and.w	r3, r3, #32
 8007198:	2b00      	cmp	r3, #0
 800719a:	d02d      	beq.n	80071f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800719c:	4b85      	ldr	r3, [pc, #532]	; (80073b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	08db      	lsrs	r3, r3, #3
 80071a2:	f003 0303 	and.w	r3, r3, #3
 80071a6:	4a84      	ldr	r2, [pc, #528]	; (80073b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80071a8:	fa22 f303 	lsr.w	r3, r2, r3
 80071ac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	ee07 3a90 	vmov	s15, r3
 80071b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	ee07 3a90 	vmov	s15, r3
 80071be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071c6:	4b7b      	ldr	r3, [pc, #492]	; (80073b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ce:	ee07 3a90 	vmov	s15, r3
 80071d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071da:	eddf 5a78 	vldr	s11, [pc, #480]	; 80073bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80071f6:	e087      	b.n	8007308 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007202:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800720a:	4b6a      	ldr	r3, [pc, #424]	; (80073b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800720c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800721a:	ed97 6a03 	vldr	s12, [r7, #12]
 800721e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80073bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800722a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800722e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007236:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800723a:	e065      	b.n	8007308 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	ee07 3a90 	vmov	s15, r3
 8007242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007246:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80073c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800724a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800724e:	4b59      	ldr	r3, [pc, #356]	; (80073b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800725e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007262:	eddf 5a56 	vldr	s11, [pc, #344]	; 80073bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800726a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800726e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800727a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800727e:	e043      	b.n	8007308 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	ee07 3a90 	vmov	s15, r3
 8007286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800728a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80073c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800728e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007292:	4b48      	ldr	r3, [pc, #288]	; (80073b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800729a:	ee07 3a90 	vmov	s15, r3
 800729e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80073bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072c2:	e021      	b.n	8007308 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	ee07 3a90 	vmov	s15, r3
 80072ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80073c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072d6:	4b37      	ldr	r3, [pc, #220]	; (80073b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072de:	ee07 3a90 	vmov	s15, r3
 80072e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 80073bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007302:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007306:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007308:	4b2a      	ldr	r3, [pc, #168]	; (80073b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800730a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730c:	0a5b      	lsrs	r3, r3, #9
 800730e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007312:	ee07 3a90 	vmov	s15, r3
 8007316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800731a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800731e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007322:	edd7 6a07 	vldr	s13, [r7, #28]
 8007326:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800732a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800732e:	ee17 2a90 	vmov	r2, s15
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007336:	4b1f      	ldr	r3, [pc, #124]	; (80073b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733a:	0c1b      	lsrs	r3, r3, #16
 800733c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007340:	ee07 3a90 	vmov	s15, r3
 8007344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007348:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800734c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007350:	edd7 6a07 	vldr	s13, [r7, #28]
 8007354:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800735c:	ee17 2a90 	vmov	r2, s15
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007364:	4b13      	ldr	r3, [pc, #76]	; (80073b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007368:	0e1b      	lsrs	r3, r3, #24
 800736a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800736e:	ee07 3a90 	vmov	s15, r3
 8007372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007376:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800737a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800737e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007382:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007386:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800738a:	ee17 2a90 	vmov	r2, s15
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007392:	e008      	b.n	80073a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	609a      	str	r2, [r3, #8]
}
 80073a6:	bf00      	nop
 80073a8:	3724      	adds	r7, #36	; 0x24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	58024400 	.word	0x58024400
 80073b8:	03d09000 	.word	0x03d09000
 80073bc:	46000000 	.word	0x46000000
 80073c0:	4c742400 	.word	0x4c742400
 80073c4:	4a742400 	.word	0x4a742400
 80073c8:	4af42400 	.word	0x4af42400

080073cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b089      	sub	sp, #36	; 0x24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073d4:	4ba1      	ldr	r3, [pc, #644]	; (800765c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d8:	f003 0303 	and.w	r3, r3, #3
 80073dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80073de:	4b9f      	ldr	r3, [pc, #636]	; (800765c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e2:	0d1b      	lsrs	r3, r3, #20
 80073e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80073ea:	4b9c      	ldr	r3, [pc, #624]	; (800765c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ee:	0a1b      	lsrs	r3, r3, #8
 80073f0:	f003 0301 	and.w	r3, r3, #1
 80073f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80073f6:	4b99      	ldr	r3, [pc, #612]	; (800765c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073fa:	08db      	lsrs	r3, r3, #3
 80073fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	fb02 f303 	mul.w	r3, r2, r3
 8007406:	ee07 3a90 	vmov	s15, r3
 800740a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800740e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	2b00      	cmp	r3, #0
 8007416:	f000 8111 	beq.w	800763c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	2b02      	cmp	r3, #2
 800741e:	f000 8083 	beq.w	8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	2b02      	cmp	r3, #2
 8007426:	f200 80a1 	bhi.w	800756c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d003      	beq.n	8007438 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	2b01      	cmp	r3, #1
 8007434:	d056      	beq.n	80074e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007436:	e099      	b.n	800756c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007438:	4b88      	ldr	r3, [pc, #544]	; (800765c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0320 	and.w	r3, r3, #32
 8007440:	2b00      	cmp	r3, #0
 8007442:	d02d      	beq.n	80074a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007444:	4b85      	ldr	r3, [pc, #532]	; (800765c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	08db      	lsrs	r3, r3, #3
 800744a:	f003 0303 	and.w	r3, r3, #3
 800744e:	4a84      	ldr	r2, [pc, #528]	; (8007660 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007450:	fa22 f303 	lsr.w	r3, r2, r3
 8007454:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	ee07 3a90 	vmov	s15, r3
 800745c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	ee07 3a90 	vmov	s15, r3
 8007466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800746a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800746e:	4b7b      	ldr	r3, [pc, #492]	; (800765c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007476:	ee07 3a90 	vmov	s15, r3
 800747a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800747e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007482:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007664 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800748a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800748e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800749a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800749e:	e087      	b.n	80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	ee07 3a90 	vmov	s15, r3
 80074a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80074ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074b2:	4b6a      	ldr	r3, [pc, #424]	; (800765c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ba:	ee07 3a90 	vmov	s15, r3
 80074be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80074c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007664 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074e2:	e065      	b.n	80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	ee07 3a90 	vmov	s15, r3
 80074ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800766c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80074f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074f6:	4b59      	ldr	r3, [pc, #356]	; (800765c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074fe:	ee07 3a90 	vmov	s15, r3
 8007502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007506:	ed97 6a03 	vldr	s12, [r7, #12]
 800750a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007664 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800750e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800751a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800751e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007522:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007526:	e043      	b.n	80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	ee07 3a90 	vmov	s15, r3
 800752e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007532:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007670 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800753a:	4b48      	ldr	r3, [pc, #288]	; (800765c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800753c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007542:	ee07 3a90 	vmov	s15, r3
 8007546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800754a:	ed97 6a03 	vldr	s12, [r7, #12]
 800754e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007664 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800755a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800755e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007566:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800756a:	e021      	b.n	80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	ee07 3a90 	vmov	s15, r3
 8007572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007576:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800766c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800757a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800757e:	4b37      	ldr	r3, [pc, #220]	; (800765c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007586:	ee07 3a90 	vmov	s15, r3
 800758a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800758e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007592:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007664 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800759a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800759e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80075b0:	4b2a      	ldr	r3, [pc, #168]	; (800765c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b4:	0a5b      	lsrs	r3, r3, #9
 80075b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ba:	ee07 3a90 	vmov	s15, r3
 80075be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80075ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075d6:	ee17 2a90 	vmov	r2, s15
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80075de:	4b1f      	ldr	r3, [pc, #124]	; (800765c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e2:	0c1b      	lsrs	r3, r3, #16
 80075e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075e8:	ee07 3a90 	vmov	s15, r3
 80075ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80075fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007600:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007604:	ee17 2a90 	vmov	r2, s15
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800760c:	4b13      	ldr	r3, [pc, #76]	; (800765c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800760e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007610:	0e1b      	lsrs	r3, r3, #24
 8007612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007616:	ee07 3a90 	vmov	s15, r3
 800761a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800761e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007622:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007626:	edd7 6a07 	vldr	s13, [r7, #28]
 800762a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800762e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007632:	ee17 2a90 	vmov	r2, s15
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800763a:	e008      	b.n	800764e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	609a      	str	r2, [r3, #8]
}
 800764e:	bf00      	nop
 8007650:	3724      	adds	r7, #36	; 0x24
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	58024400 	.word	0x58024400
 8007660:	03d09000 	.word	0x03d09000
 8007664:	46000000 	.word	0x46000000
 8007668:	4c742400 	.word	0x4c742400
 800766c:	4a742400 	.word	0x4a742400
 8007670:	4af42400 	.word	0x4af42400

08007674 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007674:	b480      	push	{r7}
 8007676:	b089      	sub	sp, #36	; 0x24
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800767c:	4ba0      	ldr	r3, [pc, #640]	; (8007900 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800767e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007680:	f003 0303 	and.w	r3, r3, #3
 8007684:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007686:	4b9e      	ldr	r3, [pc, #632]	; (8007900 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800768a:	091b      	lsrs	r3, r3, #4
 800768c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007690:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007692:	4b9b      	ldr	r3, [pc, #620]	; (8007900 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800769c:	4b98      	ldr	r3, [pc, #608]	; (8007900 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800769e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a0:	08db      	lsrs	r3, r3, #3
 80076a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	fb02 f303 	mul.w	r3, r2, r3
 80076ac:	ee07 3a90 	vmov	s15, r3
 80076b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076b4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	f000 8111 	beq.w	80078e2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	f000 8083 	beq.w	80077ce <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	f200 80a1 	bhi.w	8007812 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d003      	beq.n	80076de <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d056      	beq.n	800778a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80076dc:	e099      	b.n	8007812 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076de:	4b88      	ldr	r3, [pc, #544]	; (8007900 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0320 	and.w	r3, r3, #32
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d02d      	beq.n	8007746 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80076ea:	4b85      	ldr	r3, [pc, #532]	; (8007900 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	08db      	lsrs	r3, r3, #3
 80076f0:	f003 0303 	and.w	r3, r3, #3
 80076f4:	4a83      	ldr	r2, [pc, #524]	; (8007904 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80076f6:	fa22 f303 	lsr.w	r3, r2, r3
 80076fa:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	ee07 3a90 	vmov	s15, r3
 8007702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	ee07 3a90 	vmov	s15, r3
 800770c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007710:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007714:	4b7a      	ldr	r3, [pc, #488]	; (8007900 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800771c:	ee07 3a90 	vmov	s15, r3
 8007720:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007724:	ed97 6a03 	vldr	s12, [r7, #12]
 8007728:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007908 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800772c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007730:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007734:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007738:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800773c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007740:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007744:	e087      	b.n	8007856 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	ee07 3a90 	vmov	s15, r3
 800774c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007750:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800790c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007754:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007758:	4b69      	ldr	r3, [pc, #420]	; (8007900 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800775a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007760:	ee07 3a90 	vmov	s15, r3
 8007764:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007768:	ed97 6a03 	vldr	s12, [r7, #12]
 800776c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007908 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007770:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007774:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007778:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800777c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007784:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007788:	e065      	b.n	8007856 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	ee07 3a90 	vmov	s15, r3
 8007790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007794:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007910 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007798:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800779c:	4b58      	ldr	r3, [pc, #352]	; (8007900 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800779e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077a4:	ee07 3a90 	vmov	s15, r3
 80077a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80077b0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007908 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077cc:	e043      	b.n	8007856 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	ee07 3a90 	vmov	s15, r3
 80077d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077d8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007914 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80077dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077e0:	4b47      	ldr	r3, [pc, #284]	; (8007900 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077e8:	ee07 3a90 	vmov	s15, r3
 80077ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80077f4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007908 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007800:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007804:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800780c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007810:	e021      	b.n	8007856 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	ee07 3a90 	vmov	s15, r3
 8007818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800790c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007820:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007824:	4b36      	ldr	r3, [pc, #216]	; (8007900 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800782c:	ee07 3a90 	vmov	s15, r3
 8007830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007834:	ed97 6a03 	vldr	s12, [r7, #12]
 8007838:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007908 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800783c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007840:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007844:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007848:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800784c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007850:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007854:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007856:	4b2a      	ldr	r3, [pc, #168]	; (8007900 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800785a:	0a5b      	lsrs	r3, r3, #9
 800785c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007860:	ee07 3a90 	vmov	s15, r3
 8007864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007868:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800786c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007870:	edd7 6a07 	vldr	s13, [r7, #28]
 8007874:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007878:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800787c:	ee17 2a90 	vmov	r2, s15
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007884:	4b1e      	ldr	r3, [pc, #120]	; (8007900 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007888:	0c1b      	lsrs	r3, r3, #16
 800788a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800788e:	ee07 3a90 	vmov	s15, r3
 8007892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007896:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800789a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800789e:	edd7 6a07 	vldr	s13, [r7, #28]
 80078a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078aa:	ee17 2a90 	vmov	r2, s15
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80078b2:	4b13      	ldr	r3, [pc, #76]	; (8007900 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b6:	0e1b      	lsrs	r3, r3, #24
 80078b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078bc:	ee07 3a90 	vmov	s15, r3
 80078c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80078d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078d8:	ee17 2a90 	vmov	r2, s15
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80078e0:	e008      	b.n	80078f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	609a      	str	r2, [r3, #8]
}
 80078f4:	bf00      	nop
 80078f6:	3724      	adds	r7, #36	; 0x24
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
 8007900:	58024400 	.word	0x58024400
 8007904:	03d09000 	.word	0x03d09000
 8007908:	46000000 	.word	0x46000000
 800790c:	4c742400 	.word	0x4c742400
 8007910:	4a742400 	.word	0x4a742400
 8007914:	4af42400 	.word	0x4af42400

08007918 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007922:	2300      	movs	r3, #0
 8007924:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007926:	4b53      	ldr	r3, [pc, #332]	; (8007a74 <RCCEx_PLL2_Config+0x15c>)
 8007928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792a:	f003 0303 	and.w	r3, r3, #3
 800792e:	2b03      	cmp	r3, #3
 8007930:	d101      	bne.n	8007936 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	e099      	b.n	8007a6a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007936:	4b4f      	ldr	r3, [pc, #316]	; (8007a74 <RCCEx_PLL2_Config+0x15c>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a4e      	ldr	r2, [pc, #312]	; (8007a74 <RCCEx_PLL2_Config+0x15c>)
 800793c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007940:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007942:	f7fa faef 	bl	8001f24 <HAL_GetTick>
 8007946:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007948:	e008      	b.n	800795c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800794a:	f7fa faeb 	bl	8001f24 <HAL_GetTick>
 800794e:	4602      	mov	r2, r0
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	1ad3      	subs	r3, r2, r3
 8007954:	2b02      	cmp	r3, #2
 8007956:	d901      	bls.n	800795c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007958:	2303      	movs	r3, #3
 800795a:	e086      	b.n	8007a6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800795c:	4b45      	ldr	r3, [pc, #276]	; (8007a74 <RCCEx_PLL2_Config+0x15c>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007964:	2b00      	cmp	r3, #0
 8007966:	d1f0      	bne.n	800794a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007968:	4b42      	ldr	r3, [pc, #264]	; (8007a74 <RCCEx_PLL2_Config+0x15c>)
 800796a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800796c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	031b      	lsls	r3, r3, #12
 8007976:	493f      	ldr	r1, [pc, #252]	; (8007a74 <RCCEx_PLL2_Config+0x15c>)
 8007978:	4313      	orrs	r3, r2
 800797a:	628b      	str	r3, [r1, #40]	; 0x28
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	3b01      	subs	r3, #1
 8007982:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	3b01      	subs	r3, #1
 800798c:	025b      	lsls	r3, r3, #9
 800798e:	b29b      	uxth	r3, r3
 8007990:	431a      	orrs	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	3b01      	subs	r3, #1
 8007998:	041b      	lsls	r3, r3, #16
 800799a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800799e:	431a      	orrs	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	3b01      	subs	r3, #1
 80079a6:	061b      	lsls	r3, r3, #24
 80079a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80079ac:	4931      	ldr	r1, [pc, #196]	; (8007a74 <RCCEx_PLL2_Config+0x15c>)
 80079ae:	4313      	orrs	r3, r2
 80079b0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80079b2:	4b30      	ldr	r3, [pc, #192]	; (8007a74 <RCCEx_PLL2_Config+0x15c>)
 80079b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	492d      	ldr	r1, [pc, #180]	; (8007a74 <RCCEx_PLL2_Config+0x15c>)
 80079c0:	4313      	orrs	r3, r2
 80079c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80079c4:	4b2b      	ldr	r3, [pc, #172]	; (8007a74 <RCCEx_PLL2_Config+0x15c>)
 80079c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c8:	f023 0220 	bic.w	r2, r3, #32
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	699b      	ldr	r3, [r3, #24]
 80079d0:	4928      	ldr	r1, [pc, #160]	; (8007a74 <RCCEx_PLL2_Config+0x15c>)
 80079d2:	4313      	orrs	r3, r2
 80079d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80079d6:	4b27      	ldr	r3, [pc, #156]	; (8007a74 <RCCEx_PLL2_Config+0x15c>)
 80079d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079da:	4a26      	ldr	r2, [pc, #152]	; (8007a74 <RCCEx_PLL2_Config+0x15c>)
 80079dc:	f023 0310 	bic.w	r3, r3, #16
 80079e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80079e2:	4b24      	ldr	r3, [pc, #144]	; (8007a74 <RCCEx_PLL2_Config+0x15c>)
 80079e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079e6:	4b24      	ldr	r3, [pc, #144]	; (8007a78 <RCCEx_PLL2_Config+0x160>)
 80079e8:	4013      	ands	r3, r2
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	69d2      	ldr	r2, [r2, #28]
 80079ee:	00d2      	lsls	r2, r2, #3
 80079f0:	4920      	ldr	r1, [pc, #128]	; (8007a74 <RCCEx_PLL2_Config+0x15c>)
 80079f2:	4313      	orrs	r3, r2
 80079f4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80079f6:	4b1f      	ldr	r3, [pc, #124]	; (8007a74 <RCCEx_PLL2_Config+0x15c>)
 80079f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079fa:	4a1e      	ldr	r2, [pc, #120]	; (8007a74 <RCCEx_PLL2_Config+0x15c>)
 80079fc:	f043 0310 	orr.w	r3, r3, #16
 8007a00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d106      	bne.n	8007a16 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007a08:	4b1a      	ldr	r3, [pc, #104]	; (8007a74 <RCCEx_PLL2_Config+0x15c>)
 8007a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a0c:	4a19      	ldr	r2, [pc, #100]	; (8007a74 <RCCEx_PLL2_Config+0x15c>)
 8007a0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a14:	e00f      	b.n	8007a36 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d106      	bne.n	8007a2a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007a1c:	4b15      	ldr	r3, [pc, #84]	; (8007a74 <RCCEx_PLL2_Config+0x15c>)
 8007a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a20:	4a14      	ldr	r2, [pc, #80]	; (8007a74 <RCCEx_PLL2_Config+0x15c>)
 8007a22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a28:	e005      	b.n	8007a36 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007a2a:	4b12      	ldr	r3, [pc, #72]	; (8007a74 <RCCEx_PLL2_Config+0x15c>)
 8007a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2e:	4a11      	ldr	r2, [pc, #68]	; (8007a74 <RCCEx_PLL2_Config+0x15c>)
 8007a30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a34:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007a36:	4b0f      	ldr	r3, [pc, #60]	; (8007a74 <RCCEx_PLL2_Config+0x15c>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a0e      	ldr	r2, [pc, #56]	; (8007a74 <RCCEx_PLL2_Config+0x15c>)
 8007a3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a42:	f7fa fa6f 	bl	8001f24 <HAL_GetTick>
 8007a46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a48:	e008      	b.n	8007a5c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a4a:	f7fa fa6b 	bl	8001f24 <HAL_GetTick>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	1ad3      	subs	r3, r2, r3
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d901      	bls.n	8007a5c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e006      	b.n	8007a6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a5c:	4b05      	ldr	r3, [pc, #20]	; (8007a74 <RCCEx_PLL2_Config+0x15c>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d0f0      	beq.n	8007a4a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	58024400 	.word	0x58024400
 8007a78:	ffff0007 	.word	0xffff0007

08007a7c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a86:	2300      	movs	r3, #0
 8007a88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a8a:	4b53      	ldr	r3, [pc, #332]	; (8007bd8 <RCCEx_PLL3_Config+0x15c>)
 8007a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a8e:	f003 0303 	and.w	r3, r3, #3
 8007a92:	2b03      	cmp	r3, #3
 8007a94:	d101      	bne.n	8007a9a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e099      	b.n	8007bce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007a9a:	4b4f      	ldr	r3, [pc, #316]	; (8007bd8 <RCCEx_PLL3_Config+0x15c>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a4e      	ldr	r2, [pc, #312]	; (8007bd8 <RCCEx_PLL3_Config+0x15c>)
 8007aa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007aa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007aa6:	f7fa fa3d 	bl	8001f24 <HAL_GetTick>
 8007aaa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007aac:	e008      	b.n	8007ac0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007aae:	f7fa fa39 	bl	8001f24 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d901      	bls.n	8007ac0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e086      	b.n	8007bce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ac0:	4b45      	ldr	r3, [pc, #276]	; (8007bd8 <RCCEx_PLL3_Config+0x15c>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1f0      	bne.n	8007aae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007acc:	4b42      	ldr	r3, [pc, #264]	; (8007bd8 <RCCEx_PLL3_Config+0x15c>)
 8007ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	051b      	lsls	r3, r3, #20
 8007ada:	493f      	ldr	r1, [pc, #252]	; (8007bd8 <RCCEx_PLL3_Config+0x15c>)
 8007adc:	4313      	orrs	r3, r2
 8007ade:	628b      	str	r3, [r1, #40]	; 0x28
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	3b01      	subs	r3, #1
 8007af0:	025b      	lsls	r3, r3, #9
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	431a      	orrs	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	3b01      	subs	r3, #1
 8007afc:	041b      	lsls	r3, r3, #16
 8007afe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b02:	431a      	orrs	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	061b      	lsls	r3, r3, #24
 8007b0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b10:	4931      	ldr	r1, [pc, #196]	; (8007bd8 <RCCEx_PLL3_Config+0x15c>)
 8007b12:	4313      	orrs	r3, r2
 8007b14:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007b16:	4b30      	ldr	r3, [pc, #192]	; (8007bd8 <RCCEx_PLL3_Config+0x15c>)
 8007b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	492d      	ldr	r1, [pc, #180]	; (8007bd8 <RCCEx_PLL3_Config+0x15c>)
 8007b24:	4313      	orrs	r3, r2
 8007b26:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007b28:	4b2b      	ldr	r3, [pc, #172]	; (8007bd8 <RCCEx_PLL3_Config+0x15c>)
 8007b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	4928      	ldr	r1, [pc, #160]	; (8007bd8 <RCCEx_PLL3_Config+0x15c>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007b3a:	4b27      	ldr	r3, [pc, #156]	; (8007bd8 <RCCEx_PLL3_Config+0x15c>)
 8007b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3e:	4a26      	ldr	r2, [pc, #152]	; (8007bd8 <RCCEx_PLL3_Config+0x15c>)
 8007b40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007b46:	4b24      	ldr	r3, [pc, #144]	; (8007bd8 <RCCEx_PLL3_Config+0x15c>)
 8007b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b4a:	4b24      	ldr	r3, [pc, #144]	; (8007bdc <RCCEx_PLL3_Config+0x160>)
 8007b4c:	4013      	ands	r3, r2
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	69d2      	ldr	r2, [r2, #28]
 8007b52:	00d2      	lsls	r2, r2, #3
 8007b54:	4920      	ldr	r1, [pc, #128]	; (8007bd8 <RCCEx_PLL3_Config+0x15c>)
 8007b56:	4313      	orrs	r3, r2
 8007b58:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007b5a:	4b1f      	ldr	r3, [pc, #124]	; (8007bd8 <RCCEx_PLL3_Config+0x15c>)
 8007b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5e:	4a1e      	ldr	r2, [pc, #120]	; (8007bd8 <RCCEx_PLL3_Config+0x15c>)
 8007b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d106      	bne.n	8007b7a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007b6c:	4b1a      	ldr	r3, [pc, #104]	; (8007bd8 <RCCEx_PLL3_Config+0x15c>)
 8007b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b70:	4a19      	ldr	r2, [pc, #100]	; (8007bd8 <RCCEx_PLL3_Config+0x15c>)
 8007b72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007b76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b78:	e00f      	b.n	8007b9a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d106      	bne.n	8007b8e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007b80:	4b15      	ldr	r3, [pc, #84]	; (8007bd8 <RCCEx_PLL3_Config+0x15c>)
 8007b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b84:	4a14      	ldr	r2, [pc, #80]	; (8007bd8 <RCCEx_PLL3_Config+0x15c>)
 8007b86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007b8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b8c:	e005      	b.n	8007b9a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007b8e:	4b12      	ldr	r3, [pc, #72]	; (8007bd8 <RCCEx_PLL3_Config+0x15c>)
 8007b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b92:	4a11      	ldr	r2, [pc, #68]	; (8007bd8 <RCCEx_PLL3_Config+0x15c>)
 8007b94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b98:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007b9a:	4b0f      	ldr	r3, [pc, #60]	; (8007bd8 <RCCEx_PLL3_Config+0x15c>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a0e      	ldr	r2, [pc, #56]	; (8007bd8 <RCCEx_PLL3_Config+0x15c>)
 8007ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ba4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ba6:	f7fa f9bd 	bl	8001f24 <HAL_GetTick>
 8007baa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007bac:	e008      	b.n	8007bc0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007bae:	f7fa f9b9 	bl	8001f24 <HAL_GetTick>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	1ad3      	subs	r3, r2, r3
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d901      	bls.n	8007bc0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e006      	b.n	8007bce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007bc0:	4b05      	ldr	r3, [pc, #20]	; (8007bd8 <RCCEx_PLL3_Config+0x15c>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d0f0      	beq.n	8007bae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	58024400 	.word	0x58024400
 8007bdc:	ffff0007 	.word	0xffff0007

08007be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d101      	bne.n	8007bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e049      	b.n	8007c86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d106      	bne.n	8007c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f7f9 fdc0 	bl	800178c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	3304      	adds	r3, #4
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	4610      	mov	r0, r2
 8007c20:	f000 fb26 	bl	8008270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
	...

08007c90 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d101      	bne.n	8007ca4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e08f      	b.n	8007dc4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d106      	bne.n	8007cbe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f7f9 fd17 	bl	80016ec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2202      	movs	r2, #2
 8007cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	6899      	ldr	r1, [r3, #8]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	4b3e      	ldr	r3, [pc, #248]	; (8007dcc <HAL_TIM_Encoder_Init+0x13c>)
 8007cd2:	400b      	ands	r3, r1
 8007cd4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	3304      	adds	r3, #4
 8007cde:	4619      	mov	r1, r3
 8007ce0:	4610      	mov	r0, r2
 8007ce2:	f000 fac5 	bl	8008270 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	6a1b      	ldr	r3, [r3, #32]
 8007cfc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	697a      	ldr	r2, [r7, #20]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007d08:	693a      	ldr	r2, [r7, #16]
 8007d0a:	4b31      	ldr	r3, [pc, #196]	; (8007dd0 <HAL_TIM_Encoder_Init+0x140>)
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	689a      	ldr	r2, [r3, #8]
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	699b      	ldr	r3, [r3, #24]
 8007d18:	021b      	lsls	r3, r3, #8
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	693a      	ldr	r2, [r7, #16]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	4b2b      	ldr	r3, [pc, #172]	; (8007dd4 <HAL_TIM_Encoder_Init+0x144>)
 8007d26:	4013      	ands	r3, r2
 8007d28:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	4b2a      	ldr	r3, [pc, #168]	; (8007dd8 <HAL_TIM_Encoder_Init+0x148>)
 8007d2e:	4013      	ands	r3, r2
 8007d30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	68da      	ldr	r2, [r3, #12]
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	69db      	ldr	r3, [r3, #28]
 8007d3a:	021b      	lsls	r3, r3, #8
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	693a      	ldr	r2, [r7, #16]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	011a      	lsls	r2, r3, #4
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	6a1b      	ldr	r3, [r3, #32]
 8007d4e:	031b      	lsls	r3, r3, #12
 8007d50:	4313      	orrs	r3, r2
 8007d52:	693a      	ldr	r2, [r7, #16]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007d5e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007d66:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	695b      	ldr	r3, [r3, #20]
 8007d70:	011b      	lsls	r3, r3, #4
 8007d72:	4313      	orrs	r3, r2
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3718      	adds	r7, #24
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	fffebff8 	.word	0xfffebff8
 8007dd0:	fffffcfc 	.word	0xfffffcfc
 8007dd4:	fffff3f3 	.word	0xfffff3f3
 8007dd8:	ffff0f0f 	.word	0xffff0f0f

08007ddc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	f003 0302 	and.w	r3, r3, #2
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	d122      	bne.n	8007e38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	f003 0302 	and.w	r3, r3, #2
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d11b      	bne.n	8007e38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f06f 0202 	mvn.w	r2, #2
 8007e08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	699b      	ldr	r3, [r3, #24]
 8007e16:	f003 0303 	and.w	r3, r3, #3
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d003      	beq.n	8007e26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 fa08 	bl	8008234 <HAL_TIM_IC_CaptureCallback>
 8007e24:	e005      	b.n	8007e32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f9fa 	bl	8008220 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 fa0b 	bl	8008248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	f003 0304 	and.w	r3, r3, #4
 8007e42:	2b04      	cmp	r3, #4
 8007e44:	d122      	bne.n	8007e8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	f003 0304 	and.w	r3, r3, #4
 8007e50:	2b04      	cmp	r3, #4
 8007e52:	d11b      	bne.n	8007e8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f06f 0204 	mvn.w	r2, #4
 8007e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2202      	movs	r2, #2
 8007e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	699b      	ldr	r3, [r3, #24]
 8007e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d003      	beq.n	8007e7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 f9de 	bl	8008234 <HAL_TIM_IC_CaptureCallback>
 8007e78:	e005      	b.n	8007e86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f9d0 	bl	8008220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 f9e1 	bl	8008248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	f003 0308 	and.w	r3, r3, #8
 8007e96:	2b08      	cmp	r3, #8
 8007e98:	d122      	bne.n	8007ee0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	f003 0308 	and.w	r3, r3, #8
 8007ea4:	2b08      	cmp	r3, #8
 8007ea6:	d11b      	bne.n	8007ee0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f06f 0208 	mvn.w	r2, #8
 8007eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2204      	movs	r2, #4
 8007eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	69db      	ldr	r3, [r3, #28]
 8007ebe:	f003 0303 	and.w	r3, r3, #3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d003      	beq.n	8007ece <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f9b4 	bl	8008234 <HAL_TIM_IC_CaptureCallback>
 8007ecc:	e005      	b.n	8007eda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f9a6 	bl	8008220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f9b7 	bl	8008248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	f003 0310 	and.w	r3, r3, #16
 8007eea:	2b10      	cmp	r3, #16
 8007eec:	d122      	bne.n	8007f34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	f003 0310 	and.w	r3, r3, #16
 8007ef8:	2b10      	cmp	r3, #16
 8007efa:	d11b      	bne.n	8007f34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f06f 0210 	mvn.w	r2, #16
 8007f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2208      	movs	r2, #8
 8007f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	69db      	ldr	r3, [r3, #28]
 8007f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d003      	beq.n	8007f22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f98a 	bl	8008234 <HAL_TIM_IC_CaptureCallback>
 8007f20:	e005      	b.n	8007f2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 f97c 	bl	8008220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 f98d 	bl	8008248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d10e      	bne.n	8007f60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	f003 0301 	and.w	r3, r3, #1
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d107      	bne.n	8007f60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f06f 0201 	mvn.w	r2, #1
 8007f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 f956 	bl	800820c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f6a:	2b80      	cmp	r3, #128	; 0x80
 8007f6c:	d10e      	bne.n	8007f8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f78:	2b80      	cmp	r3, #128	; 0x80
 8007f7a:	d107      	bne.n	8007f8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fb42 	bl	8008610 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f9a:	d10e      	bne.n	8007fba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fa6:	2b80      	cmp	r3, #128	; 0x80
 8007fa8:	d107      	bne.n	8007fba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fb35 	bl	8008624 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc4:	2b40      	cmp	r3, #64	; 0x40
 8007fc6:	d10e      	bne.n	8007fe6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd2:	2b40      	cmp	r3, #64	; 0x40
 8007fd4:	d107      	bne.n	8007fe6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f93b 	bl	800825c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	f003 0320 	and.w	r3, r3, #32
 8007ff0:	2b20      	cmp	r3, #32
 8007ff2:	d10e      	bne.n	8008012 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	f003 0320 	and.w	r3, r3, #32
 8007ffe:	2b20      	cmp	r3, #32
 8008000:	d107      	bne.n	8008012 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f06f 0220 	mvn.w	r2, #32
 800800a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 faf5 	bl	80085fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008012:	bf00      	nop
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
	...

0800801c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008026:	2300      	movs	r3, #0
 8008028:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008030:	2b01      	cmp	r3, #1
 8008032:	d101      	bne.n	8008038 <HAL_TIM_ConfigClockSource+0x1c>
 8008034:	2302      	movs	r3, #2
 8008036:	e0dc      	b.n	80081f2 <HAL_TIM_ConfigClockSource+0x1d6>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2202      	movs	r2, #2
 8008044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008050:	68ba      	ldr	r2, [r7, #8]
 8008052:	4b6a      	ldr	r3, [pc, #424]	; (80081fc <HAL_TIM_ConfigClockSource+0x1e0>)
 8008054:	4013      	ands	r3, r2
 8008056:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800805e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68ba      	ldr	r2, [r7, #8]
 8008066:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a64      	ldr	r2, [pc, #400]	; (8008200 <HAL_TIM_ConfigClockSource+0x1e4>)
 800806e:	4293      	cmp	r3, r2
 8008070:	f000 80a9 	beq.w	80081c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008074:	4a62      	ldr	r2, [pc, #392]	; (8008200 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008076:	4293      	cmp	r3, r2
 8008078:	f200 80ae 	bhi.w	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800807c:	4a61      	ldr	r2, [pc, #388]	; (8008204 <HAL_TIM_ConfigClockSource+0x1e8>)
 800807e:	4293      	cmp	r3, r2
 8008080:	f000 80a1 	beq.w	80081c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008084:	4a5f      	ldr	r2, [pc, #380]	; (8008204 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008086:	4293      	cmp	r3, r2
 8008088:	f200 80a6 	bhi.w	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800808c:	4a5e      	ldr	r2, [pc, #376]	; (8008208 <HAL_TIM_ConfigClockSource+0x1ec>)
 800808e:	4293      	cmp	r3, r2
 8008090:	f000 8099 	beq.w	80081c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008094:	4a5c      	ldr	r2, [pc, #368]	; (8008208 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008096:	4293      	cmp	r3, r2
 8008098:	f200 809e 	bhi.w	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800809c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80080a0:	f000 8091 	beq.w	80081c6 <HAL_TIM_ConfigClockSource+0x1aa>
 80080a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80080a8:	f200 8096 	bhi.w	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80080ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080b0:	f000 8089 	beq.w	80081c6 <HAL_TIM_ConfigClockSource+0x1aa>
 80080b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080b8:	f200 808e 	bhi.w	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80080bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080c0:	d03e      	beq.n	8008140 <HAL_TIM_ConfigClockSource+0x124>
 80080c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080c6:	f200 8087 	bhi.w	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80080ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ce:	f000 8086 	beq.w	80081de <HAL_TIM_ConfigClockSource+0x1c2>
 80080d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080d6:	d87f      	bhi.n	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80080d8:	2b70      	cmp	r3, #112	; 0x70
 80080da:	d01a      	beq.n	8008112 <HAL_TIM_ConfigClockSource+0xf6>
 80080dc:	2b70      	cmp	r3, #112	; 0x70
 80080de:	d87b      	bhi.n	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80080e0:	2b60      	cmp	r3, #96	; 0x60
 80080e2:	d050      	beq.n	8008186 <HAL_TIM_ConfigClockSource+0x16a>
 80080e4:	2b60      	cmp	r3, #96	; 0x60
 80080e6:	d877      	bhi.n	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80080e8:	2b50      	cmp	r3, #80	; 0x50
 80080ea:	d03c      	beq.n	8008166 <HAL_TIM_ConfigClockSource+0x14a>
 80080ec:	2b50      	cmp	r3, #80	; 0x50
 80080ee:	d873      	bhi.n	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80080f0:	2b40      	cmp	r3, #64	; 0x40
 80080f2:	d058      	beq.n	80081a6 <HAL_TIM_ConfigClockSource+0x18a>
 80080f4:	2b40      	cmp	r3, #64	; 0x40
 80080f6:	d86f      	bhi.n	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80080f8:	2b30      	cmp	r3, #48	; 0x30
 80080fa:	d064      	beq.n	80081c6 <HAL_TIM_ConfigClockSource+0x1aa>
 80080fc:	2b30      	cmp	r3, #48	; 0x30
 80080fe:	d86b      	bhi.n	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008100:	2b20      	cmp	r3, #32
 8008102:	d060      	beq.n	80081c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008104:	2b20      	cmp	r3, #32
 8008106:	d867      	bhi.n	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008108:	2b00      	cmp	r3, #0
 800810a:	d05c      	beq.n	80081c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800810c:	2b10      	cmp	r3, #16
 800810e:	d05a      	beq.n	80081c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008110:	e062      	b.n	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008122:	f000 f9bd 	bl	80084a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008134:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	609a      	str	r2, [r3, #8]
      break;
 800813e:	e04f      	b.n	80081e0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008150:	f000 f9a6 	bl	80084a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	689a      	ldr	r2, [r3, #8]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008162:	609a      	str	r2, [r3, #8]
      break;
 8008164:	e03c      	b.n	80081e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008172:	461a      	mov	r2, r3
 8008174:	f000 f916 	bl	80083a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2150      	movs	r1, #80	; 0x50
 800817e:	4618      	mov	r0, r3
 8008180:	f000 f970 	bl	8008464 <TIM_ITRx_SetConfig>
      break;
 8008184:	e02c      	b.n	80081e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008192:	461a      	mov	r2, r3
 8008194:	f000 f935 	bl	8008402 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2160      	movs	r1, #96	; 0x60
 800819e:	4618      	mov	r0, r3
 80081a0:	f000 f960 	bl	8008464 <TIM_ITRx_SetConfig>
      break;
 80081a4:	e01c      	b.n	80081e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081b2:	461a      	mov	r2, r3
 80081b4:	f000 f8f6 	bl	80083a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2140      	movs	r1, #64	; 0x40
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 f950 	bl	8008464 <TIM_ITRx_SetConfig>
      break;
 80081c4:	e00c      	b.n	80081e0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4619      	mov	r1, r3
 80081d0:	4610      	mov	r0, r2
 80081d2:	f000 f947 	bl	8008464 <TIM_ITRx_SetConfig>
      break;
 80081d6:	e003      	b.n	80081e0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	73fb      	strb	r3, [r7, #15]
      break;
 80081dc:	e000      	b.n	80081e0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80081de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80081f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	ffceff88 	.word	0xffceff88
 8008200:	00100040 	.word	0x00100040
 8008204:	00100030 	.word	0x00100030
 8008208:	00100020 	.word	0x00100020

0800820c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008228:	bf00      	nop
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800823c:	bf00      	nop
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008264:	bf00      	nop
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a40      	ldr	r2, [pc, #256]	; (8008384 <TIM_Base_SetConfig+0x114>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d013      	beq.n	80082b0 <TIM_Base_SetConfig+0x40>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800828e:	d00f      	beq.n	80082b0 <TIM_Base_SetConfig+0x40>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4a3d      	ldr	r2, [pc, #244]	; (8008388 <TIM_Base_SetConfig+0x118>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d00b      	beq.n	80082b0 <TIM_Base_SetConfig+0x40>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4a3c      	ldr	r2, [pc, #240]	; (800838c <TIM_Base_SetConfig+0x11c>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d007      	beq.n	80082b0 <TIM_Base_SetConfig+0x40>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	4a3b      	ldr	r2, [pc, #236]	; (8008390 <TIM_Base_SetConfig+0x120>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d003      	beq.n	80082b0 <TIM_Base_SetConfig+0x40>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4a3a      	ldr	r2, [pc, #232]	; (8008394 <TIM_Base_SetConfig+0x124>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d108      	bne.n	80082c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	4313      	orrs	r3, r2
 80082c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a2f      	ldr	r2, [pc, #188]	; (8008384 <TIM_Base_SetConfig+0x114>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d01f      	beq.n	800830a <TIM_Base_SetConfig+0x9a>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082d0:	d01b      	beq.n	800830a <TIM_Base_SetConfig+0x9a>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a2c      	ldr	r2, [pc, #176]	; (8008388 <TIM_Base_SetConfig+0x118>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d017      	beq.n	800830a <TIM_Base_SetConfig+0x9a>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a2b      	ldr	r2, [pc, #172]	; (800838c <TIM_Base_SetConfig+0x11c>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d013      	beq.n	800830a <TIM_Base_SetConfig+0x9a>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4a2a      	ldr	r2, [pc, #168]	; (8008390 <TIM_Base_SetConfig+0x120>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d00f      	beq.n	800830a <TIM_Base_SetConfig+0x9a>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4a29      	ldr	r2, [pc, #164]	; (8008394 <TIM_Base_SetConfig+0x124>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d00b      	beq.n	800830a <TIM_Base_SetConfig+0x9a>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a28      	ldr	r2, [pc, #160]	; (8008398 <TIM_Base_SetConfig+0x128>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d007      	beq.n	800830a <TIM_Base_SetConfig+0x9a>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a27      	ldr	r2, [pc, #156]	; (800839c <TIM_Base_SetConfig+0x12c>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d003      	beq.n	800830a <TIM_Base_SetConfig+0x9a>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a26      	ldr	r2, [pc, #152]	; (80083a0 <TIM_Base_SetConfig+0x130>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d108      	bne.n	800831c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	68fa      	ldr	r2, [r7, #12]
 8008318:	4313      	orrs	r3, r2
 800831a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	695b      	ldr	r3, [r3, #20]
 8008326:	4313      	orrs	r3, r2
 8008328:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	68fa      	ldr	r2, [r7, #12]
 800832e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	689a      	ldr	r2, [r3, #8]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a10      	ldr	r2, [pc, #64]	; (8008384 <TIM_Base_SetConfig+0x114>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d00f      	beq.n	8008368 <TIM_Base_SetConfig+0xf8>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a12      	ldr	r2, [pc, #72]	; (8008394 <TIM_Base_SetConfig+0x124>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d00b      	beq.n	8008368 <TIM_Base_SetConfig+0xf8>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a11      	ldr	r2, [pc, #68]	; (8008398 <TIM_Base_SetConfig+0x128>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d007      	beq.n	8008368 <TIM_Base_SetConfig+0xf8>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a10      	ldr	r2, [pc, #64]	; (800839c <TIM_Base_SetConfig+0x12c>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d003      	beq.n	8008368 <TIM_Base_SetConfig+0xf8>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4a0f      	ldr	r2, [pc, #60]	; (80083a0 <TIM_Base_SetConfig+0x130>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d103      	bne.n	8008370 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	691a      	ldr	r2, [r3, #16]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	615a      	str	r2, [r3, #20]
}
 8008376:	bf00      	nop
 8008378:	3714      	adds	r7, #20
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	40010000 	.word	0x40010000
 8008388:	40000400 	.word	0x40000400
 800838c:	40000800 	.word	0x40000800
 8008390:	40000c00 	.word	0x40000c00
 8008394:	40010400 	.word	0x40010400
 8008398:	40014000 	.word	0x40014000
 800839c:	40014400 	.word	0x40014400
 80083a0:	40014800 	.word	0x40014800

080083a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b087      	sub	sp, #28
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6a1b      	ldr	r3, [r3, #32]
 80083b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6a1b      	ldr	r3, [r3, #32]
 80083ba:	f023 0201 	bic.w	r2, r3, #1
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	699b      	ldr	r3, [r3, #24]
 80083c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	011b      	lsls	r3, r3, #4
 80083d4:	693a      	ldr	r2, [r7, #16]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	f023 030a 	bic.w	r3, r3, #10
 80083e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	693a      	ldr	r2, [r7, #16]
 80083ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	697a      	ldr	r2, [r7, #20]
 80083f4:	621a      	str	r2, [r3, #32]
}
 80083f6:	bf00      	nop
 80083f8:	371c      	adds	r7, #28
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008402:	b480      	push	{r7}
 8008404:	b087      	sub	sp, #28
 8008406:	af00      	add	r7, sp, #0
 8008408:	60f8      	str	r0, [r7, #12]
 800840a:	60b9      	str	r1, [r7, #8]
 800840c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	f023 0210 	bic.w	r2, r3, #16
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	699b      	ldr	r3, [r3, #24]
 800841e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6a1b      	ldr	r3, [r3, #32]
 8008424:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800842c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	031b      	lsls	r3, r3, #12
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	4313      	orrs	r3, r2
 8008436:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800843e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	011b      	lsls	r3, r3, #4
 8008444:	693a      	ldr	r2, [r7, #16]
 8008446:	4313      	orrs	r3, r2
 8008448:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	697a      	ldr	r2, [r7, #20]
 800844e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	621a      	str	r2, [r3, #32]
}
 8008456:	bf00      	nop
 8008458:	371c      	adds	r7, #28
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
	...

08008464 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008464:	b480      	push	{r7}
 8008466:	b085      	sub	sp, #20
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	4b09      	ldr	r3, [pc, #36]	; (800849c <TIM_ITRx_SetConfig+0x38>)
 8008478:	4013      	ands	r3, r2
 800847a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800847c:	683a      	ldr	r2, [r7, #0]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	4313      	orrs	r3, r2
 8008482:	f043 0307 	orr.w	r3, r3, #7
 8008486:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	609a      	str	r2, [r3, #8]
}
 800848e:	bf00      	nop
 8008490:	3714      	adds	r7, #20
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	ffcfff8f 	.word	0xffcfff8f

080084a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b087      	sub	sp, #28
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	607a      	str	r2, [r7, #4]
 80084ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	021a      	lsls	r2, r3, #8
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	431a      	orrs	r2, r3
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	697a      	ldr	r2, [r7, #20]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	697a      	ldr	r2, [r7, #20]
 80084d2:	609a      	str	r2, [r3, #8]
}
 80084d4:	bf00      	nop
 80084d6:	371c      	adds	r7, #28
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d101      	bne.n	80084f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084f4:	2302      	movs	r3, #2
 80084f6:	e06d      	b.n	80085d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2202      	movs	r2, #2
 8008504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a30      	ldr	r2, [pc, #192]	; (80085e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d004      	beq.n	800852c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a2f      	ldr	r2, [pc, #188]	; (80085e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d108      	bne.n	800853e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008532:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	4313      	orrs	r3, r2
 800853c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008544:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	68fa      	ldr	r2, [r7, #12]
 800854c:	4313      	orrs	r3, r2
 800854e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a20      	ldr	r2, [pc, #128]	; (80085e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d022      	beq.n	80085a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800856a:	d01d      	beq.n	80085a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a1d      	ldr	r2, [pc, #116]	; (80085e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d018      	beq.n	80085a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a1c      	ldr	r2, [pc, #112]	; (80085ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d013      	beq.n	80085a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a1a      	ldr	r2, [pc, #104]	; (80085f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d00e      	beq.n	80085a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a15      	ldr	r2, [pc, #84]	; (80085e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d009      	beq.n	80085a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a16      	ldr	r2, [pc, #88]	; (80085f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d004      	beq.n	80085a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a15      	ldr	r2, [pc, #84]	; (80085f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d10c      	bne.n	80085c2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	68ba      	ldr	r2, [r7, #8]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68ba      	ldr	r2, [r7, #8]
 80085c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2201      	movs	r2, #1
 80085c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr
 80085e0:	40010000 	.word	0x40010000
 80085e4:	40010400 	.word	0x40010400
 80085e8:	40000400 	.word	0x40000400
 80085ec:	40000800 	.word	0x40000800
 80085f0:	40000c00 	.word	0x40000c00
 80085f4:	40001800 	.word	0x40001800
 80085f8:	40014000 	.word	0x40014000

080085fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008604:	bf00      	nop
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008618:	bf00      	nop
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800862c:	bf00      	nop
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d101      	bne.n	800864a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e042      	b.n	80086d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008650:	2b00      	cmp	r3, #0
 8008652:	d106      	bne.n	8008662 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f7f9 f8dd 	bl	800181c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2224      	movs	r2, #36	; 0x24
 8008666:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f022 0201 	bic.w	r2, r2, #1
 8008678:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fce0 	bl	8009040 <UART_SetConfig>
 8008680:	4603      	mov	r3, r0
 8008682:	2b01      	cmp	r3, #1
 8008684:	d101      	bne.n	800868a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	e022      	b.n	80086d0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800868e:	2b00      	cmp	r3, #0
 8008690:	d002      	beq.n	8008698 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f001 fb40 	bl	8009d18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	685a      	ldr	r2, [r3, #4]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80086a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	689a      	ldr	r2, [r3, #8]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80086b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f042 0201 	orr.w	r2, r2, #1
 80086c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f001 fbc7 	bl	8009e5c <UART_CheckIdleState>
 80086ce:	4603      	mov	r3, r0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3708      	adds	r7, #8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b08a      	sub	sp, #40	; 0x28
 80086dc:	af02      	add	r7, sp, #8
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	603b      	str	r3, [r7, #0]
 80086e4:	4613      	mov	r3, r2
 80086e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ee:	2b20      	cmp	r3, #32
 80086f0:	d17b      	bne.n	80087ea <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d002      	beq.n	80086fe <HAL_UART_Transmit+0x26>
 80086f8:	88fb      	ldrh	r3, [r7, #6]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d101      	bne.n	8008702 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	e074      	b.n	80087ec <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2200      	movs	r2, #0
 8008706:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2221      	movs	r2, #33	; 0x21
 800870e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008712:	f7f9 fc07 	bl	8001f24 <HAL_GetTick>
 8008716:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	88fa      	ldrh	r2, [r7, #6]
 800871c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	88fa      	ldrh	r2, [r7, #6]
 8008724:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008730:	d108      	bne.n	8008744 <HAL_UART_Transmit+0x6c>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d104      	bne.n	8008744 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800873a:	2300      	movs	r3, #0
 800873c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	61bb      	str	r3, [r7, #24]
 8008742:	e003      	b.n	800874c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008748:	2300      	movs	r3, #0
 800874a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800874c:	e030      	b.n	80087b0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	9300      	str	r3, [sp, #0]
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	2200      	movs	r2, #0
 8008756:	2180      	movs	r1, #128	; 0x80
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f001 fc29 	bl	8009fb0 <UART_WaitOnFlagUntilTimeout>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d005      	beq.n	8008770 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2220      	movs	r2, #32
 8008768:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800876c:	2303      	movs	r3, #3
 800876e:	e03d      	b.n	80087ec <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d10b      	bne.n	800878e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	881b      	ldrh	r3, [r3, #0]
 800877a:	461a      	mov	r2, r3
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008784:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	3302      	adds	r3, #2
 800878a:	61bb      	str	r3, [r7, #24]
 800878c:	e007      	b.n	800879e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	781a      	ldrb	r2, [r3, #0]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	3301      	adds	r3, #1
 800879c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	3b01      	subs	r3, #1
 80087a8:	b29a      	uxth	r2, r3
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1c8      	bne.n	800874e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	9300      	str	r3, [sp, #0]
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	2200      	movs	r2, #0
 80087c4:	2140      	movs	r1, #64	; 0x40
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	f001 fbf2 	bl	8009fb0 <UART_WaitOnFlagUntilTimeout>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d005      	beq.n	80087de <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2220      	movs	r2, #32
 80087d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80087da:	2303      	movs	r3, #3
 80087dc:	e006      	b.n	80087ec <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2220      	movs	r2, #32
 80087e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80087e6:	2300      	movs	r3, #0
 80087e8:	e000      	b.n	80087ec <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80087ea:	2302      	movs	r3, #2
  }
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3720      	adds	r7, #32
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b08a      	sub	sp, #40	; 0x28
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	4613      	mov	r3, r2
 8008800:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008808:	2b20      	cmp	r3, #32
 800880a:	d137      	bne.n	800887c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d002      	beq.n	8008818 <HAL_UART_Receive_IT+0x24>
 8008812:	88fb      	ldrh	r3, [r7, #6]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d101      	bne.n	800881c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	e030      	b.n	800887e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2200      	movs	r2, #0
 8008820:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a18      	ldr	r2, [pc, #96]	; (8008888 <HAL_UART_Receive_IT+0x94>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d01f      	beq.n	800886c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d018      	beq.n	800886c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	e853 3f00 	ldrex	r3, [r3]
 8008846:	613b      	str	r3, [r7, #16]
   return(result);
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800884e:	627b      	str	r3, [r7, #36]	; 0x24
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	461a      	mov	r2, r3
 8008856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008858:	623b      	str	r3, [r7, #32]
 800885a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885c:	69f9      	ldr	r1, [r7, #28]
 800885e:	6a3a      	ldr	r2, [r7, #32]
 8008860:	e841 2300 	strex	r3, r2, [r1]
 8008864:	61bb      	str	r3, [r7, #24]
   return(result);
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1e6      	bne.n	800883a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800886c:	88fb      	ldrh	r3, [r7, #6]
 800886e:	461a      	mov	r2, r3
 8008870:	68b9      	ldr	r1, [r7, #8]
 8008872:	68f8      	ldr	r0, [r7, #12]
 8008874:	f001 fc04 	bl	800a080 <UART_Start_Receive_IT>
 8008878:	4603      	mov	r3, r0
 800887a:	e000      	b.n	800887e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800887c:	2302      	movs	r3, #2
  }
}
 800887e:	4618      	mov	r0, r3
 8008880:	3728      	adds	r7, #40	; 0x28
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	58000c00 	.word	0x58000c00

0800888c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b0ba      	sub	sp, #232	; 0xe8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	69db      	ldr	r3, [r3, #28]
 800889a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80088b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80088b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80088ba:	4013      	ands	r3, r2
 80088bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80088c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d11b      	bne.n	8008900 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80088c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088cc:	f003 0320 	and.w	r3, r3, #32
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d015      	beq.n	8008900 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80088d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088d8:	f003 0320 	and.w	r3, r3, #32
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d105      	bne.n	80088ec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80088e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d009      	beq.n	8008900 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f000 8377 	beq.w	8008fe4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	4798      	blx	r3
      }
      return;
 80088fe:	e371      	b.n	8008fe4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008900:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008904:	2b00      	cmp	r3, #0
 8008906:	f000 8123 	beq.w	8008b50 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800890a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800890e:	4b8d      	ldr	r3, [pc, #564]	; (8008b44 <HAL_UART_IRQHandler+0x2b8>)
 8008910:	4013      	ands	r3, r2
 8008912:	2b00      	cmp	r3, #0
 8008914:	d106      	bne.n	8008924 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008916:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800891a:	4b8b      	ldr	r3, [pc, #556]	; (8008b48 <HAL_UART_IRQHandler+0x2bc>)
 800891c:	4013      	ands	r3, r2
 800891e:	2b00      	cmp	r3, #0
 8008920:	f000 8116 	beq.w	8008b50 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	2b00      	cmp	r3, #0
 800892e:	d011      	beq.n	8008954 <HAL_UART_IRQHandler+0xc8>
 8008930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00b      	beq.n	8008954 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	2201      	movs	r2, #1
 8008942:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800894a:	f043 0201 	orr.w	r2, r3, #1
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008958:	f003 0302 	and.w	r3, r3, #2
 800895c:	2b00      	cmp	r3, #0
 800895e:	d011      	beq.n	8008984 <HAL_UART_IRQHandler+0xf8>
 8008960:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008964:	f003 0301 	and.w	r3, r3, #1
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00b      	beq.n	8008984 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2202      	movs	r2, #2
 8008972:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800897a:	f043 0204 	orr.w	r2, r3, #4
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008988:	f003 0304 	and.w	r3, r3, #4
 800898c:	2b00      	cmp	r3, #0
 800898e:	d011      	beq.n	80089b4 <HAL_UART_IRQHandler+0x128>
 8008990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008994:	f003 0301 	and.w	r3, r3, #1
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00b      	beq.n	80089b4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2204      	movs	r2, #4
 80089a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089aa:	f043 0202 	orr.w	r2, r3, #2
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80089b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089b8:	f003 0308 	and.w	r3, r3, #8
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d017      	beq.n	80089f0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80089c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089c4:	f003 0320 	and.w	r3, r3, #32
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d105      	bne.n	80089d8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80089cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80089d0:	4b5c      	ldr	r3, [pc, #368]	; (8008b44 <HAL_UART_IRQHandler+0x2b8>)
 80089d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00b      	beq.n	80089f0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2208      	movs	r2, #8
 80089de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089e6:	f043 0208 	orr.w	r2, r3, #8
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80089f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d012      	beq.n	8008a22 <HAL_UART_IRQHandler+0x196>
 80089fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d00c      	beq.n	8008a22 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a18:	f043 0220 	orr.w	r2, r3, #32
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f000 82dd 	beq.w	8008fe8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a32:	f003 0320 	and.w	r3, r3, #32
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d013      	beq.n	8008a62 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a3e:	f003 0320 	and.w	r3, r3, #32
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d105      	bne.n	8008a52 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d007      	beq.n	8008a62 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d003      	beq.n	8008a62 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a76:	2b40      	cmp	r3, #64	; 0x40
 8008a78:	d005      	beq.n	8008a86 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008a7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d054      	beq.n	8008b30 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f001 fc1c 	bl	800a2c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a96:	2b40      	cmp	r3, #64	; 0x40
 8008a98:	d146      	bne.n	8008b28 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	3308      	adds	r3, #8
 8008aa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008aa8:	e853 3f00 	ldrex	r3, [r3]
 8008aac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008ab0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	3308      	adds	r3, #8
 8008ac2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008ac6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008aca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ace:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008ad2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008ad6:	e841 2300 	strex	r3, r2, [r1]
 8008ada:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008ade:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1d9      	bne.n	8008a9a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d017      	beq.n	8008b20 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008af6:	4a15      	ldr	r2, [pc, #84]	; (8008b4c <HAL_UART_IRQHandler+0x2c0>)
 8008af8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7fb f83b 	bl	8003b7c <HAL_DMA_Abort_IT>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d019      	beq.n	8008b40 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8008b1a:	4610      	mov	r0, r2
 8008b1c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b1e:	e00f      	b.n	8008b40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fa77 	bl	8009014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b26:	e00b      	b.n	8008b40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fa73 	bl	8009014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b2e:	e007      	b.n	8008b40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 fa6f 	bl	8009014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8008b3e:	e253      	b.n	8008fe8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b40:	bf00      	nop
    return;
 8008b42:	e251      	b.n	8008fe8 <HAL_UART_IRQHandler+0x75c>
 8008b44:	10000001 	.word	0x10000001
 8008b48:	04000120 	.word	0x04000120
 8008b4c:	0800a391 	.word	0x0800a391

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	f040 81e7 	bne.w	8008f28 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b5e:	f003 0310 	and.w	r3, r3, #16
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f000 81e0 	beq.w	8008f28 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b6c:	f003 0310 	and.w	r3, r3, #16
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f000 81d9 	beq.w	8008f28 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2210      	movs	r2, #16
 8008b7c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b88:	2b40      	cmp	r3, #64	; 0x40
 8008b8a:	f040 8151 	bne.w	8008e30 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a96      	ldr	r2, [pc, #600]	; (8008df0 <HAL_UART_IRQHandler+0x564>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d068      	beq.n	8008c6e <HAL_UART_IRQHandler+0x3e2>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a93      	ldr	r2, [pc, #588]	; (8008df4 <HAL_UART_IRQHandler+0x568>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d061      	beq.n	8008c6e <HAL_UART_IRQHandler+0x3e2>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a91      	ldr	r2, [pc, #580]	; (8008df8 <HAL_UART_IRQHandler+0x56c>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d05a      	beq.n	8008c6e <HAL_UART_IRQHandler+0x3e2>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a8e      	ldr	r2, [pc, #568]	; (8008dfc <HAL_UART_IRQHandler+0x570>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d053      	beq.n	8008c6e <HAL_UART_IRQHandler+0x3e2>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a8c      	ldr	r2, [pc, #560]	; (8008e00 <HAL_UART_IRQHandler+0x574>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d04c      	beq.n	8008c6e <HAL_UART_IRQHandler+0x3e2>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a89      	ldr	r2, [pc, #548]	; (8008e04 <HAL_UART_IRQHandler+0x578>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d045      	beq.n	8008c6e <HAL_UART_IRQHandler+0x3e2>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a87      	ldr	r2, [pc, #540]	; (8008e08 <HAL_UART_IRQHandler+0x57c>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d03e      	beq.n	8008c6e <HAL_UART_IRQHandler+0x3e2>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a84      	ldr	r2, [pc, #528]	; (8008e0c <HAL_UART_IRQHandler+0x580>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d037      	beq.n	8008c6e <HAL_UART_IRQHandler+0x3e2>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a82      	ldr	r2, [pc, #520]	; (8008e10 <HAL_UART_IRQHandler+0x584>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d030      	beq.n	8008c6e <HAL_UART_IRQHandler+0x3e2>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a7f      	ldr	r2, [pc, #508]	; (8008e14 <HAL_UART_IRQHandler+0x588>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d029      	beq.n	8008c6e <HAL_UART_IRQHandler+0x3e2>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a7d      	ldr	r2, [pc, #500]	; (8008e18 <HAL_UART_IRQHandler+0x58c>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d022      	beq.n	8008c6e <HAL_UART_IRQHandler+0x3e2>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a7a      	ldr	r2, [pc, #488]	; (8008e1c <HAL_UART_IRQHandler+0x590>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d01b      	beq.n	8008c6e <HAL_UART_IRQHandler+0x3e2>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a78      	ldr	r2, [pc, #480]	; (8008e20 <HAL_UART_IRQHandler+0x594>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d014      	beq.n	8008c6e <HAL_UART_IRQHandler+0x3e2>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a75      	ldr	r2, [pc, #468]	; (8008e24 <HAL_UART_IRQHandler+0x598>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d00d      	beq.n	8008c6e <HAL_UART_IRQHandler+0x3e2>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a73      	ldr	r2, [pc, #460]	; (8008e28 <HAL_UART_IRQHandler+0x59c>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d006      	beq.n	8008c6e <HAL_UART_IRQHandler+0x3e2>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a70      	ldr	r2, [pc, #448]	; (8008e2c <HAL_UART_IRQHandler+0x5a0>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d106      	bne.n	8008c7c <HAL_UART_IRQHandler+0x3f0>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	e005      	b.n	8008c88 <HAL_UART_IRQHandler+0x3fc>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008c8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f000 81ab 	beq.w	8008fec <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	f080 81a3 	bcs.w	8008fec <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008cac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cb6:	69db      	ldr	r3, [r3, #28]
 8008cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cbc:	f000 8087 	beq.w	8008dce <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ccc:	e853 3f00 	ldrex	r3, [r3]
 8008cd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008cd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008cd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008cea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008cee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008cf6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008cfa:	e841 2300 	strex	r3, r2, [r1]
 8008cfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008d02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d1da      	bne.n	8008cc0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	3308      	adds	r3, #8
 8008d10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d14:	e853 3f00 	ldrex	r3, [r3]
 8008d18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008d1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d1c:	f023 0301 	bic.w	r3, r3, #1
 8008d20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3308      	adds	r3, #8
 8008d2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008d2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008d32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008d36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008d3a:	e841 2300 	strex	r3, r2, [r1]
 8008d3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008d40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1e1      	bne.n	8008d0a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	3308      	adds	r3, #8
 8008d4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d50:	e853 3f00 	ldrex	r3, [r3]
 8008d54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008d56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	3308      	adds	r3, #8
 8008d66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008d6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008d6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008d70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008d72:	e841 2300 	strex	r3, r2, [r1]
 8008d76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008d78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d1e3      	bne.n	8008d46 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2220      	movs	r2, #32
 8008d82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d94:	e853 3f00 	ldrex	r3, [r3]
 8008d98:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d9c:	f023 0310 	bic.w	r3, r3, #16
 8008da0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	461a      	mov	r2, r3
 8008daa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008dae:	65bb      	str	r3, [r7, #88]	; 0x58
 8008db0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008db4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008db6:	e841 2300 	strex	r3, r2, [r1]
 8008dba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008dbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d1e4      	bne.n	8008d8c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7fa fbb9 	bl	8003540 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2202      	movs	r2, #2
 8008dd2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	1ad3      	subs	r3, r2, r3
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	4619      	mov	r1, r3
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 f91d 	bl	8009028 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008dee:	e0fd      	b.n	8008fec <HAL_UART_IRQHandler+0x760>
 8008df0:	40020010 	.word	0x40020010
 8008df4:	40020028 	.word	0x40020028
 8008df8:	40020040 	.word	0x40020040
 8008dfc:	40020058 	.word	0x40020058
 8008e00:	40020070 	.word	0x40020070
 8008e04:	40020088 	.word	0x40020088
 8008e08:	400200a0 	.word	0x400200a0
 8008e0c:	400200b8 	.word	0x400200b8
 8008e10:	40020410 	.word	0x40020410
 8008e14:	40020428 	.word	0x40020428
 8008e18:	40020440 	.word	0x40020440
 8008e1c:	40020458 	.word	0x40020458
 8008e20:	40020470 	.word	0x40020470
 8008e24:	40020488 	.word	0x40020488
 8008e28:	400204a0 	.word	0x400204a0
 8008e2c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	1ad3      	subs	r3, r2, r3
 8008e40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f000 80cf 	beq.w	8008ff0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008e52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	f000 80ca 	beq.w	8008ff0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e64:	e853 3f00 	ldrex	r3, [r3]
 8008e68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	461a      	mov	r2, r3
 8008e7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e7e:	647b      	str	r3, [r7, #68]	; 0x44
 8008e80:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e86:	e841 2300 	strex	r3, r2, [r1]
 8008e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1e4      	bne.n	8008e5c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	3308      	adds	r3, #8
 8008e98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9c:	e853 3f00 	ldrex	r3, [r3]
 8008ea0:	623b      	str	r3, [r7, #32]
   return(result);
 8008ea2:	6a3a      	ldr	r2, [r7, #32]
 8008ea4:	4b55      	ldr	r3, [pc, #340]	; (8008ffc <HAL_UART_IRQHandler+0x770>)
 8008ea6:	4013      	ands	r3, r2
 8008ea8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	3308      	adds	r3, #8
 8008eb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008eb6:	633a      	str	r2, [r7, #48]	; 0x30
 8008eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ebe:	e841 2300 	strex	r3, r2, [r1]
 8008ec2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1e3      	bne.n	8008e92 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2220      	movs	r2, #32
 8008ece:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	e853 3f00 	ldrex	r3, [r3]
 8008eea:	60fb      	str	r3, [r7, #12]
   return(result);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f023 0310 	bic.w	r3, r3, #16
 8008ef2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	461a      	mov	r2, r3
 8008efc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008f00:	61fb      	str	r3, [r7, #28]
 8008f02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f04:	69b9      	ldr	r1, [r7, #24]
 8008f06:	69fa      	ldr	r2, [r7, #28]
 8008f08:	e841 2300 	strex	r3, r2, [r1]
 8008f0c:	617b      	str	r3, [r7, #20]
   return(result);
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1e4      	bne.n	8008ede <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2202      	movs	r2, #2
 8008f18:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008f1e:	4619      	mov	r1, r3
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 f881 	bl	8009028 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008f26:	e063      	b.n	8008ff0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d00e      	beq.n	8008f52 <HAL_UART_IRQHandler+0x6c6>
 8008f34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d008      	beq.n	8008f52 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008f48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f001 ff7e 	bl	800ae4c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008f50:	e051      	b.n	8008ff6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d014      	beq.n	8008f88 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d105      	bne.n	8008f76 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d008      	beq.n	8008f88 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d03a      	beq.n	8008ff4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	4798      	blx	r3
    }
    return;
 8008f86:	e035      	b.n	8008ff4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d009      	beq.n	8008fa8 <HAL_UART_IRQHandler+0x71c>
 8008f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d003      	beq.n	8008fa8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f001 fa0b 	bl	800a3bc <UART_EndTransmit_IT>
    return;
 8008fa6:	e026      	b.n	8008ff6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d009      	beq.n	8008fc8 <HAL_UART_IRQHandler+0x73c>
 8008fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fb8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d003      	beq.n	8008fc8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f001 ff57 	bl	800ae74 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008fc6:	e016      	b.n	8008ff6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d010      	beq.n	8008ff6 <HAL_UART_IRQHandler+0x76a>
 8008fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	da0c      	bge.n	8008ff6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f001 ff3f 	bl	800ae60 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008fe2:	e008      	b.n	8008ff6 <HAL_UART_IRQHandler+0x76a>
      return;
 8008fe4:	bf00      	nop
 8008fe6:	e006      	b.n	8008ff6 <HAL_UART_IRQHandler+0x76a>
    return;
 8008fe8:	bf00      	nop
 8008fea:	e004      	b.n	8008ff6 <HAL_UART_IRQHandler+0x76a>
      return;
 8008fec:	bf00      	nop
 8008fee:	e002      	b.n	8008ff6 <HAL_UART_IRQHandler+0x76a>
      return;
 8008ff0:	bf00      	nop
 8008ff2:	e000      	b.n	8008ff6 <HAL_UART_IRQHandler+0x76a>
    return;
 8008ff4:	bf00      	nop
  }
}
 8008ff6:	37e8      	adds	r7, #232	; 0xe8
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	effffffe 	.word	0xeffffffe

08009000 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009008:	bf00      	nop
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800901c:	bf00      	nop
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	460b      	mov	r3, r1
 8009032:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009034:	bf00      	nop
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009044:	b092      	sub	sp, #72	; 0x48
 8009046:	af00      	add	r7, sp, #0
 8009048:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800904a:	2300      	movs	r3, #0
 800904c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	689a      	ldr	r2, [r3, #8]
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	691b      	ldr	r3, [r3, #16]
 8009058:	431a      	orrs	r2, r3
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	695b      	ldr	r3, [r3, #20]
 800905e:	431a      	orrs	r2, r3
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	69db      	ldr	r3, [r3, #28]
 8009064:	4313      	orrs	r3, r2
 8009066:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	4bbe      	ldr	r3, [pc, #760]	; (8009368 <UART_SetConfig+0x328>)
 8009070:	4013      	ands	r3, r2
 8009072:	697a      	ldr	r2, [r7, #20]
 8009074:	6812      	ldr	r2, [r2, #0]
 8009076:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009078:	430b      	orrs	r3, r1
 800907a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	68da      	ldr	r2, [r3, #12]
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	430a      	orrs	r2, r1
 8009090:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	699b      	ldr	r3, [r3, #24]
 8009096:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4ab3      	ldr	r2, [pc, #716]	; (800936c <UART_SetConfig+0x32c>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d004      	beq.n	80090ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	6a1b      	ldr	r3, [r3, #32]
 80090a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090a8:	4313      	orrs	r3, r2
 80090aa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	689a      	ldr	r2, [r3, #8]
 80090b2:	4baf      	ldr	r3, [pc, #700]	; (8009370 <UART_SetConfig+0x330>)
 80090b4:	4013      	ands	r3, r2
 80090b6:	697a      	ldr	r2, [r7, #20]
 80090b8:	6812      	ldr	r2, [r2, #0]
 80090ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80090bc:	430b      	orrs	r3, r1
 80090be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c6:	f023 010f 	bic.w	r1, r3, #15
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	430a      	orrs	r2, r1
 80090d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4aa6      	ldr	r2, [pc, #664]	; (8009374 <UART_SetConfig+0x334>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d177      	bne.n	80091d0 <UART_SetConfig+0x190>
 80090e0:	4ba5      	ldr	r3, [pc, #660]	; (8009378 <UART_SetConfig+0x338>)
 80090e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80090e8:	2b28      	cmp	r3, #40	; 0x28
 80090ea:	d86d      	bhi.n	80091c8 <UART_SetConfig+0x188>
 80090ec:	a201      	add	r2, pc, #4	; (adr r2, 80090f4 <UART_SetConfig+0xb4>)
 80090ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f2:	bf00      	nop
 80090f4:	08009199 	.word	0x08009199
 80090f8:	080091c9 	.word	0x080091c9
 80090fc:	080091c9 	.word	0x080091c9
 8009100:	080091c9 	.word	0x080091c9
 8009104:	080091c9 	.word	0x080091c9
 8009108:	080091c9 	.word	0x080091c9
 800910c:	080091c9 	.word	0x080091c9
 8009110:	080091c9 	.word	0x080091c9
 8009114:	080091a1 	.word	0x080091a1
 8009118:	080091c9 	.word	0x080091c9
 800911c:	080091c9 	.word	0x080091c9
 8009120:	080091c9 	.word	0x080091c9
 8009124:	080091c9 	.word	0x080091c9
 8009128:	080091c9 	.word	0x080091c9
 800912c:	080091c9 	.word	0x080091c9
 8009130:	080091c9 	.word	0x080091c9
 8009134:	080091a9 	.word	0x080091a9
 8009138:	080091c9 	.word	0x080091c9
 800913c:	080091c9 	.word	0x080091c9
 8009140:	080091c9 	.word	0x080091c9
 8009144:	080091c9 	.word	0x080091c9
 8009148:	080091c9 	.word	0x080091c9
 800914c:	080091c9 	.word	0x080091c9
 8009150:	080091c9 	.word	0x080091c9
 8009154:	080091b1 	.word	0x080091b1
 8009158:	080091c9 	.word	0x080091c9
 800915c:	080091c9 	.word	0x080091c9
 8009160:	080091c9 	.word	0x080091c9
 8009164:	080091c9 	.word	0x080091c9
 8009168:	080091c9 	.word	0x080091c9
 800916c:	080091c9 	.word	0x080091c9
 8009170:	080091c9 	.word	0x080091c9
 8009174:	080091b9 	.word	0x080091b9
 8009178:	080091c9 	.word	0x080091c9
 800917c:	080091c9 	.word	0x080091c9
 8009180:	080091c9 	.word	0x080091c9
 8009184:	080091c9 	.word	0x080091c9
 8009188:	080091c9 	.word	0x080091c9
 800918c:	080091c9 	.word	0x080091c9
 8009190:	080091c9 	.word	0x080091c9
 8009194:	080091c1 	.word	0x080091c1
 8009198:	2301      	movs	r3, #1
 800919a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800919e:	e326      	b.n	80097ee <UART_SetConfig+0x7ae>
 80091a0:	2304      	movs	r3, #4
 80091a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091a6:	e322      	b.n	80097ee <UART_SetConfig+0x7ae>
 80091a8:	2308      	movs	r3, #8
 80091aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091ae:	e31e      	b.n	80097ee <UART_SetConfig+0x7ae>
 80091b0:	2310      	movs	r3, #16
 80091b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091b6:	e31a      	b.n	80097ee <UART_SetConfig+0x7ae>
 80091b8:	2320      	movs	r3, #32
 80091ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091be:	e316      	b.n	80097ee <UART_SetConfig+0x7ae>
 80091c0:	2340      	movs	r3, #64	; 0x40
 80091c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091c6:	e312      	b.n	80097ee <UART_SetConfig+0x7ae>
 80091c8:	2380      	movs	r3, #128	; 0x80
 80091ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091ce:	e30e      	b.n	80097ee <UART_SetConfig+0x7ae>
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a69      	ldr	r2, [pc, #420]	; (800937c <UART_SetConfig+0x33c>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d130      	bne.n	800923c <UART_SetConfig+0x1fc>
 80091da:	4b67      	ldr	r3, [pc, #412]	; (8009378 <UART_SetConfig+0x338>)
 80091dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091de:	f003 0307 	and.w	r3, r3, #7
 80091e2:	2b05      	cmp	r3, #5
 80091e4:	d826      	bhi.n	8009234 <UART_SetConfig+0x1f4>
 80091e6:	a201      	add	r2, pc, #4	; (adr r2, 80091ec <UART_SetConfig+0x1ac>)
 80091e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ec:	08009205 	.word	0x08009205
 80091f0:	0800920d 	.word	0x0800920d
 80091f4:	08009215 	.word	0x08009215
 80091f8:	0800921d 	.word	0x0800921d
 80091fc:	08009225 	.word	0x08009225
 8009200:	0800922d 	.word	0x0800922d
 8009204:	2300      	movs	r3, #0
 8009206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800920a:	e2f0      	b.n	80097ee <UART_SetConfig+0x7ae>
 800920c:	2304      	movs	r3, #4
 800920e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009212:	e2ec      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009214:	2308      	movs	r3, #8
 8009216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800921a:	e2e8      	b.n	80097ee <UART_SetConfig+0x7ae>
 800921c:	2310      	movs	r3, #16
 800921e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009222:	e2e4      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009224:	2320      	movs	r3, #32
 8009226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800922a:	e2e0      	b.n	80097ee <UART_SetConfig+0x7ae>
 800922c:	2340      	movs	r3, #64	; 0x40
 800922e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009232:	e2dc      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009234:	2380      	movs	r3, #128	; 0x80
 8009236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800923a:	e2d8      	b.n	80097ee <UART_SetConfig+0x7ae>
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a4f      	ldr	r2, [pc, #316]	; (8009380 <UART_SetConfig+0x340>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d130      	bne.n	80092a8 <UART_SetConfig+0x268>
 8009246:	4b4c      	ldr	r3, [pc, #304]	; (8009378 <UART_SetConfig+0x338>)
 8009248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800924a:	f003 0307 	and.w	r3, r3, #7
 800924e:	2b05      	cmp	r3, #5
 8009250:	d826      	bhi.n	80092a0 <UART_SetConfig+0x260>
 8009252:	a201      	add	r2, pc, #4	; (adr r2, 8009258 <UART_SetConfig+0x218>)
 8009254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009258:	08009271 	.word	0x08009271
 800925c:	08009279 	.word	0x08009279
 8009260:	08009281 	.word	0x08009281
 8009264:	08009289 	.word	0x08009289
 8009268:	08009291 	.word	0x08009291
 800926c:	08009299 	.word	0x08009299
 8009270:	2300      	movs	r3, #0
 8009272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009276:	e2ba      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009278:	2304      	movs	r3, #4
 800927a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800927e:	e2b6      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009280:	2308      	movs	r3, #8
 8009282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009286:	e2b2      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009288:	2310      	movs	r3, #16
 800928a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800928e:	e2ae      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009290:	2320      	movs	r3, #32
 8009292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009296:	e2aa      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009298:	2340      	movs	r3, #64	; 0x40
 800929a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800929e:	e2a6      	b.n	80097ee <UART_SetConfig+0x7ae>
 80092a0:	2380      	movs	r3, #128	; 0x80
 80092a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092a6:	e2a2      	b.n	80097ee <UART_SetConfig+0x7ae>
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a35      	ldr	r2, [pc, #212]	; (8009384 <UART_SetConfig+0x344>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d130      	bne.n	8009314 <UART_SetConfig+0x2d4>
 80092b2:	4b31      	ldr	r3, [pc, #196]	; (8009378 <UART_SetConfig+0x338>)
 80092b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092b6:	f003 0307 	and.w	r3, r3, #7
 80092ba:	2b05      	cmp	r3, #5
 80092bc:	d826      	bhi.n	800930c <UART_SetConfig+0x2cc>
 80092be:	a201      	add	r2, pc, #4	; (adr r2, 80092c4 <UART_SetConfig+0x284>)
 80092c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c4:	080092dd 	.word	0x080092dd
 80092c8:	080092e5 	.word	0x080092e5
 80092cc:	080092ed 	.word	0x080092ed
 80092d0:	080092f5 	.word	0x080092f5
 80092d4:	080092fd 	.word	0x080092fd
 80092d8:	08009305 	.word	0x08009305
 80092dc:	2300      	movs	r3, #0
 80092de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092e2:	e284      	b.n	80097ee <UART_SetConfig+0x7ae>
 80092e4:	2304      	movs	r3, #4
 80092e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092ea:	e280      	b.n	80097ee <UART_SetConfig+0x7ae>
 80092ec:	2308      	movs	r3, #8
 80092ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092f2:	e27c      	b.n	80097ee <UART_SetConfig+0x7ae>
 80092f4:	2310      	movs	r3, #16
 80092f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092fa:	e278      	b.n	80097ee <UART_SetConfig+0x7ae>
 80092fc:	2320      	movs	r3, #32
 80092fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009302:	e274      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009304:	2340      	movs	r3, #64	; 0x40
 8009306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800930a:	e270      	b.n	80097ee <UART_SetConfig+0x7ae>
 800930c:	2380      	movs	r3, #128	; 0x80
 800930e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009312:	e26c      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a1b      	ldr	r2, [pc, #108]	; (8009388 <UART_SetConfig+0x348>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d142      	bne.n	80093a4 <UART_SetConfig+0x364>
 800931e:	4b16      	ldr	r3, [pc, #88]	; (8009378 <UART_SetConfig+0x338>)
 8009320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009322:	f003 0307 	and.w	r3, r3, #7
 8009326:	2b05      	cmp	r3, #5
 8009328:	d838      	bhi.n	800939c <UART_SetConfig+0x35c>
 800932a:	a201      	add	r2, pc, #4	; (adr r2, 8009330 <UART_SetConfig+0x2f0>)
 800932c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009330:	08009349 	.word	0x08009349
 8009334:	08009351 	.word	0x08009351
 8009338:	08009359 	.word	0x08009359
 800933c:	08009361 	.word	0x08009361
 8009340:	0800938d 	.word	0x0800938d
 8009344:	08009395 	.word	0x08009395
 8009348:	2300      	movs	r3, #0
 800934a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800934e:	e24e      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009350:	2304      	movs	r3, #4
 8009352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009356:	e24a      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009358:	2308      	movs	r3, #8
 800935a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800935e:	e246      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009360:	2310      	movs	r3, #16
 8009362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009366:	e242      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009368:	cfff69f3 	.word	0xcfff69f3
 800936c:	58000c00 	.word	0x58000c00
 8009370:	11fff4ff 	.word	0x11fff4ff
 8009374:	40011000 	.word	0x40011000
 8009378:	58024400 	.word	0x58024400
 800937c:	40004400 	.word	0x40004400
 8009380:	40004800 	.word	0x40004800
 8009384:	40004c00 	.word	0x40004c00
 8009388:	40005000 	.word	0x40005000
 800938c:	2320      	movs	r3, #32
 800938e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009392:	e22c      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009394:	2340      	movs	r3, #64	; 0x40
 8009396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800939a:	e228      	b.n	80097ee <UART_SetConfig+0x7ae>
 800939c:	2380      	movs	r3, #128	; 0x80
 800939e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093a2:	e224      	b.n	80097ee <UART_SetConfig+0x7ae>
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4ab1      	ldr	r2, [pc, #708]	; (8009670 <UART_SetConfig+0x630>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d176      	bne.n	800949c <UART_SetConfig+0x45c>
 80093ae:	4bb1      	ldr	r3, [pc, #708]	; (8009674 <UART_SetConfig+0x634>)
 80093b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80093b6:	2b28      	cmp	r3, #40	; 0x28
 80093b8:	d86c      	bhi.n	8009494 <UART_SetConfig+0x454>
 80093ba:	a201      	add	r2, pc, #4	; (adr r2, 80093c0 <UART_SetConfig+0x380>)
 80093bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c0:	08009465 	.word	0x08009465
 80093c4:	08009495 	.word	0x08009495
 80093c8:	08009495 	.word	0x08009495
 80093cc:	08009495 	.word	0x08009495
 80093d0:	08009495 	.word	0x08009495
 80093d4:	08009495 	.word	0x08009495
 80093d8:	08009495 	.word	0x08009495
 80093dc:	08009495 	.word	0x08009495
 80093e0:	0800946d 	.word	0x0800946d
 80093e4:	08009495 	.word	0x08009495
 80093e8:	08009495 	.word	0x08009495
 80093ec:	08009495 	.word	0x08009495
 80093f0:	08009495 	.word	0x08009495
 80093f4:	08009495 	.word	0x08009495
 80093f8:	08009495 	.word	0x08009495
 80093fc:	08009495 	.word	0x08009495
 8009400:	08009475 	.word	0x08009475
 8009404:	08009495 	.word	0x08009495
 8009408:	08009495 	.word	0x08009495
 800940c:	08009495 	.word	0x08009495
 8009410:	08009495 	.word	0x08009495
 8009414:	08009495 	.word	0x08009495
 8009418:	08009495 	.word	0x08009495
 800941c:	08009495 	.word	0x08009495
 8009420:	0800947d 	.word	0x0800947d
 8009424:	08009495 	.word	0x08009495
 8009428:	08009495 	.word	0x08009495
 800942c:	08009495 	.word	0x08009495
 8009430:	08009495 	.word	0x08009495
 8009434:	08009495 	.word	0x08009495
 8009438:	08009495 	.word	0x08009495
 800943c:	08009495 	.word	0x08009495
 8009440:	08009485 	.word	0x08009485
 8009444:	08009495 	.word	0x08009495
 8009448:	08009495 	.word	0x08009495
 800944c:	08009495 	.word	0x08009495
 8009450:	08009495 	.word	0x08009495
 8009454:	08009495 	.word	0x08009495
 8009458:	08009495 	.word	0x08009495
 800945c:	08009495 	.word	0x08009495
 8009460:	0800948d 	.word	0x0800948d
 8009464:	2301      	movs	r3, #1
 8009466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800946a:	e1c0      	b.n	80097ee <UART_SetConfig+0x7ae>
 800946c:	2304      	movs	r3, #4
 800946e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009472:	e1bc      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009474:	2308      	movs	r3, #8
 8009476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800947a:	e1b8      	b.n	80097ee <UART_SetConfig+0x7ae>
 800947c:	2310      	movs	r3, #16
 800947e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009482:	e1b4      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009484:	2320      	movs	r3, #32
 8009486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800948a:	e1b0      	b.n	80097ee <UART_SetConfig+0x7ae>
 800948c:	2340      	movs	r3, #64	; 0x40
 800948e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009492:	e1ac      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009494:	2380      	movs	r3, #128	; 0x80
 8009496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800949a:	e1a8      	b.n	80097ee <UART_SetConfig+0x7ae>
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a75      	ldr	r2, [pc, #468]	; (8009678 <UART_SetConfig+0x638>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d130      	bne.n	8009508 <UART_SetConfig+0x4c8>
 80094a6:	4b73      	ldr	r3, [pc, #460]	; (8009674 <UART_SetConfig+0x634>)
 80094a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094aa:	f003 0307 	and.w	r3, r3, #7
 80094ae:	2b05      	cmp	r3, #5
 80094b0:	d826      	bhi.n	8009500 <UART_SetConfig+0x4c0>
 80094b2:	a201      	add	r2, pc, #4	; (adr r2, 80094b8 <UART_SetConfig+0x478>)
 80094b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b8:	080094d1 	.word	0x080094d1
 80094bc:	080094d9 	.word	0x080094d9
 80094c0:	080094e1 	.word	0x080094e1
 80094c4:	080094e9 	.word	0x080094e9
 80094c8:	080094f1 	.word	0x080094f1
 80094cc:	080094f9 	.word	0x080094f9
 80094d0:	2300      	movs	r3, #0
 80094d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094d6:	e18a      	b.n	80097ee <UART_SetConfig+0x7ae>
 80094d8:	2304      	movs	r3, #4
 80094da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094de:	e186      	b.n	80097ee <UART_SetConfig+0x7ae>
 80094e0:	2308      	movs	r3, #8
 80094e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094e6:	e182      	b.n	80097ee <UART_SetConfig+0x7ae>
 80094e8:	2310      	movs	r3, #16
 80094ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ee:	e17e      	b.n	80097ee <UART_SetConfig+0x7ae>
 80094f0:	2320      	movs	r3, #32
 80094f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094f6:	e17a      	b.n	80097ee <UART_SetConfig+0x7ae>
 80094f8:	2340      	movs	r3, #64	; 0x40
 80094fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094fe:	e176      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009500:	2380      	movs	r3, #128	; 0x80
 8009502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009506:	e172      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a5b      	ldr	r2, [pc, #364]	; (800967c <UART_SetConfig+0x63c>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d130      	bne.n	8009574 <UART_SetConfig+0x534>
 8009512:	4b58      	ldr	r3, [pc, #352]	; (8009674 <UART_SetConfig+0x634>)
 8009514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009516:	f003 0307 	and.w	r3, r3, #7
 800951a:	2b05      	cmp	r3, #5
 800951c:	d826      	bhi.n	800956c <UART_SetConfig+0x52c>
 800951e:	a201      	add	r2, pc, #4	; (adr r2, 8009524 <UART_SetConfig+0x4e4>)
 8009520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009524:	0800953d 	.word	0x0800953d
 8009528:	08009545 	.word	0x08009545
 800952c:	0800954d 	.word	0x0800954d
 8009530:	08009555 	.word	0x08009555
 8009534:	0800955d 	.word	0x0800955d
 8009538:	08009565 	.word	0x08009565
 800953c:	2300      	movs	r3, #0
 800953e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009542:	e154      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009544:	2304      	movs	r3, #4
 8009546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800954a:	e150      	b.n	80097ee <UART_SetConfig+0x7ae>
 800954c:	2308      	movs	r3, #8
 800954e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009552:	e14c      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009554:	2310      	movs	r3, #16
 8009556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800955a:	e148      	b.n	80097ee <UART_SetConfig+0x7ae>
 800955c:	2320      	movs	r3, #32
 800955e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009562:	e144      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009564:	2340      	movs	r3, #64	; 0x40
 8009566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800956a:	e140      	b.n	80097ee <UART_SetConfig+0x7ae>
 800956c:	2380      	movs	r3, #128	; 0x80
 800956e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009572:	e13c      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a41      	ldr	r2, [pc, #260]	; (8009680 <UART_SetConfig+0x640>)
 800957a:	4293      	cmp	r3, r2
 800957c:	f040 8082 	bne.w	8009684 <UART_SetConfig+0x644>
 8009580:	4b3c      	ldr	r3, [pc, #240]	; (8009674 <UART_SetConfig+0x634>)
 8009582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009584:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009588:	2b28      	cmp	r3, #40	; 0x28
 800958a:	d86d      	bhi.n	8009668 <UART_SetConfig+0x628>
 800958c:	a201      	add	r2, pc, #4	; (adr r2, 8009594 <UART_SetConfig+0x554>)
 800958e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009592:	bf00      	nop
 8009594:	08009639 	.word	0x08009639
 8009598:	08009669 	.word	0x08009669
 800959c:	08009669 	.word	0x08009669
 80095a0:	08009669 	.word	0x08009669
 80095a4:	08009669 	.word	0x08009669
 80095a8:	08009669 	.word	0x08009669
 80095ac:	08009669 	.word	0x08009669
 80095b0:	08009669 	.word	0x08009669
 80095b4:	08009641 	.word	0x08009641
 80095b8:	08009669 	.word	0x08009669
 80095bc:	08009669 	.word	0x08009669
 80095c0:	08009669 	.word	0x08009669
 80095c4:	08009669 	.word	0x08009669
 80095c8:	08009669 	.word	0x08009669
 80095cc:	08009669 	.word	0x08009669
 80095d0:	08009669 	.word	0x08009669
 80095d4:	08009649 	.word	0x08009649
 80095d8:	08009669 	.word	0x08009669
 80095dc:	08009669 	.word	0x08009669
 80095e0:	08009669 	.word	0x08009669
 80095e4:	08009669 	.word	0x08009669
 80095e8:	08009669 	.word	0x08009669
 80095ec:	08009669 	.word	0x08009669
 80095f0:	08009669 	.word	0x08009669
 80095f4:	08009651 	.word	0x08009651
 80095f8:	08009669 	.word	0x08009669
 80095fc:	08009669 	.word	0x08009669
 8009600:	08009669 	.word	0x08009669
 8009604:	08009669 	.word	0x08009669
 8009608:	08009669 	.word	0x08009669
 800960c:	08009669 	.word	0x08009669
 8009610:	08009669 	.word	0x08009669
 8009614:	08009659 	.word	0x08009659
 8009618:	08009669 	.word	0x08009669
 800961c:	08009669 	.word	0x08009669
 8009620:	08009669 	.word	0x08009669
 8009624:	08009669 	.word	0x08009669
 8009628:	08009669 	.word	0x08009669
 800962c:	08009669 	.word	0x08009669
 8009630:	08009669 	.word	0x08009669
 8009634:	08009661 	.word	0x08009661
 8009638:	2301      	movs	r3, #1
 800963a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800963e:	e0d6      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009640:	2304      	movs	r3, #4
 8009642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009646:	e0d2      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009648:	2308      	movs	r3, #8
 800964a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800964e:	e0ce      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009650:	2310      	movs	r3, #16
 8009652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009656:	e0ca      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009658:	2320      	movs	r3, #32
 800965a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800965e:	e0c6      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009660:	2340      	movs	r3, #64	; 0x40
 8009662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009666:	e0c2      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009668:	2380      	movs	r3, #128	; 0x80
 800966a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800966e:	e0be      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009670:	40011400 	.word	0x40011400
 8009674:	58024400 	.word	0x58024400
 8009678:	40007800 	.word	0x40007800
 800967c:	40007c00 	.word	0x40007c00
 8009680:	40011800 	.word	0x40011800
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4aad      	ldr	r2, [pc, #692]	; (8009940 <UART_SetConfig+0x900>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d176      	bne.n	800977c <UART_SetConfig+0x73c>
 800968e:	4bad      	ldr	r3, [pc, #692]	; (8009944 <UART_SetConfig+0x904>)
 8009690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009692:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009696:	2b28      	cmp	r3, #40	; 0x28
 8009698:	d86c      	bhi.n	8009774 <UART_SetConfig+0x734>
 800969a:	a201      	add	r2, pc, #4	; (adr r2, 80096a0 <UART_SetConfig+0x660>)
 800969c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a0:	08009745 	.word	0x08009745
 80096a4:	08009775 	.word	0x08009775
 80096a8:	08009775 	.word	0x08009775
 80096ac:	08009775 	.word	0x08009775
 80096b0:	08009775 	.word	0x08009775
 80096b4:	08009775 	.word	0x08009775
 80096b8:	08009775 	.word	0x08009775
 80096bc:	08009775 	.word	0x08009775
 80096c0:	0800974d 	.word	0x0800974d
 80096c4:	08009775 	.word	0x08009775
 80096c8:	08009775 	.word	0x08009775
 80096cc:	08009775 	.word	0x08009775
 80096d0:	08009775 	.word	0x08009775
 80096d4:	08009775 	.word	0x08009775
 80096d8:	08009775 	.word	0x08009775
 80096dc:	08009775 	.word	0x08009775
 80096e0:	08009755 	.word	0x08009755
 80096e4:	08009775 	.word	0x08009775
 80096e8:	08009775 	.word	0x08009775
 80096ec:	08009775 	.word	0x08009775
 80096f0:	08009775 	.word	0x08009775
 80096f4:	08009775 	.word	0x08009775
 80096f8:	08009775 	.word	0x08009775
 80096fc:	08009775 	.word	0x08009775
 8009700:	0800975d 	.word	0x0800975d
 8009704:	08009775 	.word	0x08009775
 8009708:	08009775 	.word	0x08009775
 800970c:	08009775 	.word	0x08009775
 8009710:	08009775 	.word	0x08009775
 8009714:	08009775 	.word	0x08009775
 8009718:	08009775 	.word	0x08009775
 800971c:	08009775 	.word	0x08009775
 8009720:	08009765 	.word	0x08009765
 8009724:	08009775 	.word	0x08009775
 8009728:	08009775 	.word	0x08009775
 800972c:	08009775 	.word	0x08009775
 8009730:	08009775 	.word	0x08009775
 8009734:	08009775 	.word	0x08009775
 8009738:	08009775 	.word	0x08009775
 800973c:	08009775 	.word	0x08009775
 8009740:	0800976d 	.word	0x0800976d
 8009744:	2301      	movs	r3, #1
 8009746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800974a:	e050      	b.n	80097ee <UART_SetConfig+0x7ae>
 800974c:	2304      	movs	r3, #4
 800974e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009752:	e04c      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009754:	2308      	movs	r3, #8
 8009756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800975a:	e048      	b.n	80097ee <UART_SetConfig+0x7ae>
 800975c:	2310      	movs	r3, #16
 800975e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009762:	e044      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009764:	2320      	movs	r3, #32
 8009766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800976a:	e040      	b.n	80097ee <UART_SetConfig+0x7ae>
 800976c:	2340      	movs	r3, #64	; 0x40
 800976e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009772:	e03c      	b.n	80097ee <UART_SetConfig+0x7ae>
 8009774:	2380      	movs	r3, #128	; 0x80
 8009776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800977a:	e038      	b.n	80097ee <UART_SetConfig+0x7ae>
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a71      	ldr	r2, [pc, #452]	; (8009948 <UART_SetConfig+0x908>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d130      	bne.n	80097e8 <UART_SetConfig+0x7a8>
 8009786:	4b6f      	ldr	r3, [pc, #444]	; (8009944 <UART_SetConfig+0x904>)
 8009788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800978a:	f003 0307 	and.w	r3, r3, #7
 800978e:	2b05      	cmp	r3, #5
 8009790:	d826      	bhi.n	80097e0 <UART_SetConfig+0x7a0>
 8009792:	a201      	add	r2, pc, #4	; (adr r2, 8009798 <UART_SetConfig+0x758>)
 8009794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009798:	080097b1 	.word	0x080097b1
 800979c:	080097b9 	.word	0x080097b9
 80097a0:	080097c1 	.word	0x080097c1
 80097a4:	080097c9 	.word	0x080097c9
 80097a8:	080097d1 	.word	0x080097d1
 80097ac:	080097d9 	.word	0x080097d9
 80097b0:	2302      	movs	r3, #2
 80097b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097b6:	e01a      	b.n	80097ee <UART_SetConfig+0x7ae>
 80097b8:	2304      	movs	r3, #4
 80097ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097be:	e016      	b.n	80097ee <UART_SetConfig+0x7ae>
 80097c0:	2308      	movs	r3, #8
 80097c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097c6:	e012      	b.n	80097ee <UART_SetConfig+0x7ae>
 80097c8:	2310      	movs	r3, #16
 80097ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ce:	e00e      	b.n	80097ee <UART_SetConfig+0x7ae>
 80097d0:	2320      	movs	r3, #32
 80097d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097d6:	e00a      	b.n	80097ee <UART_SetConfig+0x7ae>
 80097d8:	2340      	movs	r3, #64	; 0x40
 80097da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097de:	e006      	b.n	80097ee <UART_SetConfig+0x7ae>
 80097e0:	2380      	movs	r3, #128	; 0x80
 80097e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097e6:	e002      	b.n	80097ee <UART_SetConfig+0x7ae>
 80097e8:	2380      	movs	r3, #128	; 0x80
 80097ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a55      	ldr	r2, [pc, #340]	; (8009948 <UART_SetConfig+0x908>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	f040 80f8 	bne.w	80099ea <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80097fa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80097fe:	2b20      	cmp	r3, #32
 8009800:	dc46      	bgt.n	8009890 <UART_SetConfig+0x850>
 8009802:	2b02      	cmp	r3, #2
 8009804:	db75      	blt.n	80098f2 <UART_SetConfig+0x8b2>
 8009806:	3b02      	subs	r3, #2
 8009808:	2b1e      	cmp	r3, #30
 800980a:	d872      	bhi.n	80098f2 <UART_SetConfig+0x8b2>
 800980c:	a201      	add	r2, pc, #4	; (adr r2, 8009814 <UART_SetConfig+0x7d4>)
 800980e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009812:	bf00      	nop
 8009814:	08009897 	.word	0x08009897
 8009818:	080098f3 	.word	0x080098f3
 800981c:	0800989f 	.word	0x0800989f
 8009820:	080098f3 	.word	0x080098f3
 8009824:	080098f3 	.word	0x080098f3
 8009828:	080098f3 	.word	0x080098f3
 800982c:	080098af 	.word	0x080098af
 8009830:	080098f3 	.word	0x080098f3
 8009834:	080098f3 	.word	0x080098f3
 8009838:	080098f3 	.word	0x080098f3
 800983c:	080098f3 	.word	0x080098f3
 8009840:	080098f3 	.word	0x080098f3
 8009844:	080098f3 	.word	0x080098f3
 8009848:	080098f3 	.word	0x080098f3
 800984c:	080098bf 	.word	0x080098bf
 8009850:	080098f3 	.word	0x080098f3
 8009854:	080098f3 	.word	0x080098f3
 8009858:	080098f3 	.word	0x080098f3
 800985c:	080098f3 	.word	0x080098f3
 8009860:	080098f3 	.word	0x080098f3
 8009864:	080098f3 	.word	0x080098f3
 8009868:	080098f3 	.word	0x080098f3
 800986c:	080098f3 	.word	0x080098f3
 8009870:	080098f3 	.word	0x080098f3
 8009874:	080098f3 	.word	0x080098f3
 8009878:	080098f3 	.word	0x080098f3
 800987c:	080098f3 	.word	0x080098f3
 8009880:	080098f3 	.word	0x080098f3
 8009884:	080098f3 	.word	0x080098f3
 8009888:	080098f3 	.word	0x080098f3
 800988c:	080098e5 	.word	0x080098e5
 8009890:	2b40      	cmp	r3, #64	; 0x40
 8009892:	d02a      	beq.n	80098ea <UART_SetConfig+0x8aa>
 8009894:	e02d      	b.n	80098f2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009896:	f7fd fc2f 	bl	80070f8 <HAL_RCCEx_GetD3PCLK1Freq>
 800989a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800989c:	e02f      	b.n	80098fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800989e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7fd fc3e 	bl	8007124 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80098a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098ac:	e027      	b.n	80098fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098ae:	f107 0318 	add.w	r3, r7, #24
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7fd fd8a 	bl	80073cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098bc:	e01f      	b.n	80098fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098be:	4b21      	ldr	r3, [pc, #132]	; (8009944 <UART_SetConfig+0x904>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f003 0320 	and.w	r3, r3, #32
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d009      	beq.n	80098de <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80098ca:	4b1e      	ldr	r3, [pc, #120]	; (8009944 <UART_SetConfig+0x904>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	08db      	lsrs	r3, r3, #3
 80098d0:	f003 0303 	and.w	r3, r3, #3
 80098d4:	4a1d      	ldr	r2, [pc, #116]	; (800994c <UART_SetConfig+0x90c>)
 80098d6:	fa22 f303 	lsr.w	r3, r2, r3
 80098da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80098dc:	e00f      	b.n	80098fe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80098de:	4b1b      	ldr	r3, [pc, #108]	; (800994c <UART_SetConfig+0x90c>)
 80098e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098e2:	e00c      	b.n	80098fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80098e4:	4b1a      	ldr	r3, [pc, #104]	; (8009950 <UART_SetConfig+0x910>)
 80098e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098e8:	e009      	b.n	80098fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098f0:	e005      	b.n	80098fe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80098f2:	2300      	movs	r3, #0
 80098f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80098fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80098fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009900:	2b00      	cmp	r3, #0
 8009902:	f000 81ee 	beq.w	8009ce2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990a:	4a12      	ldr	r2, [pc, #72]	; (8009954 <UART_SetConfig+0x914>)
 800990c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009910:	461a      	mov	r2, r3
 8009912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009914:	fbb3 f3f2 	udiv	r3, r3, r2
 8009918:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	685a      	ldr	r2, [r3, #4]
 800991e:	4613      	mov	r3, r2
 8009920:	005b      	lsls	r3, r3, #1
 8009922:	4413      	add	r3, r2
 8009924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009926:	429a      	cmp	r2, r3
 8009928:	d305      	bcc.n	8009936 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009932:	429a      	cmp	r2, r3
 8009934:	d910      	bls.n	8009958 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009936:	2301      	movs	r3, #1
 8009938:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800993c:	e1d1      	b.n	8009ce2 <UART_SetConfig+0xca2>
 800993e:	bf00      	nop
 8009940:	40011c00 	.word	0x40011c00
 8009944:	58024400 	.word	0x58024400
 8009948:	58000c00 	.word	0x58000c00
 800994c:	03d09000 	.word	0x03d09000
 8009950:	003d0900 	.word	0x003d0900
 8009954:	0800ba04 	.word	0x0800ba04
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800995a:	2200      	movs	r2, #0
 800995c:	60bb      	str	r3, [r7, #8]
 800995e:	60fa      	str	r2, [r7, #12]
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009964:	4ac0      	ldr	r2, [pc, #768]	; (8009c68 <UART_SetConfig+0xc28>)
 8009966:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800996a:	b29b      	uxth	r3, r3
 800996c:	2200      	movs	r2, #0
 800996e:	603b      	str	r3, [r7, #0]
 8009970:	607a      	str	r2, [r7, #4]
 8009972:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009976:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800997a:	f7f6 fd11 	bl	80003a0 <__aeabi_uldivmod>
 800997e:	4602      	mov	r2, r0
 8009980:	460b      	mov	r3, r1
 8009982:	4610      	mov	r0, r2
 8009984:	4619      	mov	r1, r3
 8009986:	f04f 0200 	mov.w	r2, #0
 800998a:	f04f 0300 	mov.w	r3, #0
 800998e:	020b      	lsls	r3, r1, #8
 8009990:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009994:	0202      	lsls	r2, r0, #8
 8009996:	6979      	ldr	r1, [r7, #20]
 8009998:	6849      	ldr	r1, [r1, #4]
 800999a:	0849      	lsrs	r1, r1, #1
 800999c:	2000      	movs	r0, #0
 800999e:	460c      	mov	r4, r1
 80099a0:	4605      	mov	r5, r0
 80099a2:	eb12 0804 	adds.w	r8, r2, r4
 80099a6:	eb43 0905 	adc.w	r9, r3, r5
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	469a      	mov	sl, r3
 80099b2:	4693      	mov	fp, r2
 80099b4:	4652      	mov	r2, sl
 80099b6:	465b      	mov	r3, fp
 80099b8:	4640      	mov	r0, r8
 80099ba:	4649      	mov	r1, r9
 80099bc:	f7f6 fcf0 	bl	80003a0 <__aeabi_uldivmod>
 80099c0:	4602      	mov	r2, r0
 80099c2:	460b      	mov	r3, r1
 80099c4:	4613      	mov	r3, r2
 80099c6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80099c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099ce:	d308      	bcc.n	80099e2 <UART_SetConfig+0x9a2>
 80099d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099d6:	d204      	bcs.n	80099e2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099de:	60da      	str	r2, [r3, #12]
 80099e0:	e17f      	b.n	8009ce2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80099e2:	2301      	movs	r3, #1
 80099e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80099e8:	e17b      	b.n	8009ce2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	69db      	ldr	r3, [r3, #28]
 80099ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099f2:	f040 80bd 	bne.w	8009b70 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80099f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80099fa:	2b20      	cmp	r3, #32
 80099fc:	dc48      	bgt.n	8009a90 <UART_SetConfig+0xa50>
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	db7b      	blt.n	8009afa <UART_SetConfig+0xaba>
 8009a02:	2b20      	cmp	r3, #32
 8009a04:	d879      	bhi.n	8009afa <UART_SetConfig+0xaba>
 8009a06:	a201      	add	r2, pc, #4	; (adr r2, 8009a0c <UART_SetConfig+0x9cc>)
 8009a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a0c:	08009a97 	.word	0x08009a97
 8009a10:	08009a9f 	.word	0x08009a9f
 8009a14:	08009afb 	.word	0x08009afb
 8009a18:	08009afb 	.word	0x08009afb
 8009a1c:	08009aa7 	.word	0x08009aa7
 8009a20:	08009afb 	.word	0x08009afb
 8009a24:	08009afb 	.word	0x08009afb
 8009a28:	08009afb 	.word	0x08009afb
 8009a2c:	08009ab7 	.word	0x08009ab7
 8009a30:	08009afb 	.word	0x08009afb
 8009a34:	08009afb 	.word	0x08009afb
 8009a38:	08009afb 	.word	0x08009afb
 8009a3c:	08009afb 	.word	0x08009afb
 8009a40:	08009afb 	.word	0x08009afb
 8009a44:	08009afb 	.word	0x08009afb
 8009a48:	08009afb 	.word	0x08009afb
 8009a4c:	08009ac7 	.word	0x08009ac7
 8009a50:	08009afb 	.word	0x08009afb
 8009a54:	08009afb 	.word	0x08009afb
 8009a58:	08009afb 	.word	0x08009afb
 8009a5c:	08009afb 	.word	0x08009afb
 8009a60:	08009afb 	.word	0x08009afb
 8009a64:	08009afb 	.word	0x08009afb
 8009a68:	08009afb 	.word	0x08009afb
 8009a6c:	08009afb 	.word	0x08009afb
 8009a70:	08009afb 	.word	0x08009afb
 8009a74:	08009afb 	.word	0x08009afb
 8009a78:	08009afb 	.word	0x08009afb
 8009a7c:	08009afb 	.word	0x08009afb
 8009a80:	08009afb 	.word	0x08009afb
 8009a84:	08009afb 	.word	0x08009afb
 8009a88:	08009afb 	.word	0x08009afb
 8009a8c:	08009aed 	.word	0x08009aed
 8009a90:	2b40      	cmp	r3, #64	; 0x40
 8009a92:	d02e      	beq.n	8009af2 <UART_SetConfig+0xab2>
 8009a94:	e031      	b.n	8009afa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a96:	f7fb fc6d 	bl	8005374 <HAL_RCC_GetPCLK1Freq>
 8009a9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009a9c:	e033      	b.n	8009b06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a9e:	f7fb fc7f 	bl	80053a0 <HAL_RCC_GetPCLK2Freq>
 8009aa2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009aa4:	e02f      	b.n	8009b06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7fd fb3a 	bl	8007124 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ab4:	e027      	b.n	8009b06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ab6:	f107 0318 	add.w	r3, r7, #24
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7fd fc86 	bl	80073cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ac4:	e01f      	b.n	8009b06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ac6:	4b69      	ldr	r3, [pc, #420]	; (8009c6c <UART_SetConfig+0xc2c>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f003 0320 	and.w	r3, r3, #32
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d009      	beq.n	8009ae6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ad2:	4b66      	ldr	r3, [pc, #408]	; (8009c6c <UART_SetConfig+0xc2c>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	08db      	lsrs	r3, r3, #3
 8009ad8:	f003 0303 	and.w	r3, r3, #3
 8009adc:	4a64      	ldr	r2, [pc, #400]	; (8009c70 <UART_SetConfig+0xc30>)
 8009ade:	fa22 f303 	lsr.w	r3, r2, r3
 8009ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ae4:	e00f      	b.n	8009b06 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009ae6:	4b62      	ldr	r3, [pc, #392]	; (8009c70 <UART_SetConfig+0xc30>)
 8009ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009aea:	e00c      	b.n	8009b06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009aec:	4b61      	ldr	r3, [pc, #388]	; (8009c74 <UART_SetConfig+0xc34>)
 8009aee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009af0:	e009      	b.n	8009b06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009af6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009af8:	e005      	b.n	8009b06 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009afa:	2300      	movs	r3, #0
 8009afc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009b04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	f000 80ea 	beq.w	8009ce2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b12:	4a55      	ldr	r2, [pc, #340]	; (8009c68 <UART_SetConfig+0xc28>)
 8009b14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b18:	461a      	mov	r2, r3
 8009b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b20:	005a      	lsls	r2, r3, #1
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	085b      	lsrs	r3, r3, #1
 8009b28:	441a      	add	r2, r3
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b32:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b36:	2b0f      	cmp	r3, #15
 8009b38:	d916      	bls.n	8009b68 <UART_SetConfig+0xb28>
 8009b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b40:	d212      	bcs.n	8009b68 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	f023 030f 	bic.w	r3, r3, #15
 8009b4a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b4e:	085b      	lsrs	r3, r3, #1
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	f003 0307 	and.w	r3, r3, #7
 8009b56:	b29a      	uxth	r2, r3
 8009b58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009b64:	60da      	str	r2, [r3, #12]
 8009b66:	e0bc      	b.n	8009ce2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009b6e:	e0b8      	b.n	8009ce2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009b70:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009b74:	2b20      	cmp	r3, #32
 8009b76:	dc4b      	bgt.n	8009c10 <UART_SetConfig+0xbd0>
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f2c0 8087 	blt.w	8009c8c <UART_SetConfig+0xc4c>
 8009b7e:	2b20      	cmp	r3, #32
 8009b80:	f200 8084 	bhi.w	8009c8c <UART_SetConfig+0xc4c>
 8009b84:	a201      	add	r2, pc, #4	; (adr r2, 8009b8c <UART_SetConfig+0xb4c>)
 8009b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8a:	bf00      	nop
 8009b8c:	08009c17 	.word	0x08009c17
 8009b90:	08009c1f 	.word	0x08009c1f
 8009b94:	08009c8d 	.word	0x08009c8d
 8009b98:	08009c8d 	.word	0x08009c8d
 8009b9c:	08009c27 	.word	0x08009c27
 8009ba0:	08009c8d 	.word	0x08009c8d
 8009ba4:	08009c8d 	.word	0x08009c8d
 8009ba8:	08009c8d 	.word	0x08009c8d
 8009bac:	08009c37 	.word	0x08009c37
 8009bb0:	08009c8d 	.word	0x08009c8d
 8009bb4:	08009c8d 	.word	0x08009c8d
 8009bb8:	08009c8d 	.word	0x08009c8d
 8009bbc:	08009c8d 	.word	0x08009c8d
 8009bc0:	08009c8d 	.word	0x08009c8d
 8009bc4:	08009c8d 	.word	0x08009c8d
 8009bc8:	08009c8d 	.word	0x08009c8d
 8009bcc:	08009c47 	.word	0x08009c47
 8009bd0:	08009c8d 	.word	0x08009c8d
 8009bd4:	08009c8d 	.word	0x08009c8d
 8009bd8:	08009c8d 	.word	0x08009c8d
 8009bdc:	08009c8d 	.word	0x08009c8d
 8009be0:	08009c8d 	.word	0x08009c8d
 8009be4:	08009c8d 	.word	0x08009c8d
 8009be8:	08009c8d 	.word	0x08009c8d
 8009bec:	08009c8d 	.word	0x08009c8d
 8009bf0:	08009c8d 	.word	0x08009c8d
 8009bf4:	08009c8d 	.word	0x08009c8d
 8009bf8:	08009c8d 	.word	0x08009c8d
 8009bfc:	08009c8d 	.word	0x08009c8d
 8009c00:	08009c8d 	.word	0x08009c8d
 8009c04:	08009c8d 	.word	0x08009c8d
 8009c08:	08009c8d 	.word	0x08009c8d
 8009c0c:	08009c7f 	.word	0x08009c7f
 8009c10:	2b40      	cmp	r3, #64	; 0x40
 8009c12:	d037      	beq.n	8009c84 <UART_SetConfig+0xc44>
 8009c14:	e03a      	b.n	8009c8c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c16:	f7fb fbad 	bl	8005374 <HAL_RCC_GetPCLK1Freq>
 8009c1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009c1c:	e03c      	b.n	8009c98 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c1e:	f7fb fbbf 	bl	80053a0 <HAL_RCC_GetPCLK2Freq>
 8009c22:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009c24:	e038      	b.n	8009c98 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7fd fa7a 	bl	8007124 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c34:	e030      	b.n	8009c98 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c36:	f107 0318 	add.w	r3, r7, #24
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7fd fbc6 	bl	80073cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c40:	69fb      	ldr	r3, [r7, #28]
 8009c42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c44:	e028      	b.n	8009c98 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c46:	4b09      	ldr	r3, [pc, #36]	; (8009c6c <UART_SetConfig+0xc2c>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f003 0320 	and.w	r3, r3, #32
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d012      	beq.n	8009c78 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c52:	4b06      	ldr	r3, [pc, #24]	; (8009c6c <UART_SetConfig+0xc2c>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	08db      	lsrs	r3, r3, #3
 8009c58:	f003 0303 	and.w	r3, r3, #3
 8009c5c:	4a04      	ldr	r2, [pc, #16]	; (8009c70 <UART_SetConfig+0xc30>)
 8009c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8009c62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c64:	e018      	b.n	8009c98 <UART_SetConfig+0xc58>
 8009c66:	bf00      	nop
 8009c68:	0800ba04 	.word	0x0800ba04
 8009c6c:	58024400 	.word	0x58024400
 8009c70:	03d09000 	.word	0x03d09000
 8009c74:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009c78:	4b24      	ldr	r3, [pc, #144]	; (8009d0c <UART_SetConfig+0xccc>)
 8009c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c7c:	e00c      	b.n	8009c98 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c7e:	4b24      	ldr	r3, [pc, #144]	; (8009d10 <UART_SetConfig+0xcd0>)
 8009c80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c82:	e009      	b.n	8009c98 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c8a:	e005      	b.n	8009c98 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009c90:	2301      	movs	r3, #1
 8009c92:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009c96:	bf00      	nop
    }

    if (pclk != 0U)
 8009c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d021      	beq.n	8009ce2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca2:	4a1c      	ldr	r2, [pc, #112]	; (8009d14 <UART_SetConfig+0xcd4>)
 8009ca4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ca8:	461a      	mov	r2, r3
 8009caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cac:	fbb3 f2f2 	udiv	r2, r3, r2
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	085b      	lsrs	r3, r3, #1
 8009cb6:	441a      	add	r2, r3
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cc0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc4:	2b0f      	cmp	r3, #15
 8009cc6:	d909      	bls.n	8009cdc <UART_SetConfig+0xc9c>
 8009cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cce:	d205      	bcs.n	8009cdc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd2:	b29a      	uxth	r2, r3
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	60da      	str	r2, [r3, #12]
 8009cda:	e002      	b.n	8009ce2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	2201      	movs	r2, #1
 8009cee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009cfe:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3748      	adds	r7, #72	; 0x48
 8009d06:	46bd      	mov	sp, r7
 8009d08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d0c:	03d09000 	.word	0x03d09000
 8009d10:	003d0900 	.word	0x003d0900
 8009d14:	0800ba04 	.word	0x0800ba04

08009d18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d24:	f003 0301 	and.w	r3, r3, #1
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d00a      	beq.n	8009d42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	430a      	orrs	r2, r1
 8009d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d46:	f003 0302 	and.w	r3, r3, #2
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00a      	beq.n	8009d64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	430a      	orrs	r2, r1
 8009d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d68:	f003 0304 	and.w	r3, r3, #4
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d00a      	beq.n	8009d86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	430a      	orrs	r2, r1
 8009d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d8a:	f003 0308 	and.w	r3, r3, #8
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d00a      	beq.n	8009da8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	430a      	orrs	r2, r1
 8009da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dac:	f003 0310 	and.w	r3, r3, #16
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d00a      	beq.n	8009dca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	430a      	orrs	r2, r1
 8009dc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dce:	f003 0320 	and.w	r3, r3, #32
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d00a      	beq.n	8009dec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	430a      	orrs	r2, r1
 8009dea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d01a      	beq.n	8009e2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	430a      	orrs	r2, r1
 8009e0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e16:	d10a      	bne.n	8009e2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	430a      	orrs	r2, r1
 8009e2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00a      	beq.n	8009e50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	430a      	orrs	r2, r1
 8009e4e:	605a      	str	r2, [r3, #4]
  }
}
 8009e50:	bf00      	nop
 8009e52:	370c      	adds	r7, #12
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr

08009e5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b098      	sub	sp, #96	; 0x60
 8009e60:	af02      	add	r7, sp, #8
 8009e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2200      	movs	r2, #0
 8009e68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e6c:	f7f8 f85a 	bl	8001f24 <HAL_GetTick>
 8009e70:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f003 0308 	and.w	r3, r3, #8
 8009e7c:	2b08      	cmp	r3, #8
 8009e7e:	d12f      	bne.n	8009ee0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e84:	9300      	str	r3, [sp, #0]
 8009e86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 f88e 	bl	8009fb0 <UART_WaitOnFlagUntilTimeout>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d022      	beq.n	8009ee0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea2:	e853 3f00 	ldrex	r3, [r3]
 8009ea6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009eae:	653b      	str	r3, [r7, #80]	; 0x50
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009eb8:	647b      	str	r3, [r7, #68]	; 0x44
 8009eba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ebc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009ebe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ec0:	e841 2300 	strex	r3, r2, [r1]
 8009ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d1e6      	bne.n	8009e9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2220      	movs	r2, #32
 8009ed0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009edc:	2303      	movs	r3, #3
 8009ede:	e063      	b.n	8009fa8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f003 0304 	and.w	r3, r3, #4
 8009eea:	2b04      	cmp	r3, #4
 8009eec:	d149      	bne.n	8009f82 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009eee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ef2:	9300      	str	r3, [sp, #0]
 8009ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 f857 	bl	8009fb0 <UART_WaitOnFlagUntilTimeout>
 8009f02:	4603      	mov	r3, r0
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d03c      	beq.n	8009f82 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f10:	e853 3f00 	ldrex	r3, [r3]
 8009f14:	623b      	str	r3, [r7, #32]
   return(result);
 8009f16:	6a3b      	ldr	r3, [r7, #32]
 8009f18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	461a      	mov	r2, r3
 8009f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f26:	633b      	str	r3, [r7, #48]	; 0x30
 8009f28:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f2e:	e841 2300 	strex	r3, r2, [r1]
 8009f32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d1e6      	bne.n	8009f08 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	3308      	adds	r3, #8
 8009f40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	e853 3f00 	ldrex	r3, [r3]
 8009f48:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f023 0301 	bic.w	r3, r3, #1
 8009f50:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	3308      	adds	r3, #8
 8009f58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f5a:	61fa      	str	r2, [r7, #28]
 8009f5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f5e:	69b9      	ldr	r1, [r7, #24]
 8009f60:	69fa      	ldr	r2, [r7, #28]
 8009f62:	e841 2300 	strex	r3, r2, [r1]
 8009f66:	617b      	str	r3, [r7, #20]
   return(result);
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d1e5      	bne.n	8009f3a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2220      	movs	r2, #32
 8009f72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f7e:	2303      	movs	r3, #3
 8009f80:	e012      	b.n	8009fa8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2220      	movs	r2, #32
 8009f86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2220      	movs	r2, #32
 8009f8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009fa6:	2300      	movs	r3, #0
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3758      	adds	r7, #88	; 0x58
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	60b9      	str	r1, [r7, #8]
 8009fba:	603b      	str	r3, [r7, #0]
 8009fbc:	4613      	mov	r3, r2
 8009fbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fc0:	e049      	b.n	800a056 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fc2:	69bb      	ldr	r3, [r7, #24]
 8009fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fc8:	d045      	beq.n	800a056 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fca:	f7f7 ffab 	bl	8001f24 <HAL_GetTick>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	1ad3      	subs	r3, r2, r3
 8009fd4:	69ba      	ldr	r2, [r7, #24]
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d302      	bcc.n	8009fe0 <UART_WaitOnFlagUntilTimeout+0x30>
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d101      	bne.n	8009fe4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009fe0:	2303      	movs	r3, #3
 8009fe2:	e048      	b.n	800a076 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f003 0304 	and.w	r3, r3, #4
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d031      	beq.n	800a056 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	69db      	ldr	r3, [r3, #28]
 8009ff8:	f003 0308 	and.w	r3, r3, #8
 8009ffc:	2b08      	cmp	r3, #8
 8009ffe:	d110      	bne.n	800a022 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	2208      	movs	r2, #8
 800a006:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f000 f95b 	bl	800a2c4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2208      	movs	r2, #8
 800a012:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2200      	movs	r2, #0
 800a01a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a01e:	2301      	movs	r3, #1
 800a020:	e029      	b.n	800a076 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	69db      	ldr	r3, [r3, #28]
 800a028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a02c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a030:	d111      	bne.n	800a056 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a03a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a03c:	68f8      	ldr	r0, [r7, #12]
 800a03e:	f000 f941 	bl	800a2c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2220      	movs	r2, #32
 800a046:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2200      	movs	r2, #0
 800a04e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a052:	2303      	movs	r3, #3
 800a054:	e00f      	b.n	800a076 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	69da      	ldr	r2, [r3, #28]
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	4013      	ands	r3, r2
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	429a      	cmp	r2, r3
 800a064:	bf0c      	ite	eq
 800a066:	2301      	moveq	r3, #1
 800a068:	2300      	movne	r3, #0
 800a06a:	b2db      	uxtb	r3, r3
 800a06c:	461a      	mov	r2, r3
 800a06e:	79fb      	ldrb	r3, [r7, #7]
 800a070:	429a      	cmp	r2, r3
 800a072:	d0a6      	beq.n	8009fc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3710      	adds	r7, #16
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
	...

0800a080 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a080:	b480      	push	{r7}
 800a082:	b0a3      	sub	sp, #140	; 0x8c
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	4613      	mov	r3, r2
 800a08c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	68ba      	ldr	r2, [r7, #8]
 800a092:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	88fa      	ldrh	r2, [r7, #6]
 800a098:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	88fa      	ldrh	r2, [r7, #6]
 800a0a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0b2:	d10e      	bne.n	800a0d2 <UART_Start_Receive_IT+0x52>
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	691b      	ldr	r3, [r3, #16]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d105      	bne.n	800a0c8 <UART_Start_Receive_IT+0x48>
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a0c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a0c6:	e02d      	b.n	800a124 <UART_Start_Receive_IT+0xa4>
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	22ff      	movs	r2, #255	; 0xff
 800a0cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a0d0:	e028      	b.n	800a124 <UART_Start_Receive_IT+0xa4>
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d10d      	bne.n	800a0f6 <UART_Start_Receive_IT+0x76>
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d104      	bne.n	800a0ec <UART_Start_Receive_IT+0x6c>
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	22ff      	movs	r2, #255	; 0xff
 800a0e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a0ea:	e01b      	b.n	800a124 <UART_Start_Receive_IT+0xa4>
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	227f      	movs	r2, #127	; 0x7f
 800a0f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a0f4:	e016      	b.n	800a124 <UART_Start_Receive_IT+0xa4>
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0fe:	d10d      	bne.n	800a11c <UART_Start_Receive_IT+0x9c>
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	691b      	ldr	r3, [r3, #16]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d104      	bne.n	800a112 <UART_Start_Receive_IT+0x92>
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	227f      	movs	r2, #127	; 0x7f
 800a10c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a110:	e008      	b.n	800a124 <UART_Start_Receive_IT+0xa4>
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	223f      	movs	r2, #63	; 0x3f
 800a116:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a11a:	e003      	b.n	800a124 <UART_Start_Receive_IT+0xa4>
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2200      	movs	r2, #0
 800a120:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2200      	movs	r2, #0
 800a128:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2222      	movs	r2, #34	; 0x22
 800a130:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	3308      	adds	r3, #8
 800a13a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a13c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a13e:	e853 3f00 	ldrex	r3, [r3]
 800a142:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a144:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a146:	f043 0301 	orr.w	r3, r3, #1
 800a14a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	3308      	adds	r3, #8
 800a154:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a158:	673a      	str	r2, [r7, #112]	; 0x70
 800a15a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a15c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800a15e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a160:	e841 2300 	strex	r3, r2, [r1]
 800a164:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800a166:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d1e3      	bne.n	800a134 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a174:	d14f      	bne.n	800a216 <UART_Start_Receive_IT+0x196>
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a17c:	88fa      	ldrh	r2, [r7, #6]
 800a17e:	429a      	cmp	r2, r3
 800a180:	d349      	bcc.n	800a216 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a18a:	d107      	bne.n	800a19c <UART_Start_Receive_IT+0x11c>
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	691b      	ldr	r3, [r3, #16]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d103      	bne.n	800a19c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	4a47      	ldr	r2, [pc, #284]	; (800a2b4 <UART_Start_Receive_IT+0x234>)
 800a198:	675a      	str	r2, [r3, #116]	; 0x74
 800a19a:	e002      	b.n	800a1a2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	4a46      	ldr	r2, [pc, #280]	; (800a2b8 <UART_Start_Receive_IT+0x238>)
 800a1a0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	691b      	ldr	r3, [r3, #16]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d01a      	beq.n	800a1e0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1b2:	e853 3f00 	ldrex	r3, [r3]
 800a1b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a1b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a1cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a1ce:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a1d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a1d4:	e841 2300 	strex	r3, r2, [r1]
 800a1d8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a1da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d1e4      	bne.n	800a1aa <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	3308      	adds	r3, #8
 800a1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1ea:	e853 3f00 	ldrex	r3, [r3]
 800a1ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	3308      	adds	r3, #8
 800a1fe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a200:	64ba      	str	r2, [r7, #72]	; 0x48
 800a202:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a204:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a206:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a208:	e841 2300 	strex	r3, r2, [r1]
 800a20c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a20e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a210:	2b00      	cmp	r3, #0
 800a212:	d1e5      	bne.n	800a1e0 <UART_Start_Receive_IT+0x160>
 800a214:	e046      	b.n	800a2a4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a21e:	d107      	bne.n	800a230 <UART_Start_Receive_IT+0x1b0>
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	691b      	ldr	r3, [r3, #16]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d103      	bne.n	800a230 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	4a24      	ldr	r2, [pc, #144]	; (800a2bc <UART_Start_Receive_IT+0x23c>)
 800a22c:	675a      	str	r2, [r3, #116]	; 0x74
 800a22e:	e002      	b.n	800a236 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	4a23      	ldr	r2, [pc, #140]	; (800a2c0 <UART_Start_Receive_IT+0x240>)
 800a234:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	691b      	ldr	r3, [r3, #16]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d019      	beq.n	800a272 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a246:	e853 3f00 	ldrex	r3, [r3]
 800a24a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800a252:	677b      	str	r3, [r7, #116]	; 0x74
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	461a      	mov	r2, r3
 800a25a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a25c:	637b      	str	r3, [r7, #52]	; 0x34
 800a25e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a260:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a262:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a264:	e841 2300 	strex	r3, r2, [r1]
 800a268:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d1e6      	bne.n	800a23e <UART_Start_Receive_IT+0x1be>
 800a270:	e018      	b.n	800a2a4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	e853 3f00 	ldrex	r3, [r3]
 800a27e:	613b      	str	r3, [r7, #16]
   return(result);
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	f043 0320 	orr.w	r3, r3, #32
 800a286:	67bb      	str	r3, [r7, #120]	; 0x78
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	461a      	mov	r2, r3
 800a28e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a290:	623b      	str	r3, [r7, #32]
 800a292:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a294:	69f9      	ldr	r1, [r7, #28]
 800a296:	6a3a      	ldr	r2, [r7, #32]
 800a298:	e841 2300 	strex	r3, r2, [r1]
 800a29c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d1e6      	bne.n	800a272 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a2a4:	2300      	movs	r3, #0
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	378c      	adds	r7, #140	; 0x8c
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr
 800a2b2:	bf00      	nop
 800a2b4:	0800aae5 	.word	0x0800aae5
 800a2b8:	0800a785 	.word	0x0800a785
 800a2bc:	0800a5cd 	.word	0x0800a5cd
 800a2c0:	0800a415 	.word	0x0800a415

0800a2c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b095      	sub	sp, #84	; 0x54
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2d4:	e853 3f00 	ldrex	r3, [r3]
 800a2d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a2e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2ea:	643b      	str	r3, [r7, #64]	; 0x40
 800a2ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a2f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2f2:	e841 2300 	strex	r3, r2, [r1]
 800a2f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d1e6      	bne.n	800a2cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	3308      	adds	r3, #8
 800a304:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a306:	6a3b      	ldr	r3, [r7, #32]
 800a308:	e853 3f00 	ldrex	r3, [r3]
 800a30c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a30e:	69fa      	ldr	r2, [r7, #28]
 800a310:	4b1e      	ldr	r3, [pc, #120]	; (800a38c <UART_EndRxTransfer+0xc8>)
 800a312:	4013      	ands	r3, r2
 800a314:	64bb      	str	r3, [r7, #72]	; 0x48
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	3308      	adds	r3, #8
 800a31c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a31e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a320:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a322:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a326:	e841 2300 	strex	r3, r2, [r1]
 800a32a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d1e5      	bne.n	800a2fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a336:	2b01      	cmp	r3, #1
 800a338:	d118      	bne.n	800a36c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	e853 3f00 	ldrex	r3, [r3]
 800a346:	60bb      	str	r3, [r7, #8]
   return(result);
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	f023 0310 	bic.w	r3, r3, #16
 800a34e:	647b      	str	r3, [r7, #68]	; 0x44
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	461a      	mov	r2, r3
 800a356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a358:	61bb      	str	r3, [r7, #24]
 800a35a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a35c:	6979      	ldr	r1, [r7, #20]
 800a35e:	69ba      	ldr	r2, [r7, #24]
 800a360:	e841 2300 	strex	r3, r2, [r1]
 800a364:	613b      	str	r3, [r7, #16]
   return(result);
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d1e6      	bne.n	800a33a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2220      	movs	r2, #32
 800a370:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2200      	movs	r2, #0
 800a378:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2200      	movs	r2, #0
 800a37e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a380:	bf00      	nop
 800a382:	3754      	adds	r7, #84	; 0x54
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr
 800a38c:	effffffe 	.word	0xeffffffe

0800a390 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a39c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a3ae:	68f8      	ldr	r0, [r7, #12]
 800a3b0:	f7fe fe30 	bl	8009014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3b4:	bf00      	nop
 800a3b6:	3710      	adds	r7, #16
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b088      	sub	sp, #32
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	e853 3f00 	ldrex	r3, [r3]
 800a3d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3d8:	61fb      	str	r3, [r7, #28]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	461a      	mov	r2, r3
 800a3e0:	69fb      	ldr	r3, [r7, #28]
 800a3e2:	61bb      	str	r3, [r7, #24]
 800a3e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e6:	6979      	ldr	r1, [r7, #20]
 800a3e8:	69ba      	ldr	r2, [r7, #24]
 800a3ea:	e841 2300 	strex	r3, r2, [r1]
 800a3ee:	613b      	str	r3, [r7, #16]
   return(result);
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d1e6      	bne.n	800a3c4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2220      	movs	r2, #32
 800a3fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f7fe fdfb 	bl	8009000 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a40a:	bf00      	nop
 800a40c:	3720      	adds	r7, #32
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
	...

0800a414 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b09c      	sub	sp, #112	; 0x70
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a422:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a42c:	2b22      	cmp	r3, #34	; 0x22
 800a42e:	f040 80be 	bne.w	800a5ae <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a438:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a43c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a440:	b2d9      	uxtb	r1, r3
 800a442:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800a446:	b2da      	uxtb	r2, r3
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a44c:	400a      	ands	r2, r1
 800a44e:	b2d2      	uxtb	r2, r2
 800a450:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a456:	1c5a      	adds	r2, r3, #1
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a462:	b29b      	uxth	r3, r3
 800a464:	3b01      	subs	r3, #1
 800a466:	b29a      	uxth	r2, r3
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a474:	b29b      	uxth	r3, r3
 800a476:	2b00      	cmp	r3, #0
 800a478:	f040 80a1 	bne.w	800a5be <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a484:	e853 3f00 	ldrex	r3, [r3]
 800a488:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a48a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a48c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a490:	66bb      	str	r3, [r7, #104]	; 0x68
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	461a      	mov	r2, r3
 800a498:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a49a:	65bb      	str	r3, [r7, #88]	; 0x58
 800a49c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a49e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a4a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a4a2:	e841 2300 	strex	r3, r2, [r1]
 800a4a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a4a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d1e6      	bne.n	800a47c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	3308      	adds	r3, #8
 800a4b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b8:	e853 3f00 	ldrex	r3, [r3]
 800a4bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a4be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4c0:	f023 0301 	bic.w	r3, r3, #1
 800a4c4:	667b      	str	r3, [r7, #100]	; 0x64
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	3308      	adds	r3, #8
 800a4cc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a4ce:	647a      	str	r2, [r7, #68]	; 0x44
 800a4d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a4d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4d6:	e841 2300 	strex	r3, r2, [r1]
 800a4da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a4dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d1e5      	bne.n	800a4ae <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2220      	movs	r2, #32
 800a4e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a33      	ldr	r2, [pc, #204]	; (800a5c8 <UART_RxISR_8BIT+0x1b4>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d01f      	beq.n	800a540 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d018      	beq.n	800a540 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a516:	e853 3f00 	ldrex	r3, [r3]
 800a51a:	623b      	str	r3, [r7, #32]
   return(result);
 800a51c:	6a3b      	ldr	r3, [r7, #32]
 800a51e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a522:	663b      	str	r3, [r7, #96]	; 0x60
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	461a      	mov	r2, r3
 800a52a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a52c:	633b      	str	r3, [r7, #48]	; 0x30
 800a52e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a530:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a534:	e841 2300 	strex	r3, r2, [r1]
 800a538:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d1e6      	bne.n	800a50e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a544:	2b01      	cmp	r3, #1
 800a546:	d12e      	bne.n	800a5a6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	e853 3f00 	ldrex	r3, [r3]
 800a55a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f023 0310 	bic.w	r3, r3, #16
 800a562:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	461a      	mov	r2, r3
 800a56a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a56c:	61fb      	str	r3, [r7, #28]
 800a56e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a570:	69b9      	ldr	r1, [r7, #24]
 800a572:	69fa      	ldr	r2, [r7, #28]
 800a574:	e841 2300 	strex	r3, r2, [r1]
 800a578:	617b      	str	r3, [r7, #20]
   return(result);
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d1e6      	bne.n	800a54e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	69db      	ldr	r3, [r3, #28]
 800a586:	f003 0310 	and.w	r3, r3, #16
 800a58a:	2b10      	cmp	r3, #16
 800a58c:	d103      	bne.n	800a596 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	2210      	movs	r2, #16
 800a594:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a59c:	4619      	mov	r1, r3
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f7fe fd42 	bl	8009028 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a5a4:	e00b      	b.n	800a5be <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f7f6 f9b0 	bl	800090c <HAL_UART_RxCpltCallback>
}
 800a5ac:	e007      	b.n	800a5be <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	699a      	ldr	r2, [r3, #24]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f042 0208 	orr.w	r2, r2, #8
 800a5bc:	619a      	str	r2, [r3, #24]
}
 800a5be:	bf00      	nop
 800a5c0:	3770      	adds	r7, #112	; 0x70
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	58000c00 	.word	0x58000c00

0800a5cc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b09c      	sub	sp, #112	; 0x70
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a5da:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5e4:	2b22      	cmp	r3, #34	; 0x22
 800a5e6:	f040 80be 	bne.w	800a766 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5f8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a5fa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800a5fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800a602:	4013      	ands	r3, r2
 800a604:	b29a      	uxth	r2, r3
 800a606:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a608:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a60e:	1c9a      	adds	r2, r3, #2
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a61a:	b29b      	uxth	r3, r3
 800a61c:	3b01      	subs	r3, #1
 800a61e:	b29a      	uxth	r2, r3
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	2b00      	cmp	r3, #0
 800a630:	f040 80a1 	bne.w	800a776 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a63a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a63c:	e853 3f00 	ldrex	r3, [r3]
 800a640:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a644:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a648:	667b      	str	r3, [r7, #100]	; 0x64
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	461a      	mov	r2, r3
 800a650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a652:	657b      	str	r3, [r7, #84]	; 0x54
 800a654:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a656:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a658:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a65a:	e841 2300 	strex	r3, r2, [r1]
 800a65e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a662:	2b00      	cmp	r3, #0
 800a664:	d1e6      	bne.n	800a634 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	3308      	adds	r3, #8
 800a66c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a66e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a670:	e853 3f00 	ldrex	r3, [r3]
 800a674:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a678:	f023 0301 	bic.w	r3, r3, #1
 800a67c:	663b      	str	r3, [r7, #96]	; 0x60
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	3308      	adds	r3, #8
 800a684:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a686:	643a      	str	r2, [r7, #64]	; 0x40
 800a688:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a68a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a68c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a68e:	e841 2300 	strex	r3, r2, [r1]
 800a692:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1e5      	bne.n	800a666 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2220      	movs	r2, #32
 800a69e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a33      	ldr	r2, [pc, #204]	; (800a780 <UART_RxISR_16BIT+0x1b4>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d01f      	beq.n	800a6f8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d018      	beq.n	800a6f8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6cc:	6a3b      	ldr	r3, [r7, #32]
 800a6ce:	e853 3f00 	ldrex	r3, [r3]
 800a6d2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a6da:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6e6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a6ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6ec:	e841 2300 	strex	r3, r2, [r1]
 800a6f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d1e6      	bne.n	800a6c6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d12e      	bne.n	800a75e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2200      	movs	r2, #0
 800a704:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	e853 3f00 	ldrex	r3, [r3]
 800a712:	60bb      	str	r3, [r7, #8]
   return(result);
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	f023 0310 	bic.w	r3, r3, #16
 800a71a:	65bb      	str	r3, [r7, #88]	; 0x58
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	461a      	mov	r2, r3
 800a722:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a724:	61bb      	str	r3, [r7, #24]
 800a726:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a728:	6979      	ldr	r1, [r7, #20]
 800a72a:	69ba      	ldr	r2, [r7, #24]
 800a72c:	e841 2300 	strex	r3, r2, [r1]
 800a730:	613b      	str	r3, [r7, #16]
   return(result);
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d1e6      	bne.n	800a706 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	69db      	ldr	r3, [r3, #28]
 800a73e:	f003 0310 	and.w	r3, r3, #16
 800a742:	2b10      	cmp	r3, #16
 800a744:	d103      	bne.n	800a74e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	2210      	movs	r2, #16
 800a74c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a754:	4619      	mov	r1, r3
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f7fe fc66 	bl	8009028 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a75c:	e00b      	b.n	800a776 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f7f6 f8d4 	bl	800090c <HAL_UART_RxCpltCallback>
}
 800a764:	e007      	b.n	800a776 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	699a      	ldr	r2, [r3, #24]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f042 0208 	orr.w	r2, r2, #8
 800a774:	619a      	str	r2, [r3, #24]
}
 800a776:	bf00      	nop
 800a778:	3770      	adds	r7, #112	; 0x70
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	58000c00 	.word	0x58000c00

0800a784 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b0ac      	sub	sp, #176	; 0xb0
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a792:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	69db      	ldr	r3, [r3, #28]
 800a79c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	689b      	ldr	r3, [r3, #8]
 800a7b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7ba:	2b22      	cmp	r3, #34	; 0x22
 800a7bc:	f040 8180 	bne.w	800aac0 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a7c6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a7ca:	e123      	b.n	800aa14 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a7d6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800a7da:	b2d9      	uxtb	r1, r3
 800a7dc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a7e0:	b2da      	uxtb	r2, r3
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7e6:	400a      	ands	r2, r1
 800a7e8:	b2d2      	uxtb	r2, r2
 800a7ea:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7f0:	1c5a      	adds	r2, r3, #1
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	3b01      	subs	r3, #1
 800a800:	b29a      	uxth	r2, r3
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	69db      	ldr	r3, [r3, #28]
 800a80e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a812:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a816:	f003 0307 	and.w	r3, r3, #7
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d053      	beq.n	800a8c6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a81e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a822:	f003 0301 	and.w	r3, r3, #1
 800a826:	2b00      	cmp	r3, #0
 800a828:	d011      	beq.n	800a84e <UART_RxISR_8BIT_FIFOEN+0xca>
 800a82a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a82e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a832:	2b00      	cmp	r3, #0
 800a834:	d00b      	beq.n	800a84e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	2201      	movs	r2, #1
 800a83c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a844:	f043 0201 	orr.w	r2, r3, #1
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a84e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a852:	f003 0302 	and.w	r3, r3, #2
 800a856:	2b00      	cmp	r3, #0
 800a858:	d011      	beq.n	800a87e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a85a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a85e:	f003 0301 	and.w	r3, r3, #1
 800a862:	2b00      	cmp	r3, #0
 800a864:	d00b      	beq.n	800a87e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2202      	movs	r2, #2
 800a86c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a874:	f043 0204 	orr.w	r2, r3, #4
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a87e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a882:	f003 0304 	and.w	r3, r3, #4
 800a886:	2b00      	cmp	r3, #0
 800a888:	d011      	beq.n	800a8ae <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a88a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a88e:	f003 0301 	and.w	r3, r3, #1
 800a892:	2b00      	cmp	r3, #0
 800a894:	d00b      	beq.n	800a8ae <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	2204      	movs	r2, #4
 800a89c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8a4:	f043 0202 	orr.w	r2, r3, #2
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d006      	beq.n	800a8c6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f7fe fbab 	bl	8009014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	f040 80a0 	bne.w	800aa14 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a8dc:	e853 3f00 	ldrex	r3, [r3]
 800a8e0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800a8e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a8f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a8f8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8fa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800a8fc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a8fe:	e841 2300 	strex	r3, r2, [r1]
 800a902:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800a904:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a906:	2b00      	cmp	r3, #0
 800a908:	d1e4      	bne.n	800a8d4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	3308      	adds	r3, #8
 800a910:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a912:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a914:	e853 3f00 	ldrex	r3, [r3]
 800a918:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800a91a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a91c:	4b6e      	ldr	r3, [pc, #440]	; (800aad8 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800a91e:	4013      	ands	r3, r2
 800a920:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	3308      	adds	r3, #8
 800a92a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a92e:	66ba      	str	r2, [r7, #104]	; 0x68
 800a930:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a932:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a934:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a936:	e841 2300 	strex	r3, r2, [r1]
 800a93a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a93c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d1e3      	bne.n	800a90a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2220      	movs	r2, #32
 800a946:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2200      	movs	r2, #0
 800a954:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a60      	ldr	r2, [pc, #384]	; (800aadc <UART_RxISR_8BIT_FIFOEN+0x358>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d021      	beq.n	800a9a4 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d01a      	beq.n	800a9a4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a976:	e853 3f00 	ldrex	r3, [r3]
 800a97a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a97c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a97e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a982:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	461a      	mov	r2, r3
 800a98c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a990:	657b      	str	r3, [r7, #84]	; 0x54
 800a992:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a994:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a996:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a998:	e841 2300 	strex	r3, r2, [r1]
 800a99c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a99e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d1e4      	bne.n	800a96e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d130      	bne.n	800aa0e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ba:	e853 3f00 	ldrex	r3, [r3]
 800a9be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c2:	f023 0310 	bic.w	r3, r3, #16
 800a9c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a9d4:	643b      	str	r3, [r7, #64]	; 0x40
 800a9d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a9da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a9dc:	e841 2300 	strex	r3, r2, [r1]
 800a9e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d1e4      	bne.n	800a9b2 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	69db      	ldr	r3, [r3, #28]
 800a9ee:	f003 0310 	and.w	r3, r3, #16
 800a9f2:	2b10      	cmp	r3, #16
 800a9f4:	d103      	bne.n	800a9fe <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	2210      	movs	r2, #16
 800a9fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aa04:	4619      	mov	r1, r3
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f7fe fb0e 	bl	8009028 <HAL_UARTEx_RxEventCallback>
 800aa0c:	e002      	b.n	800aa14 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f7f5 ff7c 	bl	800090c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aa14:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d006      	beq.n	800aa2a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800aa1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa20:	f003 0320 	and.w	r3, r3, #32
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	f47f aed1 	bne.w	800a7cc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa30:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800aa34:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d049      	beq.n	800aad0 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800aa42:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d242      	bcs.n	800aad0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	3308      	adds	r3, #8
 800aa50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa52:	6a3b      	ldr	r3, [r7, #32]
 800aa54:	e853 3f00 	ldrex	r3, [r3]
 800aa58:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa5a:	69fb      	ldr	r3, [r7, #28]
 800aa5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	3308      	adds	r3, #8
 800aa6a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800aa6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aa70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa76:	e841 2300 	strex	r3, r2, [r1]
 800aa7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d1e3      	bne.n	800aa4a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4a16      	ldr	r2, [pc, #88]	; (800aae0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800aa86:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	e853 3f00 	ldrex	r3, [r3]
 800aa94:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	f043 0320 	orr.w	r3, r3, #32
 800aa9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aaaa:	61bb      	str	r3, [r7, #24]
 800aaac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaae:	6979      	ldr	r1, [r7, #20]
 800aab0:	69ba      	ldr	r2, [r7, #24]
 800aab2:	e841 2300 	strex	r3, r2, [r1]
 800aab6:	613b      	str	r3, [r7, #16]
   return(result);
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d1e4      	bne.n	800aa88 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aabe:	e007      	b.n	800aad0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	699a      	ldr	r2, [r3, #24]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f042 0208 	orr.w	r2, r2, #8
 800aace:	619a      	str	r2, [r3, #24]
}
 800aad0:	bf00      	nop
 800aad2:	37b0      	adds	r7, #176	; 0xb0
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	effffffe 	.word	0xeffffffe
 800aadc:	58000c00 	.word	0x58000c00
 800aae0:	0800a415 	.word	0x0800a415

0800aae4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b0ae      	sub	sp, #184	; 0xb8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aaf2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	69db      	ldr	r3, [r3, #28]
 800aafc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab1a:	2b22      	cmp	r3, #34	; 0x22
 800ab1c:	f040 8184 	bne.w	800ae28 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ab26:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ab2a:	e127      	b.n	800ad7c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab32:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ab3e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800ab42:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800ab46:	4013      	ands	r3, r2
 800ab48:	b29a      	uxth	r2, r3
 800ab4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ab4e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab54:	1c9a      	adds	r2, r3, #2
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	3b01      	subs	r3, #1
 800ab64:	b29a      	uxth	r2, r3
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	69db      	ldr	r3, [r3, #28]
 800ab72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ab76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ab7a:	f003 0307 	and.w	r3, r3, #7
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d053      	beq.n	800ac2a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ab82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ab86:	f003 0301 	and.w	r3, r3, #1
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d011      	beq.n	800abb2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800ab8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ab92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d00b      	beq.n	800abb2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aba8:	f043 0201 	orr.w	r2, r3, #1
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800abb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800abb6:	f003 0302 	and.w	r3, r3, #2
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d011      	beq.n	800abe2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800abbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800abc2:	f003 0301 	and.w	r3, r3, #1
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d00b      	beq.n	800abe2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	2202      	movs	r2, #2
 800abd0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abd8:	f043 0204 	orr.w	r2, r3, #4
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800abe2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800abe6:	f003 0304 	and.w	r3, r3, #4
 800abea:	2b00      	cmp	r3, #0
 800abec:	d011      	beq.n	800ac12 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800abee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800abf2:	f003 0301 	and.w	r3, r3, #1
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d00b      	beq.n	800ac12 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2204      	movs	r2, #4
 800ac00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac08:	f043 0202 	orr.w	r2, r3, #2
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d006      	beq.n	800ac2a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f7fe f9f9 	bl	8009014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2200      	movs	r2, #0
 800ac26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ac30:	b29b      	uxth	r3, r3
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	f040 80a2 	bne.w	800ad7c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac40:	e853 3f00 	ldrex	r3, [r3]
 800ac44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ac46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	461a      	mov	r2, r3
 800ac56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ac5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ac5e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ac62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ac66:	e841 2300 	strex	r3, r2, [r1]
 800ac6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ac6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d1e2      	bne.n	800ac38 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	3308      	adds	r3, #8
 800ac78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac7c:	e853 3f00 	ldrex	r3, [r3]
 800ac80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ac82:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ac84:	4b6e      	ldr	r3, [pc, #440]	; (800ae40 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800ac86:	4013      	ands	r3, r2
 800ac88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	3308      	adds	r3, #8
 800ac92:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ac96:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ac98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ac9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ac9e:	e841 2300 	strex	r3, r2, [r1]
 800aca2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800aca4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d1e3      	bne.n	800ac72 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2220      	movs	r2, #32
 800acae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2200      	movs	r2, #0
 800acb6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2200      	movs	r2, #0
 800acbc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4a60      	ldr	r2, [pc, #384]	; (800ae44 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d021      	beq.n	800ad0c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d01a      	beq.n	800ad0c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acde:	e853 3f00 	ldrex	r3, [r3]
 800ace2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ace4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ace6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800acea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	461a      	mov	r2, r3
 800acf4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800acf8:	65bb      	str	r3, [r7, #88]	; 0x58
 800acfa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800acfe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad00:	e841 2300 	strex	r3, r2, [r1]
 800ad04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ad06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d1e4      	bne.n	800acd6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d130      	bne.n	800ad76 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2200      	movs	r2, #0
 800ad18:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad22:	e853 3f00 	ldrex	r3, [r3]
 800ad26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ad28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad2a:	f023 0310 	bic.w	r3, r3, #16
 800ad2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	461a      	mov	r2, r3
 800ad38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ad3c:	647b      	str	r3, [r7, #68]	; 0x44
 800ad3e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ad42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad44:	e841 2300 	strex	r3, r2, [r1]
 800ad48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ad4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d1e4      	bne.n	800ad1a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	69db      	ldr	r3, [r3, #28]
 800ad56:	f003 0310 	and.w	r3, r3, #16
 800ad5a:	2b10      	cmp	r3, #16
 800ad5c:	d103      	bne.n	800ad66 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	2210      	movs	r2, #16
 800ad64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f7fe f95a 	bl	8009028 <HAL_UARTEx_RxEventCallback>
 800ad74:	e002      	b.n	800ad7c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f7f5 fdc8 	bl	800090c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ad7c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d006      	beq.n	800ad92 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800ad84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ad88:	f003 0320 	and.w	r3, r3, #32
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	f47f aecd 	bne.w	800ab2c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad98:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ad9c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d049      	beq.n	800ae38 <UART_RxISR_16BIT_FIFOEN+0x354>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800adaa:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800adae:	429a      	cmp	r2, r3
 800adb0:	d242      	bcs.n	800ae38 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	3308      	adds	r3, #8
 800adb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adbc:	e853 3f00 	ldrex	r3, [r3]
 800adc0:	623b      	str	r3, [r7, #32]
   return(result);
 800adc2:	6a3b      	ldr	r3, [r7, #32]
 800adc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800adc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	3308      	adds	r3, #8
 800add2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800add6:	633a      	str	r2, [r7, #48]	; 0x30
 800add8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800addc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adde:	e841 2300 	strex	r3, r2, [r1]
 800ade2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ade4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d1e3      	bne.n	800adb2 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	4a16      	ldr	r2, [pc, #88]	; (800ae48 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800adee:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	e853 3f00 	ldrex	r3, [r3]
 800adfc:	60fb      	str	r3, [r7, #12]
   return(result);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f043 0320 	orr.w	r3, r3, #32
 800ae04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	461a      	mov	r2, r3
 800ae0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ae12:	61fb      	str	r3, [r7, #28]
 800ae14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae16:	69b9      	ldr	r1, [r7, #24]
 800ae18:	69fa      	ldr	r2, [r7, #28]
 800ae1a:	e841 2300 	strex	r3, r2, [r1]
 800ae1e:	617b      	str	r3, [r7, #20]
   return(result);
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d1e4      	bne.n	800adf0 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ae26:	e007      	b.n	800ae38 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	699a      	ldr	r2, [r3, #24]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f042 0208 	orr.w	r2, r2, #8
 800ae36:	619a      	str	r2, [r3, #24]
}
 800ae38:	bf00      	nop
 800ae3a:	37b8      	adds	r7, #184	; 0xb8
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	effffffe 	.word	0xeffffffe
 800ae44:	58000c00 	.word	0x58000c00
 800ae48:	0800a5cd 	.word	0x0800a5cd

0800ae4c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b083      	sub	sp, #12
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ae54:	bf00      	nop
 800ae56:	370c      	adds	r7, #12
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b083      	sub	sp, #12
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ae68:	bf00      	nop
 800ae6a:	370c      	adds	r7, #12
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr

0800ae74 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ae7c:	bf00      	nop
 800ae7e:	370c      	adds	r7, #12
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr

0800ae88 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b085      	sub	sp, #20
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d101      	bne.n	800ae9e <HAL_UARTEx_DisableFifoMode+0x16>
 800ae9a:	2302      	movs	r3, #2
 800ae9c:	e027      	b.n	800aeee <HAL_UARTEx_DisableFifoMode+0x66>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2201      	movs	r2, #1
 800aea2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2224      	movs	r2, #36	; 0x24
 800aeaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	681a      	ldr	r2, [r3, #0]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f022 0201 	bic.w	r2, r2, #1
 800aec4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aecc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2200      	movs	r2, #0
 800aed2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	68fa      	ldr	r2, [r7, #12]
 800aeda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2220      	movs	r2, #32
 800aee0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2200      	movs	r2, #0
 800aee8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800aeec:	2300      	movs	r3, #0
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3714      	adds	r7, #20
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr

0800aefa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aefa:	b580      	push	{r7, lr}
 800aefc:	b084      	sub	sp, #16
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
 800af02:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	d101      	bne.n	800af12 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800af0e:	2302      	movs	r3, #2
 800af10:	e02d      	b.n	800af6e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2201      	movs	r2, #1
 800af16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2224      	movs	r2, #36	; 0x24
 800af1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f022 0201 	bic.w	r2, r2, #1
 800af38:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	689b      	ldr	r3, [r3, #8]
 800af40:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	683a      	ldr	r2, [r7, #0]
 800af4a:	430a      	orrs	r2, r1
 800af4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 f850 	bl	800aff4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	68fa      	ldr	r2, [r7, #12]
 800af5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2220      	movs	r2, #32
 800af60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2200      	movs	r2, #0
 800af68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800af6c:	2300      	movs	r3, #0
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3710      	adds	r7, #16
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}

0800af76 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af76:	b580      	push	{r7, lr}
 800af78:	b084      	sub	sp, #16
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
 800af7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800af86:	2b01      	cmp	r3, #1
 800af88:	d101      	bne.n	800af8e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800af8a:	2302      	movs	r3, #2
 800af8c:	e02d      	b.n	800afea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2201      	movs	r2, #1
 800af92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2224      	movs	r2, #36	; 0x24
 800af9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f022 0201 	bic.w	r2, r2, #1
 800afb4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	689b      	ldr	r3, [r3, #8]
 800afbc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	683a      	ldr	r2, [r7, #0]
 800afc6:	430a      	orrs	r2, r1
 800afc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f000 f812 	bl	800aff4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	68fa      	ldr	r2, [r7, #12]
 800afd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2220      	movs	r2, #32
 800afdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2200      	movs	r2, #0
 800afe4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800afe8:	2300      	movs	r3, #0
}
 800afea:	4618      	mov	r0, r3
 800afec:	3710      	adds	r7, #16
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
	...

0800aff4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b085      	sub	sp, #20
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b000:	2b00      	cmp	r3, #0
 800b002:	d108      	bne.n	800b016 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2201      	movs	r2, #1
 800b008:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2201      	movs	r2, #1
 800b010:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b014:	e031      	b.n	800b07a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b016:	2310      	movs	r3, #16
 800b018:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b01a:	2310      	movs	r3, #16
 800b01c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	0e5b      	lsrs	r3, r3, #25
 800b026:	b2db      	uxtb	r3, r3
 800b028:	f003 0307 	and.w	r3, r3, #7
 800b02c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	0f5b      	lsrs	r3, r3, #29
 800b036:	b2db      	uxtb	r3, r3
 800b038:	f003 0307 	and.w	r3, r3, #7
 800b03c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b03e:	7bbb      	ldrb	r3, [r7, #14]
 800b040:	7b3a      	ldrb	r2, [r7, #12]
 800b042:	4911      	ldr	r1, [pc, #68]	; (800b088 <UARTEx_SetNbDataToProcess+0x94>)
 800b044:	5c8a      	ldrb	r2, [r1, r2]
 800b046:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b04a:	7b3a      	ldrb	r2, [r7, #12]
 800b04c:	490f      	ldr	r1, [pc, #60]	; (800b08c <UARTEx_SetNbDataToProcess+0x98>)
 800b04e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b050:	fb93 f3f2 	sdiv	r3, r3, r2
 800b054:	b29a      	uxth	r2, r3
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b05c:	7bfb      	ldrb	r3, [r7, #15]
 800b05e:	7b7a      	ldrb	r2, [r7, #13]
 800b060:	4909      	ldr	r1, [pc, #36]	; (800b088 <UARTEx_SetNbDataToProcess+0x94>)
 800b062:	5c8a      	ldrb	r2, [r1, r2]
 800b064:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b068:	7b7a      	ldrb	r2, [r7, #13]
 800b06a:	4908      	ldr	r1, [pc, #32]	; (800b08c <UARTEx_SetNbDataToProcess+0x98>)
 800b06c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b06e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b072:	b29a      	uxth	r2, r3
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b07a:	bf00      	nop
 800b07c:	3714      	adds	r7, #20
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr
 800b086:	bf00      	nop
 800b088:	0800ba1c 	.word	0x0800ba1c
 800b08c:	0800ba24 	.word	0x0800ba24

0800b090 <siprintf>:
 800b090:	b40e      	push	{r1, r2, r3}
 800b092:	b500      	push	{lr}
 800b094:	b09c      	sub	sp, #112	; 0x70
 800b096:	ab1d      	add	r3, sp, #116	; 0x74
 800b098:	9002      	str	r0, [sp, #8]
 800b09a:	9006      	str	r0, [sp, #24]
 800b09c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b0a0:	4809      	ldr	r0, [pc, #36]	; (800b0c8 <siprintf+0x38>)
 800b0a2:	9107      	str	r1, [sp, #28]
 800b0a4:	9104      	str	r1, [sp, #16]
 800b0a6:	4909      	ldr	r1, [pc, #36]	; (800b0cc <siprintf+0x3c>)
 800b0a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0ac:	9105      	str	r1, [sp, #20]
 800b0ae:	6800      	ldr	r0, [r0, #0]
 800b0b0:	9301      	str	r3, [sp, #4]
 800b0b2:	a902      	add	r1, sp, #8
 800b0b4:	f000 f992 	bl	800b3dc <_svfiprintf_r>
 800b0b8:	9b02      	ldr	r3, [sp, #8]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	701a      	strb	r2, [r3, #0]
 800b0be:	b01c      	add	sp, #112	; 0x70
 800b0c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0c4:	b003      	add	sp, #12
 800b0c6:	4770      	bx	lr
 800b0c8:	24000068 	.word	0x24000068
 800b0cc:	ffff0208 	.word	0xffff0208

0800b0d0 <memset>:
 800b0d0:	4402      	add	r2, r0
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d100      	bne.n	800b0da <memset+0xa>
 800b0d8:	4770      	bx	lr
 800b0da:	f803 1b01 	strb.w	r1, [r3], #1
 800b0de:	e7f9      	b.n	800b0d4 <memset+0x4>

0800b0e0 <__errno>:
 800b0e0:	4b01      	ldr	r3, [pc, #4]	; (800b0e8 <__errno+0x8>)
 800b0e2:	6818      	ldr	r0, [r3, #0]
 800b0e4:	4770      	bx	lr
 800b0e6:	bf00      	nop
 800b0e8:	24000068 	.word	0x24000068

0800b0ec <__libc_init_array>:
 800b0ec:	b570      	push	{r4, r5, r6, lr}
 800b0ee:	4d0d      	ldr	r5, [pc, #52]	; (800b124 <__libc_init_array+0x38>)
 800b0f0:	4c0d      	ldr	r4, [pc, #52]	; (800b128 <__libc_init_array+0x3c>)
 800b0f2:	1b64      	subs	r4, r4, r5
 800b0f4:	10a4      	asrs	r4, r4, #2
 800b0f6:	2600      	movs	r6, #0
 800b0f8:	42a6      	cmp	r6, r4
 800b0fa:	d109      	bne.n	800b110 <__libc_init_array+0x24>
 800b0fc:	4d0b      	ldr	r5, [pc, #44]	; (800b12c <__libc_init_array+0x40>)
 800b0fe:	4c0c      	ldr	r4, [pc, #48]	; (800b130 <__libc_init_array+0x44>)
 800b100:	f000 fc6a 	bl	800b9d8 <_init>
 800b104:	1b64      	subs	r4, r4, r5
 800b106:	10a4      	asrs	r4, r4, #2
 800b108:	2600      	movs	r6, #0
 800b10a:	42a6      	cmp	r6, r4
 800b10c:	d105      	bne.n	800b11a <__libc_init_array+0x2e>
 800b10e:	bd70      	pop	{r4, r5, r6, pc}
 800b110:	f855 3b04 	ldr.w	r3, [r5], #4
 800b114:	4798      	blx	r3
 800b116:	3601      	adds	r6, #1
 800b118:	e7ee      	b.n	800b0f8 <__libc_init_array+0xc>
 800b11a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b11e:	4798      	blx	r3
 800b120:	3601      	adds	r6, #1
 800b122:	e7f2      	b.n	800b10a <__libc_init_array+0x1e>
 800b124:	0800ba68 	.word	0x0800ba68
 800b128:	0800ba68 	.word	0x0800ba68
 800b12c:	0800ba68 	.word	0x0800ba68
 800b130:	0800ba6c 	.word	0x0800ba6c

0800b134 <__retarget_lock_acquire_recursive>:
 800b134:	4770      	bx	lr

0800b136 <__retarget_lock_release_recursive>:
 800b136:	4770      	bx	lr

0800b138 <_free_r>:
 800b138:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b13a:	2900      	cmp	r1, #0
 800b13c:	d044      	beq.n	800b1c8 <_free_r+0x90>
 800b13e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b142:	9001      	str	r0, [sp, #4]
 800b144:	2b00      	cmp	r3, #0
 800b146:	f1a1 0404 	sub.w	r4, r1, #4
 800b14a:	bfb8      	it	lt
 800b14c:	18e4      	addlt	r4, r4, r3
 800b14e:	f000 f8df 	bl	800b310 <__malloc_lock>
 800b152:	4a1e      	ldr	r2, [pc, #120]	; (800b1cc <_free_r+0x94>)
 800b154:	9801      	ldr	r0, [sp, #4]
 800b156:	6813      	ldr	r3, [r2, #0]
 800b158:	b933      	cbnz	r3, 800b168 <_free_r+0x30>
 800b15a:	6063      	str	r3, [r4, #4]
 800b15c:	6014      	str	r4, [r2, #0]
 800b15e:	b003      	add	sp, #12
 800b160:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b164:	f000 b8da 	b.w	800b31c <__malloc_unlock>
 800b168:	42a3      	cmp	r3, r4
 800b16a:	d908      	bls.n	800b17e <_free_r+0x46>
 800b16c:	6825      	ldr	r5, [r4, #0]
 800b16e:	1961      	adds	r1, r4, r5
 800b170:	428b      	cmp	r3, r1
 800b172:	bf01      	itttt	eq
 800b174:	6819      	ldreq	r1, [r3, #0]
 800b176:	685b      	ldreq	r3, [r3, #4]
 800b178:	1949      	addeq	r1, r1, r5
 800b17a:	6021      	streq	r1, [r4, #0]
 800b17c:	e7ed      	b.n	800b15a <_free_r+0x22>
 800b17e:	461a      	mov	r2, r3
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	b10b      	cbz	r3, 800b188 <_free_r+0x50>
 800b184:	42a3      	cmp	r3, r4
 800b186:	d9fa      	bls.n	800b17e <_free_r+0x46>
 800b188:	6811      	ldr	r1, [r2, #0]
 800b18a:	1855      	adds	r5, r2, r1
 800b18c:	42a5      	cmp	r5, r4
 800b18e:	d10b      	bne.n	800b1a8 <_free_r+0x70>
 800b190:	6824      	ldr	r4, [r4, #0]
 800b192:	4421      	add	r1, r4
 800b194:	1854      	adds	r4, r2, r1
 800b196:	42a3      	cmp	r3, r4
 800b198:	6011      	str	r1, [r2, #0]
 800b19a:	d1e0      	bne.n	800b15e <_free_r+0x26>
 800b19c:	681c      	ldr	r4, [r3, #0]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	6053      	str	r3, [r2, #4]
 800b1a2:	440c      	add	r4, r1
 800b1a4:	6014      	str	r4, [r2, #0]
 800b1a6:	e7da      	b.n	800b15e <_free_r+0x26>
 800b1a8:	d902      	bls.n	800b1b0 <_free_r+0x78>
 800b1aa:	230c      	movs	r3, #12
 800b1ac:	6003      	str	r3, [r0, #0]
 800b1ae:	e7d6      	b.n	800b15e <_free_r+0x26>
 800b1b0:	6825      	ldr	r5, [r4, #0]
 800b1b2:	1961      	adds	r1, r4, r5
 800b1b4:	428b      	cmp	r3, r1
 800b1b6:	bf04      	itt	eq
 800b1b8:	6819      	ldreq	r1, [r3, #0]
 800b1ba:	685b      	ldreq	r3, [r3, #4]
 800b1bc:	6063      	str	r3, [r4, #4]
 800b1be:	bf04      	itt	eq
 800b1c0:	1949      	addeq	r1, r1, r5
 800b1c2:	6021      	streq	r1, [r4, #0]
 800b1c4:	6054      	str	r4, [r2, #4]
 800b1c6:	e7ca      	b.n	800b15e <_free_r+0x26>
 800b1c8:	b003      	add	sp, #12
 800b1ca:	bd30      	pop	{r4, r5, pc}
 800b1cc:	2401d920 	.word	0x2401d920

0800b1d0 <sbrk_aligned>:
 800b1d0:	b570      	push	{r4, r5, r6, lr}
 800b1d2:	4e0e      	ldr	r6, [pc, #56]	; (800b20c <sbrk_aligned+0x3c>)
 800b1d4:	460c      	mov	r4, r1
 800b1d6:	6831      	ldr	r1, [r6, #0]
 800b1d8:	4605      	mov	r5, r0
 800b1da:	b911      	cbnz	r1, 800b1e2 <sbrk_aligned+0x12>
 800b1dc:	f000 fba6 	bl	800b92c <_sbrk_r>
 800b1e0:	6030      	str	r0, [r6, #0]
 800b1e2:	4621      	mov	r1, r4
 800b1e4:	4628      	mov	r0, r5
 800b1e6:	f000 fba1 	bl	800b92c <_sbrk_r>
 800b1ea:	1c43      	adds	r3, r0, #1
 800b1ec:	d00a      	beq.n	800b204 <sbrk_aligned+0x34>
 800b1ee:	1cc4      	adds	r4, r0, #3
 800b1f0:	f024 0403 	bic.w	r4, r4, #3
 800b1f4:	42a0      	cmp	r0, r4
 800b1f6:	d007      	beq.n	800b208 <sbrk_aligned+0x38>
 800b1f8:	1a21      	subs	r1, r4, r0
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	f000 fb96 	bl	800b92c <_sbrk_r>
 800b200:	3001      	adds	r0, #1
 800b202:	d101      	bne.n	800b208 <sbrk_aligned+0x38>
 800b204:	f04f 34ff 	mov.w	r4, #4294967295
 800b208:	4620      	mov	r0, r4
 800b20a:	bd70      	pop	{r4, r5, r6, pc}
 800b20c:	2401d924 	.word	0x2401d924

0800b210 <_malloc_r>:
 800b210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b214:	1ccd      	adds	r5, r1, #3
 800b216:	f025 0503 	bic.w	r5, r5, #3
 800b21a:	3508      	adds	r5, #8
 800b21c:	2d0c      	cmp	r5, #12
 800b21e:	bf38      	it	cc
 800b220:	250c      	movcc	r5, #12
 800b222:	2d00      	cmp	r5, #0
 800b224:	4607      	mov	r7, r0
 800b226:	db01      	blt.n	800b22c <_malloc_r+0x1c>
 800b228:	42a9      	cmp	r1, r5
 800b22a:	d905      	bls.n	800b238 <_malloc_r+0x28>
 800b22c:	230c      	movs	r3, #12
 800b22e:	603b      	str	r3, [r7, #0]
 800b230:	2600      	movs	r6, #0
 800b232:	4630      	mov	r0, r6
 800b234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b238:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b30c <_malloc_r+0xfc>
 800b23c:	f000 f868 	bl	800b310 <__malloc_lock>
 800b240:	f8d8 3000 	ldr.w	r3, [r8]
 800b244:	461c      	mov	r4, r3
 800b246:	bb5c      	cbnz	r4, 800b2a0 <_malloc_r+0x90>
 800b248:	4629      	mov	r1, r5
 800b24a:	4638      	mov	r0, r7
 800b24c:	f7ff ffc0 	bl	800b1d0 <sbrk_aligned>
 800b250:	1c43      	adds	r3, r0, #1
 800b252:	4604      	mov	r4, r0
 800b254:	d155      	bne.n	800b302 <_malloc_r+0xf2>
 800b256:	f8d8 4000 	ldr.w	r4, [r8]
 800b25a:	4626      	mov	r6, r4
 800b25c:	2e00      	cmp	r6, #0
 800b25e:	d145      	bne.n	800b2ec <_malloc_r+0xdc>
 800b260:	2c00      	cmp	r4, #0
 800b262:	d048      	beq.n	800b2f6 <_malloc_r+0xe6>
 800b264:	6823      	ldr	r3, [r4, #0]
 800b266:	4631      	mov	r1, r6
 800b268:	4638      	mov	r0, r7
 800b26a:	eb04 0903 	add.w	r9, r4, r3
 800b26e:	f000 fb5d 	bl	800b92c <_sbrk_r>
 800b272:	4581      	cmp	r9, r0
 800b274:	d13f      	bne.n	800b2f6 <_malloc_r+0xe6>
 800b276:	6821      	ldr	r1, [r4, #0]
 800b278:	1a6d      	subs	r5, r5, r1
 800b27a:	4629      	mov	r1, r5
 800b27c:	4638      	mov	r0, r7
 800b27e:	f7ff ffa7 	bl	800b1d0 <sbrk_aligned>
 800b282:	3001      	adds	r0, #1
 800b284:	d037      	beq.n	800b2f6 <_malloc_r+0xe6>
 800b286:	6823      	ldr	r3, [r4, #0]
 800b288:	442b      	add	r3, r5
 800b28a:	6023      	str	r3, [r4, #0]
 800b28c:	f8d8 3000 	ldr.w	r3, [r8]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d038      	beq.n	800b306 <_malloc_r+0xf6>
 800b294:	685a      	ldr	r2, [r3, #4]
 800b296:	42a2      	cmp	r2, r4
 800b298:	d12b      	bne.n	800b2f2 <_malloc_r+0xe2>
 800b29a:	2200      	movs	r2, #0
 800b29c:	605a      	str	r2, [r3, #4]
 800b29e:	e00f      	b.n	800b2c0 <_malloc_r+0xb0>
 800b2a0:	6822      	ldr	r2, [r4, #0]
 800b2a2:	1b52      	subs	r2, r2, r5
 800b2a4:	d41f      	bmi.n	800b2e6 <_malloc_r+0xd6>
 800b2a6:	2a0b      	cmp	r2, #11
 800b2a8:	d917      	bls.n	800b2da <_malloc_r+0xca>
 800b2aa:	1961      	adds	r1, r4, r5
 800b2ac:	42a3      	cmp	r3, r4
 800b2ae:	6025      	str	r5, [r4, #0]
 800b2b0:	bf18      	it	ne
 800b2b2:	6059      	strne	r1, [r3, #4]
 800b2b4:	6863      	ldr	r3, [r4, #4]
 800b2b6:	bf08      	it	eq
 800b2b8:	f8c8 1000 	streq.w	r1, [r8]
 800b2bc:	5162      	str	r2, [r4, r5]
 800b2be:	604b      	str	r3, [r1, #4]
 800b2c0:	4638      	mov	r0, r7
 800b2c2:	f104 060b 	add.w	r6, r4, #11
 800b2c6:	f000 f829 	bl	800b31c <__malloc_unlock>
 800b2ca:	f026 0607 	bic.w	r6, r6, #7
 800b2ce:	1d23      	adds	r3, r4, #4
 800b2d0:	1af2      	subs	r2, r6, r3
 800b2d2:	d0ae      	beq.n	800b232 <_malloc_r+0x22>
 800b2d4:	1b9b      	subs	r3, r3, r6
 800b2d6:	50a3      	str	r3, [r4, r2]
 800b2d8:	e7ab      	b.n	800b232 <_malloc_r+0x22>
 800b2da:	42a3      	cmp	r3, r4
 800b2dc:	6862      	ldr	r2, [r4, #4]
 800b2de:	d1dd      	bne.n	800b29c <_malloc_r+0x8c>
 800b2e0:	f8c8 2000 	str.w	r2, [r8]
 800b2e4:	e7ec      	b.n	800b2c0 <_malloc_r+0xb0>
 800b2e6:	4623      	mov	r3, r4
 800b2e8:	6864      	ldr	r4, [r4, #4]
 800b2ea:	e7ac      	b.n	800b246 <_malloc_r+0x36>
 800b2ec:	4634      	mov	r4, r6
 800b2ee:	6876      	ldr	r6, [r6, #4]
 800b2f0:	e7b4      	b.n	800b25c <_malloc_r+0x4c>
 800b2f2:	4613      	mov	r3, r2
 800b2f4:	e7cc      	b.n	800b290 <_malloc_r+0x80>
 800b2f6:	230c      	movs	r3, #12
 800b2f8:	603b      	str	r3, [r7, #0]
 800b2fa:	4638      	mov	r0, r7
 800b2fc:	f000 f80e 	bl	800b31c <__malloc_unlock>
 800b300:	e797      	b.n	800b232 <_malloc_r+0x22>
 800b302:	6025      	str	r5, [r4, #0]
 800b304:	e7dc      	b.n	800b2c0 <_malloc_r+0xb0>
 800b306:	605b      	str	r3, [r3, #4]
 800b308:	deff      	udf	#255	; 0xff
 800b30a:	bf00      	nop
 800b30c:	2401d920 	.word	0x2401d920

0800b310 <__malloc_lock>:
 800b310:	4801      	ldr	r0, [pc, #4]	; (800b318 <__malloc_lock+0x8>)
 800b312:	f7ff bf0f 	b.w	800b134 <__retarget_lock_acquire_recursive>
 800b316:	bf00      	nop
 800b318:	2401d91c 	.word	0x2401d91c

0800b31c <__malloc_unlock>:
 800b31c:	4801      	ldr	r0, [pc, #4]	; (800b324 <__malloc_unlock+0x8>)
 800b31e:	f7ff bf0a 	b.w	800b136 <__retarget_lock_release_recursive>
 800b322:	bf00      	nop
 800b324:	2401d91c 	.word	0x2401d91c

0800b328 <__ssputs_r>:
 800b328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b32c:	688e      	ldr	r6, [r1, #8]
 800b32e:	461f      	mov	r7, r3
 800b330:	42be      	cmp	r6, r7
 800b332:	680b      	ldr	r3, [r1, #0]
 800b334:	4682      	mov	sl, r0
 800b336:	460c      	mov	r4, r1
 800b338:	4690      	mov	r8, r2
 800b33a:	d82c      	bhi.n	800b396 <__ssputs_r+0x6e>
 800b33c:	898a      	ldrh	r2, [r1, #12]
 800b33e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b342:	d026      	beq.n	800b392 <__ssputs_r+0x6a>
 800b344:	6965      	ldr	r5, [r4, #20]
 800b346:	6909      	ldr	r1, [r1, #16]
 800b348:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b34c:	eba3 0901 	sub.w	r9, r3, r1
 800b350:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b354:	1c7b      	adds	r3, r7, #1
 800b356:	444b      	add	r3, r9
 800b358:	106d      	asrs	r5, r5, #1
 800b35a:	429d      	cmp	r5, r3
 800b35c:	bf38      	it	cc
 800b35e:	461d      	movcc	r5, r3
 800b360:	0553      	lsls	r3, r2, #21
 800b362:	d527      	bpl.n	800b3b4 <__ssputs_r+0x8c>
 800b364:	4629      	mov	r1, r5
 800b366:	f7ff ff53 	bl	800b210 <_malloc_r>
 800b36a:	4606      	mov	r6, r0
 800b36c:	b360      	cbz	r0, 800b3c8 <__ssputs_r+0xa0>
 800b36e:	6921      	ldr	r1, [r4, #16]
 800b370:	464a      	mov	r2, r9
 800b372:	f000 faeb 	bl	800b94c <memcpy>
 800b376:	89a3      	ldrh	r3, [r4, #12]
 800b378:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b37c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b380:	81a3      	strh	r3, [r4, #12]
 800b382:	6126      	str	r6, [r4, #16]
 800b384:	6165      	str	r5, [r4, #20]
 800b386:	444e      	add	r6, r9
 800b388:	eba5 0509 	sub.w	r5, r5, r9
 800b38c:	6026      	str	r6, [r4, #0]
 800b38e:	60a5      	str	r5, [r4, #8]
 800b390:	463e      	mov	r6, r7
 800b392:	42be      	cmp	r6, r7
 800b394:	d900      	bls.n	800b398 <__ssputs_r+0x70>
 800b396:	463e      	mov	r6, r7
 800b398:	6820      	ldr	r0, [r4, #0]
 800b39a:	4632      	mov	r2, r6
 800b39c:	4641      	mov	r1, r8
 800b39e:	f000 faab 	bl	800b8f8 <memmove>
 800b3a2:	68a3      	ldr	r3, [r4, #8]
 800b3a4:	1b9b      	subs	r3, r3, r6
 800b3a6:	60a3      	str	r3, [r4, #8]
 800b3a8:	6823      	ldr	r3, [r4, #0]
 800b3aa:	4433      	add	r3, r6
 800b3ac:	6023      	str	r3, [r4, #0]
 800b3ae:	2000      	movs	r0, #0
 800b3b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3b4:	462a      	mov	r2, r5
 800b3b6:	f000 fad7 	bl	800b968 <_realloc_r>
 800b3ba:	4606      	mov	r6, r0
 800b3bc:	2800      	cmp	r0, #0
 800b3be:	d1e0      	bne.n	800b382 <__ssputs_r+0x5a>
 800b3c0:	6921      	ldr	r1, [r4, #16]
 800b3c2:	4650      	mov	r0, sl
 800b3c4:	f7ff feb8 	bl	800b138 <_free_r>
 800b3c8:	230c      	movs	r3, #12
 800b3ca:	f8ca 3000 	str.w	r3, [sl]
 800b3ce:	89a3      	ldrh	r3, [r4, #12]
 800b3d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3d4:	81a3      	strh	r3, [r4, #12]
 800b3d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b3da:	e7e9      	b.n	800b3b0 <__ssputs_r+0x88>

0800b3dc <_svfiprintf_r>:
 800b3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e0:	4698      	mov	r8, r3
 800b3e2:	898b      	ldrh	r3, [r1, #12]
 800b3e4:	061b      	lsls	r3, r3, #24
 800b3e6:	b09d      	sub	sp, #116	; 0x74
 800b3e8:	4607      	mov	r7, r0
 800b3ea:	460d      	mov	r5, r1
 800b3ec:	4614      	mov	r4, r2
 800b3ee:	d50e      	bpl.n	800b40e <_svfiprintf_r+0x32>
 800b3f0:	690b      	ldr	r3, [r1, #16]
 800b3f2:	b963      	cbnz	r3, 800b40e <_svfiprintf_r+0x32>
 800b3f4:	2140      	movs	r1, #64	; 0x40
 800b3f6:	f7ff ff0b 	bl	800b210 <_malloc_r>
 800b3fa:	6028      	str	r0, [r5, #0]
 800b3fc:	6128      	str	r0, [r5, #16]
 800b3fe:	b920      	cbnz	r0, 800b40a <_svfiprintf_r+0x2e>
 800b400:	230c      	movs	r3, #12
 800b402:	603b      	str	r3, [r7, #0]
 800b404:	f04f 30ff 	mov.w	r0, #4294967295
 800b408:	e0d0      	b.n	800b5ac <_svfiprintf_r+0x1d0>
 800b40a:	2340      	movs	r3, #64	; 0x40
 800b40c:	616b      	str	r3, [r5, #20]
 800b40e:	2300      	movs	r3, #0
 800b410:	9309      	str	r3, [sp, #36]	; 0x24
 800b412:	2320      	movs	r3, #32
 800b414:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b418:	f8cd 800c 	str.w	r8, [sp, #12]
 800b41c:	2330      	movs	r3, #48	; 0x30
 800b41e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b5c4 <_svfiprintf_r+0x1e8>
 800b422:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b426:	f04f 0901 	mov.w	r9, #1
 800b42a:	4623      	mov	r3, r4
 800b42c:	469a      	mov	sl, r3
 800b42e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b432:	b10a      	cbz	r2, 800b438 <_svfiprintf_r+0x5c>
 800b434:	2a25      	cmp	r2, #37	; 0x25
 800b436:	d1f9      	bne.n	800b42c <_svfiprintf_r+0x50>
 800b438:	ebba 0b04 	subs.w	fp, sl, r4
 800b43c:	d00b      	beq.n	800b456 <_svfiprintf_r+0x7a>
 800b43e:	465b      	mov	r3, fp
 800b440:	4622      	mov	r2, r4
 800b442:	4629      	mov	r1, r5
 800b444:	4638      	mov	r0, r7
 800b446:	f7ff ff6f 	bl	800b328 <__ssputs_r>
 800b44a:	3001      	adds	r0, #1
 800b44c:	f000 80a9 	beq.w	800b5a2 <_svfiprintf_r+0x1c6>
 800b450:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b452:	445a      	add	r2, fp
 800b454:	9209      	str	r2, [sp, #36]	; 0x24
 800b456:	f89a 3000 	ldrb.w	r3, [sl]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	f000 80a1 	beq.w	800b5a2 <_svfiprintf_r+0x1c6>
 800b460:	2300      	movs	r3, #0
 800b462:	f04f 32ff 	mov.w	r2, #4294967295
 800b466:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b46a:	f10a 0a01 	add.w	sl, sl, #1
 800b46e:	9304      	str	r3, [sp, #16]
 800b470:	9307      	str	r3, [sp, #28]
 800b472:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b476:	931a      	str	r3, [sp, #104]	; 0x68
 800b478:	4654      	mov	r4, sl
 800b47a:	2205      	movs	r2, #5
 800b47c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b480:	4850      	ldr	r0, [pc, #320]	; (800b5c4 <_svfiprintf_r+0x1e8>)
 800b482:	f7f4 ff3d 	bl	8000300 <memchr>
 800b486:	9a04      	ldr	r2, [sp, #16]
 800b488:	b9d8      	cbnz	r0, 800b4c2 <_svfiprintf_r+0xe6>
 800b48a:	06d0      	lsls	r0, r2, #27
 800b48c:	bf44      	itt	mi
 800b48e:	2320      	movmi	r3, #32
 800b490:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b494:	0711      	lsls	r1, r2, #28
 800b496:	bf44      	itt	mi
 800b498:	232b      	movmi	r3, #43	; 0x2b
 800b49a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b49e:	f89a 3000 	ldrb.w	r3, [sl]
 800b4a2:	2b2a      	cmp	r3, #42	; 0x2a
 800b4a4:	d015      	beq.n	800b4d2 <_svfiprintf_r+0xf6>
 800b4a6:	9a07      	ldr	r2, [sp, #28]
 800b4a8:	4654      	mov	r4, sl
 800b4aa:	2000      	movs	r0, #0
 800b4ac:	f04f 0c0a 	mov.w	ip, #10
 800b4b0:	4621      	mov	r1, r4
 800b4b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4b6:	3b30      	subs	r3, #48	; 0x30
 800b4b8:	2b09      	cmp	r3, #9
 800b4ba:	d94d      	bls.n	800b558 <_svfiprintf_r+0x17c>
 800b4bc:	b1b0      	cbz	r0, 800b4ec <_svfiprintf_r+0x110>
 800b4be:	9207      	str	r2, [sp, #28]
 800b4c0:	e014      	b.n	800b4ec <_svfiprintf_r+0x110>
 800b4c2:	eba0 0308 	sub.w	r3, r0, r8
 800b4c6:	fa09 f303 	lsl.w	r3, r9, r3
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	9304      	str	r3, [sp, #16]
 800b4ce:	46a2      	mov	sl, r4
 800b4d0:	e7d2      	b.n	800b478 <_svfiprintf_r+0x9c>
 800b4d2:	9b03      	ldr	r3, [sp, #12]
 800b4d4:	1d19      	adds	r1, r3, #4
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	9103      	str	r1, [sp, #12]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	bfbb      	ittet	lt
 800b4de:	425b      	neglt	r3, r3
 800b4e0:	f042 0202 	orrlt.w	r2, r2, #2
 800b4e4:	9307      	strge	r3, [sp, #28]
 800b4e6:	9307      	strlt	r3, [sp, #28]
 800b4e8:	bfb8      	it	lt
 800b4ea:	9204      	strlt	r2, [sp, #16]
 800b4ec:	7823      	ldrb	r3, [r4, #0]
 800b4ee:	2b2e      	cmp	r3, #46	; 0x2e
 800b4f0:	d10c      	bne.n	800b50c <_svfiprintf_r+0x130>
 800b4f2:	7863      	ldrb	r3, [r4, #1]
 800b4f4:	2b2a      	cmp	r3, #42	; 0x2a
 800b4f6:	d134      	bne.n	800b562 <_svfiprintf_r+0x186>
 800b4f8:	9b03      	ldr	r3, [sp, #12]
 800b4fa:	1d1a      	adds	r2, r3, #4
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	9203      	str	r2, [sp, #12]
 800b500:	2b00      	cmp	r3, #0
 800b502:	bfb8      	it	lt
 800b504:	f04f 33ff 	movlt.w	r3, #4294967295
 800b508:	3402      	adds	r4, #2
 800b50a:	9305      	str	r3, [sp, #20]
 800b50c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b5d4 <_svfiprintf_r+0x1f8>
 800b510:	7821      	ldrb	r1, [r4, #0]
 800b512:	2203      	movs	r2, #3
 800b514:	4650      	mov	r0, sl
 800b516:	f7f4 fef3 	bl	8000300 <memchr>
 800b51a:	b138      	cbz	r0, 800b52c <_svfiprintf_r+0x150>
 800b51c:	9b04      	ldr	r3, [sp, #16]
 800b51e:	eba0 000a 	sub.w	r0, r0, sl
 800b522:	2240      	movs	r2, #64	; 0x40
 800b524:	4082      	lsls	r2, r0
 800b526:	4313      	orrs	r3, r2
 800b528:	3401      	adds	r4, #1
 800b52a:	9304      	str	r3, [sp, #16]
 800b52c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b530:	4825      	ldr	r0, [pc, #148]	; (800b5c8 <_svfiprintf_r+0x1ec>)
 800b532:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b536:	2206      	movs	r2, #6
 800b538:	f7f4 fee2 	bl	8000300 <memchr>
 800b53c:	2800      	cmp	r0, #0
 800b53e:	d038      	beq.n	800b5b2 <_svfiprintf_r+0x1d6>
 800b540:	4b22      	ldr	r3, [pc, #136]	; (800b5cc <_svfiprintf_r+0x1f0>)
 800b542:	bb1b      	cbnz	r3, 800b58c <_svfiprintf_r+0x1b0>
 800b544:	9b03      	ldr	r3, [sp, #12]
 800b546:	3307      	adds	r3, #7
 800b548:	f023 0307 	bic.w	r3, r3, #7
 800b54c:	3308      	adds	r3, #8
 800b54e:	9303      	str	r3, [sp, #12]
 800b550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b552:	4433      	add	r3, r6
 800b554:	9309      	str	r3, [sp, #36]	; 0x24
 800b556:	e768      	b.n	800b42a <_svfiprintf_r+0x4e>
 800b558:	fb0c 3202 	mla	r2, ip, r2, r3
 800b55c:	460c      	mov	r4, r1
 800b55e:	2001      	movs	r0, #1
 800b560:	e7a6      	b.n	800b4b0 <_svfiprintf_r+0xd4>
 800b562:	2300      	movs	r3, #0
 800b564:	3401      	adds	r4, #1
 800b566:	9305      	str	r3, [sp, #20]
 800b568:	4619      	mov	r1, r3
 800b56a:	f04f 0c0a 	mov.w	ip, #10
 800b56e:	4620      	mov	r0, r4
 800b570:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b574:	3a30      	subs	r2, #48	; 0x30
 800b576:	2a09      	cmp	r2, #9
 800b578:	d903      	bls.n	800b582 <_svfiprintf_r+0x1a6>
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d0c6      	beq.n	800b50c <_svfiprintf_r+0x130>
 800b57e:	9105      	str	r1, [sp, #20]
 800b580:	e7c4      	b.n	800b50c <_svfiprintf_r+0x130>
 800b582:	fb0c 2101 	mla	r1, ip, r1, r2
 800b586:	4604      	mov	r4, r0
 800b588:	2301      	movs	r3, #1
 800b58a:	e7f0      	b.n	800b56e <_svfiprintf_r+0x192>
 800b58c:	ab03      	add	r3, sp, #12
 800b58e:	9300      	str	r3, [sp, #0]
 800b590:	462a      	mov	r2, r5
 800b592:	4b0f      	ldr	r3, [pc, #60]	; (800b5d0 <_svfiprintf_r+0x1f4>)
 800b594:	a904      	add	r1, sp, #16
 800b596:	4638      	mov	r0, r7
 800b598:	f3af 8000 	nop.w
 800b59c:	1c42      	adds	r2, r0, #1
 800b59e:	4606      	mov	r6, r0
 800b5a0:	d1d6      	bne.n	800b550 <_svfiprintf_r+0x174>
 800b5a2:	89ab      	ldrh	r3, [r5, #12]
 800b5a4:	065b      	lsls	r3, r3, #25
 800b5a6:	f53f af2d 	bmi.w	800b404 <_svfiprintf_r+0x28>
 800b5aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5ac:	b01d      	add	sp, #116	; 0x74
 800b5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5b2:	ab03      	add	r3, sp, #12
 800b5b4:	9300      	str	r3, [sp, #0]
 800b5b6:	462a      	mov	r2, r5
 800b5b8:	4b05      	ldr	r3, [pc, #20]	; (800b5d0 <_svfiprintf_r+0x1f4>)
 800b5ba:	a904      	add	r1, sp, #16
 800b5bc:	4638      	mov	r0, r7
 800b5be:	f000 f879 	bl	800b6b4 <_printf_i>
 800b5c2:	e7eb      	b.n	800b59c <_svfiprintf_r+0x1c0>
 800b5c4:	0800ba2c 	.word	0x0800ba2c
 800b5c8:	0800ba36 	.word	0x0800ba36
 800b5cc:	00000000 	.word	0x00000000
 800b5d0:	0800b329 	.word	0x0800b329
 800b5d4:	0800ba32 	.word	0x0800ba32

0800b5d8 <_printf_common>:
 800b5d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5dc:	4616      	mov	r6, r2
 800b5de:	4699      	mov	r9, r3
 800b5e0:	688a      	ldr	r2, [r1, #8]
 800b5e2:	690b      	ldr	r3, [r1, #16]
 800b5e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	bfb8      	it	lt
 800b5ec:	4613      	movlt	r3, r2
 800b5ee:	6033      	str	r3, [r6, #0]
 800b5f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b5f4:	4607      	mov	r7, r0
 800b5f6:	460c      	mov	r4, r1
 800b5f8:	b10a      	cbz	r2, 800b5fe <_printf_common+0x26>
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	6033      	str	r3, [r6, #0]
 800b5fe:	6823      	ldr	r3, [r4, #0]
 800b600:	0699      	lsls	r1, r3, #26
 800b602:	bf42      	ittt	mi
 800b604:	6833      	ldrmi	r3, [r6, #0]
 800b606:	3302      	addmi	r3, #2
 800b608:	6033      	strmi	r3, [r6, #0]
 800b60a:	6825      	ldr	r5, [r4, #0]
 800b60c:	f015 0506 	ands.w	r5, r5, #6
 800b610:	d106      	bne.n	800b620 <_printf_common+0x48>
 800b612:	f104 0a19 	add.w	sl, r4, #25
 800b616:	68e3      	ldr	r3, [r4, #12]
 800b618:	6832      	ldr	r2, [r6, #0]
 800b61a:	1a9b      	subs	r3, r3, r2
 800b61c:	42ab      	cmp	r3, r5
 800b61e:	dc26      	bgt.n	800b66e <_printf_common+0x96>
 800b620:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b624:	1e13      	subs	r3, r2, #0
 800b626:	6822      	ldr	r2, [r4, #0]
 800b628:	bf18      	it	ne
 800b62a:	2301      	movne	r3, #1
 800b62c:	0692      	lsls	r2, r2, #26
 800b62e:	d42b      	bmi.n	800b688 <_printf_common+0xb0>
 800b630:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b634:	4649      	mov	r1, r9
 800b636:	4638      	mov	r0, r7
 800b638:	47c0      	blx	r8
 800b63a:	3001      	adds	r0, #1
 800b63c:	d01e      	beq.n	800b67c <_printf_common+0xa4>
 800b63e:	6823      	ldr	r3, [r4, #0]
 800b640:	6922      	ldr	r2, [r4, #16]
 800b642:	f003 0306 	and.w	r3, r3, #6
 800b646:	2b04      	cmp	r3, #4
 800b648:	bf02      	ittt	eq
 800b64a:	68e5      	ldreq	r5, [r4, #12]
 800b64c:	6833      	ldreq	r3, [r6, #0]
 800b64e:	1aed      	subeq	r5, r5, r3
 800b650:	68a3      	ldr	r3, [r4, #8]
 800b652:	bf0c      	ite	eq
 800b654:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b658:	2500      	movne	r5, #0
 800b65a:	4293      	cmp	r3, r2
 800b65c:	bfc4      	itt	gt
 800b65e:	1a9b      	subgt	r3, r3, r2
 800b660:	18ed      	addgt	r5, r5, r3
 800b662:	2600      	movs	r6, #0
 800b664:	341a      	adds	r4, #26
 800b666:	42b5      	cmp	r5, r6
 800b668:	d11a      	bne.n	800b6a0 <_printf_common+0xc8>
 800b66a:	2000      	movs	r0, #0
 800b66c:	e008      	b.n	800b680 <_printf_common+0xa8>
 800b66e:	2301      	movs	r3, #1
 800b670:	4652      	mov	r2, sl
 800b672:	4649      	mov	r1, r9
 800b674:	4638      	mov	r0, r7
 800b676:	47c0      	blx	r8
 800b678:	3001      	adds	r0, #1
 800b67a:	d103      	bne.n	800b684 <_printf_common+0xac>
 800b67c:	f04f 30ff 	mov.w	r0, #4294967295
 800b680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b684:	3501      	adds	r5, #1
 800b686:	e7c6      	b.n	800b616 <_printf_common+0x3e>
 800b688:	18e1      	adds	r1, r4, r3
 800b68a:	1c5a      	adds	r2, r3, #1
 800b68c:	2030      	movs	r0, #48	; 0x30
 800b68e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b692:	4422      	add	r2, r4
 800b694:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b698:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b69c:	3302      	adds	r3, #2
 800b69e:	e7c7      	b.n	800b630 <_printf_common+0x58>
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	4622      	mov	r2, r4
 800b6a4:	4649      	mov	r1, r9
 800b6a6:	4638      	mov	r0, r7
 800b6a8:	47c0      	blx	r8
 800b6aa:	3001      	adds	r0, #1
 800b6ac:	d0e6      	beq.n	800b67c <_printf_common+0xa4>
 800b6ae:	3601      	adds	r6, #1
 800b6b0:	e7d9      	b.n	800b666 <_printf_common+0x8e>
	...

0800b6b4 <_printf_i>:
 800b6b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6b8:	7e0f      	ldrb	r7, [r1, #24]
 800b6ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b6bc:	2f78      	cmp	r7, #120	; 0x78
 800b6be:	4691      	mov	r9, r2
 800b6c0:	4680      	mov	r8, r0
 800b6c2:	460c      	mov	r4, r1
 800b6c4:	469a      	mov	sl, r3
 800b6c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b6ca:	d807      	bhi.n	800b6dc <_printf_i+0x28>
 800b6cc:	2f62      	cmp	r7, #98	; 0x62
 800b6ce:	d80a      	bhi.n	800b6e6 <_printf_i+0x32>
 800b6d0:	2f00      	cmp	r7, #0
 800b6d2:	f000 80d4 	beq.w	800b87e <_printf_i+0x1ca>
 800b6d6:	2f58      	cmp	r7, #88	; 0x58
 800b6d8:	f000 80c0 	beq.w	800b85c <_printf_i+0x1a8>
 800b6dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b6e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b6e4:	e03a      	b.n	800b75c <_printf_i+0xa8>
 800b6e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b6ea:	2b15      	cmp	r3, #21
 800b6ec:	d8f6      	bhi.n	800b6dc <_printf_i+0x28>
 800b6ee:	a101      	add	r1, pc, #4	; (adr r1, 800b6f4 <_printf_i+0x40>)
 800b6f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b6f4:	0800b74d 	.word	0x0800b74d
 800b6f8:	0800b761 	.word	0x0800b761
 800b6fc:	0800b6dd 	.word	0x0800b6dd
 800b700:	0800b6dd 	.word	0x0800b6dd
 800b704:	0800b6dd 	.word	0x0800b6dd
 800b708:	0800b6dd 	.word	0x0800b6dd
 800b70c:	0800b761 	.word	0x0800b761
 800b710:	0800b6dd 	.word	0x0800b6dd
 800b714:	0800b6dd 	.word	0x0800b6dd
 800b718:	0800b6dd 	.word	0x0800b6dd
 800b71c:	0800b6dd 	.word	0x0800b6dd
 800b720:	0800b865 	.word	0x0800b865
 800b724:	0800b78d 	.word	0x0800b78d
 800b728:	0800b81f 	.word	0x0800b81f
 800b72c:	0800b6dd 	.word	0x0800b6dd
 800b730:	0800b6dd 	.word	0x0800b6dd
 800b734:	0800b887 	.word	0x0800b887
 800b738:	0800b6dd 	.word	0x0800b6dd
 800b73c:	0800b78d 	.word	0x0800b78d
 800b740:	0800b6dd 	.word	0x0800b6dd
 800b744:	0800b6dd 	.word	0x0800b6dd
 800b748:	0800b827 	.word	0x0800b827
 800b74c:	682b      	ldr	r3, [r5, #0]
 800b74e:	1d1a      	adds	r2, r3, #4
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	602a      	str	r2, [r5, #0]
 800b754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b758:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b75c:	2301      	movs	r3, #1
 800b75e:	e09f      	b.n	800b8a0 <_printf_i+0x1ec>
 800b760:	6820      	ldr	r0, [r4, #0]
 800b762:	682b      	ldr	r3, [r5, #0]
 800b764:	0607      	lsls	r7, r0, #24
 800b766:	f103 0104 	add.w	r1, r3, #4
 800b76a:	6029      	str	r1, [r5, #0]
 800b76c:	d501      	bpl.n	800b772 <_printf_i+0xbe>
 800b76e:	681e      	ldr	r6, [r3, #0]
 800b770:	e003      	b.n	800b77a <_printf_i+0xc6>
 800b772:	0646      	lsls	r6, r0, #25
 800b774:	d5fb      	bpl.n	800b76e <_printf_i+0xba>
 800b776:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b77a:	2e00      	cmp	r6, #0
 800b77c:	da03      	bge.n	800b786 <_printf_i+0xd2>
 800b77e:	232d      	movs	r3, #45	; 0x2d
 800b780:	4276      	negs	r6, r6
 800b782:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b786:	485a      	ldr	r0, [pc, #360]	; (800b8f0 <_printf_i+0x23c>)
 800b788:	230a      	movs	r3, #10
 800b78a:	e012      	b.n	800b7b2 <_printf_i+0xfe>
 800b78c:	682b      	ldr	r3, [r5, #0]
 800b78e:	6820      	ldr	r0, [r4, #0]
 800b790:	1d19      	adds	r1, r3, #4
 800b792:	6029      	str	r1, [r5, #0]
 800b794:	0605      	lsls	r5, r0, #24
 800b796:	d501      	bpl.n	800b79c <_printf_i+0xe8>
 800b798:	681e      	ldr	r6, [r3, #0]
 800b79a:	e002      	b.n	800b7a2 <_printf_i+0xee>
 800b79c:	0641      	lsls	r1, r0, #25
 800b79e:	d5fb      	bpl.n	800b798 <_printf_i+0xe4>
 800b7a0:	881e      	ldrh	r6, [r3, #0]
 800b7a2:	4853      	ldr	r0, [pc, #332]	; (800b8f0 <_printf_i+0x23c>)
 800b7a4:	2f6f      	cmp	r7, #111	; 0x6f
 800b7a6:	bf0c      	ite	eq
 800b7a8:	2308      	moveq	r3, #8
 800b7aa:	230a      	movne	r3, #10
 800b7ac:	2100      	movs	r1, #0
 800b7ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b7b2:	6865      	ldr	r5, [r4, #4]
 800b7b4:	60a5      	str	r5, [r4, #8]
 800b7b6:	2d00      	cmp	r5, #0
 800b7b8:	bfa2      	ittt	ge
 800b7ba:	6821      	ldrge	r1, [r4, #0]
 800b7bc:	f021 0104 	bicge.w	r1, r1, #4
 800b7c0:	6021      	strge	r1, [r4, #0]
 800b7c2:	b90e      	cbnz	r6, 800b7c8 <_printf_i+0x114>
 800b7c4:	2d00      	cmp	r5, #0
 800b7c6:	d04b      	beq.n	800b860 <_printf_i+0x1ac>
 800b7c8:	4615      	mov	r5, r2
 800b7ca:	fbb6 f1f3 	udiv	r1, r6, r3
 800b7ce:	fb03 6711 	mls	r7, r3, r1, r6
 800b7d2:	5dc7      	ldrb	r7, [r0, r7]
 800b7d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b7d8:	4637      	mov	r7, r6
 800b7da:	42bb      	cmp	r3, r7
 800b7dc:	460e      	mov	r6, r1
 800b7de:	d9f4      	bls.n	800b7ca <_printf_i+0x116>
 800b7e0:	2b08      	cmp	r3, #8
 800b7e2:	d10b      	bne.n	800b7fc <_printf_i+0x148>
 800b7e4:	6823      	ldr	r3, [r4, #0]
 800b7e6:	07de      	lsls	r6, r3, #31
 800b7e8:	d508      	bpl.n	800b7fc <_printf_i+0x148>
 800b7ea:	6923      	ldr	r3, [r4, #16]
 800b7ec:	6861      	ldr	r1, [r4, #4]
 800b7ee:	4299      	cmp	r1, r3
 800b7f0:	bfde      	ittt	le
 800b7f2:	2330      	movle	r3, #48	; 0x30
 800b7f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b7f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b7fc:	1b52      	subs	r2, r2, r5
 800b7fe:	6122      	str	r2, [r4, #16]
 800b800:	f8cd a000 	str.w	sl, [sp]
 800b804:	464b      	mov	r3, r9
 800b806:	aa03      	add	r2, sp, #12
 800b808:	4621      	mov	r1, r4
 800b80a:	4640      	mov	r0, r8
 800b80c:	f7ff fee4 	bl	800b5d8 <_printf_common>
 800b810:	3001      	adds	r0, #1
 800b812:	d14a      	bne.n	800b8aa <_printf_i+0x1f6>
 800b814:	f04f 30ff 	mov.w	r0, #4294967295
 800b818:	b004      	add	sp, #16
 800b81a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b81e:	6823      	ldr	r3, [r4, #0]
 800b820:	f043 0320 	orr.w	r3, r3, #32
 800b824:	6023      	str	r3, [r4, #0]
 800b826:	4833      	ldr	r0, [pc, #204]	; (800b8f4 <_printf_i+0x240>)
 800b828:	2778      	movs	r7, #120	; 0x78
 800b82a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b82e:	6823      	ldr	r3, [r4, #0]
 800b830:	6829      	ldr	r1, [r5, #0]
 800b832:	061f      	lsls	r7, r3, #24
 800b834:	f851 6b04 	ldr.w	r6, [r1], #4
 800b838:	d402      	bmi.n	800b840 <_printf_i+0x18c>
 800b83a:	065f      	lsls	r7, r3, #25
 800b83c:	bf48      	it	mi
 800b83e:	b2b6      	uxthmi	r6, r6
 800b840:	07df      	lsls	r7, r3, #31
 800b842:	bf48      	it	mi
 800b844:	f043 0320 	orrmi.w	r3, r3, #32
 800b848:	6029      	str	r1, [r5, #0]
 800b84a:	bf48      	it	mi
 800b84c:	6023      	strmi	r3, [r4, #0]
 800b84e:	b91e      	cbnz	r6, 800b858 <_printf_i+0x1a4>
 800b850:	6823      	ldr	r3, [r4, #0]
 800b852:	f023 0320 	bic.w	r3, r3, #32
 800b856:	6023      	str	r3, [r4, #0]
 800b858:	2310      	movs	r3, #16
 800b85a:	e7a7      	b.n	800b7ac <_printf_i+0xf8>
 800b85c:	4824      	ldr	r0, [pc, #144]	; (800b8f0 <_printf_i+0x23c>)
 800b85e:	e7e4      	b.n	800b82a <_printf_i+0x176>
 800b860:	4615      	mov	r5, r2
 800b862:	e7bd      	b.n	800b7e0 <_printf_i+0x12c>
 800b864:	682b      	ldr	r3, [r5, #0]
 800b866:	6826      	ldr	r6, [r4, #0]
 800b868:	6961      	ldr	r1, [r4, #20]
 800b86a:	1d18      	adds	r0, r3, #4
 800b86c:	6028      	str	r0, [r5, #0]
 800b86e:	0635      	lsls	r5, r6, #24
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	d501      	bpl.n	800b878 <_printf_i+0x1c4>
 800b874:	6019      	str	r1, [r3, #0]
 800b876:	e002      	b.n	800b87e <_printf_i+0x1ca>
 800b878:	0670      	lsls	r0, r6, #25
 800b87a:	d5fb      	bpl.n	800b874 <_printf_i+0x1c0>
 800b87c:	8019      	strh	r1, [r3, #0]
 800b87e:	2300      	movs	r3, #0
 800b880:	6123      	str	r3, [r4, #16]
 800b882:	4615      	mov	r5, r2
 800b884:	e7bc      	b.n	800b800 <_printf_i+0x14c>
 800b886:	682b      	ldr	r3, [r5, #0]
 800b888:	1d1a      	adds	r2, r3, #4
 800b88a:	602a      	str	r2, [r5, #0]
 800b88c:	681d      	ldr	r5, [r3, #0]
 800b88e:	6862      	ldr	r2, [r4, #4]
 800b890:	2100      	movs	r1, #0
 800b892:	4628      	mov	r0, r5
 800b894:	f7f4 fd34 	bl	8000300 <memchr>
 800b898:	b108      	cbz	r0, 800b89e <_printf_i+0x1ea>
 800b89a:	1b40      	subs	r0, r0, r5
 800b89c:	6060      	str	r0, [r4, #4]
 800b89e:	6863      	ldr	r3, [r4, #4]
 800b8a0:	6123      	str	r3, [r4, #16]
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8a8:	e7aa      	b.n	800b800 <_printf_i+0x14c>
 800b8aa:	6923      	ldr	r3, [r4, #16]
 800b8ac:	462a      	mov	r2, r5
 800b8ae:	4649      	mov	r1, r9
 800b8b0:	4640      	mov	r0, r8
 800b8b2:	47d0      	blx	sl
 800b8b4:	3001      	adds	r0, #1
 800b8b6:	d0ad      	beq.n	800b814 <_printf_i+0x160>
 800b8b8:	6823      	ldr	r3, [r4, #0]
 800b8ba:	079b      	lsls	r3, r3, #30
 800b8bc:	d413      	bmi.n	800b8e6 <_printf_i+0x232>
 800b8be:	68e0      	ldr	r0, [r4, #12]
 800b8c0:	9b03      	ldr	r3, [sp, #12]
 800b8c2:	4298      	cmp	r0, r3
 800b8c4:	bfb8      	it	lt
 800b8c6:	4618      	movlt	r0, r3
 800b8c8:	e7a6      	b.n	800b818 <_printf_i+0x164>
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	4632      	mov	r2, r6
 800b8ce:	4649      	mov	r1, r9
 800b8d0:	4640      	mov	r0, r8
 800b8d2:	47d0      	blx	sl
 800b8d4:	3001      	adds	r0, #1
 800b8d6:	d09d      	beq.n	800b814 <_printf_i+0x160>
 800b8d8:	3501      	adds	r5, #1
 800b8da:	68e3      	ldr	r3, [r4, #12]
 800b8dc:	9903      	ldr	r1, [sp, #12]
 800b8de:	1a5b      	subs	r3, r3, r1
 800b8e0:	42ab      	cmp	r3, r5
 800b8e2:	dcf2      	bgt.n	800b8ca <_printf_i+0x216>
 800b8e4:	e7eb      	b.n	800b8be <_printf_i+0x20a>
 800b8e6:	2500      	movs	r5, #0
 800b8e8:	f104 0619 	add.w	r6, r4, #25
 800b8ec:	e7f5      	b.n	800b8da <_printf_i+0x226>
 800b8ee:	bf00      	nop
 800b8f0:	0800ba3d 	.word	0x0800ba3d
 800b8f4:	0800ba4e 	.word	0x0800ba4e

0800b8f8 <memmove>:
 800b8f8:	4288      	cmp	r0, r1
 800b8fa:	b510      	push	{r4, lr}
 800b8fc:	eb01 0402 	add.w	r4, r1, r2
 800b900:	d902      	bls.n	800b908 <memmove+0x10>
 800b902:	4284      	cmp	r4, r0
 800b904:	4623      	mov	r3, r4
 800b906:	d807      	bhi.n	800b918 <memmove+0x20>
 800b908:	1e43      	subs	r3, r0, #1
 800b90a:	42a1      	cmp	r1, r4
 800b90c:	d008      	beq.n	800b920 <memmove+0x28>
 800b90e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b912:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b916:	e7f8      	b.n	800b90a <memmove+0x12>
 800b918:	4402      	add	r2, r0
 800b91a:	4601      	mov	r1, r0
 800b91c:	428a      	cmp	r2, r1
 800b91e:	d100      	bne.n	800b922 <memmove+0x2a>
 800b920:	bd10      	pop	{r4, pc}
 800b922:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b926:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b92a:	e7f7      	b.n	800b91c <memmove+0x24>

0800b92c <_sbrk_r>:
 800b92c:	b538      	push	{r3, r4, r5, lr}
 800b92e:	4d06      	ldr	r5, [pc, #24]	; (800b948 <_sbrk_r+0x1c>)
 800b930:	2300      	movs	r3, #0
 800b932:	4604      	mov	r4, r0
 800b934:	4608      	mov	r0, r1
 800b936:	602b      	str	r3, [r5, #0]
 800b938:	f7f6 f996 	bl	8001c68 <_sbrk>
 800b93c:	1c43      	adds	r3, r0, #1
 800b93e:	d102      	bne.n	800b946 <_sbrk_r+0x1a>
 800b940:	682b      	ldr	r3, [r5, #0]
 800b942:	b103      	cbz	r3, 800b946 <_sbrk_r+0x1a>
 800b944:	6023      	str	r3, [r4, #0]
 800b946:	bd38      	pop	{r3, r4, r5, pc}
 800b948:	2401d918 	.word	0x2401d918

0800b94c <memcpy>:
 800b94c:	440a      	add	r2, r1
 800b94e:	4291      	cmp	r1, r2
 800b950:	f100 33ff 	add.w	r3, r0, #4294967295
 800b954:	d100      	bne.n	800b958 <memcpy+0xc>
 800b956:	4770      	bx	lr
 800b958:	b510      	push	{r4, lr}
 800b95a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b95e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b962:	4291      	cmp	r1, r2
 800b964:	d1f9      	bne.n	800b95a <memcpy+0xe>
 800b966:	bd10      	pop	{r4, pc}

0800b968 <_realloc_r>:
 800b968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b96c:	4680      	mov	r8, r0
 800b96e:	4614      	mov	r4, r2
 800b970:	460e      	mov	r6, r1
 800b972:	b921      	cbnz	r1, 800b97e <_realloc_r+0x16>
 800b974:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b978:	4611      	mov	r1, r2
 800b97a:	f7ff bc49 	b.w	800b210 <_malloc_r>
 800b97e:	b92a      	cbnz	r2, 800b98c <_realloc_r+0x24>
 800b980:	f7ff fbda 	bl	800b138 <_free_r>
 800b984:	4625      	mov	r5, r4
 800b986:	4628      	mov	r0, r5
 800b988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b98c:	f000 f81b 	bl	800b9c6 <_malloc_usable_size_r>
 800b990:	4284      	cmp	r4, r0
 800b992:	4607      	mov	r7, r0
 800b994:	d802      	bhi.n	800b99c <_realloc_r+0x34>
 800b996:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b99a:	d812      	bhi.n	800b9c2 <_realloc_r+0x5a>
 800b99c:	4621      	mov	r1, r4
 800b99e:	4640      	mov	r0, r8
 800b9a0:	f7ff fc36 	bl	800b210 <_malloc_r>
 800b9a4:	4605      	mov	r5, r0
 800b9a6:	2800      	cmp	r0, #0
 800b9a8:	d0ed      	beq.n	800b986 <_realloc_r+0x1e>
 800b9aa:	42bc      	cmp	r4, r7
 800b9ac:	4622      	mov	r2, r4
 800b9ae:	4631      	mov	r1, r6
 800b9b0:	bf28      	it	cs
 800b9b2:	463a      	movcs	r2, r7
 800b9b4:	f7ff ffca 	bl	800b94c <memcpy>
 800b9b8:	4631      	mov	r1, r6
 800b9ba:	4640      	mov	r0, r8
 800b9bc:	f7ff fbbc 	bl	800b138 <_free_r>
 800b9c0:	e7e1      	b.n	800b986 <_realloc_r+0x1e>
 800b9c2:	4635      	mov	r5, r6
 800b9c4:	e7df      	b.n	800b986 <_realloc_r+0x1e>

0800b9c6 <_malloc_usable_size_r>:
 800b9c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9ca:	1f18      	subs	r0, r3, #4
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	bfbc      	itt	lt
 800b9d0:	580b      	ldrlt	r3, [r1, r0]
 800b9d2:	18c0      	addlt	r0, r0, r3
 800b9d4:	4770      	bx	lr
	...

0800b9d8 <_init>:
 800b9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9da:	bf00      	nop
 800b9dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9de:	bc08      	pop	{r3}
 800b9e0:	469e      	mov	lr, r3
 800b9e2:	4770      	bx	lr

0800b9e4 <_fini>:
 800b9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9e6:	bf00      	nop
 800b9e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9ea:	bc08      	pop	{r3}
 800b9ec:	469e      	mov	lr, r3
 800b9ee:	4770      	bx	lr
