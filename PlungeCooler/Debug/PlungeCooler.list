
PlungeCooler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f7d4  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  0800fa88  0800fa88  0001fa88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fe6c  0800fe6c  0001fe6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fe74  0800fe74  0001fe74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fe78  0800fe78  0001fe78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  0800fe7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00061ea8  240001e0  0801005c  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24062088  0801005c  00022088  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001fd0f  00000000  00000000  00020251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003787  00000000  00000000  0003ff60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001968  00000000  00000000  000436e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000013eb  00000000  00000000  00045050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000343c1  00000000  00000000  0004643b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000220d9  00000000  00000000  0007a7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0015707a  00000000  00000000  0009c8d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007e50  00000000  00000000  001f3950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  001fb7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001e0 	.word	0x240001e0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800fa6c 	.word	0x0800fa6c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001e4 	.word	0x240001e4
 80002ec:	0800fa6c 	.word	0x0800fa6c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b970 	b.w	8000698 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9e08      	ldr	r6, [sp, #32]
 80003d6:	460d      	mov	r5, r1
 80003d8:	4604      	mov	r4, r0
 80003da:	460f      	mov	r7, r1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d14a      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4694      	mov	ip, r2
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0xe2>
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	b143      	cbz	r3, 80003fe <__udivmoddi4+0x2e>
 80003ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80003f0:	f1c3 0220 	rsb	r2, r3, #32
 80003f4:	409f      	lsls	r7, r3
 80003f6:	fa20 f202 	lsr.w	r2, r0, r2
 80003fa:	4317      	orrs	r7, r2
 80003fc:	409c      	lsls	r4, r3
 80003fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000402:	fa1f f58c 	uxth.w	r5, ip
 8000406:	fbb7 f1fe 	udiv	r1, r7, lr
 800040a:	0c22      	lsrs	r2, r4, #16
 800040c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000410:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000414:	fb01 f005 	mul.w	r0, r1, r5
 8000418:	4290      	cmp	r0, r2
 800041a:	d90a      	bls.n	8000432 <__udivmoddi4+0x62>
 800041c:	eb1c 0202 	adds.w	r2, ip, r2
 8000420:	f101 37ff 	add.w	r7, r1, #4294967295
 8000424:	f080 811c 	bcs.w	8000660 <__udivmoddi4+0x290>
 8000428:	4290      	cmp	r0, r2
 800042a:	f240 8119 	bls.w	8000660 <__udivmoddi4+0x290>
 800042e:	3902      	subs	r1, #2
 8000430:	4462      	add	r2, ip
 8000432:	1a12      	subs	r2, r2, r0
 8000434:	b2a4      	uxth	r4, r4
 8000436:	fbb2 f0fe 	udiv	r0, r2, lr
 800043a:	fb0e 2210 	mls	r2, lr, r0, r2
 800043e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000442:	fb00 f505 	mul.w	r5, r0, r5
 8000446:	42a5      	cmp	r5, r4
 8000448:	d90a      	bls.n	8000460 <__udivmoddi4+0x90>
 800044a:	eb1c 0404 	adds.w	r4, ip, r4
 800044e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000452:	f080 8107 	bcs.w	8000664 <__udivmoddi4+0x294>
 8000456:	42a5      	cmp	r5, r4
 8000458:	f240 8104 	bls.w	8000664 <__udivmoddi4+0x294>
 800045c:	4464      	add	r4, ip
 800045e:	3802      	subs	r0, #2
 8000460:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000464:	1b64      	subs	r4, r4, r5
 8000466:	2100      	movs	r1, #0
 8000468:	b11e      	cbz	r6, 8000472 <__udivmoddi4+0xa2>
 800046a:	40dc      	lsrs	r4, r3
 800046c:	2300      	movs	r3, #0
 800046e:	e9c6 4300 	strd	r4, r3, [r6]
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0xbc>
 800047a:	2e00      	cmp	r6, #0
 800047c:	f000 80ed 	beq.w	800065a <__udivmoddi4+0x28a>
 8000480:	2100      	movs	r1, #0
 8000482:	e9c6 0500 	strd	r0, r5, [r6]
 8000486:	4608      	mov	r0, r1
 8000488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048c:	fab3 f183 	clz	r1, r3
 8000490:	2900      	cmp	r1, #0
 8000492:	d149      	bne.n	8000528 <__udivmoddi4+0x158>
 8000494:	42ab      	cmp	r3, r5
 8000496:	d302      	bcc.n	800049e <__udivmoddi4+0xce>
 8000498:	4282      	cmp	r2, r0
 800049a:	f200 80f8 	bhi.w	800068e <__udivmoddi4+0x2be>
 800049e:	1a84      	subs	r4, r0, r2
 80004a0:	eb65 0203 	sbc.w	r2, r5, r3
 80004a4:	2001      	movs	r0, #1
 80004a6:	4617      	mov	r7, r2
 80004a8:	2e00      	cmp	r6, #0
 80004aa:	d0e2      	beq.n	8000472 <__udivmoddi4+0xa2>
 80004ac:	e9c6 4700 	strd	r4, r7, [r6]
 80004b0:	e7df      	b.n	8000472 <__udivmoddi4+0xa2>
 80004b2:	b902      	cbnz	r2, 80004b6 <__udivmoddi4+0xe6>
 80004b4:	deff      	udf	#255	; 0xff
 80004b6:	fab2 f382 	clz	r3, r2
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	f040 8090 	bne.w	80005e0 <__udivmoddi4+0x210>
 80004c0:	1a8a      	subs	r2, r1, r2
 80004c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c6:	fa1f fe8c 	uxth.w	lr, ip
 80004ca:	2101      	movs	r1, #1
 80004cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004d0:	fb07 2015 	mls	r0, r7, r5, r2
 80004d4:	0c22      	lsrs	r2, r4, #16
 80004d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004da:	fb0e f005 	mul.w	r0, lr, r5
 80004de:	4290      	cmp	r0, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x124>
 80004e2:	eb1c 0202 	adds.w	r2, ip, r2
 80004e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x122>
 80004ec:	4290      	cmp	r0, r2
 80004ee:	f200 80cb 	bhi.w	8000688 <__udivmoddi4+0x2b8>
 80004f2:	4645      	mov	r5, r8
 80004f4:	1a12      	subs	r2, r2, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000500:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000504:	fb0e fe00 	mul.w	lr, lr, r0
 8000508:	45a6      	cmp	lr, r4
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x14e>
 800050c:	eb1c 0404 	adds.w	r4, ip, r4
 8000510:	f100 32ff 	add.w	r2, r0, #4294967295
 8000514:	d202      	bcs.n	800051c <__udivmoddi4+0x14c>
 8000516:	45a6      	cmp	lr, r4
 8000518:	f200 80bb 	bhi.w	8000692 <__udivmoddi4+0x2c2>
 800051c:	4610      	mov	r0, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000526:	e79f      	b.n	8000468 <__udivmoddi4+0x98>
 8000528:	f1c1 0720 	rsb	r7, r1, #32
 800052c:	408b      	lsls	r3, r1
 800052e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000532:	ea4c 0c03 	orr.w	ip, ip, r3
 8000536:	fa05 f401 	lsl.w	r4, r5, r1
 800053a:	fa20 f307 	lsr.w	r3, r0, r7
 800053e:	40fd      	lsrs	r5, r7
 8000540:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000544:	4323      	orrs	r3, r4
 8000546:	fbb5 f8f9 	udiv	r8, r5, r9
 800054a:	fa1f fe8c 	uxth.w	lr, ip
 800054e:	fb09 5518 	mls	r5, r9, r8, r5
 8000552:	0c1c      	lsrs	r4, r3, #16
 8000554:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000558:	fb08 f50e 	mul.w	r5, r8, lr
 800055c:	42a5      	cmp	r5, r4
 800055e:	fa02 f201 	lsl.w	r2, r2, r1
 8000562:	fa00 f001 	lsl.w	r0, r0, r1
 8000566:	d90b      	bls.n	8000580 <__udivmoddi4+0x1b0>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000570:	f080 8088 	bcs.w	8000684 <__udivmoddi4+0x2b4>
 8000574:	42a5      	cmp	r5, r4
 8000576:	f240 8085 	bls.w	8000684 <__udivmoddi4+0x2b4>
 800057a:	f1a8 0802 	sub.w	r8, r8, #2
 800057e:	4464      	add	r4, ip
 8000580:	1b64      	subs	r4, r4, r5
 8000582:	b29d      	uxth	r5, r3
 8000584:	fbb4 f3f9 	udiv	r3, r4, r9
 8000588:	fb09 4413 	mls	r4, r9, r3, r4
 800058c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000590:	fb03 fe0e 	mul.w	lr, r3, lr
 8000594:	45a6      	cmp	lr, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x1da>
 8000598:	eb1c 0404 	adds.w	r4, ip, r4
 800059c:	f103 35ff 	add.w	r5, r3, #4294967295
 80005a0:	d26c      	bcs.n	800067c <__udivmoddi4+0x2ac>
 80005a2:	45a6      	cmp	lr, r4
 80005a4:	d96a      	bls.n	800067c <__udivmoddi4+0x2ac>
 80005a6:	3b02      	subs	r3, #2
 80005a8:	4464      	add	r4, ip
 80005aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ae:	fba3 9502 	umull	r9, r5, r3, r2
 80005b2:	eba4 040e 	sub.w	r4, r4, lr
 80005b6:	42ac      	cmp	r4, r5
 80005b8:	46c8      	mov	r8, r9
 80005ba:	46ae      	mov	lr, r5
 80005bc:	d356      	bcc.n	800066c <__udivmoddi4+0x29c>
 80005be:	d053      	beq.n	8000668 <__udivmoddi4+0x298>
 80005c0:	b156      	cbz	r6, 80005d8 <__udivmoddi4+0x208>
 80005c2:	ebb0 0208 	subs.w	r2, r0, r8
 80005c6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ca:	fa04 f707 	lsl.w	r7, r4, r7
 80005ce:	40ca      	lsrs	r2, r1
 80005d0:	40cc      	lsrs	r4, r1
 80005d2:	4317      	orrs	r7, r2
 80005d4:	e9c6 7400 	strd	r7, r4, [r6]
 80005d8:	4618      	mov	r0, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e0:	f1c3 0120 	rsb	r1, r3, #32
 80005e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005e8:	fa20 f201 	lsr.w	r2, r0, r1
 80005ec:	fa25 f101 	lsr.w	r1, r5, r1
 80005f0:	409d      	lsls	r5, r3
 80005f2:	432a      	orrs	r2, r5
 80005f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f8:	fa1f fe8c 	uxth.w	lr, ip
 80005fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000600:	fb07 1510 	mls	r5, r7, r0, r1
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800060a:	fb00 f50e 	mul.w	r5, r0, lr
 800060e:	428d      	cmp	r5, r1
 8000610:	fa04 f403 	lsl.w	r4, r4, r3
 8000614:	d908      	bls.n	8000628 <__udivmoddi4+0x258>
 8000616:	eb1c 0101 	adds.w	r1, ip, r1
 800061a:	f100 38ff 	add.w	r8, r0, #4294967295
 800061e:	d22f      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000620:	428d      	cmp	r5, r1
 8000622:	d92d      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000624:	3802      	subs	r0, #2
 8000626:	4461      	add	r1, ip
 8000628:	1b49      	subs	r1, r1, r5
 800062a:	b292      	uxth	r2, r2
 800062c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000630:	fb07 1115 	mls	r1, r7, r5, r1
 8000634:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000638:	fb05 f10e 	mul.w	r1, r5, lr
 800063c:	4291      	cmp	r1, r2
 800063e:	d908      	bls.n	8000652 <__udivmoddi4+0x282>
 8000640:	eb1c 0202 	adds.w	r2, ip, r2
 8000644:	f105 38ff 	add.w	r8, r5, #4294967295
 8000648:	d216      	bcs.n	8000678 <__udivmoddi4+0x2a8>
 800064a:	4291      	cmp	r1, r2
 800064c:	d914      	bls.n	8000678 <__udivmoddi4+0x2a8>
 800064e:	3d02      	subs	r5, #2
 8000650:	4462      	add	r2, ip
 8000652:	1a52      	subs	r2, r2, r1
 8000654:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000658:	e738      	b.n	80004cc <__udivmoddi4+0xfc>
 800065a:	4631      	mov	r1, r6
 800065c:	4630      	mov	r0, r6
 800065e:	e708      	b.n	8000472 <__udivmoddi4+0xa2>
 8000660:	4639      	mov	r1, r7
 8000662:	e6e6      	b.n	8000432 <__udivmoddi4+0x62>
 8000664:	4610      	mov	r0, r2
 8000666:	e6fb      	b.n	8000460 <__udivmoddi4+0x90>
 8000668:	4548      	cmp	r0, r9
 800066a:	d2a9      	bcs.n	80005c0 <__udivmoddi4+0x1f0>
 800066c:	ebb9 0802 	subs.w	r8, r9, r2
 8000670:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000674:	3b01      	subs	r3, #1
 8000676:	e7a3      	b.n	80005c0 <__udivmoddi4+0x1f0>
 8000678:	4645      	mov	r5, r8
 800067a:	e7ea      	b.n	8000652 <__udivmoddi4+0x282>
 800067c:	462b      	mov	r3, r5
 800067e:	e794      	b.n	80005aa <__udivmoddi4+0x1da>
 8000680:	4640      	mov	r0, r8
 8000682:	e7d1      	b.n	8000628 <__udivmoddi4+0x258>
 8000684:	46d0      	mov	r8, sl
 8000686:	e77b      	b.n	8000580 <__udivmoddi4+0x1b0>
 8000688:	3d02      	subs	r5, #2
 800068a:	4462      	add	r2, ip
 800068c:	e732      	b.n	80004f4 <__udivmoddi4+0x124>
 800068e:	4608      	mov	r0, r1
 8000690:	e70a      	b.n	80004a8 <__udivmoddi4+0xd8>
 8000692:	4464      	add	r4, ip
 8000694:	3802      	subs	r0, #2
 8000696:	e742      	b.n	800051e <__udivmoddi4+0x14e>

08000698 <__aeabi_idiv0>:
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <getCurrentTRH>:
#define SHT40_ADDRESS (0x44 << 1)
#include <stdint.h>
extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart3;

void getCurrentTRH (float *values) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b08c      	sub	sp, #48	; 0x30
 80006a0:	af02      	add	r7, sp, #8
 80006a2:	6078      	str	r0, [r7, #4]
        HAL_StatusTypeDef ret;
	uint8_t data_tx[1] = {0xFD};
 80006a4:	23fd      	movs	r3, #253	; 0xfd
 80006a6:	753b      	strb	r3, [r7, #20]
	uint8_t data_rx[6];
	ret = HAL_I2C_Master_Transmit(&hi2c1, SHT40_ADDRESS, data_tx, 1, 1000);
 80006a8:	f107 0214 	add.w	r2, r7, #20
 80006ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	2301      	movs	r3, #1
 80006b4:	2188      	movs	r1, #136	; 0x88
 80006b6:	483a      	ldr	r0, [pc, #232]	; (80007a0 <getCurrentTRH+0x104>)
 80006b8:	f004 fa18 	bl	8004aec <HAL_I2C_Master_Transmit>
 80006bc:	4603      	mov	r3, r0
 80006be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if ( ret != HAL_OK ) {
 80006c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d003      	beq.n	80006d2 <getCurrentTRH+0x36>
	  printf("Error Tx\r\n");
 80006ca:	4836      	ldr	r0, [pc, #216]	; (80007a4 <getCurrentTRH+0x108>)
 80006cc:	f00d f8ee 	bl	800d8ac <puts>

			 values[0] = -45 + 175 * t_ticks/65535;
			 values[1] = -6 + 125 * rh_ticks/65535;
		 }
	}
}
 80006d0:	e061      	b.n	8000796 <getCurrentTRH+0xfa>
		 HAL_Delay(10);
 80006d2:	200a      	movs	r0, #10
 80006d4:	f001 ff4a 	bl	800256c <HAL_Delay>
		 ret =  HAL_I2C_Master_Receive(&hi2c1, SHT40_ADDRESS, (uint8_t*)&data_rx, 6,1000);
 80006d8:	f107 020c 	add.w	r2, r7, #12
 80006dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	2306      	movs	r3, #6
 80006e4:	2188      	movs	r1, #136	; 0x88
 80006e6:	482e      	ldr	r0, [pc, #184]	; (80007a0 <getCurrentTRH+0x104>)
 80006e8:	f004 faf4 	bl	8004cd4 <HAL_I2C_Master_Receive>
 80006ec:	4603      	mov	r3, r0
 80006ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		 if ( ret != HAL_OK ) {
 80006f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d003      	beq.n	8000702 <getCurrentTRH+0x66>
			 printf("Error Rx\r\n");
 80006fa:	482b      	ldr	r0, [pc, #172]	; (80007a8 <getCurrentTRH+0x10c>)
 80006fc:	f00d f8d6 	bl	800d8ac <puts>
}
 8000700:	e049      	b.n	8000796 <getCurrentTRH+0xfa>
			 for(int i = 0; i < 6 ; i++){
 8000702:	2300      	movs	r3, #0
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
 8000706:	e00c      	b.n	8000722 <getCurrentTRH+0x86>
				 printf("data_rx[%i] = %u \n",i,data_rx[i]);
 8000708:	f107 020c 	add.w	r2, r7, #12
 800070c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070e:	4413      	add	r3, r2
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000716:	4825      	ldr	r0, [pc, #148]	; (80007ac <getCurrentTRH+0x110>)
 8000718:	f00d f862 	bl	800d7e0 <iprintf>
			 for(int i = 0; i < 6 ; i++){
 800071c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071e:	3301      	adds	r3, #1
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
 8000722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000724:	2b05      	cmp	r3, #5
 8000726:	ddef      	ble.n	8000708 <getCurrentTRH+0x6c>
			 float t_ticks = data_rx[0] * 256 + data_rx[1];
 8000728:	7b3b      	ldrb	r3, [r7, #12]
 800072a:	021b      	lsls	r3, r3, #8
 800072c:	7b7a      	ldrb	r2, [r7, #13]
 800072e:	4413      	add	r3, r2
 8000730:	ee07 3a90 	vmov	s15, r3
 8000734:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000738:	edc7 7a07 	vstr	s15, [r7, #28]
			 float rh_ticks = data_rx[3] * 256 + data_rx[4];
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	021b      	lsls	r3, r3, #8
 8000740:	7c3a      	ldrb	r2, [r7, #16]
 8000742:	4413      	add	r3, r2
 8000744:	ee07 3a90 	vmov	s15, r3
 8000748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800074c:	edc7 7a06 	vstr	s15, [r7, #24]
			 values[0] = -45 + 175 * t_ticks/65535;
 8000750:	edd7 7a07 	vldr	s15, [r7, #28]
 8000754:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80007b0 <getCurrentTRH+0x114>
 8000758:	ee27 7a87 	vmul.f32	s14, s15, s14
 800075c:	eddf 6a15 	vldr	s13, [pc, #84]	; 80007b4 <getCurrentTRH+0x118>
 8000760:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000764:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80007b8 <getCurrentTRH+0x11c>
 8000768:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	edc3 7a00 	vstr	s15, [r3]
			 values[1] = -6 + 125 * rh_ticks/65535;
 8000772:	edd7 7a06 	vldr	s15, [r7, #24]
 8000776:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80007bc <getCurrentTRH+0x120>
 800077a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800077e:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80007b4 <getCurrentTRH+0x118>
 8000782:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	3304      	adds	r3, #4
 800078a:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800078e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000792:	edc3 7a00 	vstr	s15, [r3]
}
 8000796:	bf00      	nop
 8000798:	3728      	adds	r7, #40	; 0x28
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	24000260 	.word	0x24000260
 80007a4:	0800fa88 	.word	0x0800fa88
 80007a8:	0800fa94 	.word	0x0800fa94
 80007ac:	0800faa0 	.word	0x0800faa0
 80007b0:	432f0000 	.word	0x432f0000
 80007b4:	477fff00 	.word	0x477fff00
 80007b8:	42340000 	.word	0x42340000
 80007bc:	42fa0000 	.word	0x42fa0000

080007c0 <map>:

int map(int x, int in_min, int in_max, int out_min, int out_max)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
 80007cc:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80007ce:	68fa      	ldr	r2, [r7, #12]
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	1ad3      	subs	r3, r2, r3
 80007d4:	69b9      	ldr	r1, [r7, #24]
 80007d6:	683a      	ldr	r2, [r7, #0]
 80007d8:	1a8a      	subs	r2, r1, r2
 80007da:	fb03 f202 	mul.w	r2, r3, r2
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	1acb      	subs	r3, r1, r3
 80007e4:	fb92 f2f3 	sdiv	r2, r2, r3
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	4413      	add	r3, r2
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3714      	adds	r7, #20
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000802:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000806:	2b00      	cmp	r3, #0
 8000808:	db0b      	blt.n	8000822 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800080a:	88fb      	ldrh	r3, [r7, #6]
 800080c:	f003 021f 	and.w	r2, r3, #31
 8000810:	4907      	ldr	r1, [pc, #28]	; (8000830 <__NVIC_EnableIRQ+0x38>)
 8000812:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000816:	095b      	lsrs	r3, r3, #5
 8000818:	2001      	movs	r0, #1
 800081a:	fa00 f202 	lsl.w	r2, r0, r2
 800081e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	e000e100 	.word	0xe000e100

08000834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	6039      	str	r1, [r7, #0]
 800083e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000840:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000844:	2b00      	cmp	r3, #0
 8000846:	db0a      	blt.n	800085e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	b2da      	uxtb	r2, r3
 800084c:	490c      	ldr	r1, [pc, #48]	; (8000880 <__NVIC_SetPriority+0x4c>)
 800084e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000852:	0112      	lsls	r2, r2, #4
 8000854:	b2d2      	uxtb	r2, r2
 8000856:	440b      	add	r3, r1
 8000858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800085c:	e00a      	b.n	8000874 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4908      	ldr	r1, [pc, #32]	; (8000884 <__NVIC_SetPriority+0x50>)
 8000864:	88fb      	ldrh	r3, [r7, #6]
 8000866:	f003 030f 	and.w	r3, r3, #15
 800086a:	3b04      	subs	r3, #4
 800086c:	0112      	lsls	r2, r2, #4
 800086e:	b2d2      	uxtb	r2, r2
 8000870:	440b      	add	r3, r1
 8000872:	761a      	strb	r2, [r3, #24]
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	e000e100 	.word	0xe000e100
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <HAL_UART_RxCpltCallback>:
void bad(void) {
	HAL_UART_Transmit(&huart3, tx_bad, 3, HAL_MAX_DELAY);
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
    rxBuffer[rxIndex] = received_character[0];
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <HAL_UART_RxCpltCallback+0x54>)
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	461a      	mov	r2, r3
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <HAL_UART_RxCpltCallback+0x58>)
 8000898:	7819      	ldrb	r1, [r3, #0]
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <HAL_UART_RxCpltCallback+0x5c>)
 800089c:	5499      	strb	r1, [r3, r2]
	rxIndex++;
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <HAL_UART_RxCpltCallback+0x54>)
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	3301      	adds	r3, #1
 80008a4:	b29a      	uxth	r2, r3
 80008a6:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <HAL_UART_RxCpltCallback+0x54>)
 80008a8:	801a      	strh	r2, [r3, #0]

	if (received_character[0] == '\n' || received_character[0] == '\r') { //ie end of message, stop receiving. 
 80008aa:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <HAL_UART_RxCpltCallback+0x58>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b0a      	cmp	r3, #10
 80008b0:	d003      	beq.n	80008ba <HAL_UART_RxCpltCallback+0x32>
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <HAL_UART_RxCpltCallback+0x58>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b0d      	cmp	r3, #13
 80008b8:	d105      	bne.n	80008c6 <HAL_UART_RxCpltCallback+0x3e>
    	rxIndex = 0;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <HAL_UART_RxCpltCallback+0x54>)
 80008bc:	2200      	movs	r2, #0
 80008be:	801a      	strh	r2, [r3, #0]
    	rx_handle();
 80008c0:	f000 f814 	bl	80008ec <rx_handle>
 80008c4:	e005      	b.n	80008d2 <HAL_UART_RxCpltCallback+0x4a>
    } else {
        HAL_UART_Receive_IT(&huart3, received_character, 1);
 80008c6:	2201      	movs	r2, #1
 80008c8:	4905      	ldr	r1, [pc, #20]	; (80008e0 <HAL_UART_RxCpltCallback+0x58>)
 80008ca:	4807      	ldr	r0, [pc, #28]	; (80008e8 <HAL_UART_RxCpltCallback+0x60>)
 80008cc:	f009 fe3e 	bl	800a54c <HAL_UART_Receive_IT>
    }
}
 80008d0:	bf00      	nop
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	24061f14 	.word	0x24061f14
 80008e0:	24061f18 	.word	0x24061f18
 80008e4:	24061eb0 	.word	0x24061eb0
 80008e8:	24000398 	.word	0x24000398

080008ec <rx_handle>:

void rx_handle(void) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, val);
 80008f2:	4b7f      	ldr	r3, [pc, #508]	; (8000af0 <rx_handle+0x204>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	461a      	mov	r2, r3
 80008f8:	2102      	movs	r1, #2
 80008fa:	487e      	ldr	r0, [pc, #504]	; (8000af4 <rx_handle+0x208>)
 80008fc:	f004 f84c 	bl	8004998 <HAL_GPIO_WritePin>
	if(val)
 8000900:	4b7b      	ldr	r3, [pc, #492]	; (8000af0 <rx_handle+0x204>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d003      	beq.n	8000910 <rx_handle+0x24>
		val = 0;
 8000908:	4b79      	ldr	r3, [pc, #484]	; (8000af0 <rx_handle+0x204>)
 800090a:	2200      	movs	r2, #0
 800090c:	701a      	strb	r2, [r3, #0]
 800090e:	e002      	b.n	8000916 <rx_handle+0x2a>
	else
		val = 1;
 8000910:	4b77      	ldr	r3, [pc, #476]	; (8000af0 <rx_handle+0x204>)
 8000912:	2201      	movs	r2, #1
 8000914:	701a      	strb	r2, [r3, #0]
	//sprintf(num, "RX0: %d\r\n", rxBuffer[0]);
	//HAL_UART_Transmit(&huart3, (uint8_t*)num, strlen(num), HAL_MAX_DELAY);
	switch(rxBuffer[0]) {
 8000916:	4b78      	ldr	r3, [pc, #480]	; (8000af8 <rx_handle+0x20c>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	3b32      	subs	r3, #50	; 0x32
 800091c:	2b05      	cmp	r3, #5
 800091e:	f200 80dd 	bhi.w	8000adc <rx_handle+0x1f0>
 8000922:	a201      	add	r2, pc, #4	; (adr r2, 8000928 <rx_handle+0x3c>)
 8000924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000928:	08000941 	.word	0x08000941
 800092c:	08000a8f 	.word	0x08000a8f
 8000930:	08000987 	.word	0x08000987
 8000934:	08000ad3 	.word	0x08000ad3
 8000938:	080009f5 	.word	0x080009f5
 800093c:	08000a0f 	.word	0x08000a0f
		case PLUNGE: ;

			/* reset tracking variables */
			log_position = 0;
 8000940:	4b6e      	ldr	r3, [pc, #440]	; (8000afc <rx_handle+0x210>)
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
			memset(posLog, 0, sizeof(posLog));
 8000946:	4a6e      	ldr	r2, [pc, #440]	; (8000b00 <rx_handle+0x214>)
 8000948:	2100      	movs	r1, #0
 800094a:	486e      	ldr	r0, [pc, #440]	; (8000b04 <rx_handle+0x218>)
 800094c:	f00d f8ae 	bl	800daac <memset>
      memset(thermoLog, 0, sizeof(thermoLog));
 8000950:	4a6b      	ldr	r2, [pc, #428]	; (8000b00 <rx_handle+0x214>)
 8000952:	2100      	movs	r1, #0
 8000954:	486c      	ldr	r0, [pc, #432]	; (8000b08 <rx_handle+0x21c>)
 8000956:	f00d f8a9 	bl	800daac <memset>

			TIM2->CR1  |=  TIM_CR1_CEN; 	//start counter for encoder 
 800095a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6013      	str	r3, [r2, #0]

			TIM5->CR1  |= TIM_CR1_CEN; // Start TIM5 to commence data collection
 800096a:	4b68      	ldr	r3, [pc, #416]	; (8000b0c <rx_handle+0x220>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a67      	ldr	r2, [pc, #412]	; (8000b0c <rx_handle+0x220>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6013      	str	r3, [r2, #0]

      HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000976:	f04f 33ff 	mov.w	r3, #4294967295
 800097a:	2203      	movs	r2, #3
 800097c:	4964      	ldr	r1, [pc, #400]	; (8000b10 <rx_handle+0x224>)
 800097e:	4865      	ldr	r0, [pc, #404]	; (8000b14 <rx_handle+0x228>)
 8000980:	f009 fd56 	bl	800a430 <HAL_UART_Transmit>

			break;
 8000984:	e0aa      	b.n	8000adc <rx_handle+0x1f0>

    case FETCH: ;
      HAL_ADC_Start(&hadc1);
 8000986:	4864      	ldr	r0, [pc, #400]	; (8000b18 <rx_handle+0x22c>)
 8000988:	f002 f950 	bl	8002c2c <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800098c:	f04f 31ff 	mov.w	r1, #4294967295
 8000990:	4861      	ldr	r0, [pc, #388]	; (8000b18 <rx_handle+0x22c>)
 8000992:	f002 fa05 	bl	8002da0 <HAL_ADC_PollForConversion>
      nudge_temp = HAL_ADC_GetValue(&hadc1);
 8000996:	4860      	ldr	r0, [pc, #384]	; (8000b18 <rx_handle+0x22c>)
 8000998:	f002 fada 	bl	8002f50 <HAL_ADC_GetValue>
 800099c:	4603      	mov	r3, r0
 800099e:	b29a      	uxth	r2, r3
 80009a0:	4b5e      	ldr	r3, [pc, #376]	; (8000b1c <rx_handle+0x230>)
 80009a2:	801a      	strh	r2, [r3, #0]
      char msg[10];
      sprintf(msg, "%u\n", nudge_temp);
 80009a4:	4b5d      	ldr	r3, [pc, #372]	; (8000b1c <rx_handle+0x230>)
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	461a      	mov	r2, r3
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	495c      	ldr	r1, [pc, #368]	; (8000b20 <rx_handle+0x234>)
 80009b0:	4618      	mov	r0, r3
 80009b2:	f00c ff83 	bl	800d8bc <siprintf>
      sprintf(msg, "%u\n", nudge_temp);
 80009b6:	4b59      	ldr	r3, [pc, #356]	; (8000b1c <rx_handle+0x230>)
 80009b8:	881b      	ldrh	r3, [r3, #0]
 80009ba:	461a      	mov	r2, r3
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4957      	ldr	r1, [pc, #348]	; (8000b20 <rx_handle+0x234>)
 80009c2:	4618      	mov	r0, r3
 80009c4:	f00c ff7a 	bl	800d8bc <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fcdf 	bl	8000390 <strlen>
 80009d2:	4603      	mov	r3, r0
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	f107 011c 	add.w	r1, r7, #28
 80009da:	f04f 33ff 	mov.w	r3, #4294967295
 80009de:	484d      	ldr	r0, [pc, #308]	; (8000b14 <rx_handle+0x228>)
 80009e0:	f009 fd26 	bl	800a430 <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 80009e4:	f04f 33ff 	mov.w	r3, #4294967295
 80009e8:	2203      	movs	r2, #3
 80009ea:	4949      	ldr	r1, [pc, #292]	; (8000b10 <rx_handle+0x224>)
 80009ec:	4849      	ldr	r0, [pc, #292]	; (8000b14 <rx_handle+0x228>)
 80009ee:	f009 fd1f 	bl	800a430 <HAL_UART_Transmit>

      break;
 80009f2:	e073      	b.n	8000adc <rx_handle+0x1f0>

    case UPDATERH: ; 
      uint8_t ReceivedRh = rxBuffer[1]; 
 80009f4:	4b40      	ldr	r3, [pc, #256]	; (8000af8 <rx_handle+0x20c>)
 80009f6:	785b      	ldrb	r3, [r3, #1]
 80009f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if (ReceivedRh >= 0 && ReceivedRh <= 100){
 80009fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a00:	2b64      	cmp	r3, #100	; 0x64
 8000a02:	d86a      	bhi.n	8000ada <rx_handle+0x1ee>
        RhSetpoint = ReceivedRh;
 8000a04:	4a47      	ldr	r2, [pc, #284]	; (8000b24 <rx_handle+0x238>)
 8000a06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a0a:	7013      	strb	r3, [r2, #0]
      }
      break; 
 8000a0c:	e065      	b.n	8000ada <rx_handle+0x1ee>

    case GETTRH: ; 
      //consider not having first ack
      char Tmsg[10];
      sprintf(Tmsg, "%.2f\n", SensorValues[0]);
 8000a0e:	4b46      	ldr	r3, [pc, #280]	; (8000b28 <rx_handle+0x23c>)
 8000a10:	edd3 7a00 	vldr	s15, [r3]
 8000a14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a18:	f107 0010 	add.w	r0, r7, #16
 8000a1c:	ec53 2b17 	vmov	r2, r3, d7
 8000a20:	4942      	ldr	r1, [pc, #264]	; (8000b2c <rx_handle+0x240>)
 8000a22:	f00c ff4b 	bl	800d8bc <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*)Tmsg, strlen(Tmsg), HAL_MAX_DELAY);
 8000a26:	f107 0310 	add.w	r3, r7, #16
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fcb0 	bl	8000390 <strlen>
 8000a30:	4603      	mov	r3, r0
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	f107 0110 	add.w	r1, r7, #16
 8000a38:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3c:	4835      	ldr	r0, [pc, #212]	; (8000b14 <rx_handle+0x228>)
 8000a3e:	f009 fcf7 	bl	800a430 <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000a42:	f04f 33ff 	mov.w	r3, #4294967295
 8000a46:	2203      	movs	r2, #3
 8000a48:	4931      	ldr	r1, [pc, #196]	; (8000b10 <rx_handle+0x224>)
 8000a4a:	4832      	ldr	r0, [pc, #200]	; (8000b14 <rx_handle+0x228>)
 8000a4c:	f009 fcf0 	bl	800a430 <HAL_UART_Transmit>
      char RHmsg[10];
      sprintf(RHmsg, "%.2f\n", SensorValues[1]);
 8000a50:	4b35      	ldr	r3, [pc, #212]	; (8000b28 <rx_handle+0x23c>)
 8000a52:	edd3 7a01 	vldr	s15, [r3, #4]
 8000a56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a5a:	1d38      	adds	r0, r7, #4
 8000a5c:	ec53 2b17 	vmov	r2, r3, d7
 8000a60:	4932      	ldr	r1, [pc, #200]	; (8000b2c <rx_handle+0x240>)
 8000a62:	f00c ff2b 	bl	800d8bc <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*)RHmsg, strlen(RHmsg), HAL_MAX_DELAY);
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fc91 	bl	8000390 <strlen>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	1d39      	adds	r1, r7, #4
 8000a74:	f04f 33ff 	mov.w	r3, #4294967295
 8000a78:	4826      	ldr	r0, [pc, #152]	; (8000b14 <rx_handle+0x228>)
 8000a7a:	f009 fcd9 	bl	800a430 <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a82:	2203      	movs	r2, #3
 8000a84:	4922      	ldr	r1, [pc, #136]	; (8000b10 <rx_handle+0x224>)
 8000a86:	4823      	ldr	r0, [pc, #140]	; (8000b14 <rx_handle+0x228>)
 8000a88:	f009 fcd2 	bl	800a430 <HAL_UART_Transmit>

      break; 
 8000a8c:	e026      	b.n	8000adc <rx_handle+0x1f0>

    case END: ;
	  TIM5->CR1  |= TIM_CR1_UDIS;	// make sure update is disabled
 8000a8e:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <rx_handle+0x220>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a1e      	ldr	r2, [pc, #120]	; (8000b0c <rx_handle+0x220>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	6013      	str	r3, [r2, #0]
	  TIM5->DIER &=  ~TIM_DIER_UIE; 	// update interrupt disabled
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <rx_handle+0x220>)
 8000a9c:	68db      	ldr	r3, [r3, #12]
 8000a9e:	4a1b      	ldr	r2, [pc, #108]	; (8000b0c <rx_handle+0x220>)
 8000aa0:	f023 0301 	bic.w	r3, r3, #1
 8000aa4:	60d3      	str	r3, [r2, #12]
	  TIM2->CR1 &= ~TIM_CR1_CEN;		// disable tim2
 8000aa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ab0:	f023 0301 	bic.w	r3, r3, #1
 8000ab4:	6013      	str	r3, [r2, #0]
	  TIM5->CR1  &= ~TIM_CR1_CEN; 	// disable tim5
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <rx_handle+0x220>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a14      	ldr	r2, [pc, #80]	; (8000b0c <rx_handle+0x220>)
 8000abc:	f023 0301 	bic.w	r3, r3, #1
 8000ac0:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac6:	2203      	movs	r2, #3
 8000ac8:	4911      	ldr	r1, [pc, #68]	; (8000b10 <rx_handle+0x224>)
 8000aca:	4812      	ldr	r0, [pc, #72]	; (8000b14 <rx_handle+0x228>)
 8000acc:	f009 fcb0 	bl	800a430 <HAL_UART_Transmit>
	  break;
 8000ad0:	e004      	b.n	8000adc <rx_handle+0x1f0>

    case SEND: ;
    	plunge_done_flag = 1;
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <rx_handle+0x244>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	701a      	strb	r2, [r3, #0]
 8000ad8:	e000      	b.n	8000adc <rx_handle+0x1f0>
      break; 
 8000ada:	bf00      	nop


//	char b[] = "done handling\r\n";
//	HAL_UART_Transmit(&huart3, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);

    HAL_UART_Receive_IT(&huart3, received_character, 1);
 8000adc:	2201      	movs	r2, #1
 8000ade:	4915      	ldr	r1, [pc, #84]	; (8000b34 <rx_handle+0x248>)
 8000ae0:	480c      	ldr	r0, [pc, #48]	; (8000b14 <rx_handle+0x228>)
 8000ae2:	f009 fd33 	bl	800a54c <HAL_UART_Receive_IT>
}
 8000ae6:	bf00      	nop
 8000ae8:	3728      	adds	r7, #40	; 0x28
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	24000000 	.word	0x24000000
 8000af4:	58021000 	.word	0x58021000
 8000af8:	24061eb0 	.word	0x24061eb0
 8000afc:	24061eac 	.word	0x24061eac
 8000b00:	00030d40 	.word	0x00030d40
 8000b04:	2400042c 	.word	0x2400042c
 8000b08:	2403116c 	.word	0x2403116c
 8000b0c:	40000c00 	.word	0x40000c00
 8000b10:	24000004 	.word	0x24000004
 8000b14:	24000398 	.word	0x24000398
 8000b18:	240001fc 	.word	0x240001fc
 8000b1c:	24061f1a 	.word	0x24061f1a
 8000b20:	0800fab4 	.word	0x0800fab4
 8000b24:	24000007 	.word	0x24000007
 8000b28:	24061f1c 	.word	0x24061f1c
 8000b2c:	0800fab8 	.word	0x0800fab8
 8000b30:	24061f19 	.word	0x24061f19
 8000b34:	24061f18 	.word	0x24061f18

08000b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b0b1      	sub	sp, #196	; 0xc4
 8000b3c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b3e:	f001 fc83 	bl	8002448 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b42:	f000 f9c7 	bl	8000ed4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b46:	f000 fc8d 	bl	8001464 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b4a:	f000 faf1 	bl	8001130 <MX_TIM2_Init>
  MX_USB_OTG_HS_USB_Init();
 8000b4e:	f000 fc81 	bl	8001454 <MX_USB_OTG_HS_USB_Init>
  MX_USART3_UART_Init();
 8000b52:	f000 fc33 	bl	80013bc <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8000b56:	f000 fbe3 	bl	8001320 <MX_TIM5_Init>
  MX_ADC1_Init();
 8000b5a:	f000 fa31 	bl	8000fc0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000b5e:	f000 faa7 	bl	80010b0 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000b62:	f000 fb51 	bl	8001208 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* configuring encoder counter */
  TIM2->CR1  &= ~TIM_CR1_CEN;
 8000b66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b70:	f023 0301 	bic.w	r3, r3, #1
 8000b74:	6013      	str	r3, [r2, #0]

  TIM2->CNT   =  100;				// 100 included here and in ARR to make sure it doesnt immediately underflow if it vibrates up
 8000b76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b7a:	2264      	movs	r2, #100	; 0x64
 8000b7c:	625a      	str	r2, [r3, #36]	; 0x24
  TIM2->ARR 	= 40000; 		// Counter will not roll over in entire plunge path, will be stopped and reset by usart interupt handler. 
 8000b7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b82:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000b86:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM2->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000b88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b8c:	691b      	ldr	r3, [r3, #16]
 8000b8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b92:	f023 0301 	bic.w	r3, r3, #1
 8000b96:	6113      	str	r3, [r2, #16]
  TIM2->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000b98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ba2:	f023 0302 	bic.w	r3, r3, #2
 8000ba6:	6013      	str	r3, [r2, #0]
  TIM2->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000ba8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	60d3      	str	r3, [r2, #12]
  TIM2->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000bb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc6:	6013      	str	r3, [r2, #0]

    /* configuring data logging timer */
  TIM5->CR1  &= ~TIM_CR1_CEN; 
 8000bc8:	4bb3      	ldr	r3, [pc, #716]	; (8000e98 <main+0x360>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4ab2      	ldr	r2, [pc, #712]	; (8000e98 <main+0x360>)
 8000bce:	f023 0301 	bic.w	r3, r3, #1
 8000bd2:	6013      	str	r3, [r2, #0]

  TIM5-> CNT  = 100;				//
 8000bd4:	4bb0      	ldr	r3, [pc, #704]	; (8000e98 <main+0x360>)
 8000bd6:	2264      	movs	r2, #100	; 0x64
 8000bd8:	625a      	str	r2, [r3, #36]	; 0x24
  TIM5->ARR 	= CLOCKS_PER_LOG; 	// check positione interval
 8000bda:	4baf      	ldr	r3, [pc, #700]	; (8000e98 <main+0x360>)
 8000bdc:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8000be0:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM5->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000be2:	4bad      	ldr	r3, [pc, #692]	; (8000e98 <main+0x360>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4aac      	ldr	r2, [pc, #688]	; (8000e98 <main+0x360>)
 8000be8:	f023 0302 	bic.w	r3, r3, #2
 8000bec:	6013      	str	r3, [r2, #0]
  TIM5->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000bee:	4baa      	ldr	r3, [pc, #680]	; (8000e98 <main+0x360>)
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	4aa9      	ldr	r2, [pc, #676]	; (8000e98 <main+0x360>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	60d3      	str	r3, [r2, #12]
  TIM5->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000bfa:	4ba7      	ldr	r3, [pc, #668]	; (8000e98 <main+0x360>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4aa6      	ldr	r2, [pc, #664]	; (8000e98 <main+0x360>)
 8000c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c04:	6013      	str	r3, [r2, #0]
  TIM5->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000c06:	4ba4      	ldr	r3, [pc, #656]	; (8000e98 <main+0x360>)
 8000c08:	691b      	ldr	r3, [r3, #16]
 8000c0a:	4aa3      	ldr	r2, [pc, #652]	; (8000e98 <main+0x360>)
 8000c0c:	f023 0301 	bic.w	r3, r3, #1
 8000c10:	6113      	str	r3, [r2, #16]


  HAL_UART_Receive_IT(&huart3, received_character, 1); // initialize interrupts
 8000c12:	2201      	movs	r2, #1
 8000c14:	49a1      	ldr	r1, [pc, #644]	; (8000e9c <main+0x364>)
 8000c16:	48a2      	ldr	r0, [pc, #648]	; (8000ea0 <main+0x368>)
 8000c18:	f009 fc98 	bl	800a54c <HAL_UART_Receive_IT>

//  char msg[] = "program start \r\n";
//  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

  // TIM2 for encoder tick counting
  NVIC_SetPriority(TIM2_IRQn, 1); // Braking is priority as long as dispense isnt happening
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	201c      	movs	r0, #28
 8000c20:	f7ff fe08 	bl	8000834 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000c24:	201c      	movs	r0, #28
 8000c26:	f7ff fde7 	bl	80007f8 <__NVIC_EnableIRQ>

  // TIM5 for logkeeping and speed calculations and TIM4 setup
  NVIC_SetPriority(TIM5_IRQn, 2); // Log keeping should be interruptable
 8000c2a:	2102      	movs	r1, #2
 8000c2c:	2032      	movs	r0, #50	; 0x32
 8000c2e:	f7ff fe01 	bl	8000834 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 8000c32:	2032      	movs	r0, #50	; 0x32
 8000c34:	f7ff fde0 	bl	80007f8 <__NVIC_EnableIRQ>

  PID_TypeDef TPID; 
  double Input, Output, InitialSetpoint = DEFAULTRH; 
 8000c38:	f04f 0200 	mov.w	r2, #0
 8000c3c:	4b99      	ldr	r3, [pc, #612]	; (8000ea4 <main+0x36c>)
 8000c3e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  double Kp = KP, Ki = KI, Kd = KD; 
 8000c42:	f04f 0200 	mov.w	r2, #0
 8000c46:	4b98      	ldr	r3, [pc, #608]	; (8000ea8 <main+0x370>)
 8000c48:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 8000c4c:	f04f 0200 	mov.w	r2, #0
 8000c50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c54:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 8000c58:	f04f 0200 	mov.w	r2, #0
 8000c5c:	f04f 0300 	mov.w	r3, #0
 8000c60:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
  PID(&TPID, &Input, &Output, &InitialSetpoint, Kp, Ki, Kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8000c64:	f107 0310 	add.w	r3, r7, #16
 8000c68:	f107 0218 	add.w	r2, r7, #24
 8000c6c:	f107 0120 	add.w	r1, r7, #32
 8000c70:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000c74:	2400      	movs	r4, #0
 8000c76:	9401      	str	r4, [sp, #4]
 8000c78:	2401      	movs	r4, #1
 8000c7a:	9400      	str	r4, [sp, #0]
 8000c7c:	ed97 2b26 	vldr	d2, [r7, #152]	; 0x98
 8000c80:	ed97 1b28 	vldr	d1, [r7, #160]	; 0xa0
 8000c84:	ed97 0b2a 	vldr	d0, [r7, #168]	; 0xa8
 8000c88:	f000 fd4a 	bl	8001720 <PID>
  PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8000c8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c90:	2101      	movs	r1, #1
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 fe60 	bl	8001958 <PID_SetMode>
  PID_SetOutputLimits(&TPID, 1, 100);
 8000c98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c9c:	ed9f 1b7c 	vldr	d1, [pc, #496]	; 8000e90 <main+0x358>
 8000ca0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 fe75 	bl	8001994 <PID_SetOutputLimits>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1) {
    getCurrentTRH(SensorValues);
 8000caa:	4880      	ldr	r0, [pc, #512]	; (8000eac <main+0x374>)
 8000cac:	f7ff fcf6 	bl	800069c <getCurrentTRH>
    Input = SensorValues[1]; 
 8000cb0:	4b7e      	ldr	r3, [pc, #504]	; (8000eac <main+0x374>)
 8000cb2:	edd3 7a01 	vldr	s15, [r3, #4]
 8000cb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cba:	ed87 7b08 	vstr	d7, [r7, #32]
    PID_Compute(&TPID);
 8000cbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 fd78 	bl	80017b8 <PID_Compute>
    nitrogenPWM = map(Output, 0, 100, 255, 110);
 8000cc8:	ed97 7b06 	vldr	d7, [r7, #24]
 8000ccc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000cd0:	236e      	movs	r3, #110	; 0x6e
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	23ff      	movs	r3, #255	; 0xff
 8000cd6:	2264      	movs	r2, #100	; 0x64
 8000cd8:	2100      	movs	r1, #0
 8000cda:	ee17 0a90 	vmov	r0, s15
 8000cde:	f7ff fd6f 	bl	80007c0 <map>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	4a72      	ldr	r2, [pc, #456]	; (8000eb0 <main+0x378>)
 8000ce6:	6013      	str	r3, [r2, #0]
    humidAirPWM = map(Output, 0, 100, 95, 255);
 8000ce8:	ed97 7b06 	vldr	d7, [r7, #24]
 8000cec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000cf0:	23ff      	movs	r3, #255	; 0xff
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	235f      	movs	r3, #95	; 0x5f
 8000cf6:	2264      	movs	r2, #100	; 0x64
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	ee17 0a90 	vmov	r0, s15
 8000cfe:	f7ff fd5f 	bl	80007c0 <map>
 8000d02:	4603      	mov	r3, r0
 8000d04:	4a6b      	ldr	r2, [pc, #428]	; (8000eb4 <main+0x37c>)
 8000d06:	6013      	str	r3, [r2, #0]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, nitrogenPWM);
 8000d08:	4b69      	ldr	r3, [pc, #420]	; (8000eb0 <main+0x378>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b6a      	ldr	r3, [pc, #424]	; (8000eb8 <main+0x380>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, humidAirPWM);
 8000d12:	4b68      	ldr	r3, [pc, #416]	; (8000eb4 <main+0x37c>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	4b68      	ldr	r3, [pc, #416]	; (8000eb8 <main+0x380>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	639a      	str	r2, [r3, #56]	; 0x38
	  if(plunge_done_flag) {
 8000d1c:	4b67      	ldr	r3, [pc, #412]	; (8000ebc <main+0x384>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d0c2      	beq.n	8000caa <main+0x172>
		  char msg[10];
		  for(int i=0 ; i<log_position; i++) {
 8000d24:	2300      	movs	r3, #0
 8000d26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000d2a:	e01b      	b.n	8000d64 <main+0x22c>
			  sprintf(msg, "%u\n", posLog[i]);
 8000d2c:	4a64      	ldr	r2, [pc, #400]	; (8000ec0 <main+0x388>)
 8000d2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000d32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d36:	461a      	mov	r2, r3
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	4962      	ldr	r1, [pc, #392]	; (8000ec4 <main+0x38c>)
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f00c fdbd 	bl	800d8bc <siprintf>
			  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fb23 	bl	8000390 <strlen>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	1d39      	adds	r1, r7, #4
 8000d50:	f04f 33ff 	mov.w	r3, #4294967295
 8000d54:	4852      	ldr	r0, [pc, #328]	; (8000ea0 <main+0x368>)
 8000d56:	f009 fb6b 	bl	800a430 <HAL_UART_Transmit>
		  for(int i=0 ; i<log_position; i++) {
 8000d5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000d5e:	3301      	adds	r3, #1
 8000d60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000d64:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000d68:	4b57      	ldr	r3, [pc, #348]	; (8000ec8 <main+0x390>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d3dd      	bcc.n	8000d2c <main+0x1f4>
		  }
		  HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000d70:	f04f 33ff 	mov.w	r3, #4294967295
 8000d74:	2203      	movs	r2, #3
 8000d76:	4955      	ldr	r1, [pc, #340]	; (8000ecc <main+0x394>)
 8000d78:	4849      	ldr	r0, [pc, #292]	; (8000ea0 <main+0x368>)
 8000d7a:	f009 fb59 	bl	800a430 <HAL_UART_Transmit>

      for(int i=0 ; i<log_position; i++) {
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000d84:	e01b      	b.n	8000dbe <main+0x286>
			  sprintf(msg, "%u\n", thermoLog[i]);
 8000d86:	4a52      	ldr	r2, [pc, #328]	; (8000ed0 <main+0x398>)
 8000d88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000d8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d90:	461a      	mov	r2, r3
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	494b      	ldr	r1, [pc, #300]	; (8000ec4 <main+0x38c>)
 8000d96:	4618      	mov	r0, r3
 8000d98:	f00c fd90 	bl	800d8bc <siprintf>
			  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff faf6 	bl	8000390 <strlen>
 8000da4:	4603      	mov	r3, r0
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	1d39      	adds	r1, r7, #4
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dae:	483c      	ldr	r0, [pc, #240]	; (8000ea0 <main+0x368>)
 8000db0:	f009 fb3e 	bl	800a430 <HAL_UART_Transmit>
      for(int i=0 ; i<log_position; i++) {
 8000db4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000db8:	3301      	adds	r3, #1
 8000dba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000dbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000dc2:	4b41      	ldr	r3, [pc, #260]	; (8000ec8 <main+0x390>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d3dd      	bcc.n	8000d86 <main+0x24e>
		  }

      //Prepare timers for the next plunge, do not enable yet 
      TIM2->CR1  &= ~TIM_CR1_CEN;
 8000dca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dd4:	f023 0301 	bic.w	r3, r3, #1
 8000dd8:	6013      	str	r3, [r2, #0]

      TIM2->CNT   =  100;				// 100 included here and in ARR to make sure it doesnt immediately underflow if it vibrates up
 8000dda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dde:	2264      	movs	r2, #100	; 0x64
 8000de0:	625a      	str	r2, [r3, #36]	; 0x24
      TIM2->ARR 	= 40000; 		// Counter will not roll over in entire plunge path, will be stopped and reset by usart interupt handler. 
 8000de2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000de6:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000dea:	62da      	str	r2, [r3, #44]	; 0x2c
      TIM2->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000dec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000df0:	691b      	ldr	r3, [r3, #16]
 8000df2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000df6:	f023 0301 	bic.w	r3, r3, #1
 8000dfa:	6113      	str	r3, [r2, #16]
      TIM2->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000dfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e06:	f023 0302 	bic.w	r3, r3, #2
 8000e0a:	6013      	str	r3, [r2, #0]
      TIM2->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000e0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	60d3      	str	r3, [r2, #12]
      TIM2->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000e1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e2a:	6013      	str	r3, [r2, #0]

        /* configuring data logging timer */
      TIM5->CR1  &= ~TIM_CR1_CEN; 
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <main+0x360>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a19      	ldr	r2, [pc, #100]	; (8000e98 <main+0x360>)
 8000e32:	f023 0301 	bic.w	r3, r3, #1
 8000e36:	6013      	str	r3, [r2, #0]

      TIM5-> CNT  = 100;				
 8000e38:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <main+0x360>)
 8000e3a:	2264      	movs	r2, #100	; 0x64
 8000e3c:	625a      	str	r2, [r3, #36]	; 0x24
      TIM5->ARR 	= CLOCKS_PER_LOG; 	// check positione interval
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <main+0x360>)
 8000e40:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8000e44:	62da      	str	r2, [r3, #44]	; 0x2c
      TIM5->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000e46:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <main+0x360>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a13      	ldr	r2, [pc, #76]	; (8000e98 <main+0x360>)
 8000e4c:	f023 0302 	bic.w	r3, r3, #2
 8000e50:	6013      	str	r3, [r2, #0]
      TIM5->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <main+0x360>)
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	4a10      	ldr	r2, [pc, #64]	; (8000e98 <main+0x360>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	60d3      	str	r3, [r2, #12]
      TIM5->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <main+0x360>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a0d      	ldr	r2, [pc, #52]	; (8000e98 <main+0x360>)
 8000e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e68:	6013      	str	r3, [r2, #0]
      TIM5->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <main+0x360>)
 8000e6c:	691b      	ldr	r3, [r3, #16]
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <main+0x360>)
 8000e70:	f023 0301 	bic.w	r3, r3, #1
 8000e74:	6113      	str	r3, [r2, #16]

      HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000e76:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	4913      	ldr	r1, [pc, #76]	; (8000ecc <main+0x394>)
 8000e7e:	4808      	ldr	r0, [pc, #32]	; (8000ea0 <main+0x368>)
 8000e80:	f009 fad6 	bl	800a430 <HAL_UART_Transmit>
		  plunge_done_flag = 0;
 8000e84:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <main+0x384>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	701a      	strb	r2, [r3, #0]
    getCurrentTRH(SensorValues);
 8000e8a:	e70e      	b.n	8000caa <main+0x172>
 8000e8c:	f3af 8000 	nop.w
 8000e90:	00000000 	.word	0x00000000
 8000e94:	40590000 	.word	0x40590000
 8000e98:	40000c00 	.word	0x40000c00
 8000e9c:	24061f18 	.word	0x24061f18
 8000ea0:	24000398 	.word	0x24000398
 8000ea4:	40590000 	.word	0x40590000
 8000ea8:	40180000 	.word	0x40180000
 8000eac:	24061f1c 	.word	0x24061f1c
 8000eb0:	24061f24 	.word	0x24061f24
 8000eb4:	24061f28 	.word	0x24061f28
 8000eb8:	24000300 	.word	0x24000300
 8000ebc:	24061f19 	.word	0x24061f19
 8000ec0:	2400042c 	.word	0x2400042c
 8000ec4:	0800fab4 	.word	0x0800fab4
 8000ec8:	24061eac 	.word	0x24061eac
 8000ecc:	24000004 	.word	0x24000004
 8000ed0:	2403116c 	.word	0x2403116c

08000ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b09c      	sub	sp, #112	; 0x70
 8000ed8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ede:	224c      	movs	r2, #76	; 0x4c
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f00c fde2 	bl	800daac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	2220      	movs	r2, #32
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f00c fddc 	bl	800daac <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000ef4:	4b30      	ldr	r3, [pc, #192]	; (8000fb8 <SystemClock_Config+0xe4>)
 8000ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8000efa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000efe:	2004      	movs	r0, #4
 8000f00:	f004 fb08 	bl	8005514 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f04:	2300      	movs	r3, #0
 8000f06:	603b      	str	r3, [r7, #0]
 8000f08:	4b2c      	ldr	r3, [pc, #176]	; (8000fbc <SystemClock_Config+0xe8>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4a2b      	ldr	r2, [pc, #172]	; (8000fbc <SystemClock_Config+0xe8>)
 8000f0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f12:	6193      	str	r3, [r2, #24]
 8000f14:	4b29      	ldr	r3, [pc, #164]	; (8000fbc <SystemClock_Config+0xe8>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f1c:	603b      	str	r3, [r7, #0]
 8000f1e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f20:	bf00      	nop
 8000f22:	4b26      	ldr	r3, [pc, #152]	; (8000fbc <SystemClock_Config+0xe8>)
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f2e:	d1f8      	bne.n	8000f22 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000f30:	2321      	movs	r3, #33	; 0x21
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f34:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f38:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f42:	2302      	movs	r3, #2
 8000f44:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f46:	2301      	movs	r3, #1
 8000f48:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000f4a:	2318      	movs	r3, #24
 8000f4c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f52:	2304      	movs	r3, #4
 8000f54:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f56:	2302      	movs	r3, #2
 8000f58:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f5a:	230c      	movs	r3, #12
 8000f5c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f004 fb2c 	bl	80055c8 <HAL_RCC_OscConfig>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f76:	f000 fb8f 	bl	8001698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f7a:	233f      	movs	r3, #63	; 0x3f
 8000f7c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f004 ff44 	bl	8005e2c <HAL_RCC_ClockConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000faa:	f000 fb75 	bl	8001698 <Error_Handler>
  }
}
 8000fae:	bf00      	nop
 8000fb0:	3770      	adds	r7, #112	; 0x70
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	58024400 	.word	0x58024400
 8000fbc:	58024800 	.word	0x58024800

08000fc0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fc6:	f107 031c 	add.w	r3, r7, #28
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
 8000fe0:	615a      	str	r2, [r3, #20]
 8000fe2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fe4:	4b2f      	ldr	r3, [pc, #188]	; (80010a4 <MX_ADC1_Init+0xe4>)
 8000fe6:	4a30      	ldr	r2, [pc, #192]	; (80010a8 <MX_ADC1_Init+0xe8>)
 8000fe8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fea:	4b2e      	ldr	r3, [pc, #184]	; (80010a4 <MX_ADC1_Init+0xe4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000ff0:	4b2c      	ldr	r3, [pc, #176]	; (80010a4 <MX_ADC1_Init+0xe4>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ff6:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <MX_ADC1_Init+0xe4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ffc:	4b29      	ldr	r3, [pc, #164]	; (80010a4 <MX_ADC1_Init+0xe4>)
 8000ffe:	2204      	movs	r2, #4
 8001000:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001002:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <MX_ADC1_Init+0xe4>)
 8001004:	2200      	movs	r2, #0
 8001006:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001008:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <MX_ADC1_Init+0xe4>)
 800100a:	2200      	movs	r2, #0
 800100c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800100e:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <MX_ADC1_Init+0xe4>)
 8001010:	2201      	movs	r2, #1
 8001012:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001014:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <MX_ADC1_Init+0xe4>)
 8001016:	2200      	movs	r2, #0
 8001018:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800101a:	4b22      	ldr	r3, [pc, #136]	; (80010a4 <MX_ADC1_Init+0xe4>)
 800101c:	2200      	movs	r2, #0
 800101e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001020:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <MX_ADC1_Init+0xe4>)
 8001022:	2200      	movs	r2, #0
 8001024:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001026:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <MX_ADC1_Init+0xe4>)
 8001028:	2200      	movs	r2, #0
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <MX_ADC1_Init+0xe4>)
 800102e:	2200      	movs	r2, #0
 8001030:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001032:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <MX_ADC1_Init+0xe4>)
 8001034:	2200      	movs	r2, #0
 8001036:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001038:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <MX_ADC1_Init+0xe4>)
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001040:	4818      	ldr	r0, [pc, #96]	; (80010a4 <MX_ADC1_Init+0xe4>)
 8001042:	f001 fc99 	bl	8002978 <HAL_ADC_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800104c:	f000 fb24 	bl	8001698 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	4619      	mov	r1, r3
 800105a:	4812      	ldr	r0, [pc, #72]	; (80010a4 <MX_ADC1_Init+0xe4>)
 800105c:	f002 fbdc 	bl	8003818 <HAL_ADCEx_MultiModeConfigChannel>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001066:	f000 fb17 	bl	8001698 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <MX_ADC1_Init+0xec>)
 800106c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800106e:	2306      	movs	r3, #6
 8001070:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001076:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800107a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800107c:	2304      	movs	r3, #4
 800107e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001084:	2300      	movs	r3, #0
 8001086:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001088:	463b      	mov	r3, r7
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_ADC1_Init+0xe4>)
 800108e:	f001 ff6d 	bl	8002f6c <HAL_ADC_ConfigChannel>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001098:	f000 fafe 	bl	8001698 <Error_Handler>
  /* USER CODE BEGIN ADC1_Init 2 */
 // HAL_ADCEx_Calibration_Start(&hadc1,
		  //ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
  /* USER CODE END ADC1_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	3728      	adds	r7, #40	; 0x28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	240001fc 	.word	0x240001fc
 80010a8:	40022000 	.word	0x40022000
 80010ac:	14f00020 	.word	0x14f00020

080010b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010b4:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <MX_I2C1_Init+0x74>)
 80010b6:	4a1c      	ldr	r2, [pc, #112]	; (8001128 <MX_I2C1_Init+0x78>)
 80010b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B0DCFB;
 80010ba:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <MX_I2C1_Init+0x74>)
 80010bc:	4a1b      	ldr	r2, [pc, #108]	; (800112c <MX_I2C1_Init+0x7c>)
 80010be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010c0:	4b18      	ldr	r3, [pc, #96]	; (8001124 <MX_I2C1_Init+0x74>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c6:	4b17      	ldr	r3, [pc, #92]	; (8001124 <MX_I2C1_Init+0x74>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010cc:	4b15      	ldr	r3, [pc, #84]	; (8001124 <MX_I2C1_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010d2:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_I2C1_Init+0x74>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <MX_I2C1_Init+0x74>)
 80010da:	2200      	movs	r2, #0
 80010dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_I2C1_Init+0x74>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_I2C1_Init+0x74>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010ea:	480e      	ldr	r0, [pc, #56]	; (8001124 <MX_I2C1_Init+0x74>)
 80010ec:	f003 fc6e 	bl	80049cc <HAL_I2C_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010f6:	f000 facf 	bl	8001698 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010fa:	2100      	movs	r1, #0
 80010fc:	4809      	ldr	r0, [pc, #36]	; (8001124 <MX_I2C1_Init+0x74>)
 80010fe:	f004 f971 	bl	80053e4 <HAL_I2CEx_ConfigAnalogFilter>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001108:	f000 fac6 	bl	8001698 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800110c:	2100      	movs	r1, #0
 800110e:	4805      	ldr	r0, [pc, #20]	; (8001124 <MX_I2C1_Init+0x74>)
 8001110:	f004 f9b3 	bl	800547a <HAL_I2CEx_ConfigDigitalFilter>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800111a:	f000 fabd 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	24000260 	.word	0x24000260
 8001128:	40005400 	.word	0x40005400
 800112c:	10b0dcfb 	.word	0x10b0dcfb

08001130 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08c      	sub	sp, #48	; 0x30
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001136:	f107 030c 	add.w	r3, r7, #12
 800113a:	2224      	movs	r2, #36	; 0x24
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f00c fcb4 	bl	800daac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001144:	463b      	mov	r3, r7
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800114e:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <MX_TIM2_Init+0xd4>)
 8001150:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001154:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001156:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <MX_TIM2_Init+0xd4>)
 8001158:	2200      	movs	r2, #0
 800115a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115c:	4b29      	ldr	r3, [pc, #164]	; (8001204 <MX_TIM2_Init+0xd4>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001162:	4b28      	ldr	r3, [pc, #160]	; (8001204 <MX_TIM2_Init+0xd4>)
 8001164:	f04f 32ff 	mov.w	r2, #4294967295
 8001168:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116a:	4b26      	ldr	r3, [pc, #152]	; (8001204 <MX_TIM2_Init+0xd4>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001170:	4b24      	ldr	r3, [pc, #144]	; (8001204 <MX_TIM2_Init+0xd4>)
 8001172:	2200      	movs	r2, #0
 8001174:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001176:	2301      	movs	r3, #1
 8001178:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800117e:	2301      	movs	r3, #1
 8001180:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800118a:	2300      	movs	r3, #0
 800118c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800118e:	2301      	movs	r3, #1
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	4619      	mov	r1, r3
 80011a0:	4818      	ldr	r0, [pc, #96]	; (8001204 <MX_TIM2_Init+0xd4>)
 80011a2:	f008 f811 	bl	80091c8 <HAL_TIM_Encoder_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80011ac:	f000 fa74 	bl	8001698 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b0:	2300      	movs	r3, #0
 80011b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011b8:	463b      	mov	r3, r7
 80011ba:	4619      	mov	r1, r3
 80011bc:	4811      	ldr	r0, [pc, #68]	; (8001204 <MX_TIM2_Init+0xd4>)
 80011be:	f009 f83b 	bl	800a238 <HAL_TIMEx_MasterConfigSynchronization>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80011c8:	f000 fa66 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
	TIM2->CR1  |= TIM_CR1_UDIS;	// make sure update is enabled
 80011cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011d6:	f043 0302 	orr.w	r3, r3, #2
 80011da:	6013      	str	r3, [r2, #0]
	TIM2->DIER &=  ~TIM_DIER_UIE; 	// update interrupt enabled
 80011dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011e6:	f023 0301 	bic.w	r3, r3, #1
 80011ea:	60d3      	str	r3, [r2, #12]
	TIM2->CR1 &= ~TIM_CR1_CEN;
 80011ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011f6:	f023 0301 	bic.w	r3, r3, #1
 80011fa:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	3730      	adds	r7, #48	; 0x30
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	240002b4 	.word	0x240002b4

08001208 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08e      	sub	sp, #56	; 0x38
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001228:	463b      	mov	r3, r7
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
 8001234:	611a      	str	r2, [r3, #16]
 8001236:	615a      	str	r2, [r3, #20]
 8001238:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800123a:	4b37      	ldr	r3, [pc, #220]	; (8001318 <MX_TIM3_Init+0x110>)
 800123c:	4a37      	ldr	r2, [pc, #220]	; (800131c <MX_TIM3_Init+0x114>)
 800123e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6;
 8001240:	4b35      	ldr	r3, [pc, #212]	; (8001318 <MX_TIM3_Init+0x110>)
 8001242:	2206      	movs	r2, #6
 8001244:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001246:	4b34      	ldr	r3, [pc, #208]	; (8001318 <MX_TIM3_Init+0x110>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 800124c:	4b32      	ldr	r3, [pc, #200]	; (8001318 <MX_TIM3_Init+0x110>)
 800124e:	22ff      	movs	r2, #255	; 0xff
 8001250:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001252:	4b31      	ldr	r3, [pc, #196]	; (8001318 <MX_TIM3_Init+0x110>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001258:	4b2f      	ldr	r3, [pc, #188]	; (8001318 <MX_TIM3_Init+0x110>)
 800125a:	2200      	movs	r2, #0
 800125c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800125e:	482e      	ldr	r0, [pc, #184]	; (8001318 <MX_TIM3_Init+0x110>)
 8001260:	f007 fd7a 	bl	8008d58 <HAL_TIM_Base_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800126a:	f000 fa15 	bl	8001698 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800126e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001274:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001278:	4619      	mov	r1, r3
 800127a:	4827      	ldr	r0, [pc, #156]	; (8001318 <MX_TIM3_Init+0x110>)
 800127c:	f008 fa7e 	bl	800977c <HAL_TIM_ConfigClockSource>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001286:	f000 fa07 	bl	8001698 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800128a:	4823      	ldr	r0, [pc, #140]	; (8001318 <MX_TIM3_Init+0x110>)
 800128c:	f007 fe2c 	bl	8008ee8 <HAL_TIM_PWM_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001296:	f000 f9ff 	bl	8001698 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129e:	2300      	movs	r3, #0
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	4619      	mov	r1, r3
 80012a8:	481b      	ldr	r0, [pc, #108]	; (8001318 <MX_TIM3_Init+0x110>)
 80012aa:	f008 ffc5 	bl	800a238 <HAL_TIMEx_MasterConfigSynchronization>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80012b4:	f000 f9f0 	bl	8001698 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b8:	2360      	movs	r3, #96	; 0x60
 80012ba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	2200      	movs	r2, #0
 80012cc:	4619      	mov	r1, r3
 80012ce:	4812      	ldr	r0, [pc, #72]	; (8001318 <MX_TIM3_Init+0x110>)
 80012d0:	f008 f940 	bl	8009554 <HAL_TIM_PWM_ConfigChannel>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80012da:	f000 f9dd 	bl	8001698 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012de:	463b      	mov	r3, r7
 80012e0:	2204      	movs	r2, #4
 80012e2:	4619      	mov	r1, r3
 80012e4:	480c      	ldr	r0, [pc, #48]	; (8001318 <MX_TIM3_Init+0x110>)
 80012e6:	f008 f935 	bl	8009554 <HAL_TIM_PWM_ConfigChannel>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80012f0:	f000 f9d2 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start(&htim3);
 80012f4:	4808      	ldr	r0, [pc, #32]	; (8001318 <MX_TIM3_Init+0x110>)
 80012f6:	f007 fd87 	bl	8008e08 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80012fa:	2100      	movs	r1, #0
 80012fc:	4806      	ldr	r0, [pc, #24]	; (8001318 <MX_TIM3_Init+0x110>)
 80012fe:	f007 fe55 	bl	8008fac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001302:	2104      	movs	r1, #4
 8001304:	4804      	ldr	r0, [pc, #16]	; (8001318 <MX_TIM3_Init+0x110>)
 8001306:	f007 fe51 	bl	8008fac <HAL_TIM_PWM_Start>
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800130a:	4803      	ldr	r0, [pc, #12]	; (8001318 <MX_TIM3_Init+0x110>)
 800130c:	f000 fe04 	bl	8001f18 <HAL_TIM_MspPostInit>
}
 8001310:	bf00      	nop
 8001312:	3738      	adds	r7, #56	; 0x38
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	24000300 	.word	0x24000300
 800131c:	40000400 	.word	0x40000400

08001320 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001326:	f107 0310 	add.w	r3, r7, #16
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800133e:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <MX_TIM5_Init+0x94>)
 8001340:	4a1d      	ldr	r2, [pc, #116]	; (80013b8 <MX_TIM5_Init+0x98>)
 8001342:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001344:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <MX_TIM5_Init+0x94>)
 8001346:	2200      	movs	r2, #0
 8001348:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134a:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <MX_TIM5_Init+0x94>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001350:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <MX_TIM5_Init+0x94>)
 8001352:	f04f 32ff 	mov.w	r2, #4294967295
 8001356:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001358:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <MX_TIM5_Init+0x94>)
 800135a:	2200      	movs	r2, #0
 800135c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <MX_TIM5_Init+0x94>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001364:	4813      	ldr	r0, [pc, #76]	; (80013b4 <MX_TIM5_Init+0x94>)
 8001366:	f007 fcf7 	bl	8008d58 <HAL_TIM_Base_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001370:	f000 f992 	bl	8001698 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001378:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800137a:	f107 0310 	add.w	r3, r7, #16
 800137e:	4619      	mov	r1, r3
 8001380:	480c      	ldr	r0, [pc, #48]	; (80013b4 <MX_TIM5_Init+0x94>)
 8001382:	f008 f9fb 	bl	800977c <HAL_TIM_ConfigClockSource>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800138c:	f000 f984 	bl	8001698 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001390:	2300      	movs	r3, #0
 8001392:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	4619      	mov	r1, r3
 800139c:	4805      	ldr	r0, [pc, #20]	; (80013b4 <MX_TIM5_Init+0x94>)
 800139e:	f008 ff4b 	bl	800a238 <HAL_TIMEx_MasterConfigSynchronization>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80013a8:	f000 f976 	bl	8001698 <Error_Handler>
//  TIM5->DIER |= TIM_DIER_UIE; // Enable update interrupt
//  TIM5->ARR = ENC_DMA_POLL_FREQ; // Timebase

  /* USER CODE END TIM5_Init 2 */

}
 80013ac:	bf00      	nop
 80013ae:	3720      	adds	r7, #32
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	2400034c 	.word	0x2400034c
 80013b8:	40000c00 	.word	0x40000c00

080013bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013c0:	4b22      	ldr	r3, [pc, #136]	; (800144c <MX_USART3_UART_Init+0x90>)
 80013c2:	4a23      	ldr	r2, [pc, #140]	; (8001450 <MX_USART3_UART_Init+0x94>)
 80013c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013c6:	4b21      	ldr	r3, [pc, #132]	; (800144c <MX_USART3_UART_Init+0x90>)
 80013c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013ce:	4b1f      	ldr	r3, [pc, #124]	; (800144c <MX_USART3_UART_Init+0x90>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013d4:	4b1d      	ldr	r3, [pc, #116]	; (800144c <MX_USART3_UART_Init+0x90>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013da:	4b1c      	ldr	r3, [pc, #112]	; (800144c <MX_USART3_UART_Init+0x90>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013e0:	4b1a      	ldr	r3, [pc, #104]	; (800144c <MX_USART3_UART_Init+0x90>)
 80013e2:	220c      	movs	r2, #12
 80013e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e6:	4b19      	ldr	r3, [pc, #100]	; (800144c <MX_USART3_UART_Init+0x90>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ec:	4b17      	ldr	r3, [pc, #92]	; (800144c <MX_USART3_UART_Init+0x90>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013f2:	4b16      	ldr	r3, [pc, #88]	; (800144c <MX_USART3_UART_Init+0x90>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013f8:	4b14      	ldr	r3, [pc, #80]	; (800144c <MX_USART3_UART_Init+0x90>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013fe:	4b13      	ldr	r3, [pc, #76]	; (800144c <MX_USART3_UART_Init+0x90>)
 8001400:	2200      	movs	r2, #0
 8001402:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001404:	4811      	ldr	r0, [pc, #68]	; (800144c <MX_USART3_UART_Init+0x90>)
 8001406:	f008 ffc3 	bl	800a390 <HAL_UART_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001410:	f000 f942 	bl	8001698 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001414:	2100      	movs	r1, #0
 8001416:	480d      	ldr	r0, [pc, #52]	; (800144c <MX_USART3_UART_Init+0x90>)
 8001418:	f00b fc1b 	bl	800cc52 <HAL_UARTEx_SetTxFifoThreshold>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001422:	f000 f939 	bl	8001698 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001426:	2100      	movs	r1, #0
 8001428:	4808      	ldr	r0, [pc, #32]	; (800144c <MX_USART3_UART_Init+0x90>)
 800142a:	f00b fc50 	bl	800ccce <HAL_UARTEx_SetRxFifoThreshold>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001434:	f000 f930 	bl	8001698 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001438:	4804      	ldr	r0, [pc, #16]	; (800144c <MX_USART3_UART_Init+0x90>)
 800143a:	f00b fbd1 	bl	800cbe0 <HAL_UARTEx_DisableFifoMode>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001444:	f000 f928 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	24000398 	.word	0x24000398
 8001450:	40004800 	.word	0x40004800

08001454 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08e      	sub	sp, #56	; 0x38
 8001468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800147a:	4b80      	ldr	r3, [pc, #512]	; (800167c <MX_GPIO_Init+0x218>)
 800147c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001480:	4a7e      	ldr	r2, [pc, #504]	; (800167c <MX_GPIO_Init+0x218>)
 8001482:	f043 0304 	orr.w	r3, r3, #4
 8001486:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800148a:	4b7c      	ldr	r3, [pc, #496]	; (800167c <MX_GPIO_Init+0x218>)
 800148c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	623b      	str	r3, [r7, #32]
 8001496:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001498:	4b78      	ldr	r3, [pc, #480]	; (800167c <MX_GPIO_Init+0x218>)
 800149a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800149e:	4a77      	ldr	r2, [pc, #476]	; (800167c <MX_GPIO_Init+0x218>)
 80014a0:	f043 0320 	orr.w	r3, r3, #32
 80014a4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014a8:	4b74      	ldr	r3, [pc, #464]	; (800167c <MX_GPIO_Init+0x218>)
 80014aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014ae:	f003 0320 	and.w	r3, r3, #32
 80014b2:	61fb      	str	r3, [r7, #28]
 80014b4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b6:	4b71      	ldr	r3, [pc, #452]	; (800167c <MX_GPIO_Init+0x218>)
 80014b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014bc:	4a6f      	ldr	r2, [pc, #444]	; (800167c <MX_GPIO_Init+0x218>)
 80014be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014c6:	4b6d      	ldr	r3, [pc, #436]	; (800167c <MX_GPIO_Init+0x218>)
 80014c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d0:	61bb      	str	r3, [r7, #24]
 80014d2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d4:	4b69      	ldr	r3, [pc, #420]	; (800167c <MX_GPIO_Init+0x218>)
 80014d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014da:	4a68      	ldr	r2, [pc, #416]	; (800167c <MX_GPIO_Init+0x218>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014e4:	4b65      	ldr	r3, [pc, #404]	; (800167c <MX_GPIO_Init+0x218>)
 80014e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	4b62      	ldr	r3, [pc, #392]	; (800167c <MX_GPIO_Init+0x218>)
 80014f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014f8:	4a60      	ldr	r2, [pc, #384]	; (800167c <MX_GPIO_Init+0x218>)
 80014fa:	f043 0302 	orr.w	r3, r3, #2
 80014fe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001502:	4b5e      	ldr	r3, [pc, #376]	; (800167c <MX_GPIO_Init+0x218>)
 8001504:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001510:	4b5a      	ldr	r3, [pc, #360]	; (800167c <MX_GPIO_Init+0x218>)
 8001512:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001516:	4a59      	ldr	r2, [pc, #356]	; (800167c <MX_GPIO_Init+0x218>)
 8001518:	f043 0308 	orr.w	r3, r3, #8
 800151c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001520:	4b56      	ldr	r3, [pc, #344]	; (800167c <MX_GPIO_Init+0x218>)
 8001522:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800152e:	4b53      	ldr	r3, [pc, #332]	; (800167c <MX_GPIO_Init+0x218>)
 8001530:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001534:	4a51      	ldr	r2, [pc, #324]	; (800167c <MX_GPIO_Init+0x218>)
 8001536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800153a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800153e:	4b4f      	ldr	r3, [pc, #316]	; (800167c <MX_GPIO_Init+0x218>)
 8001540:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800154c:	4b4b      	ldr	r3, [pc, #300]	; (800167c <MX_GPIO_Init+0x218>)
 800154e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001552:	4a4a      	ldr	r2, [pc, #296]	; (800167c <MX_GPIO_Init+0x218>)
 8001554:	f043 0310 	orr.w	r3, r3, #16
 8001558:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800155c:	4b47      	ldr	r3, [pc, #284]	; (800167c <MX_GPIO_Init+0x218>)
 800155e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001562:	f003 0310 	and.w	r3, r3, #16
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001570:	4843      	ldr	r0, [pc, #268]	; (8001680 <MX_GPIO_Init+0x21c>)
 8001572:	f003 fa11 	bl	8004998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800157c:	4841      	ldr	r0, [pc, #260]	; (8001684 <MX_GPIO_Init+0x220>)
 800157e:	f003 fa0b 	bl	8004998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	2102      	movs	r1, #2
 8001586:	4840      	ldr	r0, [pc, #256]	; (8001688 <MX_GPIO_Init+0x224>)
 8001588:	f003 fa06 	bl	8004998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800158c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001592:	2300      	movs	r3, #0
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800159a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159e:	4619      	mov	r1, r3
 80015a0:	483a      	ldr	r0, [pc, #232]	; (800168c <MX_GPIO_Init+0x228>)
 80015a2:	f003 f849 	bl	8004638 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80015a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80015b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015bc:	4619      	mov	r1, r3
 80015be:	4830      	ldr	r0, [pc, #192]	; (8001680 <MX_GPIO_Init+0x21c>)
 80015c0:	f003 f83a 	bl	8004638 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80015c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80015d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015da:	4619      	mov	r1, r3
 80015dc:	4829      	ldr	r0, [pc, #164]	; (8001684 <MX_GPIO_Init+0x220>)
 80015de:	f003 f82b 	bl	8004638 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80015f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f4:	4619      	mov	r1, r3
 80015f6:	4826      	ldr	r0, [pc, #152]	; (8001690 <MX_GPIO_Init+0x22c>)
 80015f8:	f003 f81e 	bl	8004638 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80015fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001602:	2300      	movs	r3, #0
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800160a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160e:	4619      	mov	r1, r3
 8001610:	4820      	ldr	r0, [pc, #128]	; (8001694 <MX_GPIO_Init+0x230>)
 8001612:	f003 f811 	bl	8004638 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001616:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001628:	230a      	movs	r3, #10
 800162a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800162c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001630:	4619      	mov	r1, r3
 8001632:	4818      	ldr	r0, [pc, #96]	; (8001694 <MX_GPIO_Init+0x230>)
 8001634:	f003 f800 	bl	8004638 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001638:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	2300      	movs	r3, #0
 8001648:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164e:	4619      	mov	r1, r3
 8001650:	4810      	ldr	r0, [pc, #64]	; (8001694 <MX_GPIO_Init+0x230>)
 8001652:	f002 fff1 	bl	8004638 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001656:	2302      	movs	r3, #2
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165a:	2301      	movs	r3, #1
 800165c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2300      	movs	r3, #0
 8001664:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166a:	4619      	mov	r1, r3
 800166c:	4806      	ldr	r0, [pc, #24]	; (8001688 <MX_GPIO_Init+0x224>)
 800166e:	f002 ffe3 	bl	8004638 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001672:	bf00      	nop
 8001674:	3738      	adds	r7, #56	; 0x38
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	58024400 	.word	0x58024400
 8001680:	58021400 	.word	0x58021400
 8001684:	58020400 	.word	0x58020400
 8001688:	58021000 	.word	0x58021000
 800168c:	58020800 	.word	0x58020800
 8001690:	58021800 	.word	0x58021800
 8001694:	58020000 	.word	0x58020000

08001698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800169c:	b672      	cpsid	i
}
 800169e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <Error_Handler+0x8>

080016a2 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c0:	6879      	ldr	r1, [r7, #4]
 80016c2:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80016d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80016d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016da:	dd06      	ble.n	80016ea <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 80016e8:	e011      	b.n	800170e <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80016f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80016fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fe:	d400      	bmi.n	8001702 <PID_Init+0x60>
}
 8001700:	e005      	b.n	800170e <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001708:	6879      	ldr	r1, [r7, #4]
 800170a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	0000      	movs	r0, r0
 800171c:	0000      	movs	r0, r0
	...

08001720 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08a      	sub	sp, #40	; 0x28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6278      	str	r0, [r7, #36]	; 0x24
 8001728:	6239      	str	r1, [r7, #32]
 800172a:	61fa      	str	r2, [r7, #28]
 800172c:	61bb      	str	r3, [r7, #24]
 800172e:	ed87 0b04 	vstr	d0, [r7, #16]
 8001732:	ed87 1b02 	vstr	d1, [r7, #8]
 8001736:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	69fa      	ldr	r2, [r7, #28]
 800173e:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	6a3a      	ldr	r2, [r7, #32]
 8001744:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	2200      	movs	r2, #0
 8001750:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8001752:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80017a8 <PID+0x88>
 8001756:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80017b0 <PID+0x90>
 800175a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800175c:	f000 f91a 	bl	8001994 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	2264      	movs	r2, #100	; 0x64
 8001764:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 8001766:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800176a:	4619      	mov	r1, r3
 800176c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800176e:	f000 fa13 	bl	8001b98 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8001772:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001776:	4619      	mov	r1, r3
 8001778:	ed97 2b00 	vldr	d2, [r7]
 800177c:	ed97 1b02 	vldr	d1, [r7, #8]
 8001780:	ed97 0b04 	vldr	d0, [r7, #16]
 8001784:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001786:	f000 f977 	bl	8001a78 <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 800178a:	f000 fee3 	bl	8002554 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	1ad2      	subs	r2, r2, r3
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	605a      	str	r2, [r3, #4]
	
}
 800179a:	bf00      	nop
 800179c:	3728      	adds	r7, #40	; 0x28
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	f3af 8000 	nop.w
 80017a8:	00000000 	.word	0x00000000
 80017ac:	406fe000 	.word	0x406fe000
	...

080017b8 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08c      	sub	sp, #48	; 0x30
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	785b      	ldrb	r3, [r3, #1]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d101      	bne.n	80017cc <PID_Compute+0x14>
	{
		return _FALSE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	e0c1      	b.n	8001950 <PID_Compute+0x198>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 80017cc:	f000 fec2 	bl	8002554 <HAL_GetTick>
 80017d0:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	6a3a      	ldr	r2, [r7, #32]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	f0c0 80b3 	bcc.w	800194e <PID_Compute+0x196>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017f8:	ed93 6b00 	vldr	d6, [r3]
 80017fc:	ed97 7b06 	vldr	d7, [r7, #24]
 8001800:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001804:	ed87 7b04 	vstr	d7, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 800180e:	ed97 6b06 	vldr	d6, [r7, #24]
 8001812:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001816:	ed87 7b02 	vstr	d7, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	ed93 5b0c 	vldr	d5, [r3, #48]	; 0x30
 8001826:	ed97 7b04 	vldr	d7, [r7, #16]
 800182a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800182e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d10e      	bne.n	800185e <PID_Compute+0xa6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 800184c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001850:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001854:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800186a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800186e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001872:	dd06      	ble.n	8001882 <PID_Compute+0xca>
		{
			uPID->OutputSum = uPID->OutMax;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001880:	e010      	b.n	80018a4 <PID_Compute+0xec>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 800188e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001896:	d505      	bpl.n	80018a4 <PID_Compute+0xec>
		{
			uPID->OutputSum = uPID->OutMin;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d009      	beq.n	80018c0 <PID_Compute+0x108>
		{
			output = uPID->Kp * error;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80018b2:	ed97 6b04 	vldr	d6, [r7, #16]
 80018b6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80018ba:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
 80018be:	e005      	b.n	80018cc <PID_Compute+0x114>
		}
		else
		{
			output = 0;
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 80018d8:	ed97 7b02 	vldr	d7, [r7, #8]
 80018dc:	ee25 7b07 	vmul.f64	d7, d5, d7
 80018e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80018e4:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 80018e8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80018ec:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
		
		if (output > uPID->OutMax)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80018f6:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 80018fa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80018fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001902:	dd05      	ble.n	8001910 <PID_Compute+0x158>
		{
			output = uPID->OutMax;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800190a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800190e:	e00e      	b.n	800192e <PID_Compute+0x176>
		}
		else if (output < uPID->OutMin)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8001916:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 800191a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800191e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001922:	d504      	bpl.n	800192e <PID_Compute+0x176>
		{
			output = uPID->OutMin;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800192a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001932:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001936:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001940:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001948:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <PID_Compute+0x198>
		
	}
	else
	{
		return _FALSE;
 800194e:	2300      	movs	r3, #0
	}
	
}
 8001950:	4618      	mov	r0, r3
 8001952:	3730      	adds	r7, #48	; 0x30
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	2b01      	cmp	r3, #1
 8001968:	bf0c      	ite	eq
 800196a:	2301      	moveq	r3, #1
 800196c:	2300      	movne	r3, #0
 800196e:	b2db      	uxtb	r3, r3
 8001970:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d006      	beq.n	8001986 <PID_SetMode+0x2e>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	785b      	ldrb	r3, [r3, #1]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d102      	bne.n	8001986 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff fe8e 	bl	80016a2 <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	7bfa      	ldrb	r2, [r7, #15]
 800198a:	705a      	strb	r2, [r3, #1]
	
}
 800198c:	bf00      	nop
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8001994:	b480      	push	{r7}
 8001996:	b087      	sub	sp, #28
 8001998:	af00      	add	r7, sp, #0
 800199a:	6178      	str	r0, [r7, #20]
 800199c:	ed87 0b02 	vstr	d0, [r7, #8]
 80019a0:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80019a4:	ed97 6b02 	vldr	d6, [r7, #8]
 80019a8:	ed97 7b00 	vldr	d7, [r7]
 80019ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80019b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b4:	da58      	bge.n	8001a68 <PID_SetOutputLimits+0xd4>
	{
		return;
	}
	
	uPID->OutMin = Min;
 80019b6:	6979      	ldr	r1, [r7, #20]
 80019b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019bc:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 80019c0:	6979      	ldr	r1, [r7, #20]
 80019c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019c6:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	785b      	ldrb	r3, [r3, #1]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d04b      	beq.n	8001a6a <PID_SetOutputLimits+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	ed93 6b00 	vldr	d6, [r3]
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80019e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80019e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e8:	dd07      	ble.n	80019fa <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80019f4:	e9c1 2300 	strd	r2, r3, [r1]
 80019f8:	e012      	b.n	8001a20 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	ed93 6b00 	vldr	d6, [r3]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8001a08:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a10:	d506      	bpl.n	8001a20 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001a1c:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8001a2c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a34:	dd06      	ble.n	8001a44 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001a3c:	6979      	ldr	r1, [r7, #20]
 8001a3e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001a42:	e012      	b.n	8001a6a <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8001a50:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a58:	d507      	bpl.n	8001a6a <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001a60:	6979      	ldr	r1, [r7, #20]
 8001a62:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001a66:	e000      	b.n	8001a6a <PID_SetOutputLimits+0xd6>
		return;
 8001a68:	bf00      	nop
		}
		else { }
		
	}
	
}
 8001a6a:	371c      	adds	r7, #28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	0000      	movs	r0, r0
	...

08001a78 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b08b      	sub	sp, #44	; 0x2c
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	61f8      	str	r0, [r7, #28]
 8001a80:	ed87 0b04 	vstr	d0, [r7, #16]
 8001a84:	ed87 1b02 	vstr	d1, [r7, #8]
 8001a88:	ed87 2b00 	vstr	d2, [r7]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8001a90:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a94:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9c:	d46e      	bmi.n	8001b7c <PID_SetTunings2+0x104>
 8001a9e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001aa2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aaa:	d467      	bmi.n	8001b7c <PID_SetTunings2+0x104>
 8001aac:	ed97 7b00 	vldr	d7, [r7]
 8001ab0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab8:	d460      	bmi.n	8001b7c <PID_SetTunings2+0x104>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	7efa      	ldrb	r2, [r7, #27]
 8001abe:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8001ac0:	7efb      	ldrb	r3, [r7, #27]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	bf0c      	ite	eq
 8001ac6:	2301      	moveq	r3, #1
 8001ac8:	2300      	movne	r3, #0
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	461a      	mov	r2, r3
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8001ad2:	69f9      	ldr	r1, [r7, #28]
 8001ad4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ad8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8001adc:	69f9      	ldr	r1, [r7, #28]
 8001ade:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ae2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8001ae6:	69f9      	ldr	r1, [r7, #28]
 8001ae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001aec:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	ee07 3a90 	vmov	s15, r3
 8001af8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001afc:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8001b88 <PID_SetTunings2+0x110>
 8001b00:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b04:	ed87 7b08 	vstr	d7, [r7, #32]
	
	uPID->Kp = Kp;
 8001b08:	69f9      	ldr	r1, [r7, #28]
 8001b0a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b0e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8001b12:	ed97 6b02 	vldr	d6, [r7, #8]
 8001b16:	ed97 7b08 	vldr	d7, [r7, #32]
 8001b1a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8001b24:	ed97 5b00 	vldr	d5, [r7]
 8001b28:	ed97 6b08 	vldr	d6, [r7, #32]
 8001b2c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	78db      	ldrb	r3, [r3, #3]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d11f      	bne.n	8001b7e <PID_SetTunings2+0x106>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001b44:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001b90 <PID_SetTunings2+0x118>
 8001b48:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001b58:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001b90 <PID_SetTunings2+0x118>
 8001b5c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001b6c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001b90 <PID_SetTunings2+0x118>
 8001b70:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
 8001b7a:	e000      	b.n	8001b7e <PID_SetTunings2+0x106>
		return;
 8001b7c:	bf00      	nop
		
	}
	
}
 8001b7e:	372c      	adds	r7, #44	; 0x2c
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	00000000 	.word	0x00000000
 8001b8c:	408f4000 	.word	0x408f4000
	...

08001b98 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	785b      	ldrb	r3, [r3, #1]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d022      	beq.n	8001bf2 <PID_SetControllerDirection+0x5a>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	78db      	ldrb	r3, [r3, #3]
 8001bb0:	78fa      	ldrb	r2, [r7, #3]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d01d      	beq.n	8001bf2 <PID_SetControllerDirection+0x5a>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001bbc:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001c08 <PID_SetControllerDirection+0x70>
 8001bc0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001bd0:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001c08 <PID_SetControllerDirection+0x70>
 8001bd4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001be4:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001c08 <PID_SetControllerDirection+0x70>
 8001be8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	78fa      	ldrb	r2, [r7, #3]
 8001bf6:	70da      	strb	r2, [r3, #3]
	
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	f3af 8000 	nop.w
	...

08001c10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <HAL_MspInit+0x30>)
 8001c18:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001c1c:	4a08      	ldr	r2, [pc, #32]	; (8001c40 <HAL_MspInit+0x30>)
 8001c1e:	f043 0302 	orr.w	r3, r3, #2
 8001c22:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_MspInit+0x30>)
 8001c28:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	58024400 	.word	0x58024400

08001c44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b0ba      	sub	sp, #232	; 0xe8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c5c:	f107 0310 	add.w	r3, r7, #16
 8001c60:	22c0      	movs	r2, #192	; 0xc0
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f00b ff21 	bl	800daac <memset>
  if(hadc->Instance==ADC1)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a2b      	ldr	r2, [pc, #172]	; (8001d1c <HAL_ADC_MspInit+0xd8>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d14f      	bne.n	8001d14 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c74:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001c80:	2301      	movs	r3, #1
 8001c82:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8001c84:	2310      	movs	r3, #16
 8001c86:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001c90:	2302      	movs	r3, #2
 8001c92:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001c94:	23c0      	movs	r3, #192	; 0xc0
 8001c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ca6:	f107 0310 	add.w	r3, r7, #16
 8001caa:	4618      	mov	r0, r3
 8001cac:	f004 fc4a 	bl	8006544 <HAL_RCCEx_PeriphCLKConfig>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8001cb6:	f7ff fcef 	bl	8001698 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001cba:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <HAL_ADC_MspInit+0xdc>)
 8001cbc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001cc0:	4a17      	ldr	r2, [pc, #92]	; (8001d20 <HAL_ADC_MspInit+0xdc>)
 8001cc2:	f043 0320 	orr.w	r3, r3, #32
 8001cc6:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001cca:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <HAL_ADC_MspInit+0xdc>)
 8001ccc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001cd0:	f003 0320 	and.w	r3, r3, #32
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <HAL_ADC_MspInit+0xdc>)
 8001cda:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001cde:	4a10      	ldr	r2, [pc, #64]	; (8001d20 <HAL_ADC_MspInit+0xdc>)
 8001ce0:	f043 0302 	orr.w	r3, r3, #2
 8001ce4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001ce8:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <HAL_ADC_MspInit+0xdc>)
 8001cea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = THERMOCOUPLE_Pin;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(THERMOCOUPLE_GPIO_Port, &GPIO_InitStruct);
 8001d08:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4805      	ldr	r0, [pc, #20]	; (8001d24 <HAL_ADC_MspInit+0xe0>)
 8001d10:	f002 fc92 	bl	8004638 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d14:	bf00      	nop
 8001d16:	37e8      	adds	r7, #232	; 0xe8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40022000 	.word	0x40022000
 8001d20:	58024400 	.word	0x58024400
 8001d24:	58020400 	.word	0x58020400

08001d28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b0ba      	sub	sp, #232	; 0xe8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d40:	f107 0310 	add.w	r3, r7, #16
 8001d44:	22c0      	movs	r2, #192	; 0xc0
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f00b feaf 	bl	800daac <memset>
  if(hi2c->Instance==I2C1)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a26      	ldr	r2, [pc, #152]	; (8001dec <HAL_I2C_MspInit+0xc4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d145      	bne.n	8001de4 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d58:	f04f 0208 	mov.w	r2, #8
 8001d5c:	f04f 0300 	mov.w	r3, #0
 8001d60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001d64:	2300      	movs	r3, #0
 8001d66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d6a:	f107 0310 	add.w	r3, r7, #16
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f004 fbe8 	bl	8006544 <HAL_RCCEx_PeriphCLKConfig>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001d7a:	f7ff fc8d 	bl	8001698 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7e:	4b1c      	ldr	r3, [pc, #112]	; (8001df0 <HAL_I2C_MspInit+0xc8>)
 8001d80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001d84:	4a1a      	ldr	r2, [pc, #104]	; (8001df0 <HAL_I2C_MspInit+0xc8>)
 8001d86:	f043 0302 	orr.w	r3, r3, #2
 8001d8a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001d8e:	4b18      	ldr	r3, [pc, #96]	; (8001df0 <HAL_I2C_MspInit+0xc8>)
 8001d90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d9c:	23c0      	movs	r3, #192	; 0xc0
 8001d9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001da2:	2312      	movs	r3, #18
 8001da4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001db4:	2304      	movs	r3, #4
 8001db6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	480c      	ldr	r0, [pc, #48]	; (8001df4 <HAL_I2C_MspInit+0xcc>)
 8001dc2:	f002 fc39 	bl	8004638 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <HAL_I2C_MspInit+0xc8>)
 8001dc8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001dcc:	4a08      	ldr	r2, [pc, #32]	; (8001df0 <HAL_I2C_MspInit+0xc8>)
 8001dce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dd2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001dd6:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_I2C_MspInit+0xc8>)
 8001dd8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001de4:	bf00      	nop
 8001de6:	37e8      	adds	r7, #232	; 0xe8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40005400 	.word	0x40005400
 8001df0:	58024400 	.word	0x58024400
 8001df4:	58020400 	.word	0x58020400

08001df8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	; 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e18:	d135      	bne.n	8001e86 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e1a:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <HAL_TIM_Encoder_MspInit+0x98>)
 8001e1c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001e20:	4a1b      	ldr	r2, [pc, #108]	; (8001e90 <HAL_TIM_Encoder_MspInit+0x98>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001e2a:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <HAL_TIM_Encoder_MspInit+0x98>)
 8001e2c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e38:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <HAL_TIM_Encoder_MspInit+0x98>)
 8001e3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001e3e:	4a14      	ldr	r2, [pc, #80]	; (8001e90 <HAL_TIM_Encoder_MspInit+0x98>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001e48:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <HAL_TIM_Encoder_MspInit+0x98>)
 8001e4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PLUNGE_ENC_A_Pin|PLUNGE_ENC_B_Pin;
 8001e56:	2303      	movs	r3, #3
 8001e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e62:	2300      	movs	r3, #0
 8001e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e66:	2301      	movs	r3, #1
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6a:	f107 0314 	add.w	r3, r7, #20
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4808      	ldr	r0, [pc, #32]	; (8001e94 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001e72:	f002 fbe1 	bl	8004638 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2100      	movs	r1, #0
 8001e7a:	201c      	movs	r0, #28
 8001e7c:	f001 fe43 	bl	8003b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e80:	201c      	movs	r0, #28
 8001e82:	f001 fe5a 	bl	8003b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e86:	bf00      	nop
 8001e88:	3728      	adds	r7, #40	; 0x28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	58024400 	.word	0x58024400
 8001e94:	58020000 	.word	0x58020000

08001e98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a19      	ldr	r2, [pc, #100]	; (8001f0c <HAL_TIM_Base_MspInit+0x74>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d10f      	bne.n	8001eca <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eaa:	4b19      	ldr	r3, [pc, #100]	; (8001f10 <HAL_TIM_Base_MspInit+0x78>)
 8001eac:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001eb0:	4a17      	ldr	r2, [pc, #92]	; (8001f10 <HAL_TIM_Base_MspInit+0x78>)
 8001eb2:	f043 0302 	orr.w	r3, r3, #2
 8001eb6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001eba:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <HAL_TIM_Base_MspInit+0x78>)
 8001ebc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001ec8:	e01b      	b.n	8001f02 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM5)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a11      	ldr	r2, [pc, #68]	; (8001f14 <HAL_TIM_Base_MspInit+0x7c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d116      	bne.n	8001f02 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ed4:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <HAL_TIM_Base_MspInit+0x78>)
 8001ed6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001eda:	4a0d      	ldr	r2, [pc, #52]	; (8001f10 <HAL_TIM_Base_MspInit+0x78>)
 8001edc:	f043 0308 	orr.w	r3, r3, #8
 8001ee0:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001ee4:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <HAL_TIM_Base_MspInit+0x78>)
 8001ee6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	2032      	movs	r0, #50	; 0x32
 8001ef8:	f001 fe05 	bl	8003b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001efc:	2032      	movs	r0, #50	; 0x32
 8001efe:	f001 fe1c 	bl	8003b3a <HAL_NVIC_EnableIRQ>
}
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40000400 	.word	0x40000400
 8001f10:	58024400 	.word	0x58024400
 8001f14:	40000c00 	.word	0x40000c00

08001f18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 030c 	add.w	r3, r7, #12
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a12      	ldr	r2, [pc, #72]	; (8001f80 <HAL_TIM_MspPostInit+0x68>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d11e      	bne.n	8001f78 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3a:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <HAL_TIM_MspPostInit+0x6c>)
 8001f3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001f40:	4a10      	ldr	r2, [pc, #64]	; (8001f84 <HAL_TIM_MspPostInit+0x6c>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <HAL_TIM_MspPostInit+0x6c>)
 8001f4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f58:	23c0      	movs	r3, #192	; 0xc0
 8001f5a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6c:	f107 030c 	add.w	r3, r7, #12
 8001f70:	4619      	mov	r1, r3
 8001f72:	4805      	ldr	r0, [pc, #20]	; (8001f88 <HAL_TIM_MspPostInit+0x70>)
 8001f74:	f002 fb60 	bl	8004638 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f78:	bf00      	nop
 8001f7a:	3720      	adds	r7, #32
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40000400 	.word	0x40000400
 8001f84:	58024400 	.word	0x58024400
 8001f88:	58020000 	.word	0x58020000

08001f8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b0ba      	sub	sp, #232	; 0xe8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fa4:	f107 0310 	add.w	r3, r7, #16
 8001fa8:	22c0      	movs	r2, #192	; 0xc0
 8001faa:	2100      	movs	r1, #0
 8001fac:	4618      	mov	r0, r3
 8001fae:	f00b fd7d 	bl	800daac <memset>
  if(huart->Instance==USART3)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a2b      	ldr	r2, [pc, #172]	; (8002064 <HAL_UART_MspInit+0xd8>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d14e      	bne.n	800205a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001fbc:	f04f 0202 	mov.w	r2, #2
 8001fc0:	f04f 0300 	mov.w	r3, #0
 8001fc4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fce:	f107 0310 	add.w	r3, r7, #16
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f004 fab6 	bl	8006544 <HAL_RCCEx_PeriphCLKConfig>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001fde:	f7ff fb5b 	bl	8001698 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fe2:	4b21      	ldr	r3, [pc, #132]	; (8002068 <HAL_UART_MspInit+0xdc>)
 8001fe4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001fe8:	4a1f      	ldr	r2, [pc, #124]	; (8002068 <HAL_UART_MspInit+0xdc>)
 8001fea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fee:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001ff2:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <HAL_UART_MspInit+0xdc>)
 8001ff4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001ff8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002000:	4b19      	ldr	r3, [pc, #100]	; (8002068 <HAL_UART_MspInit+0xdc>)
 8002002:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002006:	4a18      	ldr	r2, [pc, #96]	; (8002068 <HAL_UART_MspInit+0xdc>)
 8002008:	f043 0308 	orr.w	r3, r3, #8
 800200c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002010:	4b15      	ldr	r3, [pc, #84]	; (8002068 <HAL_UART_MspInit+0xdc>)
 8002012:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800201e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002022:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	2300      	movs	r3, #0
 8002034:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002038:	2307      	movs	r3, #7
 800203a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800203e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002042:	4619      	mov	r1, r3
 8002044:	4809      	ldr	r0, [pc, #36]	; (800206c <HAL_UART_MspInit+0xe0>)
 8002046:	f002 faf7 	bl	8004638 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800204a:	2200      	movs	r2, #0
 800204c:	2100      	movs	r1, #0
 800204e:	2027      	movs	r0, #39	; 0x27
 8002050:	f001 fd59 	bl	8003b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002054:	2027      	movs	r0, #39	; 0x27
 8002056:	f001 fd70 	bl	8003b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800205a:	bf00      	nop
 800205c:	37e8      	adds	r7, #232	; 0xe8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40004800 	.word	0x40004800
 8002068:	58024400 	.word	0x58024400
 800206c:	58020c00 	.word	0x58020c00

08002070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002074:	e7fe      	b.n	8002074 <NMI_Handler+0x4>

08002076 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800207a:	e7fe      	b.n	800207a <HardFault_Handler+0x4>

0800207c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002080:	e7fe      	b.n	8002080 <MemManage_Handler+0x4>

08002082 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002086:	e7fe      	b.n	8002086 <BusFault_Handler+0x4>

08002088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800208c:	e7fe      	b.n	800208c <UsageFault_Handler+0x4>

0800208e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800208e:	b480      	push	{r7}
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020bc:	f000 fa36 	bl	800252c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020c8:	4802      	ldr	r0, [pc, #8]	; (80020d4 <TIM2_IRQHandler+0x10>)
 80020ca:	f007 f923 	bl	8009314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	240002b4 	.word	0x240002b4

080020d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80020dc:	4802      	ldr	r0, [pc, #8]	; (80020e8 <USART3_IRQHandler+0x10>)
 80020de:	f008 fa81 	bl	800a5e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	24000398 	.word	0x24000398

080020ec <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  /* always do the logging portion */
  /* TODO: Convert this datalogging to DMA to speed it up. actually a priority I think it would have big performance gains*/
  log_position += 1; // increment number of data points taken
 80020f0:	4b19      	ldr	r3, [pc, #100]	; (8002158 <TIM5_IRQHandler+0x6c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	3301      	adds	r3, #1
 80020f6:	4a18      	ldr	r2, [pc, #96]	; (8002158 <TIM5_IRQHandler+0x6c>)
 80020f8:	6013      	str	r3, [r2, #0]
  current_pos = TIM2->CNT;
 80020fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	4a16      	ldr	r2, [pc, #88]	; (800215c <TIM5_IRQHandler+0x70>)
 8002102:	6013      	str	r3, [r2, #0]
  HAL_ADC_Start(&hadc1);
 8002104:	4816      	ldr	r0, [pc, #88]	; (8002160 <TIM5_IRQHandler+0x74>)
 8002106:	f000 fd91 	bl	8002c2c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800210a:	f04f 31ff 	mov.w	r1, #4294967295
 800210e:	4814      	ldr	r0, [pc, #80]	; (8002160 <TIM5_IRQHandler+0x74>)
 8002110:	f000 fe46 	bl	8002da0 <HAL_ADC_PollForConversion>
  current_temp = HAL_ADC_GetValue(&hadc1);
 8002114:	4812      	ldr	r0, [pc, #72]	; (8002160 <TIM5_IRQHandler+0x74>)
 8002116:	f000 ff1b 	bl	8002f50 <HAL_ADC_GetValue>
 800211a:	4603      	mov	r3, r0
 800211c:	4a11      	ldr	r2, [pc, #68]	; (8002164 <TIM5_IRQHandler+0x78>)
 800211e:	6013      	str	r3, [r2, #0]
  posLog[log_position] = current_pos; // update log of positions
 8002120:	4b0e      	ldr	r3, [pc, #56]	; (800215c <TIM5_IRQHandler+0x70>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <TIM5_IRQHandler+0x6c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	b291      	uxth	r1, r2
 800212a:	4a0f      	ldr	r2, [pc, #60]	; (8002168 <TIM5_IRQHandler+0x7c>)
 800212c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  thermoLog[log_position] = current_temp; 
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <TIM5_IRQHandler+0x78>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b08      	ldr	r3, [pc, #32]	; (8002158 <TIM5_IRQHandler+0x6c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	b291      	uxth	r1, r2
 800213a:	4a0c      	ldr	r2, [pc, #48]	; (800216c <TIM5_IRQHandler+0x80>)
 800213c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

  TIM5->SR &= ~TIM_SR_UIF; // Clear the TIM5 update flag
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <TIM5_IRQHandler+0x84>)
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	4a0a      	ldr	r2, [pc, #40]	; (8002170 <TIM5_IRQHandler+0x84>)
 8002146:	f023 0301 	bic.w	r3, r3, #1
 800214a:	6113      	str	r3, [r2, #16]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800214c:	4809      	ldr	r0, [pc, #36]	; (8002174 <TIM5_IRQHandler+0x88>)
 800214e:	f007 f8e1 	bl	8009314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	24061eac 	.word	0x24061eac
 800215c:	24061f2c 	.word	0x24061f2c
 8002160:	240001fc 	.word	0x240001fc
 8002164:	24061f30 	.word	0x24061f30
 8002168:	2400042c 	.word	0x2400042c
 800216c:	2403116c 	.word	0x2403116c
 8002170:	40000c00 	.word	0x40000c00
 8002174:	2400034c 	.word	0x2400034c

08002178 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return 1;
 800217c:	2301      	movs	r3, #1
}
 800217e:	4618      	mov	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <_kill>:

int _kill(int pid, int sig)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002192:	f00b fcdd 	bl	800db50 <__errno>
 8002196:	4603      	mov	r3, r0
 8002198:	2216      	movs	r2, #22
 800219a:	601a      	str	r2, [r3, #0]
  return -1;
 800219c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <_exit>:

void _exit (int status)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021b0:	f04f 31ff 	mov.w	r1, #4294967295
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ffe7 	bl	8002188 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021ba:	e7fe      	b.n	80021ba <_exit+0x12>

080021bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	e00a      	b.n	80021e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021ce:	f3af 8000 	nop.w
 80021d2:	4601      	mov	r1, r0
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	60ba      	str	r2, [r7, #8]
 80021da:	b2ca      	uxtb	r2, r1
 80021dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	3301      	adds	r3, #1
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	dbf0      	blt.n	80021ce <_read+0x12>
  }

  return len;
 80021ec:	687b      	ldr	r3, [r7, #4]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b086      	sub	sp, #24
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	e009      	b.n	800221c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	60ba      	str	r2, [r7, #8]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	3301      	adds	r3, #1
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	429a      	cmp	r2, r3
 8002222:	dbf1      	blt.n	8002208 <_write+0x12>
  }
  return len;
 8002224:	687b      	ldr	r3, [r7, #4]
}
 8002226:	4618      	mov	r0, r3
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <_close>:

int _close(int file)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002236:	f04f 33ff 	mov.w	r3, #4294967295
}
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002256:	605a      	str	r2, [r3, #4]
  return 0;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <_isatty>:

int _isatty(int file)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800226e:	2301      	movs	r3, #1
}
 8002270:	4618      	mov	r0, r3
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
	...

08002298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022a0:	4a14      	ldr	r2, [pc, #80]	; (80022f4 <_sbrk+0x5c>)
 80022a2:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <_sbrk+0x60>)
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022ac:	4b13      	ldr	r3, [pc, #76]	; (80022fc <_sbrk+0x64>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d102      	bne.n	80022ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022b4:	4b11      	ldr	r3, [pc, #68]	; (80022fc <_sbrk+0x64>)
 80022b6:	4a12      	ldr	r2, [pc, #72]	; (8002300 <_sbrk+0x68>)
 80022b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ba:	4b10      	ldr	r3, [pc, #64]	; (80022fc <_sbrk+0x64>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4413      	add	r3, r2
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d207      	bcs.n	80022d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022c8:	f00b fc42 	bl	800db50 <__errno>
 80022cc:	4603      	mov	r3, r0
 80022ce:	220c      	movs	r2, #12
 80022d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022d2:	f04f 33ff 	mov.w	r3, #4294967295
 80022d6:	e009      	b.n	80022ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022d8:	4b08      	ldr	r3, [pc, #32]	; (80022fc <_sbrk+0x64>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022de:	4b07      	ldr	r3, [pc, #28]	; (80022fc <_sbrk+0x64>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4413      	add	r3, r2
 80022e6:	4a05      	ldr	r2, [pc, #20]	; (80022fc <_sbrk+0x64>)
 80022e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ea:	68fb      	ldr	r3, [r7, #12]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	24100000 	.word	0x24100000
 80022f8:	00000400 	.word	0x00000400
 80022fc:	24061f34 	.word	0x24061f34
 8002300:	24062088 	.word	0x24062088

08002304 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002308:	4b32      	ldr	r3, [pc, #200]	; (80023d4 <SystemInit+0xd0>)
 800230a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230e:	4a31      	ldr	r2, [pc, #196]	; (80023d4 <SystemInit+0xd0>)
 8002310:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002314:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002318:	4b2f      	ldr	r3, [pc, #188]	; (80023d8 <SystemInit+0xd4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 030f 	and.w	r3, r3, #15
 8002320:	2b02      	cmp	r3, #2
 8002322:	d807      	bhi.n	8002334 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002324:	4b2c      	ldr	r3, [pc, #176]	; (80023d8 <SystemInit+0xd4>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f023 030f 	bic.w	r3, r3, #15
 800232c:	4a2a      	ldr	r2, [pc, #168]	; (80023d8 <SystemInit+0xd4>)
 800232e:	f043 0303 	orr.w	r3, r3, #3
 8002332:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002334:	4b29      	ldr	r3, [pc, #164]	; (80023dc <SystemInit+0xd8>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a28      	ldr	r2, [pc, #160]	; (80023dc <SystemInit+0xd8>)
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002340:	4b26      	ldr	r3, [pc, #152]	; (80023dc <SystemInit+0xd8>)
 8002342:	2200      	movs	r2, #0
 8002344:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002346:	4b25      	ldr	r3, [pc, #148]	; (80023dc <SystemInit+0xd8>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	4924      	ldr	r1, [pc, #144]	; (80023dc <SystemInit+0xd8>)
 800234c:	4b24      	ldr	r3, [pc, #144]	; (80023e0 <SystemInit+0xdc>)
 800234e:	4013      	ands	r3, r2
 8002350:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002352:	4b21      	ldr	r3, [pc, #132]	; (80023d8 <SystemInit+0xd4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 030c 	and.w	r3, r3, #12
 800235a:	2b00      	cmp	r3, #0
 800235c:	d007      	beq.n	800236e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800235e:	4b1e      	ldr	r3, [pc, #120]	; (80023d8 <SystemInit+0xd4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f023 030f 	bic.w	r3, r3, #15
 8002366:	4a1c      	ldr	r2, [pc, #112]	; (80023d8 <SystemInit+0xd4>)
 8002368:	f043 0303 	orr.w	r3, r3, #3
 800236c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800236e:	4b1b      	ldr	r3, [pc, #108]	; (80023dc <SystemInit+0xd8>)
 8002370:	2200      	movs	r2, #0
 8002372:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002374:	4b19      	ldr	r3, [pc, #100]	; (80023dc <SystemInit+0xd8>)
 8002376:	2200      	movs	r2, #0
 8002378:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800237a:	4b18      	ldr	r3, [pc, #96]	; (80023dc <SystemInit+0xd8>)
 800237c:	2200      	movs	r2, #0
 800237e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002380:	4b16      	ldr	r3, [pc, #88]	; (80023dc <SystemInit+0xd8>)
 8002382:	4a18      	ldr	r2, [pc, #96]	; (80023e4 <SystemInit+0xe0>)
 8002384:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002386:	4b15      	ldr	r3, [pc, #84]	; (80023dc <SystemInit+0xd8>)
 8002388:	4a17      	ldr	r2, [pc, #92]	; (80023e8 <SystemInit+0xe4>)
 800238a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800238c:	4b13      	ldr	r3, [pc, #76]	; (80023dc <SystemInit+0xd8>)
 800238e:	4a17      	ldr	r2, [pc, #92]	; (80023ec <SystemInit+0xe8>)
 8002390:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002392:	4b12      	ldr	r3, [pc, #72]	; (80023dc <SystemInit+0xd8>)
 8002394:	2200      	movs	r2, #0
 8002396:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002398:	4b10      	ldr	r3, [pc, #64]	; (80023dc <SystemInit+0xd8>)
 800239a:	4a14      	ldr	r2, [pc, #80]	; (80023ec <SystemInit+0xe8>)
 800239c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800239e:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <SystemInit+0xd8>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80023a4:	4b0d      	ldr	r3, [pc, #52]	; (80023dc <SystemInit+0xd8>)
 80023a6:	4a11      	ldr	r2, [pc, #68]	; (80023ec <SystemInit+0xe8>)
 80023a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80023aa:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <SystemInit+0xd8>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023b0:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <SystemInit+0xd8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a09      	ldr	r2, [pc, #36]	; (80023dc <SystemInit+0xd8>)
 80023b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80023bc:	4b07      	ldr	r3, [pc, #28]	; (80023dc <SystemInit+0xd8>)
 80023be:	2200      	movs	r2, #0
 80023c0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80023c2:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <SystemInit+0xec>)
 80023c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80023c8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80023ca:	bf00      	nop
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	e000ed00 	.word	0xe000ed00
 80023d8:	52002000 	.word	0x52002000
 80023dc:	58024400 	.word	0x58024400
 80023e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80023e4:	02020200 	.word	0x02020200
 80023e8:	01ff0000 	.word	0x01ff0000
 80023ec:	01010280 	.word	0x01010280
 80023f0:	52004000 	.word	0x52004000

080023f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800242c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80023f8:	f7ff ff84 	bl	8002304 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023fc:	480c      	ldr	r0, [pc, #48]	; (8002430 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023fe:	490d      	ldr	r1, [pc, #52]	; (8002434 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002400:	4a0d      	ldr	r2, [pc, #52]	; (8002438 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002404:	e002      	b.n	800240c <LoopCopyDataInit>

08002406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800240a:	3304      	adds	r3, #4

0800240c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 800240c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800240e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002410:	d3f9      	bcc.n	8002406 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002412:	4a0a      	ldr	r2, [pc, #40]	; (800243c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002414:	4c0a      	ldr	r4, [pc, #40]	; (8002440 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002418:	e001      	b.n	800241e <LoopFillZerobss>

0800241a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800241a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800241c:	3204      	adds	r2, #4

0800241e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800241e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002420:	d3fb      	bcc.n	800241a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002422:	f00b fb9b 	bl	800db5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002426:	f7fe fb87 	bl	8000b38 <main>
  bx  lr
 800242a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800242c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002430:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002434:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8002438:	0800fe7c 	.word	0x0800fe7c
  ldr r2, =_sbss
 800243c:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8002440:	24062088 	.word	0x24062088

08002444 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002444:	e7fe      	b.n	8002444 <ADC_IRQHandler>
	...

08002448 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800244e:	2003      	movs	r0, #3
 8002450:	f001 fb4e 	bl	8003af0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002454:	f003 fea0 	bl	8006198 <HAL_RCC_GetSysClockFreq>
 8002458:	4602      	mov	r2, r0
 800245a:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <HAL_Init+0x68>)
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	0a1b      	lsrs	r3, r3, #8
 8002460:	f003 030f 	and.w	r3, r3, #15
 8002464:	4913      	ldr	r1, [pc, #76]	; (80024b4 <HAL_Init+0x6c>)
 8002466:	5ccb      	ldrb	r3, [r1, r3]
 8002468:	f003 031f 	and.w	r3, r3, #31
 800246c:	fa22 f303 	lsr.w	r3, r2, r3
 8002470:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002472:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <HAL_Init+0x68>)
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	4a0e      	ldr	r2, [pc, #56]	; (80024b4 <HAL_Init+0x6c>)
 800247c:	5cd3      	ldrb	r3, [r2, r3]
 800247e:	f003 031f 	and.w	r3, r3, #31
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	fa22 f303 	lsr.w	r3, r2, r3
 8002488:	4a0b      	ldr	r2, [pc, #44]	; (80024b8 <HAL_Init+0x70>)
 800248a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800248c:	4a0b      	ldr	r2, [pc, #44]	; (80024bc <HAL_Init+0x74>)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002492:	2000      	movs	r0, #0
 8002494:	f000 f814 	bl	80024c0 <HAL_InitTick>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e002      	b.n	80024a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80024a2:	f7ff fbb5 	bl	8001c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	58024400 	.word	0x58024400
 80024b4:	0800fac0 	.word	0x0800fac0
 80024b8:	2400000c 	.word	0x2400000c
 80024bc:	24000008 	.word	0x24000008

080024c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80024c8:	4b15      	ldr	r3, [pc, #84]	; (8002520 <HAL_InitTick+0x60>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e021      	b.n	8002518 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80024d4:	4b13      	ldr	r3, [pc, #76]	; (8002524 <HAL_InitTick+0x64>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b11      	ldr	r3, [pc, #68]	; (8002520 <HAL_InitTick+0x60>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	4619      	mov	r1, r3
 80024de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ea:	4618      	mov	r0, r3
 80024ec:	f001 fb33 	bl	8003b56 <HAL_SYSTICK_Config>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e00e      	b.n	8002518 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b0f      	cmp	r3, #15
 80024fe:	d80a      	bhi.n	8002516 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002500:	2200      	movs	r2, #0
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	f04f 30ff 	mov.w	r0, #4294967295
 8002508:	f001 fafd 	bl	8003b06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800250c:	4a06      	ldr	r2, [pc, #24]	; (8002528 <HAL_InitTick+0x68>)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	e000      	b.n	8002518 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
}
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	24000014 	.word	0x24000014
 8002524:	24000008 	.word	0x24000008
 8002528:	24000010 	.word	0x24000010

0800252c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <HAL_IncTick+0x20>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <HAL_IncTick+0x24>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4413      	add	r3, r2
 800253c:	4a04      	ldr	r2, [pc, #16]	; (8002550 <HAL_IncTick+0x24>)
 800253e:	6013      	str	r3, [r2, #0]
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	24000014 	.word	0x24000014
 8002550:	24061f38 	.word	0x24061f38

08002554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return uwTick;
 8002558:	4b03      	ldr	r3, [pc, #12]	; (8002568 <HAL_GetTick+0x14>)
 800255a:	681b      	ldr	r3, [r3, #0]
}
 800255c:	4618      	mov	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	24061f38 	.word	0x24061f38

0800256c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002574:	f7ff ffee 	bl	8002554 <HAL_GetTick>
 8002578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002584:	d005      	beq.n	8002592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002586:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <HAL_Delay+0x44>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4413      	add	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002592:	bf00      	nop
 8002594:	f7ff ffde 	bl	8002554 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d8f7      	bhi.n	8002594 <HAL_Delay+0x28>
  {
  }
}
 80025a4:	bf00      	nop
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	24000014 	.word	0x24000014

080025b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	609a      	str	r2, [r3, #8]
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	609a      	str	r2, [r3, #8]
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002610:	4618      	mov	r0, r3
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800261c:	b480      	push	{r7}
 800261e:	b087      	sub	sp, #28
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
 8002628:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	3360      	adds	r3, #96	; 0x60
 800262e:	461a      	mov	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	430b      	orrs	r3, r1
 800264a:	431a      	orrs	r2, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002650:	bf00      	nop
 8002652:	371c      	adds	r7, #28
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	f003 031f 	and.w	r3, r3, #31
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	fa01 f303 	lsl.w	r3, r1, r3
 800267c:	431a      	orrs	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	611a      	str	r2, [r3, #16]
}
 8002682:	bf00      	nop
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800268e:	b480      	push	{r7}
 8002690:	b087      	sub	sp, #28
 8002692:	af00      	add	r7, sp, #0
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	3360      	adds	r3, #96	; 0x60
 800269e:	461a      	mov	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	431a      	orrs	r2, r3
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	601a      	str	r2, [r3, #0]
  }
}
 80026b8:	bf00      	nop
 80026ba:	371c      	adds	r7, #28
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80026d8:	2301      	movs	r3, #1
 80026da:	e000      	b.n	80026de <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b087      	sub	sp, #28
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	60f8      	str	r0, [r7, #12]
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	3330      	adds	r3, #48	; 0x30
 80026fa:	461a      	mov	r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	0a1b      	lsrs	r3, r3, #8
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	f003 030c 	and.w	r3, r3, #12
 8002706:	4413      	add	r3, r2
 8002708:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	f003 031f 	and.w	r3, r3, #31
 8002714:	211f      	movs	r1, #31
 8002716:	fa01 f303 	lsl.w	r3, r1, r3
 800271a:	43db      	mvns	r3, r3
 800271c:	401a      	ands	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	0e9b      	lsrs	r3, r3, #26
 8002722:	f003 011f 	and.w	r1, r3, #31
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	f003 031f 	and.w	r3, r3, #31
 800272c:	fa01 f303 	lsl.w	r3, r1, r3
 8002730:	431a      	orrs	r2, r3
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002736:	bf00      	nop
 8002738:	371c      	adds	r7, #28
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002742:	b480      	push	{r7}
 8002744:	b087      	sub	sp, #28
 8002746:	af00      	add	r7, sp, #0
 8002748:	60f8      	str	r0, [r7, #12]
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	3314      	adds	r3, #20
 8002752:	461a      	mov	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	0e5b      	lsrs	r3, r3, #25
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	4413      	add	r3, r2
 8002760:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	0d1b      	lsrs	r3, r3, #20
 800276a:	f003 031f 	and.w	r3, r3, #31
 800276e:	2107      	movs	r1, #7
 8002770:	fa01 f303 	lsl.w	r3, r1, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	401a      	ands	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	0d1b      	lsrs	r3, r3, #20
 800277c:	f003 031f 	and.w	r3, r3, #31
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	fa01 f303 	lsl.w	r3, r1, r3
 8002786:	431a      	orrs	r2, r3
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800278c:	bf00      	nop
 800278e:	371c      	adds	r7, #28
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027b0:	43db      	mvns	r3, r3
 80027b2:	401a      	ands	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f003 0318 	and.w	r3, r3, #24
 80027ba:	4908      	ldr	r1, [pc, #32]	; (80027dc <LL_ADC_SetChannelSingleDiff+0x44>)
 80027bc:	40d9      	lsrs	r1, r3
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	400b      	ands	r3, r1
 80027c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027c6:	431a      	orrs	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80027ce:	bf00      	nop
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	000fffff 	.word	0x000fffff

080027e0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 031f 	and.w	r3, r3, #31
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	4b04      	ldr	r3, [pc, #16]	; (8002838 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002826:	4013      	ands	r3, r2
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6093      	str	r3, [r2, #8]
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	5fffffc0 	.word	0x5fffffc0

0800283c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800284c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002850:	d101      	bne.n	8002856 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <LL_ADC_EnableInternalRegulator+0x24>)
 8002872:	4013      	ands	r3, r2
 8002874:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	6fffffc0 	.word	0x6fffffc0

0800288c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028a0:	d101      	bne.n	80028a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <LL_ADC_Enable+0x24>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	f043 0201 	orr.w	r2, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	7fffffc0 	.word	0x7fffffc0

080028dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d101      	bne.n	80028f4 <LL_ADC_IsEnabled+0x18>
 80028f0:	2301      	movs	r3, #1
 80028f2:	e000      	b.n	80028f6 <LL_ADC_IsEnabled+0x1a>
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <LL_ADC_REG_StartConversion+0x24>)
 8002912:	4013      	ands	r3, r2
 8002914:	f043 0204 	orr.w	r2, r3, #4
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	7fffffc0 	.word	0x7fffffc0

0800292c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b04      	cmp	r3, #4
 800293e:	d101      	bne.n	8002944 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002940:	2301      	movs	r3, #1
 8002942:	e000      	b.n	8002946 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b08      	cmp	r3, #8
 8002964:	d101      	bne.n	800296a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002978:	b590      	push	{r4, r7, lr}
 800297a:	b089      	sub	sp, #36	; 0x24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002980:	2300      	movs	r3, #0
 8002982:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002984:	2300      	movs	r3, #0
 8002986:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e138      	b.n	8002c04 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299c:	2b00      	cmp	r3, #0
 800299e:	d109      	bne.n	80029b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff f94f 	bl	8001c44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff ff3f 	bl	800283c <LL_ADC_IsDeepPowerDownEnabled>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d004      	beq.n	80029ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff ff25 	bl	8002818 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff ff5a 	bl	800288c <LL_ADC_IsInternalRegulatorEnabled>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d114      	bne.n	8002a08 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff ff3e 	bl	8002864 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029e8:	4b88      	ldr	r3, [pc, #544]	; (8002c0c <HAL_ADC_Init+0x294>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	099b      	lsrs	r3, r3, #6
 80029ee:	4a88      	ldr	r2, [pc, #544]	; (8002c10 <HAL_ADC_Init+0x298>)
 80029f0:	fba2 2303 	umull	r2, r3, r2, r3
 80029f4:	099b      	lsrs	r3, r3, #6
 80029f6:	3301      	adds	r3, #1
 80029f8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80029fa:	e002      	b.n	8002a02 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f9      	bne.n	80029fc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff ff3d 	bl	800288c <LL_ADC_IsInternalRegulatorEnabled>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10d      	bne.n	8002a34 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1c:	f043 0210 	orr.w	r2, r3, #16
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a28:	f043 0201 	orr.w	r2, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff ff77 	bl	800292c <LL_ADC_REG_IsConversionOngoing>
 8002a3e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a44:	f003 0310 	and.w	r3, r3, #16
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f040 80d2 	bne.w	8002bf2 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f040 80ce 	bne.w	8002bf2 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a5e:	f043 0202 	orr.w	r2, r3, #2
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff ff36 	bl	80028dc <LL_ADC_IsEnabled>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d110      	bne.n	8002a98 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a76:	4867      	ldr	r0, [pc, #412]	; (8002c14 <HAL_ADC_Init+0x29c>)
 8002a78:	f7ff ff30 	bl	80028dc <LL_ADC_IsEnabled>
 8002a7c:	4604      	mov	r4, r0
 8002a7e:	4866      	ldr	r0, [pc, #408]	; (8002c18 <HAL_ADC_Init+0x2a0>)
 8002a80:	f7ff ff2c 	bl	80028dc <LL_ADC_IsEnabled>
 8002a84:	4603      	mov	r3, r0
 8002a86:	4323      	orrs	r3, r4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d105      	bne.n	8002a98 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	4619      	mov	r1, r3
 8002a92:	4862      	ldr	r0, [pc, #392]	; (8002c1c <HAL_ADC_Init+0x2a4>)
 8002a94:	f7ff fd8e 	bl	80025b4 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	7d5b      	ldrb	r3, [r3, #21]
 8002a9c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002aa2:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8002aa8:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	7f1b      	ldrb	r3, [r3, #28]
 8002aae:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	7f1b      	ldrb	r3, [r3, #28]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d106      	bne.n	8002aca <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	045b      	lsls	r3, r3, #17
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d009      	beq.n	8002ae6 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ade:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68da      	ldr	r2, [r3, #12]
 8002aec:	4b4c      	ldr	r3, [pc, #304]	; (8002c20 <HAL_ADC_Init+0x2a8>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6812      	ldr	r2, [r2, #0]
 8002af4:	69b9      	ldr	r1, [r7, #24]
 8002af6:	430b      	orrs	r3, r1
 8002af8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff ff14 	bl	800292c <LL_ADC_REG_IsConversionOngoing>
 8002b04:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff ff21 	bl	8002952 <LL_ADC_INJ_IsConversionOngoing>
 8002b10:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d14a      	bne.n	8002bae <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d147      	bne.n	8002bae <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	7d1b      	ldrb	r3, [r3, #20]
 8002b22:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	4b3c      	ldr	r3, [pc, #240]	; (8002c24 <HAL_ADC_Init+0x2ac>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	69b9      	ldr	r1, [r7, #24]
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d11b      	bne.n	8002b82 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	691a      	ldr	r2, [r3, #16]
 8002b56:	4b34      	ldr	r3, [pc, #208]	; (8002c28 <HAL_ADC_Init+0x2b0>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b5e:	3a01      	subs	r2, #1
 8002b60:	0411      	lsls	r1, r2, #16
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b66:	4311      	orrs	r1, r2
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b6c:	4311      	orrs	r1, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b72:	430a      	orrs	r2, r1
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0201 	orr.w	r2, r2, #1
 8002b7e:	611a      	str	r2, [r3, #16]
 8002b80:	e007      	b.n	8002b92 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	691a      	ldr	r2, [r3, #16]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0201 	bic.w	r2, r2, #1
 8002b90:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 fd41 	bl	8003630 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	f023 010f 	bic.w	r1, r3, #15
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	1e5a      	subs	r2, r3, #1
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	631a      	str	r2, [r3, #48]	; 0x30
 8002bce:	e007      	b.n	8002be0 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 020f 	bic.w	r2, r2, #15
 8002bde:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be4:	f023 0303 	bic.w	r3, r3, #3
 8002be8:	f043 0201 	orr.w	r2, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	655a      	str	r2, [r3, #84]	; 0x54
 8002bf0:	e007      	b.n	8002c02 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf6:	f043 0210 	orr.w	r2, r3, #16
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c02:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3724      	adds	r7, #36	; 0x24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd90      	pop	{r4, r7, pc}
 8002c0c:	24000008 	.word	0x24000008
 8002c10:	053e2d63 	.word	0x053e2d63
 8002c14:	40022000 	.word	0x40022000
 8002c18:	40022100 	.word	0x40022100
 8002c1c:	40022300 	.word	0x40022300
 8002c20:	fff0c003 	.word	0xfff0c003
 8002c24:	ffffbffc 	.word	0xffffbffc
 8002c28:	fc00f81e 	.word	0xfc00f81e

08002c2c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c34:	4856      	ldr	r0, [pc, #344]	; (8002d90 <HAL_ADC_Start+0x164>)
 8002c36:	f7ff fdd3 	bl	80027e0 <LL_ADC_GetMultimode>
 8002c3a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff fe73 	bl	800292c <LL_ADC_REG_IsConversionOngoing>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f040 809a 	bne.w	8002d82 <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d101      	bne.n	8002c5c <HAL_ADC_Start+0x30>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	e095      	b.n	8002d88 <HAL_ADC_Start+0x15c>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 fc67 	bl	8003538 <ADC_Enable>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002c6e:	7dfb      	ldrb	r3, [r7, #23]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f040 8081 	bne.w	8002d78 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c7a:	4b46      	ldr	r3, [pc, #280]	; (8002d94 <HAL_ADC_Start+0x168>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a43      	ldr	r2, [pc, #268]	; (8002d98 <HAL_ADC_Start+0x16c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d002      	beq.n	8002c96 <HAL_ADC_Start+0x6a>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	e000      	b.n	8002c98 <HAL_ADC_Start+0x6c>
 8002c96:	4b41      	ldr	r3, [pc, #260]	; (8002d9c <HAL_ADC_Start+0x170>)
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d002      	beq.n	8002ca6 <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d105      	bne.n	8002cb2 <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002caa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cbe:	d106      	bne.n	8002cce <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc4:	f023 0206 	bic.w	r2, r3, #6
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	659a      	str	r2, [r3, #88]	; 0x58
 8002ccc:	e002      	b.n	8002cd4 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	221c      	movs	r2, #28
 8002cda:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a2b      	ldr	r2, [pc, #172]	; (8002d98 <HAL_ADC_Start+0x16c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d002      	beq.n	8002cf4 <HAL_ADC_Start+0xc8>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	e000      	b.n	8002cf6 <HAL_ADC_Start+0xca>
 8002cf4:	4b29      	ldr	r3, [pc, #164]	; (8002d9c <HAL_ADC_Start+0x170>)
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6812      	ldr	r2, [r2, #0]
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d008      	beq.n	8002d10 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	2b05      	cmp	r3, #5
 8002d08:	d002      	beq.n	8002d10 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	2b09      	cmp	r3, #9
 8002d0e:	d114      	bne.n	8002d3a <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d007      	beq.n	8002d2e <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d22:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d26:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff fde6 	bl	8002904 <LL_ADC_REG_StartConversion>
 8002d38:	e025      	b.n	8002d86 <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a13      	ldr	r2, [pc, #76]	; (8002d98 <HAL_ADC_Start+0x16c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d002      	beq.n	8002d56 <HAL_ADC_Start+0x12a>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	e000      	b.n	8002d58 <HAL_ADC_Start+0x12c>
 8002d56:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <HAL_ADC_Start+0x170>)
 8002d58:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00f      	beq.n	8002d86 <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d6e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	655a      	str	r2, [r3, #84]	; 0x54
 8002d76:	e006      	b.n	8002d86 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002d80:	e001      	b.n	8002d86 <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d82:	2302      	movs	r3, #2
 8002d84:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40022300 	.word	0x40022300
 8002d94:	fffff0fe 	.word	0xfffff0fe
 8002d98:	40022100 	.word	0x40022100
 8002d9c:	40022000 	.word	0x40022000

08002da0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b088      	sub	sp, #32
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002daa:	4866      	ldr	r0, [pc, #408]	; (8002f44 <HAL_ADC_PollForConversion+0x1a4>)
 8002dac:	f7ff fd18 	bl	80027e0 <LL_ADC_GetMultimode>
 8002db0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d102      	bne.n	8002dc0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002dba:	2308      	movs	r3, #8
 8002dbc:	61fb      	str	r3, [r7, #28]
 8002dbe:	e02a      	b.n	8002e16 <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d005      	beq.n	8002dd2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2b05      	cmp	r3, #5
 8002dca:	d002      	beq.n	8002dd2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	2b09      	cmp	r3, #9
 8002dd0:	d111      	bne.n	8002df6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d007      	beq.n	8002df0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de4:	f043 0220 	orr.w	r2, r3, #32
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e0a4      	b.n	8002f3a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002df0:	2304      	movs	r3, #4
 8002df2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002df4:	e00f      	b.n	8002e16 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002df6:	4853      	ldr	r0, [pc, #332]	; (8002f44 <HAL_ADC_PollForConversion+0x1a4>)
 8002df8:	f7ff fd00 	bl	80027fc <LL_ADC_GetMultiDMATransfer>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d007      	beq.n	8002e12 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e06:	f043 0220 	orr.w	r2, r3, #32
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e093      	b.n	8002f3a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002e12:	2304      	movs	r3, #4
 8002e14:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002e16:	f7ff fb9d 	bl	8002554 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002e1c:	e021      	b.n	8002e62 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e24:	d01d      	beq.n	8002e62 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002e26:	f7ff fb95 	bl	8002554 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d302      	bcc.n	8002e3c <HAL_ADC_PollForConversion+0x9c>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d112      	bne.n	8002e62 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	4013      	ands	r3, r2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10b      	bne.n	8002e62 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4e:	f043 0204 	orr.w	r2, r3, #4
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e06b      	b.n	8002f3a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0d6      	beq.n	8002e1e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e74:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff fc1f 	bl	80026c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d01c      	beq.n	8002ec6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	7d5b      	ldrb	r3, [r3, #21]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d118      	bne.n	8002ec6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d111      	bne.n	8002ec6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d105      	bne.n	8002ec6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ebe:	f043 0201 	orr.w	r2, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a1f      	ldr	r2, [pc, #124]	; (8002f48 <HAL_ADC_PollForConversion+0x1a8>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d002      	beq.n	8002ed6 <HAL_ADC_PollForConversion+0x136>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	e000      	b.n	8002ed8 <HAL_ADC_PollForConversion+0x138>
 8002ed6:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <HAL_ADC_PollForConversion+0x1ac>)
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d008      	beq.n	8002ef2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d005      	beq.n	8002ef2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2b05      	cmp	r3, #5
 8002eea:	d002      	beq.n	8002ef2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	2b09      	cmp	r3, #9
 8002ef0:	d104      	bne.n	8002efc <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	61bb      	str	r3, [r7, #24]
 8002efa:	e00c      	b.n	8002f16 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a11      	ldr	r2, [pc, #68]	; (8002f48 <HAL_ADC_PollForConversion+0x1a8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d002      	beq.n	8002f0c <HAL_ADC_PollForConversion+0x16c>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	e000      	b.n	8002f0e <HAL_ADC_PollForConversion+0x16e>
 8002f0c:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <HAL_ADC_PollForConversion+0x1ac>)
 8002f0e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d104      	bne.n	8002f26 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2208      	movs	r2, #8
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	e008      	b.n	8002f38 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d103      	bne.n	8002f38 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	220c      	movs	r2, #12
 8002f36:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3720      	adds	r7, #32
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40022300 	.word	0x40022300
 8002f48:	40022100 	.word	0x40022100
 8002f4c:	40022000 	.word	0x40022000

08002f50 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
	...

08002f6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002f6c:	b590      	push	{r4, r7, lr}
 8002f6e:	b0a1      	sub	sp, #132	; 0x84
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	4a9a      	ldr	r2, [pc, #616]	; (80031f0 <HAL_ADC_ConfigChannel+0x284>)
 8002f86:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x2a>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e2bc      	b.n	8003510 <HAL_ADC_ConfigChannel+0x5a4>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff fcc2 	bl	800292c <LL_ADC_REG_IsConversionOngoing>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f040 82a1 	bne.w	80034f2 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d108      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x62>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	0e9b      	lsrs	r3, r3, #26
 8002fc2:	f003 031f 	and.w	r3, r3, #31
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	e016      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x90>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fd6:	fa93 f3a3 	rbit	r3, r3
 8002fda:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fde:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002fe0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002fe6:	2320      	movs	r3, #32
 8002fe8:	e003      	b.n	8002ff2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002fea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fec:	fab3 f383 	clz	r3, r3
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	f003 031f 	and.w	r3, r3, #31
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6812      	ldr	r2, [r2, #0]
 8003000:	69d1      	ldr	r1, [r2, #28]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6812      	ldr	r2, [r2, #0]
 8003006:	430b      	orrs	r3, r1
 8003008:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6818      	ldr	r0, [r3, #0]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	6859      	ldr	r1, [r3, #4]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	f7ff fb67 	bl	80026ea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff fc83 	bl	800292c <LL_ADC_REG_IsConversionOngoing>
 8003026:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff fc90 	bl	8002952 <LL_ADC_INJ_IsConversionOngoing>
 8003032:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003034:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003036:	2b00      	cmp	r3, #0
 8003038:	f040 80a0 	bne.w	800317c <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800303c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800303e:	2b00      	cmp	r3, #0
 8003040:	f040 809c 	bne.w	800317c <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6818      	ldr	r0, [r3, #0]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	6819      	ldr	r1, [r3, #0]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	461a      	mov	r2, r3
 8003052:	f7ff fb76 	bl	8002742 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f003 0310 	and.w	r3, r3, #16
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10b      	bne.n	800307c <HAL_ADC_ConfigChannel+0x110>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	695a      	ldr	r2, [r3, #20]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	089b      	lsrs	r3, r3, #2
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	e00a      	b.n	8003092 <HAL_ADC_ConfigChannel+0x126>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	695a      	ldr	r2, [r3, #20]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	089b      	lsrs	r3, r3, #2
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	2b04      	cmp	r3, #4
 800309a:	d027      	beq.n	80030ec <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6818      	ldr	r0, [r3, #0]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	6919      	ldr	r1, [r3, #16]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030aa:	f7ff fab7 	bl	800261c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	6919      	ldr	r1, [r3, #16]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	7e5b      	ldrb	r3, [r3, #25]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d102      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x158>
 80030be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80030c2:	e000      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x15a>
 80030c4:	2300      	movs	r3, #0
 80030c6:	461a      	mov	r2, r3
 80030c8:	f7ff fae1 	bl	800268e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6818      	ldr	r0, [r3, #0]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	6919      	ldr	r1, [r3, #16]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	7e1b      	ldrb	r3, [r3, #24]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d102      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x176>
 80030dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030e0:	e000      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x178>
 80030e2:	2300      	movs	r3, #0
 80030e4:	461a      	mov	r2, r3
 80030e6:	f7ff fab9 	bl	800265c <LL_ADC_SetDataRightShift>
 80030ea:	e047      	b.n	800317c <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	069b      	lsls	r3, r3, #26
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d107      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800310e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003116:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	069b      	lsls	r3, r3, #26
 8003120:	429a      	cmp	r2, r3
 8003122:	d107      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003132:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800313a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	069b      	lsls	r3, r3, #26
 8003144:	429a      	cmp	r2, r3
 8003146:	d107      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003156:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800315e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	069b      	lsls	r3, r3, #26
 8003168:	429a      	cmp	r2, r3
 800316a:	d107      	bne.n	800317c <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800317a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff fbab 	bl	80028dc <LL_ADC_IsEnabled>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	f040 81bb 	bne.w	8003504 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6818      	ldr	r0, [r3, #0]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	6819      	ldr	r1, [r3, #0]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	461a      	mov	r2, r3
 800319c:	f7ff fafc 	bl	8002798 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	4a12      	ldr	r2, [pc, #72]	; (80031f0 <HAL_ADC_ConfigChannel+0x284>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	f040 8130 	bne.w	800340c <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10b      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x268>
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	0e9b      	lsrs	r3, r3, #26
 80031c2:	3301      	adds	r3, #1
 80031c4:	f003 031f 	and.w	r3, r3, #31
 80031c8:	2b09      	cmp	r3, #9
 80031ca:	bf94      	ite	ls
 80031cc:	2301      	movls	r3, #1
 80031ce:	2300      	movhi	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	e01b      	b.n	800320c <HAL_ADC_ConfigChannel+0x2a0>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031dc:	fa93 f3a3 	rbit	r3, r3
 80031e0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80031e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80031e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d103      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 80031ec:	2320      	movs	r3, #32
 80031ee:	e005      	b.n	80031fc <HAL_ADC_ConfigChannel+0x290>
 80031f0:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 80031f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031f6:	fab3 f383 	clz	r3, r3
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	3301      	adds	r3, #1
 80031fe:	f003 031f 	and.w	r3, r3, #31
 8003202:	2b09      	cmp	r3, #9
 8003204:	bf94      	ite	ls
 8003206:	2301      	movls	r3, #1
 8003208:	2300      	movhi	r3, #0
 800320a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800320c:	2b00      	cmp	r3, #0
 800320e:	d079      	beq.n	8003304 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003218:	2b00      	cmp	r3, #0
 800321a:	d107      	bne.n	800322c <HAL_ADC_ConfigChannel+0x2c0>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	0e9b      	lsrs	r3, r3, #26
 8003222:	3301      	adds	r3, #1
 8003224:	069b      	lsls	r3, r3, #26
 8003226:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800322a:	e015      	b.n	8003258 <HAL_ADC_ConfigChannel+0x2ec>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003234:	fa93 f3a3 	rbit	r3, r3
 8003238:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800323a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800323c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800323e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8003244:	2320      	movs	r3, #32
 8003246:	e003      	b.n	8003250 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8003248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800324a:	fab3 f383 	clz	r3, r3
 800324e:	b2db      	uxtb	r3, r3
 8003250:	3301      	adds	r3, #1
 8003252:	069b      	lsls	r3, r3, #26
 8003254:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003260:	2b00      	cmp	r3, #0
 8003262:	d109      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x30c>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	0e9b      	lsrs	r3, r3, #26
 800326a:	3301      	adds	r3, #1
 800326c:	f003 031f 	and.w	r3, r3, #31
 8003270:	2101      	movs	r1, #1
 8003272:	fa01 f303 	lsl.w	r3, r1, r3
 8003276:	e017      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x33c>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003280:	fa93 f3a3 	rbit	r3, r3
 8003284:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003288:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800328a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8003290:	2320      	movs	r3, #32
 8003292:	e003      	b.n	800329c <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8003294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003296:	fab3 f383 	clz	r3, r3
 800329a:	b2db      	uxtb	r3, r3
 800329c:	3301      	adds	r3, #1
 800329e:	f003 031f 	and.w	r3, r3, #31
 80032a2:	2101      	movs	r1, #1
 80032a4:	fa01 f303 	lsl.w	r3, r1, r3
 80032a8:	ea42 0103 	orr.w	r1, r2, r3
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10a      	bne.n	80032ce <HAL_ADC_ConfigChannel+0x362>
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	0e9b      	lsrs	r3, r3, #26
 80032be:	3301      	adds	r3, #1
 80032c0:	f003 021f 	and.w	r2, r3, #31
 80032c4:	4613      	mov	r3, r2
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	4413      	add	r3, r2
 80032ca:	051b      	lsls	r3, r3, #20
 80032cc:	e018      	b.n	8003300 <HAL_ADC_ConfigChannel+0x394>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d6:	fa93 f3a3 	rbit	r3, r3
 80032da:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80032dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80032e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80032e6:	2320      	movs	r3, #32
 80032e8:	e003      	b.n	80032f2 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 80032ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ec:	fab3 f383 	clz	r3, r3
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	3301      	adds	r3, #1
 80032f4:	f003 021f 	and.w	r2, r3, #31
 80032f8:	4613      	mov	r3, r2
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	4413      	add	r3, r2
 80032fe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003300:	430b      	orrs	r3, r1
 8003302:	e07e      	b.n	8003402 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800330c:	2b00      	cmp	r3, #0
 800330e:	d107      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x3b4>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	0e9b      	lsrs	r3, r3, #26
 8003316:	3301      	adds	r3, #1
 8003318:	069b      	lsls	r3, r3, #26
 800331a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800331e:	e015      	b.n	800334c <HAL_ADC_ConfigChannel+0x3e0>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003328:	fa93 f3a3 	rbit	r3, r3
 800332c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003338:	2320      	movs	r3, #32
 800333a:	e003      	b.n	8003344 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800333c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333e:	fab3 f383 	clz	r3, r3
 8003342:	b2db      	uxtb	r3, r3
 8003344:	3301      	adds	r3, #1
 8003346:	069b      	lsls	r3, r3, #26
 8003348:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003354:	2b00      	cmp	r3, #0
 8003356:	d109      	bne.n	800336c <HAL_ADC_ConfigChannel+0x400>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	0e9b      	lsrs	r3, r3, #26
 800335e:	3301      	adds	r3, #1
 8003360:	f003 031f 	and.w	r3, r3, #31
 8003364:	2101      	movs	r1, #1
 8003366:	fa01 f303 	lsl.w	r3, r1, r3
 800336a:	e017      	b.n	800339c <HAL_ADC_ConfigChannel+0x430>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	fa93 f3a3 	rbit	r3, r3
 8003378:	61bb      	str	r3, [r7, #24]
  return result;
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800337e:	6a3b      	ldr	r3, [r7, #32]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8003384:	2320      	movs	r3, #32
 8003386:	e003      	b.n	8003390 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	fab3 f383 	clz	r3, r3
 800338e:	b2db      	uxtb	r3, r3
 8003390:	3301      	adds	r3, #1
 8003392:	f003 031f 	and.w	r3, r3, #31
 8003396:	2101      	movs	r1, #1
 8003398:	fa01 f303 	lsl.w	r3, r1, r3
 800339c:	ea42 0103 	orr.w	r1, r2, r3
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10d      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x45c>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	0e9b      	lsrs	r3, r3, #26
 80033b2:	3301      	adds	r3, #1
 80033b4:	f003 021f 	and.w	r2, r3, #31
 80033b8:	4613      	mov	r3, r2
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	4413      	add	r3, r2
 80033be:	3b1e      	subs	r3, #30
 80033c0:	051b      	lsls	r3, r3, #20
 80033c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033c6:	e01b      	b.n	8003400 <HAL_ADC_ConfigChannel+0x494>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	fa93 f3a3 	rbit	r3, r3
 80033d4:	60fb      	str	r3, [r7, #12]
  return result;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 80033e0:	2320      	movs	r3, #32
 80033e2:	e003      	b.n	80033ec <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	fab3 f383 	clz	r3, r3
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	3301      	adds	r3, #1
 80033ee:	f003 021f 	and.w	r2, r3, #31
 80033f2:	4613      	mov	r3, r2
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	4413      	add	r3, r2
 80033f8:	3b1e      	subs	r3, #30
 80033fa:	051b      	lsls	r3, r3, #20
 80033fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003400:	430b      	orrs	r3, r1
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	6892      	ldr	r2, [r2, #8]
 8003406:	4619      	mov	r1, r3
 8003408:	f7ff f99b 	bl	8002742 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	da77      	bge.n	8003504 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003414:	4840      	ldr	r0, [pc, #256]	; (8003518 <HAL_ADC_ConfigChannel+0x5ac>)
 8003416:	f7ff f8f3 	bl	8002600 <LL_ADC_GetCommonPathInternalCh>
 800341a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800341c:	483f      	ldr	r0, [pc, #252]	; (800351c <HAL_ADC_ConfigChannel+0x5b0>)
 800341e:	f7ff fa5d 	bl	80028dc <LL_ADC_IsEnabled>
 8003422:	4604      	mov	r4, r0
 8003424:	483e      	ldr	r0, [pc, #248]	; (8003520 <HAL_ADC_ConfigChannel+0x5b4>)
 8003426:	f7ff fa59 	bl	80028dc <LL_ADC_IsEnabled>
 800342a:	4603      	mov	r3, r0
 800342c:	4323      	orrs	r3, r4
 800342e:	2b00      	cmp	r3, #0
 8003430:	d155      	bne.n	80034de <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a3b      	ldr	r2, [pc, #236]	; (8003524 <HAL_ADC_ConfigChannel+0x5b8>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d122      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x516>
 800343c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800343e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d11d      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a35      	ldr	r2, [pc, #212]	; (8003520 <HAL_ADC_ConfigChannel+0x5b4>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d159      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003452:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003456:	4619      	mov	r1, r3
 8003458:	482f      	ldr	r0, [pc, #188]	; (8003518 <HAL_ADC_ConfigChannel+0x5ac>)
 800345a:	f7ff f8be 	bl	80025da <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800345e:	4b32      	ldr	r3, [pc, #200]	; (8003528 <HAL_ADC_ConfigChannel+0x5bc>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	099b      	lsrs	r3, r3, #6
 8003464:	4a31      	ldr	r2, [pc, #196]	; (800352c <HAL_ADC_ConfigChannel+0x5c0>)
 8003466:	fba2 2303 	umull	r2, r3, r2, r3
 800346a:	099b      	lsrs	r3, r3, #6
 800346c:	3301      	adds	r3, #1
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003472:	e002      	b.n	800347a <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	3b01      	subs	r3, #1
 8003478:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1f9      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003480:	e040      	b.n	8003504 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a2a      	ldr	r2, [pc, #168]	; (8003530 <HAL_ADC_ConfigChannel+0x5c4>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d111      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x544>
 800348c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800348e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10c      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a21      	ldr	r2, [pc, #132]	; (8003520 <HAL_ADC_ConfigChannel+0x5b4>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d131      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80034a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034a6:	4619      	mov	r1, r3
 80034a8:	481b      	ldr	r0, [pc, #108]	; (8003518 <HAL_ADC_ConfigChannel+0x5ac>)
 80034aa:	f7ff f896 	bl	80025da <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034ae:	e029      	b.n	8003504 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a1f      	ldr	r2, [pc, #124]	; (8003534 <HAL_ADC_ConfigChannel+0x5c8>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d124      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x598>
 80034ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d11f      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a15      	ldr	r2, [pc, #84]	; (8003520 <HAL_ADC_ConfigChannel+0x5b4>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d11a      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80034ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034d4:	4619      	mov	r1, r3
 80034d6:	4810      	ldr	r0, [pc, #64]	; (8003518 <HAL_ADC_ConfigChannel+0x5ac>)
 80034d8:	f7ff f87f 	bl	80025da <LL_ADC_SetCommonPathInternalCh>
 80034dc:	e012      	b.n	8003504 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e2:	f043 0220 	orr.w	r2, r3, #32
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80034f0:	e008      	b.n	8003504 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f6:	f043 0220 	orr.w	r2, r3, #32
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800350c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003510:	4618      	mov	r0, r3
 8003512:	3784      	adds	r7, #132	; 0x84
 8003514:	46bd      	mov	sp, r7
 8003516:	bd90      	pop	{r4, r7, pc}
 8003518:	40022300 	.word	0x40022300
 800351c:	40022000 	.word	0x40022000
 8003520:	40022100 	.word	0x40022100
 8003524:	cb840000 	.word	0xcb840000
 8003528:	24000008 	.word	0x24000008
 800352c:	053e2d63 	.word	0x053e2d63
 8003530:	bac04000 	.word	0xbac04000
 8003534:	cfb80000 	.word	0xcfb80000

08003538 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff f9c9 	bl	80028dc <LL_ADC_IsEnabled>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d161      	bne.n	8003614 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689a      	ldr	r2, [r3, #8]
 8003556:	4b32      	ldr	r3, [pc, #200]	; (8003620 <ADC_Enable+0xe8>)
 8003558:	4013      	ands	r3, r2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00d      	beq.n	800357a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003562:	f043 0210 	orr.w	r2, r3, #16
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356e:	f043 0201 	orr.w	r2, r3, #1
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e04d      	b.n	8003616 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff f998 	bl	80028b4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003584:	f7fe ffe6 	bl	8002554 <HAL_GetTick>
 8003588:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800358a:	4826      	ldr	r0, [pc, #152]	; (8003624 <ADC_Enable+0xec>)
 800358c:	f7ff f928 	bl	80027e0 <LL_ADC_GetMultimode>
 8003590:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a24      	ldr	r2, [pc, #144]	; (8003628 <ADC_Enable+0xf0>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d002      	beq.n	80035a2 <ADC_Enable+0x6a>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	e000      	b.n	80035a4 <ADC_Enable+0x6c>
 80035a2:	4b22      	ldr	r3, [pc, #136]	; (800362c <ADC_Enable+0xf4>)
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6812      	ldr	r2, [r2, #0]
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d02c      	beq.n	8003606 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d130      	bne.n	8003614 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035b2:	e028      	b.n	8003606 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff f98f 	bl	80028dc <LL_ADC_IsEnabled>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d104      	bne.n	80035ce <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff f973 	bl	80028b4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035ce:	f7fe ffc1 	bl	8002554 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d914      	bls.n	8003606 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d00d      	beq.n	8003606 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ee:	f043 0210 	orr.w	r2, r3, #16
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fa:	f043 0201 	orr.w	r2, r3, #1
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e007      	b.n	8003616 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b01      	cmp	r3, #1
 8003612:	d1cf      	bne.n	80035b4 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	8000003f 	.word	0x8000003f
 8003624:	40022300 	.word	0x40022300
 8003628:	40022100 	.word	0x40022100
 800362c:	40022000 	.word	0x40022000

08003630 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003638:	4b60      	ldr	r3, [pc, #384]	; (80037bc <ADC_ConfigureBoostMode+0x18c>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d01c      	beq.n	800367e <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003644:	f002 ff22 	bl	800648c <HAL_RCC_GetHCLKFreq>
 8003648:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003652:	d010      	beq.n	8003676 <ADC_ConfigureBoostMode+0x46>
 8003654:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003658:	d873      	bhi.n	8003742 <ADC_ConfigureBoostMode+0x112>
 800365a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800365e:	d002      	beq.n	8003666 <ADC_ConfigureBoostMode+0x36>
 8003660:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003664:	d16d      	bne.n	8003742 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	0c1b      	lsrs	r3, r3, #16
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003672:	60fb      	str	r3, [r7, #12]
        break;
 8003674:	e068      	b.n	8003748 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	089b      	lsrs	r3, r3, #2
 800367a:	60fb      	str	r3, [r7, #12]
        break;
 800367c:	e064      	b.n	8003748 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800367e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003682:	f04f 0100 	mov.w	r1, #0
 8003686:	f004 f91b 	bl	80078c0 <HAL_RCCEx_GetPeriphCLKFreq>
 800368a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003694:	d051      	beq.n	800373a <ADC_ConfigureBoostMode+0x10a>
 8003696:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800369a:	d854      	bhi.n	8003746 <ADC_ConfigureBoostMode+0x116>
 800369c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80036a0:	d047      	beq.n	8003732 <ADC_ConfigureBoostMode+0x102>
 80036a2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80036a6:	d84e      	bhi.n	8003746 <ADC_ConfigureBoostMode+0x116>
 80036a8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80036ac:	d03d      	beq.n	800372a <ADC_ConfigureBoostMode+0xfa>
 80036ae:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80036b2:	d848      	bhi.n	8003746 <ADC_ConfigureBoostMode+0x116>
 80036b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036b8:	d033      	beq.n	8003722 <ADC_ConfigureBoostMode+0xf2>
 80036ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036be:	d842      	bhi.n	8003746 <ADC_ConfigureBoostMode+0x116>
 80036c0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80036c4:	d029      	beq.n	800371a <ADC_ConfigureBoostMode+0xea>
 80036c6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80036ca:	d83c      	bhi.n	8003746 <ADC_ConfigureBoostMode+0x116>
 80036cc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80036d0:	d01a      	beq.n	8003708 <ADC_ConfigureBoostMode+0xd8>
 80036d2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80036d6:	d836      	bhi.n	8003746 <ADC_ConfigureBoostMode+0x116>
 80036d8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80036dc:	d014      	beq.n	8003708 <ADC_ConfigureBoostMode+0xd8>
 80036de:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80036e2:	d830      	bhi.n	8003746 <ADC_ConfigureBoostMode+0x116>
 80036e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036e8:	d00e      	beq.n	8003708 <ADC_ConfigureBoostMode+0xd8>
 80036ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036ee:	d82a      	bhi.n	8003746 <ADC_ConfigureBoostMode+0x116>
 80036f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80036f4:	d008      	beq.n	8003708 <ADC_ConfigureBoostMode+0xd8>
 80036f6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80036fa:	d824      	bhi.n	8003746 <ADC_ConfigureBoostMode+0x116>
 80036fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003700:	d002      	beq.n	8003708 <ADC_ConfigureBoostMode+0xd8>
 8003702:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003706:	d11e      	bne.n	8003746 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	0c9b      	lsrs	r3, r3, #18
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	fbb2 f3f3 	udiv	r3, r2, r3
 8003716:	60fb      	str	r3, [r7, #12]
        break;
 8003718:	e016      	b.n	8003748 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	091b      	lsrs	r3, r3, #4
 800371e:	60fb      	str	r3, [r7, #12]
        break;
 8003720:	e012      	b.n	8003748 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	095b      	lsrs	r3, r3, #5
 8003726:	60fb      	str	r3, [r7, #12]
        break;
 8003728:	e00e      	b.n	8003748 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	099b      	lsrs	r3, r3, #6
 800372e:	60fb      	str	r3, [r7, #12]
        break;
 8003730:	e00a      	b.n	8003748 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	09db      	lsrs	r3, r3, #7
 8003736:	60fb      	str	r3, [r7, #12]
        break;
 8003738:	e006      	b.n	8003748 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	0a1b      	lsrs	r3, r3, #8
 800373e:	60fb      	str	r3, [r7, #12]
        break;
 8003740:	e002      	b.n	8003748 <ADC_ConfigureBoostMode+0x118>
        break;
 8003742:	bf00      	nop
 8003744:	e000      	b.n	8003748 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8003746:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	085b      	lsrs	r3, r3, #1
 800374c:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4a1b      	ldr	r2, [pc, #108]	; (80037c0 <ADC_ConfigureBoostMode+0x190>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d808      	bhi.n	8003768 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003764:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003766:	e025      	b.n	80037b4 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4a16      	ldr	r2, [pc, #88]	; (80037c4 <ADC_ConfigureBoostMode+0x194>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d80a      	bhi.n	8003786 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003782:	609a      	str	r2, [r3, #8]
}
 8003784:	e016      	b.n	80037b4 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	4a0f      	ldr	r2, [pc, #60]	; (80037c8 <ADC_ConfigureBoostMode+0x198>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d80a      	bhi.n	80037a4 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a0:	609a      	str	r2, [r3, #8]
}
 80037a2:	e007      	b.n	80037b4 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80037b2:	609a      	str	r2, [r3, #8]
}
 80037b4:	bf00      	nop
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40022300 	.word	0x40022300
 80037c0:	005f5e10 	.word	0x005f5e10
 80037c4:	00bebc20 	.word	0x00bebc20
 80037c8:	017d7840 	.word	0x017d7840

080037cc <LL_ADC_IsEnabled>:
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d101      	bne.n	80037e4 <LL_ADC_IsEnabled+0x18>
 80037e0:	2301      	movs	r3, #1
 80037e2:	e000      	b.n	80037e6 <LL_ADC_IsEnabled+0x1a>
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <LL_ADC_REG_IsConversionOngoing>:
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 0304 	and.w	r3, r3, #4
 8003802:	2b04      	cmp	r3, #4
 8003804:	d101      	bne.n	800380a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003818:	b590      	push	{r4, r7, lr}
 800381a:	b09f      	sub	sp, #124	; 0x7c
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003822:	2300      	movs	r3, #0
 8003824:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800382e:	2b01      	cmp	r3, #1
 8003830:	d101      	bne.n	8003836 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003832:	2302      	movs	r3, #2
 8003834:	e080      	b.n	8003938 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800383e:	2300      	movs	r3, #0
 8003840:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003842:	2300      	movs	r3, #0
 8003844:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a3d      	ldr	r2, [pc, #244]	; (8003940 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d102      	bne.n	8003856 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003850:	4b3c      	ldr	r3, [pc, #240]	; (8003944 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003852:	60bb      	str	r3, [r7, #8]
 8003854:	e001      	b.n	800385a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003856:	2300      	movs	r3, #0
 8003858:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10b      	bne.n	8003878 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003864:	f043 0220 	orr.w	r2, r3, #32
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e05f      	b.n	8003938 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff ffb9 	bl	80037f2 <LL_ADC_REG_IsConversionOngoing>
 8003880:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff ffb3 	bl	80037f2 <LL_ADC_REG_IsConversionOngoing>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d141      	bne.n	8003916 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003892:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003894:	2b00      	cmp	r3, #0
 8003896:	d13e      	bne.n	8003916 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003898:	4b2b      	ldr	r3, [pc, #172]	; (8003948 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 800389a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d020      	beq.n	80038e6 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80038a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	431a      	orrs	r2, r3
 80038b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038b6:	4822      	ldr	r0, [pc, #136]	; (8003940 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80038b8:	f7ff ff88 	bl	80037cc <LL_ADC_IsEnabled>
 80038bc:	4604      	mov	r4, r0
 80038be:	4821      	ldr	r0, [pc, #132]	; (8003944 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80038c0:	f7ff ff84 	bl	80037cc <LL_ADC_IsEnabled>
 80038c4:	4603      	mov	r3, r0
 80038c6:	4323      	orrs	r3, r4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d12e      	bne.n	800392a <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80038cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	4b1e      	ldr	r3, [pc, #120]	; (800394c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	6811      	ldr	r1, [r2, #0]
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	6892      	ldr	r2, [r2, #8]
 80038dc:	430a      	orrs	r2, r1
 80038de:	431a      	orrs	r2, r3
 80038e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038e4:	e021      	b.n	800392a <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80038e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038f2:	4813      	ldr	r0, [pc, #76]	; (8003940 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80038f4:	f7ff ff6a 	bl	80037cc <LL_ADC_IsEnabled>
 80038f8:	4604      	mov	r4, r0
 80038fa:	4812      	ldr	r0, [pc, #72]	; (8003944 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80038fc:	f7ff ff66 	bl	80037cc <LL_ADC_IsEnabled>
 8003900:	4603      	mov	r3, r0
 8003902:	4323      	orrs	r3, r4
 8003904:	2b00      	cmp	r3, #0
 8003906:	d110      	bne.n	800392a <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	4b0f      	ldr	r3, [pc, #60]	; (800394c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800390e:	4013      	ands	r3, r2
 8003910:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003912:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003914:	e009      	b.n	800392a <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391a:	f043 0220 	orr.w	r2, r3, #32
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003928:	e000      	b.n	800392c <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800392a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003934:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003938:	4618      	mov	r0, r3
 800393a:	377c      	adds	r7, #124	; 0x7c
 800393c:	46bd      	mov	sp, r7
 800393e:	bd90      	pop	{r4, r7, pc}
 8003940:	40022000 	.word	0x40022000
 8003944:	40022100 	.word	0x40022100
 8003948:	40022300 	.word	0x40022300
 800394c:	fffff0e0 	.word	0xfffff0e0

08003950 <__NVIC_SetPriorityGrouping>:
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003960:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <__NVIC_SetPriorityGrouping+0x40>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800396c:	4013      	ands	r3, r2
 800396e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003978:	4b06      	ldr	r3, [pc, #24]	; (8003994 <__NVIC_SetPriorityGrouping+0x44>)
 800397a:	4313      	orrs	r3, r2
 800397c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800397e:	4a04      	ldr	r2, [pc, #16]	; (8003990 <__NVIC_SetPriorityGrouping+0x40>)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	60d3      	str	r3, [r2, #12]
}
 8003984:	bf00      	nop
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	e000ed00 	.word	0xe000ed00
 8003994:	05fa0000 	.word	0x05fa0000

08003998 <__NVIC_GetPriorityGrouping>:
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800399c:	4b04      	ldr	r3, [pc, #16]	; (80039b0 <__NVIC_GetPriorityGrouping+0x18>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	0a1b      	lsrs	r3, r3, #8
 80039a2:	f003 0307 	and.w	r3, r3, #7
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	e000ed00 	.word	0xe000ed00

080039b4 <__NVIC_EnableIRQ>:
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	4603      	mov	r3, r0
 80039bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80039be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	db0b      	blt.n	80039de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039c6:	88fb      	ldrh	r3, [r7, #6]
 80039c8:	f003 021f 	and.w	r2, r3, #31
 80039cc:	4907      	ldr	r1, [pc, #28]	; (80039ec <__NVIC_EnableIRQ+0x38>)
 80039ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039d2:	095b      	lsrs	r3, r3, #5
 80039d4:	2001      	movs	r0, #1
 80039d6:	fa00 f202 	lsl.w	r2, r0, r2
 80039da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	e000e100 	.word	0xe000e100

080039f0 <__NVIC_SetPriority>:
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4603      	mov	r3, r0
 80039f8:	6039      	str	r1, [r7, #0]
 80039fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80039fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	db0a      	blt.n	8003a1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	490c      	ldr	r1, [pc, #48]	; (8003a3c <__NVIC_SetPriority+0x4c>)
 8003a0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a0e:	0112      	lsls	r2, r2, #4
 8003a10:	b2d2      	uxtb	r2, r2
 8003a12:	440b      	add	r3, r1
 8003a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a18:	e00a      	b.n	8003a30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	4908      	ldr	r1, [pc, #32]	; (8003a40 <__NVIC_SetPriority+0x50>)
 8003a20:	88fb      	ldrh	r3, [r7, #6]
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	3b04      	subs	r3, #4
 8003a28:	0112      	lsls	r2, r2, #4
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	761a      	strb	r2, [r3, #24]
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	e000e100 	.word	0xe000e100
 8003a40:	e000ed00 	.word	0xe000ed00

08003a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b089      	sub	sp, #36	; 0x24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f1c3 0307 	rsb	r3, r3, #7
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	bf28      	it	cs
 8003a62:	2304      	movcs	r3, #4
 8003a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	2b06      	cmp	r3, #6
 8003a6c:	d902      	bls.n	8003a74 <NVIC_EncodePriority+0x30>
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	3b03      	subs	r3, #3
 8003a72:	e000      	b.n	8003a76 <NVIC_EncodePriority+0x32>
 8003a74:	2300      	movs	r3, #0
 8003a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a78:	f04f 32ff 	mov.w	r2, #4294967295
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a82:	43da      	mvns	r2, r3
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	401a      	ands	r2, r3
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	fa01 f303 	lsl.w	r3, r1, r3
 8003a96:	43d9      	mvns	r1, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a9c:	4313      	orrs	r3, r2
         );
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3724      	adds	r7, #36	; 0x24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
	...

08003aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003abc:	d301      	bcc.n	8003ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e00f      	b.n	8003ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ac2:	4a0a      	ldr	r2, [pc, #40]	; (8003aec <SysTick_Config+0x40>)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aca:	210f      	movs	r1, #15
 8003acc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad0:	f7ff ff8e 	bl	80039f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ad4:	4b05      	ldr	r3, [pc, #20]	; (8003aec <SysTick_Config+0x40>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ada:	4b04      	ldr	r3, [pc, #16]	; (8003aec <SysTick_Config+0x40>)
 8003adc:	2207      	movs	r2, #7
 8003ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	e000e010 	.word	0xe000e010

08003af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff ff29 	bl	8003950 <__NVIC_SetPriorityGrouping>
}
 8003afe:	bf00      	nop
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b086      	sub	sp, #24
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	607a      	str	r2, [r7, #4]
 8003b12:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b14:	f7ff ff40 	bl	8003998 <__NVIC_GetPriorityGrouping>
 8003b18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	68b9      	ldr	r1, [r7, #8]
 8003b1e:	6978      	ldr	r0, [r7, #20]
 8003b20:	f7ff ff90 	bl	8003a44 <NVIC_EncodePriority>
 8003b24:	4602      	mov	r2, r0
 8003b26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff ff5f 	bl	80039f0 <__NVIC_SetPriority>
}
 8003b32:	bf00      	nop
 8003b34:	3718      	adds	r7, #24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b082      	sub	sp, #8
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	4603      	mov	r3, r0
 8003b42:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff ff33 	bl	80039b4 <__NVIC_EnableIRQ>
}
 8003b4e:	bf00      	nop
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b082      	sub	sp, #8
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7ff ffa4 	bl	8003aac <SysTick_Config>
 8003b64:	4603      	mov	r3, r0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003b78:	f7fe fcec 	bl	8002554 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e2dc      	b.n	8004142 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d008      	beq.n	8003ba6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2280      	movs	r2, #128	; 0x80
 8003b98:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e2cd      	b.n	8004142 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a76      	ldr	r2, [pc, #472]	; (8003d84 <HAL_DMA_Abort+0x214>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d04a      	beq.n	8003c46 <HAL_DMA_Abort+0xd6>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a74      	ldr	r2, [pc, #464]	; (8003d88 <HAL_DMA_Abort+0x218>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d045      	beq.n	8003c46 <HAL_DMA_Abort+0xd6>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a73      	ldr	r2, [pc, #460]	; (8003d8c <HAL_DMA_Abort+0x21c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d040      	beq.n	8003c46 <HAL_DMA_Abort+0xd6>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a71      	ldr	r2, [pc, #452]	; (8003d90 <HAL_DMA_Abort+0x220>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d03b      	beq.n	8003c46 <HAL_DMA_Abort+0xd6>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a70      	ldr	r2, [pc, #448]	; (8003d94 <HAL_DMA_Abort+0x224>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d036      	beq.n	8003c46 <HAL_DMA_Abort+0xd6>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a6e      	ldr	r2, [pc, #440]	; (8003d98 <HAL_DMA_Abort+0x228>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d031      	beq.n	8003c46 <HAL_DMA_Abort+0xd6>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a6d      	ldr	r2, [pc, #436]	; (8003d9c <HAL_DMA_Abort+0x22c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d02c      	beq.n	8003c46 <HAL_DMA_Abort+0xd6>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a6b      	ldr	r2, [pc, #428]	; (8003da0 <HAL_DMA_Abort+0x230>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d027      	beq.n	8003c46 <HAL_DMA_Abort+0xd6>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a6a      	ldr	r2, [pc, #424]	; (8003da4 <HAL_DMA_Abort+0x234>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d022      	beq.n	8003c46 <HAL_DMA_Abort+0xd6>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a68      	ldr	r2, [pc, #416]	; (8003da8 <HAL_DMA_Abort+0x238>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d01d      	beq.n	8003c46 <HAL_DMA_Abort+0xd6>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a67      	ldr	r2, [pc, #412]	; (8003dac <HAL_DMA_Abort+0x23c>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d018      	beq.n	8003c46 <HAL_DMA_Abort+0xd6>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a65      	ldr	r2, [pc, #404]	; (8003db0 <HAL_DMA_Abort+0x240>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d013      	beq.n	8003c46 <HAL_DMA_Abort+0xd6>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a64      	ldr	r2, [pc, #400]	; (8003db4 <HAL_DMA_Abort+0x244>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d00e      	beq.n	8003c46 <HAL_DMA_Abort+0xd6>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a62      	ldr	r2, [pc, #392]	; (8003db8 <HAL_DMA_Abort+0x248>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d009      	beq.n	8003c46 <HAL_DMA_Abort+0xd6>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a61      	ldr	r2, [pc, #388]	; (8003dbc <HAL_DMA_Abort+0x24c>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d004      	beq.n	8003c46 <HAL_DMA_Abort+0xd6>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a5f      	ldr	r2, [pc, #380]	; (8003dc0 <HAL_DMA_Abort+0x250>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d101      	bne.n	8003c4a <HAL_DMA_Abort+0xda>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <HAL_DMA_Abort+0xdc>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d013      	beq.n	8003c78 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 021e 	bic.w	r2, r2, #30
 8003c5e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695a      	ldr	r2, [r3, #20]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c6e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	617b      	str	r3, [r7, #20]
 8003c76:	e00a      	b.n	8003c8e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 020e 	bic.w	r2, r2, #14
 8003c86:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a3c      	ldr	r2, [pc, #240]	; (8003d84 <HAL_DMA_Abort+0x214>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d072      	beq.n	8003d7e <HAL_DMA_Abort+0x20e>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a3a      	ldr	r2, [pc, #232]	; (8003d88 <HAL_DMA_Abort+0x218>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d06d      	beq.n	8003d7e <HAL_DMA_Abort+0x20e>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a39      	ldr	r2, [pc, #228]	; (8003d8c <HAL_DMA_Abort+0x21c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d068      	beq.n	8003d7e <HAL_DMA_Abort+0x20e>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a37      	ldr	r2, [pc, #220]	; (8003d90 <HAL_DMA_Abort+0x220>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d063      	beq.n	8003d7e <HAL_DMA_Abort+0x20e>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a36      	ldr	r2, [pc, #216]	; (8003d94 <HAL_DMA_Abort+0x224>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d05e      	beq.n	8003d7e <HAL_DMA_Abort+0x20e>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a34      	ldr	r2, [pc, #208]	; (8003d98 <HAL_DMA_Abort+0x228>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d059      	beq.n	8003d7e <HAL_DMA_Abort+0x20e>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a33      	ldr	r2, [pc, #204]	; (8003d9c <HAL_DMA_Abort+0x22c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d054      	beq.n	8003d7e <HAL_DMA_Abort+0x20e>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a31      	ldr	r2, [pc, #196]	; (8003da0 <HAL_DMA_Abort+0x230>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d04f      	beq.n	8003d7e <HAL_DMA_Abort+0x20e>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a30      	ldr	r2, [pc, #192]	; (8003da4 <HAL_DMA_Abort+0x234>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d04a      	beq.n	8003d7e <HAL_DMA_Abort+0x20e>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a2e      	ldr	r2, [pc, #184]	; (8003da8 <HAL_DMA_Abort+0x238>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d045      	beq.n	8003d7e <HAL_DMA_Abort+0x20e>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a2d      	ldr	r2, [pc, #180]	; (8003dac <HAL_DMA_Abort+0x23c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d040      	beq.n	8003d7e <HAL_DMA_Abort+0x20e>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a2b      	ldr	r2, [pc, #172]	; (8003db0 <HAL_DMA_Abort+0x240>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d03b      	beq.n	8003d7e <HAL_DMA_Abort+0x20e>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a2a      	ldr	r2, [pc, #168]	; (8003db4 <HAL_DMA_Abort+0x244>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d036      	beq.n	8003d7e <HAL_DMA_Abort+0x20e>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a28      	ldr	r2, [pc, #160]	; (8003db8 <HAL_DMA_Abort+0x248>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d031      	beq.n	8003d7e <HAL_DMA_Abort+0x20e>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a27      	ldr	r2, [pc, #156]	; (8003dbc <HAL_DMA_Abort+0x24c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d02c      	beq.n	8003d7e <HAL_DMA_Abort+0x20e>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a25      	ldr	r2, [pc, #148]	; (8003dc0 <HAL_DMA_Abort+0x250>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d027      	beq.n	8003d7e <HAL_DMA_Abort+0x20e>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a24      	ldr	r2, [pc, #144]	; (8003dc4 <HAL_DMA_Abort+0x254>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d022      	beq.n	8003d7e <HAL_DMA_Abort+0x20e>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a22      	ldr	r2, [pc, #136]	; (8003dc8 <HAL_DMA_Abort+0x258>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d01d      	beq.n	8003d7e <HAL_DMA_Abort+0x20e>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a21      	ldr	r2, [pc, #132]	; (8003dcc <HAL_DMA_Abort+0x25c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d018      	beq.n	8003d7e <HAL_DMA_Abort+0x20e>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a1f      	ldr	r2, [pc, #124]	; (8003dd0 <HAL_DMA_Abort+0x260>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d013      	beq.n	8003d7e <HAL_DMA_Abort+0x20e>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a1e      	ldr	r2, [pc, #120]	; (8003dd4 <HAL_DMA_Abort+0x264>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00e      	beq.n	8003d7e <HAL_DMA_Abort+0x20e>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a1c      	ldr	r2, [pc, #112]	; (8003dd8 <HAL_DMA_Abort+0x268>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d009      	beq.n	8003d7e <HAL_DMA_Abort+0x20e>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a1b      	ldr	r2, [pc, #108]	; (8003ddc <HAL_DMA_Abort+0x26c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d004      	beq.n	8003d7e <HAL_DMA_Abort+0x20e>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a19      	ldr	r2, [pc, #100]	; (8003de0 <HAL_DMA_Abort+0x270>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d132      	bne.n	8003de4 <HAL_DMA_Abort+0x274>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e031      	b.n	8003de6 <HAL_DMA_Abort+0x276>
 8003d82:	bf00      	nop
 8003d84:	40020010 	.word	0x40020010
 8003d88:	40020028 	.word	0x40020028
 8003d8c:	40020040 	.word	0x40020040
 8003d90:	40020058 	.word	0x40020058
 8003d94:	40020070 	.word	0x40020070
 8003d98:	40020088 	.word	0x40020088
 8003d9c:	400200a0 	.word	0x400200a0
 8003da0:	400200b8 	.word	0x400200b8
 8003da4:	40020410 	.word	0x40020410
 8003da8:	40020428 	.word	0x40020428
 8003dac:	40020440 	.word	0x40020440
 8003db0:	40020458 	.word	0x40020458
 8003db4:	40020470 	.word	0x40020470
 8003db8:	40020488 	.word	0x40020488
 8003dbc:	400204a0 	.word	0x400204a0
 8003dc0:	400204b8 	.word	0x400204b8
 8003dc4:	58025408 	.word	0x58025408
 8003dc8:	5802541c 	.word	0x5802541c
 8003dcc:	58025430 	.word	0x58025430
 8003dd0:	58025444 	.word	0x58025444
 8003dd4:	58025458 	.word	0x58025458
 8003dd8:	5802546c 	.word	0x5802546c
 8003ddc:	58025480 	.word	0x58025480
 8003de0:	58025494 	.word	0x58025494
 8003de4:	2300      	movs	r3, #0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d007      	beq.n	8003dfa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003df4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003df8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a6d      	ldr	r2, [pc, #436]	; (8003fb4 <HAL_DMA_Abort+0x444>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d04a      	beq.n	8003e9a <HAL_DMA_Abort+0x32a>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a6b      	ldr	r2, [pc, #428]	; (8003fb8 <HAL_DMA_Abort+0x448>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d045      	beq.n	8003e9a <HAL_DMA_Abort+0x32a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a6a      	ldr	r2, [pc, #424]	; (8003fbc <HAL_DMA_Abort+0x44c>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d040      	beq.n	8003e9a <HAL_DMA_Abort+0x32a>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a68      	ldr	r2, [pc, #416]	; (8003fc0 <HAL_DMA_Abort+0x450>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d03b      	beq.n	8003e9a <HAL_DMA_Abort+0x32a>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a67      	ldr	r2, [pc, #412]	; (8003fc4 <HAL_DMA_Abort+0x454>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d036      	beq.n	8003e9a <HAL_DMA_Abort+0x32a>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a65      	ldr	r2, [pc, #404]	; (8003fc8 <HAL_DMA_Abort+0x458>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d031      	beq.n	8003e9a <HAL_DMA_Abort+0x32a>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a64      	ldr	r2, [pc, #400]	; (8003fcc <HAL_DMA_Abort+0x45c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d02c      	beq.n	8003e9a <HAL_DMA_Abort+0x32a>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a62      	ldr	r2, [pc, #392]	; (8003fd0 <HAL_DMA_Abort+0x460>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d027      	beq.n	8003e9a <HAL_DMA_Abort+0x32a>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a61      	ldr	r2, [pc, #388]	; (8003fd4 <HAL_DMA_Abort+0x464>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d022      	beq.n	8003e9a <HAL_DMA_Abort+0x32a>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a5f      	ldr	r2, [pc, #380]	; (8003fd8 <HAL_DMA_Abort+0x468>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d01d      	beq.n	8003e9a <HAL_DMA_Abort+0x32a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a5e      	ldr	r2, [pc, #376]	; (8003fdc <HAL_DMA_Abort+0x46c>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d018      	beq.n	8003e9a <HAL_DMA_Abort+0x32a>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a5c      	ldr	r2, [pc, #368]	; (8003fe0 <HAL_DMA_Abort+0x470>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d013      	beq.n	8003e9a <HAL_DMA_Abort+0x32a>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a5b      	ldr	r2, [pc, #364]	; (8003fe4 <HAL_DMA_Abort+0x474>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d00e      	beq.n	8003e9a <HAL_DMA_Abort+0x32a>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a59      	ldr	r2, [pc, #356]	; (8003fe8 <HAL_DMA_Abort+0x478>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d009      	beq.n	8003e9a <HAL_DMA_Abort+0x32a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a58      	ldr	r2, [pc, #352]	; (8003fec <HAL_DMA_Abort+0x47c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d004      	beq.n	8003e9a <HAL_DMA_Abort+0x32a>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a56      	ldr	r2, [pc, #344]	; (8003ff0 <HAL_DMA_Abort+0x480>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d108      	bne.n	8003eac <HAL_DMA_Abort+0x33c>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0201 	bic.w	r2, r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	e007      	b.n	8003ebc <HAL_DMA_Abort+0x34c>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0201 	bic.w	r2, r2, #1
 8003eba:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003ebc:	e013      	b.n	8003ee6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ebe:	f7fe fb49 	bl	8002554 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b05      	cmp	r3, #5
 8003eca:	d90c      	bls.n	8003ee6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2203      	movs	r2, #3
 8003ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e12d      	b.n	8004142 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1e5      	bne.n	8003ebe <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a2f      	ldr	r2, [pc, #188]	; (8003fb4 <HAL_DMA_Abort+0x444>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d04a      	beq.n	8003f92 <HAL_DMA_Abort+0x422>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a2d      	ldr	r2, [pc, #180]	; (8003fb8 <HAL_DMA_Abort+0x448>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d045      	beq.n	8003f92 <HAL_DMA_Abort+0x422>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a2c      	ldr	r2, [pc, #176]	; (8003fbc <HAL_DMA_Abort+0x44c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d040      	beq.n	8003f92 <HAL_DMA_Abort+0x422>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a2a      	ldr	r2, [pc, #168]	; (8003fc0 <HAL_DMA_Abort+0x450>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d03b      	beq.n	8003f92 <HAL_DMA_Abort+0x422>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a29      	ldr	r2, [pc, #164]	; (8003fc4 <HAL_DMA_Abort+0x454>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d036      	beq.n	8003f92 <HAL_DMA_Abort+0x422>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a27      	ldr	r2, [pc, #156]	; (8003fc8 <HAL_DMA_Abort+0x458>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d031      	beq.n	8003f92 <HAL_DMA_Abort+0x422>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a26      	ldr	r2, [pc, #152]	; (8003fcc <HAL_DMA_Abort+0x45c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d02c      	beq.n	8003f92 <HAL_DMA_Abort+0x422>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a24      	ldr	r2, [pc, #144]	; (8003fd0 <HAL_DMA_Abort+0x460>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d027      	beq.n	8003f92 <HAL_DMA_Abort+0x422>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a23      	ldr	r2, [pc, #140]	; (8003fd4 <HAL_DMA_Abort+0x464>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d022      	beq.n	8003f92 <HAL_DMA_Abort+0x422>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a21      	ldr	r2, [pc, #132]	; (8003fd8 <HAL_DMA_Abort+0x468>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d01d      	beq.n	8003f92 <HAL_DMA_Abort+0x422>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a20      	ldr	r2, [pc, #128]	; (8003fdc <HAL_DMA_Abort+0x46c>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d018      	beq.n	8003f92 <HAL_DMA_Abort+0x422>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a1e      	ldr	r2, [pc, #120]	; (8003fe0 <HAL_DMA_Abort+0x470>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d013      	beq.n	8003f92 <HAL_DMA_Abort+0x422>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a1d      	ldr	r2, [pc, #116]	; (8003fe4 <HAL_DMA_Abort+0x474>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d00e      	beq.n	8003f92 <HAL_DMA_Abort+0x422>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a1b      	ldr	r2, [pc, #108]	; (8003fe8 <HAL_DMA_Abort+0x478>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d009      	beq.n	8003f92 <HAL_DMA_Abort+0x422>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a1a      	ldr	r2, [pc, #104]	; (8003fec <HAL_DMA_Abort+0x47c>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d004      	beq.n	8003f92 <HAL_DMA_Abort+0x422>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a18      	ldr	r2, [pc, #96]	; (8003ff0 <HAL_DMA_Abort+0x480>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d101      	bne.n	8003f96 <HAL_DMA_Abort+0x426>
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <HAL_DMA_Abort+0x428>
 8003f96:	2300      	movs	r3, #0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d02b      	beq.n	8003ff4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa6:	f003 031f 	and.w	r3, r3, #31
 8003faa:	223f      	movs	r2, #63	; 0x3f
 8003fac:	409a      	lsls	r2, r3
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	609a      	str	r2, [r3, #8]
 8003fb2:	e02a      	b.n	800400a <HAL_DMA_Abort+0x49a>
 8003fb4:	40020010 	.word	0x40020010
 8003fb8:	40020028 	.word	0x40020028
 8003fbc:	40020040 	.word	0x40020040
 8003fc0:	40020058 	.word	0x40020058
 8003fc4:	40020070 	.word	0x40020070
 8003fc8:	40020088 	.word	0x40020088
 8003fcc:	400200a0 	.word	0x400200a0
 8003fd0:	400200b8 	.word	0x400200b8
 8003fd4:	40020410 	.word	0x40020410
 8003fd8:	40020428 	.word	0x40020428
 8003fdc:	40020440 	.word	0x40020440
 8003fe0:	40020458 	.word	0x40020458
 8003fe4:	40020470 	.word	0x40020470
 8003fe8:	40020488 	.word	0x40020488
 8003fec:	400204a0 	.word	0x400204a0
 8003ff0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffe:	f003 031f 	and.w	r3, r3, #31
 8004002:	2201      	movs	r2, #1
 8004004:	409a      	lsls	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a4f      	ldr	r2, [pc, #316]	; (800414c <HAL_DMA_Abort+0x5dc>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d072      	beq.n	80040fa <HAL_DMA_Abort+0x58a>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a4d      	ldr	r2, [pc, #308]	; (8004150 <HAL_DMA_Abort+0x5e0>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d06d      	beq.n	80040fa <HAL_DMA_Abort+0x58a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a4c      	ldr	r2, [pc, #304]	; (8004154 <HAL_DMA_Abort+0x5e4>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d068      	beq.n	80040fa <HAL_DMA_Abort+0x58a>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a4a      	ldr	r2, [pc, #296]	; (8004158 <HAL_DMA_Abort+0x5e8>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d063      	beq.n	80040fa <HAL_DMA_Abort+0x58a>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a49      	ldr	r2, [pc, #292]	; (800415c <HAL_DMA_Abort+0x5ec>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d05e      	beq.n	80040fa <HAL_DMA_Abort+0x58a>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a47      	ldr	r2, [pc, #284]	; (8004160 <HAL_DMA_Abort+0x5f0>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d059      	beq.n	80040fa <HAL_DMA_Abort+0x58a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a46      	ldr	r2, [pc, #280]	; (8004164 <HAL_DMA_Abort+0x5f4>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d054      	beq.n	80040fa <HAL_DMA_Abort+0x58a>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a44      	ldr	r2, [pc, #272]	; (8004168 <HAL_DMA_Abort+0x5f8>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d04f      	beq.n	80040fa <HAL_DMA_Abort+0x58a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a43      	ldr	r2, [pc, #268]	; (800416c <HAL_DMA_Abort+0x5fc>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d04a      	beq.n	80040fa <HAL_DMA_Abort+0x58a>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a41      	ldr	r2, [pc, #260]	; (8004170 <HAL_DMA_Abort+0x600>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d045      	beq.n	80040fa <HAL_DMA_Abort+0x58a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a40      	ldr	r2, [pc, #256]	; (8004174 <HAL_DMA_Abort+0x604>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d040      	beq.n	80040fa <HAL_DMA_Abort+0x58a>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a3e      	ldr	r2, [pc, #248]	; (8004178 <HAL_DMA_Abort+0x608>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d03b      	beq.n	80040fa <HAL_DMA_Abort+0x58a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a3d      	ldr	r2, [pc, #244]	; (800417c <HAL_DMA_Abort+0x60c>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d036      	beq.n	80040fa <HAL_DMA_Abort+0x58a>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a3b      	ldr	r2, [pc, #236]	; (8004180 <HAL_DMA_Abort+0x610>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d031      	beq.n	80040fa <HAL_DMA_Abort+0x58a>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a3a      	ldr	r2, [pc, #232]	; (8004184 <HAL_DMA_Abort+0x614>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d02c      	beq.n	80040fa <HAL_DMA_Abort+0x58a>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a38      	ldr	r2, [pc, #224]	; (8004188 <HAL_DMA_Abort+0x618>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d027      	beq.n	80040fa <HAL_DMA_Abort+0x58a>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a37      	ldr	r2, [pc, #220]	; (800418c <HAL_DMA_Abort+0x61c>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d022      	beq.n	80040fa <HAL_DMA_Abort+0x58a>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a35      	ldr	r2, [pc, #212]	; (8004190 <HAL_DMA_Abort+0x620>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d01d      	beq.n	80040fa <HAL_DMA_Abort+0x58a>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a34      	ldr	r2, [pc, #208]	; (8004194 <HAL_DMA_Abort+0x624>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d018      	beq.n	80040fa <HAL_DMA_Abort+0x58a>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a32      	ldr	r2, [pc, #200]	; (8004198 <HAL_DMA_Abort+0x628>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d013      	beq.n	80040fa <HAL_DMA_Abort+0x58a>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a31      	ldr	r2, [pc, #196]	; (800419c <HAL_DMA_Abort+0x62c>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d00e      	beq.n	80040fa <HAL_DMA_Abort+0x58a>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a2f      	ldr	r2, [pc, #188]	; (80041a0 <HAL_DMA_Abort+0x630>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d009      	beq.n	80040fa <HAL_DMA_Abort+0x58a>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a2e      	ldr	r2, [pc, #184]	; (80041a4 <HAL_DMA_Abort+0x634>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d004      	beq.n	80040fa <HAL_DMA_Abort+0x58a>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a2c      	ldr	r2, [pc, #176]	; (80041a8 <HAL_DMA_Abort+0x638>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d101      	bne.n	80040fe <HAL_DMA_Abort+0x58e>
 80040fa:	2301      	movs	r3, #1
 80040fc:	e000      	b.n	8004100 <HAL_DMA_Abort+0x590>
 80040fe:	2300      	movs	r3, #0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d015      	beq.n	8004130 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800410c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00c      	beq.n	8004130 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004120:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004124:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800412e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3718      	adds	r7, #24
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	40020010 	.word	0x40020010
 8004150:	40020028 	.word	0x40020028
 8004154:	40020040 	.word	0x40020040
 8004158:	40020058 	.word	0x40020058
 800415c:	40020070 	.word	0x40020070
 8004160:	40020088 	.word	0x40020088
 8004164:	400200a0 	.word	0x400200a0
 8004168:	400200b8 	.word	0x400200b8
 800416c:	40020410 	.word	0x40020410
 8004170:	40020428 	.word	0x40020428
 8004174:	40020440 	.word	0x40020440
 8004178:	40020458 	.word	0x40020458
 800417c:	40020470 	.word	0x40020470
 8004180:	40020488 	.word	0x40020488
 8004184:	400204a0 	.word	0x400204a0
 8004188:	400204b8 	.word	0x400204b8
 800418c:	58025408 	.word	0x58025408
 8004190:	5802541c 	.word	0x5802541c
 8004194:	58025430 	.word	0x58025430
 8004198:	58025444 	.word	0x58025444
 800419c:	58025458 	.word	0x58025458
 80041a0:	5802546c 	.word	0x5802546c
 80041a4:	58025480 	.word	0x58025480
 80041a8:	58025494 	.word	0x58025494

080041ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e237      	b.n	800462e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d004      	beq.n	80041d4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2280      	movs	r2, #128	; 0x80
 80041ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e22c      	b.n	800462e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a5c      	ldr	r2, [pc, #368]	; (800434c <HAL_DMA_Abort_IT+0x1a0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d04a      	beq.n	8004274 <HAL_DMA_Abort_IT+0xc8>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a5b      	ldr	r2, [pc, #364]	; (8004350 <HAL_DMA_Abort_IT+0x1a4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d045      	beq.n	8004274 <HAL_DMA_Abort_IT+0xc8>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a59      	ldr	r2, [pc, #356]	; (8004354 <HAL_DMA_Abort_IT+0x1a8>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d040      	beq.n	8004274 <HAL_DMA_Abort_IT+0xc8>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a58      	ldr	r2, [pc, #352]	; (8004358 <HAL_DMA_Abort_IT+0x1ac>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d03b      	beq.n	8004274 <HAL_DMA_Abort_IT+0xc8>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a56      	ldr	r2, [pc, #344]	; (800435c <HAL_DMA_Abort_IT+0x1b0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d036      	beq.n	8004274 <HAL_DMA_Abort_IT+0xc8>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a55      	ldr	r2, [pc, #340]	; (8004360 <HAL_DMA_Abort_IT+0x1b4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d031      	beq.n	8004274 <HAL_DMA_Abort_IT+0xc8>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a53      	ldr	r2, [pc, #332]	; (8004364 <HAL_DMA_Abort_IT+0x1b8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d02c      	beq.n	8004274 <HAL_DMA_Abort_IT+0xc8>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a52      	ldr	r2, [pc, #328]	; (8004368 <HAL_DMA_Abort_IT+0x1bc>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d027      	beq.n	8004274 <HAL_DMA_Abort_IT+0xc8>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a50      	ldr	r2, [pc, #320]	; (800436c <HAL_DMA_Abort_IT+0x1c0>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d022      	beq.n	8004274 <HAL_DMA_Abort_IT+0xc8>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a4f      	ldr	r2, [pc, #316]	; (8004370 <HAL_DMA_Abort_IT+0x1c4>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d01d      	beq.n	8004274 <HAL_DMA_Abort_IT+0xc8>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a4d      	ldr	r2, [pc, #308]	; (8004374 <HAL_DMA_Abort_IT+0x1c8>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d018      	beq.n	8004274 <HAL_DMA_Abort_IT+0xc8>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a4c      	ldr	r2, [pc, #304]	; (8004378 <HAL_DMA_Abort_IT+0x1cc>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d013      	beq.n	8004274 <HAL_DMA_Abort_IT+0xc8>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a4a      	ldr	r2, [pc, #296]	; (800437c <HAL_DMA_Abort_IT+0x1d0>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d00e      	beq.n	8004274 <HAL_DMA_Abort_IT+0xc8>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a49      	ldr	r2, [pc, #292]	; (8004380 <HAL_DMA_Abort_IT+0x1d4>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d009      	beq.n	8004274 <HAL_DMA_Abort_IT+0xc8>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a47      	ldr	r2, [pc, #284]	; (8004384 <HAL_DMA_Abort_IT+0x1d8>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d004      	beq.n	8004274 <HAL_DMA_Abort_IT+0xc8>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a46      	ldr	r2, [pc, #280]	; (8004388 <HAL_DMA_Abort_IT+0x1dc>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d101      	bne.n	8004278 <HAL_DMA_Abort_IT+0xcc>
 8004274:	2301      	movs	r3, #1
 8004276:	e000      	b.n	800427a <HAL_DMA_Abort_IT+0xce>
 8004278:	2300      	movs	r3, #0
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 8086 	beq.w	800438c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2204      	movs	r2, #4
 8004284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a2f      	ldr	r2, [pc, #188]	; (800434c <HAL_DMA_Abort_IT+0x1a0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d04a      	beq.n	8004328 <HAL_DMA_Abort_IT+0x17c>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a2e      	ldr	r2, [pc, #184]	; (8004350 <HAL_DMA_Abort_IT+0x1a4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d045      	beq.n	8004328 <HAL_DMA_Abort_IT+0x17c>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a2c      	ldr	r2, [pc, #176]	; (8004354 <HAL_DMA_Abort_IT+0x1a8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d040      	beq.n	8004328 <HAL_DMA_Abort_IT+0x17c>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a2b      	ldr	r2, [pc, #172]	; (8004358 <HAL_DMA_Abort_IT+0x1ac>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d03b      	beq.n	8004328 <HAL_DMA_Abort_IT+0x17c>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a29      	ldr	r2, [pc, #164]	; (800435c <HAL_DMA_Abort_IT+0x1b0>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d036      	beq.n	8004328 <HAL_DMA_Abort_IT+0x17c>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a28      	ldr	r2, [pc, #160]	; (8004360 <HAL_DMA_Abort_IT+0x1b4>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d031      	beq.n	8004328 <HAL_DMA_Abort_IT+0x17c>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a26      	ldr	r2, [pc, #152]	; (8004364 <HAL_DMA_Abort_IT+0x1b8>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d02c      	beq.n	8004328 <HAL_DMA_Abort_IT+0x17c>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a25      	ldr	r2, [pc, #148]	; (8004368 <HAL_DMA_Abort_IT+0x1bc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d027      	beq.n	8004328 <HAL_DMA_Abort_IT+0x17c>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a23      	ldr	r2, [pc, #140]	; (800436c <HAL_DMA_Abort_IT+0x1c0>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d022      	beq.n	8004328 <HAL_DMA_Abort_IT+0x17c>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a22      	ldr	r2, [pc, #136]	; (8004370 <HAL_DMA_Abort_IT+0x1c4>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d01d      	beq.n	8004328 <HAL_DMA_Abort_IT+0x17c>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a20      	ldr	r2, [pc, #128]	; (8004374 <HAL_DMA_Abort_IT+0x1c8>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d018      	beq.n	8004328 <HAL_DMA_Abort_IT+0x17c>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a1f      	ldr	r2, [pc, #124]	; (8004378 <HAL_DMA_Abort_IT+0x1cc>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d013      	beq.n	8004328 <HAL_DMA_Abort_IT+0x17c>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a1d      	ldr	r2, [pc, #116]	; (800437c <HAL_DMA_Abort_IT+0x1d0>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d00e      	beq.n	8004328 <HAL_DMA_Abort_IT+0x17c>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a1c      	ldr	r2, [pc, #112]	; (8004380 <HAL_DMA_Abort_IT+0x1d4>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d009      	beq.n	8004328 <HAL_DMA_Abort_IT+0x17c>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a1a      	ldr	r2, [pc, #104]	; (8004384 <HAL_DMA_Abort_IT+0x1d8>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d004      	beq.n	8004328 <HAL_DMA_Abort_IT+0x17c>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a19      	ldr	r2, [pc, #100]	; (8004388 <HAL_DMA_Abort_IT+0x1dc>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d108      	bne.n	800433a <HAL_DMA_Abort_IT+0x18e>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0201 	bic.w	r2, r2, #1
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	e178      	b.n	800462c <HAL_DMA_Abort_IT+0x480>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0201 	bic.w	r2, r2, #1
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	e16f      	b.n	800462c <HAL_DMA_Abort_IT+0x480>
 800434c:	40020010 	.word	0x40020010
 8004350:	40020028 	.word	0x40020028
 8004354:	40020040 	.word	0x40020040
 8004358:	40020058 	.word	0x40020058
 800435c:	40020070 	.word	0x40020070
 8004360:	40020088 	.word	0x40020088
 8004364:	400200a0 	.word	0x400200a0
 8004368:	400200b8 	.word	0x400200b8
 800436c:	40020410 	.word	0x40020410
 8004370:	40020428 	.word	0x40020428
 8004374:	40020440 	.word	0x40020440
 8004378:	40020458 	.word	0x40020458
 800437c:	40020470 	.word	0x40020470
 8004380:	40020488 	.word	0x40020488
 8004384:	400204a0 	.word	0x400204a0
 8004388:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 020e 	bic.w	r2, r2, #14
 800439a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a6c      	ldr	r2, [pc, #432]	; (8004554 <HAL_DMA_Abort_IT+0x3a8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d04a      	beq.n	800443c <HAL_DMA_Abort_IT+0x290>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a6b      	ldr	r2, [pc, #428]	; (8004558 <HAL_DMA_Abort_IT+0x3ac>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d045      	beq.n	800443c <HAL_DMA_Abort_IT+0x290>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a69      	ldr	r2, [pc, #420]	; (800455c <HAL_DMA_Abort_IT+0x3b0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d040      	beq.n	800443c <HAL_DMA_Abort_IT+0x290>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a68      	ldr	r2, [pc, #416]	; (8004560 <HAL_DMA_Abort_IT+0x3b4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d03b      	beq.n	800443c <HAL_DMA_Abort_IT+0x290>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a66      	ldr	r2, [pc, #408]	; (8004564 <HAL_DMA_Abort_IT+0x3b8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d036      	beq.n	800443c <HAL_DMA_Abort_IT+0x290>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a65      	ldr	r2, [pc, #404]	; (8004568 <HAL_DMA_Abort_IT+0x3bc>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d031      	beq.n	800443c <HAL_DMA_Abort_IT+0x290>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a63      	ldr	r2, [pc, #396]	; (800456c <HAL_DMA_Abort_IT+0x3c0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d02c      	beq.n	800443c <HAL_DMA_Abort_IT+0x290>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a62      	ldr	r2, [pc, #392]	; (8004570 <HAL_DMA_Abort_IT+0x3c4>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d027      	beq.n	800443c <HAL_DMA_Abort_IT+0x290>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a60      	ldr	r2, [pc, #384]	; (8004574 <HAL_DMA_Abort_IT+0x3c8>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d022      	beq.n	800443c <HAL_DMA_Abort_IT+0x290>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a5f      	ldr	r2, [pc, #380]	; (8004578 <HAL_DMA_Abort_IT+0x3cc>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d01d      	beq.n	800443c <HAL_DMA_Abort_IT+0x290>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a5d      	ldr	r2, [pc, #372]	; (800457c <HAL_DMA_Abort_IT+0x3d0>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d018      	beq.n	800443c <HAL_DMA_Abort_IT+0x290>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a5c      	ldr	r2, [pc, #368]	; (8004580 <HAL_DMA_Abort_IT+0x3d4>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d013      	beq.n	800443c <HAL_DMA_Abort_IT+0x290>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a5a      	ldr	r2, [pc, #360]	; (8004584 <HAL_DMA_Abort_IT+0x3d8>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d00e      	beq.n	800443c <HAL_DMA_Abort_IT+0x290>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a59      	ldr	r2, [pc, #356]	; (8004588 <HAL_DMA_Abort_IT+0x3dc>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d009      	beq.n	800443c <HAL_DMA_Abort_IT+0x290>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a57      	ldr	r2, [pc, #348]	; (800458c <HAL_DMA_Abort_IT+0x3e0>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d004      	beq.n	800443c <HAL_DMA_Abort_IT+0x290>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a56      	ldr	r2, [pc, #344]	; (8004590 <HAL_DMA_Abort_IT+0x3e4>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d108      	bne.n	800444e <HAL_DMA_Abort_IT+0x2a2>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0201 	bic.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	e007      	b.n	800445e <HAL_DMA_Abort_IT+0x2b2>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0201 	bic.w	r2, r2, #1
 800445c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a3c      	ldr	r2, [pc, #240]	; (8004554 <HAL_DMA_Abort_IT+0x3a8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d072      	beq.n	800454e <HAL_DMA_Abort_IT+0x3a2>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a3a      	ldr	r2, [pc, #232]	; (8004558 <HAL_DMA_Abort_IT+0x3ac>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d06d      	beq.n	800454e <HAL_DMA_Abort_IT+0x3a2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a39      	ldr	r2, [pc, #228]	; (800455c <HAL_DMA_Abort_IT+0x3b0>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d068      	beq.n	800454e <HAL_DMA_Abort_IT+0x3a2>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a37      	ldr	r2, [pc, #220]	; (8004560 <HAL_DMA_Abort_IT+0x3b4>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d063      	beq.n	800454e <HAL_DMA_Abort_IT+0x3a2>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a36      	ldr	r2, [pc, #216]	; (8004564 <HAL_DMA_Abort_IT+0x3b8>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d05e      	beq.n	800454e <HAL_DMA_Abort_IT+0x3a2>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a34      	ldr	r2, [pc, #208]	; (8004568 <HAL_DMA_Abort_IT+0x3bc>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d059      	beq.n	800454e <HAL_DMA_Abort_IT+0x3a2>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a33      	ldr	r2, [pc, #204]	; (800456c <HAL_DMA_Abort_IT+0x3c0>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d054      	beq.n	800454e <HAL_DMA_Abort_IT+0x3a2>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a31      	ldr	r2, [pc, #196]	; (8004570 <HAL_DMA_Abort_IT+0x3c4>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d04f      	beq.n	800454e <HAL_DMA_Abort_IT+0x3a2>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a30      	ldr	r2, [pc, #192]	; (8004574 <HAL_DMA_Abort_IT+0x3c8>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d04a      	beq.n	800454e <HAL_DMA_Abort_IT+0x3a2>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a2e      	ldr	r2, [pc, #184]	; (8004578 <HAL_DMA_Abort_IT+0x3cc>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d045      	beq.n	800454e <HAL_DMA_Abort_IT+0x3a2>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a2d      	ldr	r2, [pc, #180]	; (800457c <HAL_DMA_Abort_IT+0x3d0>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d040      	beq.n	800454e <HAL_DMA_Abort_IT+0x3a2>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a2b      	ldr	r2, [pc, #172]	; (8004580 <HAL_DMA_Abort_IT+0x3d4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d03b      	beq.n	800454e <HAL_DMA_Abort_IT+0x3a2>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a2a      	ldr	r2, [pc, #168]	; (8004584 <HAL_DMA_Abort_IT+0x3d8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d036      	beq.n	800454e <HAL_DMA_Abort_IT+0x3a2>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a28      	ldr	r2, [pc, #160]	; (8004588 <HAL_DMA_Abort_IT+0x3dc>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d031      	beq.n	800454e <HAL_DMA_Abort_IT+0x3a2>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a27      	ldr	r2, [pc, #156]	; (800458c <HAL_DMA_Abort_IT+0x3e0>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d02c      	beq.n	800454e <HAL_DMA_Abort_IT+0x3a2>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a25      	ldr	r2, [pc, #148]	; (8004590 <HAL_DMA_Abort_IT+0x3e4>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d027      	beq.n	800454e <HAL_DMA_Abort_IT+0x3a2>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a24      	ldr	r2, [pc, #144]	; (8004594 <HAL_DMA_Abort_IT+0x3e8>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d022      	beq.n	800454e <HAL_DMA_Abort_IT+0x3a2>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a22      	ldr	r2, [pc, #136]	; (8004598 <HAL_DMA_Abort_IT+0x3ec>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d01d      	beq.n	800454e <HAL_DMA_Abort_IT+0x3a2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a21      	ldr	r2, [pc, #132]	; (800459c <HAL_DMA_Abort_IT+0x3f0>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d018      	beq.n	800454e <HAL_DMA_Abort_IT+0x3a2>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a1f      	ldr	r2, [pc, #124]	; (80045a0 <HAL_DMA_Abort_IT+0x3f4>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d013      	beq.n	800454e <HAL_DMA_Abort_IT+0x3a2>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a1e      	ldr	r2, [pc, #120]	; (80045a4 <HAL_DMA_Abort_IT+0x3f8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d00e      	beq.n	800454e <HAL_DMA_Abort_IT+0x3a2>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a1c      	ldr	r2, [pc, #112]	; (80045a8 <HAL_DMA_Abort_IT+0x3fc>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d009      	beq.n	800454e <HAL_DMA_Abort_IT+0x3a2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a1b      	ldr	r2, [pc, #108]	; (80045ac <HAL_DMA_Abort_IT+0x400>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d004      	beq.n	800454e <HAL_DMA_Abort_IT+0x3a2>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a19      	ldr	r2, [pc, #100]	; (80045b0 <HAL_DMA_Abort_IT+0x404>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d132      	bne.n	80045b4 <HAL_DMA_Abort_IT+0x408>
 800454e:	2301      	movs	r3, #1
 8004550:	e031      	b.n	80045b6 <HAL_DMA_Abort_IT+0x40a>
 8004552:	bf00      	nop
 8004554:	40020010 	.word	0x40020010
 8004558:	40020028 	.word	0x40020028
 800455c:	40020040 	.word	0x40020040
 8004560:	40020058 	.word	0x40020058
 8004564:	40020070 	.word	0x40020070
 8004568:	40020088 	.word	0x40020088
 800456c:	400200a0 	.word	0x400200a0
 8004570:	400200b8 	.word	0x400200b8
 8004574:	40020410 	.word	0x40020410
 8004578:	40020428 	.word	0x40020428
 800457c:	40020440 	.word	0x40020440
 8004580:	40020458 	.word	0x40020458
 8004584:	40020470 	.word	0x40020470
 8004588:	40020488 	.word	0x40020488
 800458c:	400204a0 	.word	0x400204a0
 8004590:	400204b8 	.word	0x400204b8
 8004594:	58025408 	.word	0x58025408
 8004598:	5802541c 	.word	0x5802541c
 800459c:	58025430 	.word	0x58025430
 80045a0:	58025444 	.word	0x58025444
 80045a4:	58025458 	.word	0x58025458
 80045a8:	5802546c 	.word	0x5802546c
 80045ac:	58025480 	.word	0x58025480
 80045b0:	58025494 	.word	0x58025494
 80045b4:	2300      	movs	r3, #0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d028      	beq.n	800460c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045c8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ce:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d4:	f003 031f 	and.w	r3, r3, #31
 80045d8:	2201      	movs	r2, #1
 80045da:	409a      	lsls	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80045e8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00c      	beq.n	800460c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004600:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800460a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop

08004638 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004638:	b480      	push	{r7}
 800463a:	b089      	sub	sp, #36	; 0x24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004642:	2300      	movs	r3, #0
 8004644:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004646:	4b89      	ldr	r3, [pc, #548]	; (800486c <HAL_GPIO_Init+0x234>)
 8004648:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800464a:	e194      	b.n	8004976 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	2101      	movs	r1, #1
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	fa01 f303 	lsl.w	r3, r1, r3
 8004658:	4013      	ands	r3, r2
 800465a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 8186 	beq.w	8004970 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f003 0303 	and.w	r3, r3, #3
 800466c:	2b01      	cmp	r3, #1
 800466e:	d005      	beq.n	800467c <HAL_GPIO_Init+0x44>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f003 0303 	and.w	r3, r3, #3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d130      	bne.n	80046de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	2203      	movs	r2, #3
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	43db      	mvns	r3, r3
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	4013      	ands	r3, r2
 8004692:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046b2:	2201      	movs	r2, #1
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ba:	43db      	mvns	r3, r3
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	4013      	ands	r3, r2
 80046c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	091b      	lsrs	r3, r3, #4
 80046c8:	f003 0201 	and.w	r2, r3, #1
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	fa02 f303 	lsl.w	r3, r2, r3
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d017      	beq.n	800471a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	2203      	movs	r2, #3
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	43db      	mvns	r3, r3
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	4013      	ands	r3, r2
 8004700:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	689a      	ldr	r2, [r3, #8]
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	4313      	orrs	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f003 0303 	and.w	r3, r3, #3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d123      	bne.n	800476e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	08da      	lsrs	r2, r3, #3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3208      	adds	r2, #8
 800472e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	220f      	movs	r2, #15
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	43db      	mvns	r3, r3
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	4013      	ands	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	691a      	ldr	r2, [r3, #16]
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4313      	orrs	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	08da      	lsrs	r2, r3, #3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3208      	adds	r2, #8
 8004768:	69b9      	ldr	r1, [r7, #24]
 800476a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	2203      	movs	r2, #3
 800477a:	fa02 f303 	lsl.w	r3, r2, r3
 800477e:	43db      	mvns	r3, r3
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	4013      	ands	r3, r2
 8004784:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f003 0203 	and.w	r2, r3, #3
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	4313      	orrs	r3, r2
 800479a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 80e0 	beq.w	8004970 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047b0:	4b2f      	ldr	r3, [pc, #188]	; (8004870 <HAL_GPIO_Init+0x238>)
 80047b2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80047b6:	4a2e      	ldr	r2, [pc, #184]	; (8004870 <HAL_GPIO_Init+0x238>)
 80047b8:	f043 0302 	orr.w	r3, r3, #2
 80047bc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80047c0:	4b2b      	ldr	r3, [pc, #172]	; (8004870 <HAL_GPIO_Init+0x238>)
 80047c2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047ce:	4a29      	ldr	r2, [pc, #164]	; (8004874 <HAL_GPIO_Init+0x23c>)
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	089b      	lsrs	r3, r3, #2
 80047d4:	3302      	adds	r3, #2
 80047d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	220f      	movs	r2, #15
 80047e6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ea:	43db      	mvns	r3, r3
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	4013      	ands	r3, r2
 80047f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a20      	ldr	r2, [pc, #128]	; (8004878 <HAL_GPIO_Init+0x240>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d052      	beq.n	80048a0 <HAL_GPIO_Init+0x268>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a1f      	ldr	r2, [pc, #124]	; (800487c <HAL_GPIO_Init+0x244>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d031      	beq.n	8004866 <HAL_GPIO_Init+0x22e>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a1e      	ldr	r2, [pc, #120]	; (8004880 <HAL_GPIO_Init+0x248>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d02b      	beq.n	8004862 <HAL_GPIO_Init+0x22a>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a1d      	ldr	r2, [pc, #116]	; (8004884 <HAL_GPIO_Init+0x24c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d025      	beq.n	800485e <HAL_GPIO_Init+0x226>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a1c      	ldr	r2, [pc, #112]	; (8004888 <HAL_GPIO_Init+0x250>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d01f      	beq.n	800485a <HAL_GPIO_Init+0x222>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a1b      	ldr	r2, [pc, #108]	; (800488c <HAL_GPIO_Init+0x254>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d019      	beq.n	8004856 <HAL_GPIO_Init+0x21e>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a1a      	ldr	r2, [pc, #104]	; (8004890 <HAL_GPIO_Init+0x258>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d013      	beq.n	8004852 <HAL_GPIO_Init+0x21a>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a19      	ldr	r2, [pc, #100]	; (8004894 <HAL_GPIO_Init+0x25c>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d00d      	beq.n	800484e <HAL_GPIO_Init+0x216>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a18      	ldr	r2, [pc, #96]	; (8004898 <HAL_GPIO_Init+0x260>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d007      	beq.n	800484a <HAL_GPIO_Init+0x212>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a17      	ldr	r2, [pc, #92]	; (800489c <HAL_GPIO_Init+0x264>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d101      	bne.n	8004846 <HAL_GPIO_Init+0x20e>
 8004842:	2309      	movs	r3, #9
 8004844:	e02d      	b.n	80048a2 <HAL_GPIO_Init+0x26a>
 8004846:	230a      	movs	r3, #10
 8004848:	e02b      	b.n	80048a2 <HAL_GPIO_Init+0x26a>
 800484a:	2308      	movs	r3, #8
 800484c:	e029      	b.n	80048a2 <HAL_GPIO_Init+0x26a>
 800484e:	2307      	movs	r3, #7
 8004850:	e027      	b.n	80048a2 <HAL_GPIO_Init+0x26a>
 8004852:	2306      	movs	r3, #6
 8004854:	e025      	b.n	80048a2 <HAL_GPIO_Init+0x26a>
 8004856:	2305      	movs	r3, #5
 8004858:	e023      	b.n	80048a2 <HAL_GPIO_Init+0x26a>
 800485a:	2304      	movs	r3, #4
 800485c:	e021      	b.n	80048a2 <HAL_GPIO_Init+0x26a>
 800485e:	2303      	movs	r3, #3
 8004860:	e01f      	b.n	80048a2 <HAL_GPIO_Init+0x26a>
 8004862:	2302      	movs	r3, #2
 8004864:	e01d      	b.n	80048a2 <HAL_GPIO_Init+0x26a>
 8004866:	2301      	movs	r3, #1
 8004868:	e01b      	b.n	80048a2 <HAL_GPIO_Init+0x26a>
 800486a:	bf00      	nop
 800486c:	58000080 	.word	0x58000080
 8004870:	58024400 	.word	0x58024400
 8004874:	58000400 	.word	0x58000400
 8004878:	58020000 	.word	0x58020000
 800487c:	58020400 	.word	0x58020400
 8004880:	58020800 	.word	0x58020800
 8004884:	58020c00 	.word	0x58020c00
 8004888:	58021000 	.word	0x58021000
 800488c:	58021400 	.word	0x58021400
 8004890:	58021800 	.word	0x58021800
 8004894:	58021c00 	.word	0x58021c00
 8004898:	58022000 	.word	0x58022000
 800489c:	58022400 	.word	0x58022400
 80048a0:	2300      	movs	r3, #0
 80048a2:	69fa      	ldr	r2, [r7, #28]
 80048a4:	f002 0203 	and.w	r2, r2, #3
 80048a8:	0092      	lsls	r2, r2, #2
 80048aa:	4093      	lsls	r3, r2
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048b2:	4938      	ldr	r1, [pc, #224]	; (8004994 <HAL_GPIO_Init+0x35c>)
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	089b      	lsrs	r3, r3, #2
 80048b8:	3302      	adds	r3, #2
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	43db      	mvns	r3, r3
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	4013      	ands	r3, r2
 80048d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80048e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80048ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	43db      	mvns	r3, r3
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	4013      	ands	r3, r2
 80048fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	4313      	orrs	r3, r2
 8004912:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004914:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	43db      	mvns	r3, r3
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	4013      	ands	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	43db      	mvns	r3, r3
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	4013      	ands	r3, r2
 8004954:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	4313      	orrs	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	3301      	adds	r3, #1
 8004974:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	fa22 f303 	lsr.w	r3, r2, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	f47f ae63 	bne.w	800464c <HAL_GPIO_Init+0x14>
  }
}
 8004986:	bf00      	nop
 8004988:	bf00      	nop
 800498a:	3724      	adds	r7, #36	; 0x24
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	58000400 	.word	0x58000400

08004998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	460b      	mov	r3, r1
 80049a2:	807b      	strh	r3, [r7, #2]
 80049a4:	4613      	mov	r3, r2
 80049a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049a8:	787b      	ldrb	r3, [r7, #1]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049ae:	887a      	ldrh	r2, [r7, #2]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80049b4:	e003      	b.n	80049be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80049b6:	887b      	ldrh	r3, [r7, #2]
 80049b8:	041a      	lsls	r2, r3, #16
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	619a      	str	r2, [r3, #24]
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
	...

080049cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e07f      	b.n	8004ade <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d106      	bne.n	80049f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f7fd f998 	bl	8001d28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2224      	movs	r2, #36	; 0x24
 80049fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 0201 	bic.w	r2, r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d107      	bne.n	8004a46 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689a      	ldr	r2, [r3, #8]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a42:	609a      	str	r2, [r3, #8]
 8004a44:	e006      	b.n	8004a54 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689a      	ldr	r2, [r3, #8]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004a52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d104      	bne.n	8004a66 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6859      	ldr	r1, [r3, #4]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	4b1d      	ldr	r3, [pc, #116]	; (8004ae8 <HAL_I2C_Init+0x11c>)
 8004a72:	430b      	orrs	r3, r1
 8004a74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68da      	ldr	r2, [r3, #12]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691a      	ldr	r2, [r3, #16]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69d9      	ldr	r1, [r3, #28]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a1a      	ldr	r2, [r3, #32]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f042 0201 	orr.w	r2, r2, #1
 8004abe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2220      	movs	r2, #32
 8004aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	02008000 	.word	0x02008000

08004aec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b088      	sub	sp, #32
 8004af0:	af02      	add	r7, sp, #8
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	607a      	str	r2, [r7, #4]
 8004af6:	461a      	mov	r2, r3
 8004af8:	460b      	mov	r3, r1
 8004afa:	817b      	strh	r3, [r7, #10]
 8004afc:	4613      	mov	r3, r2
 8004afe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b20      	cmp	r3, #32
 8004b0a:	f040 80da 	bne.w	8004cc2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d101      	bne.n	8004b1c <HAL_I2C_Master_Transmit+0x30>
 8004b18:	2302      	movs	r3, #2
 8004b1a:	e0d3      	b.n	8004cc4 <HAL_I2C_Master_Transmit+0x1d8>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b24:	f7fd fd16 	bl	8002554 <HAL_GetTick>
 8004b28:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	2319      	movs	r3, #25
 8004b30:	2201      	movs	r2, #1
 8004b32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 f9e6 	bl	8004f08 <I2C_WaitOnFlagUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e0be      	b.n	8004cc4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2221      	movs	r2, #33	; 0x21
 8004b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2210      	movs	r2, #16
 8004b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	893a      	ldrh	r2, [r7, #8]
 8004b66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	2bff      	cmp	r3, #255	; 0xff
 8004b76:	d90e      	bls.n	8004b96 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	22ff      	movs	r2, #255	; 0xff
 8004b7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	8979      	ldrh	r1, [r7, #10]
 8004b86:	4b51      	ldr	r3, [pc, #324]	; (8004ccc <HAL_I2C_Master_Transmit+0x1e0>)
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 fbf6 	bl	8005380 <I2C_TransferConfig>
 8004b94:	e06c      	b.n	8004c70 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	8979      	ldrh	r1, [r7, #10]
 8004ba8:	4b48      	ldr	r3, [pc, #288]	; (8004ccc <HAL_I2C_Master_Transmit+0x1e0>)
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 fbe5 	bl	8005380 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004bb6:	e05b      	b.n	8004c70 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	6a39      	ldr	r1, [r7, #32]
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f000 f9f2 	bl	8004fa6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d001      	beq.n	8004bcc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e07b      	b.n	8004cc4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	781a      	ldrb	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	3b01      	subs	r3, #1
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d034      	beq.n	8004c70 <HAL_I2C_Master_Transmit+0x184>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d130      	bne.n	8004c70 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	2200      	movs	r2, #0
 8004c16:	2180      	movs	r1, #128	; 0x80
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 f975 	bl	8004f08 <I2C_WaitOnFlagUntilTimeout>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d001      	beq.n	8004c28 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e04d      	b.n	8004cc4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	2bff      	cmp	r3, #255	; 0xff
 8004c30:	d90e      	bls.n	8004c50 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	22ff      	movs	r2, #255	; 0xff
 8004c36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	8979      	ldrh	r1, [r7, #10]
 8004c40:	2300      	movs	r3, #0
 8004c42:	9300      	str	r3, [sp, #0]
 8004c44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 fb99 	bl	8005380 <I2C_TransferConfig>
 8004c4e:	e00f      	b.n	8004c70 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	8979      	ldrh	r1, [r7, #10]
 8004c62:	2300      	movs	r3, #0
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 fb88 	bl	8005380 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d19e      	bne.n	8004bb8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	6a39      	ldr	r1, [r7, #32]
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 f9d8 	bl	8005034 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e01a      	b.n	8004cc4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2220      	movs	r2, #32
 8004c94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6859      	ldr	r1, [r3, #4]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	4b0b      	ldr	r3, [pc, #44]	; (8004cd0 <HAL_I2C_Master_Transmit+0x1e4>)
 8004ca2:	400b      	ands	r3, r1
 8004ca4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	e000      	b.n	8004cc4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004cc2:	2302      	movs	r3, #2
  }
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3718      	adds	r7, #24
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	80002000 	.word	0x80002000
 8004cd0:	fe00e800 	.word	0xfe00e800

08004cd4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b088      	sub	sp, #32
 8004cd8:	af02      	add	r7, sp, #8
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	607a      	str	r2, [r7, #4]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	817b      	strh	r3, [r7, #10]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b20      	cmp	r3, #32
 8004cf2:	f040 80db 	bne.w	8004eac <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d101      	bne.n	8004d04 <HAL_I2C_Master_Receive+0x30>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e0d4      	b.n	8004eae <HAL_I2C_Master_Receive+0x1da>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d0c:	f7fd fc22 	bl	8002554 <HAL_GetTick>
 8004d10:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	2319      	movs	r3, #25
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 f8f2 	bl	8004f08 <I2C_WaitOnFlagUntilTimeout>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e0bf      	b.n	8004eae <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2222      	movs	r2, #34	; 0x22
 8004d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2210      	movs	r2, #16
 8004d3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	893a      	ldrh	r2, [r7, #8]
 8004d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2bff      	cmp	r3, #255	; 0xff
 8004d5e:	d90e      	bls.n	8004d7e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	22ff      	movs	r2, #255	; 0xff
 8004d64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	8979      	ldrh	r1, [r7, #10]
 8004d6e:	4b52      	ldr	r3, [pc, #328]	; (8004eb8 <HAL_I2C_Master_Receive+0x1e4>)
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 fb02 	bl	8005380 <I2C_TransferConfig>
 8004d7c:	e06d      	b.n	8004e5a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	8979      	ldrh	r1, [r7, #10]
 8004d90:	4b49      	ldr	r3, [pc, #292]	; (8004eb8 <HAL_I2C_Master_Receive+0x1e4>)
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 faf1 	bl	8005380 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004d9e:	e05c      	b.n	8004e5a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	6a39      	ldr	r1, [r7, #32]
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f000 f989 	bl	80050bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e07c      	b.n	8004eae <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	3b01      	subs	r3, #1
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d034      	beq.n	8004e5a <HAL_I2C_Master_Receive+0x186>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d130      	bne.n	8004e5a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	2180      	movs	r1, #128	; 0x80
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 f880 	bl	8004f08 <I2C_WaitOnFlagUntilTimeout>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e04d      	b.n	8004eae <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	2bff      	cmp	r3, #255	; 0xff
 8004e1a:	d90e      	bls.n	8004e3a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	22ff      	movs	r2, #255	; 0xff
 8004e20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	8979      	ldrh	r1, [r7, #10]
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 faa4 	bl	8005380 <I2C_TransferConfig>
 8004e38:	e00f      	b.n	8004e5a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	8979      	ldrh	r1, [r7, #10]
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 fa93 	bl	8005380 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d19d      	bne.n	8004da0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	6a39      	ldr	r1, [r7, #32]
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f000 f8e3 	bl	8005034 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e01a      	b.n	8004eae <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6859      	ldr	r1, [r3, #4]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	4b0c      	ldr	r3, [pc, #48]	; (8004ebc <HAL_I2C_Master_Receive+0x1e8>)
 8004e8c:	400b      	ands	r3, r1
 8004e8e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	e000      	b.n	8004eae <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004eac:	2302      	movs	r3, #2
  }
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3718      	adds	r7, #24
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	80002400 	.word	0x80002400
 8004ebc:	fe00e800 	.word	0xfe00e800

08004ec0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d103      	bne.n	8004ede <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2200      	movs	r2, #0
 8004edc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d007      	beq.n	8004efc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699a      	ldr	r2, [r3, #24]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f042 0201 	orr.w	r2, r2, #1
 8004efa:	619a      	str	r2, [r3, #24]
  }
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	603b      	str	r3, [r7, #0]
 8004f14:	4613      	mov	r3, r2
 8004f16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f18:	e031      	b.n	8004f7e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f20:	d02d      	beq.n	8004f7e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f22:	f7fd fb17 	bl	8002554 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d302      	bcc.n	8004f38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d122      	bne.n	8004f7e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	699a      	ldr	r2, [r3, #24]
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	4013      	ands	r3, r2
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	bf0c      	ite	eq
 8004f48:	2301      	moveq	r3, #1
 8004f4a:	2300      	movne	r3, #0
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	461a      	mov	r2, r3
 8004f50:	79fb      	ldrb	r3, [r7, #7]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d113      	bne.n	8004f7e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5a:	f043 0220 	orr.w	r2, r3, #32
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2220      	movs	r2, #32
 8004f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e00f      	b.n	8004f9e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	699a      	ldr	r2, [r3, #24]
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	4013      	ands	r3, r2
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	bf0c      	ite	eq
 8004f8e:	2301      	moveq	r3, #1
 8004f90:	2300      	movne	r3, #0
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	461a      	mov	r2, r3
 8004f96:	79fb      	ldrb	r3, [r7, #7]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d0be      	beq.n	8004f1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b084      	sub	sp, #16
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	60f8      	str	r0, [r7, #12]
 8004fae:	60b9      	str	r1, [r7, #8]
 8004fb0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004fb2:	e033      	b.n	800501c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	68b9      	ldr	r1, [r7, #8]
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 f901 	bl	80051c0 <I2C_IsErrorOccurred>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e031      	b.n	800502c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fce:	d025      	beq.n	800501c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fd0:	f7fd fac0 	bl	8002554 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d302      	bcc.n	8004fe6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d11a      	bne.n	800501c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d013      	beq.n	800501c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff8:	f043 0220 	orr.w	r2, r3, #32
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2220      	movs	r2, #32
 8005004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e007      	b.n	800502c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b02      	cmp	r3, #2
 8005028:	d1c4      	bne.n	8004fb4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005040:	e02f      	b.n	80050a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	68b9      	ldr	r1, [r7, #8]
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 f8ba 	bl	80051c0 <I2C_IsErrorOccurred>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e02d      	b.n	80050b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005056:	f7fd fa7d 	bl	8002554 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	429a      	cmp	r2, r3
 8005064:	d302      	bcc.n	800506c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d11a      	bne.n	80050a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	f003 0320 	and.w	r3, r3, #32
 8005076:	2b20      	cmp	r3, #32
 8005078:	d013      	beq.n	80050a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507e:	f043 0220 	orr.w	r2, r3, #32
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2220      	movs	r2, #32
 800508a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e007      	b.n	80050b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	f003 0320 	and.w	r3, r3, #32
 80050ac:	2b20      	cmp	r3, #32
 80050ae:	d1c8      	bne.n	8005042 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
	...

080050bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050c8:	e06b      	b.n	80051a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	68b9      	ldr	r1, [r7, #8]
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f000 f876 	bl	80051c0 <I2C_IsErrorOccurred>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e069      	b.n	80051b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	f003 0320 	and.w	r3, r3, #32
 80050e8:	2b20      	cmp	r3, #32
 80050ea:	d138      	bne.n	800515e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	f003 0304 	and.w	r3, r3, #4
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d105      	bne.n	8005106 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	e055      	b.n	80051b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	f003 0310 	and.w	r3, r3, #16
 8005110:	2b10      	cmp	r3, #16
 8005112:	d107      	bne.n	8005124 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2210      	movs	r2, #16
 800511a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2204      	movs	r2, #4
 8005120:	645a      	str	r2, [r3, #68]	; 0x44
 8005122:	e002      	b.n	800512a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2220      	movs	r2, #32
 8005130:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6859      	ldr	r1, [r3, #4]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	4b1f      	ldr	r3, [pc, #124]	; (80051bc <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800513e:	400b      	ands	r3, r1
 8005140:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2220      	movs	r2, #32
 8005146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e029      	b.n	80051b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800515e:	f7fd f9f9 	bl	8002554 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	429a      	cmp	r2, r3
 800516c:	d302      	bcc.n	8005174 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d116      	bne.n	80051a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	f003 0304 	and.w	r3, r3, #4
 800517e:	2b04      	cmp	r3, #4
 8005180:	d00f      	beq.n	80051a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005186:	f043 0220 	orr.w	r2, r3, #32
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2220      	movs	r2, #32
 8005192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e007      	b.n	80051b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	f003 0304 	and.w	r3, r3, #4
 80051ac:	2b04      	cmp	r3, #4
 80051ae:	d18c      	bne.n	80050ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	fe00e800 	.word	0xfe00e800

080051c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b08a      	sub	sp, #40	; 0x28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051cc:	2300      	movs	r3, #0
 80051ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80051da:	2300      	movs	r3, #0
 80051dc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	f003 0310 	and.w	r3, r3, #16
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d068      	beq.n	80052be <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2210      	movs	r2, #16
 80051f2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80051f4:	e049      	b.n	800528a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fc:	d045      	beq.n	800528a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80051fe:	f7fd f9a9 	bl	8002554 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	429a      	cmp	r2, r3
 800520c:	d302      	bcc.n	8005214 <I2C_IsErrorOccurred+0x54>
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d13a      	bne.n	800528a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800521e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005226:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005232:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005236:	d121      	bne.n	800527c <I2C_IsErrorOccurred+0xbc>
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800523e:	d01d      	beq.n	800527c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005240:	7cfb      	ldrb	r3, [r7, #19]
 8005242:	2b20      	cmp	r3, #32
 8005244:	d01a      	beq.n	800527c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005254:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005256:	f7fd f97d 	bl	8002554 <HAL_GetTick>
 800525a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800525c:	e00e      	b.n	800527c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800525e:	f7fd f979 	bl	8002554 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b19      	cmp	r3, #25
 800526a:	d907      	bls.n	800527c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	f043 0320 	orr.w	r3, r3, #32
 8005272:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800527a:	e006      	b.n	800528a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b20      	cmp	r3, #32
 8005288:	d1e9      	bne.n	800525e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	f003 0320 	and.w	r3, r3, #32
 8005294:	2b20      	cmp	r3, #32
 8005296:	d003      	beq.n	80052a0 <I2C_IsErrorOccurred+0xe0>
 8005298:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800529c:	2b00      	cmp	r3, #0
 800529e:	d0aa      	beq.n	80051f6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80052a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d103      	bne.n	80052b0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2220      	movs	r2, #32
 80052ae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80052b0:	6a3b      	ldr	r3, [r7, #32]
 80052b2:	f043 0304 	orr.w	r3, r3, #4
 80052b6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00b      	beq.n	80052e8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	f043 0301 	orr.w	r3, r3, #1
 80052d6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00b      	beq.n	800530a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	f043 0308 	orr.w	r3, r3, #8
 80052f8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005302:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00b      	beq.n	800532c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005314:	6a3b      	ldr	r3, [r7, #32]
 8005316:	f043 0302 	orr.w	r3, r3, #2
 800531a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005324:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800532c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005330:	2b00      	cmp	r3, #0
 8005332:	d01c      	beq.n	800536e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f7ff fdc3 	bl	8004ec0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6859      	ldr	r1, [r3, #4]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	4b0d      	ldr	r3, [pc, #52]	; (800537c <I2C_IsErrorOccurred+0x1bc>)
 8005346:	400b      	ands	r3, r1
 8005348:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800534e:	6a3b      	ldr	r3, [r7, #32]
 8005350:	431a      	orrs	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2220      	movs	r2, #32
 800535a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800536e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005372:	4618      	mov	r0, r3
 8005374:	3728      	adds	r7, #40	; 0x28
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	fe00e800 	.word	0xfe00e800

08005380 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	607b      	str	r3, [r7, #4]
 800538a:	460b      	mov	r3, r1
 800538c:	817b      	strh	r3, [r7, #10]
 800538e:	4613      	mov	r3, r2
 8005390:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005392:	897b      	ldrh	r3, [r7, #10]
 8005394:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005398:	7a7b      	ldrb	r3, [r7, #9]
 800539a:	041b      	lsls	r3, r3, #16
 800539c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	0d5b      	lsrs	r3, r3, #21
 80053ba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80053be:	4b08      	ldr	r3, [pc, #32]	; (80053e0 <I2C_TransferConfig+0x60>)
 80053c0:	430b      	orrs	r3, r1
 80053c2:	43db      	mvns	r3, r3
 80053c4:	ea02 0103 	and.w	r1, r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80053d2:	bf00      	nop
 80053d4:	371c      	adds	r7, #28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	03ff63ff 	.word	0x03ff63ff

080053e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b20      	cmp	r3, #32
 80053f8:	d138      	bne.n	800546c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005404:	2302      	movs	r3, #2
 8005406:	e032      	b.n	800546e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2224      	movs	r2, #36	; 0x24
 8005414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0201 	bic.w	r2, r2, #1
 8005426:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005436:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6819      	ldr	r1, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0201 	orr.w	r2, r2, #1
 8005456:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2220      	movs	r2, #32
 800545c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005468:	2300      	movs	r3, #0
 800546a:	e000      	b.n	800546e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800546c:	2302      	movs	r3, #2
  }
}
 800546e:	4618      	mov	r0, r3
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800547a:	b480      	push	{r7}
 800547c:	b085      	sub	sp, #20
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b20      	cmp	r3, #32
 800548e:	d139      	bne.n	8005504 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005496:	2b01      	cmp	r3, #1
 8005498:	d101      	bne.n	800549e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800549a:	2302      	movs	r3, #2
 800549c:	e033      	b.n	8005506 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2224      	movs	r2, #36	; 0x24
 80054aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 0201 	bic.w	r2, r2, #1
 80054bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80054cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	021b      	lsls	r3, r3, #8
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 0201 	orr.w	r2, r2, #1
 80054ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005500:	2300      	movs	r3, #0
 8005502:	e000      	b.n	8005506 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005504:	2302      	movs	r3, #2
  }
}
 8005506:	4618      	mov	r0, r3
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
	...

08005514 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800551c:	4b29      	ldr	r3, [pc, #164]	; (80055c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	2b06      	cmp	r3, #6
 8005526:	d00a      	beq.n	800553e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005528:	4b26      	ldr	r3, [pc, #152]	; (80055c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	429a      	cmp	r2, r3
 8005534:	d001      	beq.n	800553a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e040      	b.n	80055bc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	e03e      	b.n	80055bc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800553e:	4b21      	ldr	r3, [pc, #132]	; (80055c4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005546:	491f      	ldr	r1, [pc, #124]	; (80055c4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4313      	orrs	r3, r2
 800554c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800554e:	f7fd f801 	bl	8002554 <HAL_GetTick>
 8005552:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005554:	e009      	b.n	800556a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005556:	f7fc fffd 	bl	8002554 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005564:	d901      	bls.n	800556a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e028      	b.n	80055bc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800556a:	4b16      	ldr	r3, [pc, #88]	; (80055c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005576:	d1ee      	bne.n	8005556 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b1e      	cmp	r3, #30
 800557c:	d008      	beq.n	8005590 <HAL_PWREx_ConfigSupply+0x7c>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b2e      	cmp	r3, #46	; 0x2e
 8005582:	d005      	beq.n	8005590 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b1d      	cmp	r3, #29
 8005588:	d002      	beq.n	8005590 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b2d      	cmp	r3, #45	; 0x2d
 800558e:	d114      	bne.n	80055ba <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005590:	f7fc ffe0 	bl	8002554 <HAL_GetTick>
 8005594:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005596:	e009      	b.n	80055ac <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005598:	f7fc ffdc 	bl	8002554 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055a6:	d901      	bls.n	80055ac <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e007      	b.n	80055bc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80055ac:	4b05      	ldr	r3, [pc, #20]	; (80055c4 <HAL_PWREx_ConfigSupply+0xb0>)
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b8:	d1ee      	bne.n	8005598 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	58024800 	.word	0x58024800

080055c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08c      	sub	sp, #48	; 0x30
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d102      	bne.n	80055dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	f000 bc1f 	b.w	8005e1a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 80b3 	beq.w	8005750 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055ea:	4b95      	ldr	r3, [pc, #596]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80055f4:	4b92      	ldr	r3, [pc, #584]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 80055f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80055fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fc:	2b10      	cmp	r3, #16
 80055fe:	d007      	beq.n	8005610 <HAL_RCC_OscConfig+0x48>
 8005600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005602:	2b18      	cmp	r3, #24
 8005604:	d112      	bne.n	800562c <HAL_RCC_OscConfig+0x64>
 8005606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005608:	f003 0303 	and.w	r3, r3, #3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d10d      	bne.n	800562c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005610:	4b8b      	ldr	r3, [pc, #556]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 8098 	beq.w	800574e <HAL_RCC_OscConfig+0x186>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	f040 8093 	bne.w	800574e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e3f6      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005634:	d106      	bne.n	8005644 <HAL_RCC_OscConfig+0x7c>
 8005636:	4b82      	ldr	r3, [pc, #520]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a81      	ldr	r2, [pc, #516]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 800563c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005640:	6013      	str	r3, [r2, #0]
 8005642:	e058      	b.n	80056f6 <HAL_RCC_OscConfig+0x12e>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d112      	bne.n	8005672 <HAL_RCC_OscConfig+0xaa>
 800564c:	4b7c      	ldr	r3, [pc, #496]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a7b      	ldr	r2, [pc, #492]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 8005652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005656:	6013      	str	r3, [r2, #0]
 8005658:	4b79      	ldr	r3, [pc, #484]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a78      	ldr	r2, [pc, #480]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 800565e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005662:	6013      	str	r3, [r2, #0]
 8005664:	4b76      	ldr	r3, [pc, #472]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a75      	ldr	r2, [pc, #468]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 800566a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800566e:	6013      	str	r3, [r2, #0]
 8005670:	e041      	b.n	80056f6 <HAL_RCC_OscConfig+0x12e>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800567a:	d112      	bne.n	80056a2 <HAL_RCC_OscConfig+0xda>
 800567c:	4b70      	ldr	r3, [pc, #448]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a6f      	ldr	r2, [pc, #444]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 8005682:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005686:	6013      	str	r3, [r2, #0]
 8005688:	4b6d      	ldr	r3, [pc, #436]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a6c      	ldr	r2, [pc, #432]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 800568e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005692:	6013      	str	r3, [r2, #0]
 8005694:	4b6a      	ldr	r3, [pc, #424]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a69      	ldr	r2, [pc, #420]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 800569a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800569e:	6013      	str	r3, [r2, #0]
 80056a0:	e029      	b.n	80056f6 <HAL_RCC_OscConfig+0x12e>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80056aa:	d112      	bne.n	80056d2 <HAL_RCC_OscConfig+0x10a>
 80056ac:	4b64      	ldr	r3, [pc, #400]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a63      	ldr	r2, [pc, #396]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 80056b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	4b61      	ldr	r3, [pc, #388]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a60      	ldr	r2, [pc, #384]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 80056be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	4b5e      	ldr	r3, [pc, #376]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a5d      	ldr	r2, [pc, #372]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 80056ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056ce:	6013      	str	r3, [r2, #0]
 80056d0:	e011      	b.n	80056f6 <HAL_RCC_OscConfig+0x12e>
 80056d2:	4b5b      	ldr	r3, [pc, #364]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a5a      	ldr	r2, [pc, #360]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 80056d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056dc:	6013      	str	r3, [r2, #0]
 80056de:	4b58      	ldr	r3, [pc, #352]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a57      	ldr	r2, [pc, #348]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 80056e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	4b55      	ldr	r3, [pc, #340]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a54      	ldr	r2, [pc, #336]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 80056f0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80056f4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d013      	beq.n	8005726 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056fe:	f7fc ff29 	bl	8002554 <HAL_GetTick>
 8005702:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005704:	e008      	b.n	8005718 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005706:	f7fc ff25 	bl	8002554 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b64      	cmp	r3, #100	; 0x64
 8005712:	d901      	bls.n	8005718 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e380      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005718:	4b49      	ldr	r3, [pc, #292]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d0f0      	beq.n	8005706 <HAL_RCC_OscConfig+0x13e>
 8005724:	e014      	b.n	8005750 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005726:	f7fc ff15 	bl	8002554 <HAL_GetTick>
 800572a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800572c:	e008      	b.n	8005740 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800572e:	f7fc ff11 	bl	8002554 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b64      	cmp	r3, #100	; 0x64
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e36c      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005740:	4b3f      	ldr	r3, [pc, #252]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1f0      	bne.n	800572e <HAL_RCC_OscConfig+0x166>
 800574c:	e000      	b.n	8005750 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800574e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 808c 	beq.w	8005876 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800575e:	4b38      	ldr	r3, [pc, #224]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005766:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005768:	4b35      	ldr	r3, [pc, #212]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 800576a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d007      	beq.n	8005784 <HAL_RCC_OscConfig+0x1bc>
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	2b18      	cmp	r3, #24
 8005778:	d137      	bne.n	80057ea <HAL_RCC_OscConfig+0x222>
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	f003 0303 	and.w	r3, r3, #3
 8005780:	2b00      	cmp	r3, #0
 8005782:	d132      	bne.n	80057ea <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005784:	4b2e      	ldr	r3, [pc, #184]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0304 	and.w	r3, r3, #4
 800578c:	2b00      	cmp	r3, #0
 800578e:	d005      	beq.n	800579c <HAL_RCC_OscConfig+0x1d4>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e33e      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800579c:	4b28      	ldr	r3, [pc, #160]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f023 0219 	bic.w	r2, r3, #25
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	4925      	ldr	r1, [pc, #148]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ae:	f7fc fed1 	bl	8002554 <HAL_GetTick>
 80057b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057b4:	e008      	b.n	80057c8 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057b6:	f7fc fecd 	bl	8002554 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d901      	bls.n	80057c8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e328      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057c8:	4b1d      	ldr	r3, [pc, #116]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d0f0      	beq.n	80057b6 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057d4:	4b1a      	ldr	r3, [pc, #104]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	061b      	lsls	r3, r3, #24
 80057e2:	4917      	ldr	r1, [pc, #92]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057e8:	e045      	b.n	8005876 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d028      	beq.n	8005844 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80057f2:	4b13      	ldr	r3, [pc, #76]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f023 0219 	bic.w	r2, r3, #25
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	4910      	ldr	r1, [pc, #64]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 8005800:	4313      	orrs	r3, r2
 8005802:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005804:	f7fc fea6 	bl	8002554 <HAL_GetTick>
 8005808:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800580a:	e008      	b.n	800581e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800580c:	f7fc fea2 	bl	8002554 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b02      	cmp	r3, #2
 8005818:	d901      	bls.n	800581e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e2fd      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800581e:	4b08      	ldr	r3, [pc, #32]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0304 	and.w	r3, r3, #4
 8005826:	2b00      	cmp	r3, #0
 8005828:	d0f0      	beq.n	800580c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800582a:	4b05      	ldr	r3, [pc, #20]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	061b      	lsls	r3, r3, #24
 8005838:	4901      	ldr	r1, [pc, #4]	; (8005840 <HAL_RCC_OscConfig+0x278>)
 800583a:	4313      	orrs	r3, r2
 800583c:	604b      	str	r3, [r1, #4]
 800583e:	e01a      	b.n	8005876 <HAL_RCC_OscConfig+0x2ae>
 8005840:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005844:	4b97      	ldr	r3, [pc, #604]	; (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a96      	ldr	r2, [pc, #600]	; (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 800584a:	f023 0301 	bic.w	r3, r3, #1
 800584e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005850:	f7fc fe80 	bl	8002554 <HAL_GetTick>
 8005854:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005856:	e008      	b.n	800586a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005858:	f7fc fe7c 	bl	8002554 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e2d7      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800586a:	4b8e      	ldr	r3, [pc, #568]	; (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0304 	and.w	r3, r3, #4
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1f0      	bne.n	8005858 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0310 	and.w	r3, r3, #16
 800587e:	2b00      	cmp	r3, #0
 8005880:	d06a      	beq.n	8005958 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005882:	4b88      	ldr	r3, [pc, #544]	; (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800588a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800588c:	4b85      	ldr	r3, [pc, #532]	; (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 800588e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005890:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	2b08      	cmp	r3, #8
 8005896:	d007      	beq.n	80058a8 <HAL_RCC_OscConfig+0x2e0>
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	2b18      	cmp	r3, #24
 800589c:	d11b      	bne.n	80058d6 <HAL_RCC_OscConfig+0x30e>
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f003 0303 	and.w	r3, r3, #3
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d116      	bne.n	80058d6 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80058a8:	4b7e      	ldr	r3, [pc, #504]	; (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d005      	beq.n	80058c0 <HAL_RCC_OscConfig+0x2f8>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	69db      	ldr	r3, [r3, #28]
 80058b8:	2b80      	cmp	r3, #128	; 0x80
 80058ba:	d001      	beq.n	80058c0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e2ac      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80058c0:	4b78      	ldr	r3, [pc, #480]	; (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	061b      	lsls	r3, r3, #24
 80058ce:	4975      	ldr	r1, [pc, #468]	; (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80058d4:	e040      	b.n	8005958 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d023      	beq.n	8005926 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80058de:	4b71      	ldr	r3, [pc, #452]	; (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a70      	ldr	r2, [pc, #448]	; (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 80058e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ea:	f7fc fe33 	bl	8002554 <HAL_GetTick>
 80058ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80058f0:	e008      	b.n	8005904 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80058f2:	f7fc fe2f 	bl	8002554 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d901      	bls.n	8005904 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e28a      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005904:	4b67      	ldr	r3, [pc, #412]	; (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800590c:	2b00      	cmp	r3, #0
 800590e:	d0f0      	beq.n	80058f2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005910:	4b64      	ldr	r3, [pc, #400]	; (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	061b      	lsls	r3, r3, #24
 800591e:	4961      	ldr	r1, [pc, #388]	; (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 8005920:	4313      	orrs	r3, r2
 8005922:	60cb      	str	r3, [r1, #12]
 8005924:	e018      	b.n	8005958 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005926:	4b5f      	ldr	r3, [pc, #380]	; (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a5e      	ldr	r2, [pc, #376]	; (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 800592c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005932:	f7fc fe0f 	bl	8002554 <HAL_GetTick>
 8005936:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005938:	e008      	b.n	800594c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800593a:	f7fc fe0b 	bl	8002554 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d901      	bls.n	800594c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e266      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800594c:	4b55      	ldr	r3, [pc, #340]	; (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1f0      	bne.n	800593a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0308 	and.w	r3, r3, #8
 8005960:	2b00      	cmp	r3, #0
 8005962:	d036      	beq.n	80059d2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d019      	beq.n	80059a0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800596c:	4b4d      	ldr	r3, [pc, #308]	; (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 800596e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005970:	4a4c      	ldr	r2, [pc, #304]	; (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 8005972:	f043 0301 	orr.w	r3, r3, #1
 8005976:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005978:	f7fc fdec 	bl	8002554 <HAL_GetTick>
 800597c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800597e:	e008      	b.n	8005992 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005980:	f7fc fde8 	bl	8002554 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d901      	bls.n	8005992 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e243      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005992:	4b44      	ldr	r3, [pc, #272]	; (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 8005994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0f0      	beq.n	8005980 <HAL_RCC_OscConfig+0x3b8>
 800599e:	e018      	b.n	80059d2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059a0:	4b40      	ldr	r3, [pc, #256]	; (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 80059a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059a4:	4a3f      	ldr	r2, [pc, #252]	; (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 80059a6:	f023 0301 	bic.w	r3, r3, #1
 80059aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ac:	f7fc fdd2 	bl	8002554 <HAL_GetTick>
 80059b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059b4:	f7fc fdce 	bl	8002554 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e229      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80059c6:	4b37      	ldr	r3, [pc, #220]	; (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 80059c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1f0      	bne.n	80059b4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0320 	and.w	r3, r3, #32
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d036      	beq.n	8005a4c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d019      	beq.n	8005a1a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80059e6:	4b2f      	ldr	r3, [pc, #188]	; (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a2e      	ldr	r2, [pc, #184]	; (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 80059ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80059f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80059f2:	f7fc fdaf 	bl	8002554 <HAL_GetTick>
 80059f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80059f8:	e008      	b.n	8005a0c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059fa:	f7fc fdab 	bl	8002554 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d901      	bls.n	8005a0c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e206      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a0c:	4b25      	ldr	r3, [pc, #148]	; (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d0f0      	beq.n	80059fa <HAL_RCC_OscConfig+0x432>
 8005a18:	e018      	b.n	8005a4c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a1a:	4b22      	ldr	r3, [pc, #136]	; (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a21      	ldr	r2, [pc, #132]	; (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 8005a20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a24:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005a26:	f7fc fd95 	bl	8002554 <HAL_GetTick>
 8005a2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005a2c:	e008      	b.n	8005a40 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a2e:	f7fc fd91 	bl	8002554 <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e1ec      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005a40:	4b18      	ldr	r3, [pc, #96]	; (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1f0      	bne.n	8005a2e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 80af 	beq.w	8005bb8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005a5a:	4b13      	ldr	r3, [pc, #76]	; (8005aa8 <HAL_RCC_OscConfig+0x4e0>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a12      	ldr	r2, [pc, #72]	; (8005aa8 <HAL_RCC_OscConfig+0x4e0>)
 8005a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a66:	f7fc fd75 	bl	8002554 <HAL_GetTick>
 8005a6a:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a6c:	e008      	b.n	8005a80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a6e:	f7fc fd71 	bl	8002554 <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	2b64      	cmp	r3, #100	; 0x64
 8005a7a:	d901      	bls.n	8005a80 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e1cc      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a80:	4b09      	ldr	r3, [pc, #36]	; (8005aa8 <HAL_RCC_OscConfig+0x4e0>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d0f0      	beq.n	8005a6e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d10b      	bne.n	8005aac <HAL_RCC_OscConfig+0x4e4>
 8005a94:	4b03      	ldr	r3, [pc, #12]	; (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 8005a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a98:	4a02      	ldr	r2, [pc, #8]	; (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 8005a9a:	f043 0301 	orr.w	r3, r3, #1
 8005a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8005aa0:	e05b      	b.n	8005b5a <HAL_RCC_OscConfig+0x592>
 8005aa2:	bf00      	nop
 8005aa4:	58024400 	.word	0x58024400
 8005aa8:	58024800 	.word	0x58024800
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d112      	bne.n	8005ada <HAL_RCC_OscConfig+0x512>
 8005ab4:	4b9d      	ldr	r3, [pc, #628]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab8:	4a9c      	ldr	r2, [pc, #624]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005aba:	f023 0301 	bic.w	r3, r3, #1
 8005abe:	6713      	str	r3, [r2, #112]	; 0x70
 8005ac0:	4b9a      	ldr	r3, [pc, #616]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac4:	4a99      	ldr	r2, [pc, #612]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005ac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aca:	6713      	str	r3, [r2, #112]	; 0x70
 8005acc:	4b97      	ldr	r3, [pc, #604]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad0:	4a96      	ldr	r2, [pc, #600]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005ad2:	f023 0304 	bic.w	r3, r3, #4
 8005ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ad8:	e03f      	b.n	8005b5a <HAL_RCC_OscConfig+0x592>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	2b05      	cmp	r3, #5
 8005ae0:	d112      	bne.n	8005b08 <HAL_RCC_OscConfig+0x540>
 8005ae2:	4b92      	ldr	r3, [pc, #584]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae6:	4a91      	ldr	r2, [pc, #580]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005ae8:	f043 0304 	orr.w	r3, r3, #4
 8005aec:	6713      	str	r3, [r2, #112]	; 0x70
 8005aee:	4b8f      	ldr	r3, [pc, #572]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af2:	4a8e      	ldr	r2, [pc, #568]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005af4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005af8:	6713      	str	r3, [r2, #112]	; 0x70
 8005afa:	4b8c      	ldr	r3, [pc, #560]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afe:	4a8b      	ldr	r2, [pc, #556]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005b00:	f043 0301 	orr.w	r3, r3, #1
 8005b04:	6713      	str	r3, [r2, #112]	; 0x70
 8005b06:	e028      	b.n	8005b5a <HAL_RCC_OscConfig+0x592>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	2b85      	cmp	r3, #133	; 0x85
 8005b0e:	d112      	bne.n	8005b36 <HAL_RCC_OscConfig+0x56e>
 8005b10:	4b86      	ldr	r3, [pc, #536]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b14:	4a85      	ldr	r2, [pc, #532]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005b16:	f043 0304 	orr.w	r3, r3, #4
 8005b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b1c:	4b83      	ldr	r3, [pc, #524]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b20:	4a82      	ldr	r2, [pc, #520]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b26:	6713      	str	r3, [r2, #112]	; 0x70
 8005b28:	4b80      	ldr	r3, [pc, #512]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2c:	4a7f      	ldr	r2, [pc, #508]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005b2e:	f043 0301 	orr.w	r3, r3, #1
 8005b32:	6713      	str	r3, [r2, #112]	; 0x70
 8005b34:	e011      	b.n	8005b5a <HAL_RCC_OscConfig+0x592>
 8005b36:	4b7d      	ldr	r3, [pc, #500]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3a:	4a7c      	ldr	r2, [pc, #496]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005b3c:	f023 0301 	bic.w	r3, r3, #1
 8005b40:	6713      	str	r3, [r2, #112]	; 0x70
 8005b42:	4b7a      	ldr	r3, [pc, #488]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b46:	4a79      	ldr	r2, [pc, #484]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005b48:	f023 0304 	bic.w	r3, r3, #4
 8005b4c:	6713      	str	r3, [r2, #112]	; 0x70
 8005b4e:	4b77      	ldr	r3, [pc, #476]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b52:	4a76      	ldr	r2, [pc, #472]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005b54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d015      	beq.n	8005b8e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b62:	f7fc fcf7 	bl	8002554 <HAL_GetTick>
 8005b66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b68:	e00a      	b.n	8005b80 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b6a:	f7fc fcf3 	bl	8002554 <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d901      	bls.n	8005b80 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e14c      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b80:	4b6a      	ldr	r3, [pc, #424]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0ee      	beq.n	8005b6a <HAL_RCC_OscConfig+0x5a2>
 8005b8c:	e014      	b.n	8005bb8 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b8e:	f7fc fce1 	bl	8002554 <HAL_GetTick>
 8005b92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b94:	e00a      	b.n	8005bac <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b96:	f7fc fcdd 	bl	8002554 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d901      	bls.n	8005bac <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e136      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005bac:	4b5f      	ldr	r3, [pc, #380]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1ee      	bne.n	8005b96 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 812b 	beq.w	8005e18 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005bc2:	4b5a      	ldr	r3, [pc, #360]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bca:	2b18      	cmp	r3, #24
 8005bcc:	f000 80bb 	beq.w	8005d46 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	f040 8095 	bne.w	8005d04 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bda:	4b54      	ldr	r3, [pc, #336]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a53      	ldr	r2, [pc, #332]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005be0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be6:	f7fc fcb5 	bl	8002554 <HAL_GetTick>
 8005bea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005bec:	e008      	b.n	8005c00 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bee:	f7fc fcb1 	bl	8002554 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d901      	bls.n	8005c00 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e10c      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c00:	4b4a      	ldr	r3, [pc, #296]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1f0      	bne.n	8005bee <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c0c:	4b47      	ldr	r3, [pc, #284]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005c0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c10:	4b47      	ldr	r3, [pc, #284]	; (8005d30 <HAL_RCC_OscConfig+0x768>)
 8005c12:	4013      	ands	r3, r2
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005c1c:	0112      	lsls	r2, r2, #4
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	4942      	ldr	r1, [pc, #264]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	628b      	str	r3, [r1, #40]	; 0x28
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c34:	3b01      	subs	r3, #1
 8005c36:	025b      	lsls	r3, r3, #9
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c40:	3b01      	subs	r3, #1
 8005c42:	041b      	lsls	r3, r3, #16
 8005c44:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	061b      	lsls	r3, r3, #24
 8005c52:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c56:	4935      	ldr	r1, [pc, #212]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005c5c:	4b33      	ldr	r3, [pc, #204]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c60:	4a32      	ldr	r2, [pc, #200]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005c62:	f023 0301 	bic.w	r3, r3, #1
 8005c66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005c68:	4b30      	ldr	r3, [pc, #192]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c6c:	4b31      	ldr	r3, [pc, #196]	; (8005d34 <HAL_RCC_OscConfig+0x76c>)
 8005c6e:	4013      	ands	r3, r2
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005c74:	00d2      	lsls	r2, r2, #3
 8005c76:	492d      	ldr	r1, [pc, #180]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005c7c:	4b2b      	ldr	r3, [pc, #172]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c80:	f023 020c 	bic.w	r2, r3, #12
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c88:	4928      	ldr	r1, [pc, #160]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005c8e:	4b27      	ldr	r3, [pc, #156]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c92:	f023 0202 	bic.w	r2, r3, #2
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9a:	4924      	ldr	r1, [pc, #144]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005ca0:	4b22      	ldr	r3, [pc, #136]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca4:	4a21      	ldr	r2, [pc, #132]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005caa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cac:	4b1f      	ldr	r3, [pc, #124]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb0:	4a1e      	ldr	r2, [pc, #120]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005cb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005cb8:	4b1c      	ldr	r3, [pc, #112]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbc:	4a1b      	ldr	r2, [pc, #108]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005cbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005cc4:	4b19      	ldr	r3, [pc, #100]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc8:	4a18      	ldr	r2, [pc, #96]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005cca:	f043 0301 	orr.w	r3, r3, #1
 8005cce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cd0:	4b16      	ldr	r3, [pc, #88]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a15      	ldr	r2, [pc, #84]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005cd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cdc:	f7fc fc3a 	bl	8002554 <HAL_GetTick>
 8005ce0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ce2:	e008      	b.n	8005cf6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ce4:	f7fc fc36 	bl	8002554 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d901      	bls.n	8005cf6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e091      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005cf6:	4b0d      	ldr	r3, [pc, #52]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d0f0      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x71c>
 8005d02:	e089      	b.n	8005e18 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d04:	4b09      	ldr	r3, [pc, #36]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a08      	ldr	r2, [pc, #32]	; (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005d0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d10:	f7fc fc20 	bl	8002554 <HAL_GetTick>
 8005d14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d16:	e00f      	b.n	8005d38 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d18:	f7fc fc1c 	bl	8002554 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d908      	bls.n	8005d38 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e077      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
 8005d2a:	bf00      	nop
 8005d2c:	58024400 	.word	0x58024400
 8005d30:	fffffc0c 	.word	0xfffffc0c
 8005d34:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d38:	4b3a      	ldr	r3, [pc, #232]	; (8005e24 <HAL_RCC_OscConfig+0x85c>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1e9      	bne.n	8005d18 <HAL_RCC_OscConfig+0x750>
 8005d44:	e068      	b.n	8005e18 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005d46:	4b37      	ldr	r3, [pc, #220]	; (8005e24 <HAL_RCC_OscConfig+0x85c>)
 8005d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005d4c:	4b35      	ldr	r3, [pc, #212]	; (8005e24 <HAL_RCC_OscConfig+0x85c>)
 8005d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d50:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d031      	beq.n	8005dbe <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	f003 0203 	and.w	r2, r3, #3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d12a      	bne.n	8005dbe <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	091b      	lsrs	r3, r3, #4
 8005d6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d122      	bne.n	8005dbe <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d82:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d11a      	bne.n	8005dbe <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	0a5b      	lsrs	r3, r3, #9
 8005d8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d94:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d111      	bne.n	8005dbe <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	0c1b      	lsrs	r3, r3, #16
 8005d9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d108      	bne.n	8005dbe <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	0e1b      	lsrs	r3, r3, #24
 8005db0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d001      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e02b      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005dc2:	4b18      	ldr	r3, [pc, #96]	; (8005e24 <HAL_RCC_OscConfig+0x85c>)
 8005dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc6:	08db      	lsrs	r3, r3, #3
 8005dc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005dcc:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d01f      	beq.n	8005e18 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005dd8:	4b12      	ldr	r3, [pc, #72]	; (8005e24 <HAL_RCC_OscConfig+0x85c>)
 8005dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ddc:	4a11      	ldr	r2, [pc, #68]	; (8005e24 <HAL_RCC_OscConfig+0x85c>)
 8005dde:	f023 0301 	bic.w	r3, r3, #1
 8005de2:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005de4:	f7fc fbb6 	bl	8002554 <HAL_GetTick>
 8005de8:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005dea:	bf00      	nop
 8005dec:	f7fc fbb2 	bl	8002554 <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d0f9      	beq.n	8005dec <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005df8:	4b0a      	ldr	r3, [pc, #40]	; (8005e24 <HAL_RCC_OscConfig+0x85c>)
 8005dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dfc:	4b0a      	ldr	r3, [pc, #40]	; (8005e28 <HAL_RCC_OscConfig+0x860>)
 8005dfe:	4013      	ands	r3, r2
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005e04:	00d2      	lsls	r2, r2, #3
 8005e06:	4907      	ldr	r1, [pc, #28]	; (8005e24 <HAL_RCC_OscConfig+0x85c>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005e0c:	4b05      	ldr	r3, [pc, #20]	; (8005e24 <HAL_RCC_OscConfig+0x85c>)
 8005e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e10:	4a04      	ldr	r2, [pc, #16]	; (8005e24 <HAL_RCC_OscConfig+0x85c>)
 8005e12:	f043 0301 	orr.w	r3, r3, #1
 8005e16:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3730      	adds	r7, #48	; 0x30
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	58024400 	.word	0x58024400
 8005e28:	ffff0007 	.word	0xffff0007

08005e2c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d101      	bne.n	8005e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e19c      	b.n	800617a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e40:	4b8a      	ldr	r3, [pc, #552]	; (800606c <HAL_RCC_ClockConfig+0x240>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 030f 	and.w	r3, r3, #15
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d910      	bls.n	8005e70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e4e:	4b87      	ldr	r3, [pc, #540]	; (800606c <HAL_RCC_ClockConfig+0x240>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f023 020f 	bic.w	r2, r3, #15
 8005e56:	4985      	ldr	r1, [pc, #532]	; (800606c <HAL_RCC_ClockConfig+0x240>)
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e5e:	4b83      	ldr	r3, [pc, #524]	; (800606c <HAL_RCC_ClockConfig+0x240>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 030f 	and.w	r3, r3, #15
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d001      	beq.n	8005e70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e184      	b.n	800617a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0304 	and.w	r3, r3, #4
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d010      	beq.n	8005e9e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	691a      	ldr	r2, [r3, #16]
 8005e80:	4b7b      	ldr	r3, [pc, #492]	; (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d908      	bls.n	8005e9e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e8c:	4b78      	ldr	r3, [pc, #480]	; (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	4975      	ldr	r1, [pc, #468]	; (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0308 	and.w	r3, r3, #8
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d010      	beq.n	8005ecc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	695a      	ldr	r2, [r3, #20]
 8005eae:	4b70      	ldr	r3, [pc, #448]	; (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005eb0:	69db      	ldr	r3, [r3, #28]
 8005eb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d908      	bls.n	8005ecc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005eba:	4b6d      	ldr	r3, [pc, #436]	; (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005ebc:	69db      	ldr	r3, [r3, #28]
 8005ebe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	496a      	ldr	r1, [pc, #424]	; (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0310 	and.w	r3, r3, #16
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d010      	beq.n	8005efa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	699a      	ldr	r2, [r3, #24]
 8005edc:	4b64      	ldr	r3, [pc, #400]	; (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d908      	bls.n	8005efa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ee8:	4b61      	ldr	r3, [pc, #388]	; (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	495e      	ldr	r1, [pc, #376]	; (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0320 	and.w	r3, r3, #32
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d010      	beq.n	8005f28 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	69da      	ldr	r2, [r3, #28]
 8005f0a:	4b59      	ldr	r3, [pc, #356]	; (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d908      	bls.n	8005f28 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005f16:	4b56      	ldr	r3, [pc, #344]	; (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	4953      	ldr	r1, [pc, #332]	; (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005f24:	4313      	orrs	r3, r2
 8005f26:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d010      	beq.n	8005f56 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68da      	ldr	r2, [r3, #12]
 8005f38:	4b4d      	ldr	r3, [pc, #308]	; (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	f003 030f 	and.w	r3, r3, #15
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d908      	bls.n	8005f56 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f44:	4b4a      	ldr	r3, [pc, #296]	; (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	f023 020f 	bic.w	r2, r3, #15
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	4947      	ldr	r1, [pc, #284]	; (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d055      	beq.n	800600e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005f62:	4b43      	ldr	r3, [pc, #268]	; (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	4940      	ldr	r1, [pc, #256]	; (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d107      	bne.n	8005f8c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f7c:	4b3c      	ldr	r3, [pc, #240]	; (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d121      	bne.n	8005fcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e0f6      	b.n	800617a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	2b03      	cmp	r3, #3
 8005f92:	d107      	bne.n	8005fa4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f94:	4b36      	ldr	r3, [pc, #216]	; (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d115      	bne.n	8005fcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e0ea      	b.n	800617a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d107      	bne.n	8005fbc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005fac:	4b30      	ldr	r3, [pc, #192]	; (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d109      	bne.n	8005fcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e0de      	b.n	800617a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fbc:	4b2c      	ldr	r3, [pc, #176]	; (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0304 	and.w	r3, r3, #4
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d101      	bne.n	8005fcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e0d6      	b.n	800617a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005fcc:	4b28      	ldr	r3, [pc, #160]	; (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	f023 0207 	bic.w	r2, r3, #7
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	4925      	ldr	r1, [pc, #148]	; (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fde:	f7fc fab9 	bl	8002554 <HAL_GetTick>
 8005fe2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fe4:	e00a      	b.n	8005ffc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fe6:	f7fc fab5 	bl	8002554 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d901      	bls.n	8005ffc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e0be      	b.n	800617a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ffc:	4b1c      	ldr	r3, [pc, #112]	; (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	00db      	lsls	r3, r3, #3
 800600a:	429a      	cmp	r2, r3
 800600c:	d1eb      	bne.n	8005fe6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d010      	beq.n	800603c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68da      	ldr	r2, [r3, #12]
 800601e:	4b14      	ldr	r3, [pc, #80]	; (8006070 <HAL_RCC_ClockConfig+0x244>)
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	f003 030f 	and.w	r3, r3, #15
 8006026:	429a      	cmp	r2, r3
 8006028:	d208      	bcs.n	800603c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800602a:	4b11      	ldr	r3, [pc, #68]	; (8006070 <HAL_RCC_ClockConfig+0x244>)
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	f023 020f 	bic.w	r2, r3, #15
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	490e      	ldr	r1, [pc, #56]	; (8006070 <HAL_RCC_ClockConfig+0x244>)
 8006038:	4313      	orrs	r3, r2
 800603a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800603c:	4b0b      	ldr	r3, [pc, #44]	; (800606c <HAL_RCC_ClockConfig+0x240>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 030f 	and.w	r3, r3, #15
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	429a      	cmp	r2, r3
 8006048:	d214      	bcs.n	8006074 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800604a:	4b08      	ldr	r3, [pc, #32]	; (800606c <HAL_RCC_ClockConfig+0x240>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f023 020f 	bic.w	r2, r3, #15
 8006052:	4906      	ldr	r1, [pc, #24]	; (800606c <HAL_RCC_ClockConfig+0x240>)
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	4313      	orrs	r3, r2
 8006058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800605a:	4b04      	ldr	r3, [pc, #16]	; (800606c <HAL_RCC_ClockConfig+0x240>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 030f 	and.w	r3, r3, #15
 8006062:	683a      	ldr	r2, [r7, #0]
 8006064:	429a      	cmp	r2, r3
 8006066:	d005      	beq.n	8006074 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e086      	b.n	800617a <HAL_RCC_ClockConfig+0x34e>
 800606c:	52002000 	.word	0x52002000
 8006070:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0304 	and.w	r3, r3, #4
 800607c:	2b00      	cmp	r3, #0
 800607e:	d010      	beq.n	80060a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	691a      	ldr	r2, [r3, #16]
 8006084:	4b3f      	ldr	r3, [pc, #252]	; (8006184 <HAL_RCC_ClockConfig+0x358>)
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800608c:	429a      	cmp	r2, r3
 800608e:	d208      	bcs.n	80060a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006090:	4b3c      	ldr	r3, [pc, #240]	; (8006184 <HAL_RCC_ClockConfig+0x358>)
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	4939      	ldr	r1, [pc, #228]	; (8006184 <HAL_RCC_ClockConfig+0x358>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0308 	and.w	r3, r3, #8
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d010      	beq.n	80060d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	695a      	ldr	r2, [r3, #20]
 80060b2:	4b34      	ldr	r3, [pc, #208]	; (8006184 <HAL_RCC_ClockConfig+0x358>)
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d208      	bcs.n	80060d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80060be:	4b31      	ldr	r3, [pc, #196]	; (8006184 <HAL_RCC_ClockConfig+0x358>)
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	492e      	ldr	r1, [pc, #184]	; (8006184 <HAL_RCC_ClockConfig+0x358>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0310 	and.w	r3, r3, #16
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d010      	beq.n	80060fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	699a      	ldr	r2, [r3, #24]
 80060e0:	4b28      	ldr	r3, [pc, #160]	; (8006184 <HAL_RCC_ClockConfig+0x358>)
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d208      	bcs.n	80060fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80060ec:	4b25      	ldr	r3, [pc, #148]	; (8006184 <HAL_RCC_ClockConfig+0x358>)
 80060ee:	69db      	ldr	r3, [r3, #28]
 80060f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	4922      	ldr	r1, [pc, #136]	; (8006184 <HAL_RCC_ClockConfig+0x358>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0320 	and.w	r3, r3, #32
 8006106:	2b00      	cmp	r3, #0
 8006108:	d010      	beq.n	800612c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	69da      	ldr	r2, [r3, #28]
 800610e:	4b1d      	ldr	r3, [pc, #116]	; (8006184 <HAL_RCC_ClockConfig+0x358>)
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006116:	429a      	cmp	r2, r3
 8006118:	d208      	bcs.n	800612c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800611a:	4b1a      	ldr	r3, [pc, #104]	; (8006184 <HAL_RCC_ClockConfig+0x358>)
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	4917      	ldr	r1, [pc, #92]	; (8006184 <HAL_RCC_ClockConfig+0x358>)
 8006128:	4313      	orrs	r3, r2
 800612a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800612c:	f000 f834 	bl	8006198 <HAL_RCC_GetSysClockFreq>
 8006130:	4602      	mov	r2, r0
 8006132:	4b14      	ldr	r3, [pc, #80]	; (8006184 <HAL_RCC_ClockConfig+0x358>)
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	0a1b      	lsrs	r3, r3, #8
 8006138:	f003 030f 	and.w	r3, r3, #15
 800613c:	4912      	ldr	r1, [pc, #72]	; (8006188 <HAL_RCC_ClockConfig+0x35c>)
 800613e:	5ccb      	ldrb	r3, [r1, r3]
 8006140:	f003 031f 	and.w	r3, r3, #31
 8006144:	fa22 f303 	lsr.w	r3, r2, r3
 8006148:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800614a:	4b0e      	ldr	r3, [pc, #56]	; (8006184 <HAL_RCC_ClockConfig+0x358>)
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	f003 030f 	and.w	r3, r3, #15
 8006152:	4a0d      	ldr	r2, [pc, #52]	; (8006188 <HAL_RCC_ClockConfig+0x35c>)
 8006154:	5cd3      	ldrb	r3, [r2, r3]
 8006156:	f003 031f 	and.w	r3, r3, #31
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	fa22 f303 	lsr.w	r3, r2, r3
 8006160:	4a0a      	ldr	r2, [pc, #40]	; (800618c <HAL_RCC_ClockConfig+0x360>)
 8006162:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006164:	4a0a      	ldr	r2, [pc, #40]	; (8006190 <HAL_RCC_ClockConfig+0x364>)
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800616a:	4b0a      	ldr	r3, [pc, #40]	; (8006194 <HAL_RCC_ClockConfig+0x368>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4618      	mov	r0, r3
 8006170:	f7fc f9a6 	bl	80024c0 <HAL_InitTick>
 8006174:	4603      	mov	r3, r0
 8006176:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006178:	7bfb      	ldrb	r3, [r7, #15]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3718      	adds	r7, #24
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	58024400 	.word	0x58024400
 8006188:	0800fac0 	.word	0x0800fac0
 800618c:	2400000c 	.word	0x2400000c
 8006190:	24000008 	.word	0x24000008
 8006194:	24000010 	.word	0x24000010

08006198 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006198:	b480      	push	{r7}
 800619a:	b089      	sub	sp, #36	; 0x24
 800619c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800619e:	4bb3      	ldr	r3, [pc, #716]	; (800646c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061a6:	2b18      	cmp	r3, #24
 80061a8:	f200 8155 	bhi.w	8006456 <HAL_RCC_GetSysClockFreq+0x2be>
 80061ac:	a201      	add	r2, pc, #4	; (adr r2, 80061b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80061ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b2:	bf00      	nop
 80061b4:	08006219 	.word	0x08006219
 80061b8:	08006457 	.word	0x08006457
 80061bc:	08006457 	.word	0x08006457
 80061c0:	08006457 	.word	0x08006457
 80061c4:	08006457 	.word	0x08006457
 80061c8:	08006457 	.word	0x08006457
 80061cc:	08006457 	.word	0x08006457
 80061d0:	08006457 	.word	0x08006457
 80061d4:	0800623f 	.word	0x0800623f
 80061d8:	08006457 	.word	0x08006457
 80061dc:	08006457 	.word	0x08006457
 80061e0:	08006457 	.word	0x08006457
 80061e4:	08006457 	.word	0x08006457
 80061e8:	08006457 	.word	0x08006457
 80061ec:	08006457 	.word	0x08006457
 80061f0:	08006457 	.word	0x08006457
 80061f4:	08006245 	.word	0x08006245
 80061f8:	08006457 	.word	0x08006457
 80061fc:	08006457 	.word	0x08006457
 8006200:	08006457 	.word	0x08006457
 8006204:	08006457 	.word	0x08006457
 8006208:	08006457 	.word	0x08006457
 800620c:	08006457 	.word	0x08006457
 8006210:	08006457 	.word	0x08006457
 8006214:	0800624b 	.word	0x0800624b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006218:	4b94      	ldr	r3, [pc, #592]	; (800646c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0320 	and.w	r3, r3, #32
 8006220:	2b00      	cmp	r3, #0
 8006222:	d009      	beq.n	8006238 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006224:	4b91      	ldr	r3, [pc, #580]	; (800646c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	08db      	lsrs	r3, r3, #3
 800622a:	f003 0303 	and.w	r3, r3, #3
 800622e:	4a90      	ldr	r2, [pc, #576]	; (8006470 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006230:	fa22 f303 	lsr.w	r3, r2, r3
 8006234:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006236:	e111      	b.n	800645c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006238:	4b8d      	ldr	r3, [pc, #564]	; (8006470 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800623a:	61bb      	str	r3, [r7, #24]
      break;
 800623c:	e10e      	b.n	800645c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800623e:	4b8d      	ldr	r3, [pc, #564]	; (8006474 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006240:	61bb      	str	r3, [r7, #24]
      break;
 8006242:	e10b      	b.n	800645c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006244:	4b8c      	ldr	r3, [pc, #560]	; (8006478 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006246:	61bb      	str	r3, [r7, #24]
      break;
 8006248:	e108      	b.n	800645c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800624a:	4b88      	ldr	r3, [pc, #544]	; (800646c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800624c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624e:	f003 0303 	and.w	r3, r3, #3
 8006252:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006254:	4b85      	ldr	r3, [pc, #532]	; (800646c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006258:	091b      	lsrs	r3, r3, #4
 800625a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800625e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006260:	4b82      	ldr	r3, [pc, #520]	; (800646c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800626a:	4b80      	ldr	r3, [pc, #512]	; (800646c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800626c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800626e:	08db      	lsrs	r3, r3, #3
 8006270:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	fb02 f303 	mul.w	r3, r2, r3
 800627a:	ee07 3a90 	vmov	s15, r3
 800627e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006282:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 80e1 	beq.w	8006450 <HAL_RCC_GetSysClockFreq+0x2b8>
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2b02      	cmp	r3, #2
 8006292:	f000 8083 	beq.w	800639c <HAL_RCC_GetSysClockFreq+0x204>
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	2b02      	cmp	r3, #2
 800629a:	f200 80a1 	bhi.w	80063e0 <HAL_RCC_GetSysClockFreq+0x248>
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <HAL_RCC_GetSysClockFreq+0x114>
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d056      	beq.n	8006358 <HAL_RCC_GetSysClockFreq+0x1c0>
 80062aa:	e099      	b.n	80063e0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062ac:	4b6f      	ldr	r3, [pc, #444]	; (800646c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0320 	and.w	r3, r3, #32
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d02d      	beq.n	8006314 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062b8:	4b6c      	ldr	r3, [pc, #432]	; (800646c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	08db      	lsrs	r3, r3, #3
 80062be:	f003 0303 	and.w	r3, r3, #3
 80062c2:	4a6b      	ldr	r2, [pc, #428]	; (8006470 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80062c4:	fa22 f303 	lsr.w	r3, r2, r3
 80062c8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	ee07 3a90 	vmov	s15, r3
 80062d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	ee07 3a90 	vmov	s15, r3
 80062da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062e2:	4b62      	ldr	r3, [pc, #392]	; (800646c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ea:	ee07 3a90 	vmov	s15, r3
 80062ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80062f6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800647c <HAL_RCC_GetSysClockFreq+0x2e4>
 80062fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006302:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800630a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800630e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006312:	e087      	b.n	8006424 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	ee07 3a90 	vmov	s15, r3
 800631a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800631e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006480 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006326:	4b51      	ldr	r3, [pc, #324]	; (800646c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800632e:	ee07 3a90 	vmov	s15, r3
 8006332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006336:	ed97 6a02 	vldr	s12, [r7, #8]
 800633a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800647c <HAL_RCC_GetSysClockFreq+0x2e4>
 800633e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006346:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800634a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800634e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006352:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006356:	e065      	b.n	8006424 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	ee07 3a90 	vmov	s15, r3
 800635e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006362:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006484 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800636a:	4b40      	ldr	r3, [pc, #256]	; (800646c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800636c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006372:	ee07 3a90 	vmov	s15, r3
 8006376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800637a:	ed97 6a02 	vldr	s12, [r7, #8]
 800637e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800647c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800638a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800638e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006396:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800639a:	e043      	b.n	8006424 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	ee07 3a90 	vmov	s15, r3
 80063a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063a6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006488 <HAL_RCC_GetSysClockFreq+0x2f0>
 80063aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ae:	4b2f      	ldr	r3, [pc, #188]	; (800646c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063b6:	ee07 3a90 	vmov	s15, r3
 80063ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063be:	ed97 6a02 	vldr	s12, [r7, #8]
 80063c2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800647c <HAL_RCC_GetSysClockFreq+0x2e4>
 80063c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80063de:	e021      	b.n	8006424 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	ee07 3a90 	vmov	s15, r3
 80063e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006484 <HAL_RCC_GetSysClockFreq+0x2ec>
 80063ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063f2:	4b1e      	ldr	r3, [pc, #120]	; (800646c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063fa:	ee07 3a90 	vmov	s15, r3
 80063fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006402:	ed97 6a02 	vldr	s12, [r7, #8]
 8006406:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800647c <HAL_RCC_GetSysClockFreq+0x2e4>
 800640a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800640e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006412:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800641a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800641e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006422:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006424:	4b11      	ldr	r3, [pc, #68]	; (800646c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006428:	0a5b      	lsrs	r3, r3, #9
 800642a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800642e:	3301      	adds	r3, #1
 8006430:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	ee07 3a90 	vmov	s15, r3
 8006438:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800643c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006440:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006448:	ee17 3a90 	vmov	r3, s15
 800644c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800644e:	e005      	b.n	800645c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006450:	2300      	movs	r3, #0
 8006452:	61bb      	str	r3, [r7, #24]
      break;
 8006454:	e002      	b.n	800645c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006456:	4b07      	ldr	r3, [pc, #28]	; (8006474 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006458:	61bb      	str	r3, [r7, #24]
      break;
 800645a:	bf00      	nop
  }

  return sysclockfreq;
 800645c:	69bb      	ldr	r3, [r7, #24]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3724      	adds	r7, #36	; 0x24
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	58024400 	.word	0x58024400
 8006470:	03d09000 	.word	0x03d09000
 8006474:	003d0900 	.word	0x003d0900
 8006478:	007a1200 	.word	0x007a1200
 800647c:	46000000 	.word	0x46000000
 8006480:	4c742400 	.word	0x4c742400
 8006484:	4a742400 	.word	0x4a742400
 8006488:	4af42400 	.word	0x4af42400

0800648c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006492:	f7ff fe81 	bl	8006198 <HAL_RCC_GetSysClockFreq>
 8006496:	4602      	mov	r2, r0
 8006498:	4b10      	ldr	r3, [pc, #64]	; (80064dc <HAL_RCC_GetHCLKFreq+0x50>)
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	0a1b      	lsrs	r3, r3, #8
 800649e:	f003 030f 	and.w	r3, r3, #15
 80064a2:	490f      	ldr	r1, [pc, #60]	; (80064e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80064a4:	5ccb      	ldrb	r3, [r1, r3]
 80064a6:	f003 031f 	and.w	r3, r3, #31
 80064aa:	fa22 f303 	lsr.w	r3, r2, r3
 80064ae:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80064b0:	4b0a      	ldr	r3, [pc, #40]	; (80064dc <HAL_RCC_GetHCLKFreq+0x50>)
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	f003 030f 	and.w	r3, r3, #15
 80064b8:	4a09      	ldr	r2, [pc, #36]	; (80064e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80064ba:	5cd3      	ldrb	r3, [r2, r3]
 80064bc:	f003 031f 	and.w	r3, r3, #31
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	fa22 f303 	lsr.w	r3, r2, r3
 80064c6:	4a07      	ldr	r2, [pc, #28]	; (80064e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80064c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80064ca:	4a07      	ldr	r2, [pc, #28]	; (80064e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80064d0:	4b04      	ldr	r3, [pc, #16]	; (80064e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80064d2:	681b      	ldr	r3, [r3, #0]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	58024400 	.word	0x58024400
 80064e0:	0800fac0 	.word	0x0800fac0
 80064e4:	2400000c 	.word	0x2400000c
 80064e8:	24000008 	.word	0x24000008

080064ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80064f0:	f7ff ffcc 	bl	800648c <HAL_RCC_GetHCLKFreq>
 80064f4:	4602      	mov	r2, r0
 80064f6:	4b06      	ldr	r3, [pc, #24]	; (8006510 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	091b      	lsrs	r3, r3, #4
 80064fc:	f003 0307 	and.w	r3, r3, #7
 8006500:	4904      	ldr	r1, [pc, #16]	; (8006514 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006502:	5ccb      	ldrb	r3, [r1, r3]
 8006504:	f003 031f 	and.w	r3, r3, #31
 8006508:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800650c:	4618      	mov	r0, r3
 800650e:	bd80      	pop	{r7, pc}
 8006510:	58024400 	.word	0x58024400
 8006514:	0800fac0 	.word	0x0800fac0

08006518 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800651c:	f7ff ffb6 	bl	800648c <HAL_RCC_GetHCLKFreq>
 8006520:	4602      	mov	r2, r0
 8006522:	4b06      	ldr	r3, [pc, #24]	; (800653c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006524:	69db      	ldr	r3, [r3, #28]
 8006526:	0a1b      	lsrs	r3, r3, #8
 8006528:	f003 0307 	and.w	r3, r3, #7
 800652c:	4904      	ldr	r1, [pc, #16]	; (8006540 <HAL_RCC_GetPCLK2Freq+0x28>)
 800652e:	5ccb      	ldrb	r3, [r1, r3]
 8006530:	f003 031f 	and.w	r3, r3, #31
 8006534:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006538:	4618      	mov	r0, r3
 800653a:	bd80      	pop	{r7, pc}
 800653c:	58024400 	.word	0x58024400
 8006540:	0800fac0 	.word	0x0800fac0

08006544 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006548:	b0c8      	sub	sp, #288	; 0x120
 800654a:	af00      	add	r7, sp, #0
 800654c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006550:	2300      	movs	r3, #0
 8006552:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006556:	2300      	movs	r3, #0
 8006558:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800655c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006564:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006568:	2500      	movs	r5, #0
 800656a:	ea54 0305 	orrs.w	r3, r4, r5
 800656e:	d049      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006570:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006576:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800657a:	d02f      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800657c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006580:	d828      	bhi.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006582:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006586:	d01a      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006588:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800658c:	d822      	bhi.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800658e:	2b00      	cmp	r3, #0
 8006590:	d003      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006592:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006596:	d007      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006598:	e01c      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800659a:	4ba7      	ldr	r3, [pc, #668]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800659c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659e:	4aa6      	ldr	r2, [pc, #664]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80065a6:	e01a      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065ac:	3308      	adds	r3, #8
 80065ae:	2102      	movs	r1, #2
 80065b0:	4618      	mov	r0, r3
 80065b2:	f002 fa6d 	bl	8008a90 <RCCEx_PLL2_Config>
 80065b6:	4603      	mov	r3, r0
 80065b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80065bc:	e00f      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065c2:	3328      	adds	r3, #40	; 0x28
 80065c4:	2102      	movs	r1, #2
 80065c6:	4618      	mov	r0, r3
 80065c8:	f002 fb14 	bl	8008bf4 <RCCEx_PLL3_Config>
 80065cc:	4603      	mov	r3, r0
 80065ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80065d2:	e004      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80065da:	e000      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80065dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d10a      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80065e6:	4b94      	ldr	r3, [pc, #592]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ea:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80065ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065f4:	4a90      	ldr	r2, [pc, #576]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065f6:	430b      	orrs	r3, r1
 80065f8:	6513      	str	r3, [r2, #80]	; 0x50
 80065fa:	e003      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006600:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006604:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006610:	f04f 0900 	mov.w	r9, #0
 8006614:	ea58 0309 	orrs.w	r3, r8, r9
 8006618:	d047      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800661a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800661e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006620:	2b04      	cmp	r3, #4
 8006622:	d82a      	bhi.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006624:	a201      	add	r2, pc, #4	; (adr r2, 800662c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662a:	bf00      	nop
 800662c:	08006641 	.word	0x08006641
 8006630:	0800664f 	.word	0x0800664f
 8006634:	08006665 	.word	0x08006665
 8006638:	08006683 	.word	0x08006683
 800663c:	08006683 	.word	0x08006683
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006640:	4b7d      	ldr	r3, [pc, #500]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006644:	4a7c      	ldr	r2, [pc, #496]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800664a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800664c:	e01a      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800664e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006652:	3308      	adds	r3, #8
 8006654:	2100      	movs	r1, #0
 8006656:	4618      	mov	r0, r3
 8006658:	f002 fa1a 	bl	8008a90 <RCCEx_PLL2_Config>
 800665c:	4603      	mov	r3, r0
 800665e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006662:	e00f      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006664:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006668:	3328      	adds	r3, #40	; 0x28
 800666a:	2100      	movs	r1, #0
 800666c:	4618      	mov	r0, r3
 800666e:	f002 fac1 	bl	8008bf4 <RCCEx_PLL3_Config>
 8006672:	4603      	mov	r3, r0
 8006674:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006678:	e004      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006680:	e000      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006682:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006684:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10a      	bne.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800668c:	4b6a      	ldr	r3, [pc, #424]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800668e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006690:	f023 0107 	bic.w	r1, r3, #7
 8006694:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800669a:	4a67      	ldr	r2, [pc, #412]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800669c:	430b      	orrs	r3, r1
 800669e:	6513      	str	r3, [r2, #80]	; 0x50
 80066a0:	e003      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80066a6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80066aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80066b6:	f04f 0b00 	mov.w	fp, #0
 80066ba:	ea5a 030b 	orrs.w	r3, sl, fp
 80066be:	d054      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80066c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066c6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80066ca:	d036      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80066cc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80066d0:	d82f      	bhi.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80066d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066d6:	d032      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80066d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066dc:	d829      	bhi.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80066de:	2bc0      	cmp	r3, #192	; 0xc0
 80066e0:	d02f      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80066e2:	2bc0      	cmp	r3, #192	; 0xc0
 80066e4:	d825      	bhi.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80066e6:	2b80      	cmp	r3, #128	; 0x80
 80066e8:	d018      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80066ea:	2b80      	cmp	r3, #128	; 0x80
 80066ec:	d821      	bhi.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d002      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80066f2:	2b40      	cmp	r3, #64	; 0x40
 80066f4:	d007      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80066f6:	e01c      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066f8:	4b4f      	ldr	r3, [pc, #316]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fc:	4a4e      	ldr	r2, [pc, #312]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006702:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006704:	e01e      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006706:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800670a:	3308      	adds	r3, #8
 800670c:	2100      	movs	r1, #0
 800670e:	4618      	mov	r0, r3
 8006710:	f002 f9be 	bl	8008a90 <RCCEx_PLL2_Config>
 8006714:	4603      	mov	r3, r0
 8006716:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800671a:	e013      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800671c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006720:	3328      	adds	r3, #40	; 0x28
 8006722:	2100      	movs	r1, #0
 8006724:	4618      	mov	r0, r3
 8006726:	f002 fa65 	bl	8008bf4 <RCCEx_PLL3_Config>
 800672a:	4603      	mov	r3, r0
 800672c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006730:	e008      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006738:	e004      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800673a:	bf00      	nop
 800673c:	e002      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800673e:	bf00      	nop
 8006740:	e000      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006742:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006744:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10a      	bne.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800674c:	4b3a      	ldr	r3, [pc, #232]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800674e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006750:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006754:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800675a:	4a37      	ldr	r2, [pc, #220]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800675c:	430b      	orrs	r3, r1
 800675e:	6513      	str	r3, [r2, #80]	; 0x50
 8006760:	e003      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006762:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006766:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800676a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800676e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006772:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006776:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800677a:	2300      	movs	r3, #0
 800677c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006780:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006784:	460b      	mov	r3, r1
 8006786:	4313      	orrs	r3, r2
 8006788:	d05c      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800678a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800678e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006790:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006794:	d03b      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006796:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800679a:	d834      	bhi.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800679c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067a0:	d037      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80067a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067a6:	d82e      	bhi.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80067a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80067ac:	d033      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80067ae:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80067b2:	d828      	bhi.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80067b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067b8:	d01a      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80067ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067be:	d822      	bhi.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d003      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x288>
 80067c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067c8:	d007      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x296>
 80067ca:	e01c      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067cc:	4b1a      	ldr	r3, [pc, #104]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d0:	4a19      	ldr	r2, [pc, #100]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80067d8:	e01e      	b.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067de:	3308      	adds	r3, #8
 80067e0:	2100      	movs	r1, #0
 80067e2:	4618      	mov	r0, r3
 80067e4:	f002 f954 	bl	8008a90 <RCCEx_PLL2_Config>
 80067e8:	4603      	mov	r3, r0
 80067ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80067ee:	e013      	b.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067f4:	3328      	adds	r3, #40	; 0x28
 80067f6:	2100      	movs	r1, #0
 80067f8:	4618      	mov	r0, r3
 80067fa:	f002 f9fb 	bl	8008bf4 <RCCEx_PLL3_Config>
 80067fe:	4603      	mov	r3, r0
 8006800:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006804:	e008      	b.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800680c:	e004      	b.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800680e:	bf00      	nop
 8006810:	e002      	b.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006812:	bf00      	nop
 8006814:	e000      	b.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006816:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006818:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10d      	bne.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006820:	4b05      	ldr	r3, [pc, #20]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006824:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8006828:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800682c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800682e:	4a02      	ldr	r2, [pc, #8]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006830:	430b      	orrs	r3, r1
 8006832:	6513      	str	r3, [r2, #80]	; 0x50
 8006834:	e006      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8006836:	bf00      	nop
 8006838:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800683c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006840:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006844:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006850:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006854:	2300      	movs	r3, #0
 8006856:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800685a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800685e:	460b      	mov	r3, r1
 8006860:	4313      	orrs	r3, r2
 8006862:	d03a      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006864:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800686a:	2b30      	cmp	r3, #48	; 0x30
 800686c:	d01f      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800686e:	2b30      	cmp	r3, #48	; 0x30
 8006870:	d819      	bhi.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006872:	2b20      	cmp	r3, #32
 8006874:	d00c      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006876:	2b20      	cmp	r3, #32
 8006878:	d815      	bhi.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800687a:	2b00      	cmp	r3, #0
 800687c:	d019      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800687e:	2b10      	cmp	r3, #16
 8006880:	d111      	bne.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006882:	4bae      	ldr	r3, [pc, #696]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006886:	4aad      	ldr	r2, [pc, #692]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800688c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800688e:	e011      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006890:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006894:	3308      	adds	r3, #8
 8006896:	2102      	movs	r1, #2
 8006898:	4618      	mov	r0, r3
 800689a:	f002 f8f9 	bl	8008a90 <RCCEx_PLL2_Config>
 800689e:	4603      	mov	r3, r0
 80068a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80068a4:	e006      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80068ac:	e002      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80068ae:	bf00      	nop
 80068b0:	e000      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80068b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10a      	bne.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80068bc:	4b9f      	ldr	r3, [pc, #636]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80068be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068c0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80068c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ca:	4a9c      	ldr	r2, [pc, #624]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80068cc:	430b      	orrs	r3, r1
 80068ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068d0:	e003      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80068d6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80068da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80068e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80068ea:	2300      	movs	r3, #0
 80068ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80068f0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80068f4:	460b      	mov	r3, r1
 80068f6:	4313      	orrs	r3, r2
 80068f8:	d051      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80068fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006900:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006904:	d035      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006906:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800690a:	d82e      	bhi.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800690c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006910:	d031      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8006912:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006916:	d828      	bhi.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800691c:	d01a      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800691e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006922:	d822      	bhi.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006924:	2b00      	cmp	r3, #0
 8006926:	d003      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8006928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800692c:	d007      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800692e:	e01c      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006930:	4b82      	ldr	r3, [pc, #520]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006934:	4a81      	ldr	r2, [pc, #516]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800693a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800693c:	e01c      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800693e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006942:	3308      	adds	r3, #8
 8006944:	2100      	movs	r1, #0
 8006946:	4618      	mov	r0, r3
 8006948:	f002 f8a2 	bl	8008a90 <RCCEx_PLL2_Config>
 800694c:	4603      	mov	r3, r0
 800694e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006952:	e011      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006954:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006958:	3328      	adds	r3, #40	; 0x28
 800695a:	2100      	movs	r1, #0
 800695c:	4618      	mov	r0, r3
 800695e:	f002 f949 	bl	8008bf4 <RCCEx_PLL3_Config>
 8006962:	4603      	mov	r3, r0
 8006964:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006968:	e006      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006970:	e002      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8006972:	bf00      	nop
 8006974:	e000      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8006976:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006978:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10a      	bne.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006980:	4b6e      	ldr	r3, [pc, #440]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006984:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006988:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800698c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800698e:	4a6b      	ldr	r2, [pc, #428]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006990:	430b      	orrs	r3, r1
 8006992:	6513      	str	r3, [r2, #80]	; 0x50
 8006994:	e003      	b.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006996:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800699a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800699e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80069aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069ae:	2300      	movs	r3, #0
 80069b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80069b4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80069b8:	460b      	mov	r3, r1
 80069ba:	4313      	orrs	r3, r2
 80069bc:	d053      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80069be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069c8:	d033      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80069ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069ce:	d82c      	bhi.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80069d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069d4:	d02f      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80069d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069da:	d826      	bhi.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80069dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80069e0:	d02b      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80069e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80069e6:	d820      	bhi.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80069e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069ec:	d012      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80069ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069f2:	d81a      	bhi.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d022      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80069f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069fc:	d115      	bne.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a02:	3308      	adds	r3, #8
 8006a04:	2101      	movs	r1, #1
 8006a06:	4618      	mov	r0, r3
 8006a08:	f002 f842 	bl	8008a90 <RCCEx_PLL2_Config>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006a12:	e015      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a18:	3328      	adds	r3, #40	; 0x28
 8006a1a:	2101      	movs	r1, #1
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f002 f8e9 	bl	8008bf4 <RCCEx_PLL3_Config>
 8006a22:	4603      	mov	r3, r0
 8006a24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006a28:	e00a      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006a30:	e006      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006a32:	bf00      	nop
 8006a34:	e004      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006a36:	bf00      	nop
 8006a38:	e002      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006a3a:	bf00      	nop
 8006a3c:	e000      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006a3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10a      	bne.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006a48:	4b3c      	ldr	r3, [pc, #240]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a4c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006a50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a56:	4a39      	ldr	r2, [pc, #228]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a58:	430b      	orrs	r3, r1
 8006a5a:	6513      	str	r3, [r2, #80]	; 0x50
 8006a5c:	e003      	b.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a5e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006a62:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006a66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006a72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a76:	2300      	movs	r3, #0
 8006a78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a7c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006a80:	460b      	mov	r3, r1
 8006a82:	4313      	orrs	r3, r2
 8006a84:	d060      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a8e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006a92:	d039      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8006a94:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006a98:	d832      	bhi.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006a9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a9e:	d035      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006aa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006aa4:	d82c      	bhi.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aaa:	d031      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ab0:	d826      	bhi.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006ab2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ab6:	d02d      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006ab8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006abc:	d820      	bhi.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006abe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ac2:	d012      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006ac4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ac8:	d81a      	bhi.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d024      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006ace:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ad2:	d115      	bne.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ad8:	3308      	adds	r3, #8
 8006ada:	2101      	movs	r1, #1
 8006adc:	4618      	mov	r0, r3
 8006ade:	f001 ffd7 	bl	8008a90 <RCCEx_PLL2_Config>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ae8:	e017      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006aee:	3328      	adds	r3, #40	; 0x28
 8006af0:	2101      	movs	r1, #1
 8006af2:	4618      	mov	r0, r3
 8006af4:	f002 f87e 	bl	8008bf4 <RCCEx_PLL3_Config>
 8006af8:	4603      	mov	r3, r0
 8006afa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006afe:	e00c      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006b06:	e008      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006b08:	bf00      	nop
 8006b0a:	e006      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006b0c:	bf00      	nop
 8006b0e:	e004      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006b10:	bf00      	nop
 8006b12:	e002      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006b14:	bf00      	nop
 8006b16:	e000      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006b18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b1a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d10e      	bne.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006b22:	4b06      	ldr	r3, [pc, #24]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b26:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006b2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b32:	4a02      	ldr	r2, [pc, #8]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b34:	430b      	orrs	r3, r1
 8006b36:	6593      	str	r3, [r2, #88]	; 0x58
 8006b38:	e006      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006b3a:	bf00      	nop
 8006b3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006b44:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b50:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006b54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006b58:	2300      	movs	r3, #0
 8006b5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006b5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006b62:	460b      	mov	r3, r1
 8006b64:	4313      	orrs	r3, r2
 8006b66:	d037      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006b68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b72:	d00e      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006b74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b78:	d816      	bhi.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d018      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006b7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b82:	d111      	bne.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b84:	4bc4      	ldr	r3, [pc, #784]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b88:	4ac3      	ldr	r2, [pc, #780]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006b90:	e00f      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b96:	3308      	adds	r3, #8
 8006b98:	2101      	movs	r1, #1
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f001 ff78 	bl	8008a90 <RCCEx_PLL2_Config>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006ba6:	e004      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006bae:	e000      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006bb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bb2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10a      	bne.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006bba:	4bb7      	ldr	r3, [pc, #732]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bbe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bc8:	4ab3      	ldr	r2, [pc, #716]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006bca:	430b      	orrs	r3, r1
 8006bcc:	6513      	str	r3, [r2, #80]	; 0x50
 8006bce:	e003      	b.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bd0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006bd4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006be4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006be8:	2300      	movs	r3, #0
 8006bea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006bee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	d039      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006bf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bfe:	2b03      	cmp	r3, #3
 8006c00:	d81c      	bhi.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006c02:	a201      	add	r2, pc, #4	; (adr r2, 8006c08 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c08:	08006c45 	.word	0x08006c45
 8006c0c:	08006c19 	.word	0x08006c19
 8006c10:	08006c27 	.word	0x08006c27
 8006c14:	08006c45 	.word	0x08006c45
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c18:	4b9f      	ldr	r3, [pc, #636]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1c:	4a9e      	ldr	r2, [pc, #632]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006c24:	e00f      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c2a:	3308      	adds	r3, #8
 8006c2c:	2102      	movs	r1, #2
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f001 ff2e 	bl	8008a90 <RCCEx_PLL2_Config>
 8006c34:	4603      	mov	r3, r0
 8006c36:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006c3a:	e004      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006c42:	e000      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c46:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10a      	bne.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006c4e:	4b92      	ldr	r3, [pc, #584]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c52:	f023 0103 	bic.w	r1, r3, #3
 8006c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c5c:	4a8e      	ldr	r2, [pc, #568]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c5e:	430b      	orrs	r3, r1
 8006c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c62:	e003      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006c68:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c74:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006c78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c82:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006c86:	460b      	mov	r3, r1
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	f000 8099 	beq.w	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c8e:	4b83      	ldr	r3, [pc, #524]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a82      	ldr	r2, [pc, #520]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c9a:	f7fb fc5b 	bl	8002554 <HAL_GetTick>
 8006c9e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ca2:	e00b      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ca4:	f7fb fc56 	bl	8002554 <HAL_GetTick>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	2b64      	cmp	r3, #100	; 0x64
 8006cb2:	d903      	bls.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006cba:	e005      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cbc:	4b77      	ldr	r3, [pc, #476]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0ed      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006cc8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d173      	bne.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006cd0:	4b71      	ldr	r3, [pc, #452]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cd8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006cdc:	4053      	eors	r3, r2
 8006cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d015      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ce6:	4b6c      	ldr	r3, [pc, #432]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006cf2:	4b69      	ldr	r3, [pc, #420]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf6:	4a68      	ldr	r2, [pc, #416]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cfc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006cfe:	4b66      	ldr	r3, [pc, #408]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d02:	4a65      	ldr	r2, [pc, #404]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d08:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006d0a:	4a63      	ldr	r2, [pc, #396]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d10:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006d12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d1e:	d118      	bne.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d20:	f7fb fc18 	bl	8002554 <HAL_GetTick>
 8006d24:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d28:	e00d      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d2a:	f7fb fc13 	bl	8002554 <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006d34:	1ad2      	subs	r2, r2, r3
 8006d36:	f241 3388 	movw	r3, #5000	; 0x1388
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d903      	bls.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8006d44:	e005      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d46:	4b54      	ldr	r3, [pc, #336]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d4a:	f003 0302 	and.w	r3, r3, #2
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d0eb      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006d52:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d129      	bne.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d6a:	d10e      	bne.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006d6c:	4b4a      	ldr	r3, [pc, #296]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006d74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006d7c:	091a      	lsrs	r2, r3, #4
 8006d7e:	4b48      	ldr	r3, [pc, #288]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006d80:	4013      	ands	r3, r2
 8006d82:	4a45      	ldr	r2, [pc, #276]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d84:	430b      	orrs	r3, r1
 8006d86:	6113      	str	r3, [r2, #16]
 8006d88:	e005      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006d8a:	4b43      	ldr	r3, [pc, #268]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	4a42      	ldr	r2, [pc, #264]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d90:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006d94:	6113      	str	r3, [r2, #16]
 8006d96:	4b40      	ldr	r3, [pc, #256]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d98:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006da2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006da6:	4a3c      	ldr	r2, [pc, #240]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006da8:	430b      	orrs	r3, r1
 8006daa:	6713      	str	r3, [r2, #112]	; 0x70
 8006dac:	e008      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006dae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006db2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8006db6:	e003      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006dbc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006dc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc8:	f002 0301 	and.w	r3, r2, #1
 8006dcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006dd6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006dda:	460b      	mov	r3, r1
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	f000 8090 	beq.w	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006de2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dea:	2b28      	cmp	r3, #40	; 0x28
 8006dec:	d870      	bhi.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006dee:	a201      	add	r2, pc, #4	; (adr r2, 8006df4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df4:	08006ed9 	.word	0x08006ed9
 8006df8:	08006ed1 	.word	0x08006ed1
 8006dfc:	08006ed1 	.word	0x08006ed1
 8006e00:	08006ed1 	.word	0x08006ed1
 8006e04:	08006ed1 	.word	0x08006ed1
 8006e08:	08006ed1 	.word	0x08006ed1
 8006e0c:	08006ed1 	.word	0x08006ed1
 8006e10:	08006ed1 	.word	0x08006ed1
 8006e14:	08006ea5 	.word	0x08006ea5
 8006e18:	08006ed1 	.word	0x08006ed1
 8006e1c:	08006ed1 	.word	0x08006ed1
 8006e20:	08006ed1 	.word	0x08006ed1
 8006e24:	08006ed1 	.word	0x08006ed1
 8006e28:	08006ed1 	.word	0x08006ed1
 8006e2c:	08006ed1 	.word	0x08006ed1
 8006e30:	08006ed1 	.word	0x08006ed1
 8006e34:	08006ebb 	.word	0x08006ebb
 8006e38:	08006ed1 	.word	0x08006ed1
 8006e3c:	08006ed1 	.word	0x08006ed1
 8006e40:	08006ed1 	.word	0x08006ed1
 8006e44:	08006ed1 	.word	0x08006ed1
 8006e48:	08006ed1 	.word	0x08006ed1
 8006e4c:	08006ed1 	.word	0x08006ed1
 8006e50:	08006ed1 	.word	0x08006ed1
 8006e54:	08006ed9 	.word	0x08006ed9
 8006e58:	08006ed1 	.word	0x08006ed1
 8006e5c:	08006ed1 	.word	0x08006ed1
 8006e60:	08006ed1 	.word	0x08006ed1
 8006e64:	08006ed1 	.word	0x08006ed1
 8006e68:	08006ed1 	.word	0x08006ed1
 8006e6c:	08006ed1 	.word	0x08006ed1
 8006e70:	08006ed1 	.word	0x08006ed1
 8006e74:	08006ed9 	.word	0x08006ed9
 8006e78:	08006ed1 	.word	0x08006ed1
 8006e7c:	08006ed1 	.word	0x08006ed1
 8006e80:	08006ed1 	.word	0x08006ed1
 8006e84:	08006ed1 	.word	0x08006ed1
 8006e88:	08006ed1 	.word	0x08006ed1
 8006e8c:	08006ed1 	.word	0x08006ed1
 8006e90:	08006ed1 	.word	0x08006ed1
 8006e94:	08006ed9 	.word	0x08006ed9
 8006e98:	58024400 	.word	0x58024400
 8006e9c:	58024800 	.word	0x58024800
 8006ea0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ea8:	3308      	adds	r3, #8
 8006eaa:	2101      	movs	r1, #1
 8006eac:	4618      	mov	r0, r3
 8006eae:	f001 fdef 	bl	8008a90 <RCCEx_PLL2_Config>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006eb8:	e00f      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ebe:	3328      	adds	r3, #40	; 0x28
 8006ec0:	2101      	movs	r1, #1
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f001 fe96 	bl	8008bf4 <RCCEx_PLL3_Config>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006ece:	e004      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006ed6:	e000      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006ed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eda:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10b      	bne.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006ee2:	4bc0      	ldr	r3, [pc, #768]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006eea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ef2:	4abc      	ldr	r2, [pc, #752]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006ef4:	430b      	orrs	r3, r1
 8006ef6:	6553      	str	r3, [r2, #84]	; 0x54
 8006ef8:	e003      	b.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006efa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006efe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006f02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0a:	f002 0302 	and.w	r3, r2, #2
 8006f0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f12:	2300      	movs	r3, #0
 8006f14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006f18:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	d043      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f2a:	2b05      	cmp	r3, #5
 8006f2c:	d824      	bhi.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8006f2e:	a201      	add	r2, pc, #4	; (adr r2, 8006f34 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8006f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f34:	08006f81 	.word	0x08006f81
 8006f38:	08006f4d 	.word	0x08006f4d
 8006f3c:	08006f63 	.word	0x08006f63
 8006f40:	08006f81 	.word	0x08006f81
 8006f44:	08006f81 	.word	0x08006f81
 8006f48:	08006f81 	.word	0x08006f81
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f50:	3308      	adds	r3, #8
 8006f52:	2101      	movs	r1, #1
 8006f54:	4618      	mov	r0, r3
 8006f56:	f001 fd9b 	bl	8008a90 <RCCEx_PLL2_Config>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006f60:	e00f      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f66:	3328      	adds	r3, #40	; 0x28
 8006f68:	2101      	movs	r1, #1
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f001 fe42 	bl	8008bf4 <RCCEx_PLL3_Config>
 8006f70:	4603      	mov	r3, r0
 8006f72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006f76:	e004      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006f7e:	e000      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8006f80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f82:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10b      	bne.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006f8a:	4b96      	ldr	r3, [pc, #600]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f8e:	f023 0107 	bic.w	r1, r3, #7
 8006f92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f9a:	4a92      	ldr	r2, [pc, #584]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006f9c:	430b      	orrs	r3, r1
 8006f9e:	6553      	str	r3, [r2, #84]	; 0x54
 8006fa0:	e003      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006fa6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006faa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb2:	f002 0304 	and.w	r3, r2, #4
 8006fb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fba:	2300      	movs	r3, #0
 8006fbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fc0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	d043      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fd2:	2b05      	cmp	r3, #5
 8006fd4:	d824      	bhi.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8006fd6:	a201      	add	r2, pc, #4	; (adr r2, 8006fdc <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8006fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fdc:	08007029 	.word	0x08007029
 8006fe0:	08006ff5 	.word	0x08006ff5
 8006fe4:	0800700b 	.word	0x0800700b
 8006fe8:	08007029 	.word	0x08007029
 8006fec:	08007029 	.word	0x08007029
 8006ff0:	08007029 	.word	0x08007029
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ff8:	3308      	adds	r3, #8
 8006ffa:	2101      	movs	r1, #1
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f001 fd47 	bl	8008a90 <RCCEx_PLL2_Config>
 8007002:	4603      	mov	r3, r0
 8007004:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007008:	e00f      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800700a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800700e:	3328      	adds	r3, #40	; 0x28
 8007010:	2101      	movs	r1, #1
 8007012:	4618      	mov	r0, r3
 8007014:	f001 fdee 	bl	8008bf4 <RCCEx_PLL3_Config>
 8007018:	4603      	mov	r3, r0
 800701a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800701e:	e004      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007026:	e000      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8007028:	bf00      	nop
    }

    if (ret == HAL_OK)
 800702a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10b      	bne.n	800704a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007032:	4b6c      	ldr	r3, [pc, #432]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007036:	f023 0107 	bic.w	r1, r3, #7
 800703a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800703e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007042:	4a68      	ldr	r2, [pc, #416]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007044:	430b      	orrs	r3, r1
 8007046:	6593      	str	r3, [r2, #88]	; 0x58
 8007048:	e003      	b.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800704a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800704e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007052:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705a:	f002 0320 	and.w	r3, r2, #32
 800705e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007062:	2300      	movs	r3, #0
 8007064:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007068:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800706c:	460b      	mov	r3, r1
 800706e:	4313      	orrs	r3, r2
 8007070:	d055      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007072:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007076:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800707a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800707e:	d033      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007080:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007084:	d82c      	bhi.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800708a:	d02f      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800708c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007090:	d826      	bhi.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007092:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007096:	d02b      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007098:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800709c:	d820      	bhi.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800709e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070a2:	d012      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80070a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070a8:	d81a      	bhi.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d022      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80070ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070b2:	d115      	bne.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070b8:	3308      	adds	r3, #8
 80070ba:	2100      	movs	r1, #0
 80070bc:	4618      	mov	r0, r3
 80070be:	f001 fce7 	bl	8008a90 <RCCEx_PLL2_Config>
 80070c2:	4603      	mov	r3, r0
 80070c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80070c8:	e015      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070ce:	3328      	adds	r3, #40	; 0x28
 80070d0:	2102      	movs	r1, #2
 80070d2:	4618      	mov	r0, r3
 80070d4:	f001 fd8e 	bl	8008bf4 <RCCEx_PLL3_Config>
 80070d8:	4603      	mov	r3, r0
 80070da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80070de:	e00a      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80070e6:	e006      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80070e8:	bf00      	nop
 80070ea:	e004      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80070ec:	bf00      	nop
 80070ee:	e002      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80070f0:	bf00      	nop
 80070f2:	e000      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80070f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d10b      	bne.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80070fe:	4b39      	ldr	r3, [pc, #228]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007102:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007106:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800710a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800710e:	4a35      	ldr	r2, [pc, #212]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007110:	430b      	orrs	r3, r1
 8007112:	6553      	str	r3, [r2, #84]	; 0x54
 8007114:	e003      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007116:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800711a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800711e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007126:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800712a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800712e:	2300      	movs	r3, #0
 8007130:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007134:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007138:	460b      	mov	r3, r1
 800713a:	4313      	orrs	r3, r2
 800713c:	d058      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800713e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007142:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007146:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800714a:	d033      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800714c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007150:	d82c      	bhi.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007156:	d02f      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800715c:	d826      	bhi.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800715e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007162:	d02b      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007164:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007168:	d820      	bhi.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800716a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800716e:	d012      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8007170:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007174:	d81a      	bhi.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007176:	2b00      	cmp	r3, #0
 8007178:	d022      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800717a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800717e:	d115      	bne.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007180:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007184:	3308      	adds	r3, #8
 8007186:	2100      	movs	r1, #0
 8007188:	4618      	mov	r0, r3
 800718a:	f001 fc81 	bl	8008a90 <RCCEx_PLL2_Config>
 800718e:	4603      	mov	r3, r0
 8007190:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007194:	e015      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007196:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800719a:	3328      	adds	r3, #40	; 0x28
 800719c:	2102      	movs	r1, #2
 800719e:	4618      	mov	r0, r3
 80071a0:	f001 fd28 	bl	8008bf4 <RCCEx_PLL3_Config>
 80071a4:	4603      	mov	r3, r0
 80071a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80071aa:	e00a      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80071b2:	e006      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80071b4:	bf00      	nop
 80071b6:	e004      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80071b8:	bf00      	nop
 80071ba:	e002      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80071bc:	bf00      	nop
 80071be:	e000      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80071c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10e      	bne.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80071ca:	4b06      	ldr	r3, [pc, #24]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80071cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ce:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80071d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80071da:	4a02      	ldr	r2, [pc, #8]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80071dc:	430b      	orrs	r3, r1
 80071de:	6593      	str	r3, [r2, #88]	; 0x58
 80071e0:	e006      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80071e2:	bf00      	nop
 80071e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80071ec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80071f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80071fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007200:	2300      	movs	r3, #0
 8007202:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007206:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800720a:	460b      	mov	r3, r1
 800720c:	4313      	orrs	r3, r2
 800720e:	d055      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007210:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007214:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007218:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800721c:	d033      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800721e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007222:	d82c      	bhi.n	800727e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007228:	d02f      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800722a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800722e:	d826      	bhi.n	800727e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007230:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007234:	d02b      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007236:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800723a:	d820      	bhi.n	800727e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800723c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007240:	d012      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8007242:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007246:	d81a      	bhi.n	800727e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007248:	2b00      	cmp	r3, #0
 800724a:	d022      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800724c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007250:	d115      	bne.n	800727e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007252:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007256:	3308      	adds	r3, #8
 8007258:	2100      	movs	r1, #0
 800725a:	4618      	mov	r0, r3
 800725c:	f001 fc18 	bl	8008a90 <RCCEx_PLL2_Config>
 8007260:	4603      	mov	r3, r0
 8007262:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007266:	e015      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007268:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800726c:	3328      	adds	r3, #40	; 0x28
 800726e:	2102      	movs	r1, #2
 8007270:	4618      	mov	r0, r3
 8007272:	f001 fcbf 	bl	8008bf4 <RCCEx_PLL3_Config>
 8007276:	4603      	mov	r3, r0
 8007278:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800727c:	e00a      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007284:	e006      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007286:	bf00      	nop
 8007288:	e004      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800728a:	bf00      	nop
 800728c:	e002      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800728e:	bf00      	nop
 8007290:	e000      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007292:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007294:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10b      	bne.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800729c:	4ba1      	ldr	r3, [pc, #644]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800729e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072a0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80072a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80072ac:	4a9d      	ldr	r2, [pc, #628]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80072ae:	430b      	orrs	r3, r1
 80072b0:	6593      	str	r3, [r2, #88]	; 0x58
 80072b2:	e003      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80072b8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80072bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c4:	f002 0308 	and.w	r3, r2, #8
 80072c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072cc:	2300      	movs	r3, #0
 80072ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80072d2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80072d6:	460b      	mov	r3, r1
 80072d8:	4313      	orrs	r3, r2
 80072da:	d01e      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80072dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072e8:	d10c      	bne.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80072ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072ee:	3328      	adds	r3, #40	; 0x28
 80072f0:	2102      	movs	r1, #2
 80072f2:	4618      	mov	r0, r3
 80072f4:	f001 fc7e 	bl	8008bf4 <RCCEx_PLL3_Config>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d002      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007304:	4b87      	ldr	r3, [pc, #540]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007308:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800730c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007314:	4a83      	ldr	r2, [pc, #524]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007316:	430b      	orrs	r3, r1
 8007318:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800731a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800731e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007322:	f002 0310 	and.w	r3, r2, #16
 8007326:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800732a:	2300      	movs	r3, #0
 800732c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007330:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007334:	460b      	mov	r3, r1
 8007336:	4313      	orrs	r3, r2
 8007338:	d01e      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800733a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800733e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007346:	d10c      	bne.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007348:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800734c:	3328      	adds	r3, #40	; 0x28
 800734e:	2102      	movs	r1, #2
 8007350:	4618      	mov	r0, r3
 8007352:	f001 fc4f 	bl	8008bf4 <RCCEx_PLL3_Config>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d002      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007362:	4b70      	ldr	r3, [pc, #448]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007366:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800736a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800736e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007372:	4a6c      	ldr	r2, [pc, #432]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007374:	430b      	orrs	r3, r1
 8007376:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007378:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800737c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007380:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007384:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007388:	2300      	movs	r3, #0
 800738a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800738e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007392:	460b      	mov	r3, r1
 8007394:	4313      	orrs	r3, r2
 8007396:	d03e      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007398:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800739c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80073a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073a4:	d022      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80073a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073aa:	d81b      	bhi.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d003      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80073b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073b4:	d00b      	beq.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80073b6:	e015      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073bc:	3308      	adds	r3, #8
 80073be:	2100      	movs	r1, #0
 80073c0:	4618      	mov	r0, r3
 80073c2:	f001 fb65 	bl	8008a90 <RCCEx_PLL2_Config>
 80073c6:	4603      	mov	r3, r0
 80073c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80073cc:	e00f      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073d2:	3328      	adds	r3, #40	; 0x28
 80073d4:	2102      	movs	r1, #2
 80073d6:	4618      	mov	r0, r3
 80073d8:	f001 fc0c 	bl	8008bf4 <RCCEx_PLL3_Config>
 80073dc:	4603      	mov	r3, r0
 80073de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80073e2:	e004      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80073ea:	e000      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80073ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10b      	bne.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80073f6:	4b4b      	ldr	r3, [pc, #300]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80073f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073fa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80073fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007402:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007406:	4a47      	ldr	r2, [pc, #284]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007408:	430b      	orrs	r3, r1
 800740a:	6593      	str	r3, [r2, #88]	; 0x58
 800740c:	e003      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800740e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007412:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007416:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800741a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007422:	67bb      	str	r3, [r7, #120]	; 0x78
 8007424:	2300      	movs	r3, #0
 8007426:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007428:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800742c:	460b      	mov	r3, r1
 800742e:	4313      	orrs	r3, r2
 8007430:	d03b      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007432:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800743a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800743e:	d01f      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8007440:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007444:	d818      	bhi.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007446:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800744a:	d003      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800744c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007450:	d007      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8007452:	e011      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007454:	4b33      	ldr	r3, [pc, #204]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007458:	4a32      	ldr	r2, [pc, #200]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800745a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800745e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007460:	e00f      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007462:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007466:	3328      	adds	r3, #40	; 0x28
 8007468:	2101      	movs	r1, #1
 800746a:	4618      	mov	r0, r3
 800746c:	f001 fbc2 	bl	8008bf4 <RCCEx_PLL3_Config>
 8007470:	4603      	mov	r3, r0
 8007472:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8007476:	e004      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800747e:	e000      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8007480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007482:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10b      	bne.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800748a:	4b26      	ldr	r3, [pc, #152]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800748c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800748e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007492:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800749a:	4a22      	ldr	r2, [pc, #136]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800749c:	430b      	orrs	r3, r1
 800749e:	6553      	str	r3, [r2, #84]	; 0x54
 80074a0:	e003      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80074a6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80074aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80074b6:	673b      	str	r3, [r7, #112]	; 0x70
 80074b8:	2300      	movs	r3, #0
 80074ba:	677b      	str	r3, [r7, #116]	; 0x74
 80074bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80074c0:	460b      	mov	r3, r1
 80074c2:	4313      	orrs	r3, r2
 80074c4:	d034      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80074c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d003      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80074d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074d4:	d007      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80074d6:	e011      	b.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074d8:	4b12      	ldr	r3, [pc, #72]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80074da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074dc:	4a11      	ldr	r2, [pc, #68]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80074de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80074e4:	e00e      	b.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80074e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074ea:	3308      	adds	r3, #8
 80074ec:	2102      	movs	r1, #2
 80074ee:	4618      	mov	r0, r3
 80074f0:	f001 face 	bl	8008a90 <RCCEx_PLL2_Config>
 80074f4:	4603      	mov	r3, r0
 80074f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80074fa:	e003      	b.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007502:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007504:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007508:	2b00      	cmp	r3, #0
 800750a:	d10d      	bne.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800750c:	4b05      	ldr	r3, [pc, #20]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800750e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007510:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007514:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800751a:	4a02      	ldr	r2, [pc, #8]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800751c:	430b      	orrs	r3, r1
 800751e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007520:	e006      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8007522:	bf00      	nop
 8007524:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007528:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800752c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007530:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007538:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800753c:	66bb      	str	r3, [r7, #104]	; 0x68
 800753e:	2300      	movs	r3, #0
 8007540:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007542:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007546:	460b      	mov	r3, r1
 8007548:	4313      	orrs	r3, r2
 800754a:	d00c      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800754c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007550:	3328      	adds	r3, #40	; 0x28
 8007552:	2102      	movs	r1, #2
 8007554:	4618      	mov	r0, r3
 8007556:	f001 fb4d 	bl	8008bf4 <RCCEx_PLL3_Config>
 800755a:	4603      	mov	r3, r0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d002      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007566:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800756a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007572:	663b      	str	r3, [r7, #96]	; 0x60
 8007574:	2300      	movs	r3, #0
 8007576:	667b      	str	r3, [r7, #100]	; 0x64
 8007578:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800757c:	460b      	mov	r3, r1
 800757e:	4313      	orrs	r3, r2
 8007580:	d038      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007582:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800758a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800758e:	d018      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8007590:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007594:	d811      	bhi.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007596:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800759a:	d014      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800759c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075a0:	d80b      	bhi.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d011      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80075a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075aa:	d106      	bne.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075ac:	4bc3      	ldr	r3, [pc, #780]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80075ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b0:	4ac2      	ldr	r2, [pc, #776]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80075b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80075b8:	e008      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80075c0:	e004      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80075c2:	bf00      	nop
 80075c4:	e002      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80075c6:	bf00      	nop
 80075c8:	e000      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80075ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10b      	bne.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80075d4:	4bb9      	ldr	r3, [pc, #740]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80075d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80075dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075e4:	4ab5      	ldr	r2, [pc, #724]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80075e6:	430b      	orrs	r3, r1
 80075e8:	6553      	str	r3, [r2, #84]	; 0x54
 80075ea:	e003      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80075f0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80075f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007600:	65bb      	str	r3, [r7, #88]	; 0x58
 8007602:	2300      	movs	r3, #0
 8007604:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007606:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800760a:	460b      	mov	r3, r1
 800760c:	4313      	orrs	r3, r2
 800760e:	d009      	beq.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007610:	4baa      	ldr	r3, [pc, #680]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007614:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007618:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800761c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800761e:	4aa7      	ldr	r2, [pc, #668]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007620:	430b      	orrs	r3, r1
 8007622:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007624:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007630:	653b      	str	r3, [r7, #80]	; 0x50
 8007632:	2300      	movs	r3, #0
 8007634:	657b      	str	r3, [r7, #84]	; 0x54
 8007636:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800763a:	460b      	mov	r3, r1
 800763c:	4313      	orrs	r3, r2
 800763e:	d009      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007640:	4b9e      	ldr	r3, [pc, #632]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007644:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007648:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800764c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800764e:	4a9b      	ldr	r2, [pc, #620]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007650:	430b      	orrs	r3, r1
 8007652:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007654:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007660:	64bb      	str	r3, [r7, #72]	; 0x48
 8007662:	2300      	movs	r3, #0
 8007664:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007666:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800766a:	460b      	mov	r3, r1
 800766c:	4313      	orrs	r3, r2
 800766e:	d009      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007670:	4b92      	ldr	r3, [pc, #584]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007674:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8007678:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800767c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800767e:	4a8f      	ldr	r2, [pc, #572]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007680:	430b      	orrs	r3, r1
 8007682:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007690:	643b      	str	r3, [r7, #64]	; 0x40
 8007692:	2300      	movs	r3, #0
 8007694:	647b      	str	r3, [r7, #68]	; 0x44
 8007696:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800769a:	460b      	mov	r3, r1
 800769c:	4313      	orrs	r3, r2
 800769e:	d00e      	beq.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80076a0:	4b86      	ldr	r3, [pc, #536]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	4a85      	ldr	r2, [pc, #532]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80076a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80076aa:	6113      	str	r3, [r2, #16]
 80076ac:	4b83      	ldr	r3, [pc, #524]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80076ae:	6919      	ldr	r1, [r3, #16]
 80076b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80076b8:	4a80      	ldr	r2, [pc, #512]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80076ba:	430b      	orrs	r3, r1
 80076bc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80076be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80076ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80076cc:	2300      	movs	r3, #0
 80076ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076d0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80076d4:	460b      	mov	r3, r1
 80076d6:	4313      	orrs	r3, r2
 80076d8:	d009      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80076da:	4b78      	ldr	r3, [pc, #480]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80076dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076de:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80076e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e8:	4a74      	ldr	r2, [pc, #464]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80076ea:	430b      	orrs	r3, r1
 80076ec:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80076ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80076fa:	633b      	str	r3, [r7, #48]	; 0x30
 80076fc:	2300      	movs	r3, #0
 80076fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007700:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007704:	460b      	mov	r3, r1
 8007706:	4313      	orrs	r3, r2
 8007708:	d00a      	beq.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800770a:	4b6c      	ldr	r3, [pc, #432]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800770c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800770e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007716:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800771a:	4a68      	ldr	r2, [pc, #416]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800771c:	430b      	orrs	r3, r1
 800771e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007720:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007728:	2100      	movs	r1, #0
 800772a:	62b9      	str	r1, [r7, #40]	; 0x28
 800772c:	f003 0301 	and.w	r3, r3, #1
 8007730:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007732:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007736:	460b      	mov	r3, r1
 8007738:	4313      	orrs	r3, r2
 800773a:	d011      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800773c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007740:	3308      	adds	r3, #8
 8007742:	2100      	movs	r1, #0
 8007744:	4618      	mov	r0, r3
 8007746:	f001 f9a3 	bl	8008a90 <RCCEx_PLL2_Config>
 800774a:	4603      	mov	r3, r0
 800774c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007750:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007754:	2b00      	cmp	r3, #0
 8007756:	d003      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007758:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800775c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007768:	2100      	movs	r1, #0
 800776a:	6239      	str	r1, [r7, #32]
 800776c:	f003 0302 	and.w	r3, r3, #2
 8007770:	627b      	str	r3, [r7, #36]	; 0x24
 8007772:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007776:	460b      	mov	r3, r1
 8007778:	4313      	orrs	r3, r2
 800777a:	d011      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800777c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007780:	3308      	adds	r3, #8
 8007782:	2101      	movs	r1, #1
 8007784:	4618      	mov	r0, r3
 8007786:	f001 f983 	bl	8008a90 <RCCEx_PLL2_Config>
 800778a:	4603      	mov	r3, r0
 800778c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007790:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007794:	2b00      	cmp	r3, #0
 8007796:	d003      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007798:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800779c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80077a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a8:	2100      	movs	r1, #0
 80077aa:	61b9      	str	r1, [r7, #24]
 80077ac:	f003 0304 	and.w	r3, r3, #4
 80077b0:	61fb      	str	r3, [r7, #28]
 80077b2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80077b6:	460b      	mov	r3, r1
 80077b8:	4313      	orrs	r3, r2
 80077ba:	d011      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80077bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077c0:	3308      	adds	r3, #8
 80077c2:	2102      	movs	r1, #2
 80077c4:	4618      	mov	r0, r3
 80077c6:	f001 f963 	bl	8008a90 <RCCEx_PLL2_Config>
 80077ca:	4603      	mov	r3, r0
 80077cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80077d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d003      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80077dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80077e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e8:	2100      	movs	r1, #0
 80077ea:	6139      	str	r1, [r7, #16]
 80077ec:	f003 0308 	and.w	r3, r3, #8
 80077f0:	617b      	str	r3, [r7, #20]
 80077f2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80077f6:	460b      	mov	r3, r1
 80077f8:	4313      	orrs	r3, r2
 80077fa:	d011      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007800:	3328      	adds	r3, #40	; 0x28
 8007802:	2100      	movs	r1, #0
 8007804:	4618      	mov	r0, r3
 8007806:	f001 f9f5 	bl	8008bf4 <RCCEx_PLL3_Config>
 800780a:	4603      	mov	r3, r0
 800780c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8007810:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007814:	2b00      	cmp	r3, #0
 8007816:	d003      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007818:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800781c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007820:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007828:	2100      	movs	r1, #0
 800782a:	60b9      	str	r1, [r7, #8]
 800782c:	f003 0310 	and.w	r3, r3, #16
 8007830:	60fb      	str	r3, [r7, #12]
 8007832:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007836:	460b      	mov	r3, r1
 8007838:	4313      	orrs	r3, r2
 800783a:	d011      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800783c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007840:	3328      	adds	r3, #40	; 0x28
 8007842:	2101      	movs	r1, #1
 8007844:	4618      	mov	r0, r3
 8007846:	f001 f9d5 	bl	8008bf4 <RCCEx_PLL3_Config>
 800784a:	4603      	mov	r3, r0
 800784c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007850:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007854:	2b00      	cmp	r3, #0
 8007856:	d003      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007858:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800785c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007860:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007868:	2100      	movs	r1, #0
 800786a:	6039      	str	r1, [r7, #0]
 800786c:	f003 0320 	and.w	r3, r3, #32
 8007870:	607b      	str	r3, [r7, #4]
 8007872:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007876:	460b      	mov	r3, r1
 8007878:	4313      	orrs	r3, r2
 800787a:	d011      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800787c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007880:	3328      	adds	r3, #40	; 0x28
 8007882:	2102      	movs	r1, #2
 8007884:	4618      	mov	r0, r3
 8007886:	f001 f9b5 	bl	8008bf4 <RCCEx_PLL3_Config>
 800788a:	4603      	mov	r3, r0
 800788c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007890:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007894:	2b00      	cmp	r3, #0
 8007896:	d003      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007898:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800789c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80078a0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d101      	bne.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	e000      	b.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80078b4:	46bd      	mov	sp, r7
 80078b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078ba:	bf00      	nop
 80078bc:	58024400 	.word	0x58024400

080078c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b090      	sub	sp, #64	; 0x40
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80078ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078ce:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80078d2:	430b      	orrs	r3, r1
 80078d4:	f040 8094 	bne.w	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80078d8:	4b97      	ldr	r3, [pc, #604]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80078da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078dc:	f003 0307 	and.w	r3, r3, #7
 80078e0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80078e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e4:	2b04      	cmp	r3, #4
 80078e6:	f200 8087 	bhi.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80078ea:	a201      	add	r2, pc, #4	; (adr r2, 80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80078ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f0:	08007905 	.word	0x08007905
 80078f4:	0800792d 	.word	0x0800792d
 80078f8:	08007955 	.word	0x08007955
 80078fc:	080079f1 	.word	0x080079f1
 8007900:	0800797d 	.word	0x0800797d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007904:	4b8c      	ldr	r3, [pc, #560]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800790c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007910:	d108      	bne.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007916:	4618      	mov	r0, r3
 8007918:	f000 ff68 	bl	80087ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800791c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007920:	f000 bc97 	b.w	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007924:	2300      	movs	r3, #0
 8007926:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007928:	f000 bc93 	b.w	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800792c:	4b82      	ldr	r3, [pc, #520]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007934:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007938:	d108      	bne.n	800794c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800793a:	f107 0318 	add.w	r3, r7, #24
 800793e:	4618      	mov	r0, r3
 8007940:	f000 fcac 	bl	800829c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007948:	f000 bc83 	b.w	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800794c:	2300      	movs	r3, #0
 800794e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007950:	f000 bc7f 	b.w	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007954:	4b78      	ldr	r3, [pc, #480]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800795c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007960:	d108      	bne.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007962:	f107 030c 	add.w	r3, r7, #12
 8007966:	4618      	mov	r0, r3
 8007968:	f000 fdec 	bl	8008544 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007970:	f000 bc6f 	b.w	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007974:	2300      	movs	r3, #0
 8007976:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007978:	f000 bc6b 	b.w	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800797c:	4b6e      	ldr	r3, [pc, #440]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800797e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007980:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007984:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007986:	4b6c      	ldr	r3, [pc, #432]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 0304 	and.w	r3, r3, #4
 800798e:	2b04      	cmp	r3, #4
 8007990:	d10c      	bne.n	80079ac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007994:	2b00      	cmp	r3, #0
 8007996:	d109      	bne.n	80079ac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007998:	4b67      	ldr	r3, [pc, #412]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	08db      	lsrs	r3, r3, #3
 800799e:	f003 0303 	and.w	r3, r3, #3
 80079a2:	4a66      	ldr	r2, [pc, #408]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80079a4:	fa22 f303 	lsr.w	r3, r2, r3
 80079a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079aa:	e01f      	b.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80079ac:	4b62      	ldr	r3, [pc, #392]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079b8:	d106      	bne.n	80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80079ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079c0:	d102      	bne.n	80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80079c2:	4b5f      	ldr	r3, [pc, #380]	; (8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80079c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079c6:	e011      	b.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80079c8:	4b5b      	ldr	r3, [pc, #364]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079d4:	d106      	bne.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80079d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079dc:	d102      	bne.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80079de:	4b59      	ldr	r3, [pc, #356]	; (8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80079e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079e2:	e003      	b.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80079e4:	2300      	movs	r3, #0
 80079e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80079e8:	f000 bc33 	b.w	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80079ec:	f000 bc31 	b.w	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80079f0:	4b55      	ldr	r3, [pc, #340]	; (8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80079f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079f4:	f000 bc2d 	b.w	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80079f8:	2300      	movs	r3, #0
 80079fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079fc:	f000 bc29 	b.w	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8007a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a04:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007a08:	430b      	orrs	r3, r1
 8007a0a:	f040 809f 	bne.w	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8007a0e:	4b4a      	ldr	r3, [pc, #296]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a12:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007a16:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a1e:	d04d      	beq.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a26:	f200 8084 	bhi.w	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2c:	2bc0      	cmp	r3, #192	; 0xc0
 8007a2e:	d07d      	beq.n	8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8007a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a32:	2bc0      	cmp	r3, #192	; 0xc0
 8007a34:	d87d      	bhi.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	2b80      	cmp	r3, #128	; 0x80
 8007a3a:	d02d      	beq.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8007a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3e:	2b80      	cmp	r3, #128	; 0x80
 8007a40:	d877      	bhi.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d003      	beq.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8007a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4a:	2b40      	cmp	r3, #64	; 0x40
 8007a4c:	d012      	beq.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007a4e:	e070      	b.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a50:	4b39      	ldr	r3, [pc, #228]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a5c:	d107      	bne.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a62:	4618      	mov	r0, r3
 8007a64:	f000 fec2 	bl	80087ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a6c:	e3f1      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a72:	e3ee      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a74:	4b30      	ldr	r3, [pc, #192]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a80:	d107      	bne.n	8007a92 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a82:	f107 0318 	add.w	r3, r7, #24
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 fc08 	bl	800829c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a90:	e3df      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007a92:	2300      	movs	r3, #0
 8007a94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a96:	e3dc      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a98:	4b27      	ldr	r3, [pc, #156]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007aa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aa4:	d107      	bne.n	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007aa6:	f107 030c 	add.w	r3, r7, #12
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 fd4a 	bl	8008544 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ab4:	e3cd      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007aba:	e3ca      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007abc:	4b1e      	ldr	r3, [pc, #120]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ac0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ac4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ac6:	4b1c      	ldr	r3, [pc, #112]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f003 0304 	and.w	r3, r3, #4
 8007ace:	2b04      	cmp	r3, #4
 8007ad0:	d10c      	bne.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8007ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d109      	bne.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ad8:	4b17      	ldr	r3, [pc, #92]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	08db      	lsrs	r3, r3, #3
 8007ade:	f003 0303 	and.w	r3, r3, #3
 8007ae2:	4a16      	ldr	r2, [pc, #88]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007aea:	e01e      	b.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007aec:	4b12      	ldr	r3, [pc, #72]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007af4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007af8:	d106      	bne.n	8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8007afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007afc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b00:	d102      	bne.n	8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007b02:	4b0f      	ldr	r3, [pc, #60]	; (8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007b04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b06:	e010      	b.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b08:	4b0b      	ldr	r3, [pc, #44]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b14:	d106      	bne.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b1c:	d102      	bne.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007b1e:	4b09      	ldr	r3, [pc, #36]	; (8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007b20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b22:	e002      	b.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007b24:	2300      	movs	r3, #0
 8007b26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007b28:	e393      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007b2a:	e392      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007b2c:	4b06      	ldr	r3, [pc, #24]	; (8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b30:	e38f      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8007b32:	2300      	movs	r3, #0
 8007b34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b36:	e38c      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007b38:	58024400 	.word	0x58024400
 8007b3c:	03d09000 	.word	0x03d09000
 8007b40:	003d0900 	.word	0x003d0900
 8007b44:	007a1200 	.word	0x007a1200
 8007b48:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8007b4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b50:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007b54:	430b      	orrs	r3, r1
 8007b56:	f040 809c 	bne.w	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8007b5a:	4b9e      	ldr	r3, [pc, #632]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b5e:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8007b62:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b6a:	d054      	beq.n	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b72:	f200 808b 	bhi.w	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8007b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b78:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007b7c:	f000 8083 	beq.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8007b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b82:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007b86:	f200 8081 	bhi.w	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8007b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b90:	d02f      	beq.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8007b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b98:	d878      	bhi.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d004      	beq.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8007ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ba6:	d012      	beq.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8007ba8:	e070      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007baa:	4b8a      	ldr	r3, [pc, #552]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bb6:	d107      	bne.n	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f000 fe15 	bl	80087ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bc6:	e344      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bcc:	e341      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bce:	4b81      	ldr	r3, [pc, #516]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bda:	d107      	bne.n	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bdc:	f107 0318 	add.w	r3, r7, #24
 8007be0:	4618      	mov	r0, r3
 8007be2:	f000 fb5b 	bl	800829c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bea:	e332      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007bec:	2300      	movs	r3, #0
 8007bee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bf0:	e32f      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007bf2:	4b78      	ldr	r3, [pc, #480]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bfe:	d107      	bne.n	8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c00:	f107 030c 	add.w	r3, r7, #12
 8007c04:	4618      	mov	r0, r3
 8007c06:	f000 fc9d 	bl	8008544 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c0e:	e320      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007c10:	2300      	movs	r3, #0
 8007c12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c14:	e31d      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c16:	4b6f      	ldr	r3, [pc, #444]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c1e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c20:	4b6c      	ldr	r3, [pc, #432]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 0304 	and.w	r3, r3, #4
 8007c28:	2b04      	cmp	r3, #4
 8007c2a:	d10c      	bne.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8007c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d109      	bne.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c32:	4b68      	ldr	r3, [pc, #416]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	08db      	lsrs	r3, r3, #3
 8007c38:	f003 0303 	and.w	r3, r3, #3
 8007c3c:	4a66      	ldr	r2, [pc, #408]	; (8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8007c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c44:	e01e      	b.n	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c46:	4b63      	ldr	r3, [pc, #396]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c52:	d106      	bne.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c5a:	d102      	bne.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007c5c:	4b5f      	ldr	r3, [pc, #380]	; (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8007c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c60:	e010      	b.n	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c62:	4b5c      	ldr	r3, [pc, #368]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c6e:	d106      	bne.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c76:	d102      	bne.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007c78:	4b59      	ldr	r3, [pc, #356]	; (8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8007c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c7c:	e002      	b.n	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 8007c82:	e2e6      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007c84:	e2e5      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007c86:	4b57      	ldr	r3, [pc, #348]	; (8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c8a:	e2e2      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c90:	e2df      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007c92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c96:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007c9a:	430b      	orrs	r3, r1
 8007c9c:	f040 80a7 	bne.w	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007ca0:	4b4c      	ldr	r3, [pc, #304]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ca4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007ca8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cb0:	d055      	beq.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8007cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cb8:	f200 8096 	bhi.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8007cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cbe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007cc2:	f000 8084 	beq.w	8007dce <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8007cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ccc:	f200 808c 	bhi.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8007cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cd6:	d030      	beq.n	8007d3a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8007cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cde:	f200 8083 	bhi.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8007ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d004      	beq.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8007ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cee:	d012      	beq.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8007cf0:	e07a      	b.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cf2:	4b38      	ldr	r3, [pc, #224]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cfe:	d107      	bne.n	8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d04:	4618      	mov	r0, r3
 8007d06:	f000 fd71 	bl	80087ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d0e:	e2a0      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007d10:	2300      	movs	r3, #0
 8007d12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d14:	e29d      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d16:	4b2f      	ldr	r3, [pc, #188]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d22:	d107      	bne.n	8007d34 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d24:	f107 0318 	add.w	r3, r7, #24
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f000 fab7 	bl	800829c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d32:	e28e      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007d34:	2300      	movs	r3, #0
 8007d36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d38:	e28b      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d3a:	4b26      	ldr	r3, [pc, #152]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d46:	d107      	bne.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d48:	f107 030c 	add.w	r3, r7, #12
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f000 fbf9 	bl	8008544 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d56:	e27c      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d5c:	e279      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d5e:	4b1d      	ldr	r3, [pc, #116]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d66:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d68:	4b1a      	ldr	r3, [pc, #104]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 0304 	and.w	r3, r3, #4
 8007d70:	2b04      	cmp	r3, #4
 8007d72:	d10c      	bne.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8007d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d109      	bne.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d7a:	4b16      	ldr	r3, [pc, #88]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	08db      	lsrs	r3, r3, #3
 8007d80:	f003 0303 	and.w	r3, r3, #3
 8007d84:	4a14      	ldr	r2, [pc, #80]	; (8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8007d86:	fa22 f303 	lsr.w	r3, r2, r3
 8007d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d8c:	e01e      	b.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d8e:	4b11      	ldr	r3, [pc, #68]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d9a:	d106      	bne.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007da2:	d102      	bne.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007da4:	4b0d      	ldr	r3, [pc, #52]	; (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8007da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007da8:	e010      	b.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007daa:	4b0a      	ldr	r3, [pc, #40]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007db2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007db6:	d106      	bne.n	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dbe:	d102      	bne.n	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007dc0:	4b07      	ldr	r3, [pc, #28]	; (8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8007dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dc4:	e002      	b.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007dca:	e242      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007dcc:	e241      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007dce:	4b05      	ldr	r3, [pc, #20]	; (8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dd2:	e23e      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007dd4:	58024400 	.word	0x58024400
 8007dd8:	03d09000 	.word	0x03d09000
 8007ddc:	003d0900 	.word	0x003d0900
 8007de0:	007a1200 	.word	0x007a1200
 8007de4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8007de8:	2300      	movs	r3, #0
 8007dea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dec:	e231      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007dee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007df2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007df6:	430b      	orrs	r3, r1
 8007df8:	f040 8085 	bne.w	8007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007dfc:	4b9c      	ldr	r3, [pc, #624]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e00:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007e04:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8007e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e0c:	d06b      	beq.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8007e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e14:	d874      	bhi.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8007e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e1c:	d056      	beq.n	8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8007e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e24:	d86c      	bhi.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8007e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e2c:	d03b      	beq.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8007e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e34:	d864      	bhi.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8007e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e3c:	d021      	beq.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8007e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e44:	d85c      	bhi.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8007e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d004      	beq.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8007e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e52:	d004      	beq.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8007e54:	e054      	b.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007e56:	f7fe fb49 	bl	80064ec <HAL_RCC_GetPCLK1Freq>
 8007e5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007e5c:	e1f9      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e5e:	4b84      	ldr	r3, [pc, #528]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e6a:	d107      	bne.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e6c:	f107 0318 	add.w	r3, r7, #24
 8007e70:	4618      	mov	r0, r3
 8007e72:	f000 fa13 	bl	800829c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e7a:	e1ea      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e80:	e1e7      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e82:	4b7b      	ldr	r3, [pc, #492]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e8e:	d107      	bne.n	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e90:	f107 030c 	add.w	r3, r7, #12
 8007e94:	4618      	mov	r0, r3
 8007e96:	f000 fb55 	bl	8008544 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e9e:	e1d8      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ea4:	e1d5      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ea6:	4b72      	ldr	r3, [pc, #456]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f003 0304 	and.w	r3, r3, #4
 8007eae:	2b04      	cmp	r3, #4
 8007eb0:	d109      	bne.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007eb2:	4b6f      	ldr	r3, [pc, #444]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	08db      	lsrs	r3, r3, #3
 8007eb8:	f003 0303 	and.w	r3, r3, #3
 8007ebc:	4a6d      	ldr	r2, [pc, #436]	; (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8007ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ec4:	e1c5      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007eca:	e1c2      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007ecc:	4b68      	ldr	r3, [pc, #416]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ed8:	d102      	bne.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8007eda:	4b67      	ldr	r3, [pc, #412]	; (8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007edc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ede:	e1b8      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ee4:	e1b5      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007ee6:	4b62      	ldr	r3, [pc, #392]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ef2:	d102      	bne.n	8007efa <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8007ef4:	4b61      	ldr	r3, [pc, #388]	; (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8007ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ef8:	e1ab      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007efa:	2300      	movs	r3, #0
 8007efc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007efe:	e1a8      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8007f00:	2300      	movs	r3, #0
 8007f02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f04:	e1a5      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007f06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f0a:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007f0e:	430b      	orrs	r3, r1
 8007f10:	d173      	bne.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007f12:	4b57      	ldr	r3, [pc, #348]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f1a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f22:	d02f      	beq.n	8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8007f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f2a:	d863      	bhi.n	8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8007f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d004      	beq.n	8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f38:	d012      	beq.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8007f3a:	e05b      	b.n	8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f3c:	4b4c      	ldr	r3, [pc, #304]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f48:	d107      	bne.n	8007f5a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f4a:	f107 0318 	add.w	r3, r7, #24
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f000 f9a4 	bl	800829c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f58:	e17b      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f5e:	e178      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f60:	4b43      	ldr	r3, [pc, #268]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f6c:	d107      	bne.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f6e:	f107 030c 	add.w	r3, r7, #12
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 fae6 	bl	8008544 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f7c:	e169      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f82:	e166      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f84:	4b3a      	ldr	r3, [pc, #232]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f8c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f8e:	4b38      	ldr	r3, [pc, #224]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 0304 	and.w	r3, r3, #4
 8007f96:	2b04      	cmp	r3, #4
 8007f98:	d10c      	bne.n	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8007f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d109      	bne.n	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fa0:	4b33      	ldr	r3, [pc, #204]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	08db      	lsrs	r3, r3, #3
 8007fa6:	f003 0303 	and.w	r3, r3, #3
 8007faa:	4a32      	ldr	r2, [pc, #200]	; (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007fac:	fa22 f303 	lsr.w	r3, r2, r3
 8007fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fb2:	e01e      	b.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007fb4:	4b2e      	ldr	r3, [pc, #184]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fc0:	d106      	bne.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8007fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fc8:	d102      	bne.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007fca:	4b2b      	ldr	r3, [pc, #172]	; (8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fce:	e010      	b.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007fd0:	4b27      	ldr	r3, [pc, #156]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fdc:	d106      	bne.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8007fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fe0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fe4:	d102      	bne.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007fe6:	4b25      	ldr	r3, [pc, #148]	; (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8007fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fea:	e002      	b.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007fec:	2300      	movs	r3, #0
 8007fee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007ff0:	e12f      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007ff2:	e12e      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ff8:	e12b      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007ffa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ffe:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008002:	430b      	orrs	r3, r1
 8008004:	d13c      	bne.n	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008006:	4b1a      	ldr	r3, [pc, #104]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800800a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800800e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008012:	2b00      	cmp	r3, #0
 8008014:	d004      	beq.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8008016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800801c:	d012      	beq.n	8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800801e:	e023      	b.n	8008068 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008020:	4b13      	ldr	r3, [pc, #76]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008028:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800802c:	d107      	bne.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800802e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008032:	4618      	mov	r0, r3
 8008034:	f000 fbda 	bl	80087ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800803c:	e109      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800803e:	2300      	movs	r3, #0
 8008040:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008042:	e106      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008044:	4b0a      	ldr	r3, [pc, #40]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800804c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008050:	d107      	bne.n	8008062 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008052:	f107 0318 	add.w	r3, r7, #24
 8008056:	4618      	mov	r0, r3
 8008058:	f000 f920 	bl	800829c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800805c:	6a3b      	ldr	r3, [r7, #32]
 800805e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008060:	e0f7      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008062:	2300      	movs	r3, #0
 8008064:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008066:	e0f4      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008068:	2300      	movs	r3, #0
 800806a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800806c:	e0f1      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800806e:	bf00      	nop
 8008070:	58024400 	.word	0x58024400
 8008074:	03d09000 	.word	0x03d09000
 8008078:	003d0900 	.word	0x003d0900
 800807c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008080:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008084:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008088:	430b      	orrs	r3, r1
 800808a:	f040 8091 	bne.w	80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800808e:	4b73      	ldr	r3, [pc, #460]	; (800825c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008092:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008096:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800809e:	f000 8081 	beq.w	80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80080a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80080a8:	d87f      	bhi.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80080aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080b0:	d06b      	beq.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80080b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080b8:	d877      	bhi.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80080ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080c0:	d056      	beq.n	8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80080c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080c8:	d86f      	bhi.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80080ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80080d0:	d03b      	beq.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80080d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80080d8:	d867      	bhi.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80080da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080e0:	d021      	beq.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80080e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080e8:	d85f      	bhi.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80080ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d004      	beq.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80080f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080f6:	d004      	beq.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80080f8:	e057      	b.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80080fa:	f000 f8b9 	bl	8008270 <HAL_RCCEx_GetD3PCLK1Freq>
 80080fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008100:	e0a7      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008102:	4b56      	ldr	r3, [pc, #344]	; (800825c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800810a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800810e:	d107      	bne.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008110:	f107 0318 	add.w	r3, r7, #24
 8008114:	4618      	mov	r0, r3
 8008116:	f000 f8c1 	bl	800829c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800811e:	e098      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008120:	2300      	movs	r3, #0
 8008122:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008124:	e095      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008126:	4b4d      	ldr	r3, [pc, #308]	; (800825c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800812e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008132:	d107      	bne.n	8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008134:	f107 030c 	add.w	r3, r7, #12
 8008138:	4618      	mov	r0, r3
 800813a:	f000 fa03 	bl	8008544 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008142:	e086      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008144:	2300      	movs	r3, #0
 8008146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008148:	e083      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800814a:	4b44      	ldr	r3, [pc, #272]	; (800825c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 0304 	and.w	r3, r3, #4
 8008152:	2b04      	cmp	r3, #4
 8008154:	d109      	bne.n	800816a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008156:	4b41      	ldr	r3, [pc, #260]	; (800825c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	08db      	lsrs	r3, r3, #3
 800815c:	f003 0303 	and.w	r3, r3, #3
 8008160:	4a3f      	ldr	r2, [pc, #252]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008162:	fa22 f303 	lsr.w	r3, r2, r3
 8008166:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008168:	e073      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800816a:	2300      	movs	r3, #0
 800816c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800816e:	e070      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008170:	4b3a      	ldr	r3, [pc, #232]	; (800825c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800817c:	d102      	bne.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800817e:	4b39      	ldr	r3, [pc, #228]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8008180:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008182:	e066      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008184:	2300      	movs	r3, #0
 8008186:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008188:	e063      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800818a:	4b34      	ldr	r3, [pc, #208]	; (800825c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008192:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008196:	d102      	bne.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8008198:	4b33      	ldr	r3, [pc, #204]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800819a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800819c:	e059      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800819e:	2300      	movs	r3, #0
 80081a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081a2:	e056      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80081a4:	4b31      	ldr	r3, [pc, #196]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 80081a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081a8:	e053      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80081aa:	2300      	movs	r3, #0
 80081ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081ae:	e050      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80081b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081b4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80081b8:	430b      	orrs	r3, r1
 80081ba:	d148      	bne.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80081bc:	4b27      	ldr	r3, [pc, #156]	; (800825c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80081be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80081c4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80081c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081cc:	d02a      	beq.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80081ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081d4:	d838      	bhi.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80081d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d004      	beq.n	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80081dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081e2:	d00d      	beq.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80081e4:	e030      	b.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80081e6:	4b1d      	ldr	r3, [pc, #116]	; (800825c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081f2:	d102      	bne.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 80081f4:	4b1c      	ldr	r3, [pc, #112]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80081f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081f8:	e02b      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80081fa:	2300      	movs	r3, #0
 80081fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081fe:	e028      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008200:	4b16      	ldr	r3, [pc, #88]	; (800825c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008208:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800820c:	d107      	bne.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800820e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008212:	4618      	mov	r0, r3
 8008214:	f000 faea 	bl	80087ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800821c:	e019      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800821e:	2300      	movs	r3, #0
 8008220:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008222:	e016      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008224:	4b0d      	ldr	r3, [pc, #52]	; (800825c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800822c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008230:	d107      	bne.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008232:	f107 0318 	add.w	r3, r7, #24
 8008236:	4618      	mov	r0, r3
 8008238:	f000 f830 	bl	800829c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008240:	e007      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008242:	2300      	movs	r3, #0
 8008244:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008246:	e004      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008248:	2300      	movs	r3, #0
 800824a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800824c:	e001      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800824e:	2300      	movs	r3, #0
 8008250:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8008252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008254:	4618      	mov	r0, r3
 8008256:	3740      	adds	r7, #64	; 0x40
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}
 800825c:	58024400 	.word	0x58024400
 8008260:	03d09000 	.word	0x03d09000
 8008264:	003d0900 	.word	0x003d0900
 8008268:	007a1200 	.word	0x007a1200
 800826c:	00bb8000 	.word	0x00bb8000

08008270 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8008274:	f7fe f90a 	bl	800648c <HAL_RCC_GetHCLKFreq>
 8008278:	4602      	mov	r2, r0
 800827a:	4b06      	ldr	r3, [pc, #24]	; (8008294 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800827c:	6a1b      	ldr	r3, [r3, #32]
 800827e:	091b      	lsrs	r3, r3, #4
 8008280:	f003 0307 	and.w	r3, r3, #7
 8008284:	4904      	ldr	r1, [pc, #16]	; (8008298 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008286:	5ccb      	ldrb	r3, [r1, r3]
 8008288:	f003 031f 	and.w	r3, r3, #31
 800828c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008290:	4618      	mov	r0, r3
 8008292:	bd80      	pop	{r7, pc}
 8008294:	58024400 	.word	0x58024400
 8008298:	0800fac0 	.word	0x0800fac0

0800829c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800829c:	b480      	push	{r7}
 800829e:	b089      	sub	sp, #36	; 0x24
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082a4:	4ba1      	ldr	r3, [pc, #644]	; (800852c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a8:	f003 0303 	and.w	r3, r3, #3
 80082ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80082ae:	4b9f      	ldr	r3, [pc, #636]	; (800852c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b2:	0b1b      	lsrs	r3, r3, #12
 80082b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80082ba:	4b9c      	ldr	r3, [pc, #624]	; (800852c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082be:	091b      	lsrs	r3, r3, #4
 80082c0:	f003 0301 	and.w	r3, r3, #1
 80082c4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80082c6:	4b99      	ldr	r3, [pc, #612]	; (800852c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ca:	08db      	lsrs	r3, r3, #3
 80082cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082d0:	693a      	ldr	r2, [r7, #16]
 80082d2:	fb02 f303 	mul.w	r3, r2, r3
 80082d6:	ee07 3a90 	vmov	s15, r3
 80082da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f000 8111 	beq.w	800850c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	f000 8083 	beq.w	80083f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	f200 80a1 	bhi.w	800843c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d003      	beq.n	8008308 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	2b01      	cmp	r3, #1
 8008304:	d056      	beq.n	80083b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008306:	e099      	b.n	800843c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008308:	4b88      	ldr	r3, [pc, #544]	; (800852c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 0320 	and.w	r3, r3, #32
 8008310:	2b00      	cmp	r3, #0
 8008312:	d02d      	beq.n	8008370 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008314:	4b85      	ldr	r3, [pc, #532]	; (800852c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	08db      	lsrs	r3, r3, #3
 800831a:	f003 0303 	and.w	r3, r3, #3
 800831e:	4a84      	ldr	r2, [pc, #528]	; (8008530 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008320:	fa22 f303 	lsr.w	r3, r2, r3
 8008324:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	ee07 3a90 	vmov	s15, r3
 800832c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	ee07 3a90 	vmov	s15, r3
 8008336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800833a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800833e:	4b7b      	ldr	r3, [pc, #492]	; (800852c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008346:	ee07 3a90 	vmov	s15, r3
 800834a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800834e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008352:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008534 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800835a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800835e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800836a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800836e:	e087      	b.n	8008480 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	ee07 3a90 	vmov	s15, r3
 8008376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800837a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008538 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800837e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008382:	4b6a      	ldr	r3, [pc, #424]	; (800852c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800838a:	ee07 3a90 	vmov	s15, r3
 800838e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008392:	ed97 6a03 	vldr	s12, [r7, #12]
 8008396:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008534 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800839a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800839e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083b2:	e065      	b.n	8008480 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	ee07 3a90 	vmov	s15, r3
 80083ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800853c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80083c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083c6:	4b59      	ldr	r3, [pc, #356]	; (800852c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ce:	ee07 3a90 	vmov	s15, r3
 80083d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80083da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008534 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083f6:	e043      	b.n	8008480 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	ee07 3a90 	vmov	s15, r3
 80083fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008402:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008540 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800840a:	4b48      	ldr	r3, [pc, #288]	; (800852c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800840c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008412:	ee07 3a90 	vmov	s15, r3
 8008416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800841a:	ed97 6a03 	vldr	s12, [r7, #12]
 800841e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008534 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800842a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800842e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008436:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800843a:	e021      	b.n	8008480 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	ee07 3a90 	vmov	s15, r3
 8008442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008446:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800853c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800844a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800844e:	4b37      	ldr	r3, [pc, #220]	; (800852c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008456:	ee07 3a90 	vmov	s15, r3
 800845a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800845e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008462:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008534 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800846a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800846e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800847a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800847e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008480:	4b2a      	ldr	r3, [pc, #168]	; (800852c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008484:	0a5b      	lsrs	r3, r3, #9
 8008486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800848a:	ee07 3a90 	vmov	s15, r3
 800848e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008492:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008496:	ee37 7a87 	vadd.f32	s14, s15, s14
 800849a:	edd7 6a07 	vldr	s13, [r7, #28]
 800849e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084a6:	ee17 2a90 	vmov	r2, s15
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80084ae:	4b1f      	ldr	r3, [pc, #124]	; (800852c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b2:	0c1b      	lsrs	r3, r3, #16
 80084b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084b8:	ee07 3a90 	vmov	s15, r3
 80084bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80084cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084d4:	ee17 2a90 	vmov	r2, s15
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80084dc:	4b13      	ldr	r3, [pc, #76]	; (800852c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e0:	0e1b      	lsrs	r3, r3, #24
 80084e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084e6:	ee07 3a90 	vmov	s15, r3
 80084ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80084fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008502:	ee17 2a90 	vmov	r2, s15
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800850a:	e008      	b.n	800851e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	609a      	str	r2, [r3, #8]
}
 800851e:	bf00      	nop
 8008520:	3724      	adds	r7, #36	; 0x24
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	58024400 	.word	0x58024400
 8008530:	03d09000 	.word	0x03d09000
 8008534:	46000000 	.word	0x46000000
 8008538:	4c742400 	.word	0x4c742400
 800853c:	4a742400 	.word	0x4a742400
 8008540:	4af42400 	.word	0x4af42400

08008544 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008544:	b480      	push	{r7}
 8008546:	b089      	sub	sp, #36	; 0x24
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800854c:	4ba1      	ldr	r3, [pc, #644]	; (80087d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800854e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008550:	f003 0303 	and.w	r3, r3, #3
 8008554:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008556:	4b9f      	ldr	r3, [pc, #636]	; (80087d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800855a:	0d1b      	lsrs	r3, r3, #20
 800855c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008560:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008562:	4b9c      	ldr	r3, [pc, #624]	; (80087d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008566:	0a1b      	lsrs	r3, r3, #8
 8008568:	f003 0301 	and.w	r3, r3, #1
 800856c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800856e:	4b99      	ldr	r3, [pc, #612]	; (80087d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008572:	08db      	lsrs	r3, r3, #3
 8008574:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008578:	693a      	ldr	r2, [r7, #16]
 800857a:	fb02 f303 	mul.w	r3, r2, r3
 800857e:	ee07 3a90 	vmov	s15, r3
 8008582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008586:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	2b00      	cmp	r3, #0
 800858e:	f000 8111 	beq.w	80087b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	2b02      	cmp	r3, #2
 8008596:	f000 8083 	beq.w	80086a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	2b02      	cmp	r3, #2
 800859e:	f200 80a1 	bhi.w	80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d003      	beq.n	80085b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d056      	beq.n	800865c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80085ae:	e099      	b.n	80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085b0:	4b88      	ldr	r3, [pc, #544]	; (80087d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 0320 	and.w	r3, r3, #32
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d02d      	beq.n	8008618 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085bc:	4b85      	ldr	r3, [pc, #532]	; (80087d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	08db      	lsrs	r3, r3, #3
 80085c2:	f003 0303 	and.w	r3, r3, #3
 80085c6:	4a84      	ldr	r2, [pc, #528]	; (80087d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80085c8:	fa22 f303 	lsr.w	r3, r2, r3
 80085cc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	ee07 3a90 	vmov	s15, r3
 80085d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	ee07 3a90 	vmov	s15, r3
 80085de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085e6:	4b7b      	ldr	r3, [pc, #492]	; (80087d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ee:	ee07 3a90 	vmov	s15, r3
 80085f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80085fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80087dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800860a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800860e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008612:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008616:	e087      	b.n	8008728 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	ee07 3a90 	vmov	s15, r3
 800861e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008622:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80087e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800862a:	4b6a      	ldr	r3, [pc, #424]	; (80087d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800862c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008632:	ee07 3a90 	vmov	s15, r3
 8008636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800863a:	ed97 6a03 	vldr	s12, [r7, #12]
 800863e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80087dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800864a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800864e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008656:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800865a:	e065      	b.n	8008728 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	ee07 3a90 	vmov	s15, r3
 8008662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008666:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80087e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800866a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800866e:	4b59      	ldr	r3, [pc, #356]	; (80087d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008676:	ee07 3a90 	vmov	s15, r3
 800867a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800867e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008682:	eddf 5a56 	vldr	s11, [pc, #344]	; 80087dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800868a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800868e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800869a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800869e:	e043      	b.n	8008728 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	ee07 3a90 	vmov	s15, r3
 80086a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80087e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80086ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086b2:	4b48      	ldr	r3, [pc, #288]	; (80087d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ba:	ee07 3a90 	vmov	s15, r3
 80086be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80086c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80087dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086e2:	e021      	b.n	8008728 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	ee07 3a90 	vmov	s15, r3
 80086ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80087e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80086f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086f6:	4b37      	ldr	r3, [pc, #220]	; (80087d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086fe:	ee07 3a90 	vmov	s15, r3
 8008702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008706:	ed97 6a03 	vldr	s12, [r7, #12]
 800870a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80087dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800870e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800871a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800871e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008722:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008726:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008728:	4b2a      	ldr	r3, [pc, #168]	; (80087d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800872a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800872c:	0a5b      	lsrs	r3, r3, #9
 800872e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008732:	ee07 3a90 	vmov	s15, r3
 8008736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800873a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800873e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008742:	edd7 6a07 	vldr	s13, [r7, #28]
 8008746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800874a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800874e:	ee17 2a90 	vmov	r2, s15
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008756:	4b1f      	ldr	r3, [pc, #124]	; (80087d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875a:	0c1b      	lsrs	r3, r3, #16
 800875c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008760:	ee07 3a90 	vmov	s15, r3
 8008764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008768:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800876c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008770:	edd7 6a07 	vldr	s13, [r7, #28]
 8008774:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008778:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800877c:	ee17 2a90 	vmov	r2, s15
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008784:	4b13      	ldr	r3, [pc, #76]	; (80087d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008788:	0e1b      	lsrs	r3, r3, #24
 800878a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800878e:	ee07 3a90 	vmov	s15, r3
 8008792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008796:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800879a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800879e:	edd7 6a07 	vldr	s13, [r7, #28]
 80087a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087aa:	ee17 2a90 	vmov	r2, s15
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80087b2:	e008      	b.n	80087c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	609a      	str	r2, [r3, #8]
}
 80087c6:	bf00      	nop
 80087c8:	3724      	adds	r7, #36	; 0x24
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	58024400 	.word	0x58024400
 80087d8:	03d09000 	.word	0x03d09000
 80087dc:	46000000 	.word	0x46000000
 80087e0:	4c742400 	.word	0x4c742400
 80087e4:	4a742400 	.word	0x4a742400
 80087e8:	4af42400 	.word	0x4af42400

080087ec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b089      	sub	sp, #36	; 0x24
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087f4:	4ba0      	ldr	r3, [pc, #640]	; (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f8:	f003 0303 	and.w	r3, r3, #3
 80087fc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80087fe:	4b9e      	ldr	r3, [pc, #632]	; (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008802:	091b      	lsrs	r3, r3, #4
 8008804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008808:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800880a:	4b9b      	ldr	r3, [pc, #620]	; (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800880c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880e:	f003 0301 	and.w	r3, r3, #1
 8008812:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008814:	4b98      	ldr	r3, [pc, #608]	; (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008818:	08db      	lsrs	r3, r3, #3
 800881a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800881e:	693a      	ldr	r2, [r7, #16]
 8008820:	fb02 f303 	mul.w	r3, r2, r3
 8008824:	ee07 3a90 	vmov	s15, r3
 8008828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800882c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	2b00      	cmp	r3, #0
 8008834:	f000 8111 	beq.w	8008a5a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	2b02      	cmp	r3, #2
 800883c:	f000 8083 	beq.w	8008946 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	2b02      	cmp	r3, #2
 8008844:	f200 80a1 	bhi.w	800898a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d003      	beq.n	8008856 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d056      	beq.n	8008902 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008854:	e099      	b.n	800898a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008856:	4b88      	ldr	r3, [pc, #544]	; (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0320 	and.w	r3, r3, #32
 800885e:	2b00      	cmp	r3, #0
 8008860:	d02d      	beq.n	80088be <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008862:	4b85      	ldr	r3, [pc, #532]	; (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	08db      	lsrs	r3, r3, #3
 8008868:	f003 0303 	and.w	r3, r3, #3
 800886c:	4a83      	ldr	r2, [pc, #524]	; (8008a7c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800886e:	fa22 f303 	lsr.w	r3, r2, r3
 8008872:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	ee07 3a90 	vmov	s15, r3
 800887a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	ee07 3a90 	vmov	s15, r3
 8008884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008888:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800888c:	4b7a      	ldr	r3, [pc, #488]	; (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800888e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008894:	ee07 3a90 	vmov	s15, r3
 8008898:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800889c:	ed97 6a03 	vldr	s12, [r7, #12]
 80088a0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008a80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088b8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80088bc:	e087      	b.n	80089ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	ee07 3a90 	vmov	s15, r3
 80088c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088c8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008a84 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80088cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088d0:	4b69      	ldr	r3, [pc, #420]	; (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088d8:	ee07 3a90 	vmov	s15, r3
 80088dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80088e4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008a80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008900:	e065      	b.n	80089ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	ee07 3a90 	vmov	s15, r3
 8008908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800890c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008a88 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008910:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008914:	4b58      	ldr	r3, [pc, #352]	; (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800891c:	ee07 3a90 	vmov	s15, r3
 8008920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008924:	ed97 6a03 	vldr	s12, [r7, #12]
 8008928:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008a80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800892c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008930:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008934:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008938:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800893c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008940:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008944:	e043      	b.n	80089ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	ee07 3a90 	vmov	s15, r3
 800894c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008950:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008a8c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008954:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008958:	4b47      	ldr	r3, [pc, #284]	; (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800895a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800895c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008960:	ee07 3a90 	vmov	s15, r3
 8008964:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008968:	ed97 6a03 	vldr	s12, [r7, #12]
 800896c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008a80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008970:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008974:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008978:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800897c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008984:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008988:	e021      	b.n	80089ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	ee07 3a90 	vmov	s15, r3
 8008990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008994:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008a84 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008998:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800899c:	4b36      	ldr	r3, [pc, #216]	; (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800899e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089a4:	ee07 3a90 	vmov	s15, r3
 80089a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80089b0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008a80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80089b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089cc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80089ce:	4b2a      	ldr	r3, [pc, #168]	; (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d2:	0a5b      	lsrs	r3, r3, #9
 80089d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089d8:	ee07 3a90 	vmov	s15, r3
 80089dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80089ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089f4:	ee17 2a90 	vmov	r2, s15
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80089fc:	4b1e      	ldr	r3, [pc, #120]	; (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a00:	0c1b      	lsrs	r3, r3, #16
 8008a02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a06:	ee07 3a90 	vmov	s15, r3
 8008a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a16:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a22:	ee17 2a90 	vmov	r2, s15
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008a2a:	4b13      	ldr	r3, [pc, #76]	; (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a2e:	0e1b      	lsrs	r3, r3, #24
 8008a30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a34:	ee07 3a90 	vmov	s15, r3
 8008a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a44:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a50:	ee17 2a90 	vmov	r2, s15
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008a58:	e008      	b.n	8008a6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	609a      	str	r2, [r3, #8]
}
 8008a6c:	bf00      	nop
 8008a6e:	3724      	adds	r7, #36	; 0x24
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr
 8008a78:	58024400 	.word	0x58024400
 8008a7c:	03d09000 	.word	0x03d09000
 8008a80:	46000000 	.word	0x46000000
 8008a84:	4c742400 	.word	0x4c742400
 8008a88:	4a742400 	.word	0x4a742400
 8008a8c:	4af42400 	.word	0x4af42400

08008a90 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a9e:	4b53      	ldr	r3, [pc, #332]	; (8008bec <RCCEx_PLL2_Config+0x15c>)
 8008aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa2:	f003 0303 	and.w	r3, r3, #3
 8008aa6:	2b03      	cmp	r3, #3
 8008aa8:	d101      	bne.n	8008aae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e099      	b.n	8008be2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008aae:	4b4f      	ldr	r3, [pc, #316]	; (8008bec <RCCEx_PLL2_Config+0x15c>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a4e      	ldr	r2, [pc, #312]	; (8008bec <RCCEx_PLL2_Config+0x15c>)
 8008ab4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ab8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008aba:	f7f9 fd4b 	bl	8002554 <HAL_GetTick>
 8008abe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ac0:	e008      	b.n	8008ad4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008ac2:	f7f9 fd47 	bl	8002554 <HAL_GetTick>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	1ad3      	subs	r3, r2, r3
 8008acc:	2b02      	cmp	r3, #2
 8008ace:	d901      	bls.n	8008ad4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	e086      	b.n	8008be2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ad4:	4b45      	ldr	r3, [pc, #276]	; (8008bec <RCCEx_PLL2_Config+0x15c>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1f0      	bne.n	8008ac2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008ae0:	4b42      	ldr	r3, [pc, #264]	; (8008bec <RCCEx_PLL2_Config+0x15c>)
 8008ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	031b      	lsls	r3, r3, #12
 8008aee:	493f      	ldr	r1, [pc, #252]	; (8008bec <RCCEx_PLL2_Config+0x15c>)
 8008af0:	4313      	orrs	r3, r2
 8008af2:	628b      	str	r3, [r1, #40]	; 0x28
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	3b01      	subs	r3, #1
 8008afa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	3b01      	subs	r3, #1
 8008b04:	025b      	lsls	r3, r3, #9
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	431a      	orrs	r2, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	041b      	lsls	r3, r3, #16
 8008b12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008b16:	431a      	orrs	r2, r3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	691b      	ldr	r3, [r3, #16]
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	061b      	lsls	r3, r3, #24
 8008b20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008b24:	4931      	ldr	r1, [pc, #196]	; (8008bec <RCCEx_PLL2_Config+0x15c>)
 8008b26:	4313      	orrs	r3, r2
 8008b28:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008b2a:	4b30      	ldr	r3, [pc, #192]	; (8008bec <RCCEx_PLL2_Config+0x15c>)
 8008b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	695b      	ldr	r3, [r3, #20]
 8008b36:	492d      	ldr	r1, [pc, #180]	; (8008bec <RCCEx_PLL2_Config+0x15c>)
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008b3c:	4b2b      	ldr	r3, [pc, #172]	; (8008bec <RCCEx_PLL2_Config+0x15c>)
 8008b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b40:	f023 0220 	bic.w	r2, r3, #32
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	699b      	ldr	r3, [r3, #24]
 8008b48:	4928      	ldr	r1, [pc, #160]	; (8008bec <RCCEx_PLL2_Config+0x15c>)
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008b4e:	4b27      	ldr	r3, [pc, #156]	; (8008bec <RCCEx_PLL2_Config+0x15c>)
 8008b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b52:	4a26      	ldr	r2, [pc, #152]	; (8008bec <RCCEx_PLL2_Config+0x15c>)
 8008b54:	f023 0310 	bic.w	r3, r3, #16
 8008b58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008b5a:	4b24      	ldr	r3, [pc, #144]	; (8008bec <RCCEx_PLL2_Config+0x15c>)
 8008b5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b5e:	4b24      	ldr	r3, [pc, #144]	; (8008bf0 <RCCEx_PLL2_Config+0x160>)
 8008b60:	4013      	ands	r3, r2
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	69d2      	ldr	r2, [r2, #28]
 8008b66:	00d2      	lsls	r2, r2, #3
 8008b68:	4920      	ldr	r1, [pc, #128]	; (8008bec <RCCEx_PLL2_Config+0x15c>)
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008b6e:	4b1f      	ldr	r3, [pc, #124]	; (8008bec <RCCEx_PLL2_Config+0x15c>)
 8008b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b72:	4a1e      	ldr	r2, [pc, #120]	; (8008bec <RCCEx_PLL2_Config+0x15c>)
 8008b74:	f043 0310 	orr.w	r3, r3, #16
 8008b78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d106      	bne.n	8008b8e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008b80:	4b1a      	ldr	r3, [pc, #104]	; (8008bec <RCCEx_PLL2_Config+0x15c>)
 8008b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b84:	4a19      	ldr	r2, [pc, #100]	; (8008bec <RCCEx_PLL2_Config+0x15c>)
 8008b86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b8c:	e00f      	b.n	8008bae <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d106      	bne.n	8008ba2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008b94:	4b15      	ldr	r3, [pc, #84]	; (8008bec <RCCEx_PLL2_Config+0x15c>)
 8008b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b98:	4a14      	ldr	r2, [pc, #80]	; (8008bec <RCCEx_PLL2_Config+0x15c>)
 8008b9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ba0:	e005      	b.n	8008bae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008ba2:	4b12      	ldr	r3, [pc, #72]	; (8008bec <RCCEx_PLL2_Config+0x15c>)
 8008ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba6:	4a11      	ldr	r2, [pc, #68]	; (8008bec <RCCEx_PLL2_Config+0x15c>)
 8008ba8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008bac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008bae:	4b0f      	ldr	r3, [pc, #60]	; (8008bec <RCCEx_PLL2_Config+0x15c>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a0e      	ldr	r2, [pc, #56]	; (8008bec <RCCEx_PLL2_Config+0x15c>)
 8008bb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008bb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bba:	f7f9 fccb 	bl	8002554 <HAL_GetTick>
 8008bbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008bc0:	e008      	b.n	8008bd4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008bc2:	f7f9 fcc7 	bl	8002554 <HAL_GetTick>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	1ad3      	subs	r3, r2, r3
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	d901      	bls.n	8008bd4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	e006      	b.n	8008be2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008bd4:	4b05      	ldr	r3, [pc, #20]	; (8008bec <RCCEx_PLL2_Config+0x15c>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d0f0      	beq.n	8008bc2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	58024400 	.word	0x58024400
 8008bf0:	ffff0007 	.word	0xffff0007

08008bf4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c02:	4b53      	ldr	r3, [pc, #332]	; (8008d50 <RCCEx_PLL3_Config+0x15c>)
 8008c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c06:	f003 0303 	and.w	r3, r3, #3
 8008c0a:	2b03      	cmp	r3, #3
 8008c0c:	d101      	bne.n	8008c12 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e099      	b.n	8008d46 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008c12:	4b4f      	ldr	r3, [pc, #316]	; (8008d50 <RCCEx_PLL3_Config+0x15c>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a4e      	ldr	r2, [pc, #312]	; (8008d50 <RCCEx_PLL3_Config+0x15c>)
 8008c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c1e:	f7f9 fc99 	bl	8002554 <HAL_GetTick>
 8008c22:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c24:	e008      	b.n	8008c38 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008c26:	f7f9 fc95 	bl	8002554 <HAL_GetTick>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	1ad3      	subs	r3, r2, r3
 8008c30:	2b02      	cmp	r3, #2
 8008c32:	d901      	bls.n	8008c38 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c34:	2303      	movs	r3, #3
 8008c36:	e086      	b.n	8008d46 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c38:	4b45      	ldr	r3, [pc, #276]	; (8008d50 <RCCEx_PLL3_Config+0x15c>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d1f0      	bne.n	8008c26 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008c44:	4b42      	ldr	r3, [pc, #264]	; (8008d50 <RCCEx_PLL3_Config+0x15c>)
 8008c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c48:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	051b      	lsls	r3, r3, #20
 8008c52:	493f      	ldr	r1, [pc, #252]	; (8008d50 <RCCEx_PLL3_Config+0x15c>)
 8008c54:	4313      	orrs	r3, r2
 8008c56:	628b      	str	r3, [r1, #40]	; 0x28
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	3b01      	subs	r3, #1
 8008c5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	3b01      	subs	r3, #1
 8008c68:	025b      	lsls	r3, r3, #9
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	431a      	orrs	r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	3b01      	subs	r3, #1
 8008c74:	041b      	lsls	r3, r3, #16
 8008c76:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008c7a:	431a      	orrs	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	3b01      	subs	r3, #1
 8008c82:	061b      	lsls	r3, r3, #24
 8008c84:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008c88:	4931      	ldr	r1, [pc, #196]	; (8008d50 <RCCEx_PLL3_Config+0x15c>)
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008c8e:	4b30      	ldr	r3, [pc, #192]	; (8008d50 <RCCEx_PLL3_Config+0x15c>)
 8008c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	695b      	ldr	r3, [r3, #20]
 8008c9a:	492d      	ldr	r1, [pc, #180]	; (8008d50 <RCCEx_PLL3_Config+0x15c>)
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008ca0:	4b2b      	ldr	r3, [pc, #172]	; (8008d50 <RCCEx_PLL3_Config+0x15c>)
 8008ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	699b      	ldr	r3, [r3, #24]
 8008cac:	4928      	ldr	r1, [pc, #160]	; (8008d50 <RCCEx_PLL3_Config+0x15c>)
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008cb2:	4b27      	ldr	r3, [pc, #156]	; (8008d50 <RCCEx_PLL3_Config+0x15c>)
 8008cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb6:	4a26      	ldr	r2, [pc, #152]	; (8008d50 <RCCEx_PLL3_Config+0x15c>)
 8008cb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cbc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008cbe:	4b24      	ldr	r3, [pc, #144]	; (8008d50 <RCCEx_PLL3_Config+0x15c>)
 8008cc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cc2:	4b24      	ldr	r3, [pc, #144]	; (8008d54 <RCCEx_PLL3_Config+0x160>)
 8008cc4:	4013      	ands	r3, r2
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	69d2      	ldr	r2, [r2, #28]
 8008cca:	00d2      	lsls	r2, r2, #3
 8008ccc:	4920      	ldr	r1, [pc, #128]	; (8008d50 <RCCEx_PLL3_Config+0x15c>)
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008cd2:	4b1f      	ldr	r3, [pc, #124]	; (8008d50 <RCCEx_PLL3_Config+0x15c>)
 8008cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd6:	4a1e      	ldr	r2, [pc, #120]	; (8008d50 <RCCEx_PLL3_Config+0x15c>)
 8008cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cdc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d106      	bne.n	8008cf2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008ce4:	4b1a      	ldr	r3, [pc, #104]	; (8008d50 <RCCEx_PLL3_Config+0x15c>)
 8008ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce8:	4a19      	ldr	r2, [pc, #100]	; (8008d50 <RCCEx_PLL3_Config+0x15c>)
 8008cea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008cee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008cf0:	e00f      	b.n	8008d12 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d106      	bne.n	8008d06 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008cf8:	4b15      	ldr	r3, [pc, #84]	; (8008d50 <RCCEx_PLL3_Config+0x15c>)
 8008cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfc:	4a14      	ldr	r2, [pc, #80]	; (8008d50 <RCCEx_PLL3_Config+0x15c>)
 8008cfe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008d02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d04:	e005      	b.n	8008d12 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008d06:	4b12      	ldr	r3, [pc, #72]	; (8008d50 <RCCEx_PLL3_Config+0x15c>)
 8008d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0a:	4a11      	ldr	r2, [pc, #68]	; (8008d50 <RCCEx_PLL3_Config+0x15c>)
 8008d0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d10:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008d12:	4b0f      	ldr	r3, [pc, #60]	; (8008d50 <RCCEx_PLL3_Config+0x15c>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a0e      	ldr	r2, [pc, #56]	; (8008d50 <RCCEx_PLL3_Config+0x15c>)
 8008d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d1e:	f7f9 fc19 	bl	8002554 <HAL_GetTick>
 8008d22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d24:	e008      	b.n	8008d38 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008d26:	f7f9 fc15 	bl	8002554 <HAL_GetTick>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	1ad3      	subs	r3, r2, r3
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d901      	bls.n	8008d38 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d34:	2303      	movs	r3, #3
 8008d36:	e006      	b.n	8008d46 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d38:	4b05      	ldr	r3, [pc, #20]	; (8008d50 <RCCEx_PLL3_Config+0x15c>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d0f0      	beq.n	8008d26 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	58024400 	.word	0x58024400
 8008d54:	ffff0007 	.word	0xffff0007

08008d58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d101      	bne.n	8008d6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	e049      	b.n	8008dfe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d106      	bne.n	8008d84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f7f9 f88a 	bl	8001e98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2202      	movs	r2, #2
 8008d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	3304      	adds	r3, #4
 8008d94:	4619      	mov	r1, r3
 8008d96:	4610      	mov	r0, r2
 8008d98:	f000 fe1a 	bl	80099d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2201      	movs	r2, #1
 8008db0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2201      	movs	r2, #1
 8008de8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2201      	movs	r2, #1
 8008df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3708      	adds	r7, #8
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
	...

08008e08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d001      	beq.n	8008e20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e04c      	b.n	8008eba <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2202      	movs	r2, #2
 8008e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a26      	ldr	r2, [pc, #152]	; (8008ec8 <HAL_TIM_Base_Start+0xc0>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d022      	beq.n	8008e78 <HAL_TIM_Base_Start+0x70>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e3a:	d01d      	beq.n	8008e78 <HAL_TIM_Base_Start+0x70>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a22      	ldr	r2, [pc, #136]	; (8008ecc <HAL_TIM_Base_Start+0xc4>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d018      	beq.n	8008e78 <HAL_TIM_Base_Start+0x70>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a21      	ldr	r2, [pc, #132]	; (8008ed0 <HAL_TIM_Base_Start+0xc8>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d013      	beq.n	8008e78 <HAL_TIM_Base_Start+0x70>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a1f      	ldr	r2, [pc, #124]	; (8008ed4 <HAL_TIM_Base_Start+0xcc>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d00e      	beq.n	8008e78 <HAL_TIM_Base_Start+0x70>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a1e      	ldr	r2, [pc, #120]	; (8008ed8 <HAL_TIM_Base_Start+0xd0>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d009      	beq.n	8008e78 <HAL_TIM_Base_Start+0x70>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a1c      	ldr	r2, [pc, #112]	; (8008edc <HAL_TIM_Base_Start+0xd4>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d004      	beq.n	8008e78 <HAL_TIM_Base_Start+0x70>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a1b      	ldr	r2, [pc, #108]	; (8008ee0 <HAL_TIM_Base_Start+0xd8>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d115      	bne.n	8008ea4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	689a      	ldr	r2, [r3, #8]
 8008e7e:	4b19      	ldr	r3, [pc, #100]	; (8008ee4 <HAL_TIM_Base_Start+0xdc>)
 8008e80:	4013      	ands	r3, r2
 8008e82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2b06      	cmp	r3, #6
 8008e88:	d015      	beq.n	8008eb6 <HAL_TIM_Base_Start+0xae>
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e90:	d011      	beq.n	8008eb6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f042 0201 	orr.w	r2, r2, #1
 8008ea0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ea2:	e008      	b.n	8008eb6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f042 0201 	orr.w	r2, r2, #1
 8008eb2:	601a      	str	r2, [r3, #0]
 8008eb4:	e000      	b.n	8008eb8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3714      	adds	r7, #20
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	40010000 	.word	0x40010000
 8008ecc:	40000400 	.word	0x40000400
 8008ed0:	40000800 	.word	0x40000800
 8008ed4:	40000c00 	.word	0x40000c00
 8008ed8:	40010400 	.word	0x40010400
 8008edc:	40001800 	.word	0x40001800
 8008ee0:	40014000 	.word	0x40014000
 8008ee4:	00010007 	.word	0x00010007

08008ee8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d101      	bne.n	8008efa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e049      	b.n	8008f8e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d106      	bne.n	8008f14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 f841 	bl	8008f96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2202      	movs	r2, #2
 8008f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	3304      	adds	r3, #4
 8008f24:	4619      	mov	r1, r3
 8008f26:	4610      	mov	r0, r2
 8008f28:	f000 fd52 	bl	80099d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2201      	movs	r2, #1
 8008f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008f96:	b480      	push	{r7}
 8008f98:	b083      	sub	sp, #12
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008f9e:	bf00      	nop
 8008fa0:	370c      	adds	r7, #12
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr
	...

08008fac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d109      	bne.n	8008fd0 <HAL_TIM_PWM_Start+0x24>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	bf14      	ite	ne
 8008fc8:	2301      	movne	r3, #1
 8008fca:	2300      	moveq	r3, #0
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	e03c      	b.n	800904a <HAL_TIM_PWM_Start+0x9e>
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	2b04      	cmp	r3, #4
 8008fd4:	d109      	bne.n	8008fea <HAL_TIM_PWM_Start+0x3e>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	bf14      	ite	ne
 8008fe2:	2301      	movne	r3, #1
 8008fe4:	2300      	moveq	r3, #0
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	e02f      	b.n	800904a <HAL_TIM_PWM_Start+0x9e>
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	2b08      	cmp	r3, #8
 8008fee:	d109      	bne.n	8009004 <HAL_TIM_PWM_Start+0x58>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	bf14      	ite	ne
 8008ffc:	2301      	movne	r3, #1
 8008ffe:	2300      	moveq	r3, #0
 8009000:	b2db      	uxtb	r3, r3
 8009002:	e022      	b.n	800904a <HAL_TIM_PWM_Start+0x9e>
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	2b0c      	cmp	r3, #12
 8009008:	d109      	bne.n	800901e <HAL_TIM_PWM_Start+0x72>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009010:	b2db      	uxtb	r3, r3
 8009012:	2b01      	cmp	r3, #1
 8009014:	bf14      	ite	ne
 8009016:	2301      	movne	r3, #1
 8009018:	2300      	moveq	r3, #0
 800901a:	b2db      	uxtb	r3, r3
 800901c:	e015      	b.n	800904a <HAL_TIM_PWM_Start+0x9e>
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	2b10      	cmp	r3, #16
 8009022:	d109      	bne.n	8009038 <HAL_TIM_PWM_Start+0x8c>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800902a:	b2db      	uxtb	r3, r3
 800902c:	2b01      	cmp	r3, #1
 800902e:	bf14      	ite	ne
 8009030:	2301      	movne	r3, #1
 8009032:	2300      	moveq	r3, #0
 8009034:	b2db      	uxtb	r3, r3
 8009036:	e008      	b.n	800904a <HAL_TIM_PWM_Start+0x9e>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800903e:	b2db      	uxtb	r3, r3
 8009040:	2b01      	cmp	r3, #1
 8009042:	bf14      	ite	ne
 8009044:	2301      	movne	r3, #1
 8009046:	2300      	moveq	r3, #0
 8009048:	b2db      	uxtb	r3, r3
 800904a:	2b00      	cmp	r3, #0
 800904c:	d001      	beq.n	8009052 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	e0a1      	b.n	8009196 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d104      	bne.n	8009062 <HAL_TIM_PWM_Start+0xb6>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2202      	movs	r2, #2
 800905c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009060:	e023      	b.n	80090aa <HAL_TIM_PWM_Start+0xfe>
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	2b04      	cmp	r3, #4
 8009066:	d104      	bne.n	8009072 <HAL_TIM_PWM_Start+0xc6>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2202      	movs	r2, #2
 800906c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009070:	e01b      	b.n	80090aa <HAL_TIM_PWM_Start+0xfe>
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	2b08      	cmp	r3, #8
 8009076:	d104      	bne.n	8009082 <HAL_TIM_PWM_Start+0xd6>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2202      	movs	r2, #2
 800907c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009080:	e013      	b.n	80090aa <HAL_TIM_PWM_Start+0xfe>
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	2b0c      	cmp	r3, #12
 8009086:	d104      	bne.n	8009092 <HAL_TIM_PWM_Start+0xe6>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2202      	movs	r2, #2
 800908c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009090:	e00b      	b.n	80090aa <HAL_TIM_PWM_Start+0xfe>
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	2b10      	cmp	r3, #16
 8009096:	d104      	bne.n	80090a2 <HAL_TIM_PWM_Start+0xf6>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2202      	movs	r2, #2
 800909c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090a0:	e003      	b.n	80090aa <HAL_TIM_PWM_Start+0xfe>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2202      	movs	r2, #2
 80090a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2201      	movs	r2, #1
 80090b0:	6839      	ldr	r1, [r7, #0]
 80090b2:	4618      	mov	r0, r3
 80090b4:	f001 f89a 	bl	800a1ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a38      	ldr	r2, [pc, #224]	; (80091a0 <HAL_TIM_PWM_Start+0x1f4>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d013      	beq.n	80090ea <HAL_TIM_PWM_Start+0x13e>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a37      	ldr	r2, [pc, #220]	; (80091a4 <HAL_TIM_PWM_Start+0x1f8>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d00e      	beq.n	80090ea <HAL_TIM_PWM_Start+0x13e>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a35      	ldr	r2, [pc, #212]	; (80091a8 <HAL_TIM_PWM_Start+0x1fc>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d009      	beq.n	80090ea <HAL_TIM_PWM_Start+0x13e>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a34      	ldr	r2, [pc, #208]	; (80091ac <HAL_TIM_PWM_Start+0x200>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d004      	beq.n	80090ea <HAL_TIM_PWM_Start+0x13e>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a32      	ldr	r2, [pc, #200]	; (80091b0 <HAL_TIM_PWM_Start+0x204>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d101      	bne.n	80090ee <HAL_TIM_PWM_Start+0x142>
 80090ea:	2301      	movs	r3, #1
 80090ec:	e000      	b.n	80090f0 <HAL_TIM_PWM_Start+0x144>
 80090ee:	2300      	movs	r3, #0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d007      	beq.n	8009104 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009102:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a25      	ldr	r2, [pc, #148]	; (80091a0 <HAL_TIM_PWM_Start+0x1f4>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d022      	beq.n	8009154 <HAL_TIM_PWM_Start+0x1a8>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009116:	d01d      	beq.n	8009154 <HAL_TIM_PWM_Start+0x1a8>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a25      	ldr	r2, [pc, #148]	; (80091b4 <HAL_TIM_PWM_Start+0x208>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d018      	beq.n	8009154 <HAL_TIM_PWM_Start+0x1a8>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a24      	ldr	r2, [pc, #144]	; (80091b8 <HAL_TIM_PWM_Start+0x20c>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d013      	beq.n	8009154 <HAL_TIM_PWM_Start+0x1a8>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a22      	ldr	r2, [pc, #136]	; (80091bc <HAL_TIM_PWM_Start+0x210>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d00e      	beq.n	8009154 <HAL_TIM_PWM_Start+0x1a8>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a1a      	ldr	r2, [pc, #104]	; (80091a4 <HAL_TIM_PWM_Start+0x1f8>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d009      	beq.n	8009154 <HAL_TIM_PWM_Start+0x1a8>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a1e      	ldr	r2, [pc, #120]	; (80091c0 <HAL_TIM_PWM_Start+0x214>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d004      	beq.n	8009154 <HAL_TIM_PWM_Start+0x1a8>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a16      	ldr	r2, [pc, #88]	; (80091a8 <HAL_TIM_PWM_Start+0x1fc>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d115      	bne.n	8009180 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	689a      	ldr	r2, [r3, #8]
 800915a:	4b1a      	ldr	r3, [pc, #104]	; (80091c4 <HAL_TIM_PWM_Start+0x218>)
 800915c:	4013      	ands	r3, r2
 800915e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2b06      	cmp	r3, #6
 8009164:	d015      	beq.n	8009192 <HAL_TIM_PWM_Start+0x1e6>
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800916c:	d011      	beq.n	8009192 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f042 0201 	orr.w	r2, r2, #1
 800917c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800917e:	e008      	b.n	8009192 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f042 0201 	orr.w	r2, r2, #1
 800918e:	601a      	str	r2, [r3, #0]
 8009190:	e000      	b.n	8009194 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009192:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009194:	2300      	movs	r3, #0
}
 8009196:	4618      	mov	r0, r3
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	40010000 	.word	0x40010000
 80091a4:	40010400 	.word	0x40010400
 80091a8:	40014000 	.word	0x40014000
 80091ac:	40014400 	.word	0x40014400
 80091b0:	40014800 	.word	0x40014800
 80091b4:	40000400 	.word	0x40000400
 80091b8:	40000800 	.word	0x40000800
 80091bc:	40000c00 	.word	0x40000c00
 80091c0:	40001800 	.word	0x40001800
 80091c4:	00010007 	.word	0x00010007

080091c8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b086      	sub	sp, #24
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d101      	bne.n	80091dc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80091d8:	2301      	movs	r3, #1
 80091da:	e08f      	b.n	80092fc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d106      	bne.n	80091f6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f7f8 fe01 	bl	8001df8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2202      	movs	r2, #2
 80091fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	6899      	ldr	r1, [r3, #8]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	4b3e      	ldr	r3, [pc, #248]	; (8009304 <HAL_TIM_Encoder_Init+0x13c>)
 800920a:	400b      	ands	r3, r1
 800920c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	3304      	adds	r3, #4
 8009216:	4619      	mov	r1, r3
 8009218:	4610      	mov	r0, r2
 800921a:	f000 fbd9 	bl	80099d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	699b      	ldr	r3, [r3, #24]
 800922c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	6a1b      	ldr	r3, [r3, #32]
 8009234:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	697a      	ldr	r2, [r7, #20]
 800923c:	4313      	orrs	r3, r2
 800923e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009240:	693a      	ldr	r2, [r7, #16]
 8009242:	4b31      	ldr	r3, [pc, #196]	; (8009308 <HAL_TIM_Encoder_Init+0x140>)
 8009244:	4013      	ands	r3, r2
 8009246:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	689a      	ldr	r2, [r3, #8]
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	699b      	ldr	r3, [r3, #24]
 8009250:	021b      	lsls	r3, r3, #8
 8009252:	4313      	orrs	r3, r2
 8009254:	693a      	ldr	r2, [r7, #16]
 8009256:	4313      	orrs	r3, r2
 8009258:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800925a:	693a      	ldr	r2, [r7, #16]
 800925c:	4b2b      	ldr	r3, [pc, #172]	; (800930c <HAL_TIM_Encoder_Init+0x144>)
 800925e:	4013      	ands	r3, r2
 8009260:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009262:	693a      	ldr	r2, [r7, #16]
 8009264:	4b2a      	ldr	r3, [pc, #168]	; (8009310 <HAL_TIM_Encoder_Init+0x148>)
 8009266:	4013      	ands	r3, r2
 8009268:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	68da      	ldr	r2, [r3, #12]
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	69db      	ldr	r3, [r3, #28]
 8009272:	021b      	lsls	r3, r3, #8
 8009274:	4313      	orrs	r3, r2
 8009276:	693a      	ldr	r2, [r7, #16]
 8009278:	4313      	orrs	r3, r2
 800927a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	011a      	lsls	r2, r3, #4
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	6a1b      	ldr	r3, [r3, #32]
 8009286:	031b      	lsls	r3, r3, #12
 8009288:	4313      	orrs	r3, r2
 800928a:	693a      	ldr	r2, [r7, #16]
 800928c:	4313      	orrs	r3, r2
 800928e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009296:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800929e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	685a      	ldr	r2, [r3, #4]
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	695b      	ldr	r3, [r3, #20]
 80092a8:	011b      	lsls	r3, r3, #4
 80092aa:	4313      	orrs	r3, r2
 80092ac:	68fa      	ldr	r2, [r7, #12]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	697a      	ldr	r2, [r7, #20]
 80092b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	693a      	ldr	r2, [r7, #16]
 80092c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2201      	movs	r2, #1
 80092ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2201      	movs	r2, #1
 80092de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2201      	movs	r2, #1
 80092e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2201      	movs	r2, #1
 80092ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2201      	movs	r2, #1
 80092f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092fa:	2300      	movs	r3, #0
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3718      	adds	r7, #24
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	fffebff8 	.word	0xfffebff8
 8009308:	fffffcfc 	.word	0xfffffcfc
 800930c:	fffff3f3 	.word	0xfffff3f3
 8009310:	ffff0f0f 	.word	0xffff0f0f

08009314 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	691b      	ldr	r3, [r3, #16]
 8009322:	f003 0302 	and.w	r3, r3, #2
 8009326:	2b02      	cmp	r3, #2
 8009328:	d122      	bne.n	8009370 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	f003 0302 	and.w	r3, r3, #2
 8009334:	2b02      	cmp	r3, #2
 8009336:	d11b      	bne.n	8009370 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f06f 0202 	mvn.w	r2, #2
 8009340:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2201      	movs	r2, #1
 8009346:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	699b      	ldr	r3, [r3, #24]
 800934e:	f003 0303 	and.w	r3, r3, #3
 8009352:	2b00      	cmp	r3, #0
 8009354:	d003      	beq.n	800935e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fb1c 	bl	8009994 <HAL_TIM_IC_CaptureCallback>
 800935c:	e005      	b.n	800936a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 fb0e 	bl	8009980 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 fb1f 	bl	80099a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	f003 0304 	and.w	r3, r3, #4
 800937a:	2b04      	cmp	r3, #4
 800937c:	d122      	bne.n	80093c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	f003 0304 	and.w	r3, r3, #4
 8009388:	2b04      	cmp	r3, #4
 800938a:	d11b      	bne.n	80093c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f06f 0204 	mvn.w	r2, #4
 8009394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2202      	movs	r2, #2
 800939a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	699b      	ldr	r3, [r3, #24]
 80093a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d003      	beq.n	80093b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 faf2 	bl	8009994 <HAL_TIM_IC_CaptureCallback>
 80093b0:	e005      	b.n	80093be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 fae4 	bl	8009980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 faf5 	bl	80099a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	f003 0308 	and.w	r3, r3, #8
 80093ce:	2b08      	cmp	r3, #8
 80093d0:	d122      	bne.n	8009418 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	f003 0308 	and.w	r3, r3, #8
 80093dc:	2b08      	cmp	r3, #8
 80093de:	d11b      	bne.n	8009418 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f06f 0208 	mvn.w	r2, #8
 80093e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2204      	movs	r2, #4
 80093ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	69db      	ldr	r3, [r3, #28]
 80093f6:	f003 0303 	and.w	r3, r3, #3
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d003      	beq.n	8009406 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 fac8 	bl	8009994 <HAL_TIM_IC_CaptureCallback>
 8009404:	e005      	b.n	8009412 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 faba 	bl	8009980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 facb 	bl	80099a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	f003 0310 	and.w	r3, r3, #16
 8009422:	2b10      	cmp	r3, #16
 8009424:	d122      	bne.n	800946c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	f003 0310 	and.w	r3, r3, #16
 8009430:	2b10      	cmp	r3, #16
 8009432:	d11b      	bne.n	800946c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f06f 0210 	mvn.w	r2, #16
 800943c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2208      	movs	r2, #8
 8009442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	69db      	ldr	r3, [r3, #28]
 800944a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800944e:	2b00      	cmp	r3, #0
 8009450:	d003      	beq.n	800945a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 fa9e 	bl	8009994 <HAL_TIM_IC_CaptureCallback>
 8009458:	e005      	b.n	8009466 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 fa90 	bl	8009980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 faa1 	bl	80099a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	f003 0301 	and.w	r3, r3, #1
 8009476:	2b01      	cmp	r3, #1
 8009478:	d10e      	bne.n	8009498 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	f003 0301 	and.w	r3, r3, #1
 8009484:	2b01      	cmp	r3, #1
 8009486:	d107      	bne.n	8009498 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f06f 0201 	mvn.w	r2, #1
 8009490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 fa6a 	bl	800996c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	691b      	ldr	r3, [r3, #16]
 800949e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094a2:	2b80      	cmp	r3, #128	; 0x80
 80094a4:	d10e      	bne.n	80094c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094b0:	2b80      	cmp	r3, #128	; 0x80
 80094b2:	d107      	bne.n	80094c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80094bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 ff52 	bl	800a368 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094d2:	d10e      	bne.n	80094f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094de:	2b80      	cmp	r3, #128	; 0x80
 80094e0:	d107      	bne.n	80094f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80094ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 ff45 	bl	800a37c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	691b      	ldr	r3, [r3, #16]
 80094f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094fc:	2b40      	cmp	r3, #64	; 0x40
 80094fe:	d10e      	bne.n	800951e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800950a:	2b40      	cmp	r3, #64	; 0x40
 800950c:	d107      	bne.n	800951e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fa4f 	bl	80099bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	691b      	ldr	r3, [r3, #16]
 8009524:	f003 0320 	and.w	r3, r3, #32
 8009528:	2b20      	cmp	r3, #32
 800952a:	d10e      	bne.n	800954a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	f003 0320 	and.w	r3, r3, #32
 8009536:	2b20      	cmp	r3, #32
 8009538:	d107      	bne.n	800954a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f06f 0220 	mvn.w	r2, #32
 8009542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 ff05 	bl	800a354 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800954a:	bf00      	nop
 800954c:	3708      	adds	r7, #8
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
	...

08009554 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b086      	sub	sp, #24
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009560:	2300      	movs	r3, #0
 8009562:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800956a:	2b01      	cmp	r3, #1
 800956c:	d101      	bne.n	8009572 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800956e:	2302      	movs	r3, #2
 8009570:	e0ff      	b.n	8009772 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2201      	movs	r2, #1
 8009576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2b14      	cmp	r3, #20
 800957e:	f200 80f0 	bhi.w	8009762 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009582:	a201      	add	r2, pc, #4	; (adr r2, 8009588 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009588:	080095dd 	.word	0x080095dd
 800958c:	08009763 	.word	0x08009763
 8009590:	08009763 	.word	0x08009763
 8009594:	08009763 	.word	0x08009763
 8009598:	0800961d 	.word	0x0800961d
 800959c:	08009763 	.word	0x08009763
 80095a0:	08009763 	.word	0x08009763
 80095a4:	08009763 	.word	0x08009763
 80095a8:	0800965f 	.word	0x0800965f
 80095ac:	08009763 	.word	0x08009763
 80095b0:	08009763 	.word	0x08009763
 80095b4:	08009763 	.word	0x08009763
 80095b8:	0800969f 	.word	0x0800969f
 80095bc:	08009763 	.word	0x08009763
 80095c0:	08009763 	.word	0x08009763
 80095c4:	08009763 	.word	0x08009763
 80095c8:	080096e1 	.word	0x080096e1
 80095cc:	08009763 	.word	0x08009763
 80095d0:	08009763 	.word	0x08009763
 80095d4:	08009763 	.word	0x08009763
 80095d8:	08009721 	.word	0x08009721
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	68b9      	ldr	r1, [r7, #8]
 80095e2:	4618      	mov	r0, r3
 80095e4:	f000 fa8e 	bl	8009b04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	699a      	ldr	r2, [r3, #24]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f042 0208 	orr.w	r2, r2, #8
 80095f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	699a      	ldr	r2, [r3, #24]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f022 0204 	bic.w	r2, r2, #4
 8009606:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	6999      	ldr	r1, [r3, #24]
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	691a      	ldr	r2, [r3, #16]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	430a      	orrs	r2, r1
 8009618:	619a      	str	r2, [r3, #24]
      break;
 800961a:	e0a5      	b.n	8009768 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	68b9      	ldr	r1, [r7, #8]
 8009622:	4618      	mov	r0, r3
 8009624:	f000 fafe 	bl	8009c24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	699a      	ldr	r2, [r3, #24]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009636:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	699a      	ldr	r2, [r3, #24]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009646:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	6999      	ldr	r1, [r3, #24]
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	021a      	lsls	r2, r3, #8
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	430a      	orrs	r2, r1
 800965a:	619a      	str	r2, [r3, #24]
      break;
 800965c:	e084      	b.n	8009768 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	68b9      	ldr	r1, [r7, #8]
 8009664:	4618      	mov	r0, r3
 8009666:	f000 fb67 	bl	8009d38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	69da      	ldr	r2, [r3, #28]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f042 0208 	orr.w	r2, r2, #8
 8009678:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	69da      	ldr	r2, [r3, #28]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f022 0204 	bic.w	r2, r2, #4
 8009688:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	69d9      	ldr	r1, [r3, #28]
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	691a      	ldr	r2, [r3, #16]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	430a      	orrs	r2, r1
 800969a:	61da      	str	r2, [r3, #28]
      break;
 800969c:	e064      	b.n	8009768 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	68b9      	ldr	r1, [r7, #8]
 80096a4:	4618      	mov	r0, r3
 80096a6:	f000 fbcf 	bl	8009e48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	69da      	ldr	r2, [r3, #28]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	69da      	ldr	r2, [r3, #28]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	69d9      	ldr	r1, [r3, #28]
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	691b      	ldr	r3, [r3, #16]
 80096d4:	021a      	lsls	r2, r3, #8
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	430a      	orrs	r2, r1
 80096dc:	61da      	str	r2, [r3, #28]
      break;
 80096de:	e043      	b.n	8009768 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68b9      	ldr	r1, [r7, #8]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f000 fc18 	bl	8009f1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f042 0208 	orr.w	r2, r2, #8
 80096fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f022 0204 	bic.w	r2, r2, #4
 800970a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	691a      	ldr	r2, [r3, #16]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	430a      	orrs	r2, r1
 800971c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800971e:	e023      	b.n	8009768 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	68b9      	ldr	r1, [r7, #8]
 8009726:	4618      	mov	r0, r3
 8009728:	f000 fc5c 	bl	8009fe4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800973a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800974a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	691b      	ldr	r3, [r3, #16]
 8009756:	021a      	lsls	r2, r3, #8
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	430a      	orrs	r2, r1
 800975e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009760:	e002      	b.n	8009768 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	75fb      	strb	r3, [r7, #23]
      break;
 8009766:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2200      	movs	r2, #0
 800976c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009770:	7dfb      	ldrb	r3, [r7, #23]
}
 8009772:	4618      	mov	r0, r3
 8009774:	3718      	adds	r7, #24
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop

0800977c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009786:	2300      	movs	r3, #0
 8009788:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009790:	2b01      	cmp	r3, #1
 8009792:	d101      	bne.n	8009798 <HAL_TIM_ConfigClockSource+0x1c>
 8009794:	2302      	movs	r3, #2
 8009796:	e0dc      	b.n	8009952 <HAL_TIM_ConfigClockSource+0x1d6>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2202      	movs	r2, #2
 80097a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80097b0:	68ba      	ldr	r2, [r7, #8]
 80097b2:	4b6a      	ldr	r3, [pc, #424]	; (800995c <HAL_TIM_ConfigClockSource+0x1e0>)
 80097b4:	4013      	ands	r3, r2
 80097b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80097be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	68ba      	ldr	r2, [r7, #8]
 80097c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a64      	ldr	r2, [pc, #400]	; (8009960 <HAL_TIM_ConfigClockSource+0x1e4>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	f000 80a9 	beq.w	8009926 <HAL_TIM_ConfigClockSource+0x1aa>
 80097d4:	4a62      	ldr	r2, [pc, #392]	; (8009960 <HAL_TIM_ConfigClockSource+0x1e4>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	f200 80ae 	bhi.w	8009938 <HAL_TIM_ConfigClockSource+0x1bc>
 80097dc:	4a61      	ldr	r2, [pc, #388]	; (8009964 <HAL_TIM_ConfigClockSource+0x1e8>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	f000 80a1 	beq.w	8009926 <HAL_TIM_ConfigClockSource+0x1aa>
 80097e4:	4a5f      	ldr	r2, [pc, #380]	; (8009964 <HAL_TIM_ConfigClockSource+0x1e8>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	f200 80a6 	bhi.w	8009938 <HAL_TIM_ConfigClockSource+0x1bc>
 80097ec:	4a5e      	ldr	r2, [pc, #376]	; (8009968 <HAL_TIM_ConfigClockSource+0x1ec>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	f000 8099 	beq.w	8009926 <HAL_TIM_ConfigClockSource+0x1aa>
 80097f4:	4a5c      	ldr	r2, [pc, #368]	; (8009968 <HAL_TIM_ConfigClockSource+0x1ec>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	f200 809e 	bhi.w	8009938 <HAL_TIM_ConfigClockSource+0x1bc>
 80097fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009800:	f000 8091 	beq.w	8009926 <HAL_TIM_ConfigClockSource+0x1aa>
 8009804:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009808:	f200 8096 	bhi.w	8009938 <HAL_TIM_ConfigClockSource+0x1bc>
 800980c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009810:	f000 8089 	beq.w	8009926 <HAL_TIM_ConfigClockSource+0x1aa>
 8009814:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009818:	f200 808e 	bhi.w	8009938 <HAL_TIM_ConfigClockSource+0x1bc>
 800981c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009820:	d03e      	beq.n	80098a0 <HAL_TIM_ConfigClockSource+0x124>
 8009822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009826:	f200 8087 	bhi.w	8009938 <HAL_TIM_ConfigClockSource+0x1bc>
 800982a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800982e:	f000 8086 	beq.w	800993e <HAL_TIM_ConfigClockSource+0x1c2>
 8009832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009836:	d87f      	bhi.n	8009938 <HAL_TIM_ConfigClockSource+0x1bc>
 8009838:	2b70      	cmp	r3, #112	; 0x70
 800983a:	d01a      	beq.n	8009872 <HAL_TIM_ConfigClockSource+0xf6>
 800983c:	2b70      	cmp	r3, #112	; 0x70
 800983e:	d87b      	bhi.n	8009938 <HAL_TIM_ConfigClockSource+0x1bc>
 8009840:	2b60      	cmp	r3, #96	; 0x60
 8009842:	d050      	beq.n	80098e6 <HAL_TIM_ConfigClockSource+0x16a>
 8009844:	2b60      	cmp	r3, #96	; 0x60
 8009846:	d877      	bhi.n	8009938 <HAL_TIM_ConfigClockSource+0x1bc>
 8009848:	2b50      	cmp	r3, #80	; 0x50
 800984a:	d03c      	beq.n	80098c6 <HAL_TIM_ConfigClockSource+0x14a>
 800984c:	2b50      	cmp	r3, #80	; 0x50
 800984e:	d873      	bhi.n	8009938 <HAL_TIM_ConfigClockSource+0x1bc>
 8009850:	2b40      	cmp	r3, #64	; 0x40
 8009852:	d058      	beq.n	8009906 <HAL_TIM_ConfigClockSource+0x18a>
 8009854:	2b40      	cmp	r3, #64	; 0x40
 8009856:	d86f      	bhi.n	8009938 <HAL_TIM_ConfigClockSource+0x1bc>
 8009858:	2b30      	cmp	r3, #48	; 0x30
 800985a:	d064      	beq.n	8009926 <HAL_TIM_ConfigClockSource+0x1aa>
 800985c:	2b30      	cmp	r3, #48	; 0x30
 800985e:	d86b      	bhi.n	8009938 <HAL_TIM_ConfigClockSource+0x1bc>
 8009860:	2b20      	cmp	r3, #32
 8009862:	d060      	beq.n	8009926 <HAL_TIM_ConfigClockSource+0x1aa>
 8009864:	2b20      	cmp	r3, #32
 8009866:	d867      	bhi.n	8009938 <HAL_TIM_ConfigClockSource+0x1bc>
 8009868:	2b00      	cmp	r3, #0
 800986a:	d05c      	beq.n	8009926 <HAL_TIM_ConfigClockSource+0x1aa>
 800986c:	2b10      	cmp	r3, #16
 800986e:	d05a      	beq.n	8009926 <HAL_TIM_ConfigClockSource+0x1aa>
 8009870:	e062      	b.n	8009938 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009882:	f000 fc93 	bl	800a1ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009894:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	68ba      	ldr	r2, [r7, #8]
 800989c:	609a      	str	r2, [r3, #8]
      break;
 800989e:	e04f      	b.n	8009940 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80098b0:	f000 fc7c 	bl	800a1ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	689a      	ldr	r2, [r3, #8]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80098c2:	609a      	str	r2, [r3, #8]
      break;
 80098c4:	e03c      	b.n	8009940 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80098d2:	461a      	mov	r2, r3
 80098d4:	f000 fbec 	bl	800a0b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2150      	movs	r1, #80	; 0x50
 80098de:	4618      	mov	r0, r3
 80098e0:	f000 fc46 	bl	800a170 <TIM_ITRx_SetConfig>
      break;
 80098e4:	e02c      	b.n	8009940 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80098f2:	461a      	mov	r2, r3
 80098f4:	f000 fc0b 	bl	800a10e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2160      	movs	r1, #96	; 0x60
 80098fe:	4618      	mov	r0, r3
 8009900:	f000 fc36 	bl	800a170 <TIM_ITRx_SetConfig>
      break;
 8009904:	e01c      	b.n	8009940 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009912:	461a      	mov	r2, r3
 8009914:	f000 fbcc 	bl	800a0b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2140      	movs	r1, #64	; 0x40
 800991e:	4618      	mov	r0, r3
 8009920:	f000 fc26 	bl	800a170 <TIM_ITRx_SetConfig>
      break;
 8009924:	e00c      	b.n	8009940 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4619      	mov	r1, r3
 8009930:	4610      	mov	r0, r2
 8009932:	f000 fc1d 	bl	800a170 <TIM_ITRx_SetConfig>
      break;
 8009936:	e003      	b.n	8009940 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009938:	2301      	movs	r3, #1
 800993a:	73fb      	strb	r3, [r7, #15]
      break;
 800993c:	e000      	b.n	8009940 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800993e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009950:	7bfb      	ldrb	r3, [r7, #15]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	ffceff88 	.word	0xffceff88
 8009960:	00100040 	.word	0x00100040
 8009964:	00100030 	.word	0x00100030
 8009968:	00100020 	.word	0x00100020

0800996c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009974:	bf00      	nop
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009988:	bf00      	nop
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800999c:	bf00      	nop
 800999e:	370c      	adds	r7, #12
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80099b0:	bf00      	nop
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80099c4:	bf00      	nop
 80099c6:	370c      	adds	r7, #12
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b085      	sub	sp, #20
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a40      	ldr	r2, [pc, #256]	; (8009ae4 <TIM_Base_SetConfig+0x114>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d013      	beq.n	8009a10 <TIM_Base_SetConfig+0x40>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099ee:	d00f      	beq.n	8009a10 <TIM_Base_SetConfig+0x40>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	4a3d      	ldr	r2, [pc, #244]	; (8009ae8 <TIM_Base_SetConfig+0x118>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d00b      	beq.n	8009a10 <TIM_Base_SetConfig+0x40>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	4a3c      	ldr	r2, [pc, #240]	; (8009aec <TIM_Base_SetConfig+0x11c>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d007      	beq.n	8009a10 <TIM_Base_SetConfig+0x40>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4a3b      	ldr	r2, [pc, #236]	; (8009af0 <TIM_Base_SetConfig+0x120>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d003      	beq.n	8009a10 <TIM_Base_SetConfig+0x40>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	4a3a      	ldr	r2, [pc, #232]	; (8009af4 <TIM_Base_SetConfig+0x124>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d108      	bne.n	8009a22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	68fa      	ldr	r2, [r7, #12]
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	4a2f      	ldr	r2, [pc, #188]	; (8009ae4 <TIM_Base_SetConfig+0x114>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d01f      	beq.n	8009a6a <TIM_Base_SetConfig+0x9a>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a30:	d01b      	beq.n	8009a6a <TIM_Base_SetConfig+0x9a>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	4a2c      	ldr	r2, [pc, #176]	; (8009ae8 <TIM_Base_SetConfig+0x118>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d017      	beq.n	8009a6a <TIM_Base_SetConfig+0x9a>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	4a2b      	ldr	r2, [pc, #172]	; (8009aec <TIM_Base_SetConfig+0x11c>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d013      	beq.n	8009a6a <TIM_Base_SetConfig+0x9a>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	4a2a      	ldr	r2, [pc, #168]	; (8009af0 <TIM_Base_SetConfig+0x120>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d00f      	beq.n	8009a6a <TIM_Base_SetConfig+0x9a>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	4a29      	ldr	r2, [pc, #164]	; (8009af4 <TIM_Base_SetConfig+0x124>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d00b      	beq.n	8009a6a <TIM_Base_SetConfig+0x9a>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	4a28      	ldr	r2, [pc, #160]	; (8009af8 <TIM_Base_SetConfig+0x128>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d007      	beq.n	8009a6a <TIM_Base_SetConfig+0x9a>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	4a27      	ldr	r2, [pc, #156]	; (8009afc <TIM_Base_SetConfig+0x12c>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d003      	beq.n	8009a6a <TIM_Base_SetConfig+0x9a>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	4a26      	ldr	r2, [pc, #152]	; (8009b00 <TIM_Base_SetConfig+0x130>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d108      	bne.n	8009a7c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	68fa      	ldr	r2, [r7, #12]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	695b      	ldr	r3, [r3, #20]
 8009a86:	4313      	orrs	r3, r2
 8009a88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	68fa      	ldr	r2, [r7, #12]
 8009a8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	689a      	ldr	r2, [r3, #8]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4a10      	ldr	r2, [pc, #64]	; (8009ae4 <TIM_Base_SetConfig+0x114>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d00f      	beq.n	8009ac8 <TIM_Base_SetConfig+0xf8>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4a12      	ldr	r2, [pc, #72]	; (8009af4 <TIM_Base_SetConfig+0x124>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d00b      	beq.n	8009ac8 <TIM_Base_SetConfig+0xf8>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	4a11      	ldr	r2, [pc, #68]	; (8009af8 <TIM_Base_SetConfig+0x128>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d007      	beq.n	8009ac8 <TIM_Base_SetConfig+0xf8>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	4a10      	ldr	r2, [pc, #64]	; (8009afc <TIM_Base_SetConfig+0x12c>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d003      	beq.n	8009ac8 <TIM_Base_SetConfig+0xf8>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	4a0f      	ldr	r2, [pc, #60]	; (8009b00 <TIM_Base_SetConfig+0x130>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d103      	bne.n	8009ad0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	691a      	ldr	r2, [r3, #16]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	615a      	str	r2, [r3, #20]
}
 8009ad6:	bf00      	nop
 8009ad8:	3714      	adds	r7, #20
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	40010000 	.word	0x40010000
 8009ae8:	40000400 	.word	0x40000400
 8009aec:	40000800 	.word	0x40000800
 8009af0:	40000c00 	.word	0x40000c00
 8009af4:	40010400 	.word	0x40010400
 8009af8:	40014000 	.word	0x40014000
 8009afc:	40014400 	.word	0x40014400
 8009b00:	40014800 	.word	0x40014800

08009b04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b087      	sub	sp, #28
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a1b      	ldr	r3, [r3, #32]
 8009b12:	f023 0201 	bic.w	r2, r3, #1
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a1b      	ldr	r3, [r3, #32]
 8009b1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	699b      	ldr	r3, [r3, #24]
 8009b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009b2c:	68fa      	ldr	r2, [r7, #12]
 8009b2e:	4b37      	ldr	r3, [pc, #220]	; (8009c0c <TIM_OC1_SetConfig+0x108>)
 8009b30:	4013      	ands	r3, r2
 8009b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f023 0303 	bic.w	r3, r3, #3
 8009b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	4313      	orrs	r3, r2
 8009b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	f023 0302 	bic.w	r3, r3, #2
 8009b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	697a      	ldr	r2, [r7, #20]
 8009b54:	4313      	orrs	r3, r2
 8009b56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a2d      	ldr	r2, [pc, #180]	; (8009c10 <TIM_OC1_SetConfig+0x10c>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d00f      	beq.n	8009b80 <TIM_OC1_SetConfig+0x7c>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a2c      	ldr	r2, [pc, #176]	; (8009c14 <TIM_OC1_SetConfig+0x110>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d00b      	beq.n	8009b80 <TIM_OC1_SetConfig+0x7c>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4a2b      	ldr	r2, [pc, #172]	; (8009c18 <TIM_OC1_SetConfig+0x114>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d007      	beq.n	8009b80 <TIM_OC1_SetConfig+0x7c>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	4a2a      	ldr	r2, [pc, #168]	; (8009c1c <TIM_OC1_SetConfig+0x118>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d003      	beq.n	8009b80 <TIM_OC1_SetConfig+0x7c>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	4a29      	ldr	r2, [pc, #164]	; (8009c20 <TIM_OC1_SetConfig+0x11c>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d10c      	bne.n	8009b9a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	f023 0308 	bic.w	r3, r3, #8
 8009b86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	697a      	ldr	r2, [r7, #20]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	f023 0304 	bic.w	r3, r3, #4
 8009b98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4a1c      	ldr	r2, [pc, #112]	; (8009c10 <TIM_OC1_SetConfig+0x10c>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d00f      	beq.n	8009bc2 <TIM_OC1_SetConfig+0xbe>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	4a1b      	ldr	r2, [pc, #108]	; (8009c14 <TIM_OC1_SetConfig+0x110>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d00b      	beq.n	8009bc2 <TIM_OC1_SetConfig+0xbe>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4a1a      	ldr	r2, [pc, #104]	; (8009c18 <TIM_OC1_SetConfig+0x114>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d007      	beq.n	8009bc2 <TIM_OC1_SetConfig+0xbe>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	4a19      	ldr	r2, [pc, #100]	; (8009c1c <TIM_OC1_SetConfig+0x118>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d003      	beq.n	8009bc2 <TIM_OC1_SetConfig+0xbe>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4a18      	ldr	r2, [pc, #96]	; (8009c20 <TIM_OC1_SetConfig+0x11c>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d111      	bne.n	8009be6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	695b      	ldr	r3, [r3, #20]
 8009bd6:	693a      	ldr	r2, [r7, #16]
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	699b      	ldr	r3, [r3, #24]
 8009be0:	693a      	ldr	r2, [r7, #16]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	693a      	ldr	r2, [r7, #16]
 8009bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	68fa      	ldr	r2, [r7, #12]
 8009bf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	685a      	ldr	r2, [r3, #4]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	697a      	ldr	r2, [r7, #20]
 8009bfe:	621a      	str	r2, [r3, #32]
}
 8009c00:	bf00      	nop
 8009c02:	371c      	adds	r7, #28
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr
 8009c0c:	fffeff8f 	.word	0xfffeff8f
 8009c10:	40010000 	.word	0x40010000
 8009c14:	40010400 	.word	0x40010400
 8009c18:	40014000 	.word	0x40014000
 8009c1c:	40014400 	.word	0x40014400
 8009c20:	40014800 	.word	0x40014800

08009c24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b087      	sub	sp, #28
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a1b      	ldr	r3, [r3, #32]
 8009c32:	f023 0210 	bic.w	r2, r3, #16
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6a1b      	ldr	r3, [r3, #32]
 8009c3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	699b      	ldr	r3, [r3, #24]
 8009c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009c4c:	68fa      	ldr	r2, [r7, #12]
 8009c4e:	4b34      	ldr	r3, [pc, #208]	; (8009d20 <TIM_OC2_SetConfig+0xfc>)
 8009c50:	4013      	ands	r3, r2
 8009c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	021b      	lsls	r3, r3, #8
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	4313      	orrs	r3, r2
 8009c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	f023 0320 	bic.w	r3, r3, #32
 8009c6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	011b      	lsls	r3, r3, #4
 8009c76:	697a      	ldr	r2, [r7, #20]
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4a29      	ldr	r2, [pc, #164]	; (8009d24 <TIM_OC2_SetConfig+0x100>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d003      	beq.n	8009c8c <TIM_OC2_SetConfig+0x68>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	4a28      	ldr	r2, [pc, #160]	; (8009d28 <TIM_OC2_SetConfig+0x104>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d10d      	bne.n	8009ca8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	011b      	lsls	r3, r3, #4
 8009c9a:	697a      	ldr	r2, [r7, #20]
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ca6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	4a1e      	ldr	r2, [pc, #120]	; (8009d24 <TIM_OC2_SetConfig+0x100>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d00f      	beq.n	8009cd0 <TIM_OC2_SetConfig+0xac>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	4a1d      	ldr	r2, [pc, #116]	; (8009d28 <TIM_OC2_SetConfig+0x104>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d00b      	beq.n	8009cd0 <TIM_OC2_SetConfig+0xac>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	4a1c      	ldr	r2, [pc, #112]	; (8009d2c <TIM_OC2_SetConfig+0x108>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d007      	beq.n	8009cd0 <TIM_OC2_SetConfig+0xac>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	4a1b      	ldr	r2, [pc, #108]	; (8009d30 <TIM_OC2_SetConfig+0x10c>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d003      	beq.n	8009cd0 <TIM_OC2_SetConfig+0xac>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	4a1a      	ldr	r2, [pc, #104]	; (8009d34 <TIM_OC2_SetConfig+0x110>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d113      	bne.n	8009cf8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009cd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009cde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	695b      	ldr	r3, [r3, #20]
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	693a      	ldr	r2, [r7, #16]
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	699b      	ldr	r3, [r3, #24]
 8009cf0:	009b      	lsls	r3, r3, #2
 8009cf2:	693a      	ldr	r2, [r7, #16]
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	693a      	ldr	r2, [r7, #16]
 8009cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	685a      	ldr	r2, [r3, #4]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	697a      	ldr	r2, [r7, #20]
 8009d10:	621a      	str	r2, [r3, #32]
}
 8009d12:	bf00      	nop
 8009d14:	371c      	adds	r7, #28
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr
 8009d1e:	bf00      	nop
 8009d20:	feff8fff 	.word	0xfeff8fff
 8009d24:	40010000 	.word	0x40010000
 8009d28:	40010400 	.word	0x40010400
 8009d2c:	40014000 	.word	0x40014000
 8009d30:	40014400 	.word	0x40014400
 8009d34:	40014800 	.word	0x40014800

08009d38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b087      	sub	sp, #28
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6a1b      	ldr	r3, [r3, #32]
 8009d46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6a1b      	ldr	r3, [r3, #32]
 8009d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	69db      	ldr	r3, [r3, #28]
 8009d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	4b33      	ldr	r3, [pc, #204]	; (8009e30 <TIM_OC3_SetConfig+0xf8>)
 8009d64:	4013      	ands	r3, r2
 8009d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f023 0303 	bic.w	r3, r3, #3
 8009d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	4313      	orrs	r3, r2
 8009d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	021b      	lsls	r3, r3, #8
 8009d88:	697a      	ldr	r2, [r7, #20]
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4a28      	ldr	r2, [pc, #160]	; (8009e34 <TIM_OC3_SetConfig+0xfc>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d003      	beq.n	8009d9e <TIM_OC3_SetConfig+0x66>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4a27      	ldr	r2, [pc, #156]	; (8009e38 <TIM_OC3_SetConfig+0x100>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d10d      	bne.n	8009dba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009da4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	021b      	lsls	r3, r3, #8
 8009dac:	697a      	ldr	r2, [r7, #20]
 8009dae:	4313      	orrs	r3, r2
 8009db0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009db8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4a1d      	ldr	r2, [pc, #116]	; (8009e34 <TIM_OC3_SetConfig+0xfc>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d00f      	beq.n	8009de2 <TIM_OC3_SetConfig+0xaa>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4a1c      	ldr	r2, [pc, #112]	; (8009e38 <TIM_OC3_SetConfig+0x100>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d00b      	beq.n	8009de2 <TIM_OC3_SetConfig+0xaa>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	4a1b      	ldr	r2, [pc, #108]	; (8009e3c <TIM_OC3_SetConfig+0x104>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d007      	beq.n	8009de2 <TIM_OC3_SetConfig+0xaa>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	4a1a      	ldr	r2, [pc, #104]	; (8009e40 <TIM_OC3_SetConfig+0x108>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d003      	beq.n	8009de2 <TIM_OC3_SetConfig+0xaa>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4a19      	ldr	r2, [pc, #100]	; (8009e44 <TIM_OC3_SetConfig+0x10c>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d113      	bne.n	8009e0a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009de8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009df0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	695b      	ldr	r3, [r3, #20]
 8009df6:	011b      	lsls	r3, r3, #4
 8009df8:	693a      	ldr	r2, [r7, #16]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	699b      	ldr	r3, [r3, #24]
 8009e02:	011b      	lsls	r3, r3, #4
 8009e04:	693a      	ldr	r2, [r7, #16]
 8009e06:	4313      	orrs	r3, r2
 8009e08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	693a      	ldr	r2, [r7, #16]
 8009e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	68fa      	ldr	r2, [r7, #12]
 8009e14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	685a      	ldr	r2, [r3, #4]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	697a      	ldr	r2, [r7, #20]
 8009e22:	621a      	str	r2, [r3, #32]
}
 8009e24:	bf00      	nop
 8009e26:	371c      	adds	r7, #28
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr
 8009e30:	fffeff8f 	.word	0xfffeff8f
 8009e34:	40010000 	.word	0x40010000
 8009e38:	40010400 	.word	0x40010400
 8009e3c:	40014000 	.word	0x40014000
 8009e40:	40014400 	.word	0x40014400
 8009e44:	40014800 	.word	0x40014800

08009e48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b087      	sub	sp, #28
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a1b      	ldr	r3, [r3, #32]
 8009e56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6a1b      	ldr	r3, [r3, #32]
 8009e62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	69db      	ldr	r3, [r3, #28]
 8009e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009e70:	68fa      	ldr	r2, [r7, #12]
 8009e72:	4b24      	ldr	r3, [pc, #144]	; (8009f04 <TIM_OC4_SetConfig+0xbc>)
 8009e74:	4013      	ands	r3, r2
 8009e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	021b      	lsls	r3, r3, #8
 8009e86:	68fa      	ldr	r2, [r7, #12]
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	031b      	lsls	r3, r3, #12
 8009e9a:	693a      	ldr	r2, [r7, #16]
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4a19      	ldr	r2, [pc, #100]	; (8009f08 <TIM_OC4_SetConfig+0xc0>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d00f      	beq.n	8009ec8 <TIM_OC4_SetConfig+0x80>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	4a18      	ldr	r2, [pc, #96]	; (8009f0c <TIM_OC4_SetConfig+0xc4>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d00b      	beq.n	8009ec8 <TIM_OC4_SetConfig+0x80>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4a17      	ldr	r2, [pc, #92]	; (8009f10 <TIM_OC4_SetConfig+0xc8>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d007      	beq.n	8009ec8 <TIM_OC4_SetConfig+0x80>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	4a16      	ldr	r2, [pc, #88]	; (8009f14 <TIM_OC4_SetConfig+0xcc>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d003      	beq.n	8009ec8 <TIM_OC4_SetConfig+0x80>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	4a15      	ldr	r2, [pc, #84]	; (8009f18 <TIM_OC4_SetConfig+0xd0>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d109      	bne.n	8009edc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ece:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	695b      	ldr	r3, [r3, #20]
 8009ed4:	019b      	lsls	r3, r3, #6
 8009ed6:	697a      	ldr	r2, [r7, #20]
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	697a      	ldr	r2, [r7, #20]
 8009ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	68fa      	ldr	r2, [r7, #12]
 8009ee6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	685a      	ldr	r2, [r3, #4]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	693a      	ldr	r2, [r7, #16]
 8009ef4:	621a      	str	r2, [r3, #32]
}
 8009ef6:	bf00      	nop
 8009ef8:	371c      	adds	r7, #28
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop
 8009f04:	feff8fff 	.word	0xfeff8fff
 8009f08:	40010000 	.word	0x40010000
 8009f0c:	40010400 	.word	0x40010400
 8009f10:	40014000 	.word	0x40014000
 8009f14:	40014400 	.word	0x40014400
 8009f18:	40014800 	.word	0x40014800

08009f1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b087      	sub	sp, #28
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6a1b      	ldr	r3, [r3, #32]
 8009f2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a1b      	ldr	r3, [r3, #32]
 8009f36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	4b21      	ldr	r3, [pc, #132]	; (8009fcc <TIM_OC5_SetConfig+0xb0>)
 8009f48:	4013      	ands	r3, r2
 8009f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	68fa      	ldr	r2, [r7, #12]
 8009f52:	4313      	orrs	r3, r2
 8009f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009f5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	041b      	lsls	r3, r3, #16
 8009f64:	693a      	ldr	r2, [r7, #16]
 8009f66:	4313      	orrs	r3, r2
 8009f68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4a18      	ldr	r2, [pc, #96]	; (8009fd0 <TIM_OC5_SetConfig+0xb4>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d00f      	beq.n	8009f92 <TIM_OC5_SetConfig+0x76>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	4a17      	ldr	r2, [pc, #92]	; (8009fd4 <TIM_OC5_SetConfig+0xb8>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d00b      	beq.n	8009f92 <TIM_OC5_SetConfig+0x76>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4a16      	ldr	r2, [pc, #88]	; (8009fd8 <TIM_OC5_SetConfig+0xbc>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d007      	beq.n	8009f92 <TIM_OC5_SetConfig+0x76>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4a15      	ldr	r2, [pc, #84]	; (8009fdc <TIM_OC5_SetConfig+0xc0>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d003      	beq.n	8009f92 <TIM_OC5_SetConfig+0x76>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	4a14      	ldr	r2, [pc, #80]	; (8009fe0 <TIM_OC5_SetConfig+0xc4>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d109      	bne.n	8009fa6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	695b      	ldr	r3, [r3, #20]
 8009f9e:	021b      	lsls	r3, r3, #8
 8009fa0:	697a      	ldr	r2, [r7, #20]
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	697a      	ldr	r2, [r7, #20]
 8009faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	68fa      	ldr	r2, [r7, #12]
 8009fb0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	685a      	ldr	r2, [r3, #4]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	693a      	ldr	r2, [r7, #16]
 8009fbe:	621a      	str	r2, [r3, #32]
}
 8009fc0:	bf00      	nop
 8009fc2:	371c      	adds	r7, #28
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr
 8009fcc:	fffeff8f 	.word	0xfffeff8f
 8009fd0:	40010000 	.word	0x40010000
 8009fd4:	40010400 	.word	0x40010400
 8009fd8:	40014000 	.word	0x40014000
 8009fdc:	40014400 	.word	0x40014400
 8009fe0:	40014800 	.word	0x40014800

08009fe4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b087      	sub	sp, #28
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6a1b      	ldr	r3, [r3, #32]
 8009ff2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a1b      	ldr	r3, [r3, #32]
 8009ffe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a00a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	4b22      	ldr	r3, [pc, #136]	; (800a098 <TIM_OC6_SetConfig+0xb4>)
 800a010:	4013      	ands	r3, r2
 800a012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	021b      	lsls	r3, r3, #8
 800a01a:	68fa      	ldr	r2, [r7, #12]
 800a01c:	4313      	orrs	r3, r2
 800a01e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a026:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	689b      	ldr	r3, [r3, #8]
 800a02c:	051b      	lsls	r3, r3, #20
 800a02e:	693a      	ldr	r2, [r7, #16]
 800a030:	4313      	orrs	r3, r2
 800a032:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	4a19      	ldr	r2, [pc, #100]	; (800a09c <TIM_OC6_SetConfig+0xb8>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d00f      	beq.n	800a05c <TIM_OC6_SetConfig+0x78>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	4a18      	ldr	r2, [pc, #96]	; (800a0a0 <TIM_OC6_SetConfig+0xbc>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d00b      	beq.n	800a05c <TIM_OC6_SetConfig+0x78>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	4a17      	ldr	r2, [pc, #92]	; (800a0a4 <TIM_OC6_SetConfig+0xc0>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d007      	beq.n	800a05c <TIM_OC6_SetConfig+0x78>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	4a16      	ldr	r2, [pc, #88]	; (800a0a8 <TIM_OC6_SetConfig+0xc4>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d003      	beq.n	800a05c <TIM_OC6_SetConfig+0x78>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	4a15      	ldr	r2, [pc, #84]	; (800a0ac <TIM_OC6_SetConfig+0xc8>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d109      	bne.n	800a070 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a062:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	695b      	ldr	r3, [r3, #20]
 800a068:	029b      	lsls	r3, r3, #10
 800a06a:	697a      	ldr	r2, [r7, #20]
 800a06c:	4313      	orrs	r3, r2
 800a06e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	697a      	ldr	r2, [r7, #20]
 800a074:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	685a      	ldr	r2, [r3, #4]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	693a      	ldr	r2, [r7, #16]
 800a088:	621a      	str	r2, [r3, #32]
}
 800a08a:	bf00      	nop
 800a08c:	371c      	adds	r7, #28
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr
 800a096:	bf00      	nop
 800a098:	feff8fff 	.word	0xfeff8fff
 800a09c:	40010000 	.word	0x40010000
 800a0a0:	40010400 	.word	0x40010400
 800a0a4:	40014000 	.word	0x40014000
 800a0a8:	40014400 	.word	0x40014400
 800a0ac:	40014800 	.word	0x40014800

0800a0b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b087      	sub	sp, #28
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6a1b      	ldr	r3, [r3, #32]
 800a0c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	6a1b      	ldr	r3, [r3, #32]
 800a0c6:	f023 0201 	bic.w	r2, r3, #1
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	699b      	ldr	r3, [r3, #24]
 800a0d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a0da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	011b      	lsls	r3, r3, #4
 800a0e0:	693a      	ldr	r2, [r7, #16]
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	f023 030a 	bic.w	r3, r3, #10
 800a0ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a0ee:	697a      	ldr	r2, [r7, #20]
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	693a      	ldr	r2, [r7, #16]
 800a0fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	697a      	ldr	r2, [r7, #20]
 800a100:	621a      	str	r2, [r3, #32]
}
 800a102:	bf00      	nop
 800a104:	371c      	adds	r7, #28
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr

0800a10e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a10e:	b480      	push	{r7}
 800a110:	b087      	sub	sp, #28
 800a112:	af00      	add	r7, sp, #0
 800a114:	60f8      	str	r0, [r7, #12]
 800a116:	60b9      	str	r1, [r7, #8]
 800a118:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6a1b      	ldr	r3, [r3, #32]
 800a11e:	f023 0210 	bic.w	r2, r3, #16
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	699b      	ldr	r3, [r3, #24]
 800a12a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6a1b      	ldr	r3, [r3, #32]
 800a130:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a138:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	031b      	lsls	r3, r3, #12
 800a13e:	697a      	ldr	r2, [r7, #20]
 800a140:	4313      	orrs	r3, r2
 800a142:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a14a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	011b      	lsls	r3, r3, #4
 800a150:	693a      	ldr	r2, [r7, #16]
 800a152:	4313      	orrs	r3, r2
 800a154:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	697a      	ldr	r2, [r7, #20]
 800a15a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	693a      	ldr	r2, [r7, #16]
 800a160:	621a      	str	r2, [r3, #32]
}
 800a162:	bf00      	nop
 800a164:	371c      	adds	r7, #28
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr
	...

0800a170 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a170:	b480      	push	{r7}
 800a172:	b085      	sub	sp, #20
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a180:	68fa      	ldr	r2, [r7, #12]
 800a182:	4b09      	ldr	r3, [pc, #36]	; (800a1a8 <TIM_ITRx_SetConfig+0x38>)
 800a184:	4013      	ands	r3, r2
 800a186:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a188:	683a      	ldr	r2, [r7, #0]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	f043 0307 	orr.w	r3, r3, #7
 800a192:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	68fa      	ldr	r2, [r7, #12]
 800a198:	609a      	str	r2, [r3, #8]
}
 800a19a:	bf00      	nop
 800a19c:	3714      	adds	r7, #20
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr
 800a1a6:	bf00      	nop
 800a1a8:	ffcfff8f 	.word	0xffcfff8f

0800a1ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b087      	sub	sp, #28
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	607a      	str	r2, [r7, #4]
 800a1b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a1c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	021a      	lsls	r2, r3, #8
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	431a      	orrs	r2, r3
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	697a      	ldr	r2, [r7, #20]
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	697a      	ldr	r2, [r7, #20]
 800a1de:	609a      	str	r2, [r3, #8]
}
 800a1e0:	bf00      	nop
 800a1e2:	371c      	adds	r7, #28
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b087      	sub	sp, #28
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	f003 031f 	and.w	r3, r3, #31
 800a1fe:	2201      	movs	r2, #1
 800a200:	fa02 f303 	lsl.w	r3, r2, r3
 800a204:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	6a1a      	ldr	r2, [r3, #32]
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	43db      	mvns	r3, r3
 800a20e:	401a      	ands	r2, r3
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	6a1a      	ldr	r2, [r3, #32]
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	f003 031f 	and.w	r3, r3, #31
 800a21e:	6879      	ldr	r1, [r7, #4]
 800a220:	fa01 f303 	lsl.w	r3, r1, r3
 800a224:	431a      	orrs	r2, r3
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	621a      	str	r2, [r3, #32]
}
 800a22a:	bf00      	nop
 800a22c:	371c      	adds	r7, #28
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr
	...

0800a238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a238:	b480      	push	{r7}
 800a23a:	b085      	sub	sp, #20
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d101      	bne.n	800a250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a24c:	2302      	movs	r3, #2
 800a24e:	e06d      	b.n	800a32c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2201      	movs	r2, #1
 800a254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2202      	movs	r2, #2
 800a25c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	689b      	ldr	r3, [r3, #8]
 800a26e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a30      	ldr	r2, [pc, #192]	; (800a338 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d004      	beq.n	800a284 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4a2f      	ldr	r2, [pc, #188]	; (800a33c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d108      	bne.n	800a296 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a28a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	68fa      	ldr	r2, [r7, #12]
 800a292:	4313      	orrs	r3, r2
 800a294:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a29c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	68fa      	ldr	r2, [r7, #12]
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	68fa      	ldr	r2, [r7, #12]
 800a2ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4a20      	ldr	r2, [pc, #128]	; (800a338 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d022      	beq.n	800a300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2c2:	d01d      	beq.n	800a300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a1d      	ldr	r2, [pc, #116]	; (800a340 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d018      	beq.n	800a300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4a1c      	ldr	r2, [pc, #112]	; (800a344 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d013      	beq.n	800a300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a1a      	ldr	r2, [pc, #104]	; (800a348 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d00e      	beq.n	800a300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a15      	ldr	r2, [pc, #84]	; (800a33c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d009      	beq.n	800a300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a16      	ldr	r2, [pc, #88]	; (800a34c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d004      	beq.n	800a300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a15      	ldr	r2, [pc, #84]	; (800a350 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d10c      	bne.n	800a31a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a306:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	689b      	ldr	r3, [r3, #8]
 800a30c:	68ba      	ldr	r2, [r7, #8]
 800a30e:	4313      	orrs	r3, r2
 800a310:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	68ba      	ldr	r2, [r7, #8]
 800a318:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2201      	movs	r2, #1
 800a31e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3714      	adds	r7, #20
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr
 800a338:	40010000 	.word	0x40010000
 800a33c:	40010400 	.word	0x40010400
 800a340:	40000400 	.word	0x40000400
 800a344:	40000800 	.word	0x40000800
 800a348:	40000c00 	.word	0x40000c00
 800a34c:	40001800 	.word	0x40001800
 800a350:	40014000 	.word	0x40014000

0800a354 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a35c:	bf00      	nop
 800a35e:	370c      	adds	r7, #12
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a368:	b480      	push	{r7}
 800a36a:	b083      	sub	sp, #12
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a370:	bf00      	nop
 800a372:	370c      	adds	r7, #12
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr

0800a37c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a384:	bf00      	nop
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d101      	bne.n	800a3a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	e042      	b.n	800a428 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d106      	bne.n	800a3ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f7f7 fde9 	bl	8001f8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2224      	movs	r2, #36	; 0x24
 800a3be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f022 0201 	bic.w	r2, r2, #1
 800a3d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 fce0 	bl	800ad98 <UART_SetConfig>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	d101      	bne.n	800a3e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e022      	b.n	800a428 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d002      	beq.n	800a3f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f001 fb40 	bl	800ba70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	685a      	ldr	r2, [r3, #4]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a3fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	689a      	ldr	r2, [r3, #8]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a40e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f042 0201 	orr.w	r2, r2, #1
 800a41e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f001 fbc7 	bl	800bbb4 <UART_CheckIdleState>
 800a426:	4603      	mov	r3, r0
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3708      	adds	r7, #8
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b08a      	sub	sp, #40	; 0x28
 800a434:	af02      	add	r7, sp, #8
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	603b      	str	r3, [r7, #0]
 800a43c:	4613      	mov	r3, r2
 800a43e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a446:	2b20      	cmp	r3, #32
 800a448:	d17b      	bne.n	800a542 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d002      	beq.n	800a456 <HAL_UART_Transmit+0x26>
 800a450:	88fb      	ldrh	r3, [r7, #6]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d101      	bne.n	800a45a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a456:	2301      	movs	r3, #1
 800a458:	e074      	b.n	800a544 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2200      	movs	r2, #0
 800a45e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2221      	movs	r2, #33	; 0x21
 800a466:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a46a:	f7f8 f873 	bl	8002554 <HAL_GetTick>
 800a46e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	88fa      	ldrh	r2, [r7, #6]
 800a474:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	88fa      	ldrh	r2, [r7, #6]
 800a47c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a488:	d108      	bne.n	800a49c <HAL_UART_Transmit+0x6c>
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	691b      	ldr	r3, [r3, #16]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d104      	bne.n	800a49c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a492:	2300      	movs	r3, #0
 800a494:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	61bb      	str	r3, [r7, #24]
 800a49a:	e003      	b.n	800a4a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a4a4:	e030      	b.n	800a508 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	9300      	str	r3, [sp, #0]
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	2180      	movs	r1, #128	; 0x80
 800a4b0:	68f8      	ldr	r0, [r7, #12]
 800a4b2:	f001 fc29 	bl	800bd08 <UART_WaitOnFlagUntilTimeout>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d005      	beq.n	800a4c8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2220      	movs	r2, #32
 800a4c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800a4c4:	2303      	movs	r3, #3
 800a4c6:	e03d      	b.n	800a544 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a4c8:	69fb      	ldr	r3, [r7, #28]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d10b      	bne.n	800a4e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	881b      	ldrh	r3, [r3, #0]
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a4dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	3302      	adds	r3, #2
 800a4e2:	61bb      	str	r3, [r7, #24]
 800a4e4:	e007      	b.n	800a4f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a4e6:	69fb      	ldr	r3, [r7, #28]
 800a4e8:	781a      	ldrb	r2, [r3, #0]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	3b01      	subs	r3, #1
 800a500:	b29a      	uxth	r2, r3
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a50e:	b29b      	uxth	r3, r3
 800a510:	2b00      	cmp	r3, #0
 800a512:	d1c8      	bne.n	800a4a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	9300      	str	r3, [sp, #0]
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	2200      	movs	r2, #0
 800a51c:	2140      	movs	r1, #64	; 0x40
 800a51e:	68f8      	ldr	r0, [r7, #12]
 800a520:	f001 fbf2 	bl	800bd08 <UART_WaitOnFlagUntilTimeout>
 800a524:	4603      	mov	r3, r0
 800a526:	2b00      	cmp	r3, #0
 800a528:	d005      	beq.n	800a536 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2220      	movs	r2, #32
 800a52e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800a532:	2303      	movs	r3, #3
 800a534:	e006      	b.n	800a544 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2220      	movs	r2, #32
 800a53a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a53e:	2300      	movs	r3, #0
 800a540:	e000      	b.n	800a544 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a542:	2302      	movs	r3, #2
  }
}
 800a544:	4618      	mov	r0, r3
 800a546:	3720      	adds	r7, #32
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b08a      	sub	sp, #40	; 0x28
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	4613      	mov	r3, r2
 800a558:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a560:	2b20      	cmp	r3, #32
 800a562:	d137      	bne.n	800a5d4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d002      	beq.n	800a570 <HAL_UART_Receive_IT+0x24>
 800a56a:	88fb      	ldrh	r3, [r7, #6]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d101      	bne.n	800a574 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a570:	2301      	movs	r3, #1
 800a572:	e030      	b.n	800a5d6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2200      	movs	r2, #0
 800a578:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a18      	ldr	r2, [pc, #96]	; (800a5e0 <HAL_UART_Receive_IT+0x94>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d01f      	beq.n	800a5c4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d018      	beq.n	800a5c4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	e853 3f00 	ldrex	r3, [r3]
 800a59e:	613b      	str	r3, [r7, #16]
   return(result);
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a5a6:	627b      	str	r3, [r7, #36]	; 0x24
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b0:	623b      	str	r3, [r7, #32]
 800a5b2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5b4:	69f9      	ldr	r1, [r7, #28]
 800a5b6:	6a3a      	ldr	r2, [r7, #32]
 800a5b8:	e841 2300 	strex	r3, r2, [r1]
 800a5bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a5be:	69bb      	ldr	r3, [r7, #24]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d1e6      	bne.n	800a592 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a5c4:	88fb      	ldrh	r3, [r7, #6]
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	68b9      	ldr	r1, [r7, #8]
 800a5ca:	68f8      	ldr	r0, [r7, #12]
 800a5cc:	f001 fc04 	bl	800bdd8 <UART_Start_Receive_IT>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	e000      	b.n	800a5d6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a5d4:	2302      	movs	r3, #2
  }
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3728      	adds	r7, #40	; 0x28
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	58000c00 	.word	0x58000c00

0800a5e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b0ba      	sub	sp, #232	; 0xe8
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	69db      	ldr	r3, [r3, #28]
 800a5f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	689b      	ldr	r3, [r3, #8]
 800a606:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a60a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a60e:	f640 030f 	movw	r3, #2063	; 0x80f
 800a612:	4013      	ands	r3, r2
 800a614:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a618:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d11b      	bne.n	800a658 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a624:	f003 0320 	and.w	r3, r3, #32
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d015      	beq.n	800a658 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a62c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a630:	f003 0320 	and.w	r3, r3, #32
 800a634:	2b00      	cmp	r3, #0
 800a636:	d105      	bne.n	800a644 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a63c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a640:	2b00      	cmp	r3, #0
 800a642:	d009      	beq.n	800a658 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a648:	2b00      	cmp	r3, #0
 800a64a:	f000 8377 	beq.w	800ad3c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	4798      	blx	r3
      }
      return;
 800a656:	e371      	b.n	800ad3c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a658:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	f000 8123 	beq.w	800a8a8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a662:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a666:	4b8d      	ldr	r3, [pc, #564]	; (800a89c <HAL_UART_IRQHandler+0x2b8>)
 800a668:	4013      	ands	r3, r2
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d106      	bne.n	800a67c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a66e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a672:	4b8b      	ldr	r3, [pc, #556]	; (800a8a0 <HAL_UART_IRQHandler+0x2bc>)
 800a674:	4013      	ands	r3, r2
 800a676:	2b00      	cmp	r3, #0
 800a678:	f000 8116 	beq.w	800a8a8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a67c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a680:	f003 0301 	and.w	r3, r3, #1
 800a684:	2b00      	cmp	r3, #0
 800a686:	d011      	beq.n	800a6ac <HAL_UART_IRQHandler+0xc8>
 800a688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a68c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a690:	2b00      	cmp	r3, #0
 800a692:	d00b      	beq.n	800a6ac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2201      	movs	r2, #1
 800a69a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6a2:	f043 0201 	orr.w	r2, r3, #1
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6b0:	f003 0302 	and.w	r3, r3, #2
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d011      	beq.n	800a6dc <HAL_UART_IRQHandler+0xf8>
 800a6b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6bc:	f003 0301 	and.w	r3, r3, #1
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d00b      	beq.n	800a6dc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	2202      	movs	r2, #2
 800a6ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6d2:	f043 0204 	orr.w	r2, r3, #4
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6e0:	f003 0304 	and.w	r3, r3, #4
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d011      	beq.n	800a70c <HAL_UART_IRQHandler+0x128>
 800a6e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6ec:	f003 0301 	and.w	r3, r3, #1
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d00b      	beq.n	800a70c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2204      	movs	r2, #4
 800a6fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a702:	f043 0202 	orr.w	r2, r3, #2
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a70c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a710:	f003 0308 	and.w	r3, r3, #8
 800a714:	2b00      	cmp	r3, #0
 800a716:	d017      	beq.n	800a748 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a71c:	f003 0320 	and.w	r3, r3, #32
 800a720:	2b00      	cmp	r3, #0
 800a722:	d105      	bne.n	800a730 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a724:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a728:	4b5c      	ldr	r3, [pc, #368]	; (800a89c <HAL_UART_IRQHandler+0x2b8>)
 800a72a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d00b      	beq.n	800a748 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2208      	movs	r2, #8
 800a736:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a73e:	f043 0208 	orr.w	r2, r3, #8
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a74c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a750:	2b00      	cmp	r3, #0
 800a752:	d012      	beq.n	800a77a <HAL_UART_IRQHandler+0x196>
 800a754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a758:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d00c      	beq.n	800a77a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a768:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a770:	f043 0220 	orr.w	r2, r3, #32
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a780:	2b00      	cmp	r3, #0
 800a782:	f000 82dd 	beq.w	800ad40 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a78a:	f003 0320 	and.w	r3, r3, #32
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d013      	beq.n	800a7ba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a796:	f003 0320 	and.w	r3, r3, #32
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d105      	bne.n	800a7aa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a79e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d007      	beq.n	800a7ba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d003      	beq.n	800a7ba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	689b      	ldr	r3, [r3, #8]
 800a7ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ce:	2b40      	cmp	r3, #64	; 0x40
 800a7d0:	d005      	beq.n	800a7de <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a7d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d054      	beq.n	800a888 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f001 fc1c 	bl	800c01c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	689b      	ldr	r3, [r3, #8]
 800a7ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ee:	2b40      	cmp	r3, #64	; 0x40
 800a7f0:	d146      	bne.n	800a880 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	3308      	adds	r3, #8
 800a7f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a800:	e853 3f00 	ldrex	r3, [r3]
 800a804:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a808:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a80c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a810:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	3308      	adds	r3, #8
 800a81a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a81e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a822:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a826:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a82a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a82e:	e841 2300 	strex	r3, r2, [r1]
 800a832:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a836:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d1d9      	bne.n	800a7f2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a844:	2b00      	cmp	r3, #0
 800a846:	d017      	beq.n	800a878 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a84e:	4a15      	ldr	r2, [pc, #84]	; (800a8a4 <HAL_UART_IRQHandler+0x2c0>)
 800a850:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a858:	4618      	mov	r0, r3
 800a85a:	f7f9 fca7 	bl	80041ac <HAL_DMA_Abort_IT>
 800a85e:	4603      	mov	r3, r0
 800a860:	2b00      	cmp	r3, #0
 800a862:	d019      	beq.n	800a898 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a86a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800a872:	4610      	mov	r0, r2
 800a874:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a876:	e00f      	b.n	800a898 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 fa77 	bl	800ad6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a87e:	e00b      	b.n	800a898 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 fa73 	bl	800ad6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a886:	e007      	b.n	800a898 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 fa6f 	bl	800ad6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800a896:	e253      	b.n	800ad40 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a898:	bf00      	nop
    return;
 800a89a:	e251      	b.n	800ad40 <HAL_UART_IRQHandler+0x75c>
 800a89c:	10000001 	.word	0x10000001
 800a8a0:	04000120 	.word	0x04000120
 800a8a4:	0800c0e9 	.word	0x0800c0e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	f040 81e7 	bne.w	800ac80 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a8b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8b6:	f003 0310 	and.w	r3, r3, #16
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	f000 81e0 	beq.w	800ac80 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a8c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8c4:	f003 0310 	and.w	r3, r3, #16
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	f000 81d9 	beq.w	800ac80 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	2210      	movs	r2, #16
 800a8d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8e0:	2b40      	cmp	r3, #64	; 0x40
 800a8e2:	f040 8151 	bne.w	800ab88 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a96      	ldr	r2, [pc, #600]	; (800ab48 <HAL_UART_IRQHandler+0x564>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d068      	beq.n	800a9c6 <HAL_UART_IRQHandler+0x3e2>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a93      	ldr	r2, [pc, #588]	; (800ab4c <HAL_UART_IRQHandler+0x568>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d061      	beq.n	800a9c6 <HAL_UART_IRQHandler+0x3e2>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4a91      	ldr	r2, [pc, #580]	; (800ab50 <HAL_UART_IRQHandler+0x56c>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d05a      	beq.n	800a9c6 <HAL_UART_IRQHandler+0x3e2>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a8e      	ldr	r2, [pc, #568]	; (800ab54 <HAL_UART_IRQHandler+0x570>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d053      	beq.n	800a9c6 <HAL_UART_IRQHandler+0x3e2>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4a8c      	ldr	r2, [pc, #560]	; (800ab58 <HAL_UART_IRQHandler+0x574>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d04c      	beq.n	800a9c6 <HAL_UART_IRQHandler+0x3e2>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a89      	ldr	r2, [pc, #548]	; (800ab5c <HAL_UART_IRQHandler+0x578>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d045      	beq.n	800a9c6 <HAL_UART_IRQHandler+0x3e2>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4a87      	ldr	r2, [pc, #540]	; (800ab60 <HAL_UART_IRQHandler+0x57c>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d03e      	beq.n	800a9c6 <HAL_UART_IRQHandler+0x3e2>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a84      	ldr	r2, [pc, #528]	; (800ab64 <HAL_UART_IRQHandler+0x580>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d037      	beq.n	800a9c6 <HAL_UART_IRQHandler+0x3e2>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4a82      	ldr	r2, [pc, #520]	; (800ab68 <HAL_UART_IRQHandler+0x584>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d030      	beq.n	800a9c6 <HAL_UART_IRQHandler+0x3e2>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a7f      	ldr	r2, [pc, #508]	; (800ab6c <HAL_UART_IRQHandler+0x588>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d029      	beq.n	800a9c6 <HAL_UART_IRQHandler+0x3e2>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a7d      	ldr	r2, [pc, #500]	; (800ab70 <HAL_UART_IRQHandler+0x58c>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d022      	beq.n	800a9c6 <HAL_UART_IRQHandler+0x3e2>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a7a      	ldr	r2, [pc, #488]	; (800ab74 <HAL_UART_IRQHandler+0x590>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d01b      	beq.n	800a9c6 <HAL_UART_IRQHandler+0x3e2>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4a78      	ldr	r2, [pc, #480]	; (800ab78 <HAL_UART_IRQHandler+0x594>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d014      	beq.n	800a9c6 <HAL_UART_IRQHandler+0x3e2>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4a75      	ldr	r2, [pc, #468]	; (800ab7c <HAL_UART_IRQHandler+0x598>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d00d      	beq.n	800a9c6 <HAL_UART_IRQHandler+0x3e2>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	4a73      	ldr	r2, [pc, #460]	; (800ab80 <HAL_UART_IRQHandler+0x59c>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d006      	beq.n	800a9c6 <HAL_UART_IRQHandler+0x3e2>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a70      	ldr	r2, [pc, #448]	; (800ab84 <HAL_UART_IRQHandler+0x5a0>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d106      	bne.n	800a9d4 <HAL_UART_IRQHandler+0x3f0>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	e005      	b.n	800a9e0 <HAL_UART_IRQHandler+0x3fc>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a9e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	f000 81ab 	beq.w	800ad44 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a9f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	f080 81a3 	bcs.w	800ad44 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aa04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa0e:	69db      	ldr	r3, [r3, #28]
 800aa10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa14:	f000 8087 	beq.w	800ab26 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aa24:	e853 3f00 	ldrex	r3, [r3]
 800aa28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800aa2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aa30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aa42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800aa46:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800aa4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aa52:	e841 2300 	strex	r3, r2, [r1]
 800aa56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800aa5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d1da      	bne.n	800aa18 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	3308      	adds	r3, #8
 800aa68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa6c:	e853 3f00 	ldrex	r3, [r3]
 800aa70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aa72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa74:	f023 0301 	bic.w	r3, r3, #1
 800aa78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	3308      	adds	r3, #8
 800aa82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aa86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aa8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aa8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aa92:	e841 2300 	strex	r3, r2, [r1]
 800aa96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800aa98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d1e1      	bne.n	800aa62 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	3308      	adds	r3, #8
 800aaa4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aaa8:	e853 3f00 	ldrex	r3, [r3]
 800aaac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aaae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aab0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aab4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	3308      	adds	r3, #8
 800aabe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aac2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aac4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aac8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aaca:	e841 2300 	strex	r3, r2, [r1]
 800aace:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800aad0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d1e3      	bne.n	800aa9e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2220      	movs	r2, #32
 800aada:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2200      	movs	r2, #0
 800aae2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaec:	e853 3f00 	ldrex	r3, [r3]
 800aaf0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aaf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aaf4:	f023 0310 	bic.w	r3, r3, #16
 800aaf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	461a      	mov	r2, r3
 800ab02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ab06:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab08:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ab0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab0e:	e841 2300 	strex	r3, r2, [r1]
 800ab12:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ab14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d1e4      	bne.n	800aae4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab20:	4618      	mov	r0, r3
 800ab22:	f7f9 f825 	bl	8003b70 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2202      	movs	r2, #2
 800ab2a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	1ad3      	subs	r3, r2, r3
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	4619      	mov	r1, r3
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 f91d 	bl	800ad80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ab46:	e0fd      	b.n	800ad44 <HAL_UART_IRQHandler+0x760>
 800ab48:	40020010 	.word	0x40020010
 800ab4c:	40020028 	.word	0x40020028
 800ab50:	40020040 	.word	0x40020040
 800ab54:	40020058 	.word	0x40020058
 800ab58:	40020070 	.word	0x40020070
 800ab5c:	40020088 	.word	0x40020088
 800ab60:	400200a0 	.word	0x400200a0
 800ab64:	400200b8 	.word	0x400200b8
 800ab68:	40020410 	.word	0x40020410
 800ab6c:	40020428 	.word	0x40020428
 800ab70:	40020440 	.word	0x40020440
 800ab74:	40020458 	.word	0x40020458
 800ab78:	40020470 	.word	0x40020470
 800ab7c:	40020488 	.word	0x40020488
 800ab80:	400204a0 	.word	0x400204a0
 800ab84:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ab94:	b29b      	uxth	r3, r3
 800ab96:	1ad3      	subs	r3, r2, r3
 800ab98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	f000 80cf 	beq.w	800ad48 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800abaa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800abae:	2b00      	cmp	r3, #0
 800abb0:	f000 80ca 	beq.w	800ad48 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abbc:	e853 3f00 	ldrex	r3, [r3]
 800abc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800abc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800abc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	461a      	mov	r2, r3
 800abd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800abd6:	647b      	str	r3, [r7, #68]	; 0x44
 800abd8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800abdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800abde:	e841 2300 	strex	r3, r2, [r1]
 800abe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800abe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d1e4      	bne.n	800abb4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	3308      	adds	r3, #8
 800abf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf4:	e853 3f00 	ldrex	r3, [r3]
 800abf8:	623b      	str	r3, [r7, #32]
   return(result);
 800abfa:	6a3a      	ldr	r2, [r7, #32]
 800abfc:	4b55      	ldr	r3, [pc, #340]	; (800ad54 <HAL_UART_IRQHandler+0x770>)
 800abfe:	4013      	ands	r3, r2
 800ac00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	3308      	adds	r3, #8
 800ac0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ac0e:	633a      	str	r2, [r7, #48]	; 0x30
 800ac10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac16:	e841 2300 	strex	r3, r2, [r1]
 800ac1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d1e3      	bne.n	800abea <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2220      	movs	r2, #32
 800ac26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2200      	movs	r2, #0
 800ac34:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	e853 3f00 	ldrex	r3, [r3]
 800ac42:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f023 0310 	bic.w	r3, r3, #16
 800ac4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	461a      	mov	r2, r3
 800ac54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ac58:	61fb      	str	r3, [r7, #28]
 800ac5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac5c:	69b9      	ldr	r1, [r7, #24]
 800ac5e:	69fa      	ldr	r2, [r7, #28]
 800ac60:	e841 2300 	strex	r3, r2, [r1]
 800ac64:	617b      	str	r3, [r7, #20]
   return(result);
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d1e4      	bne.n	800ac36 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2202      	movs	r2, #2
 800ac70:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ac72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ac76:	4619      	mov	r1, r3
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 f881 	bl	800ad80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ac7e:	e063      	b.n	800ad48 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ac80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d00e      	beq.n	800acaa <HAL_UART_IRQHandler+0x6c6>
 800ac8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d008      	beq.n	800acaa <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800aca0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f001 ff7e 	bl	800cba4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aca8:	e051      	b.n	800ad4e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800acaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d014      	beq.n	800ace0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800acb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d105      	bne.n	800acce <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800acc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800acc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800acca:	2b00      	cmp	r3, #0
 800accc:	d008      	beq.n	800ace0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d03a      	beq.n	800ad4c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	4798      	blx	r3
    }
    return;
 800acde:	e035      	b.n	800ad4c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ace0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ace4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d009      	beq.n	800ad00 <HAL_UART_IRQHandler+0x71c>
 800acec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d003      	beq.n	800ad00 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f001 fa0b 	bl	800c114 <UART_EndTransmit_IT>
    return;
 800acfe:	e026      	b.n	800ad4e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ad00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d009      	beq.n	800ad20 <HAL_UART_IRQHandler+0x73c>
 800ad0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d003      	beq.n	800ad20 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f001 ff57 	bl	800cbcc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ad1e:	e016      	b.n	800ad4e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ad20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d010      	beq.n	800ad4e <HAL_UART_IRQHandler+0x76a>
 800ad2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	da0c      	bge.n	800ad4e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f001 ff3f 	bl	800cbb8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ad3a:	e008      	b.n	800ad4e <HAL_UART_IRQHandler+0x76a>
      return;
 800ad3c:	bf00      	nop
 800ad3e:	e006      	b.n	800ad4e <HAL_UART_IRQHandler+0x76a>
    return;
 800ad40:	bf00      	nop
 800ad42:	e004      	b.n	800ad4e <HAL_UART_IRQHandler+0x76a>
      return;
 800ad44:	bf00      	nop
 800ad46:	e002      	b.n	800ad4e <HAL_UART_IRQHandler+0x76a>
      return;
 800ad48:	bf00      	nop
 800ad4a:	e000      	b.n	800ad4e <HAL_UART_IRQHandler+0x76a>
    return;
 800ad4c:	bf00      	nop
  }
}
 800ad4e:	37e8      	adds	r7, #232	; 0xe8
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}
 800ad54:	effffffe 	.word	0xeffffffe

0800ad58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b083      	sub	sp, #12
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ad60:	bf00      	nop
 800ad62:	370c      	adds	r7, #12
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr

0800ad6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b083      	sub	sp, #12
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ad74:	bf00      	nop
 800ad76:	370c      	adds	r7, #12
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr

0800ad80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	460b      	mov	r3, r1
 800ad8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ad8c:	bf00      	nop
 800ad8e:	370c      	adds	r7, #12
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr

0800ad98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ad98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad9c:	b092      	sub	sp, #72	; 0x48
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ada2:	2300      	movs	r3, #0
 800ada4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	689a      	ldr	r2, [r3, #8]
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	691b      	ldr	r3, [r3, #16]
 800adb0:	431a      	orrs	r2, r3
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	695b      	ldr	r3, [r3, #20]
 800adb6:	431a      	orrs	r2, r3
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	69db      	ldr	r3, [r3, #28]
 800adbc:	4313      	orrs	r3, r2
 800adbe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	681a      	ldr	r2, [r3, #0]
 800adc6:	4bbe      	ldr	r3, [pc, #760]	; (800b0c0 <UART_SetConfig+0x328>)
 800adc8:	4013      	ands	r3, r2
 800adca:	697a      	ldr	r2, [r7, #20]
 800adcc:	6812      	ldr	r2, [r2, #0]
 800adce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800add0:	430b      	orrs	r3, r1
 800add2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	68da      	ldr	r2, [r3, #12]
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	430a      	orrs	r2, r1
 800ade8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	699b      	ldr	r3, [r3, #24]
 800adee:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4ab3      	ldr	r2, [pc, #716]	; (800b0c4 <UART_SetConfig+0x32c>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d004      	beq.n	800ae04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	6a1b      	ldr	r3, [r3, #32]
 800adfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae00:	4313      	orrs	r3, r2
 800ae02:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	689a      	ldr	r2, [r3, #8]
 800ae0a:	4baf      	ldr	r3, [pc, #700]	; (800b0c8 <UART_SetConfig+0x330>)
 800ae0c:	4013      	ands	r3, r2
 800ae0e:	697a      	ldr	r2, [r7, #20]
 800ae10:	6812      	ldr	r2, [r2, #0]
 800ae12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ae14:	430b      	orrs	r3, r1
 800ae16:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae1e:	f023 010f 	bic.w	r1, r3, #15
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	430a      	orrs	r2, r1
 800ae2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4aa6      	ldr	r2, [pc, #664]	; (800b0cc <UART_SetConfig+0x334>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d177      	bne.n	800af28 <UART_SetConfig+0x190>
 800ae38:	4ba5      	ldr	r3, [pc, #660]	; (800b0d0 <UART_SetConfig+0x338>)
 800ae3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ae40:	2b28      	cmp	r3, #40	; 0x28
 800ae42:	d86d      	bhi.n	800af20 <UART_SetConfig+0x188>
 800ae44:	a201      	add	r2, pc, #4	; (adr r2, 800ae4c <UART_SetConfig+0xb4>)
 800ae46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae4a:	bf00      	nop
 800ae4c:	0800aef1 	.word	0x0800aef1
 800ae50:	0800af21 	.word	0x0800af21
 800ae54:	0800af21 	.word	0x0800af21
 800ae58:	0800af21 	.word	0x0800af21
 800ae5c:	0800af21 	.word	0x0800af21
 800ae60:	0800af21 	.word	0x0800af21
 800ae64:	0800af21 	.word	0x0800af21
 800ae68:	0800af21 	.word	0x0800af21
 800ae6c:	0800aef9 	.word	0x0800aef9
 800ae70:	0800af21 	.word	0x0800af21
 800ae74:	0800af21 	.word	0x0800af21
 800ae78:	0800af21 	.word	0x0800af21
 800ae7c:	0800af21 	.word	0x0800af21
 800ae80:	0800af21 	.word	0x0800af21
 800ae84:	0800af21 	.word	0x0800af21
 800ae88:	0800af21 	.word	0x0800af21
 800ae8c:	0800af01 	.word	0x0800af01
 800ae90:	0800af21 	.word	0x0800af21
 800ae94:	0800af21 	.word	0x0800af21
 800ae98:	0800af21 	.word	0x0800af21
 800ae9c:	0800af21 	.word	0x0800af21
 800aea0:	0800af21 	.word	0x0800af21
 800aea4:	0800af21 	.word	0x0800af21
 800aea8:	0800af21 	.word	0x0800af21
 800aeac:	0800af09 	.word	0x0800af09
 800aeb0:	0800af21 	.word	0x0800af21
 800aeb4:	0800af21 	.word	0x0800af21
 800aeb8:	0800af21 	.word	0x0800af21
 800aebc:	0800af21 	.word	0x0800af21
 800aec0:	0800af21 	.word	0x0800af21
 800aec4:	0800af21 	.word	0x0800af21
 800aec8:	0800af21 	.word	0x0800af21
 800aecc:	0800af11 	.word	0x0800af11
 800aed0:	0800af21 	.word	0x0800af21
 800aed4:	0800af21 	.word	0x0800af21
 800aed8:	0800af21 	.word	0x0800af21
 800aedc:	0800af21 	.word	0x0800af21
 800aee0:	0800af21 	.word	0x0800af21
 800aee4:	0800af21 	.word	0x0800af21
 800aee8:	0800af21 	.word	0x0800af21
 800aeec:	0800af19 	.word	0x0800af19
 800aef0:	2301      	movs	r3, #1
 800aef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aef6:	e326      	b.n	800b546 <UART_SetConfig+0x7ae>
 800aef8:	2304      	movs	r3, #4
 800aefa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aefe:	e322      	b.n	800b546 <UART_SetConfig+0x7ae>
 800af00:	2308      	movs	r3, #8
 800af02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af06:	e31e      	b.n	800b546 <UART_SetConfig+0x7ae>
 800af08:	2310      	movs	r3, #16
 800af0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af0e:	e31a      	b.n	800b546 <UART_SetConfig+0x7ae>
 800af10:	2320      	movs	r3, #32
 800af12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af16:	e316      	b.n	800b546 <UART_SetConfig+0x7ae>
 800af18:	2340      	movs	r3, #64	; 0x40
 800af1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af1e:	e312      	b.n	800b546 <UART_SetConfig+0x7ae>
 800af20:	2380      	movs	r3, #128	; 0x80
 800af22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af26:	e30e      	b.n	800b546 <UART_SetConfig+0x7ae>
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4a69      	ldr	r2, [pc, #420]	; (800b0d4 <UART_SetConfig+0x33c>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d130      	bne.n	800af94 <UART_SetConfig+0x1fc>
 800af32:	4b67      	ldr	r3, [pc, #412]	; (800b0d0 <UART_SetConfig+0x338>)
 800af34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af36:	f003 0307 	and.w	r3, r3, #7
 800af3a:	2b05      	cmp	r3, #5
 800af3c:	d826      	bhi.n	800af8c <UART_SetConfig+0x1f4>
 800af3e:	a201      	add	r2, pc, #4	; (adr r2, 800af44 <UART_SetConfig+0x1ac>)
 800af40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af44:	0800af5d 	.word	0x0800af5d
 800af48:	0800af65 	.word	0x0800af65
 800af4c:	0800af6d 	.word	0x0800af6d
 800af50:	0800af75 	.word	0x0800af75
 800af54:	0800af7d 	.word	0x0800af7d
 800af58:	0800af85 	.word	0x0800af85
 800af5c:	2300      	movs	r3, #0
 800af5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af62:	e2f0      	b.n	800b546 <UART_SetConfig+0x7ae>
 800af64:	2304      	movs	r3, #4
 800af66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af6a:	e2ec      	b.n	800b546 <UART_SetConfig+0x7ae>
 800af6c:	2308      	movs	r3, #8
 800af6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af72:	e2e8      	b.n	800b546 <UART_SetConfig+0x7ae>
 800af74:	2310      	movs	r3, #16
 800af76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af7a:	e2e4      	b.n	800b546 <UART_SetConfig+0x7ae>
 800af7c:	2320      	movs	r3, #32
 800af7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af82:	e2e0      	b.n	800b546 <UART_SetConfig+0x7ae>
 800af84:	2340      	movs	r3, #64	; 0x40
 800af86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af8a:	e2dc      	b.n	800b546 <UART_SetConfig+0x7ae>
 800af8c:	2380      	movs	r3, #128	; 0x80
 800af8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af92:	e2d8      	b.n	800b546 <UART_SetConfig+0x7ae>
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a4f      	ldr	r2, [pc, #316]	; (800b0d8 <UART_SetConfig+0x340>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d130      	bne.n	800b000 <UART_SetConfig+0x268>
 800af9e:	4b4c      	ldr	r3, [pc, #304]	; (800b0d0 <UART_SetConfig+0x338>)
 800afa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afa2:	f003 0307 	and.w	r3, r3, #7
 800afa6:	2b05      	cmp	r3, #5
 800afa8:	d826      	bhi.n	800aff8 <UART_SetConfig+0x260>
 800afaa:	a201      	add	r2, pc, #4	; (adr r2, 800afb0 <UART_SetConfig+0x218>)
 800afac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afb0:	0800afc9 	.word	0x0800afc9
 800afb4:	0800afd1 	.word	0x0800afd1
 800afb8:	0800afd9 	.word	0x0800afd9
 800afbc:	0800afe1 	.word	0x0800afe1
 800afc0:	0800afe9 	.word	0x0800afe9
 800afc4:	0800aff1 	.word	0x0800aff1
 800afc8:	2300      	movs	r3, #0
 800afca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afce:	e2ba      	b.n	800b546 <UART_SetConfig+0x7ae>
 800afd0:	2304      	movs	r3, #4
 800afd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afd6:	e2b6      	b.n	800b546 <UART_SetConfig+0x7ae>
 800afd8:	2308      	movs	r3, #8
 800afda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afde:	e2b2      	b.n	800b546 <UART_SetConfig+0x7ae>
 800afe0:	2310      	movs	r3, #16
 800afe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afe6:	e2ae      	b.n	800b546 <UART_SetConfig+0x7ae>
 800afe8:	2320      	movs	r3, #32
 800afea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afee:	e2aa      	b.n	800b546 <UART_SetConfig+0x7ae>
 800aff0:	2340      	movs	r3, #64	; 0x40
 800aff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aff6:	e2a6      	b.n	800b546 <UART_SetConfig+0x7ae>
 800aff8:	2380      	movs	r3, #128	; 0x80
 800affa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800affe:	e2a2      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4a35      	ldr	r2, [pc, #212]	; (800b0dc <UART_SetConfig+0x344>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d130      	bne.n	800b06c <UART_SetConfig+0x2d4>
 800b00a:	4b31      	ldr	r3, [pc, #196]	; (800b0d0 <UART_SetConfig+0x338>)
 800b00c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b00e:	f003 0307 	and.w	r3, r3, #7
 800b012:	2b05      	cmp	r3, #5
 800b014:	d826      	bhi.n	800b064 <UART_SetConfig+0x2cc>
 800b016:	a201      	add	r2, pc, #4	; (adr r2, 800b01c <UART_SetConfig+0x284>)
 800b018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b01c:	0800b035 	.word	0x0800b035
 800b020:	0800b03d 	.word	0x0800b03d
 800b024:	0800b045 	.word	0x0800b045
 800b028:	0800b04d 	.word	0x0800b04d
 800b02c:	0800b055 	.word	0x0800b055
 800b030:	0800b05d 	.word	0x0800b05d
 800b034:	2300      	movs	r3, #0
 800b036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b03a:	e284      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b03c:	2304      	movs	r3, #4
 800b03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b042:	e280      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b044:	2308      	movs	r3, #8
 800b046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b04a:	e27c      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b04c:	2310      	movs	r3, #16
 800b04e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b052:	e278      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b054:	2320      	movs	r3, #32
 800b056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b05a:	e274      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b05c:	2340      	movs	r3, #64	; 0x40
 800b05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b062:	e270      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b064:	2380      	movs	r3, #128	; 0x80
 800b066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b06a:	e26c      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a1b      	ldr	r2, [pc, #108]	; (800b0e0 <UART_SetConfig+0x348>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d142      	bne.n	800b0fc <UART_SetConfig+0x364>
 800b076:	4b16      	ldr	r3, [pc, #88]	; (800b0d0 <UART_SetConfig+0x338>)
 800b078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b07a:	f003 0307 	and.w	r3, r3, #7
 800b07e:	2b05      	cmp	r3, #5
 800b080:	d838      	bhi.n	800b0f4 <UART_SetConfig+0x35c>
 800b082:	a201      	add	r2, pc, #4	; (adr r2, 800b088 <UART_SetConfig+0x2f0>)
 800b084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b088:	0800b0a1 	.word	0x0800b0a1
 800b08c:	0800b0a9 	.word	0x0800b0a9
 800b090:	0800b0b1 	.word	0x0800b0b1
 800b094:	0800b0b9 	.word	0x0800b0b9
 800b098:	0800b0e5 	.word	0x0800b0e5
 800b09c:	0800b0ed 	.word	0x0800b0ed
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0a6:	e24e      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b0a8:	2304      	movs	r3, #4
 800b0aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0ae:	e24a      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b0b0:	2308      	movs	r3, #8
 800b0b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0b6:	e246      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b0b8:	2310      	movs	r3, #16
 800b0ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0be:	e242      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b0c0:	cfff69f3 	.word	0xcfff69f3
 800b0c4:	58000c00 	.word	0x58000c00
 800b0c8:	11fff4ff 	.word	0x11fff4ff
 800b0cc:	40011000 	.word	0x40011000
 800b0d0:	58024400 	.word	0x58024400
 800b0d4:	40004400 	.word	0x40004400
 800b0d8:	40004800 	.word	0x40004800
 800b0dc:	40004c00 	.word	0x40004c00
 800b0e0:	40005000 	.word	0x40005000
 800b0e4:	2320      	movs	r3, #32
 800b0e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0ea:	e22c      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b0ec:	2340      	movs	r3, #64	; 0x40
 800b0ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0f2:	e228      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b0f4:	2380      	movs	r3, #128	; 0x80
 800b0f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0fa:	e224      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4ab1      	ldr	r2, [pc, #708]	; (800b3c8 <UART_SetConfig+0x630>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d176      	bne.n	800b1f4 <UART_SetConfig+0x45c>
 800b106:	4bb1      	ldr	r3, [pc, #708]	; (800b3cc <UART_SetConfig+0x634>)
 800b108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b10a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b10e:	2b28      	cmp	r3, #40	; 0x28
 800b110:	d86c      	bhi.n	800b1ec <UART_SetConfig+0x454>
 800b112:	a201      	add	r2, pc, #4	; (adr r2, 800b118 <UART_SetConfig+0x380>)
 800b114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b118:	0800b1bd 	.word	0x0800b1bd
 800b11c:	0800b1ed 	.word	0x0800b1ed
 800b120:	0800b1ed 	.word	0x0800b1ed
 800b124:	0800b1ed 	.word	0x0800b1ed
 800b128:	0800b1ed 	.word	0x0800b1ed
 800b12c:	0800b1ed 	.word	0x0800b1ed
 800b130:	0800b1ed 	.word	0x0800b1ed
 800b134:	0800b1ed 	.word	0x0800b1ed
 800b138:	0800b1c5 	.word	0x0800b1c5
 800b13c:	0800b1ed 	.word	0x0800b1ed
 800b140:	0800b1ed 	.word	0x0800b1ed
 800b144:	0800b1ed 	.word	0x0800b1ed
 800b148:	0800b1ed 	.word	0x0800b1ed
 800b14c:	0800b1ed 	.word	0x0800b1ed
 800b150:	0800b1ed 	.word	0x0800b1ed
 800b154:	0800b1ed 	.word	0x0800b1ed
 800b158:	0800b1cd 	.word	0x0800b1cd
 800b15c:	0800b1ed 	.word	0x0800b1ed
 800b160:	0800b1ed 	.word	0x0800b1ed
 800b164:	0800b1ed 	.word	0x0800b1ed
 800b168:	0800b1ed 	.word	0x0800b1ed
 800b16c:	0800b1ed 	.word	0x0800b1ed
 800b170:	0800b1ed 	.word	0x0800b1ed
 800b174:	0800b1ed 	.word	0x0800b1ed
 800b178:	0800b1d5 	.word	0x0800b1d5
 800b17c:	0800b1ed 	.word	0x0800b1ed
 800b180:	0800b1ed 	.word	0x0800b1ed
 800b184:	0800b1ed 	.word	0x0800b1ed
 800b188:	0800b1ed 	.word	0x0800b1ed
 800b18c:	0800b1ed 	.word	0x0800b1ed
 800b190:	0800b1ed 	.word	0x0800b1ed
 800b194:	0800b1ed 	.word	0x0800b1ed
 800b198:	0800b1dd 	.word	0x0800b1dd
 800b19c:	0800b1ed 	.word	0x0800b1ed
 800b1a0:	0800b1ed 	.word	0x0800b1ed
 800b1a4:	0800b1ed 	.word	0x0800b1ed
 800b1a8:	0800b1ed 	.word	0x0800b1ed
 800b1ac:	0800b1ed 	.word	0x0800b1ed
 800b1b0:	0800b1ed 	.word	0x0800b1ed
 800b1b4:	0800b1ed 	.word	0x0800b1ed
 800b1b8:	0800b1e5 	.word	0x0800b1e5
 800b1bc:	2301      	movs	r3, #1
 800b1be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1c2:	e1c0      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b1c4:	2304      	movs	r3, #4
 800b1c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1ca:	e1bc      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b1cc:	2308      	movs	r3, #8
 800b1ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1d2:	e1b8      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b1d4:	2310      	movs	r3, #16
 800b1d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1da:	e1b4      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b1dc:	2320      	movs	r3, #32
 800b1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1e2:	e1b0      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b1e4:	2340      	movs	r3, #64	; 0x40
 800b1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1ea:	e1ac      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b1ec:	2380      	movs	r3, #128	; 0x80
 800b1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1f2:	e1a8      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4a75      	ldr	r2, [pc, #468]	; (800b3d0 <UART_SetConfig+0x638>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d130      	bne.n	800b260 <UART_SetConfig+0x4c8>
 800b1fe:	4b73      	ldr	r3, [pc, #460]	; (800b3cc <UART_SetConfig+0x634>)
 800b200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b202:	f003 0307 	and.w	r3, r3, #7
 800b206:	2b05      	cmp	r3, #5
 800b208:	d826      	bhi.n	800b258 <UART_SetConfig+0x4c0>
 800b20a:	a201      	add	r2, pc, #4	; (adr r2, 800b210 <UART_SetConfig+0x478>)
 800b20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b210:	0800b229 	.word	0x0800b229
 800b214:	0800b231 	.word	0x0800b231
 800b218:	0800b239 	.word	0x0800b239
 800b21c:	0800b241 	.word	0x0800b241
 800b220:	0800b249 	.word	0x0800b249
 800b224:	0800b251 	.word	0x0800b251
 800b228:	2300      	movs	r3, #0
 800b22a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b22e:	e18a      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b230:	2304      	movs	r3, #4
 800b232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b236:	e186      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b238:	2308      	movs	r3, #8
 800b23a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b23e:	e182      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b240:	2310      	movs	r3, #16
 800b242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b246:	e17e      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b248:	2320      	movs	r3, #32
 800b24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b24e:	e17a      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b250:	2340      	movs	r3, #64	; 0x40
 800b252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b256:	e176      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b258:	2380      	movs	r3, #128	; 0x80
 800b25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b25e:	e172      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4a5b      	ldr	r2, [pc, #364]	; (800b3d4 <UART_SetConfig+0x63c>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d130      	bne.n	800b2cc <UART_SetConfig+0x534>
 800b26a:	4b58      	ldr	r3, [pc, #352]	; (800b3cc <UART_SetConfig+0x634>)
 800b26c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b26e:	f003 0307 	and.w	r3, r3, #7
 800b272:	2b05      	cmp	r3, #5
 800b274:	d826      	bhi.n	800b2c4 <UART_SetConfig+0x52c>
 800b276:	a201      	add	r2, pc, #4	; (adr r2, 800b27c <UART_SetConfig+0x4e4>)
 800b278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b27c:	0800b295 	.word	0x0800b295
 800b280:	0800b29d 	.word	0x0800b29d
 800b284:	0800b2a5 	.word	0x0800b2a5
 800b288:	0800b2ad 	.word	0x0800b2ad
 800b28c:	0800b2b5 	.word	0x0800b2b5
 800b290:	0800b2bd 	.word	0x0800b2bd
 800b294:	2300      	movs	r3, #0
 800b296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b29a:	e154      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b29c:	2304      	movs	r3, #4
 800b29e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2a2:	e150      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b2a4:	2308      	movs	r3, #8
 800b2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2aa:	e14c      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b2ac:	2310      	movs	r3, #16
 800b2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2b2:	e148      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b2b4:	2320      	movs	r3, #32
 800b2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2ba:	e144      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b2bc:	2340      	movs	r3, #64	; 0x40
 800b2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2c2:	e140      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b2c4:	2380      	movs	r3, #128	; 0x80
 800b2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2ca:	e13c      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a41      	ldr	r2, [pc, #260]	; (800b3d8 <UART_SetConfig+0x640>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	f040 8082 	bne.w	800b3dc <UART_SetConfig+0x644>
 800b2d8:	4b3c      	ldr	r3, [pc, #240]	; (800b3cc <UART_SetConfig+0x634>)
 800b2da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b2e0:	2b28      	cmp	r3, #40	; 0x28
 800b2e2:	d86d      	bhi.n	800b3c0 <UART_SetConfig+0x628>
 800b2e4:	a201      	add	r2, pc, #4	; (adr r2, 800b2ec <UART_SetConfig+0x554>)
 800b2e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ea:	bf00      	nop
 800b2ec:	0800b391 	.word	0x0800b391
 800b2f0:	0800b3c1 	.word	0x0800b3c1
 800b2f4:	0800b3c1 	.word	0x0800b3c1
 800b2f8:	0800b3c1 	.word	0x0800b3c1
 800b2fc:	0800b3c1 	.word	0x0800b3c1
 800b300:	0800b3c1 	.word	0x0800b3c1
 800b304:	0800b3c1 	.word	0x0800b3c1
 800b308:	0800b3c1 	.word	0x0800b3c1
 800b30c:	0800b399 	.word	0x0800b399
 800b310:	0800b3c1 	.word	0x0800b3c1
 800b314:	0800b3c1 	.word	0x0800b3c1
 800b318:	0800b3c1 	.word	0x0800b3c1
 800b31c:	0800b3c1 	.word	0x0800b3c1
 800b320:	0800b3c1 	.word	0x0800b3c1
 800b324:	0800b3c1 	.word	0x0800b3c1
 800b328:	0800b3c1 	.word	0x0800b3c1
 800b32c:	0800b3a1 	.word	0x0800b3a1
 800b330:	0800b3c1 	.word	0x0800b3c1
 800b334:	0800b3c1 	.word	0x0800b3c1
 800b338:	0800b3c1 	.word	0x0800b3c1
 800b33c:	0800b3c1 	.word	0x0800b3c1
 800b340:	0800b3c1 	.word	0x0800b3c1
 800b344:	0800b3c1 	.word	0x0800b3c1
 800b348:	0800b3c1 	.word	0x0800b3c1
 800b34c:	0800b3a9 	.word	0x0800b3a9
 800b350:	0800b3c1 	.word	0x0800b3c1
 800b354:	0800b3c1 	.word	0x0800b3c1
 800b358:	0800b3c1 	.word	0x0800b3c1
 800b35c:	0800b3c1 	.word	0x0800b3c1
 800b360:	0800b3c1 	.word	0x0800b3c1
 800b364:	0800b3c1 	.word	0x0800b3c1
 800b368:	0800b3c1 	.word	0x0800b3c1
 800b36c:	0800b3b1 	.word	0x0800b3b1
 800b370:	0800b3c1 	.word	0x0800b3c1
 800b374:	0800b3c1 	.word	0x0800b3c1
 800b378:	0800b3c1 	.word	0x0800b3c1
 800b37c:	0800b3c1 	.word	0x0800b3c1
 800b380:	0800b3c1 	.word	0x0800b3c1
 800b384:	0800b3c1 	.word	0x0800b3c1
 800b388:	0800b3c1 	.word	0x0800b3c1
 800b38c:	0800b3b9 	.word	0x0800b3b9
 800b390:	2301      	movs	r3, #1
 800b392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b396:	e0d6      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b398:	2304      	movs	r3, #4
 800b39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b39e:	e0d2      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b3a0:	2308      	movs	r3, #8
 800b3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3a6:	e0ce      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b3a8:	2310      	movs	r3, #16
 800b3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ae:	e0ca      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b3b0:	2320      	movs	r3, #32
 800b3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3b6:	e0c6      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b3b8:	2340      	movs	r3, #64	; 0x40
 800b3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3be:	e0c2      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b3c0:	2380      	movs	r3, #128	; 0x80
 800b3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3c6:	e0be      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b3c8:	40011400 	.word	0x40011400
 800b3cc:	58024400 	.word	0x58024400
 800b3d0:	40007800 	.word	0x40007800
 800b3d4:	40007c00 	.word	0x40007c00
 800b3d8:	40011800 	.word	0x40011800
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4aad      	ldr	r2, [pc, #692]	; (800b698 <UART_SetConfig+0x900>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d176      	bne.n	800b4d4 <UART_SetConfig+0x73c>
 800b3e6:	4bad      	ldr	r3, [pc, #692]	; (800b69c <UART_SetConfig+0x904>)
 800b3e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b3ee:	2b28      	cmp	r3, #40	; 0x28
 800b3f0:	d86c      	bhi.n	800b4cc <UART_SetConfig+0x734>
 800b3f2:	a201      	add	r2, pc, #4	; (adr r2, 800b3f8 <UART_SetConfig+0x660>)
 800b3f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f8:	0800b49d 	.word	0x0800b49d
 800b3fc:	0800b4cd 	.word	0x0800b4cd
 800b400:	0800b4cd 	.word	0x0800b4cd
 800b404:	0800b4cd 	.word	0x0800b4cd
 800b408:	0800b4cd 	.word	0x0800b4cd
 800b40c:	0800b4cd 	.word	0x0800b4cd
 800b410:	0800b4cd 	.word	0x0800b4cd
 800b414:	0800b4cd 	.word	0x0800b4cd
 800b418:	0800b4a5 	.word	0x0800b4a5
 800b41c:	0800b4cd 	.word	0x0800b4cd
 800b420:	0800b4cd 	.word	0x0800b4cd
 800b424:	0800b4cd 	.word	0x0800b4cd
 800b428:	0800b4cd 	.word	0x0800b4cd
 800b42c:	0800b4cd 	.word	0x0800b4cd
 800b430:	0800b4cd 	.word	0x0800b4cd
 800b434:	0800b4cd 	.word	0x0800b4cd
 800b438:	0800b4ad 	.word	0x0800b4ad
 800b43c:	0800b4cd 	.word	0x0800b4cd
 800b440:	0800b4cd 	.word	0x0800b4cd
 800b444:	0800b4cd 	.word	0x0800b4cd
 800b448:	0800b4cd 	.word	0x0800b4cd
 800b44c:	0800b4cd 	.word	0x0800b4cd
 800b450:	0800b4cd 	.word	0x0800b4cd
 800b454:	0800b4cd 	.word	0x0800b4cd
 800b458:	0800b4b5 	.word	0x0800b4b5
 800b45c:	0800b4cd 	.word	0x0800b4cd
 800b460:	0800b4cd 	.word	0x0800b4cd
 800b464:	0800b4cd 	.word	0x0800b4cd
 800b468:	0800b4cd 	.word	0x0800b4cd
 800b46c:	0800b4cd 	.word	0x0800b4cd
 800b470:	0800b4cd 	.word	0x0800b4cd
 800b474:	0800b4cd 	.word	0x0800b4cd
 800b478:	0800b4bd 	.word	0x0800b4bd
 800b47c:	0800b4cd 	.word	0x0800b4cd
 800b480:	0800b4cd 	.word	0x0800b4cd
 800b484:	0800b4cd 	.word	0x0800b4cd
 800b488:	0800b4cd 	.word	0x0800b4cd
 800b48c:	0800b4cd 	.word	0x0800b4cd
 800b490:	0800b4cd 	.word	0x0800b4cd
 800b494:	0800b4cd 	.word	0x0800b4cd
 800b498:	0800b4c5 	.word	0x0800b4c5
 800b49c:	2301      	movs	r3, #1
 800b49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4a2:	e050      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b4a4:	2304      	movs	r3, #4
 800b4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4aa:	e04c      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b4ac:	2308      	movs	r3, #8
 800b4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4b2:	e048      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b4b4:	2310      	movs	r3, #16
 800b4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4ba:	e044      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b4bc:	2320      	movs	r3, #32
 800b4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4c2:	e040      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b4c4:	2340      	movs	r3, #64	; 0x40
 800b4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4ca:	e03c      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b4cc:	2380      	movs	r3, #128	; 0x80
 800b4ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4d2:	e038      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4a71      	ldr	r2, [pc, #452]	; (800b6a0 <UART_SetConfig+0x908>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d130      	bne.n	800b540 <UART_SetConfig+0x7a8>
 800b4de:	4b6f      	ldr	r3, [pc, #444]	; (800b69c <UART_SetConfig+0x904>)
 800b4e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4e2:	f003 0307 	and.w	r3, r3, #7
 800b4e6:	2b05      	cmp	r3, #5
 800b4e8:	d826      	bhi.n	800b538 <UART_SetConfig+0x7a0>
 800b4ea:	a201      	add	r2, pc, #4	; (adr r2, 800b4f0 <UART_SetConfig+0x758>)
 800b4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4f0:	0800b509 	.word	0x0800b509
 800b4f4:	0800b511 	.word	0x0800b511
 800b4f8:	0800b519 	.word	0x0800b519
 800b4fc:	0800b521 	.word	0x0800b521
 800b500:	0800b529 	.word	0x0800b529
 800b504:	0800b531 	.word	0x0800b531
 800b508:	2302      	movs	r3, #2
 800b50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b50e:	e01a      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b510:	2304      	movs	r3, #4
 800b512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b516:	e016      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b518:	2308      	movs	r3, #8
 800b51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b51e:	e012      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b520:	2310      	movs	r3, #16
 800b522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b526:	e00e      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b528:	2320      	movs	r3, #32
 800b52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b52e:	e00a      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b530:	2340      	movs	r3, #64	; 0x40
 800b532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b536:	e006      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b538:	2380      	movs	r3, #128	; 0x80
 800b53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b53e:	e002      	b.n	800b546 <UART_SetConfig+0x7ae>
 800b540:	2380      	movs	r3, #128	; 0x80
 800b542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4a55      	ldr	r2, [pc, #340]	; (800b6a0 <UART_SetConfig+0x908>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	f040 80f8 	bne.w	800b742 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b552:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b556:	2b20      	cmp	r3, #32
 800b558:	dc46      	bgt.n	800b5e8 <UART_SetConfig+0x850>
 800b55a:	2b02      	cmp	r3, #2
 800b55c:	db75      	blt.n	800b64a <UART_SetConfig+0x8b2>
 800b55e:	3b02      	subs	r3, #2
 800b560:	2b1e      	cmp	r3, #30
 800b562:	d872      	bhi.n	800b64a <UART_SetConfig+0x8b2>
 800b564:	a201      	add	r2, pc, #4	; (adr r2, 800b56c <UART_SetConfig+0x7d4>)
 800b566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b56a:	bf00      	nop
 800b56c:	0800b5ef 	.word	0x0800b5ef
 800b570:	0800b64b 	.word	0x0800b64b
 800b574:	0800b5f7 	.word	0x0800b5f7
 800b578:	0800b64b 	.word	0x0800b64b
 800b57c:	0800b64b 	.word	0x0800b64b
 800b580:	0800b64b 	.word	0x0800b64b
 800b584:	0800b607 	.word	0x0800b607
 800b588:	0800b64b 	.word	0x0800b64b
 800b58c:	0800b64b 	.word	0x0800b64b
 800b590:	0800b64b 	.word	0x0800b64b
 800b594:	0800b64b 	.word	0x0800b64b
 800b598:	0800b64b 	.word	0x0800b64b
 800b59c:	0800b64b 	.word	0x0800b64b
 800b5a0:	0800b64b 	.word	0x0800b64b
 800b5a4:	0800b617 	.word	0x0800b617
 800b5a8:	0800b64b 	.word	0x0800b64b
 800b5ac:	0800b64b 	.word	0x0800b64b
 800b5b0:	0800b64b 	.word	0x0800b64b
 800b5b4:	0800b64b 	.word	0x0800b64b
 800b5b8:	0800b64b 	.word	0x0800b64b
 800b5bc:	0800b64b 	.word	0x0800b64b
 800b5c0:	0800b64b 	.word	0x0800b64b
 800b5c4:	0800b64b 	.word	0x0800b64b
 800b5c8:	0800b64b 	.word	0x0800b64b
 800b5cc:	0800b64b 	.word	0x0800b64b
 800b5d0:	0800b64b 	.word	0x0800b64b
 800b5d4:	0800b64b 	.word	0x0800b64b
 800b5d8:	0800b64b 	.word	0x0800b64b
 800b5dc:	0800b64b 	.word	0x0800b64b
 800b5e0:	0800b64b 	.word	0x0800b64b
 800b5e4:	0800b63d 	.word	0x0800b63d
 800b5e8:	2b40      	cmp	r3, #64	; 0x40
 800b5ea:	d02a      	beq.n	800b642 <UART_SetConfig+0x8aa>
 800b5ec:	e02d      	b.n	800b64a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b5ee:	f7fc fe3f 	bl	8008270 <HAL_RCCEx_GetD3PCLK1Freq>
 800b5f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b5f4:	e02f      	b.n	800b656 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7fc fe4e 	bl	800829c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b602:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b604:	e027      	b.n	800b656 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b606:	f107 0318 	add.w	r3, r7, #24
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7fc ff9a 	bl	8008544 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b610:	69fb      	ldr	r3, [r7, #28]
 800b612:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b614:	e01f      	b.n	800b656 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b616:	4b21      	ldr	r3, [pc, #132]	; (800b69c <UART_SetConfig+0x904>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f003 0320 	and.w	r3, r3, #32
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d009      	beq.n	800b636 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b622:	4b1e      	ldr	r3, [pc, #120]	; (800b69c <UART_SetConfig+0x904>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	08db      	lsrs	r3, r3, #3
 800b628:	f003 0303 	and.w	r3, r3, #3
 800b62c:	4a1d      	ldr	r2, [pc, #116]	; (800b6a4 <UART_SetConfig+0x90c>)
 800b62e:	fa22 f303 	lsr.w	r3, r2, r3
 800b632:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b634:	e00f      	b.n	800b656 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b636:	4b1b      	ldr	r3, [pc, #108]	; (800b6a4 <UART_SetConfig+0x90c>)
 800b638:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b63a:	e00c      	b.n	800b656 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b63c:	4b1a      	ldr	r3, [pc, #104]	; (800b6a8 <UART_SetConfig+0x910>)
 800b63e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b640:	e009      	b.n	800b656 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b646:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b648:	e005      	b.n	800b656 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b64a:	2300      	movs	r3, #0
 800b64c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b64e:	2301      	movs	r3, #1
 800b650:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b654:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b658:	2b00      	cmp	r3, #0
 800b65a:	f000 81ee 	beq.w	800ba3a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b662:	4a12      	ldr	r2, [pc, #72]	; (800b6ac <UART_SetConfig+0x914>)
 800b664:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b668:	461a      	mov	r2, r3
 800b66a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b66c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b670:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	685a      	ldr	r2, [r3, #4]
 800b676:	4613      	mov	r3, r2
 800b678:	005b      	lsls	r3, r3, #1
 800b67a:	4413      	add	r3, r2
 800b67c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b67e:	429a      	cmp	r2, r3
 800b680:	d305      	bcc.n	800b68e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d910      	bls.n	800b6b0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800b68e:	2301      	movs	r3, #1
 800b690:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b694:	e1d1      	b.n	800ba3a <UART_SetConfig+0xca2>
 800b696:	bf00      	nop
 800b698:	40011c00 	.word	0x40011c00
 800b69c:	58024400 	.word	0x58024400
 800b6a0:	58000c00 	.word	0x58000c00
 800b6a4:	03d09000 	.word	0x03d09000
 800b6a8:	003d0900 	.word	0x003d0900
 800b6ac:	0800fad0 	.word	0x0800fad0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	60bb      	str	r3, [r7, #8]
 800b6b6:	60fa      	str	r2, [r7, #12]
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6bc:	4ac0      	ldr	r2, [pc, #768]	; (800b9c0 <UART_SetConfig+0xc28>)
 800b6be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6c2:	b29b      	uxth	r3, r3
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	603b      	str	r3, [r7, #0]
 800b6c8:	607a      	str	r2, [r7, #4]
 800b6ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b6d2:	f7f4 fe65 	bl	80003a0 <__aeabi_uldivmod>
 800b6d6:	4602      	mov	r2, r0
 800b6d8:	460b      	mov	r3, r1
 800b6da:	4610      	mov	r0, r2
 800b6dc:	4619      	mov	r1, r3
 800b6de:	f04f 0200 	mov.w	r2, #0
 800b6e2:	f04f 0300 	mov.w	r3, #0
 800b6e6:	020b      	lsls	r3, r1, #8
 800b6e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b6ec:	0202      	lsls	r2, r0, #8
 800b6ee:	6979      	ldr	r1, [r7, #20]
 800b6f0:	6849      	ldr	r1, [r1, #4]
 800b6f2:	0849      	lsrs	r1, r1, #1
 800b6f4:	2000      	movs	r0, #0
 800b6f6:	460c      	mov	r4, r1
 800b6f8:	4605      	mov	r5, r0
 800b6fa:	eb12 0804 	adds.w	r8, r2, r4
 800b6fe:	eb43 0905 	adc.w	r9, r3, r5
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	2200      	movs	r2, #0
 800b708:	469a      	mov	sl, r3
 800b70a:	4693      	mov	fp, r2
 800b70c:	4652      	mov	r2, sl
 800b70e:	465b      	mov	r3, fp
 800b710:	4640      	mov	r0, r8
 800b712:	4649      	mov	r1, r9
 800b714:	f7f4 fe44 	bl	80003a0 <__aeabi_uldivmod>
 800b718:	4602      	mov	r2, r0
 800b71a:	460b      	mov	r3, r1
 800b71c:	4613      	mov	r3, r2
 800b71e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b722:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b726:	d308      	bcc.n	800b73a <UART_SetConfig+0x9a2>
 800b728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b72a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b72e:	d204      	bcs.n	800b73a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b736:	60da      	str	r2, [r3, #12]
 800b738:	e17f      	b.n	800ba3a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800b73a:	2301      	movs	r3, #1
 800b73c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b740:	e17b      	b.n	800ba3a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	69db      	ldr	r3, [r3, #28]
 800b746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b74a:	f040 80bd 	bne.w	800b8c8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800b74e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b752:	2b20      	cmp	r3, #32
 800b754:	dc48      	bgt.n	800b7e8 <UART_SetConfig+0xa50>
 800b756:	2b00      	cmp	r3, #0
 800b758:	db7b      	blt.n	800b852 <UART_SetConfig+0xaba>
 800b75a:	2b20      	cmp	r3, #32
 800b75c:	d879      	bhi.n	800b852 <UART_SetConfig+0xaba>
 800b75e:	a201      	add	r2, pc, #4	; (adr r2, 800b764 <UART_SetConfig+0x9cc>)
 800b760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b764:	0800b7ef 	.word	0x0800b7ef
 800b768:	0800b7f7 	.word	0x0800b7f7
 800b76c:	0800b853 	.word	0x0800b853
 800b770:	0800b853 	.word	0x0800b853
 800b774:	0800b7ff 	.word	0x0800b7ff
 800b778:	0800b853 	.word	0x0800b853
 800b77c:	0800b853 	.word	0x0800b853
 800b780:	0800b853 	.word	0x0800b853
 800b784:	0800b80f 	.word	0x0800b80f
 800b788:	0800b853 	.word	0x0800b853
 800b78c:	0800b853 	.word	0x0800b853
 800b790:	0800b853 	.word	0x0800b853
 800b794:	0800b853 	.word	0x0800b853
 800b798:	0800b853 	.word	0x0800b853
 800b79c:	0800b853 	.word	0x0800b853
 800b7a0:	0800b853 	.word	0x0800b853
 800b7a4:	0800b81f 	.word	0x0800b81f
 800b7a8:	0800b853 	.word	0x0800b853
 800b7ac:	0800b853 	.word	0x0800b853
 800b7b0:	0800b853 	.word	0x0800b853
 800b7b4:	0800b853 	.word	0x0800b853
 800b7b8:	0800b853 	.word	0x0800b853
 800b7bc:	0800b853 	.word	0x0800b853
 800b7c0:	0800b853 	.word	0x0800b853
 800b7c4:	0800b853 	.word	0x0800b853
 800b7c8:	0800b853 	.word	0x0800b853
 800b7cc:	0800b853 	.word	0x0800b853
 800b7d0:	0800b853 	.word	0x0800b853
 800b7d4:	0800b853 	.word	0x0800b853
 800b7d8:	0800b853 	.word	0x0800b853
 800b7dc:	0800b853 	.word	0x0800b853
 800b7e0:	0800b853 	.word	0x0800b853
 800b7e4:	0800b845 	.word	0x0800b845
 800b7e8:	2b40      	cmp	r3, #64	; 0x40
 800b7ea:	d02e      	beq.n	800b84a <UART_SetConfig+0xab2>
 800b7ec:	e031      	b.n	800b852 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7ee:	f7fa fe7d 	bl	80064ec <HAL_RCC_GetPCLK1Freq>
 800b7f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b7f4:	e033      	b.n	800b85e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b7f6:	f7fa fe8f 	bl	8006518 <HAL_RCC_GetPCLK2Freq>
 800b7fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b7fc:	e02f      	b.n	800b85e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b802:	4618      	mov	r0, r3
 800b804:	f7fc fd4a 	bl	800829c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b80a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b80c:	e027      	b.n	800b85e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b80e:	f107 0318 	add.w	r3, r7, #24
 800b812:	4618      	mov	r0, r3
 800b814:	f7fc fe96 	bl	8008544 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b818:	69fb      	ldr	r3, [r7, #28]
 800b81a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b81c:	e01f      	b.n	800b85e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b81e:	4b69      	ldr	r3, [pc, #420]	; (800b9c4 <UART_SetConfig+0xc2c>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f003 0320 	and.w	r3, r3, #32
 800b826:	2b00      	cmp	r3, #0
 800b828:	d009      	beq.n	800b83e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b82a:	4b66      	ldr	r3, [pc, #408]	; (800b9c4 <UART_SetConfig+0xc2c>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	08db      	lsrs	r3, r3, #3
 800b830:	f003 0303 	and.w	r3, r3, #3
 800b834:	4a64      	ldr	r2, [pc, #400]	; (800b9c8 <UART_SetConfig+0xc30>)
 800b836:	fa22 f303 	lsr.w	r3, r2, r3
 800b83a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b83c:	e00f      	b.n	800b85e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800b83e:	4b62      	ldr	r3, [pc, #392]	; (800b9c8 <UART_SetConfig+0xc30>)
 800b840:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b842:	e00c      	b.n	800b85e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b844:	4b61      	ldr	r3, [pc, #388]	; (800b9cc <UART_SetConfig+0xc34>)
 800b846:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b848:	e009      	b.n	800b85e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b84a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b84e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b850:	e005      	b.n	800b85e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800b852:	2300      	movs	r3, #0
 800b854:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b856:	2301      	movs	r3, #1
 800b858:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b85c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b85e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b860:	2b00      	cmp	r3, #0
 800b862:	f000 80ea 	beq.w	800ba3a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86a:	4a55      	ldr	r2, [pc, #340]	; (800b9c0 <UART_SetConfig+0xc28>)
 800b86c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b870:	461a      	mov	r2, r3
 800b872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b874:	fbb3 f3f2 	udiv	r3, r3, r2
 800b878:	005a      	lsls	r2, r3, #1
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	085b      	lsrs	r3, r3, #1
 800b880:	441a      	add	r2, r3
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	fbb2 f3f3 	udiv	r3, r2, r3
 800b88a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b88e:	2b0f      	cmp	r3, #15
 800b890:	d916      	bls.n	800b8c0 <UART_SetConfig+0xb28>
 800b892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b898:	d212      	bcs.n	800b8c0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	f023 030f 	bic.w	r3, r3, #15
 800b8a2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a6:	085b      	lsrs	r3, r3, #1
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	f003 0307 	and.w	r3, r3, #7
 800b8ae:	b29a      	uxth	r2, r3
 800b8b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b8b2:	4313      	orrs	r3, r2
 800b8b4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b8bc:	60da      	str	r2, [r3, #12]
 800b8be:	e0bc      	b.n	800ba3a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b8c6:	e0b8      	b.n	800ba3a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b8c8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b8cc:	2b20      	cmp	r3, #32
 800b8ce:	dc4b      	bgt.n	800b968 <UART_SetConfig+0xbd0>
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	f2c0 8087 	blt.w	800b9e4 <UART_SetConfig+0xc4c>
 800b8d6:	2b20      	cmp	r3, #32
 800b8d8:	f200 8084 	bhi.w	800b9e4 <UART_SetConfig+0xc4c>
 800b8dc:	a201      	add	r2, pc, #4	; (adr r2, 800b8e4 <UART_SetConfig+0xb4c>)
 800b8de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8e2:	bf00      	nop
 800b8e4:	0800b96f 	.word	0x0800b96f
 800b8e8:	0800b977 	.word	0x0800b977
 800b8ec:	0800b9e5 	.word	0x0800b9e5
 800b8f0:	0800b9e5 	.word	0x0800b9e5
 800b8f4:	0800b97f 	.word	0x0800b97f
 800b8f8:	0800b9e5 	.word	0x0800b9e5
 800b8fc:	0800b9e5 	.word	0x0800b9e5
 800b900:	0800b9e5 	.word	0x0800b9e5
 800b904:	0800b98f 	.word	0x0800b98f
 800b908:	0800b9e5 	.word	0x0800b9e5
 800b90c:	0800b9e5 	.word	0x0800b9e5
 800b910:	0800b9e5 	.word	0x0800b9e5
 800b914:	0800b9e5 	.word	0x0800b9e5
 800b918:	0800b9e5 	.word	0x0800b9e5
 800b91c:	0800b9e5 	.word	0x0800b9e5
 800b920:	0800b9e5 	.word	0x0800b9e5
 800b924:	0800b99f 	.word	0x0800b99f
 800b928:	0800b9e5 	.word	0x0800b9e5
 800b92c:	0800b9e5 	.word	0x0800b9e5
 800b930:	0800b9e5 	.word	0x0800b9e5
 800b934:	0800b9e5 	.word	0x0800b9e5
 800b938:	0800b9e5 	.word	0x0800b9e5
 800b93c:	0800b9e5 	.word	0x0800b9e5
 800b940:	0800b9e5 	.word	0x0800b9e5
 800b944:	0800b9e5 	.word	0x0800b9e5
 800b948:	0800b9e5 	.word	0x0800b9e5
 800b94c:	0800b9e5 	.word	0x0800b9e5
 800b950:	0800b9e5 	.word	0x0800b9e5
 800b954:	0800b9e5 	.word	0x0800b9e5
 800b958:	0800b9e5 	.word	0x0800b9e5
 800b95c:	0800b9e5 	.word	0x0800b9e5
 800b960:	0800b9e5 	.word	0x0800b9e5
 800b964:	0800b9d7 	.word	0x0800b9d7
 800b968:	2b40      	cmp	r3, #64	; 0x40
 800b96a:	d037      	beq.n	800b9dc <UART_SetConfig+0xc44>
 800b96c:	e03a      	b.n	800b9e4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b96e:	f7fa fdbd 	bl	80064ec <HAL_RCC_GetPCLK1Freq>
 800b972:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b974:	e03c      	b.n	800b9f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b976:	f7fa fdcf 	bl	8006518 <HAL_RCC_GetPCLK2Freq>
 800b97a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b97c:	e038      	b.n	800b9f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b97e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b982:	4618      	mov	r0, r3
 800b984:	f7fc fc8a 	bl	800829c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b98a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b98c:	e030      	b.n	800b9f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b98e:	f107 0318 	add.w	r3, r7, #24
 800b992:	4618      	mov	r0, r3
 800b994:	f7fc fdd6 	bl	8008544 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b998:	69fb      	ldr	r3, [r7, #28]
 800b99a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b99c:	e028      	b.n	800b9f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b99e:	4b09      	ldr	r3, [pc, #36]	; (800b9c4 <UART_SetConfig+0xc2c>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f003 0320 	and.w	r3, r3, #32
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d012      	beq.n	800b9d0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b9aa:	4b06      	ldr	r3, [pc, #24]	; (800b9c4 <UART_SetConfig+0xc2c>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	08db      	lsrs	r3, r3, #3
 800b9b0:	f003 0303 	and.w	r3, r3, #3
 800b9b4:	4a04      	ldr	r2, [pc, #16]	; (800b9c8 <UART_SetConfig+0xc30>)
 800b9b6:	fa22 f303 	lsr.w	r3, r2, r3
 800b9ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b9bc:	e018      	b.n	800b9f0 <UART_SetConfig+0xc58>
 800b9be:	bf00      	nop
 800b9c0:	0800fad0 	.word	0x0800fad0
 800b9c4:	58024400 	.word	0x58024400
 800b9c8:	03d09000 	.word	0x03d09000
 800b9cc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b9d0:	4b24      	ldr	r3, [pc, #144]	; (800ba64 <UART_SetConfig+0xccc>)
 800b9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9d4:	e00c      	b.n	800b9f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b9d6:	4b24      	ldr	r3, [pc, #144]	; (800ba68 <UART_SetConfig+0xcd0>)
 800b9d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9da:	e009      	b.n	800b9f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b9dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9e2:	e005      	b.n	800b9f0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b9ee:	bf00      	nop
    }

    if (pclk != 0U)
 800b9f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d021      	beq.n	800ba3a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9fa:	4a1c      	ldr	r2, [pc, #112]	; (800ba6c <UART_SetConfig+0xcd4>)
 800b9fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba00:	461a      	mov	r2, r3
 800ba02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba04:	fbb3 f2f2 	udiv	r2, r3, r2
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	085b      	lsrs	r3, r3, #1
 800ba0e:	441a      	add	r2, r3
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	685b      	ldr	r3, [r3, #4]
 800ba14:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba18:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba1c:	2b0f      	cmp	r3, #15
 800ba1e:	d909      	bls.n	800ba34 <UART_SetConfig+0xc9c>
 800ba20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba26:	d205      	bcs.n	800ba34 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ba28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba2a:	b29a      	uxth	r2, r3
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	60da      	str	r2, [r3, #12]
 800ba32:	e002      	b.n	800ba3a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ba34:	2301      	movs	r3, #1
 800ba36:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	2201      	movs	r2, #1
 800ba46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	2200      	movs	r2, #0
 800ba54:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ba56:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3748      	adds	r7, #72	; 0x48
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba64:	03d09000 	.word	0x03d09000
 800ba68:	003d0900 	.word	0x003d0900
 800ba6c:	0800fad0 	.word	0x0800fad0

0800ba70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ba70:	b480      	push	{r7}
 800ba72:	b083      	sub	sp, #12
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba7c:	f003 0301 	and.w	r3, r3, #1
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d00a      	beq.n	800ba9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	685b      	ldr	r3, [r3, #4]
 800ba8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	430a      	orrs	r2, r1
 800ba98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba9e:	f003 0302 	and.w	r3, r3, #2
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d00a      	beq.n	800babc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	430a      	orrs	r2, r1
 800baba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bac0:	f003 0304 	and.w	r3, r3, #4
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d00a      	beq.n	800bade <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	685b      	ldr	r3, [r3, #4]
 800bace:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	430a      	orrs	r2, r1
 800badc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bae2:	f003 0308 	and.w	r3, r3, #8
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d00a      	beq.n	800bb00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	430a      	orrs	r2, r1
 800bafe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb04:	f003 0310 	and.w	r3, r3, #16
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d00a      	beq.n	800bb22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	689b      	ldr	r3, [r3, #8]
 800bb12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	430a      	orrs	r2, r1
 800bb20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb26:	f003 0320 	and.w	r3, r3, #32
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d00a      	beq.n	800bb44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	689b      	ldr	r3, [r3, #8]
 800bb34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	430a      	orrs	r2, r1
 800bb42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d01a      	beq.n	800bb86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	685b      	ldr	r3, [r3, #4]
 800bb56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	430a      	orrs	r2, r1
 800bb64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb6e:	d10a      	bne.n	800bb86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	430a      	orrs	r2, r1
 800bb84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d00a      	beq.n	800bba8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	685b      	ldr	r3, [r3, #4]
 800bb98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	430a      	orrs	r2, r1
 800bba6:	605a      	str	r2, [r3, #4]
  }
}
 800bba8:	bf00      	nop
 800bbaa:	370c      	adds	r7, #12
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr

0800bbb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b098      	sub	sp, #96	; 0x60
 800bbb8:	af02      	add	r7, sp, #8
 800bbba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bbc4:	f7f6 fcc6 	bl	8002554 <HAL_GetTick>
 800bbc8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f003 0308 	and.w	r3, r3, #8
 800bbd4:	2b08      	cmp	r3, #8
 800bbd6:	d12f      	bne.n	800bc38 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bbd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bbdc:	9300      	str	r3, [sp, #0]
 800bbde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f000 f88e 	bl	800bd08 <UART_WaitOnFlagUntilTimeout>
 800bbec:	4603      	mov	r3, r0
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d022      	beq.n	800bc38 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbfa:	e853 3f00 	ldrex	r3, [r3]
 800bbfe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bc00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc06:	653b      	str	r3, [r7, #80]	; 0x50
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc10:	647b      	str	r3, [r7, #68]	; 0x44
 800bc12:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc18:	e841 2300 	strex	r3, r2, [r1]
 800bc1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bc1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d1e6      	bne.n	800bbf2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2220      	movs	r2, #32
 800bc28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc34:	2303      	movs	r3, #3
 800bc36:	e063      	b.n	800bd00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f003 0304 	and.w	r3, r3, #4
 800bc42:	2b04      	cmp	r3, #4
 800bc44:	d149      	bne.n	800bcda <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc46:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bc4a:	9300      	str	r3, [sp, #0]
 800bc4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f000 f857 	bl	800bd08 <UART_WaitOnFlagUntilTimeout>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d03c      	beq.n	800bcda <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc68:	e853 3f00 	ldrex	r3, [r3]
 800bc6c:	623b      	str	r3, [r7, #32]
   return(result);
 800bc6e:	6a3b      	ldr	r3, [r7, #32]
 800bc70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc74:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc7e:	633b      	str	r3, [r7, #48]	; 0x30
 800bc80:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc86:	e841 2300 	strex	r3, r2, [r1]
 800bc8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d1e6      	bne.n	800bc60 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	3308      	adds	r3, #8
 800bc98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	e853 3f00 	ldrex	r3, [r3]
 800bca0:	60fb      	str	r3, [r7, #12]
   return(result);
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	f023 0301 	bic.w	r3, r3, #1
 800bca8:	64bb      	str	r3, [r7, #72]	; 0x48
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	3308      	adds	r3, #8
 800bcb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bcb2:	61fa      	str	r2, [r7, #28]
 800bcb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcb6:	69b9      	ldr	r1, [r7, #24]
 800bcb8:	69fa      	ldr	r2, [r7, #28]
 800bcba:	e841 2300 	strex	r3, r2, [r1]
 800bcbe:	617b      	str	r3, [r7, #20]
   return(result);
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d1e5      	bne.n	800bc92 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2220      	movs	r2, #32
 800bcca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bcd6:	2303      	movs	r3, #3
 800bcd8:	e012      	b.n	800bd00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2220      	movs	r2, #32
 800bcde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2220      	movs	r2, #32
 800bce6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2200      	movs	r2, #0
 800bcee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bcfe:	2300      	movs	r3, #0
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3758      	adds	r7, #88	; 0x58
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b084      	sub	sp, #16
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	60f8      	str	r0, [r7, #12]
 800bd10:	60b9      	str	r1, [r7, #8]
 800bd12:	603b      	str	r3, [r7, #0]
 800bd14:	4613      	mov	r3, r2
 800bd16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd18:	e049      	b.n	800bdae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd1a:	69bb      	ldr	r3, [r7, #24]
 800bd1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd20:	d045      	beq.n	800bdae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd22:	f7f6 fc17 	bl	8002554 <HAL_GetTick>
 800bd26:	4602      	mov	r2, r0
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	1ad3      	subs	r3, r2, r3
 800bd2c:	69ba      	ldr	r2, [r7, #24]
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d302      	bcc.n	800bd38 <UART_WaitOnFlagUntilTimeout+0x30>
 800bd32:	69bb      	ldr	r3, [r7, #24]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d101      	bne.n	800bd3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bd38:	2303      	movs	r3, #3
 800bd3a:	e048      	b.n	800bdce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f003 0304 	and.w	r3, r3, #4
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d031      	beq.n	800bdae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	69db      	ldr	r3, [r3, #28]
 800bd50:	f003 0308 	and.w	r3, r3, #8
 800bd54:	2b08      	cmp	r3, #8
 800bd56:	d110      	bne.n	800bd7a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	2208      	movs	r2, #8
 800bd5e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800bd60:	68f8      	ldr	r0, [r7, #12]
 800bd62:	f000 f95b 	bl	800c01c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2208      	movs	r2, #8
 800bd6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2200      	movs	r2, #0
 800bd72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800bd76:	2301      	movs	r3, #1
 800bd78:	e029      	b.n	800bdce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	69db      	ldr	r3, [r3, #28]
 800bd80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd88:	d111      	bne.n	800bdae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bd92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bd94:	68f8      	ldr	r0, [r7, #12]
 800bd96:	f000 f941 	bl	800c01c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	2220      	movs	r2, #32
 800bd9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2200      	movs	r2, #0
 800bda6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800bdaa:	2303      	movs	r3, #3
 800bdac:	e00f      	b.n	800bdce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	69da      	ldr	r2, [r3, #28]
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	4013      	ands	r3, r2
 800bdb8:	68ba      	ldr	r2, [r7, #8]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	bf0c      	ite	eq
 800bdbe:	2301      	moveq	r3, #1
 800bdc0:	2300      	movne	r3, #0
 800bdc2:	b2db      	uxtb	r3, r3
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	79fb      	ldrb	r3, [r7, #7]
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d0a6      	beq.n	800bd1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bdcc:	2300      	movs	r3, #0
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3710      	adds	r7, #16
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
	...

0800bdd8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b0a3      	sub	sp, #140	; 0x8c
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	60f8      	str	r0, [r7, #12]
 800bde0:	60b9      	str	r1, [r7, #8]
 800bde2:	4613      	mov	r3, r2
 800bde4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	68ba      	ldr	r2, [r7, #8]
 800bdea:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	88fa      	ldrh	r2, [r7, #6]
 800bdf0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	88fa      	ldrh	r2, [r7, #6]
 800bdf8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2200      	movs	r2, #0
 800be00:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	689b      	ldr	r3, [r3, #8]
 800be06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be0a:	d10e      	bne.n	800be2a <UART_Start_Receive_IT+0x52>
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	691b      	ldr	r3, [r3, #16]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d105      	bne.n	800be20 <UART_Start_Receive_IT+0x48>
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f240 12ff 	movw	r2, #511	; 0x1ff
 800be1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be1e:	e02d      	b.n	800be7c <UART_Start_Receive_IT+0xa4>
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	22ff      	movs	r2, #255	; 0xff
 800be24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be28:	e028      	b.n	800be7c <UART_Start_Receive_IT+0xa4>
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	689b      	ldr	r3, [r3, #8]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d10d      	bne.n	800be4e <UART_Start_Receive_IT+0x76>
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	691b      	ldr	r3, [r3, #16]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d104      	bne.n	800be44 <UART_Start_Receive_IT+0x6c>
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	22ff      	movs	r2, #255	; 0xff
 800be3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be42:	e01b      	b.n	800be7c <UART_Start_Receive_IT+0xa4>
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	227f      	movs	r2, #127	; 0x7f
 800be48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be4c:	e016      	b.n	800be7c <UART_Start_Receive_IT+0xa4>
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be56:	d10d      	bne.n	800be74 <UART_Start_Receive_IT+0x9c>
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	691b      	ldr	r3, [r3, #16]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d104      	bne.n	800be6a <UART_Start_Receive_IT+0x92>
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	227f      	movs	r2, #127	; 0x7f
 800be64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be68:	e008      	b.n	800be7c <UART_Start_Receive_IT+0xa4>
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	223f      	movs	r2, #63	; 0x3f
 800be6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be72:	e003      	b.n	800be7c <UART_Start_Receive_IT+0xa4>
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	2200      	movs	r2, #0
 800be78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2200      	movs	r2, #0
 800be80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2222      	movs	r2, #34	; 0x22
 800be88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	3308      	adds	r3, #8
 800be92:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be96:	e853 3f00 	ldrex	r3, [r3]
 800be9a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800be9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be9e:	f043 0301 	orr.w	r3, r3, #1
 800bea2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	3308      	adds	r3, #8
 800beac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800beb0:	673a      	str	r2, [r7, #112]	; 0x70
 800beb2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beb4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800beb6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800beb8:	e841 2300 	strex	r3, r2, [r1]
 800bebc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800bebe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d1e3      	bne.n	800be8c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bec8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800becc:	d14f      	bne.n	800bf6e <UART_Start_Receive_IT+0x196>
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bed4:	88fa      	ldrh	r2, [r7, #6]
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d349      	bcc.n	800bf6e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	689b      	ldr	r3, [r3, #8]
 800bede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bee2:	d107      	bne.n	800bef4 <UART_Start_Receive_IT+0x11c>
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	691b      	ldr	r3, [r3, #16]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d103      	bne.n	800bef4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	4a47      	ldr	r2, [pc, #284]	; (800c00c <UART_Start_Receive_IT+0x234>)
 800bef0:	675a      	str	r2, [r3, #116]	; 0x74
 800bef2:	e002      	b.n	800befa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	4a46      	ldr	r2, [pc, #280]	; (800c010 <UART_Start_Receive_IT+0x238>)
 800bef8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	691b      	ldr	r3, [r3, #16]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d01a      	beq.n	800bf38 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf0a:	e853 3f00 	ldrex	r3, [r3]
 800bf0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bf10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	461a      	mov	r2, r3
 800bf20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bf24:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf26:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf28:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bf2a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bf2c:	e841 2300 	strex	r3, r2, [r1]
 800bf30:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bf32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d1e4      	bne.n	800bf02 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	3308      	adds	r3, #8
 800bf3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf42:	e853 3f00 	ldrex	r3, [r3]
 800bf46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	3308      	adds	r3, #8
 800bf56:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bf58:	64ba      	str	r2, [r7, #72]	; 0x48
 800bf5a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf5c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bf5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf60:	e841 2300 	strex	r3, r2, [r1]
 800bf64:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bf66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d1e5      	bne.n	800bf38 <UART_Start_Receive_IT+0x160>
 800bf6c:	e046      	b.n	800bffc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	689b      	ldr	r3, [r3, #8]
 800bf72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf76:	d107      	bne.n	800bf88 <UART_Start_Receive_IT+0x1b0>
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	691b      	ldr	r3, [r3, #16]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d103      	bne.n	800bf88 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	4a24      	ldr	r2, [pc, #144]	; (800c014 <UART_Start_Receive_IT+0x23c>)
 800bf84:	675a      	str	r2, [r3, #116]	; 0x74
 800bf86:	e002      	b.n	800bf8e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	4a23      	ldr	r2, [pc, #140]	; (800c018 <UART_Start_Receive_IT+0x240>)
 800bf8c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	691b      	ldr	r3, [r3, #16]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d019      	beq.n	800bfca <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf9e:	e853 3f00 	ldrex	r3, [r3]
 800bfa2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800bfaa:	677b      	str	r3, [r7, #116]	; 0x74
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bfb4:	637b      	str	r3, [r7, #52]	; 0x34
 800bfb6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bfba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bfbc:	e841 2300 	strex	r3, r2, [r1]
 800bfc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bfc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d1e6      	bne.n	800bf96 <UART_Start_Receive_IT+0x1be>
 800bfc8:	e018      	b.n	800bffc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	e853 3f00 	ldrex	r3, [r3]
 800bfd6:	613b      	str	r3, [r7, #16]
   return(result);
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	f043 0320 	orr.w	r3, r3, #32
 800bfde:	67bb      	str	r3, [r7, #120]	; 0x78
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfe8:	623b      	str	r3, [r7, #32]
 800bfea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfec:	69f9      	ldr	r1, [r7, #28]
 800bfee:	6a3a      	ldr	r2, [r7, #32]
 800bff0:	e841 2300 	strex	r3, r2, [r1]
 800bff4:	61bb      	str	r3, [r7, #24]
   return(result);
 800bff6:	69bb      	ldr	r3, [r7, #24]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d1e6      	bne.n	800bfca <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800bffc:	2300      	movs	r3, #0
}
 800bffe:	4618      	mov	r0, r3
 800c000:	378c      	adds	r7, #140	; 0x8c
 800c002:	46bd      	mov	sp, r7
 800c004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c008:	4770      	bx	lr
 800c00a:	bf00      	nop
 800c00c:	0800c83d 	.word	0x0800c83d
 800c010:	0800c4dd 	.word	0x0800c4dd
 800c014:	0800c325 	.word	0x0800c325
 800c018:	0800c16d 	.word	0x0800c16d

0800c01c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b095      	sub	sp, #84	; 0x54
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c02a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c02c:	e853 3f00 	ldrex	r3, [r3]
 800c030:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c034:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c038:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	461a      	mov	r2, r3
 800c040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c042:	643b      	str	r3, [r7, #64]	; 0x40
 800c044:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c046:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c048:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c04a:	e841 2300 	strex	r3, r2, [r1]
 800c04e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c052:	2b00      	cmp	r3, #0
 800c054:	d1e6      	bne.n	800c024 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	3308      	adds	r3, #8
 800c05c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c05e:	6a3b      	ldr	r3, [r7, #32]
 800c060:	e853 3f00 	ldrex	r3, [r3]
 800c064:	61fb      	str	r3, [r7, #28]
   return(result);
 800c066:	69fa      	ldr	r2, [r7, #28]
 800c068:	4b1e      	ldr	r3, [pc, #120]	; (800c0e4 <UART_EndRxTransfer+0xc8>)
 800c06a:	4013      	ands	r3, r2
 800c06c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	3308      	adds	r3, #8
 800c074:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c076:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c078:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c07a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c07c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c07e:	e841 2300 	strex	r3, r2, [r1]
 800c082:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c086:	2b00      	cmp	r3, #0
 800c088:	d1e5      	bne.n	800c056 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c08e:	2b01      	cmp	r3, #1
 800c090:	d118      	bne.n	800c0c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	e853 3f00 	ldrex	r3, [r3]
 800c09e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	f023 0310 	bic.w	r3, r3, #16
 800c0a6:	647b      	str	r3, [r7, #68]	; 0x44
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	461a      	mov	r2, r3
 800c0ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0b0:	61bb      	str	r3, [r7, #24]
 800c0b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b4:	6979      	ldr	r1, [r7, #20]
 800c0b6:	69ba      	ldr	r2, [r7, #24]
 800c0b8:	e841 2300 	strex	r3, r2, [r1]
 800c0bc:	613b      	str	r3, [r7, #16]
   return(result);
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d1e6      	bne.n	800c092 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2220      	movs	r2, #32
 800c0c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c0d8:	bf00      	nop
 800c0da:	3754      	adds	r7, #84	; 0x54
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e2:	4770      	bx	lr
 800c0e4:	effffffe 	.word	0xeffffffe

0800c0e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2200      	movs	r2, #0
 800c102:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c106:	68f8      	ldr	r0, [r7, #12]
 800c108:	f7fe fe30 	bl	800ad6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c10c:	bf00      	nop
 800c10e:	3710      	adds	r7, #16
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b088      	sub	sp, #32
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	e853 3f00 	ldrex	r3, [r3]
 800c128:	60bb      	str	r3, [r7, #8]
   return(result);
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c130:	61fb      	str	r3, [r7, #28]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	461a      	mov	r2, r3
 800c138:	69fb      	ldr	r3, [r7, #28]
 800c13a:	61bb      	str	r3, [r7, #24]
 800c13c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c13e:	6979      	ldr	r1, [r7, #20]
 800c140:	69ba      	ldr	r2, [r7, #24]
 800c142:	e841 2300 	strex	r3, r2, [r1]
 800c146:	613b      	str	r3, [r7, #16]
   return(result);
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d1e6      	bne.n	800c11c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2220      	movs	r2, #32
 800c152:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2200      	movs	r2, #0
 800c15a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f7fe fdfb 	bl	800ad58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c162:	bf00      	nop
 800c164:	3720      	adds	r7, #32
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}
	...

0800c16c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b09c      	sub	sp, #112	; 0x70
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c17a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c184:	2b22      	cmp	r3, #34	; 0x22
 800c186:	f040 80be 	bne.w	800c306 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c190:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c194:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c198:	b2d9      	uxtb	r1, r3
 800c19a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c19e:	b2da      	uxtb	r2, r3
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1a4:	400a      	ands	r2, r1
 800c1a6:	b2d2      	uxtb	r2, r2
 800c1a8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1ae:	1c5a      	adds	r2, r3, #1
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c1ba:	b29b      	uxth	r3, r3
 800c1bc:	3b01      	subs	r3, #1
 800c1be:	b29a      	uxth	r2, r3
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c1cc:	b29b      	uxth	r3, r3
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	f040 80a1 	bne.w	800c316 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1dc:	e853 3f00 	ldrex	r3, [r3]
 800c1e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c1e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c1e8:	66bb      	str	r3, [r7, #104]	; 0x68
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c1f2:	65bb      	str	r3, [r7, #88]	; 0x58
 800c1f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c1f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c1fa:	e841 2300 	strex	r3, r2, [r1]
 800c1fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c202:	2b00      	cmp	r3, #0
 800c204:	d1e6      	bne.n	800c1d4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	3308      	adds	r3, #8
 800c20c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c210:	e853 3f00 	ldrex	r3, [r3]
 800c214:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c218:	f023 0301 	bic.w	r3, r3, #1
 800c21c:	667b      	str	r3, [r7, #100]	; 0x64
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	3308      	adds	r3, #8
 800c224:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c226:	647a      	str	r2, [r7, #68]	; 0x44
 800c228:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c22a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c22c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c22e:	e841 2300 	strex	r3, r2, [r1]
 800c232:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c236:	2b00      	cmp	r3, #0
 800c238:	d1e5      	bne.n	800c206 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2220      	movs	r2, #32
 800c23e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2200      	movs	r2, #0
 800c246:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2200      	movs	r2, #0
 800c24c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	4a33      	ldr	r2, [pc, #204]	; (800c320 <UART_RxISR_8BIT+0x1b4>)
 800c254:	4293      	cmp	r3, r2
 800c256:	d01f      	beq.n	800c298 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c262:	2b00      	cmp	r3, #0
 800c264:	d018      	beq.n	800c298 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26e:	e853 3f00 	ldrex	r3, [r3]
 800c272:	623b      	str	r3, [r7, #32]
   return(result);
 800c274:	6a3b      	ldr	r3, [r7, #32]
 800c276:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c27a:	663b      	str	r3, [r7, #96]	; 0x60
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	461a      	mov	r2, r3
 800c282:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c284:	633b      	str	r3, [r7, #48]	; 0x30
 800c286:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c288:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c28a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c28c:	e841 2300 	strex	r3, r2, [r1]
 800c290:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c294:	2b00      	cmp	r3, #0
 800c296:	d1e6      	bne.n	800c266 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c29c:	2b01      	cmp	r3, #1
 800c29e:	d12e      	bne.n	800c2fe <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	e853 3f00 	ldrex	r3, [r3]
 800c2b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	f023 0310 	bic.w	r3, r3, #16
 800c2ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2c4:	61fb      	str	r3, [r7, #28]
 800c2c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2c8:	69b9      	ldr	r1, [r7, #24]
 800c2ca:	69fa      	ldr	r2, [r7, #28]
 800c2cc:	e841 2300 	strex	r3, r2, [r1]
 800c2d0:	617b      	str	r3, [r7, #20]
   return(result);
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d1e6      	bne.n	800c2a6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	69db      	ldr	r3, [r3, #28]
 800c2de:	f003 0310 	and.w	r3, r3, #16
 800c2e2:	2b10      	cmp	r3, #16
 800c2e4:	d103      	bne.n	800c2ee <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	2210      	movs	r2, #16
 800c2ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f7fe fd42 	bl	800ad80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c2fc:	e00b      	b.n	800c316 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f7f4 fac2 	bl	8000888 <HAL_UART_RxCpltCallback>
}
 800c304:	e007      	b.n	800c316 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	699a      	ldr	r2, [r3, #24]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f042 0208 	orr.w	r2, r2, #8
 800c314:	619a      	str	r2, [r3, #24]
}
 800c316:	bf00      	nop
 800c318:	3770      	adds	r7, #112	; 0x70
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}
 800c31e:	bf00      	nop
 800c320:	58000c00 	.word	0x58000c00

0800c324 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b09c      	sub	sp, #112	; 0x70
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c332:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c33c:	2b22      	cmp	r3, #34	; 0x22
 800c33e:	f040 80be 	bne.w	800c4be <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c348:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c350:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c352:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800c356:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c35a:	4013      	ands	r3, r2
 800c35c:	b29a      	uxth	r2, r3
 800c35e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c360:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c366:	1c9a      	adds	r2, r3, #2
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c372:	b29b      	uxth	r3, r3
 800c374:	3b01      	subs	r3, #1
 800c376:	b29a      	uxth	r2, r3
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c384:	b29b      	uxth	r3, r3
 800c386:	2b00      	cmp	r3, #0
 800c388:	f040 80a1 	bne.w	800c4ce <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c394:	e853 3f00 	ldrex	r3, [r3]
 800c398:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c39a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c39c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c3a0:	667b      	str	r3, [r7, #100]	; 0x64
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3aa:	657b      	str	r3, [r7, #84]	; 0x54
 800c3ac:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c3b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c3b2:	e841 2300 	strex	r3, r2, [r1]
 800c3b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c3b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d1e6      	bne.n	800c38c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	3308      	adds	r3, #8
 800c3c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3c8:	e853 3f00 	ldrex	r3, [r3]
 800c3cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d0:	f023 0301 	bic.w	r3, r3, #1
 800c3d4:	663b      	str	r3, [r7, #96]	; 0x60
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	3308      	adds	r3, #8
 800c3dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c3de:	643a      	str	r2, [r7, #64]	; 0x40
 800c3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c3e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c3e6:	e841 2300 	strex	r3, r2, [r1]
 800c3ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d1e5      	bne.n	800c3be <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2220      	movs	r2, #32
 800c3f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2200      	movs	r2, #0
 800c404:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4a33      	ldr	r2, [pc, #204]	; (800c4d8 <UART_RxISR_16BIT+0x1b4>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d01f      	beq.n	800c450 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	685b      	ldr	r3, [r3, #4]
 800c416:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d018      	beq.n	800c450 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c424:	6a3b      	ldr	r3, [r7, #32]
 800c426:	e853 3f00 	ldrex	r3, [r3]
 800c42a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c42c:	69fb      	ldr	r3, [r7, #28]
 800c42e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c432:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	461a      	mov	r2, r3
 800c43a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c43c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c43e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c440:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c444:	e841 2300 	strex	r3, r2, [r1]
 800c448:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d1e6      	bne.n	800c41e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c454:	2b01      	cmp	r3, #1
 800c456:	d12e      	bne.n	800c4b6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2200      	movs	r2, #0
 800c45c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	e853 3f00 	ldrex	r3, [r3]
 800c46a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	f023 0310 	bic.w	r3, r3, #16
 800c472:	65bb      	str	r3, [r7, #88]	; 0x58
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	461a      	mov	r2, r3
 800c47a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c47c:	61bb      	str	r3, [r7, #24]
 800c47e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c480:	6979      	ldr	r1, [r7, #20]
 800c482:	69ba      	ldr	r2, [r7, #24]
 800c484:	e841 2300 	strex	r3, r2, [r1]
 800c488:	613b      	str	r3, [r7, #16]
   return(result);
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d1e6      	bne.n	800c45e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	69db      	ldr	r3, [r3, #28]
 800c496:	f003 0310 	and.w	r3, r3, #16
 800c49a:	2b10      	cmp	r3, #16
 800c49c:	d103      	bne.n	800c4a6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	2210      	movs	r2, #16
 800c4a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f7fe fc66 	bl	800ad80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c4b4:	e00b      	b.n	800c4ce <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f7f4 f9e6 	bl	8000888 <HAL_UART_RxCpltCallback>
}
 800c4bc:	e007      	b.n	800c4ce <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	699a      	ldr	r2, [r3, #24]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f042 0208 	orr.w	r2, r2, #8
 800c4cc:	619a      	str	r2, [r3, #24]
}
 800c4ce:	bf00      	nop
 800c4d0:	3770      	adds	r7, #112	; 0x70
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
 800c4d6:	bf00      	nop
 800c4d8:	58000c00 	.word	0x58000c00

0800c4dc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b0ac      	sub	sp, #176	; 0xb0
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c4ea:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	69db      	ldr	r3, [r3, #28]
 800c4f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	689b      	ldr	r3, [r3, #8]
 800c508:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c512:	2b22      	cmp	r3, #34	; 0x22
 800c514:	f040 8180 	bne.w	800c818 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c51e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c522:	e123      	b.n	800c76c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c52a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c52e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800c532:	b2d9      	uxtb	r1, r3
 800c534:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c538:	b2da      	uxtb	r2, r3
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c53e:	400a      	ands	r2, r1
 800c540:	b2d2      	uxtb	r2, r2
 800c542:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c548:	1c5a      	adds	r2, r3, #1
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c554:	b29b      	uxth	r3, r3
 800c556:	3b01      	subs	r3, #1
 800c558:	b29a      	uxth	r2, r3
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	69db      	ldr	r3, [r3, #28]
 800c566:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c56a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c56e:	f003 0307 	and.w	r3, r3, #7
 800c572:	2b00      	cmp	r3, #0
 800c574:	d053      	beq.n	800c61e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c576:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c57a:	f003 0301 	and.w	r3, r3, #1
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d011      	beq.n	800c5a6 <UART_RxISR_8BIT_FIFOEN+0xca>
 800c582:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d00b      	beq.n	800c5a6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	2201      	movs	r2, #1
 800c594:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c59c:	f043 0201 	orr.w	r2, r3, #1
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c5a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c5aa:	f003 0302 	and.w	r3, r3, #2
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d011      	beq.n	800c5d6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c5b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c5b6:	f003 0301 	and.w	r3, r3, #1
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d00b      	beq.n	800c5d6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	2202      	movs	r2, #2
 800c5c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5cc:	f043 0204 	orr.w	r2, r3, #4
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c5d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c5da:	f003 0304 	and.w	r3, r3, #4
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d011      	beq.n	800c606 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c5e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c5e6:	f003 0301 	and.w	r3, r3, #1
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d00b      	beq.n	800c606 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	2204      	movs	r2, #4
 800c5f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5fc:	f043 0202 	orr.w	r2, r3, #2
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d006      	beq.n	800c61e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f7fe fbab 	bl	800ad6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2200      	movs	r2, #0
 800c61a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c624:	b29b      	uxth	r3, r3
 800c626:	2b00      	cmp	r3, #0
 800c628:	f040 80a0 	bne.w	800c76c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c632:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c634:	e853 3f00 	ldrex	r3, [r3]
 800c638:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800c63a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c63c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c640:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	461a      	mov	r2, r3
 800c64a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c64e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c650:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c652:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c654:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c656:	e841 2300 	strex	r3, r2, [r1]
 800c65a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800c65c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d1e4      	bne.n	800c62c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	3308      	adds	r3, #8
 800c668:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c66a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c66c:	e853 3f00 	ldrex	r3, [r3]
 800c670:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c672:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c674:	4b6e      	ldr	r3, [pc, #440]	; (800c830 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800c676:	4013      	ands	r3, r2
 800c678:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	3308      	adds	r3, #8
 800c682:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c686:	66ba      	str	r2, [r7, #104]	; 0x68
 800c688:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c68a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c68c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c68e:	e841 2300 	strex	r3, r2, [r1]
 800c692:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c694:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c696:	2b00      	cmp	r3, #0
 800c698:	d1e3      	bne.n	800c662 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2220      	movs	r2, #32
 800c69e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	4a60      	ldr	r2, [pc, #384]	; (800c834 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d021      	beq.n	800c6fc <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	685b      	ldr	r3, [r3, #4]
 800c6be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d01a      	beq.n	800c6fc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6ce:	e853 3f00 	ldrex	r3, [r3]
 800c6d2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c6d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c6da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c6e8:	657b      	str	r3, [r7, #84]	; 0x54
 800c6ea:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c6ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c6f0:	e841 2300 	strex	r3, r2, [r1]
 800c6f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c6f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d1e4      	bne.n	800c6c6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c700:	2b01      	cmp	r3, #1
 800c702:	d130      	bne.n	800c766 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2200      	movs	r2, #0
 800c708:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c712:	e853 3f00 	ldrex	r3, [r3]
 800c716:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c71a:	f023 0310 	bic.w	r3, r3, #16
 800c71e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	461a      	mov	r2, r3
 800c728:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c72c:	643b      	str	r3, [r7, #64]	; 0x40
 800c72e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c730:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c732:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c734:	e841 2300 	strex	r3, r2, [r1]
 800c738:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d1e4      	bne.n	800c70a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	69db      	ldr	r3, [r3, #28]
 800c746:	f003 0310 	and.w	r3, r3, #16
 800c74a:	2b10      	cmp	r3, #16
 800c74c:	d103      	bne.n	800c756 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	2210      	movs	r2, #16
 800c754:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c75c:	4619      	mov	r1, r3
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f7fe fb0e 	bl	800ad80 <HAL_UARTEx_RxEventCallback>
 800c764:	e002      	b.n	800c76c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f7f4 f88e 	bl	8000888 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c76c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800c770:	2b00      	cmp	r3, #0
 800c772:	d006      	beq.n	800c782 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800c774:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c778:	f003 0320 	and.w	r3, r3, #32
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	f47f aed1 	bne.w	800c524 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c788:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c78c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c790:	2b00      	cmp	r3, #0
 800c792:	d049      	beq.n	800c828 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c79a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d242      	bcs.n	800c828 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	3308      	adds	r3, #8
 800c7a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7aa:	6a3b      	ldr	r3, [r7, #32]
 800c7ac:	e853 3f00 	ldrex	r3, [r3]
 800c7b0:	61fb      	str	r3, [r7, #28]
   return(result);
 800c7b2:	69fb      	ldr	r3, [r7, #28]
 800c7b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c7b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	3308      	adds	r3, #8
 800c7c2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c7c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c7c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c7cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7ce:	e841 2300 	strex	r3, r2, [r1]
 800c7d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d1e3      	bne.n	800c7a2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	4a16      	ldr	r2, [pc, #88]	; (800c838 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c7de:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	e853 3f00 	ldrex	r3, [r3]
 800c7ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	f043 0320 	orr.w	r3, r3, #32
 800c7f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	461a      	mov	r2, r3
 800c7fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c802:	61bb      	str	r3, [r7, #24]
 800c804:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c806:	6979      	ldr	r1, [r7, #20]
 800c808:	69ba      	ldr	r2, [r7, #24]
 800c80a:	e841 2300 	strex	r3, r2, [r1]
 800c80e:	613b      	str	r3, [r7, #16]
   return(result);
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d1e4      	bne.n	800c7e0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c816:	e007      	b.n	800c828 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	699a      	ldr	r2, [r3, #24]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f042 0208 	orr.w	r2, r2, #8
 800c826:	619a      	str	r2, [r3, #24]
}
 800c828:	bf00      	nop
 800c82a:	37b0      	adds	r7, #176	; 0xb0
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}
 800c830:	effffffe 	.word	0xeffffffe
 800c834:	58000c00 	.word	0x58000c00
 800c838:	0800c16d 	.word	0x0800c16d

0800c83c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b0ae      	sub	sp, #184	; 0xb8
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c84a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	69db      	ldr	r3, [r3, #28]
 800c854:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	689b      	ldr	r3, [r3, #8]
 800c868:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c872:	2b22      	cmp	r3, #34	; 0x22
 800c874:	f040 8184 	bne.w	800cb80 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c87e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c882:	e127      	b.n	800cad4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c88a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c892:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c896:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800c89a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800c89e:	4013      	ands	r3, r2
 800c8a0:	b29a      	uxth	r2, r3
 800c8a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c8a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8ac:	1c9a      	adds	r2, r3, #2
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c8b8:	b29b      	uxth	r3, r3
 800c8ba:	3b01      	subs	r3, #1
 800c8bc:	b29a      	uxth	r2, r3
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	69db      	ldr	r3, [r3, #28]
 800c8ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c8ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c8d2:	f003 0307 	and.w	r3, r3, #7
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d053      	beq.n	800c982 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c8da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c8de:	f003 0301 	and.w	r3, r3, #1
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d011      	beq.n	800c90a <UART_RxISR_16BIT_FIFOEN+0xce>
 800c8e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c8ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d00b      	beq.n	800c90a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c900:	f043 0201 	orr.w	r2, r3, #1
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c90a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c90e:	f003 0302 	and.w	r3, r3, #2
 800c912:	2b00      	cmp	r3, #0
 800c914:	d011      	beq.n	800c93a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c916:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c91a:	f003 0301 	and.w	r3, r3, #1
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d00b      	beq.n	800c93a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	2202      	movs	r2, #2
 800c928:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c930:	f043 0204 	orr.w	r2, r3, #4
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c93a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c93e:	f003 0304 	and.w	r3, r3, #4
 800c942:	2b00      	cmp	r3, #0
 800c944:	d011      	beq.n	800c96a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c946:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c94a:	f003 0301 	and.w	r3, r3, #1
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d00b      	beq.n	800c96a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	2204      	movs	r2, #4
 800c958:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c960:	f043 0202 	orr.w	r2, r3, #2
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c970:	2b00      	cmp	r3, #0
 800c972:	d006      	beq.n	800c982 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f7fe f9f9 	bl	800ad6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2200      	movs	r2, #0
 800c97e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c988:	b29b      	uxth	r3, r3
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	f040 80a2 	bne.w	800cad4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c998:	e853 3f00 	ldrex	r3, [r3]
 800c99c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c99e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c9a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c9a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	461a      	mov	r2, r3
 800c9ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c9b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c9b6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c9ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c9be:	e841 2300 	strex	r3, r2, [r1]
 800c9c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c9c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d1e2      	bne.n	800c990 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	3308      	adds	r3, #8
 800c9d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c9d4:	e853 3f00 	ldrex	r3, [r3]
 800c9d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c9da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c9dc:	4b6e      	ldr	r3, [pc, #440]	; (800cb98 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800c9de:	4013      	ands	r3, r2
 800c9e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	3308      	adds	r3, #8
 800c9ea:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c9ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c9f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c9f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c9f6:	e841 2300 	strex	r3, r2, [r1]
 800c9fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c9fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d1e3      	bne.n	800c9ca <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2220      	movs	r2, #32
 800ca06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2200      	movs	r2, #0
 800ca14:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	4a60      	ldr	r2, [pc, #384]	; (800cb9c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	d021      	beq.n	800ca64 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	685b      	ldr	r3, [r3, #4]
 800ca26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d01a      	beq.n	800ca64 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca36:	e853 3f00 	ldrex	r3, [r3]
 800ca3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ca3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ca42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ca50:	65bb      	str	r3, [r7, #88]	; 0x58
 800ca52:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ca56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca58:	e841 2300 	strex	r3, r2, [r1]
 800ca5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ca5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d1e4      	bne.n	800ca2e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d130      	bne.n	800cace <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca7a:	e853 3f00 	ldrex	r3, [r3]
 800ca7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ca80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca82:	f023 0310 	bic.w	r3, r3, #16
 800ca86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	461a      	mov	r2, r3
 800ca90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ca94:	647b      	str	r3, [r7, #68]	; 0x44
 800ca96:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ca9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ca9c:	e841 2300 	strex	r3, r2, [r1]
 800caa0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800caa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d1e4      	bne.n	800ca72 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	69db      	ldr	r3, [r3, #28]
 800caae:	f003 0310 	and.w	r3, r3, #16
 800cab2:	2b10      	cmp	r3, #16
 800cab4:	d103      	bne.n	800cabe <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	2210      	movs	r2, #16
 800cabc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cac4:	4619      	mov	r1, r3
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f7fe f95a 	bl	800ad80 <HAL_UARTEx_RxEventCallback>
 800cacc:	e002      	b.n	800cad4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f7f3 feda 	bl	8000888 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cad4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d006      	beq.n	800caea <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800cadc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cae0:	f003 0320 	and.w	r3, r3, #32
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	f47f aecd 	bne.w	800c884 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800caf0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800caf4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d049      	beq.n	800cb90 <UART_RxISR_16BIT_FIFOEN+0x354>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cb02:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800cb06:	429a      	cmp	r2, r3
 800cb08:	d242      	bcs.n	800cb90 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	3308      	adds	r3, #8
 800cb10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb14:	e853 3f00 	ldrex	r3, [r3]
 800cb18:	623b      	str	r3, [r7, #32]
   return(result);
 800cb1a:	6a3b      	ldr	r3, [r7, #32]
 800cb1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	3308      	adds	r3, #8
 800cb2a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800cb2e:	633a      	str	r2, [r7, #48]	; 0x30
 800cb30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb36:	e841 2300 	strex	r3, r2, [r1]
 800cb3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d1e3      	bne.n	800cb0a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	4a16      	ldr	r2, [pc, #88]	; (800cba0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800cb46:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	e853 3f00 	ldrex	r3, [r3]
 800cb54:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	f043 0320 	orr.w	r3, r3, #32
 800cb5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	461a      	mov	r2, r3
 800cb66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cb6a:	61fb      	str	r3, [r7, #28]
 800cb6c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb6e:	69b9      	ldr	r1, [r7, #24]
 800cb70:	69fa      	ldr	r2, [r7, #28]
 800cb72:	e841 2300 	strex	r3, r2, [r1]
 800cb76:	617b      	str	r3, [r7, #20]
   return(result);
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d1e4      	bne.n	800cb48 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cb7e:	e007      	b.n	800cb90 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	699a      	ldr	r2, [r3, #24]
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f042 0208 	orr.w	r2, r2, #8
 800cb8e:	619a      	str	r2, [r3, #24]
}
 800cb90:	bf00      	nop
 800cb92:	37b8      	adds	r7, #184	; 0xb8
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}
 800cb98:	effffffe 	.word	0xeffffffe
 800cb9c:	58000c00 	.word	0x58000c00
 800cba0:	0800c325 	.word	0x0800c325

0800cba4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b083      	sub	sp, #12
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cbac:	bf00      	nop
 800cbae:	370c      	adds	r7, #12
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb6:	4770      	bx	lr

0800cbb8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cbb8:	b480      	push	{r7}
 800cbba:	b083      	sub	sp, #12
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cbc0:	bf00      	nop
 800cbc2:	370c      	adds	r7, #12
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbca:	4770      	bx	lr

0800cbcc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b083      	sub	sp, #12
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cbd4:	bf00      	nop
 800cbd6:	370c      	adds	r7, #12
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbde:	4770      	bx	lr

0800cbe0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b085      	sub	sp, #20
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cbee:	2b01      	cmp	r3, #1
 800cbf0:	d101      	bne.n	800cbf6 <HAL_UARTEx_DisableFifoMode+0x16>
 800cbf2:	2302      	movs	r3, #2
 800cbf4:	e027      	b.n	800cc46 <HAL_UARTEx_DisableFifoMode+0x66>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2201      	movs	r2, #1
 800cbfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2224      	movs	r2, #36	; 0x24
 800cc02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	681a      	ldr	r2, [r3, #0]
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f022 0201 	bic.w	r2, r2, #1
 800cc1c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cc24:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	68fa      	ldr	r2, [r7, #12]
 800cc32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2220      	movs	r2, #32
 800cc38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2200      	movs	r2, #0
 800cc40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cc44:	2300      	movs	r3, #0
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3714      	adds	r7, #20
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc50:	4770      	bx	lr

0800cc52 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cc52:	b580      	push	{r7, lr}
 800cc54:	b084      	sub	sp, #16
 800cc56:	af00      	add	r7, sp, #0
 800cc58:	6078      	str	r0, [r7, #4]
 800cc5a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cc62:	2b01      	cmp	r3, #1
 800cc64:	d101      	bne.n	800cc6a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cc66:	2302      	movs	r3, #2
 800cc68:	e02d      	b.n	800ccc6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2201      	movs	r2, #1
 800cc6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2224      	movs	r2, #36	; 0x24
 800cc76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	681a      	ldr	r2, [r3, #0]
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f022 0201 	bic.w	r2, r2, #1
 800cc90:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	689b      	ldr	r3, [r3, #8]
 800cc98:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	683a      	ldr	r2, [r7, #0]
 800cca2:	430a      	orrs	r2, r1
 800cca4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f000 f850 	bl	800cd4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	68fa      	ldr	r2, [r7, #12]
 800ccb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2220      	movs	r2, #32
 800ccb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ccc4:	2300      	movs	r3, #0
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3710      	adds	r7, #16
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}

0800ccce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ccce:	b580      	push	{r7, lr}
 800ccd0:	b084      	sub	sp, #16
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	6078      	str	r0, [r7, #4]
 800ccd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ccde:	2b01      	cmp	r3, #1
 800cce0:	d101      	bne.n	800cce6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cce2:	2302      	movs	r3, #2
 800cce4:	e02d      	b.n	800cd42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2201      	movs	r2, #1
 800ccea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2224      	movs	r2, #36	; 0x24
 800ccf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	681a      	ldr	r2, [r3, #0]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f022 0201 	bic.w	r2, r2, #1
 800cd0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	689b      	ldr	r3, [r3, #8]
 800cd14:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	683a      	ldr	r2, [r7, #0]
 800cd1e:	430a      	orrs	r2, r1
 800cd20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f000 f812 	bl	800cd4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	68fa      	ldr	r2, [r7, #12]
 800cd2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2220      	movs	r2, #32
 800cd34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cd40:	2300      	movs	r3, #0
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3710      	adds	r7, #16
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}
	...

0800cd4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b085      	sub	sp, #20
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d108      	bne.n	800cd6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2201      	movs	r2, #1
 800cd60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2201      	movs	r2, #1
 800cd68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cd6c:	e031      	b.n	800cdd2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cd6e:	2310      	movs	r3, #16
 800cd70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cd72:	2310      	movs	r3, #16
 800cd74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	689b      	ldr	r3, [r3, #8]
 800cd7c:	0e5b      	lsrs	r3, r3, #25
 800cd7e:	b2db      	uxtb	r3, r3
 800cd80:	f003 0307 	and.w	r3, r3, #7
 800cd84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	689b      	ldr	r3, [r3, #8]
 800cd8c:	0f5b      	lsrs	r3, r3, #29
 800cd8e:	b2db      	uxtb	r3, r3
 800cd90:	f003 0307 	and.w	r3, r3, #7
 800cd94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cd96:	7bbb      	ldrb	r3, [r7, #14]
 800cd98:	7b3a      	ldrb	r2, [r7, #12]
 800cd9a:	4911      	ldr	r1, [pc, #68]	; (800cde0 <UARTEx_SetNbDataToProcess+0x94>)
 800cd9c:	5c8a      	ldrb	r2, [r1, r2]
 800cd9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cda2:	7b3a      	ldrb	r2, [r7, #12]
 800cda4:	490f      	ldr	r1, [pc, #60]	; (800cde4 <UARTEx_SetNbDataToProcess+0x98>)
 800cda6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cda8:	fb93 f3f2 	sdiv	r3, r3, r2
 800cdac:	b29a      	uxth	r2, r3
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cdb4:	7bfb      	ldrb	r3, [r7, #15]
 800cdb6:	7b7a      	ldrb	r2, [r7, #13]
 800cdb8:	4909      	ldr	r1, [pc, #36]	; (800cde0 <UARTEx_SetNbDataToProcess+0x94>)
 800cdba:	5c8a      	ldrb	r2, [r1, r2]
 800cdbc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cdc0:	7b7a      	ldrb	r2, [r7, #13]
 800cdc2:	4908      	ldr	r1, [pc, #32]	; (800cde4 <UARTEx_SetNbDataToProcess+0x98>)
 800cdc4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cdc6:	fb93 f3f2 	sdiv	r3, r3, r2
 800cdca:	b29a      	uxth	r2, r3
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cdd2:	bf00      	nop
 800cdd4:	3714      	adds	r7, #20
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr
 800cdde:	bf00      	nop
 800cde0:	0800fae8 	.word	0x0800fae8
 800cde4:	0800faf0 	.word	0x0800faf0

0800cde8 <__cvt>:
 800cde8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdea:	ed2d 8b02 	vpush	{d8}
 800cdee:	eeb0 8b40 	vmov.f64	d8, d0
 800cdf2:	b085      	sub	sp, #20
 800cdf4:	4617      	mov	r7, r2
 800cdf6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800cdf8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800cdfa:	ee18 2a90 	vmov	r2, s17
 800cdfe:	f025 0520 	bic.w	r5, r5, #32
 800ce02:	2a00      	cmp	r2, #0
 800ce04:	bfb6      	itet	lt
 800ce06:	222d      	movlt	r2, #45	; 0x2d
 800ce08:	2200      	movge	r2, #0
 800ce0a:	eeb1 8b40 	vneglt.f64	d8, d0
 800ce0e:	2d46      	cmp	r5, #70	; 0x46
 800ce10:	460c      	mov	r4, r1
 800ce12:	701a      	strb	r2, [r3, #0]
 800ce14:	d004      	beq.n	800ce20 <__cvt+0x38>
 800ce16:	2d45      	cmp	r5, #69	; 0x45
 800ce18:	d100      	bne.n	800ce1c <__cvt+0x34>
 800ce1a:	3401      	adds	r4, #1
 800ce1c:	2102      	movs	r1, #2
 800ce1e:	e000      	b.n	800ce22 <__cvt+0x3a>
 800ce20:	2103      	movs	r1, #3
 800ce22:	ab03      	add	r3, sp, #12
 800ce24:	9301      	str	r3, [sp, #4]
 800ce26:	ab02      	add	r3, sp, #8
 800ce28:	9300      	str	r3, [sp, #0]
 800ce2a:	4622      	mov	r2, r4
 800ce2c:	4633      	mov	r3, r6
 800ce2e:	eeb0 0b48 	vmov.f64	d0, d8
 800ce32:	f000 ff45 	bl	800dcc0 <_dtoa_r>
 800ce36:	2d47      	cmp	r5, #71	; 0x47
 800ce38:	d101      	bne.n	800ce3e <__cvt+0x56>
 800ce3a:	07fb      	lsls	r3, r7, #31
 800ce3c:	d51a      	bpl.n	800ce74 <__cvt+0x8c>
 800ce3e:	2d46      	cmp	r5, #70	; 0x46
 800ce40:	eb00 0204 	add.w	r2, r0, r4
 800ce44:	d10c      	bne.n	800ce60 <__cvt+0x78>
 800ce46:	7803      	ldrb	r3, [r0, #0]
 800ce48:	2b30      	cmp	r3, #48	; 0x30
 800ce4a:	d107      	bne.n	800ce5c <__cvt+0x74>
 800ce4c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ce50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce54:	bf1c      	itt	ne
 800ce56:	f1c4 0401 	rsbne	r4, r4, #1
 800ce5a:	6034      	strne	r4, [r6, #0]
 800ce5c:	6833      	ldr	r3, [r6, #0]
 800ce5e:	441a      	add	r2, r3
 800ce60:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ce64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce68:	bf08      	it	eq
 800ce6a:	9203      	streq	r2, [sp, #12]
 800ce6c:	2130      	movs	r1, #48	; 0x30
 800ce6e:	9b03      	ldr	r3, [sp, #12]
 800ce70:	4293      	cmp	r3, r2
 800ce72:	d307      	bcc.n	800ce84 <__cvt+0x9c>
 800ce74:	9b03      	ldr	r3, [sp, #12]
 800ce76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ce78:	1a1b      	subs	r3, r3, r0
 800ce7a:	6013      	str	r3, [r2, #0]
 800ce7c:	b005      	add	sp, #20
 800ce7e:	ecbd 8b02 	vpop	{d8}
 800ce82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce84:	1c5c      	adds	r4, r3, #1
 800ce86:	9403      	str	r4, [sp, #12]
 800ce88:	7019      	strb	r1, [r3, #0]
 800ce8a:	e7f0      	b.n	800ce6e <__cvt+0x86>

0800ce8c <__exponent>:
 800ce8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2900      	cmp	r1, #0
 800ce92:	bfb8      	it	lt
 800ce94:	4249      	neglt	r1, r1
 800ce96:	f803 2b02 	strb.w	r2, [r3], #2
 800ce9a:	bfb4      	ite	lt
 800ce9c:	222d      	movlt	r2, #45	; 0x2d
 800ce9e:	222b      	movge	r2, #43	; 0x2b
 800cea0:	2909      	cmp	r1, #9
 800cea2:	7042      	strb	r2, [r0, #1]
 800cea4:	dd2a      	ble.n	800cefc <__exponent+0x70>
 800cea6:	f10d 0207 	add.w	r2, sp, #7
 800ceaa:	4617      	mov	r7, r2
 800ceac:	260a      	movs	r6, #10
 800ceae:	4694      	mov	ip, r2
 800ceb0:	fb91 f5f6 	sdiv	r5, r1, r6
 800ceb4:	fb06 1415 	mls	r4, r6, r5, r1
 800ceb8:	3430      	adds	r4, #48	; 0x30
 800ceba:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800cebe:	460c      	mov	r4, r1
 800cec0:	2c63      	cmp	r4, #99	; 0x63
 800cec2:	f102 32ff 	add.w	r2, r2, #4294967295
 800cec6:	4629      	mov	r1, r5
 800cec8:	dcf1      	bgt.n	800ceae <__exponent+0x22>
 800ceca:	3130      	adds	r1, #48	; 0x30
 800cecc:	f1ac 0402 	sub.w	r4, ip, #2
 800ced0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ced4:	1c41      	adds	r1, r0, #1
 800ced6:	4622      	mov	r2, r4
 800ced8:	42ba      	cmp	r2, r7
 800ceda:	d30a      	bcc.n	800cef2 <__exponent+0x66>
 800cedc:	f10d 0209 	add.w	r2, sp, #9
 800cee0:	eba2 020c 	sub.w	r2, r2, ip
 800cee4:	42bc      	cmp	r4, r7
 800cee6:	bf88      	it	hi
 800cee8:	2200      	movhi	r2, #0
 800ceea:	4413      	add	r3, r2
 800ceec:	1a18      	subs	r0, r3, r0
 800ceee:	b003      	add	sp, #12
 800cef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cef2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cef6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800cefa:	e7ed      	b.n	800ced8 <__exponent+0x4c>
 800cefc:	2330      	movs	r3, #48	; 0x30
 800cefe:	3130      	adds	r1, #48	; 0x30
 800cf00:	7083      	strb	r3, [r0, #2]
 800cf02:	70c1      	strb	r1, [r0, #3]
 800cf04:	1d03      	adds	r3, r0, #4
 800cf06:	e7f1      	b.n	800ceec <__exponent+0x60>

0800cf08 <_printf_float>:
 800cf08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf0c:	b08b      	sub	sp, #44	; 0x2c
 800cf0e:	460c      	mov	r4, r1
 800cf10:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800cf14:	4616      	mov	r6, r2
 800cf16:	461f      	mov	r7, r3
 800cf18:	4605      	mov	r5, r0
 800cf1a:	f000 fdcf 	bl	800dabc <_localeconv_r>
 800cf1e:	f8d0 b000 	ldr.w	fp, [r0]
 800cf22:	4658      	mov	r0, fp
 800cf24:	f7f3 fa34 	bl	8000390 <strlen>
 800cf28:	2300      	movs	r3, #0
 800cf2a:	9308      	str	r3, [sp, #32]
 800cf2c:	f8d8 3000 	ldr.w	r3, [r8]
 800cf30:	f894 9018 	ldrb.w	r9, [r4, #24]
 800cf34:	6822      	ldr	r2, [r4, #0]
 800cf36:	3307      	adds	r3, #7
 800cf38:	f023 0307 	bic.w	r3, r3, #7
 800cf3c:	f103 0108 	add.w	r1, r3, #8
 800cf40:	f8c8 1000 	str.w	r1, [r8]
 800cf44:	ed93 0b00 	vldr	d0, [r3]
 800cf48:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800d1a8 <_printf_float+0x2a0>
 800cf4c:	eeb0 7bc0 	vabs.f64	d7, d0
 800cf50:	eeb4 7b46 	vcmp.f64	d7, d6
 800cf54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf58:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800cf5c:	4682      	mov	sl, r0
 800cf5e:	dd24      	ble.n	800cfaa <_printf_float+0xa2>
 800cf60:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cf64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf68:	d502      	bpl.n	800cf70 <_printf_float+0x68>
 800cf6a:	232d      	movs	r3, #45	; 0x2d
 800cf6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf70:	498f      	ldr	r1, [pc, #572]	; (800d1b0 <_printf_float+0x2a8>)
 800cf72:	4b90      	ldr	r3, [pc, #576]	; (800d1b4 <_printf_float+0x2ac>)
 800cf74:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800cf78:	bf94      	ite	ls
 800cf7a:	4688      	movls	r8, r1
 800cf7c:	4698      	movhi	r8, r3
 800cf7e:	2303      	movs	r3, #3
 800cf80:	6123      	str	r3, [r4, #16]
 800cf82:	f022 0204 	bic.w	r2, r2, #4
 800cf86:	2300      	movs	r3, #0
 800cf88:	6022      	str	r2, [r4, #0]
 800cf8a:	9304      	str	r3, [sp, #16]
 800cf8c:	9700      	str	r7, [sp, #0]
 800cf8e:	4633      	mov	r3, r6
 800cf90:	aa09      	add	r2, sp, #36	; 0x24
 800cf92:	4621      	mov	r1, r4
 800cf94:	4628      	mov	r0, r5
 800cf96:	f000 f9d1 	bl	800d33c <_printf_common>
 800cf9a:	3001      	adds	r0, #1
 800cf9c:	f040 808a 	bne.w	800d0b4 <_printf_float+0x1ac>
 800cfa0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfa4:	b00b      	add	sp, #44	; 0x2c
 800cfa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfaa:	eeb4 0b40 	vcmp.f64	d0, d0
 800cfae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfb2:	d709      	bvc.n	800cfc8 <_printf_float+0xc0>
 800cfb4:	ee10 3a90 	vmov	r3, s1
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	bfbc      	itt	lt
 800cfbc:	232d      	movlt	r3, #45	; 0x2d
 800cfbe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cfc2:	497d      	ldr	r1, [pc, #500]	; (800d1b8 <_printf_float+0x2b0>)
 800cfc4:	4b7d      	ldr	r3, [pc, #500]	; (800d1bc <_printf_float+0x2b4>)
 800cfc6:	e7d5      	b.n	800cf74 <_printf_float+0x6c>
 800cfc8:	6863      	ldr	r3, [r4, #4]
 800cfca:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800cfce:	9104      	str	r1, [sp, #16]
 800cfd0:	1c59      	adds	r1, r3, #1
 800cfd2:	d13c      	bne.n	800d04e <_printf_float+0x146>
 800cfd4:	2306      	movs	r3, #6
 800cfd6:	6063      	str	r3, [r4, #4]
 800cfd8:	2300      	movs	r3, #0
 800cfda:	9303      	str	r3, [sp, #12]
 800cfdc:	ab08      	add	r3, sp, #32
 800cfde:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800cfe2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cfe6:	ab07      	add	r3, sp, #28
 800cfe8:	6861      	ldr	r1, [r4, #4]
 800cfea:	9300      	str	r3, [sp, #0]
 800cfec:	6022      	str	r2, [r4, #0]
 800cfee:	f10d 031b 	add.w	r3, sp, #27
 800cff2:	4628      	mov	r0, r5
 800cff4:	f7ff fef8 	bl	800cde8 <__cvt>
 800cff8:	9b04      	ldr	r3, [sp, #16]
 800cffa:	9907      	ldr	r1, [sp, #28]
 800cffc:	2b47      	cmp	r3, #71	; 0x47
 800cffe:	4680      	mov	r8, r0
 800d000:	d108      	bne.n	800d014 <_printf_float+0x10c>
 800d002:	1cc8      	adds	r0, r1, #3
 800d004:	db02      	blt.n	800d00c <_printf_float+0x104>
 800d006:	6863      	ldr	r3, [r4, #4]
 800d008:	4299      	cmp	r1, r3
 800d00a:	dd41      	ble.n	800d090 <_printf_float+0x188>
 800d00c:	f1a9 0902 	sub.w	r9, r9, #2
 800d010:	fa5f f989 	uxtb.w	r9, r9
 800d014:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d018:	d820      	bhi.n	800d05c <_printf_float+0x154>
 800d01a:	3901      	subs	r1, #1
 800d01c:	464a      	mov	r2, r9
 800d01e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d022:	9107      	str	r1, [sp, #28]
 800d024:	f7ff ff32 	bl	800ce8c <__exponent>
 800d028:	9a08      	ldr	r2, [sp, #32]
 800d02a:	9004      	str	r0, [sp, #16]
 800d02c:	1813      	adds	r3, r2, r0
 800d02e:	2a01      	cmp	r2, #1
 800d030:	6123      	str	r3, [r4, #16]
 800d032:	dc02      	bgt.n	800d03a <_printf_float+0x132>
 800d034:	6822      	ldr	r2, [r4, #0]
 800d036:	07d2      	lsls	r2, r2, #31
 800d038:	d501      	bpl.n	800d03e <_printf_float+0x136>
 800d03a:	3301      	adds	r3, #1
 800d03c:	6123      	str	r3, [r4, #16]
 800d03e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d0a2      	beq.n	800cf8c <_printf_float+0x84>
 800d046:	232d      	movs	r3, #45	; 0x2d
 800d048:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d04c:	e79e      	b.n	800cf8c <_printf_float+0x84>
 800d04e:	9904      	ldr	r1, [sp, #16]
 800d050:	2947      	cmp	r1, #71	; 0x47
 800d052:	d1c1      	bne.n	800cfd8 <_printf_float+0xd0>
 800d054:	2b00      	cmp	r3, #0
 800d056:	d1bf      	bne.n	800cfd8 <_printf_float+0xd0>
 800d058:	2301      	movs	r3, #1
 800d05a:	e7bc      	b.n	800cfd6 <_printf_float+0xce>
 800d05c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d060:	d118      	bne.n	800d094 <_printf_float+0x18c>
 800d062:	2900      	cmp	r1, #0
 800d064:	6863      	ldr	r3, [r4, #4]
 800d066:	dd0b      	ble.n	800d080 <_printf_float+0x178>
 800d068:	6121      	str	r1, [r4, #16]
 800d06a:	b913      	cbnz	r3, 800d072 <_printf_float+0x16a>
 800d06c:	6822      	ldr	r2, [r4, #0]
 800d06e:	07d0      	lsls	r0, r2, #31
 800d070:	d502      	bpl.n	800d078 <_printf_float+0x170>
 800d072:	3301      	adds	r3, #1
 800d074:	440b      	add	r3, r1
 800d076:	6123      	str	r3, [r4, #16]
 800d078:	2300      	movs	r3, #0
 800d07a:	65a1      	str	r1, [r4, #88]	; 0x58
 800d07c:	9304      	str	r3, [sp, #16]
 800d07e:	e7de      	b.n	800d03e <_printf_float+0x136>
 800d080:	b913      	cbnz	r3, 800d088 <_printf_float+0x180>
 800d082:	6822      	ldr	r2, [r4, #0]
 800d084:	07d2      	lsls	r2, r2, #31
 800d086:	d501      	bpl.n	800d08c <_printf_float+0x184>
 800d088:	3302      	adds	r3, #2
 800d08a:	e7f4      	b.n	800d076 <_printf_float+0x16e>
 800d08c:	2301      	movs	r3, #1
 800d08e:	e7f2      	b.n	800d076 <_printf_float+0x16e>
 800d090:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d094:	9b08      	ldr	r3, [sp, #32]
 800d096:	4299      	cmp	r1, r3
 800d098:	db05      	blt.n	800d0a6 <_printf_float+0x19e>
 800d09a:	6823      	ldr	r3, [r4, #0]
 800d09c:	6121      	str	r1, [r4, #16]
 800d09e:	07d8      	lsls	r0, r3, #31
 800d0a0:	d5ea      	bpl.n	800d078 <_printf_float+0x170>
 800d0a2:	1c4b      	adds	r3, r1, #1
 800d0a4:	e7e7      	b.n	800d076 <_printf_float+0x16e>
 800d0a6:	2900      	cmp	r1, #0
 800d0a8:	bfd4      	ite	le
 800d0aa:	f1c1 0202 	rsble	r2, r1, #2
 800d0ae:	2201      	movgt	r2, #1
 800d0b0:	4413      	add	r3, r2
 800d0b2:	e7e0      	b.n	800d076 <_printf_float+0x16e>
 800d0b4:	6823      	ldr	r3, [r4, #0]
 800d0b6:	055a      	lsls	r2, r3, #21
 800d0b8:	d407      	bmi.n	800d0ca <_printf_float+0x1c2>
 800d0ba:	6923      	ldr	r3, [r4, #16]
 800d0bc:	4642      	mov	r2, r8
 800d0be:	4631      	mov	r1, r6
 800d0c0:	4628      	mov	r0, r5
 800d0c2:	47b8      	blx	r7
 800d0c4:	3001      	adds	r0, #1
 800d0c6:	d12a      	bne.n	800d11e <_printf_float+0x216>
 800d0c8:	e76a      	b.n	800cfa0 <_printf_float+0x98>
 800d0ca:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d0ce:	f240 80e0 	bls.w	800d292 <_printf_float+0x38a>
 800d0d2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d0d6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d0da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0de:	d133      	bne.n	800d148 <_printf_float+0x240>
 800d0e0:	4a37      	ldr	r2, [pc, #220]	; (800d1c0 <_printf_float+0x2b8>)
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	4631      	mov	r1, r6
 800d0e6:	4628      	mov	r0, r5
 800d0e8:	47b8      	blx	r7
 800d0ea:	3001      	adds	r0, #1
 800d0ec:	f43f af58 	beq.w	800cfa0 <_printf_float+0x98>
 800d0f0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	db02      	blt.n	800d0fe <_printf_float+0x1f6>
 800d0f8:	6823      	ldr	r3, [r4, #0]
 800d0fa:	07d8      	lsls	r0, r3, #31
 800d0fc:	d50f      	bpl.n	800d11e <_printf_float+0x216>
 800d0fe:	4653      	mov	r3, sl
 800d100:	465a      	mov	r2, fp
 800d102:	4631      	mov	r1, r6
 800d104:	4628      	mov	r0, r5
 800d106:	47b8      	blx	r7
 800d108:	3001      	adds	r0, #1
 800d10a:	f43f af49 	beq.w	800cfa0 <_printf_float+0x98>
 800d10e:	f04f 0800 	mov.w	r8, #0
 800d112:	f104 091a 	add.w	r9, r4, #26
 800d116:	9b08      	ldr	r3, [sp, #32]
 800d118:	3b01      	subs	r3, #1
 800d11a:	4543      	cmp	r3, r8
 800d11c:	dc09      	bgt.n	800d132 <_printf_float+0x22a>
 800d11e:	6823      	ldr	r3, [r4, #0]
 800d120:	079b      	lsls	r3, r3, #30
 800d122:	f100 8106 	bmi.w	800d332 <_printf_float+0x42a>
 800d126:	68e0      	ldr	r0, [r4, #12]
 800d128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d12a:	4298      	cmp	r0, r3
 800d12c:	bfb8      	it	lt
 800d12e:	4618      	movlt	r0, r3
 800d130:	e738      	b.n	800cfa4 <_printf_float+0x9c>
 800d132:	2301      	movs	r3, #1
 800d134:	464a      	mov	r2, r9
 800d136:	4631      	mov	r1, r6
 800d138:	4628      	mov	r0, r5
 800d13a:	47b8      	blx	r7
 800d13c:	3001      	adds	r0, #1
 800d13e:	f43f af2f 	beq.w	800cfa0 <_printf_float+0x98>
 800d142:	f108 0801 	add.w	r8, r8, #1
 800d146:	e7e6      	b.n	800d116 <_printf_float+0x20e>
 800d148:	9b07      	ldr	r3, [sp, #28]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	dc3a      	bgt.n	800d1c4 <_printf_float+0x2bc>
 800d14e:	4a1c      	ldr	r2, [pc, #112]	; (800d1c0 <_printf_float+0x2b8>)
 800d150:	2301      	movs	r3, #1
 800d152:	4631      	mov	r1, r6
 800d154:	4628      	mov	r0, r5
 800d156:	47b8      	blx	r7
 800d158:	3001      	adds	r0, #1
 800d15a:	f43f af21 	beq.w	800cfa0 <_printf_float+0x98>
 800d15e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800d162:	4313      	orrs	r3, r2
 800d164:	d102      	bne.n	800d16c <_printf_float+0x264>
 800d166:	6823      	ldr	r3, [r4, #0]
 800d168:	07d9      	lsls	r1, r3, #31
 800d16a:	d5d8      	bpl.n	800d11e <_printf_float+0x216>
 800d16c:	4653      	mov	r3, sl
 800d16e:	465a      	mov	r2, fp
 800d170:	4631      	mov	r1, r6
 800d172:	4628      	mov	r0, r5
 800d174:	47b8      	blx	r7
 800d176:	3001      	adds	r0, #1
 800d178:	f43f af12 	beq.w	800cfa0 <_printf_float+0x98>
 800d17c:	f04f 0900 	mov.w	r9, #0
 800d180:	f104 0a1a 	add.w	sl, r4, #26
 800d184:	9b07      	ldr	r3, [sp, #28]
 800d186:	425b      	negs	r3, r3
 800d188:	454b      	cmp	r3, r9
 800d18a:	dc01      	bgt.n	800d190 <_printf_float+0x288>
 800d18c:	9b08      	ldr	r3, [sp, #32]
 800d18e:	e795      	b.n	800d0bc <_printf_float+0x1b4>
 800d190:	2301      	movs	r3, #1
 800d192:	4652      	mov	r2, sl
 800d194:	4631      	mov	r1, r6
 800d196:	4628      	mov	r0, r5
 800d198:	47b8      	blx	r7
 800d19a:	3001      	adds	r0, #1
 800d19c:	f43f af00 	beq.w	800cfa0 <_printf_float+0x98>
 800d1a0:	f109 0901 	add.w	r9, r9, #1
 800d1a4:	e7ee      	b.n	800d184 <_printf_float+0x27c>
 800d1a6:	bf00      	nop
 800d1a8:	ffffffff 	.word	0xffffffff
 800d1ac:	7fefffff 	.word	0x7fefffff
 800d1b0:	0800faf8 	.word	0x0800faf8
 800d1b4:	0800fafc 	.word	0x0800fafc
 800d1b8:	0800fb00 	.word	0x0800fb00
 800d1bc:	0800fb04 	.word	0x0800fb04
 800d1c0:	0800fb08 	.word	0x0800fb08
 800d1c4:	9a08      	ldr	r2, [sp, #32]
 800d1c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	bfa8      	it	ge
 800d1cc:	461a      	movge	r2, r3
 800d1ce:	2a00      	cmp	r2, #0
 800d1d0:	4691      	mov	r9, r2
 800d1d2:	dc38      	bgt.n	800d246 <_printf_float+0x33e>
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	9305      	str	r3, [sp, #20]
 800d1d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d1dc:	f104 021a 	add.w	r2, r4, #26
 800d1e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d1e2:	9905      	ldr	r1, [sp, #20]
 800d1e4:	9304      	str	r3, [sp, #16]
 800d1e6:	eba3 0309 	sub.w	r3, r3, r9
 800d1ea:	428b      	cmp	r3, r1
 800d1ec:	dc33      	bgt.n	800d256 <_printf_float+0x34e>
 800d1ee:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	db3c      	blt.n	800d270 <_printf_float+0x368>
 800d1f6:	6823      	ldr	r3, [r4, #0]
 800d1f8:	07da      	lsls	r2, r3, #31
 800d1fa:	d439      	bmi.n	800d270 <_printf_float+0x368>
 800d1fc:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800d200:	eba2 0903 	sub.w	r9, r2, r3
 800d204:	9b04      	ldr	r3, [sp, #16]
 800d206:	1ad2      	subs	r2, r2, r3
 800d208:	4591      	cmp	r9, r2
 800d20a:	bfa8      	it	ge
 800d20c:	4691      	movge	r9, r2
 800d20e:	f1b9 0f00 	cmp.w	r9, #0
 800d212:	dc35      	bgt.n	800d280 <_printf_float+0x378>
 800d214:	f04f 0800 	mov.w	r8, #0
 800d218:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d21c:	f104 0a1a 	add.w	sl, r4, #26
 800d220:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d224:	1a9b      	subs	r3, r3, r2
 800d226:	eba3 0309 	sub.w	r3, r3, r9
 800d22a:	4543      	cmp	r3, r8
 800d22c:	f77f af77 	ble.w	800d11e <_printf_float+0x216>
 800d230:	2301      	movs	r3, #1
 800d232:	4652      	mov	r2, sl
 800d234:	4631      	mov	r1, r6
 800d236:	4628      	mov	r0, r5
 800d238:	47b8      	blx	r7
 800d23a:	3001      	adds	r0, #1
 800d23c:	f43f aeb0 	beq.w	800cfa0 <_printf_float+0x98>
 800d240:	f108 0801 	add.w	r8, r8, #1
 800d244:	e7ec      	b.n	800d220 <_printf_float+0x318>
 800d246:	4613      	mov	r3, r2
 800d248:	4631      	mov	r1, r6
 800d24a:	4642      	mov	r2, r8
 800d24c:	4628      	mov	r0, r5
 800d24e:	47b8      	blx	r7
 800d250:	3001      	adds	r0, #1
 800d252:	d1bf      	bne.n	800d1d4 <_printf_float+0x2cc>
 800d254:	e6a4      	b.n	800cfa0 <_printf_float+0x98>
 800d256:	2301      	movs	r3, #1
 800d258:	4631      	mov	r1, r6
 800d25a:	4628      	mov	r0, r5
 800d25c:	9204      	str	r2, [sp, #16]
 800d25e:	47b8      	blx	r7
 800d260:	3001      	adds	r0, #1
 800d262:	f43f ae9d 	beq.w	800cfa0 <_printf_float+0x98>
 800d266:	9b05      	ldr	r3, [sp, #20]
 800d268:	9a04      	ldr	r2, [sp, #16]
 800d26a:	3301      	adds	r3, #1
 800d26c:	9305      	str	r3, [sp, #20]
 800d26e:	e7b7      	b.n	800d1e0 <_printf_float+0x2d8>
 800d270:	4653      	mov	r3, sl
 800d272:	465a      	mov	r2, fp
 800d274:	4631      	mov	r1, r6
 800d276:	4628      	mov	r0, r5
 800d278:	47b8      	blx	r7
 800d27a:	3001      	adds	r0, #1
 800d27c:	d1be      	bne.n	800d1fc <_printf_float+0x2f4>
 800d27e:	e68f      	b.n	800cfa0 <_printf_float+0x98>
 800d280:	9a04      	ldr	r2, [sp, #16]
 800d282:	464b      	mov	r3, r9
 800d284:	4442      	add	r2, r8
 800d286:	4631      	mov	r1, r6
 800d288:	4628      	mov	r0, r5
 800d28a:	47b8      	blx	r7
 800d28c:	3001      	adds	r0, #1
 800d28e:	d1c1      	bne.n	800d214 <_printf_float+0x30c>
 800d290:	e686      	b.n	800cfa0 <_printf_float+0x98>
 800d292:	9a08      	ldr	r2, [sp, #32]
 800d294:	2a01      	cmp	r2, #1
 800d296:	dc01      	bgt.n	800d29c <_printf_float+0x394>
 800d298:	07db      	lsls	r3, r3, #31
 800d29a:	d537      	bpl.n	800d30c <_printf_float+0x404>
 800d29c:	2301      	movs	r3, #1
 800d29e:	4642      	mov	r2, r8
 800d2a0:	4631      	mov	r1, r6
 800d2a2:	4628      	mov	r0, r5
 800d2a4:	47b8      	blx	r7
 800d2a6:	3001      	adds	r0, #1
 800d2a8:	f43f ae7a 	beq.w	800cfa0 <_printf_float+0x98>
 800d2ac:	4653      	mov	r3, sl
 800d2ae:	465a      	mov	r2, fp
 800d2b0:	4631      	mov	r1, r6
 800d2b2:	4628      	mov	r0, r5
 800d2b4:	47b8      	blx	r7
 800d2b6:	3001      	adds	r0, #1
 800d2b8:	f43f ae72 	beq.w	800cfa0 <_printf_float+0x98>
 800d2bc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d2c0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d2c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2c8:	9b08      	ldr	r3, [sp, #32]
 800d2ca:	d01a      	beq.n	800d302 <_printf_float+0x3fa>
 800d2cc:	3b01      	subs	r3, #1
 800d2ce:	f108 0201 	add.w	r2, r8, #1
 800d2d2:	4631      	mov	r1, r6
 800d2d4:	4628      	mov	r0, r5
 800d2d6:	47b8      	blx	r7
 800d2d8:	3001      	adds	r0, #1
 800d2da:	d10e      	bne.n	800d2fa <_printf_float+0x3f2>
 800d2dc:	e660      	b.n	800cfa0 <_printf_float+0x98>
 800d2de:	2301      	movs	r3, #1
 800d2e0:	464a      	mov	r2, r9
 800d2e2:	4631      	mov	r1, r6
 800d2e4:	4628      	mov	r0, r5
 800d2e6:	47b8      	blx	r7
 800d2e8:	3001      	adds	r0, #1
 800d2ea:	f43f ae59 	beq.w	800cfa0 <_printf_float+0x98>
 800d2ee:	f108 0801 	add.w	r8, r8, #1
 800d2f2:	9b08      	ldr	r3, [sp, #32]
 800d2f4:	3b01      	subs	r3, #1
 800d2f6:	4543      	cmp	r3, r8
 800d2f8:	dcf1      	bgt.n	800d2de <_printf_float+0x3d6>
 800d2fa:	9b04      	ldr	r3, [sp, #16]
 800d2fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d300:	e6dd      	b.n	800d0be <_printf_float+0x1b6>
 800d302:	f04f 0800 	mov.w	r8, #0
 800d306:	f104 091a 	add.w	r9, r4, #26
 800d30a:	e7f2      	b.n	800d2f2 <_printf_float+0x3ea>
 800d30c:	2301      	movs	r3, #1
 800d30e:	4642      	mov	r2, r8
 800d310:	e7df      	b.n	800d2d2 <_printf_float+0x3ca>
 800d312:	2301      	movs	r3, #1
 800d314:	464a      	mov	r2, r9
 800d316:	4631      	mov	r1, r6
 800d318:	4628      	mov	r0, r5
 800d31a:	47b8      	blx	r7
 800d31c:	3001      	adds	r0, #1
 800d31e:	f43f ae3f 	beq.w	800cfa0 <_printf_float+0x98>
 800d322:	f108 0801 	add.w	r8, r8, #1
 800d326:	68e3      	ldr	r3, [r4, #12]
 800d328:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d32a:	1a5b      	subs	r3, r3, r1
 800d32c:	4543      	cmp	r3, r8
 800d32e:	dcf0      	bgt.n	800d312 <_printf_float+0x40a>
 800d330:	e6f9      	b.n	800d126 <_printf_float+0x21e>
 800d332:	f04f 0800 	mov.w	r8, #0
 800d336:	f104 0919 	add.w	r9, r4, #25
 800d33a:	e7f4      	b.n	800d326 <_printf_float+0x41e>

0800d33c <_printf_common>:
 800d33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d340:	4616      	mov	r6, r2
 800d342:	4699      	mov	r9, r3
 800d344:	688a      	ldr	r2, [r1, #8]
 800d346:	690b      	ldr	r3, [r1, #16]
 800d348:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d34c:	4293      	cmp	r3, r2
 800d34e:	bfb8      	it	lt
 800d350:	4613      	movlt	r3, r2
 800d352:	6033      	str	r3, [r6, #0]
 800d354:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d358:	4607      	mov	r7, r0
 800d35a:	460c      	mov	r4, r1
 800d35c:	b10a      	cbz	r2, 800d362 <_printf_common+0x26>
 800d35e:	3301      	adds	r3, #1
 800d360:	6033      	str	r3, [r6, #0]
 800d362:	6823      	ldr	r3, [r4, #0]
 800d364:	0699      	lsls	r1, r3, #26
 800d366:	bf42      	ittt	mi
 800d368:	6833      	ldrmi	r3, [r6, #0]
 800d36a:	3302      	addmi	r3, #2
 800d36c:	6033      	strmi	r3, [r6, #0]
 800d36e:	6825      	ldr	r5, [r4, #0]
 800d370:	f015 0506 	ands.w	r5, r5, #6
 800d374:	d106      	bne.n	800d384 <_printf_common+0x48>
 800d376:	f104 0a19 	add.w	sl, r4, #25
 800d37a:	68e3      	ldr	r3, [r4, #12]
 800d37c:	6832      	ldr	r2, [r6, #0]
 800d37e:	1a9b      	subs	r3, r3, r2
 800d380:	42ab      	cmp	r3, r5
 800d382:	dc26      	bgt.n	800d3d2 <_printf_common+0x96>
 800d384:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d388:	1e13      	subs	r3, r2, #0
 800d38a:	6822      	ldr	r2, [r4, #0]
 800d38c:	bf18      	it	ne
 800d38e:	2301      	movne	r3, #1
 800d390:	0692      	lsls	r2, r2, #26
 800d392:	d42b      	bmi.n	800d3ec <_printf_common+0xb0>
 800d394:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d398:	4649      	mov	r1, r9
 800d39a:	4638      	mov	r0, r7
 800d39c:	47c0      	blx	r8
 800d39e:	3001      	adds	r0, #1
 800d3a0:	d01e      	beq.n	800d3e0 <_printf_common+0xa4>
 800d3a2:	6823      	ldr	r3, [r4, #0]
 800d3a4:	6922      	ldr	r2, [r4, #16]
 800d3a6:	f003 0306 	and.w	r3, r3, #6
 800d3aa:	2b04      	cmp	r3, #4
 800d3ac:	bf02      	ittt	eq
 800d3ae:	68e5      	ldreq	r5, [r4, #12]
 800d3b0:	6833      	ldreq	r3, [r6, #0]
 800d3b2:	1aed      	subeq	r5, r5, r3
 800d3b4:	68a3      	ldr	r3, [r4, #8]
 800d3b6:	bf0c      	ite	eq
 800d3b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d3bc:	2500      	movne	r5, #0
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	bfc4      	itt	gt
 800d3c2:	1a9b      	subgt	r3, r3, r2
 800d3c4:	18ed      	addgt	r5, r5, r3
 800d3c6:	2600      	movs	r6, #0
 800d3c8:	341a      	adds	r4, #26
 800d3ca:	42b5      	cmp	r5, r6
 800d3cc:	d11a      	bne.n	800d404 <_printf_common+0xc8>
 800d3ce:	2000      	movs	r0, #0
 800d3d0:	e008      	b.n	800d3e4 <_printf_common+0xa8>
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	4652      	mov	r2, sl
 800d3d6:	4649      	mov	r1, r9
 800d3d8:	4638      	mov	r0, r7
 800d3da:	47c0      	blx	r8
 800d3dc:	3001      	adds	r0, #1
 800d3de:	d103      	bne.n	800d3e8 <_printf_common+0xac>
 800d3e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d3e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3e8:	3501      	adds	r5, #1
 800d3ea:	e7c6      	b.n	800d37a <_printf_common+0x3e>
 800d3ec:	18e1      	adds	r1, r4, r3
 800d3ee:	1c5a      	adds	r2, r3, #1
 800d3f0:	2030      	movs	r0, #48	; 0x30
 800d3f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d3f6:	4422      	add	r2, r4
 800d3f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d3fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d400:	3302      	adds	r3, #2
 800d402:	e7c7      	b.n	800d394 <_printf_common+0x58>
 800d404:	2301      	movs	r3, #1
 800d406:	4622      	mov	r2, r4
 800d408:	4649      	mov	r1, r9
 800d40a:	4638      	mov	r0, r7
 800d40c:	47c0      	blx	r8
 800d40e:	3001      	adds	r0, #1
 800d410:	d0e6      	beq.n	800d3e0 <_printf_common+0xa4>
 800d412:	3601      	adds	r6, #1
 800d414:	e7d9      	b.n	800d3ca <_printf_common+0x8e>
	...

0800d418 <_printf_i>:
 800d418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d41c:	7e0f      	ldrb	r7, [r1, #24]
 800d41e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d420:	2f78      	cmp	r7, #120	; 0x78
 800d422:	4691      	mov	r9, r2
 800d424:	4680      	mov	r8, r0
 800d426:	460c      	mov	r4, r1
 800d428:	469a      	mov	sl, r3
 800d42a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d42e:	d807      	bhi.n	800d440 <_printf_i+0x28>
 800d430:	2f62      	cmp	r7, #98	; 0x62
 800d432:	d80a      	bhi.n	800d44a <_printf_i+0x32>
 800d434:	2f00      	cmp	r7, #0
 800d436:	f000 80d4 	beq.w	800d5e2 <_printf_i+0x1ca>
 800d43a:	2f58      	cmp	r7, #88	; 0x58
 800d43c:	f000 80c0 	beq.w	800d5c0 <_printf_i+0x1a8>
 800d440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d444:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d448:	e03a      	b.n	800d4c0 <_printf_i+0xa8>
 800d44a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d44e:	2b15      	cmp	r3, #21
 800d450:	d8f6      	bhi.n	800d440 <_printf_i+0x28>
 800d452:	a101      	add	r1, pc, #4	; (adr r1, 800d458 <_printf_i+0x40>)
 800d454:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d458:	0800d4b1 	.word	0x0800d4b1
 800d45c:	0800d4c5 	.word	0x0800d4c5
 800d460:	0800d441 	.word	0x0800d441
 800d464:	0800d441 	.word	0x0800d441
 800d468:	0800d441 	.word	0x0800d441
 800d46c:	0800d441 	.word	0x0800d441
 800d470:	0800d4c5 	.word	0x0800d4c5
 800d474:	0800d441 	.word	0x0800d441
 800d478:	0800d441 	.word	0x0800d441
 800d47c:	0800d441 	.word	0x0800d441
 800d480:	0800d441 	.word	0x0800d441
 800d484:	0800d5c9 	.word	0x0800d5c9
 800d488:	0800d4f1 	.word	0x0800d4f1
 800d48c:	0800d583 	.word	0x0800d583
 800d490:	0800d441 	.word	0x0800d441
 800d494:	0800d441 	.word	0x0800d441
 800d498:	0800d5eb 	.word	0x0800d5eb
 800d49c:	0800d441 	.word	0x0800d441
 800d4a0:	0800d4f1 	.word	0x0800d4f1
 800d4a4:	0800d441 	.word	0x0800d441
 800d4a8:	0800d441 	.word	0x0800d441
 800d4ac:	0800d58b 	.word	0x0800d58b
 800d4b0:	682b      	ldr	r3, [r5, #0]
 800d4b2:	1d1a      	adds	r2, r3, #4
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	602a      	str	r2, [r5, #0]
 800d4b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d4bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	e09f      	b.n	800d604 <_printf_i+0x1ec>
 800d4c4:	6820      	ldr	r0, [r4, #0]
 800d4c6:	682b      	ldr	r3, [r5, #0]
 800d4c8:	0607      	lsls	r7, r0, #24
 800d4ca:	f103 0104 	add.w	r1, r3, #4
 800d4ce:	6029      	str	r1, [r5, #0]
 800d4d0:	d501      	bpl.n	800d4d6 <_printf_i+0xbe>
 800d4d2:	681e      	ldr	r6, [r3, #0]
 800d4d4:	e003      	b.n	800d4de <_printf_i+0xc6>
 800d4d6:	0646      	lsls	r6, r0, #25
 800d4d8:	d5fb      	bpl.n	800d4d2 <_printf_i+0xba>
 800d4da:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d4de:	2e00      	cmp	r6, #0
 800d4e0:	da03      	bge.n	800d4ea <_printf_i+0xd2>
 800d4e2:	232d      	movs	r3, #45	; 0x2d
 800d4e4:	4276      	negs	r6, r6
 800d4e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4ea:	485a      	ldr	r0, [pc, #360]	; (800d654 <_printf_i+0x23c>)
 800d4ec:	230a      	movs	r3, #10
 800d4ee:	e012      	b.n	800d516 <_printf_i+0xfe>
 800d4f0:	682b      	ldr	r3, [r5, #0]
 800d4f2:	6820      	ldr	r0, [r4, #0]
 800d4f4:	1d19      	adds	r1, r3, #4
 800d4f6:	6029      	str	r1, [r5, #0]
 800d4f8:	0605      	lsls	r5, r0, #24
 800d4fa:	d501      	bpl.n	800d500 <_printf_i+0xe8>
 800d4fc:	681e      	ldr	r6, [r3, #0]
 800d4fe:	e002      	b.n	800d506 <_printf_i+0xee>
 800d500:	0641      	lsls	r1, r0, #25
 800d502:	d5fb      	bpl.n	800d4fc <_printf_i+0xe4>
 800d504:	881e      	ldrh	r6, [r3, #0]
 800d506:	4853      	ldr	r0, [pc, #332]	; (800d654 <_printf_i+0x23c>)
 800d508:	2f6f      	cmp	r7, #111	; 0x6f
 800d50a:	bf0c      	ite	eq
 800d50c:	2308      	moveq	r3, #8
 800d50e:	230a      	movne	r3, #10
 800d510:	2100      	movs	r1, #0
 800d512:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d516:	6865      	ldr	r5, [r4, #4]
 800d518:	60a5      	str	r5, [r4, #8]
 800d51a:	2d00      	cmp	r5, #0
 800d51c:	bfa2      	ittt	ge
 800d51e:	6821      	ldrge	r1, [r4, #0]
 800d520:	f021 0104 	bicge.w	r1, r1, #4
 800d524:	6021      	strge	r1, [r4, #0]
 800d526:	b90e      	cbnz	r6, 800d52c <_printf_i+0x114>
 800d528:	2d00      	cmp	r5, #0
 800d52a:	d04b      	beq.n	800d5c4 <_printf_i+0x1ac>
 800d52c:	4615      	mov	r5, r2
 800d52e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d532:	fb03 6711 	mls	r7, r3, r1, r6
 800d536:	5dc7      	ldrb	r7, [r0, r7]
 800d538:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d53c:	4637      	mov	r7, r6
 800d53e:	42bb      	cmp	r3, r7
 800d540:	460e      	mov	r6, r1
 800d542:	d9f4      	bls.n	800d52e <_printf_i+0x116>
 800d544:	2b08      	cmp	r3, #8
 800d546:	d10b      	bne.n	800d560 <_printf_i+0x148>
 800d548:	6823      	ldr	r3, [r4, #0]
 800d54a:	07de      	lsls	r6, r3, #31
 800d54c:	d508      	bpl.n	800d560 <_printf_i+0x148>
 800d54e:	6923      	ldr	r3, [r4, #16]
 800d550:	6861      	ldr	r1, [r4, #4]
 800d552:	4299      	cmp	r1, r3
 800d554:	bfde      	ittt	le
 800d556:	2330      	movle	r3, #48	; 0x30
 800d558:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d55c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d560:	1b52      	subs	r2, r2, r5
 800d562:	6122      	str	r2, [r4, #16]
 800d564:	f8cd a000 	str.w	sl, [sp]
 800d568:	464b      	mov	r3, r9
 800d56a:	aa03      	add	r2, sp, #12
 800d56c:	4621      	mov	r1, r4
 800d56e:	4640      	mov	r0, r8
 800d570:	f7ff fee4 	bl	800d33c <_printf_common>
 800d574:	3001      	adds	r0, #1
 800d576:	d14a      	bne.n	800d60e <_printf_i+0x1f6>
 800d578:	f04f 30ff 	mov.w	r0, #4294967295
 800d57c:	b004      	add	sp, #16
 800d57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d582:	6823      	ldr	r3, [r4, #0]
 800d584:	f043 0320 	orr.w	r3, r3, #32
 800d588:	6023      	str	r3, [r4, #0]
 800d58a:	4833      	ldr	r0, [pc, #204]	; (800d658 <_printf_i+0x240>)
 800d58c:	2778      	movs	r7, #120	; 0x78
 800d58e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d592:	6823      	ldr	r3, [r4, #0]
 800d594:	6829      	ldr	r1, [r5, #0]
 800d596:	061f      	lsls	r7, r3, #24
 800d598:	f851 6b04 	ldr.w	r6, [r1], #4
 800d59c:	d402      	bmi.n	800d5a4 <_printf_i+0x18c>
 800d59e:	065f      	lsls	r7, r3, #25
 800d5a0:	bf48      	it	mi
 800d5a2:	b2b6      	uxthmi	r6, r6
 800d5a4:	07df      	lsls	r7, r3, #31
 800d5a6:	bf48      	it	mi
 800d5a8:	f043 0320 	orrmi.w	r3, r3, #32
 800d5ac:	6029      	str	r1, [r5, #0]
 800d5ae:	bf48      	it	mi
 800d5b0:	6023      	strmi	r3, [r4, #0]
 800d5b2:	b91e      	cbnz	r6, 800d5bc <_printf_i+0x1a4>
 800d5b4:	6823      	ldr	r3, [r4, #0]
 800d5b6:	f023 0320 	bic.w	r3, r3, #32
 800d5ba:	6023      	str	r3, [r4, #0]
 800d5bc:	2310      	movs	r3, #16
 800d5be:	e7a7      	b.n	800d510 <_printf_i+0xf8>
 800d5c0:	4824      	ldr	r0, [pc, #144]	; (800d654 <_printf_i+0x23c>)
 800d5c2:	e7e4      	b.n	800d58e <_printf_i+0x176>
 800d5c4:	4615      	mov	r5, r2
 800d5c6:	e7bd      	b.n	800d544 <_printf_i+0x12c>
 800d5c8:	682b      	ldr	r3, [r5, #0]
 800d5ca:	6826      	ldr	r6, [r4, #0]
 800d5cc:	6961      	ldr	r1, [r4, #20]
 800d5ce:	1d18      	adds	r0, r3, #4
 800d5d0:	6028      	str	r0, [r5, #0]
 800d5d2:	0635      	lsls	r5, r6, #24
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	d501      	bpl.n	800d5dc <_printf_i+0x1c4>
 800d5d8:	6019      	str	r1, [r3, #0]
 800d5da:	e002      	b.n	800d5e2 <_printf_i+0x1ca>
 800d5dc:	0670      	lsls	r0, r6, #25
 800d5de:	d5fb      	bpl.n	800d5d8 <_printf_i+0x1c0>
 800d5e0:	8019      	strh	r1, [r3, #0]
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	6123      	str	r3, [r4, #16]
 800d5e6:	4615      	mov	r5, r2
 800d5e8:	e7bc      	b.n	800d564 <_printf_i+0x14c>
 800d5ea:	682b      	ldr	r3, [r5, #0]
 800d5ec:	1d1a      	adds	r2, r3, #4
 800d5ee:	602a      	str	r2, [r5, #0]
 800d5f0:	681d      	ldr	r5, [r3, #0]
 800d5f2:	6862      	ldr	r2, [r4, #4]
 800d5f4:	2100      	movs	r1, #0
 800d5f6:	4628      	mov	r0, r5
 800d5f8:	f7f2 fe7a 	bl	80002f0 <memchr>
 800d5fc:	b108      	cbz	r0, 800d602 <_printf_i+0x1ea>
 800d5fe:	1b40      	subs	r0, r0, r5
 800d600:	6060      	str	r0, [r4, #4]
 800d602:	6863      	ldr	r3, [r4, #4]
 800d604:	6123      	str	r3, [r4, #16]
 800d606:	2300      	movs	r3, #0
 800d608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d60c:	e7aa      	b.n	800d564 <_printf_i+0x14c>
 800d60e:	6923      	ldr	r3, [r4, #16]
 800d610:	462a      	mov	r2, r5
 800d612:	4649      	mov	r1, r9
 800d614:	4640      	mov	r0, r8
 800d616:	47d0      	blx	sl
 800d618:	3001      	adds	r0, #1
 800d61a:	d0ad      	beq.n	800d578 <_printf_i+0x160>
 800d61c:	6823      	ldr	r3, [r4, #0]
 800d61e:	079b      	lsls	r3, r3, #30
 800d620:	d413      	bmi.n	800d64a <_printf_i+0x232>
 800d622:	68e0      	ldr	r0, [r4, #12]
 800d624:	9b03      	ldr	r3, [sp, #12]
 800d626:	4298      	cmp	r0, r3
 800d628:	bfb8      	it	lt
 800d62a:	4618      	movlt	r0, r3
 800d62c:	e7a6      	b.n	800d57c <_printf_i+0x164>
 800d62e:	2301      	movs	r3, #1
 800d630:	4632      	mov	r2, r6
 800d632:	4649      	mov	r1, r9
 800d634:	4640      	mov	r0, r8
 800d636:	47d0      	blx	sl
 800d638:	3001      	adds	r0, #1
 800d63a:	d09d      	beq.n	800d578 <_printf_i+0x160>
 800d63c:	3501      	adds	r5, #1
 800d63e:	68e3      	ldr	r3, [r4, #12]
 800d640:	9903      	ldr	r1, [sp, #12]
 800d642:	1a5b      	subs	r3, r3, r1
 800d644:	42ab      	cmp	r3, r5
 800d646:	dcf2      	bgt.n	800d62e <_printf_i+0x216>
 800d648:	e7eb      	b.n	800d622 <_printf_i+0x20a>
 800d64a:	2500      	movs	r5, #0
 800d64c:	f104 0619 	add.w	r6, r4, #25
 800d650:	e7f5      	b.n	800d63e <_printf_i+0x226>
 800d652:	bf00      	nop
 800d654:	0800fb0a 	.word	0x0800fb0a
 800d658:	0800fb1b 	.word	0x0800fb1b

0800d65c <std>:
 800d65c:	2300      	movs	r3, #0
 800d65e:	b510      	push	{r4, lr}
 800d660:	4604      	mov	r4, r0
 800d662:	e9c0 3300 	strd	r3, r3, [r0]
 800d666:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d66a:	6083      	str	r3, [r0, #8]
 800d66c:	8181      	strh	r1, [r0, #12]
 800d66e:	6643      	str	r3, [r0, #100]	; 0x64
 800d670:	81c2      	strh	r2, [r0, #14]
 800d672:	6183      	str	r3, [r0, #24]
 800d674:	4619      	mov	r1, r3
 800d676:	2208      	movs	r2, #8
 800d678:	305c      	adds	r0, #92	; 0x5c
 800d67a:	f000 fa17 	bl	800daac <memset>
 800d67e:	4b0d      	ldr	r3, [pc, #52]	; (800d6b4 <std+0x58>)
 800d680:	6263      	str	r3, [r4, #36]	; 0x24
 800d682:	4b0d      	ldr	r3, [pc, #52]	; (800d6b8 <std+0x5c>)
 800d684:	62a3      	str	r3, [r4, #40]	; 0x28
 800d686:	4b0d      	ldr	r3, [pc, #52]	; (800d6bc <std+0x60>)
 800d688:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d68a:	4b0d      	ldr	r3, [pc, #52]	; (800d6c0 <std+0x64>)
 800d68c:	6323      	str	r3, [r4, #48]	; 0x30
 800d68e:	4b0d      	ldr	r3, [pc, #52]	; (800d6c4 <std+0x68>)
 800d690:	6224      	str	r4, [r4, #32]
 800d692:	429c      	cmp	r4, r3
 800d694:	d006      	beq.n	800d6a4 <std+0x48>
 800d696:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d69a:	4294      	cmp	r4, r2
 800d69c:	d002      	beq.n	800d6a4 <std+0x48>
 800d69e:	33d0      	adds	r3, #208	; 0xd0
 800d6a0:	429c      	cmp	r4, r3
 800d6a2:	d105      	bne.n	800d6b0 <std+0x54>
 800d6a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d6a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6ac:	f000 ba7a 	b.w	800dba4 <__retarget_lock_init_recursive>
 800d6b0:	bd10      	pop	{r4, pc}
 800d6b2:	bf00      	nop
 800d6b4:	0800d8fd 	.word	0x0800d8fd
 800d6b8:	0800d91f 	.word	0x0800d91f
 800d6bc:	0800d957 	.word	0x0800d957
 800d6c0:	0800d97b 	.word	0x0800d97b
 800d6c4:	24061f3c 	.word	0x24061f3c

0800d6c8 <stdio_exit_handler>:
 800d6c8:	4a02      	ldr	r2, [pc, #8]	; (800d6d4 <stdio_exit_handler+0xc>)
 800d6ca:	4903      	ldr	r1, [pc, #12]	; (800d6d8 <stdio_exit_handler+0x10>)
 800d6cc:	4803      	ldr	r0, [pc, #12]	; (800d6dc <stdio_exit_handler+0x14>)
 800d6ce:	f000 b869 	b.w	800d7a4 <_fwalk_sglue>
 800d6d2:	bf00      	nop
 800d6d4:	24000018 	.word	0x24000018
 800d6d8:	0800f6d5 	.word	0x0800f6d5
 800d6dc:	24000024 	.word	0x24000024

0800d6e0 <cleanup_stdio>:
 800d6e0:	6841      	ldr	r1, [r0, #4]
 800d6e2:	4b0c      	ldr	r3, [pc, #48]	; (800d714 <cleanup_stdio+0x34>)
 800d6e4:	4299      	cmp	r1, r3
 800d6e6:	b510      	push	{r4, lr}
 800d6e8:	4604      	mov	r4, r0
 800d6ea:	d001      	beq.n	800d6f0 <cleanup_stdio+0x10>
 800d6ec:	f001 fff2 	bl	800f6d4 <_fflush_r>
 800d6f0:	68a1      	ldr	r1, [r4, #8]
 800d6f2:	4b09      	ldr	r3, [pc, #36]	; (800d718 <cleanup_stdio+0x38>)
 800d6f4:	4299      	cmp	r1, r3
 800d6f6:	d002      	beq.n	800d6fe <cleanup_stdio+0x1e>
 800d6f8:	4620      	mov	r0, r4
 800d6fa:	f001 ffeb 	bl	800f6d4 <_fflush_r>
 800d6fe:	68e1      	ldr	r1, [r4, #12]
 800d700:	4b06      	ldr	r3, [pc, #24]	; (800d71c <cleanup_stdio+0x3c>)
 800d702:	4299      	cmp	r1, r3
 800d704:	d004      	beq.n	800d710 <cleanup_stdio+0x30>
 800d706:	4620      	mov	r0, r4
 800d708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d70c:	f001 bfe2 	b.w	800f6d4 <_fflush_r>
 800d710:	bd10      	pop	{r4, pc}
 800d712:	bf00      	nop
 800d714:	24061f3c 	.word	0x24061f3c
 800d718:	24061fa4 	.word	0x24061fa4
 800d71c:	2406200c 	.word	0x2406200c

0800d720 <global_stdio_init.part.0>:
 800d720:	b510      	push	{r4, lr}
 800d722:	4b0b      	ldr	r3, [pc, #44]	; (800d750 <global_stdio_init.part.0+0x30>)
 800d724:	4c0b      	ldr	r4, [pc, #44]	; (800d754 <global_stdio_init.part.0+0x34>)
 800d726:	4a0c      	ldr	r2, [pc, #48]	; (800d758 <global_stdio_init.part.0+0x38>)
 800d728:	601a      	str	r2, [r3, #0]
 800d72a:	4620      	mov	r0, r4
 800d72c:	2200      	movs	r2, #0
 800d72e:	2104      	movs	r1, #4
 800d730:	f7ff ff94 	bl	800d65c <std>
 800d734:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d738:	2201      	movs	r2, #1
 800d73a:	2109      	movs	r1, #9
 800d73c:	f7ff ff8e 	bl	800d65c <std>
 800d740:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d744:	2202      	movs	r2, #2
 800d746:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d74a:	2112      	movs	r1, #18
 800d74c:	f7ff bf86 	b.w	800d65c <std>
 800d750:	24062074 	.word	0x24062074
 800d754:	24061f3c 	.word	0x24061f3c
 800d758:	0800d6c9 	.word	0x0800d6c9

0800d75c <__sfp_lock_acquire>:
 800d75c:	4801      	ldr	r0, [pc, #4]	; (800d764 <__sfp_lock_acquire+0x8>)
 800d75e:	f000 ba22 	b.w	800dba6 <__retarget_lock_acquire_recursive>
 800d762:	bf00      	nop
 800d764:	2406207d 	.word	0x2406207d

0800d768 <__sfp_lock_release>:
 800d768:	4801      	ldr	r0, [pc, #4]	; (800d770 <__sfp_lock_release+0x8>)
 800d76a:	f000 ba1d 	b.w	800dba8 <__retarget_lock_release_recursive>
 800d76e:	bf00      	nop
 800d770:	2406207d 	.word	0x2406207d

0800d774 <__sinit>:
 800d774:	b510      	push	{r4, lr}
 800d776:	4604      	mov	r4, r0
 800d778:	f7ff fff0 	bl	800d75c <__sfp_lock_acquire>
 800d77c:	6a23      	ldr	r3, [r4, #32]
 800d77e:	b11b      	cbz	r3, 800d788 <__sinit+0x14>
 800d780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d784:	f7ff bff0 	b.w	800d768 <__sfp_lock_release>
 800d788:	4b04      	ldr	r3, [pc, #16]	; (800d79c <__sinit+0x28>)
 800d78a:	6223      	str	r3, [r4, #32]
 800d78c:	4b04      	ldr	r3, [pc, #16]	; (800d7a0 <__sinit+0x2c>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d1f5      	bne.n	800d780 <__sinit+0xc>
 800d794:	f7ff ffc4 	bl	800d720 <global_stdio_init.part.0>
 800d798:	e7f2      	b.n	800d780 <__sinit+0xc>
 800d79a:	bf00      	nop
 800d79c:	0800d6e1 	.word	0x0800d6e1
 800d7a0:	24062074 	.word	0x24062074

0800d7a4 <_fwalk_sglue>:
 800d7a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7a8:	4607      	mov	r7, r0
 800d7aa:	4688      	mov	r8, r1
 800d7ac:	4614      	mov	r4, r2
 800d7ae:	2600      	movs	r6, #0
 800d7b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d7b4:	f1b9 0901 	subs.w	r9, r9, #1
 800d7b8:	d505      	bpl.n	800d7c6 <_fwalk_sglue+0x22>
 800d7ba:	6824      	ldr	r4, [r4, #0]
 800d7bc:	2c00      	cmp	r4, #0
 800d7be:	d1f7      	bne.n	800d7b0 <_fwalk_sglue+0xc>
 800d7c0:	4630      	mov	r0, r6
 800d7c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7c6:	89ab      	ldrh	r3, [r5, #12]
 800d7c8:	2b01      	cmp	r3, #1
 800d7ca:	d907      	bls.n	800d7dc <_fwalk_sglue+0x38>
 800d7cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d7d0:	3301      	adds	r3, #1
 800d7d2:	d003      	beq.n	800d7dc <_fwalk_sglue+0x38>
 800d7d4:	4629      	mov	r1, r5
 800d7d6:	4638      	mov	r0, r7
 800d7d8:	47c0      	blx	r8
 800d7da:	4306      	orrs	r6, r0
 800d7dc:	3568      	adds	r5, #104	; 0x68
 800d7de:	e7e9      	b.n	800d7b4 <_fwalk_sglue+0x10>

0800d7e0 <iprintf>:
 800d7e0:	b40f      	push	{r0, r1, r2, r3}
 800d7e2:	b507      	push	{r0, r1, r2, lr}
 800d7e4:	4906      	ldr	r1, [pc, #24]	; (800d800 <iprintf+0x20>)
 800d7e6:	ab04      	add	r3, sp, #16
 800d7e8:	6808      	ldr	r0, [r1, #0]
 800d7ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7ee:	6881      	ldr	r1, [r0, #8]
 800d7f0:	9301      	str	r3, [sp, #4]
 800d7f2:	f001 fdcf 	bl	800f394 <_vfiprintf_r>
 800d7f6:	b003      	add	sp, #12
 800d7f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7fc:	b004      	add	sp, #16
 800d7fe:	4770      	bx	lr
 800d800:	24000070 	.word	0x24000070

0800d804 <_puts_r>:
 800d804:	6a03      	ldr	r3, [r0, #32]
 800d806:	b570      	push	{r4, r5, r6, lr}
 800d808:	6884      	ldr	r4, [r0, #8]
 800d80a:	4605      	mov	r5, r0
 800d80c:	460e      	mov	r6, r1
 800d80e:	b90b      	cbnz	r3, 800d814 <_puts_r+0x10>
 800d810:	f7ff ffb0 	bl	800d774 <__sinit>
 800d814:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d816:	07db      	lsls	r3, r3, #31
 800d818:	d405      	bmi.n	800d826 <_puts_r+0x22>
 800d81a:	89a3      	ldrh	r3, [r4, #12]
 800d81c:	0598      	lsls	r0, r3, #22
 800d81e:	d402      	bmi.n	800d826 <_puts_r+0x22>
 800d820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d822:	f000 f9c0 	bl	800dba6 <__retarget_lock_acquire_recursive>
 800d826:	89a3      	ldrh	r3, [r4, #12]
 800d828:	0719      	lsls	r1, r3, #28
 800d82a:	d513      	bpl.n	800d854 <_puts_r+0x50>
 800d82c:	6923      	ldr	r3, [r4, #16]
 800d82e:	b18b      	cbz	r3, 800d854 <_puts_r+0x50>
 800d830:	3e01      	subs	r6, #1
 800d832:	68a3      	ldr	r3, [r4, #8]
 800d834:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d838:	3b01      	subs	r3, #1
 800d83a:	60a3      	str	r3, [r4, #8]
 800d83c:	b9e9      	cbnz	r1, 800d87a <_puts_r+0x76>
 800d83e:	2b00      	cmp	r3, #0
 800d840:	da2e      	bge.n	800d8a0 <_puts_r+0x9c>
 800d842:	4622      	mov	r2, r4
 800d844:	210a      	movs	r1, #10
 800d846:	4628      	mov	r0, r5
 800d848:	f000 f89b 	bl	800d982 <__swbuf_r>
 800d84c:	3001      	adds	r0, #1
 800d84e:	d007      	beq.n	800d860 <_puts_r+0x5c>
 800d850:	250a      	movs	r5, #10
 800d852:	e007      	b.n	800d864 <_puts_r+0x60>
 800d854:	4621      	mov	r1, r4
 800d856:	4628      	mov	r0, r5
 800d858:	f000 f8d0 	bl	800d9fc <__swsetup_r>
 800d85c:	2800      	cmp	r0, #0
 800d85e:	d0e7      	beq.n	800d830 <_puts_r+0x2c>
 800d860:	f04f 35ff 	mov.w	r5, #4294967295
 800d864:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d866:	07da      	lsls	r2, r3, #31
 800d868:	d405      	bmi.n	800d876 <_puts_r+0x72>
 800d86a:	89a3      	ldrh	r3, [r4, #12]
 800d86c:	059b      	lsls	r3, r3, #22
 800d86e:	d402      	bmi.n	800d876 <_puts_r+0x72>
 800d870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d872:	f000 f999 	bl	800dba8 <__retarget_lock_release_recursive>
 800d876:	4628      	mov	r0, r5
 800d878:	bd70      	pop	{r4, r5, r6, pc}
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	da04      	bge.n	800d888 <_puts_r+0x84>
 800d87e:	69a2      	ldr	r2, [r4, #24]
 800d880:	429a      	cmp	r2, r3
 800d882:	dc06      	bgt.n	800d892 <_puts_r+0x8e>
 800d884:	290a      	cmp	r1, #10
 800d886:	d004      	beq.n	800d892 <_puts_r+0x8e>
 800d888:	6823      	ldr	r3, [r4, #0]
 800d88a:	1c5a      	adds	r2, r3, #1
 800d88c:	6022      	str	r2, [r4, #0]
 800d88e:	7019      	strb	r1, [r3, #0]
 800d890:	e7cf      	b.n	800d832 <_puts_r+0x2e>
 800d892:	4622      	mov	r2, r4
 800d894:	4628      	mov	r0, r5
 800d896:	f000 f874 	bl	800d982 <__swbuf_r>
 800d89a:	3001      	adds	r0, #1
 800d89c:	d1c9      	bne.n	800d832 <_puts_r+0x2e>
 800d89e:	e7df      	b.n	800d860 <_puts_r+0x5c>
 800d8a0:	6823      	ldr	r3, [r4, #0]
 800d8a2:	250a      	movs	r5, #10
 800d8a4:	1c5a      	adds	r2, r3, #1
 800d8a6:	6022      	str	r2, [r4, #0]
 800d8a8:	701d      	strb	r5, [r3, #0]
 800d8aa:	e7db      	b.n	800d864 <_puts_r+0x60>

0800d8ac <puts>:
 800d8ac:	4b02      	ldr	r3, [pc, #8]	; (800d8b8 <puts+0xc>)
 800d8ae:	4601      	mov	r1, r0
 800d8b0:	6818      	ldr	r0, [r3, #0]
 800d8b2:	f7ff bfa7 	b.w	800d804 <_puts_r>
 800d8b6:	bf00      	nop
 800d8b8:	24000070 	.word	0x24000070

0800d8bc <siprintf>:
 800d8bc:	b40e      	push	{r1, r2, r3}
 800d8be:	b500      	push	{lr}
 800d8c0:	b09c      	sub	sp, #112	; 0x70
 800d8c2:	ab1d      	add	r3, sp, #116	; 0x74
 800d8c4:	9002      	str	r0, [sp, #8]
 800d8c6:	9006      	str	r0, [sp, #24]
 800d8c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d8cc:	4809      	ldr	r0, [pc, #36]	; (800d8f4 <siprintf+0x38>)
 800d8ce:	9107      	str	r1, [sp, #28]
 800d8d0:	9104      	str	r1, [sp, #16]
 800d8d2:	4909      	ldr	r1, [pc, #36]	; (800d8f8 <siprintf+0x3c>)
 800d8d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8d8:	9105      	str	r1, [sp, #20]
 800d8da:	6800      	ldr	r0, [r0, #0]
 800d8dc:	9301      	str	r3, [sp, #4]
 800d8de:	a902      	add	r1, sp, #8
 800d8e0:	f001 fc30 	bl	800f144 <_svfiprintf_r>
 800d8e4:	9b02      	ldr	r3, [sp, #8]
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	701a      	strb	r2, [r3, #0]
 800d8ea:	b01c      	add	sp, #112	; 0x70
 800d8ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8f0:	b003      	add	sp, #12
 800d8f2:	4770      	bx	lr
 800d8f4:	24000070 	.word	0x24000070
 800d8f8:	ffff0208 	.word	0xffff0208

0800d8fc <__sread>:
 800d8fc:	b510      	push	{r4, lr}
 800d8fe:	460c      	mov	r4, r1
 800d900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d904:	f000 f900 	bl	800db08 <_read_r>
 800d908:	2800      	cmp	r0, #0
 800d90a:	bfab      	itete	ge
 800d90c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d90e:	89a3      	ldrhlt	r3, [r4, #12]
 800d910:	181b      	addge	r3, r3, r0
 800d912:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d916:	bfac      	ite	ge
 800d918:	6563      	strge	r3, [r4, #84]	; 0x54
 800d91a:	81a3      	strhlt	r3, [r4, #12]
 800d91c:	bd10      	pop	{r4, pc}

0800d91e <__swrite>:
 800d91e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d922:	461f      	mov	r7, r3
 800d924:	898b      	ldrh	r3, [r1, #12]
 800d926:	05db      	lsls	r3, r3, #23
 800d928:	4605      	mov	r5, r0
 800d92a:	460c      	mov	r4, r1
 800d92c:	4616      	mov	r6, r2
 800d92e:	d505      	bpl.n	800d93c <__swrite+0x1e>
 800d930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d934:	2302      	movs	r3, #2
 800d936:	2200      	movs	r2, #0
 800d938:	f000 f8d4 	bl	800dae4 <_lseek_r>
 800d93c:	89a3      	ldrh	r3, [r4, #12]
 800d93e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d942:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d946:	81a3      	strh	r3, [r4, #12]
 800d948:	4632      	mov	r2, r6
 800d94a:	463b      	mov	r3, r7
 800d94c:	4628      	mov	r0, r5
 800d94e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d952:	f000 b8eb 	b.w	800db2c <_write_r>

0800d956 <__sseek>:
 800d956:	b510      	push	{r4, lr}
 800d958:	460c      	mov	r4, r1
 800d95a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d95e:	f000 f8c1 	bl	800dae4 <_lseek_r>
 800d962:	1c43      	adds	r3, r0, #1
 800d964:	89a3      	ldrh	r3, [r4, #12]
 800d966:	bf15      	itete	ne
 800d968:	6560      	strne	r0, [r4, #84]	; 0x54
 800d96a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d96e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d972:	81a3      	strheq	r3, [r4, #12]
 800d974:	bf18      	it	ne
 800d976:	81a3      	strhne	r3, [r4, #12]
 800d978:	bd10      	pop	{r4, pc}

0800d97a <__sclose>:
 800d97a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d97e:	f000 b8a1 	b.w	800dac4 <_close_r>

0800d982 <__swbuf_r>:
 800d982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d984:	460e      	mov	r6, r1
 800d986:	4614      	mov	r4, r2
 800d988:	4605      	mov	r5, r0
 800d98a:	b118      	cbz	r0, 800d994 <__swbuf_r+0x12>
 800d98c:	6a03      	ldr	r3, [r0, #32]
 800d98e:	b90b      	cbnz	r3, 800d994 <__swbuf_r+0x12>
 800d990:	f7ff fef0 	bl	800d774 <__sinit>
 800d994:	69a3      	ldr	r3, [r4, #24]
 800d996:	60a3      	str	r3, [r4, #8]
 800d998:	89a3      	ldrh	r3, [r4, #12]
 800d99a:	071a      	lsls	r2, r3, #28
 800d99c:	d525      	bpl.n	800d9ea <__swbuf_r+0x68>
 800d99e:	6923      	ldr	r3, [r4, #16]
 800d9a0:	b31b      	cbz	r3, 800d9ea <__swbuf_r+0x68>
 800d9a2:	6823      	ldr	r3, [r4, #0]
 800d9a4:	6922      	ldr	r2, [r4, #16]
 800d9a6:	1a98      	subs	r0, r3, r2
 800d9a8:	6963      	ldr	r3, [r4, #20]
 800d9aa:	b2f6      	uxtb	r6, r6
 800d9ac:	4283      	cmp	r3, r0
 800d9ae:	4637      	mov	r7, r6
 800d9b0:	dc04      	bgt.n	800d9bc <__swbuf_r+0x3a>
 800d9b2:	4621      	mov	r1, r4
 800d9b4:	4628      	mov	r0, r5
 800d9b6:	f001 fe8d 	bl	800f6d4 <_fflush_r>
 800d9ba:	b9e0      	cbnz	r0, 800d9f6 <__swbuf_r+0x74>
 800d9bc:	68a3      	ldr	r3, [r4, #8]
 800d9be:	3b01      	subs	r3, #1
 800d9c0:	60a3      	str	r3, [r4, #8]
 800d9c2:	6823      	ldr	r3, [r4, #0]
 800d9c4:	1c5a      	adds	r2, r3, #1
 800d9c6:	6022      	str	r2, [r4, #0]
 800d9c8:	701e      	strb	r6, [r3, #0]
 800d9ca:	6962      	ldr	r2, [r4, #20]
 800d9cc:	1c43      	adds	r3, r0, #1
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d004      	beq.n	800d9dc <__swbuf_r+0x5a>
 800d9d2:	89a3      	ldrh	r3, [r4, #12]
 800d9d4:	07db      	lsls	r3, r3, #31
 800d9d6:	d506      	bpl.n	800d9e6 <__swbuf_r+0x64>
 800d9d8:	2e0a      	cmp	r6, #10
 800d9da:	d104      	bne.n	800d9e6 <__swbuf_r+0x64>
 800d9dc:	4621      	mov	r1, r4
 800d9de:	4628      	mov	r0, r5
 800d9e0:	f001 fe78 	bl	800f6d4 <_fflush_r>
 800d9e4:	b938      	cbnz	r0, 800d9f6 <__swbuf_r+0x74>
 800d9e6:	4638      	mov	r0, r7
 800d9e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9ea:	4621      	mov	r1, r4
 800d9ec:	4628      	mov	r0, r5
 800d9ee:	f000 f805 	bl	800d9fc <__swsetup_r>
 800d9f2:	2800      	cmp	r0, #0
 800d9f4:	d0d5      	beq.n	800d9a2 <__swbuf_r+0x20>
 800d9f6:	f04f 37ff 	mov.w	r7, #4294967295
 800d9fa:	e7f4      	b.n	800d9e6 <__swbuf_r+0x64>

0800d9fc <__swsetup_r>:
 800d9fc:	b538      	push	{r3, r4, r5, lr}
 800d9fe:	4b2a      	ldr	r3, [pc, #168]	; (800daa8 <__swsetup_r+0xac>)
 800da00:	4605      	mov	r5, r0
 800da02:	6818      	ldr	r0, [r3, #0]
 800da04:	460c      	mov	r4, r1
 800da06:	b118      	cbz	r0, 800da10 <__swsetup_r+0x14>
 800da08:	6a03      	ldr	r3, [r0, #32]
 800da0a:	b90b      	cbnz	r3, 800da10 <__swsetup_r+0x14>
 800da0c:	f7ff feb2 	bl	800d774 <__sinit>
 800da10:	89a3      	ldrh	r3, [r4, #12]
 800da12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da16:	0718      	lsls	r0, r3, #28
 800da18:	d422      	bmi.n	800da60 <__swsetup_r+0x64>
 800da1a:	06d9      	lsls	r1, r3, #27
 800da1c:	d407      	bmi.n	800da2e <__swsetup_r+0x32>
 800da1e:	2309      	movs	r3, #9
 800da20:	602b      	str	r3, [r5, #0]
 800da22:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800da26:	81a3      	strh	r3, [r4, #12]
 800da28:	f04f 30ff 	mov.w	r0, #4294967295
 800da2c:	e034      	b.n	800da98 <__swsetup_r+0x9c>
 800da2e:	0758      	lsls	r0, r3, #29
 800da30:	d512      	bpl.n	800da58 <__swsetup_r+0x5c>
 800da32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da34:	b141      	cbz	r1, 800da48 <__swsetup_r+0x4c>
 800da36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da3a:	4299      	cmp	r1, r3
 800da3c:	d002      	beq.n	800da44 <__swsetup_r+0x48>
 800da3e:	4628      	mov	r0, r5
 800da40:	f000 feaa 	bl	800e798 <_free_r>
 800da44:	2300      	movs	r3, #0
 800da46:	6363      	str	r3, [r4, #52]	; 0x34
 800da48:	89a3      	ldrh	r3, [r4, #12]
 800da4a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800da4e:	81a3      	strh	r3, [r4, #12]
 800da50:	2300      	movs	r3, #0
 800da52:	6063      	str	r3, [r4, #4]
 800da54:	6923      	ldr	r3, [r4, #16]
 800da56:	6023      	str	r3, [r4, #0]
 800da58:	89a3      	ldrh	r3, [r4, #12]
 800da5a:	f043 0308 	orr.w	r3, r3, #8
 800da5e:	81a3      	strh	r3, [r4, #12]
 800da60:	6923      	ldr	r3, [r4, #16]
 800da62:	b94b      	cbnz	r3, 800da78 <__swsetup_r+0x7c>
 800da64:	89a3      	ldrh	r3, [r4, #12]
 800da66:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800da6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da6e:	d003      	beq.n	800da78 <__swsetup_r+0x7c>
 800da70:	4621      	mov	r1, r4
 800da72:	4628      	mov	r0, r5
 800da74:	f001 fe7c 	bl	800f770 <__smakebuf_r>
 800da78:	89a0      	ldrh	r0, [r4, #12]
 800da7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da7e:	f010 0301 	ands.w	r3, r0, #1
 800da82:	d00a      	beq.n	800da9a <__swsetup_r+0x9e>
 800da84:	2300      	movs	r3, #0
 800da86:	60a3      	str	r3, [r4, #8]
 800da88:	6963      	ldr	r3, [r4, #20]
 800da8a:	425b      	negs	r3, r3
 800da8c:	61a3      	str	r3, [r4, #24]
 800da8e:	6923      	ldr	r3, [r4, #16]
 800da90:	b943      	cbnz	r3, 800daa4 <__swsetup_r+0xa8>
 800da92:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800da96:	d1c4      	bne.n	800da22 <__swsetup_r+0x26>
 800da98:	bd38      	pop	{r3, r4, r5, pc}
 800da9a:	0781      	lsls	r1, r0, #30
 800da9c:	bf58      	it	pl
 800da9e:	6963      	ldrpl	r3, [r4, #20]
 800daa0:	60a3      	str	r3, [r4, #8]
 800daa2:	e7f4      	b.n	800da8e <__swsetup_r+0x92>
 800daa4:	2000      	movs	r0, #0
 800daa6:	e7f7      	b.n	800da98 <__swsetup_r+0x9c>
 800daa8:	24000070 	.word	0x24000070

0800daac <memset>:
 800daac:	4402      	add	r2, r0
 800daae:	4603      	mov	r3, r0
 800dab0:	4293      	cmp	r3, r2
 800dab2:	d100      	bne.n	800dab6 <memset+0xa>
 800dab4:	4770      	bx	lr
 800dab6:	f803 1b01 	strb.w	r1, [r3], #1
 800daba:	e7f9      	b.n	800dab0 <memset+0x4>

0800dabc <_localeconv_r>:
 800dabc:	4800      	ldr	r0, [pc, #0]	; (800dac0 <_localeconv_r+0x4>)
 800dabe:	4770      	bx	lr
 800dac0:	24000164 	.word	0x24000164

0800dac4 <_close_r>:
 800dac4:	b538      	push	{r3, r4, r5, lr}
 800dac6:	4d06      	ldr	r5, [pc, #24]	; (800dae0 <_close_r+0x1c>)
 800dac8:	2300      	movs	r3, #0
 800daca:	4604      	mov	r4, r0
 800dacc:	4608      	mov	r0, r1
 800dace:	602b      	str	r3, [r5, #0]
 800dad0:	f7f4 fbad 	bl	800222e <_close>
 800dad4:	1c43      	adds	r3, r0, #1
 800dad6:	d102      	bne.n	800dade <_close_r+0x1a>
 800dad8:	682b      	ldr	r3, [r5, #0]
 800dada:	b103      	cbz	r3, 800dade <_close_r+0x1a>
 800dadc:	6023      	str	r3, [r4, #0]
 800dade:	bd38      	pop	{r3, r4, r5, pc}
 800dae0:	24062078 	.word	0x24062078

0800dae4 <_lseek_r>:
 800dae4:	b538      	push	{r3, r4, r5, lr}
 800dae6:	4d07      	ldr	r5, [pc, #28]	; (800db04 <_lseek_r+0x20>)
 800dae8:	4604      	mov	r4, r0
 800daea:	4608      	mov	r0, r1
 800daec:	4611      	mov	r1, r2
 800daee:	2200      	movs	r2, #0
 800daf0:	602a      	str	r2, [r5, #0]
 800daf2:	461a      	mov	r2, r3
 800daf4:	f7f4 fbc2 	bl	800227c <_lseek>
 800daf8:	1c43      	adds	r3, r0, #1
 800dafa:	d102      	bne.n	800db02 <_lseek_r+0x1e>
 800dafc:	682b      	ldr	r3, [r5, #0]
 800dafe:	b103      	cbz	r3, 800db02 <_lseek_r+0x1e>
 800db00:	6023      	str	r3, [r4, #0]
 800db02:	bd38      	pop	{r3, r4, r5, pc}
 800db04:	24062078 	.word	0x24062078

0800db08 <_read_r>:
 800db08:	b538      	push	{r3, r4, r5, lr}
 800db0a:	4d07      	ldr	r5, [pc, #28]	; (800db28 <_read_r+0x20>)
 800db0c:	4604      	mov	r4, r0
 800db0e:	4608      	mov	r0, r1
 800db10:	4611      	mov	r1, r2
 800db12:	2200      	movs	r2, #0
 800db14:	602a      	str	r2, [r5, #0]
 800db16:	461a      	mov	r2, r3
 800db18:	f7f4 fb50 	bl	80021bc <_read>
 800db1c:	1c43      	adds	r3, r0, #1
 800db1e:	d102      	bne.n	800db26 <_read_r+0x1e>
 800db20:	682b      	ldr	r3, [r5, #0]
 800db22:	b103      	cbz	r3, 800db26 <_read_r+0x1e>
 800db24:	6023      	str	r3, [r4, #0]
 800db26:	bd38      	pop	{r3, r4, r5, pc}
 800db28:	24062078 	.word	0x24062078

0800db2c <_write_r>:
 800db2c:	b538      	push	{r3, r4, r5, lr}
 800db2e:	4d07      	ldr	r5, [pc, #28]	; (800db4c <_write_r+0x20>)
 800db30:	4604      	mov	r4, r0
 800db32:	4608      	mov	r0, r1
 800db34:	4611      	mov	r1, r2
 800db36:	2200      	movs	r2, #0
 800db38:	602a      	str	r2, [r5, #0]
 800db3a:	461a      	mov	r2, r3
 800db3c:	f7f4 fb5b 	bl	80021f6 <_write>
 800db40:	1c43      	adds	r3, r0, #1
 800db42:	d102      	bne.n	800db4a <_write_r+0x1e>
 800db44:	682b      	ldr	r3, [r5, #0]
 800db46:	b103      	cbz	r3, 800db4a <_write_r+0x1e>
 800db48:	6023      	str	r3, [r4, #0]
 800db4a:	bd38      	pop	{r3, r4, r5, pc}
 800db4c:	24062078 	.word	0x24062078

0800db50 <__errno>:
 800db50:	4b01      	ldr	r3, [pc, #4]	; (800db58 <__errno+0x8>)
 800db52:	6818      	ldr	r0, [r3, #0]
 800db54:	4770      	bx	lr
 800db56:	bf00      	nop
 800db58:	24000070 	.word	0x24000070

0800db5c <__libc_init_array>:
 800db5c:	b570      	push	{r4, r5, r6, lr}
 800db5e:	4d0d      	ldr	r5, [pc, #52]	; (800db94 <__libc_init_array+0x38>)
 800db60:	4c0d      	ldr	r4, [pc, #52]	; (800db98 <__libc_init_array+0x3c>)
 800db62:	1b64      	subs	r4, r4, r5
 800db64:	10a4      	asrs	r4, r4, #2
 800db66:	2600      	movs	r6, #0
 800db68:	42a6      	cmp	r6, r4
 800db6a:	d109      	bne.n	800db80 <__libc_init_array+0x24>
 800db6c:	4d0b      	ldr	r5, [pc, #44]	; (800db9c <__libc_init_array+0x40>)
 800db6e:	4c0c      	ldr	r4, [pc, #48]	; (800dba0 <__libc_init_array+0x44>)
 800db70:	f001 ff7c 	bl	800fa6c <_init>
 800db74:	1b64      	subs	r4, r4, r5
 800db76:	10a4      	asrs	r4, r4, #2
 800db78:	2600      	movs	r6, #0
 800db7a:	42a6      	cmp	r6, r4
 800db7c:	d105      	bne.n	800db8a <__libc_init_array+0x2e>
 800db7e:	bd70      	pop	{r4, r5, r6, pc}
 800db80:	f855 3b04 	ldr.w	r3, [r5], #4
 800db84:	4798      	blx	r3
 800db86:	3601      	adds	r6, #1
 800db88:	e7ee      	b.n	800db68 <__libc_init_array+0xc>
 800db8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800db8e:	4798      	blx	r3
 800db90:	3601      	adds	r6, #1
 800db92:	e7f2      	b.n	800db7a <__libc_init_array+0x1e>
 800db94:	0800fe74 	.word	0x0800fe74
 800db98:	0800fe74 	.word	0x0800fe74
 800db9c:	0800fe74 	.word	0x0800fe74
 800dba0:	0800fe78 	.word	0x0800fe78

0800dba4 <__retarget_lock_init_recursive>:
 800dba4:	4770      	bx	lr

0800dba6 <__retarget_lock_acquire_recursive>:
 800dba6:	4770      	bx	lr

0800dba8 <__retarget_lock_release_recursive>:
 800dba8:	4770      	bx	lr

0800dbaa <quorem>:
 800dbaa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbae:	6903      	ldr	r3, [r0, #16]
 800dbb0:	690c      	ldr	r4, [r1, #16]
 800dbb2:	42a3      	cmp	r3, r4
 800dbb4:	4607      	mov	r7, r0
 800dbb6:	db7e      	blt.n	800dcb6 <quorem+0x10c>
 800dbb8:	3c01      	subs	r4, #1
 800dbba:	f101 0814 	add.w	r8, r1, #20
 800dbbe:	f100 0514 	add.w	r5, r0, #20
 800dbc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dbc6:	9301      	str	r3, [sp, #4]
 800dbc8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dbcc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dbd0:	3301      	adds	r3, #1
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dbd8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dbdc:	fbb2 f6f3 	udiv	r6, r2, r3
 800dbe0:	d331      	bcc.n	800dc46 <quorem+0x9c>
 800dbe2:	f04f 0e00 	mov.w	lr, #0
 800dbe6:	4640      	mov	r0, r8
 800dbe8:	46ac      	mov	ip, r5
 800dbea:	46f2      	mov	sl, lr
 800dbec:	f850 2b04 	ldr.w	r2, [r0], #4
 800dbf0:	b293      	uxth	r3, r2
 800dbf2:	fb06 e303 	mla	r3, r6, r3, lr
 800dbf6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dbfa:	0c1a      	lsrs	r2, r3, #16
 800dbfc:	b29b      	uxth	r3, r3
 800dbfe:	ebaa 0303 	sub.w	r3, sl, r3
 800dc02:	f8dc a000 	ldr.w	sl, [ip]
 800dc06:	fa13 f38a 	uxtah	r3, r3, sl
 800dc0a:	fb06 220e 	mla	r2, r6, lr, r2
 800dc0e:	9300      	str	r3, [sp, #0]
 800dc10:	9b00      	ldr	r3, [sp, #0]
 800dc12:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dc16:	b292      	uxth	r2, r2
 800dc18:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800dc1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dc20:	f8bd 3000 	ldrh.w	r3, [sp]
 800dc24:	4581      	cmp	r9, r0
 800dc26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dc2a:	f84c 3b04 	str.w	r3, [ip], #4
 800dc2e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dc32:	d2db      	bcs.n	800dbec <quorem+0x42>
 800dc34:	f855 300b 	ldr.w	r3, [r5, fp]
 800dc38:	b92b      	cbnz	r3, 800dc46 <quorem+0x9c>
 800dc3a:	9b01      	ldr	r3, [sp, #4]
 800dc3c:	3b04      	subs	r3, #4
 800dc3e:	429d      	cmp	r5, r3
 800dc40:	461a      	mov	r2, r3
 800dc42:	d32c      	bcc.n	800dc9e <quorem+0xf4>
 800dc44:	613c      	str	r4, [r7, #16]
 800dc46:	4638      	mov	r0, r7
 800dc48:	f001 f922 	bl	800ee90 <__mcmp>
 800dc4c:	2800      	cmp	r0, #0
 800dc4e:	db22      	blt.n	800dc96 <quorem+0xec>
 800dc50:	3601      	adds	r6, #1
 800dc52:	4629      	mov	r1, r5
 800dc54:	2000      	movs	r0, #0
 800dc56:	f858 2b04 	ldr.w	r2, [r8], #4
 800dc5a:	f8d1 c000 	ldr.w	ip, [r1]
 800dc5e:	b293      	uxth	r3, r2
 800dc60:	1ac3      	subs	r3, r0, r3
 800dc62:	0c12      	lsrs	r2, r2, #16
 800dc64:	fa13 f38c 	uxtah	r3, r3, ip
 800dc68:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800dc6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dc70:	b29b      	uxth	r3, r3
 800dc72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dc76:	45c1      	cmp	r9, r8
 800dc78:	f841 3b04 	str.w	r3, [r1], #4
 800dc7c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dc80:	d2e9      	bcs.n	800dc56 <quorem+0xac>
 800dc82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dc8a:	b922      	cbnz	r2, 800dc96 <quorem+0xec>
 800dc8c:	3b04      	subs	r3, #4
 800dc8e:	429d      	cmp	r5, r3
 800dc90:	461a      	mov	r2, r3
 800dc92:	d30a      	bcc.n	800dcaa <quorem+0x100>
 800dc94:	613c      	str	r4, [r7, #16]
 800dc96:	4630      	mov	r0, r6
 800dc98:	b003      	add	sp, #12
 800dc9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc9e:	6812      	ldr	r2, [r2, #0]
 800dca0:	3b04      	subs	r3, #4
 800dca2:	2a00      	cmp	r2, #0
 800dca4:	d1ce      	bne.n	800dc44 <quorem+0x9a>
 800dca6:	3c01      	subs	r4, #1
 800dca8:	e7c9      	b.n	800dc3e <quorem+0x94>
 800dcaa:	6812      	ldr	r2, [r2, #0]
 800dcac:	3b04      	subs	r3, #4
 800dcae:	2a00      	cmp	r2, #0
 800dcb0:	d1f0      	bne.n	800dc94 <quorem+0xea>
 800dcb2:	3c01      	subs	r4, #1
 800dcb4:	e7eb      	b.n	800dc8e <quorem+0xe4>
 800dcb6:	2000      	movs	r0, #0
 800dcb8:	e7ee      	b.n	800dc98 <quorem+0xee>
 800dcba:	0000      	movs	r0, r0
 800dcbc:	0000      	movs	r0, r0
	...

0800dcc0 <_dtoa_r>:
 800dcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcc4:	ed2d 8b02 	vpush	{d8}
 800dcc8:	69c5      	ldr	r5, [r0, #28]
 800dcca:	b091      	sub	sp, #68	; 0x44
 800dccc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dcd0:	ec59 8b10 	vmov	r8, r9, d0
 800dcd4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800dcd6:	9106      	str	r1, [sp, #24]
 800dcd8:	4606      	mov	r6, r0
 800dcda:	9208      	str	r2, [sp, #32]
 800dcdc:	930c      	str	r3, [sp, #48]	; 0x30
 800dcde:	b975      	cbnz	r5, 800dcfe <_dtoa_r+0x3e>
 800dce0:	2010      	movs	r0, #16
 800dce2:	f000 fda5 	bl	800e830 <malloc>
 800dce6:	4602      	mov	r2, r0
 800dce8:	61f0      	str	r0, [r6, #28]
 800dcea:	b920      	cbnz	r0, 800dcf6 <_dtoa_r+0x36>
 800dcec:	4ba6      	ldr	r3, [pc, #664]	; (800df88 <_dtoa_r+0x2c8>)
 800dcee:	21ef      	movs	r1, #239	; 0xef
 800dcf0:	48a6      	ldr	r0, [pc, #664]	; (800df8c <_dtoa_r+0x2cc>)
 800dcf2:	f001 fdd3 	bl	800f89c <__assert_func>
 800dcf6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dcfa:	6005      	str	r5, [r0, #0]
 800dcfc:	60c5      	str	r5, [r0, #12]
 800dcfe:	69f3      	ldr	r3, [r6, #28]
 800dd00:	6819      	ldr	r1, [r3, #0]
 800dd02:	b151      	cbz	r1, 800dd1a <_dtoa_r+0x5a>
 800dd04:	685a      	ldr	r2, [r3, #4]
 800dd06:	604a      	str	r2, [r1, #4]
 800dd08:	2301      	movs	r3, #1
 800dd0a:	4093      	lsls	r3, r2
 800dd0c:	608b      	str	r3, [r1, #8]
 800dd0e:	4630      	mov	r0, r6
 800dd10:	f000 fe82 	bl	800ea18 <_Bfree>
 800dd14:	69f3      	ldr	r3, [r6, #28]
 800dd16:	2200      	movs	r2, #0
 800dd18:	601a      	str	r2, [r3, #0]
 800dd1a:	f1b9 0300 	subs.w	r3, r9, #0
 800dd1e:	bfbb      	ittet	lt
 800dd20:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dd24:	9303      	strlt	r3, [sp, #12]
 800dd26:	2300      	movge	r3, #0
 800dd28:	2201      	movlt	r2, #1
 800dd2a:	bfac      	ite	ge
 800dd2c:	6023      	strge	r3, [r4, #0]
 800dd2e:	6022      	strlt	r2, [r4, #0]
 800dd30:	4b97      	ldr	r3, [pc, #604]	; (800df90 <_dtoa_r+0x2d0>)
 800dd32:	9c03      	ldr	r4, [sp, #12]
 800dd34:	43a3      	bics	r3, r4
 800dd36:	d11c      	bne.n	800dd72 <_dtoa_r+0xb2>
 800dd38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dd3a:	f242 730f 	movw	r3, #9999	; 0x270f
 800dd3e:	6013      	str	r3, [r2, #0]
 800dd40:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800dd44:	ea53 0308 	orrs.w	r3, r3, r8
 800dd48:	f000 84fb 	beq.w	800e742 <_dtoa_r+0xa82>
 800dd4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dd4e:	b963      	cbnz	r3, 800dd6a <_dtoa_r+0xaa>
 800dd50:	4b90      	ldr	r3, [pc, #576]	; (800df94 <_dtoa_r+0x2d4>)
 800dd52:	e020      	b.n	800dd96 <_dtoa_r+0xd6>
 800dd54:	4b90      	ldr	r3, [pc, #576]	; (800df98 <_dtoa_r+0x2d8>)
 800dd56:	9301      	str	r3, [sp, #4]
 800dd58:	3308      	adds	r3, #8
 800dd5a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800dd5c:	6013      	str	r3, [r2, #0]
 800dd5e:	9801      	ldr	r0, [sp, #4]
 800dd60:	b011      	add	sp, #68	; 0x44
 800dd62:	ecbd 8b02 	vpop	{d8}
 800dd66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd6a:	4b8a      	ldr	r3, [pc, #552]	; (800df94 <_dtoa_r+0x2d4>)
 800dd6c:	9301      	str	r3, [sp, #4]
 800dd6e:	3303      	adds	r3, #3
 800dd70:	e7f3      	b.n	800dd5a <_dtoa_r+0x9a>
 800dd72:	ed9d 8b02 	vldr	d8, [sp, #8]
 800dd76:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800dd7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd7e:	d10c      	bne.n	800dd9a <_dtoa_r+0xda>
 800dd80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dd82:	2301      	movs	r3, #1
 800dd84:	6013      	str	r3, [r2, #0]
 800dd86:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	f000 84d7 	beq.w	800e73c <_dtoa_r+0xa7c>
 800dd8e:	4b83      	ldr	r3, [pc, #524]	; (800df9c <_dtoa_r+0x2dc>)
 800dd90:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800dd92:	6013      	str	r3, [r2, #0]
 800dd94:	3b01      	subs	r3, #1
 800dd96:	9301      	str	r3, [sp, #4]
 800dd98:	e7e1      	b.n	800dd5e <_dtoa_r+0x9e>
 800dd9a:	aa0e      	add	r2, sp, #56	; 0x38
 800dd9c:	a90f      	add	r1, sp, #60	; 0x3c
 800dd9e:	4630      	mov	r0, r6
 800dda0:	eeb0 0b48 	vmov.f64	d0, d8
 800dda4:	f001 f91a 	bl	800efdc <__d2b>
 800dda8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800ddac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ddae:	4605      	mov	r5, r0
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d046      	beq.n	800de42 <_dtoa_r+0x182>
 800ddb4:	eeb0 7b48 	vmov.f64	d7, d8
 800ddb8:	ee18 1a90 	vmov	r1, s17
 800ddbc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ddc0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800ddc4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800ddc8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ddcc:	2000      	movs	r0, #0
 800ddce:	ee07 1a90 	vmov	s15, r1
 800ddd2:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800ddd6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800df70 <_dtoa_r+0x2b0>
 800ddda:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ddde:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800df78 <_dtoa_r+0x2b8>
 800dde2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800dde6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800df80 <_dtoa_r+0x2c0>
 800ddea:	ee07 3a90 	vmov	s15, r3
 800ddee:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800ddf2:	eeb0 7b46 	vmov.f64	d7, d6
 800ddf6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800ddfa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ddfe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800de02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de06:	ee16 ba90 	vmov	fp, s13
 800de0a:	9009      	str	r0, [sp, #36]	; 0x24
 800de0c:	d508      	bpl.n	800de20 <_dtoa_r+0x160>
 800de0e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800de12:	eeb4 6b47 	vcmp.f64	d6, d7
 800de16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de1a:	bf18      	it	ne
 800de1c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800de20:	f1bb 0f16 	cmp.w	fp, #22
 800de24:	d82b      	bhi.n	800de7e <_dtoa_r+0x1be>
 800de26:	495e      	ldr	r1, [pc, #376]	; (800dfa0 <_dtoa_r+0x2e0>)
 800de28:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800de2c:	ed91 7b00 	vldr	d7, [r1]
 800de30:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800de34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de38:	d501      	bpl.n	800de3e <_dtoa_r+0x17e>
 800de3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800de3e:	2100      	movs	r1, #0
 800de40:	e01e      	b.n	800de80 <_dtoa_r+0x1c0>
 800de42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de44:	4413      	add	r3, r2
 800de46:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800de4a:	2920      	cmp	r1, #32
 800de4c:	bfc1      	itttt	gt
 800de4e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800de52:	408c      	lslgt	r4, r1
 800de54:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800de58:	fa28 f101 	lsrgt.w	r1, r8, r1
 800de5c:	bfd6      	itet	le
 800de5e:	f1c1 0120 	rsble	r1, r1, #32
 800de62:	4321      	orrgt	r1, r4
 800de64:	fa08 f101 	lslle.w	r1, r8, r1
 800de68:	ee07 1a90 	vmov	s15, r1
 800de6c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800de70:	3b01      	subs	r3, #1
 800de72:	ee17 1a90 	vmov	r1, s15
 800de76:	2001      	movs	r0, #1
 800de78:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800de7c:	e7a7      	b.n	800ddce <_dtoa_r+0x10e>
 800de7e:	2101      	movs	r1, #1
 800de80:	1ad2      	subs	r2, r2, r3
 800de82:	1e53      	subs	r3, r2, #1
 800de84:	9305      	str	r3, [sp, #20]
 800de86:	bf45      	ittet	mi
 800de88:	f1c2 0301 	rsbmi	r3, r2, #1
 800de8c:	9304      	strmi	r3, [sp, #16]
 800de8e:	2300      	movpl	r3, #0
 800de90:	2300      	movmi	r3, #0
 800de92:	bf4c      	ite	mi
 800de94:	9305      	strmi	r3, [sp, #20]
 800de96:	9304      	strpl	r3, [sp, #16]
 800de98:	f1bb 0f00 	cmp.w	fp, #0
 800de9c:	910b      	str	r1, [sp, #44]	; 0x2c
 800de9e:	db18      	blt.n	800ded2 <_dtoa_r+0x212>
 800dea0:	9b05      	ldr	r3, [sp, #20]
 800dea2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800dea6:	445b      	add	r3, fp
 800dea8:	9305      	str	r3, [sp, #20]
 800deaa:	2300      	movs	r3, #0
 800deac:	9a06      	ldr	r2, [sp, #24]
 800deae:	2a09      	cmp	r2, #9
 800deb0:	d848      	bhi.n	800df44 <_dtoa_r+0x284>
 800deb2:	2a05      	cmp	r2, #5
 800deb4:	bfc4      	itt	gt
 800deb6:	3a04      	subgt	r2, #4
 800deb8:	9206      	strgt	r2, [sp, #24]
 800deba:	9a06      	ldr	r2, [sp, #24]
 800debc:	f1a2 0202 	sub.w	r2, r2, #2
 800dec0:	bfcc      	ite	gt
 800dec2:	2400      	movgt	r4, #0
 800dec4:	2401      	movle	r4, #1
 800dec6:	2a03      	cmp	r2, #3
 800dec8:	d847      	bhi.n	800df5a <_dtoa_r+0x29a>
 800deca:	e8df f002 	tbb	[pc, r2]
 800dece:	2d0b      	.short	0x2d0b
 800ded0:	392b      	.short	0x392b
 800ded2:	9b04      	ldr	r3, [sp, #16]
 800ded4:	2200      	movs	r2, #0
 800ded6:	eba3 030b 	sub.w	r3, r3, fp
 800deda:	9304      	str	r3, [sp, #16]
 800dedc:	920a      	str	r2, [sp, #40]	; 0x28
 800dede:	f1cb 0300 	rsb	r3, fp, #0
 800dee2:	e7e3      	b.n	800deac <_dtoa_r+0x1ec>
 800dee4:	2200      	movs	r2, #0
 800dee6:	9207      	str	r2, [sp, #28]
 800dee8:	9a08      	ldr	r2, [sp, #32]
 800deea:	2a00      	cmp	r2, #0
 800deec:	dc38      	bgt.n	800df60 <_dtoa_r+0x2a0>
 800deee:	f04f 0a01 	mov.w	sl, #1
 800def2:	46d1      	mov	r9, sl
 800def4:	4652      	mov	r2, sl
 800def6:	f8cd a020 	str.w	sl, [sp, #32]
 800defa:	69f7      	ldr	r7, [r6, #28]
 800defc:	2100      	movs	r1, #0
 800defe:	2004      	movs	r0, #4
 800df00:	f100 0c14 	add.w	ip, r0, #20
 800df04:	4594      	cmp	ip, r2
 800df06:	d930      	bls.n	800df6a <_dtoa_r+0x2aa>
 800df08:	6079      	str	r1, [r7, #4]
 800df0a:	4630      	mov	r0, r6
 800df0c:	930d      	str	r3, [sp, #52]	; 0x34
 800df0e:	f000 fd43 	bl	800e998 <_Balloc>
 800df12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df14:	9001      	str	r0, [sp, #4]
 800df16:	4602      	mov	r2, r0
 800df18:	2800      	cmp	r0, #0
 800df1a:	d145      	bne.n	800dfa8 <_dtoa_r+0x2e8>
 800df1c:	4b21      	ldr	r3, [pc, #132]	; (800dfa4 <_dtoa_r+0x2e4>)
 800df1e:	f240 11af 	movw	r1, #431	; 0x1af
 800df22:	e6e5      	b.n	800dcf0 <_dtoa_r+0x30>
 800df24:	2201      	movs	r2, #1
 800df26:	e7de      	b.n	800dee6 <_dtoa_r+0x226>
 800df28:	2200      	movs	r2, #0
 800df2a:	9207      	str	r2, [sp, #28]
 800df2c:	9a08      	ldr	r2, [sp, #32]
 800df2e:	eb0b 0a02 	add.w	sl, fp, r2
 800df32:	f10a 0901 	add.w	r9, sl, #1
 800df36:	464a      	mov	r2, r9
 800df38:	2a01      	cmp	r2, #1
 800df3a:	bfb8      	it	lt
 800df3c:	2201      	movlt	r2, #1
 800df3e:	e7dc      	b.n	800defa <_dtoa_r+0x23a>
 800df40:	2201      	movs	r2, #1
 800df42:	e7f2      	b.n	800df2a <_dtoa_r+0x26a>
 800df44:	2401      	movs	r4, #1
 800df46:	2200      	movs	r2, #0
 800df48:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800df4c:	f04f 3aff 	mov.w	sl, #4294967295
 800df50:	2100      	movs	r1, #0
 800df52:	46d1      	mov	r9, sl
 800df54:	2212      	movs	r2, #18
 800df56:	9108      	str	r1, [sp, #32]
 800df58:	e7cf      	b.n	800defa <_dtoa_r+0x23a>
 800df5a:	2201      	movs	r2, #1
 800df5c:	9207      	str	r2, [sp, #28]
 800df5e:	e7f5      	b.n	800df4c <_dtoa_r+0x28c>
 800df60:	f8dd a020 	ldr.w	sl, [sp, #32]
 800df64:	46d1      	mov	r9, sl
 800df66:	4652      	mov	r2, sl
 800df68:	e7c7      	b.n	800defa <_dtoa_r+0x23a>
 800df6a:	3101      	adds	r1, #1
 800df6c:	0040      	lsls	r0, r0, #1
 800df6e:	e7c7      	b.n	800df00 <_dtoa_r+0x240>
 800df70:	636f4361 	.word	0x636f4361
 800df74:	3fd287a7 	.word	0x3fd287a7
 800df78:	8b60c8b3 	.word	0x8b60c8b3
 800df7c:	3fc68a28 	.word	0x3fc68a28
 800df80:	509f79fb 	.word	0x509f79fb
 800df84:	3fd34413 	.word	0x3fd34413
 800df88:	0800fb39 	.word	0x0800fb39
 800df8c:	0800fb50 	.word	0x0800fb50
 800df90:	7ff00000 	.word	0x7ff00000
 800df94:	0800fb35 	.word	0x0800fb35
 800df98:	0800fb2c 	.word	0x0800fb2c
 800df9c:	0800fb09 	.word	0x0800fb09
 800dfa0:	0800fc40 	.word	0x0800fc40
 800dfa4:	0800fba8 	.word	0x0800fba8
 800dfa8:	69f2      	ldr	r2, [r6, #28]
 800dfaa:	9901      	ldr	r1, [sp, #4]
 800dfac:	6011      	str	r1, [r2, #0]
 800dfae:	f1b9 0f0e 	cmp.w	r9, #14
 800dfb2:	d86c      	bhi.n	800e08e <_dtoa_r+0x3ce>
 800dfb4:	2c00      	cmp	r4, #0
 800dfb6:	d06a      	beq.n	800e08e <_dtoa_r+0x3ce>
 800dfb8:	f1bb 0f00 	cmp.w	fp, #0
 800dfbc:	f340 80a0 	ble.w	800e100 <_dtoa_r+0x440>
 800dfc0:	4ac1      	ldr	r2, [pc, #772]	; (800e2c8 <_dtoa_r+0x608>)
 800dfc2:	f00b 010f 	and.w	r1, fp, #15
 800dfc6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800dfca:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800dfce:	ed92 7b00 	vldr	d7, [r2]
 800dfd2:	ea4f 122b 	mov.w	r2, fp, asr #4
 800dfd6:	f000 8087 	beq.w	800e0e8 <_dtoa_r+0x428>
 800dfda:	49bc      	ldr	r1, [pc, #752]	; (800e2cc <_dtoa_r+0x60c>)
 800dfdc:	ed91 6b08 	vldr	d6, [r1, #32]
 800dfe0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800dfe4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800dfe8:	f002 020f 	and.w	r2, r2, #15
 800dfec:	2103      	movs	r1, #3
 800dfee:	48b7      	ldr	r0, [pc, #732]	; (800e2cc <_dtoa_r+0x60c>)
 800dff0:	2a00      	cmp	r2, #0
 800dff2:	d17b      	bne.n	800e0ec <_dtoa_r+0x42c>
 800dff4:	ed9d 6b02 	vldr	d6, [sp, #8]
 800dff8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800dffc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e000:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e002:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e006:	2a00      	cmp	r2, #0
 800e008:	f000 80a0 	beq.w	800e14c <_dtoa_r+0x48c>
 800e00c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e010:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e018:	f140 8098 	bpl.w	800e14c <_dtoa_r+0x48c>
 800e01c:	f1b9 0f00 	cmp.w	r9, #0
 800e020:	f000 8094 	beq.w	800e14c <_dtoa_r+0x48c>
 800e024:	f1ba 0f00 	cmp.w	sl, #0
 800e028:	dd2f      	ble.n	800e08a <_dtoa_r+0x3ca>
 800e02a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800e02e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e032:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e036:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e03a:	3101      	adds	r1, #1
 800e03c:	4654      	mov	r4, sl
 800e03e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e042:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800e046:	ee07 1a90 	vmov	s15, r1
 800e04a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e04e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800e052:	ee15 7a90 	vmov	r7, s11
 800e056:	ec51 0b15 	vmov	r0, r1, d5
 800e05a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800e05e:	2c00      	cmp	r4, #0
 800e060:	d177      	bne.n	800e152 <_dtoa_r+0x492>
 800e062:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e066:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e06a:	ec41 0b17 	vmov	d7, r0, r1
 800e06e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e076:	f300 826a 	bgt.w	800e54e <_dtoa_r+0x88e>
 800e07a:	eeb1 7b47 	vneg.f64	d7, d7
 800e07e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e086:	f100 8260 	bmi.w	800e54a <_dtoa_r+0x88a>
 800e08a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e08e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e090:	2a00      	cmp	r2, #0
 800e092:	f2c0 811d 	blt.w	800e2d0 <_dtoa_r+0x610>
 800e096:	f1bb 0f0e 	cmp.w	fp, #14
 800e09a:	f300 8119 	bgt.w	800e2d0 <_dtoa_r+0x610>
 800e09e:	4b8a      	ldr	r3, [pc, #552]	; (800e2c8 <_dtoa_r+0x608>)
 800e0a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e0a4:	ed93 6b00 	vldr	d6, [r3]
 800e0a8:	9b08      	ldr	r3, [sp, #32]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	f280 80b7 	bge.w	800e21e <_dtoa_r+0x55e>
 800e0b0:	f1b9 0f00 	cmp.w	r9, #0
 800e0b4:	f300 80b3 	bgt.w	800e21e <_dtoa_r+0x55e>
 800e0b8:	f040 8246 	bne.w	800e548 <_dtoa_r+0x888>
 800e0bc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e0c0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e0c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e0c8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e0cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0d0:	464c      	mov	r4, r9
 800e0d2:	464f      	mov	r7, r9
 800e0d4:	f280 821c 	bge.w	800e510 <_dtoa_r+0x850>
 800e0d8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e0dc:	2331      	movs	r3, #49	; 0x31
 800e0de:	f808 3b01 	strb.w	r3, [r8], #1
 800e0e2:	f10b 0b01 	add.w	fp, fp, #1
 800e0e6:	e218      	b.n	800e51a <_dtoa_r+0x85a>
 800e0e8:	2102      	movs	r1, #2
 800e0ea:	e780      	b.n	800dfee <_dtoa_r+0x32e>
 800e0ec:	07d4      	lsls	r4, r2, #31
 800e0ee:	d504      	bpl.n	800e0fa <_dtoa_r+0x43a>
 800e0f0:	ed90 6b00 	vldr	d6, [r0]
 800e0f4:	3101      	adds	r1, #1
 800e0f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e0fa:	1052      	asrs	r2, r2, #1
 800e0fc:	3008      	adds	r0, #8
 800e0fe:	e777      	b.n	800dff0 <_dtoa_r+0x330>
 800e100:	d022      	beq.n	800e148 <_dtoa_r+0x488>
 800e102:	f1cb 0200 	rsb	r2, fp, #0
 800e106:	4970      	ldr	r1, [pc, #448]	; (800e2c8 <_dtoa_r+0x608>)
 800e108:	f002 000f 	and.w	r0, r2, #15
 800e10c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e110:	ed91 7b00 	vldr	d7, [r1]
 800e114:	ee28 7b07 	vmul.f64	d7, d8, d7
 800e118:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e11c:	486b      	ldr	r0, [pc, #428]	; (800e2cc <_dtoa_r+0x60c>)
 800e11e:	1112      	asrs	r2, r2, #4
 800e120:	2400      	movs	r4, #0
 800e122:	2102      	movs	r1, #2
 800e124:	b92a      	cbnz	r2, 800e132 <_dtoa_r+0x472>
 800e126:	2c00      	cmp	r4, #0
 800e128:	f43f af6a 	beq.w	800e000 <_dtoa_r+0x340>
 800e12c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e130:	e766      	b.n	800e000 <_dtoa_r+0x340>
 800e132:	07d7      	lsls	r7, r2, #31
 800e134:	d505      	bpl.n	800e142 <_dtoa_r+0x482>
 800e136:	ed90 6b00 	vldr	d6, [r0]
 800e13a:	3101      	adds	r1, #1
 800e13c:	2401      	movs	r4, #1
 800e13e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e142:	1052      	asrs	r2, r2, #1
 800e144:	3008      	adds	r0, #8
 800e146:	e7ed      	b.n	800e124 <_dtoa_r+0x464>
 800e148:	2102      	movs	r1, #2
 800e14a:	e759      	b.n	800e000 <_dtoa_r+0x340>
 800e14c:	465a      	mov	r2, fp
 800e14e:	464c      	mov	r4, r9
 800e150:	e775      	b.n	800e03e <_dtoa_r+0x37e>
 800e152:	ec41 0b17 	vmov	d7, r0, r1
 800e156:	495c      	ldr	r1, [pc, #368]	; (800e2c8 <_dtoa_r+0x608>)
 800e158:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800e15c:	ed11 4b02 	vldr	d4, [r1, #-8]
 800e160:	9901      	ldr	r1, [sp, #4]
 800e162:	440c      	add	r4, r1
 800e164:	9907      	ldr	r1, [sp, #28]
 800e166:	b351      	cbz	r1, 800e1be <_dtoa_r+0x4fe>
 800e168:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800e16c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800e170:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e174:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800e178:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e17c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e180:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e184:	ee14 1a90 	vmov	r1, s9
 800e188:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e18c:	3130      	adds	r1, #48	; 0x30
 800e18e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e192:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e19a:	f808 1b01 	strb.w	r1, [r8], #1
 800e19e:	d439      	bmi.n	800e214 <_dtoa_r+0x554>
 800e1a0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800e1a4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800e1a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1ac:	d472      	bmi.n	800e294 <_dtoa_r+0x5d4>
 800e1ae:	45a0      	cmp	r8, r4
 800e1b0:	f43f af6b 	beq.w	800e08a <_dtoa_r+0x3ca>
 800e1b4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800e1b8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e1bc:	e7e0      	b.n	800e180 <_dtoa_r+0x4c0>
 800e1be:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e1c2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e1c6:	4620      	mov	r0, r4
 800e1c8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e1cc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e1d0:	ee14 1a90 	vmov	r1, s9
 800e1d4:	3130      	adds	r1, #48	; 0x30
 800e1d6:	f808 1b01 	strb.w	r1, [r8], #1
 800e1da:	45a0      	cmp	r8, r4
 800e1dc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e1e0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e1e4:	d118      	bne.n	800e218 <_dtoa_r+0x558>
 800e1e6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e1ea:	ee37 4b05 	vadd.f64	d4, d7, d5
 800e1ee:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800e1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1f6:	dc4d      	bgt.n	800e294 <_dtoa_r+0x5d4>
 800e1f8:	ee35 5b47 	vsub.f64	d5, d5, d7
 800e1fc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800e200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e204:	f57f af41 	bpl.w	800e08a <_dtoa_r+0x3ca>
 800e208:	4680      	mov	r8, r0
 800e20a:	3801      	subs	r0, #1
 800e20c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800e210:	2b30      	cmp	r3, #48	; 0x30
 800e212:	d0f9      	beq.n	800e208 <_dtoa_r+0x548>
 800e214:	4693      	mov	fp, r2
 800e216:	e02a      	b.n	800e26e <_dtoa_r+0x5ae>
 800e218:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e21c:	e7d6      	b.n	800e1cc <_dtoa_r+0x50c>
 800e21e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e222:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800e226:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e22a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800e22e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800e232:	ee15 3a10 	vmov	r3, s10
 800e236:	3330      	adds	r3, #48	; 0x30
 800e238:	f808 3b01 	strb.w	r3, [r8], #1
 800e23c:	9b01      	ldr	r3, [sp, #4]
 800e23e:	eba8 0303 	sub.w	r3, r8, r3
 800e242:	4599      	cmp	r9, r3
 800e244:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800e248:	eea3 7b46 	vfms.f64	d7, d3, d6
 800e24c:	d133      	bne.n	800e2b6 <_dtoa_r+0x5f6>
 800e24e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e252:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e25a:	dc1a      	bgt.n	800e292 <_dtoa_r+0x5d2>
 800e25c:	eeb4 7b46 	vcmp.f64	d7, d6
 800e260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e264:	d103      	bne.n	800e26e <_dtoa_r+0x5ae>
 800e266:	ee15 3a10 	vmov	r3, s10
 800e26a:	07d9      	lsls	r1, r3, #31
 800e26c:	d411      	bmi.n	800e292 <_dtoa_r+0x5d2>
 800e26e:	4629      	mov	r1, r5
 800e270:	4630      	mov	r0, r6
 800e272:	f000 fbd1 	bl	800ea18 <_Bfree>
 800e276:	2300      	movs	r3, #0
 800e278:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e27a:	f888 3000 	strb.w	r3, [r8]
 800e27e:	f10b 0301 	add.w	r3, fp, #1
 800e282:	6013      	str	r3, [r2, #0]
 800e284:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e286:	2b00      	cmp	r3, #0
 800e288:	f43f ad69 	beq.w	800dd5e <_dtoa_r+0x9e>
 800e28c:	f8c3 8000 	str.w	r8, [r3]
 800e290:	e565      	b.n	800dd5e <_dtoa_r+0x9e>
 800e292:	465a      	mov	r2, fp
 800e294:	4643      	mov	r3, r8
 800e296:	4698      	mov	r8, r3
 800e298:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800e29c:	2939      	cmp	r1, #57	; 0x39
 800e29e:	d106      	bne.n	800e2ae <_dtoa_r+0x5ee>
 800e2a0:	9901      	ldr	r1, [sp, #4]
 800e2a2:	4299      	cmp	r1, r3
 800e2a4:	d1f7      	bne.n	800e296 <_dtoa_r+0x5d6>
 800e2a6:	9801      	ldr	r0, [sp, #4]
 800e2a8:	2130      	movs	r1, #48	; 0x30
 800e2aa:	3201      	adds	r2, #1
 800e2ac:	7001      	strb	r1, [r0, #0]
 800e2ae:	7819      	ldrb	r1, [r3, #0]
 800e2b0:	3101      	adds	r1, #1
 800e2b2:	7019      	strb	r1, [r3, #0]
 800e2b4:	e7ae      	b.n	800e214 <_dtoa_r+0x554>
 800e2b6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e2ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e2be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2c2:	d1b2      	bne.n	800e22a <_dtoa_r+0x56a>
 800e2c4:	e7d3      	b.n	800e26e <_dtoa_r+0x5ae>
 800e2c6:	bf00      	nop
 800e2c8:	0800fc40 	.word	0x0800fc40
 800e2cc:	0800fc18 	.word	0x0800fc18
 800e2d0:	9907      	ldr	r1, [sp, #28]
 800e2d2:	2900      	cmp	r1, #0
 800e2d4:	f000 80d0 	beq.w	800e478 <_dtoa_r+0x7b8>
 800e2d8:	9906      	ldr	r1, [sp, #24]
 800e2da:	2901      	cmp	r1, #1
 800e2dc:	f300 80b4 	bgt.w	800e448 <_dtoa_r+0x788>
 800e2e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e2e2:	2900      	cmp	r1, #0
 800e2e4:	f000 80ac 	beq.w	800e440 <_dtoa_r+0x780>
 800e2e8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e2ec:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e2f0:	461c      	mov	r4, r3
 800e2f2:	9309      	str	r3, [sp, #36]	; 0x24
 800e2f4:	9b04      	ldr	r3, [sp, #16]
 800e2f6:	4413      	add	r3, r2
 800e2f8:	9304      	str	r3, [sp, #16]
 800e2fa:	9b05      	ldr	r3, [sp, #20]
 800e2fc:	2101      	movs	r1, #1
 800e2fe:	4413      	add	r3, r2
 800e300:	4630      	mov	r0, r6
 800e302:	9305      	str	r3, [sp, #20]
 800e304:	f000 fc3e 	bl	800eb84 <__i2b>
 800e308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e30a:	4607      	mov	r7, r0
 800e30c:	f1b8 0f00 	cmp.w	r8, #0
 800e310:	d00d      	beq.n	800e32e <_dtoa_r+0x66e>
 800e312:	9a05      	ldr	r2, [sp, #20]
 800e314:	2a00      	cmp	r2, #0
 800e316:	dd0a      	ble.n	800e32e <_dtoa_r+0x66e>
 800e318:	4542      	cmp	r2, r8
 800e31a:	9904      	ldr	r1, [sp, #16]
 800e31c:	bfa8      	it	ge
 800e31e:	4642      	movge	r2, r8
 800e320:	1a89      	subs	r1, r1, r2
 800e322:	9104      	str	r1, [sp, #16]
 800e324:	9905      	ldr	r1, [sp, #20]
 800e326:	eba8 0802 	sub.w	r8, r8, r2
 800e32a:	1a8a      	subs	r2, r1, r2
 800e32c:	9205      	str	r2, [sp, #20]
 800e32e:	b303      	cbz	r3, 800e372 <_dtoa_r+0x6b2>
 800e330:	9a07      	ldr	r2, [sp, #28]
 800e332:	2a00      	cmp	r2, #0
 800e334:	f000 80a5 	beq.w	800e482 <_dtoa_r+0x7c2>
 800e338:	2c00      	cmp	r4, #0
 800e33a:	dd13      	ble.n	800e364 <_dtoa_r+0x6a4>
 800e33c:	4639      	mov	r1, r7
 800e33e:	4622      	mov	r2, r4
 800e340:	4630      	mov	r0, r6
 800e342:	930d      	str	r3, [sp, #52]	; 0x34
 800e344:	f000 fcde 	bl	800ed04 <__pow5mult>
 800e348:	462a      	mov	r2, r5
 800e34a:	4601      	mov	r1, r0
 800e34c:	4607      	mov	r7, r0
 800e34e:	4630      	mov	r0, r6
 800e350:	f000 fc2e 	bl	800ebb0 <__multiply>
 800e354:	4629      	mov	r1, r5
 800e356:	9009      	str	r0, [sp, #36]	; 0x24
 800e358:	4630      	mov	r0, r6
 800e35a:	f000 fb5d 	bl	800ea18 <_Bfree>
 800e35e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e360:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e362:	4615      	mov	r5, r2
 800e364:	1b1a      	subs	r2, r3, r4
 800e366:	d004      	beq.n	800e372 <_dtoa_r+0x6b2>
 800e368:	4629      	mov	r1, r5
 800e36a:	4630      	mov	r0, r6
 800e36c:	f000 fcca 	bl	800ed04 <__pow5mult>
 800e370:	4605      	mov	r5, r0
 800e372:	2101      	movs	r1, #1
 800e374:	4630      	mov	r0, r6
 800e376:	f000 fc05 	bl	800eb84 <__i2b>
 800e37a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	4604      	mov	r4, r0
 800e380:	f340 8081 	ble.w	800e486 <_dtoa_r+0x7c6>
 800e384:	461a      	mov	r2, r3
 800e386:	4601      	mov	r1, r0
 800e388:	4630      	mov	r0, r6
 800e38a:	f000 fcbb 	bl	800ed04 <__pow5mult>
 800e38e:	9b06      	ldr	r3, [sp, #24]
 800e390:	2b01      	cmp	r3, #1
 800e392:	4604      	mov	r4, r0
 800e394:	dd7a      	ble.n	800e48c <_dtoa_r+0x7cc>
 800e396:	2300      	movs	r3, #0
 800e398:	9309      	str	r3, [sp, #36]	; 0x24
 800e39a:	6922      	ldr	r2, [r4, #16]
 800e39c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e3a0:	6910      	ldr	r0, [r2, #16]
 800e3a2:	f000 fba1 	bl	800eae8 <__hi0bits>
 800e3a6:	f1c0 0020 	rsb	r0, r0, #32
 800e3aa:	9b05      	ldr	r3, [sp, #20]
 800e3ac:	4418      	add	r0, r3
 800e3ae:	f010 001f 	ands.w	r0, r0, #31
 800e3b2:	f000 8093 	beq.w	800e4dc <_dtoa_r+0x81c>
 800e3b6:	f1c0 0220 	rsb	r2, r0, #32
 800e3ba:	2a04      	cmp	r2, #4
 800e3bc:	f340 8085 	ble.w	800e4ca <_dtoa_r+0x80a>
 800e3c0:	9b04      	ldr	r3, [sp, #16]
 800e3c2:	f1c0 001c 	rsb	r0, r0, #28
 800e3c6:	4403      	add	r3, r0
 800e3c8:	9304      	str	r3, [sp, #16]
 800e3ca:	9b05      	ldr	r3, [sp, #20]
 800e3cc:	4480      	add	r8, r0
 800e3ce:	4403      	add	r3, r0
 800e3d0:	9305      	str	r3, [sp, #20]
 800e3d2:	9b04      	ldr	r3, [sp, #16]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	dd05      	ble.n	800e3e4 <_dtoa_r+0x724>
 800e3d8:	4629      	mov	r1, r5
 800e3da:	461a      	mov	r2, r3
 800e3dc:	4630      	mov	r0, r6
 800e3de:	f000 fceb 	bl	800edb8 <__lshift>
 800e3e2:	4605      	mov	r5, r0
 800e3e4:	9b05      	ldr	r3, [sp, #20]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	dd05      	ble.n	800e3f6 <_dtoa_r+0x736>
 800e3ea:	4621      	mov	r1, r4
 800e3ec:	461a      	mov	r2, r3
 800e3ee:	4630      	mov	r0, r6
 800e3f0:	f000 fce2 	bl	800edb8 <__lshift>
 800e3f4:	4604      	mov	r4, r0
 800e3f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d071      	beq.n	800e4e0 <_dtoa_r+0x820>
 800e3fc:	4621      	mov	r1, r4
 800e3fe:	4628      	mov	r0, r5
 800e400:	f000 fd46 	bl	800ee90 <__mcmp>
 800e404:	2800      	cmp	r0, #0
 800e406:	da6b      	bge.n	800e4e0 <_dtoa_r+0x820>
 800e408:	2300      	movs	r3, #0
 800e40a:	4629      	mov	r1, r5
 800e40c:	220a      	movs	r2, #10
 800e40e:	4630      	mov	r0, r6
 800e410:	f000 fb24 	bl	800ea5c <__multadd>
 800e414:	9b07      	ldr	r3, [sp, #28]
 800e416:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e41a:	4605      	mov	r5, r0
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	f000 8197 	beq.w	800e750 <_dtoa_r+0xa90>
 800e422:	4639      	mov	r1, r7
 800e424:	2300      	movs	r3, #0
 800e426:	220a      	movs	r2, #10
 800e428:	4630      	mov	r0, r6
 800e42a:	f000 fb17 	bl	800ea5c <__multadd>
 800e42e:	f1ba 0f00 	cmp.w	sl, #0
 800e432:	4607      	mov	r7, r0
 800e434:	f300 8093 	bgt.w	800e55e <_dtoa_r+0x89e>
 800e438:	9b06      	ldr	r3, [sp, #24]
 800e43a:	2b02      	cmp	r3, #2
 800e43c:	dc57      	bgt.n	800e4ee <_dtoa_r+0x82e>
 800e43e:	e08e      	b.n	800e55e <_dtoa_r+0x89e>
 800e440:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e442:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e446:	e751      	b.n	800e2ec <_dtoa_r+0x62c>
 800e448:	f109 34ff 	add.w	r4, r9, #4294967295
 800e44c:	42a3      	cmp	r3, r4
 800e44e:	bfbf      	itttt	lt
 800e450:	1ae2      	sublt	r2, r4, r3
 800e452:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e454:	189b      	addlt	r3, r3, r2
 800e456:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e458:	bfae      	itee	ge
 800e45a:	1b1c      	subge	r4, r3, r4
 800e45c:	4623      	movlt	r3, r4
 800e45e:	2400      	movlt	r4, #0
 800e460:	f1b9 0f00 	cmp.w	r9, #0
 800e464:	bfb5      	itete	lt
 800e466:	9a04      	ldrlt	r2, [sp, #16]
 800e468:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800e46c:	eba2 0809 	sublt.w	r8, r2, r9
 800e470:	464a      	movge	r2, r9
 800e472:	bfb8      	it	lt
 800e474:	2200      	movlt	r2, #0
 800e476:	e73c      	b.n	800e2f2 <_dtoa_r+0x632>
 800e478:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e47c:	9f07      	ldr	r7, [sp, #28]
 800e47e:	461c      	mov	r4, r3
 800e480:	e744      	b.n	800e30c <_dtoa_r+0x64c>
 800e482:	461a      	mov	r2, r3
 800e484:	e770      	b.n	800e368 <_dtoa_r+0x6a8>
 800e486:	9b06      	ldr	r3, [sp, #24]
 800e488:	2b01      	cmp	r3, #1
 800e48a:	dc18      	bgt.n	800e4be <_dtoa_r+0x7fe>
 800e48c:	9b02      	ldr	r3, [sp, #8]
 800e48e:	b9b3      	cbnz	r3, 800e4be <_dtoa_r+0x7fe>
 800e490:	9b03      	ldr	r3, [sp, #12]
 800e492:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800e496:	b9a2      	cbnz	r2, 800e4c2 <_dtoa_r+0x802>
 800e498:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e49c:	0d12      	lsrs	r2, r2, #20
 800e49e:	0512      	lsls	r2, r2, #20
 800e4a0:	b18a      	cbz	r2, 800e4c6 <_dtoa_r+0x806>
 800e4a2:	9b04      	ldr	r3, [sp, #16]
 800e4a4:	3301      	adds	r3, #1
 800e4a6:	9304      	str	r3, [sp, #16]
 800e4a8:	9b05      	ldr	r3, [sp, #20]
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	9305      	str	r3, [sp, #20]
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	9309      	str	r3, [sp, #36]	; 0x24
 800e4b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	f47f af70 	bne.w	800e39a <_dtoa_r+0x6da>
 800e4ba:	2001      	movs	r0, #1
 800e4bc:	e775      	b.n	800e3aa <_dtoa_r+0x6ea>
 800e4be:	2300      	movs	r3, #0
 800e4c0:	e7f6      	b.n	800e4b0 <_dtoa_r+0x7f0>
 800e4c2:	9b02      	ldr	r3, [sp, #8]
 800e4c4:	e7f4      	b.n	800e4b0 <_dtoa_r+0x7f0>
 800e4c6:	9209      	str	r2, [sp, #36]	; 0x24
 800e4c8:	e7f3      	b.n	800e4b2 <_dtoa_r+0x7f2>
 800e4ca:	d082      	beq.n	800e3d2 <_dtoa_r+0x712>
 800e4cc:	9b04      	ldr	r3, [sp, #16]
 800e4ce:	321c      	adds	r2, #28
 800e4d0:	4413      	add	r3, r2
 800e4d2:	9304      	str	r3, [sp, #16]
 800e4d4:	9b05      	ldr	r3, [sp, #20]
 800e4d6:	4490      	add	r8, r2
 800e4d8:	4413      	add	r3, r2
 800e4da:	e779      	b.n	800e3d0 <_dtoa_r+0x710>
 800e4dc:	4602      	mov	r2, r0
 800e4de:	e7f5      	b.n	800e4cc <_dtoa_r+0x80c>
 800e4e0:	f1b9 0f00 	cmp.w	r9, #0
 800e4e4:	dc36      	bgt.n	800e554 <_dtoa_r+0x894>
 800e4e6:	9b06      	ldr	r3, [sp, #24]
 800e4e8:	2b02      	cmp	r3, #2
 800e4ea:	dd33      	ble.n	800e554 <_dtoa_r+0x894>
 800e4ec:	46ca      	mov	sl, r9
 800e4ee:	f1ba 0f00 	cmp.w	sl, #0
 800e4f2:	d10d      	bne.n	800e510 <_dtoa_r+0x850>
 800e4f4:	4621      	mov	r1, r4
 800e4f6:	4653      	mov	r3, sl
 800e4f8:	2205      	movs	r2, #5
 800e4fa:	4630      	mov	r0, r6
 800e4fc:	f000 faae 	bl	800ea5c <__multadd>
 800e500:	4601      	mov	r1, r0
 800e502:	4604      	mov	r4, r0
 800e504:	4628      	mov	r0, r5
 800e506:	f000 fcc3 	bl	800ee90 <__mcmp>
 800e50a:	2800      	cmp	r0, #0
 800e50c:	f73f ade4 	bgt.w	800e0d8 <_dtoa_r+0x418>
 800e510:	9b08      	ldr	r3, [sp, #32]
 800e512:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e516:	ea6f 0b03 	mvn.w	fp, r3
 800e51a:	f04f 0900 	mov.w	r9, #0
 800e51e:	4621      	mov	r1, r4
 800e520:	4630      	mov	r0, r6
 800e522:	f000 fa79 	bl	800ea18 <_Bfree>
 800e526:	2f00      	cmp	r7, #0
 800e528:	f43f aea1 	beq.w	800e26e <_dtoa_r+0x5ae>
 800e52c:	f1b9 0f00 	cmp.w	r9, #0
 800e530:	d005      	beq.n	800e53e <_dtoa_r+0x87e>
 800e532:	45b9      	cmp	r9, r7
 800e534:	d003      	beq.n	800e53e <_dtoa_r+0x87e>
 800e536:	4649      	mov	r1, r9
 800e538:	4630      	mov	r0, r6
 800e53a:	f000 fa6d 	bl	800ea18 <_Bfree>
 800e53e:	4639      	mov	r1, r7
 800e540:	4630      	mov	r0, r6
 800e542:	f000 fa69 	bl	800ea18 <_Bfree>
 800e546:	e692      	b.n	800e26e <_dtoa_r+0x5ae>
 800e548:	2400      	movs	r4, #0
 800e54a:	4627      	mov	r7, r4
 800e54c:	e7e0      	b.n	800e510 <_dtoa_r+0x850>
 800e54e:	4693      	mov	fp, r2
 800e550:	4627      	mov	r7, r4
 800e552:	e5c1      	b.n	800e0d8 <_dtoa_r+0x418>
 800e554:	9b07      	ldr	r3, [sp, #28]
 800e556:	46ca      	mov	sl, r9
 800e558:	2b00      	cmp	r3, #0
 800e55a:	f000 8100 	beq.w	800e75e <_dtoa_r+0xa9e>
 800e55e:	f1b8 0f00 	cmp.w	r8, #0
 800e562:	dd05      	ble.n	800e570 <_dtoa_r+0x8b0>
 800e564:	4639      	mov	r1, r7
 800e566:	4642      	mov	r2, r8
 800e568:	4630      	mov	r0, r6
 800e56a:	f000 fc25 	bl	800edb8 <__lshift>
 800e56e:	4607      	mov	r7, r0
 800e570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e572:	2b00      	cmp	r3, #0
 800e574:	d05d      	beq.n	800e632 <_dtoa_r+0x972>
 800e576:	6879      	ldr	r1, [r7, #4]
 800e578:	4630      	mov	r0, r6
 800e57a:	f000 fa0d 	bl	800e998 <_Balloc>
 800e57e:	4680      	mov	r8, r0
 800e580:	b928      	cbnz	r0, 800e58e <_dtoa_r+0x8ce>
 800e582:	4b82      	ldr	r3, [pc, #520]	; (800e78c <_dtoa_r+0xacc>)
 800e584:	4602      	mov	r2, r0
 800e586:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e58a:	f7ff bbb1 	b.w	800dcf0 <_dtoa_r+0x30>
 800e58e:	693a      	ldr	r2, [r7, #16]
 800e590:	3202      	adds	r2, #2
 800e592:	0092      	lsls	r2, r2, #2
 800e594:	f107 010c 	add.w	r1, r7, #12
 800e598:	300c      	adds	r0, #12
 800e59a:	f001 f971 	bl	800f880 <memcpy>
 800e59e:	2201      	movs	r2, #1
 800e5a0:	4641      	mov	r1, r8
 800e5a2:	4630      	mov	r0, r6
 800e5a4:	f000 fc08 	bl	800edb8 <__lshift>
 800e5a8:	9b01      	ldr	r3, [sp, #4]
 800e5aa:	3301      	adds	r3, #1
 800e5ac:	9304      	str	r3, [sp, #16]
 800e5ae:	9b01      	ldr	r3, [sp, #4]
 800e5b0:	4453      	add	r3, sl
 800e5b2:	9308      	str	r3, [sp, #32]
 800e5b4:	9b02      	ldr	r3, [sp, #8]
 800e5b6:	f003 0301 	and.w	r3, r3, #1
 800e5ba:	46b9      	mov	r9, r7
 800e5bc:	9307      	str	r3, [sp, #28]
 800e5be:	4607      	mov	r7, r0
 800e5c0:	9b04      	ldr	r3, [sp, #16]
 800e5c2:	4621      	mov	r1, r4
 800e5c4:	3b01      	subs	r3, #1
 800e5c6:	4628      	mov	r0, r5
 800e5c8:	9302      	str	r3, [sp, #8]
 800e5ca:	f7ff faee 	bl	800dbaa <quorem>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	3330      	adds	r3, #48	; 0x30
 800e5d2:	9005      	str	r0, [sp, #20]
 800e5d4:	4649      	mov	r1, r9
 800e5d6:	4628      	mov	r0, r5
 800e5d8:	9309      	str	r3, [sp, #36]	; 0x24
 800e5da:	f000 fc59 	bl	800ee90 <__mcmp>
 800e5de:	463a      	mov	r2, r7
 800e5e0:	4682      	mov	sl, r0
 800e5e2:	4621      	mov	r1, r4
 800e5e4:	4630      	mov	r0, r6
 800e5e6:	f000 fc6f 	bl	800eec8 <__mdiff>
 800e5ea:	68c2      	ldr	r2, [r0, #12]
 800e5ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5ee:	4680      	mov	r8, r0
 800e5f0:	bb0a      	cbnz	r2, 800e636 <_dtoa_r+0x976>
 800e5f2:	4601      	mov	r1, r0
 800e5f4:	4628      	mov	r0, r5
 800e5f6:	f000 fc4b 	bl	800ee90 <__mcmp>
 800e5fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5fc:	4602      	mov	r2, r0
 800e5fe:	4641      	mov	r1, r8
 800e600:	4630      	mov	r0, r6
 800e602:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800e606:	f000 fa07 	bl	800ea18 <_Bfree>
 800e60a:	9b06      	ldr	r3, [sp, #24]
 800e60c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e60e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e612:	ea43 0102 	orr.w	r1, r3, r2
 800e616:	9b07      	ldr	r3, [sp, #28]
 800e618:	4319      	orrs	r1, r3
 800e61a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e61c:	d10d      	bne.n	800e63a <_dtoa_r+0x97a>
 800e61e:	2b39      	cmp	r3, #57	; 0x39
 800e620:	d029      	beq.n	800e676 <_dtoa_r+0x9b6>
 800e622:	f1ba 0f00 	cmp.w	sl, #0
 800e626:	dd01      	ble.n	800e62c <_dtoa_r+0x96c>
 800e628:	9b05      	ldr	r3, [sp, #20]
 800e62a:	3331      	adds	r3, #49	; 0x31
 800e62c:	9a02      	ldr	r2, [sp, #8]
 800e62e:	7013      	strb	r3, [r2, #0]
 800e630:	e775      	b.n	800e51e <_dtoa_r+0x85e>
 800e632:	4638      	mov	r0, r7
 800e634:	e7b8      	b.n	800e5a8 <_dtoa_r+0x8e8>
 800e636:	2201      	movs	r2, #1
 800e638:	e7e1      	b.n	800e5fe <_dtoa_r+0x93e>
 800e63a:	f1ba 0f00 	cmp.w	sl, #0
 800e63e:	db06      	blt.n	800e64e <_dtoa_r+0x98e>
 800e640:	9906      	ldr	r1, [sp, #24]
 800e642:	ea41 0a0a 	orr.w	sl, r1, sl
 800e646:	9907      	ldr	r1, [sp, #28]
 800e648:	ea5a 0a01 	orrs.w	sl, sl, r1
 800e64c:	d120      	bne.n	800e690 <_dtoa_r+0x9d0>
 800e64e:	2a00      	cmp	r2, #0
 800e650:	ddec      	ble.n	800e62c <_dtoa_r+0x96c>
 800e652:	4629      	mov	r1, r5
 800e654:	2201      	movs	r2, #1
 800e656:	4630      	mov	r0, r6
 800e658:	9304      	str	r3, [sp, #16]
 800e65a:	f000 fbad 	bl	800edb8 <__lshift>
 800e65e:	4621      	mov	r1, r4
 800e660:	4605      	mov	r5, r0
 800e662:	f000 fc15 	bl	800ee90 <__mcmp>
 800e666:	2800      	cmp	r0, #0
 800e668:	9b04      	ldr	r3, [sp, #16]
 800e66a:	dc02      	bgt.n	800e672 <_dtoa_r+0x9b2>
 800e66c:	d1de      	bne.n	800e62c <_dtoa_r+0x96c>
 800e66e:	07da      	lsls	r2, r3, #31
 800e670:	d5dc      	bpl.n	800e62c <_dtoa_r+0x96c>
 800e672:	2b39      	cmp	r3, #57	; 0x39
 800e674:	d1d8      	bne.n	800e628 <_dtoa_r+0x968>
 800e676:	9a02      	ldr	r2, [sp, #8]
 800e678:	2339      	movs	r3, #57	; 0x39
 800e67a:	7013      	strb	r3, [r2, #0]
 800e67c:	4643      	mov	r3, r8
 800e67e:	4698      	mov	r8, r3
 800e680:	3b01      	subs	r3, #1
 800e682:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800e686:	2a39      	cmp	r2, #57	; 0x39
 800e688:	d051      	beq.n	800e72e <_dtoa_r+0xa6e>
 800e68a:	3201      	adds	r2, #1
 800e68c:	701a      	strb	r2, [r3, #0]
 800e68e:	e746      	b.n	800e51e <_dtoa_r+0x85e>
 800e690:	2a00      	cmp	r2, #0
 800e692:	dd03      	ble.n	800e69c <_dtoa_r+0x9dc>
 800e694:	2b39      	cmp	r3, #57	; 0x39
 800e696:	d0ee      	beq.n	800e676 <_dtoa_r+0x9b6>
 800e698:	3301      	adds	r3, #1
 800e69a:	e7c7      	b.n	800e62c <_dtoa_r+0x96c>
 800e69c:	9a04      	ldr	r2, [sp, #16]
 800e69e:	9908      	ldr	r1, [sp, #32]
 800e6a0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e6a4:	428a      	cmp	r2, r1
 800e6a6:	d02b      	beq.n	800e700 <_dtoa_r+0xa40>
 800e6a8:	4629      	mov	r1, r5
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	220a      	movs	r2, #10
 800e6ae:	4630      	mov	r0, r6
 800e6b0:	f000 f9d4 	bl	800ea5c <__multadd>
 800e6b4:	45b9      	cmp	r9, r7
 800e6b6:	4605      	mov	r5, r0
 800e6b8:	f04f 0300 	mov.w	r3, #0
 800e6bc:	f04f 020a 	mov.w	r2, #10
 800e6c0:	4649      	mov	r1, r9
 800e6c2:	4630      	mov	r0, r6
 800e6c4:	d107      	bne.n	800e6d6 <_dtoa_r+0xa16>
 800e6c6:	f000 f9c9 	bl	800ea5c <__multadd>
 800e6ca:	4681      	mov	r9, r0
 800e6cc:	4607      	mov	r7, r0
 800e6ce:	9b04      	ldr	r3, [sp, #16]
 800e6d0:	3301      	adds	r3, #1
 800e6d2:	9304      	str	r3, [sp, #16]
 800e6d4:	e774      	b.n	800e5c0 <_dtoa_r+0x900>
 800e6d6:	f000 f9c1 	bl	800ea5c <__multadd>
 800e6da:	4639      	mov	r1, r7
 800e6dc:	4681      	mov	r9, r0
 800e6de:	2300      	movs	r3, #0
 800e6e0:	220a      	movs	r2, #10
 800e6e2:	4630      	mov	r0, r6
 800e6e4:	f000 f9ba 	bl	800ea5c <__multadd>
 800e6e8:	4607      	mov	r7, r0
 800e6ea:	e7f0      	b.n	800e6ce <_dtoa_r+0xa0e>
 800e6ec:	f1ba 0f00 	cmp.w	sl, #0
 800e6f0:	9a01      	ldr	r2, [sp, #4]
 800e6f2:	bfcc      	ite	gt
 800e6f4:	46d0      	movgt	r8, sl
 800e6f6:	f04f 0801 	movle.w	r8, #1
 800e6fa:	4490      	add	r8, r2
 800e6fc:	f04f 0900 	mov.w	r9, #0
 800e700:	4629      	mov	r1, r5
 800e702:	2201      	movs	r2, #1
 800e704:	4630      	mov	r0, r6
 800e706:	9302      	str	r3, [sp, #8]
 800e708:	f000 fb56 	bl	800edb8 <__lshift>
 800e70c:	4621      	mov	r1, r4
 800e70e:	4605      	mov	r5, r0
 800e710:	f000 fbbe 	bl	800ee90 <__mcmp>
 800e714:	2800      	cmp	r0, #0
 800e716:	dcb1      	bgt.n	800e67c <_dtoa_r+0x9bc>
 800e718:	d102      	bne.n	800e720 <_dtoa_r+0xa60>
 800e71a:	9b02      	ldr	r3, [sp, #8]
 800e71c:	07db      	lsls	r3, r3, #31
 800e71e:	d4ad      	bmi.n	800e67c <_dtoa_r+0x9bc>
 800e720:	4643      	mov	r3, r8
 800e722:	4698      	mov	r8, r3
 800e724:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e728:	2a30      	cmp	r2, #48	; 0x30
 800e72a:	d0fa      	beq.n	800e722 <_dtoa_r+0xa62>
 800e72c:	e6f7      	b.n	800e51e <_dtoa_r+0x85e>
 800e72e:	9a01      	ldr	r2, [sp, #4]
 800e730:	429a      	cmp	r2, r3
 800e732:	d1a4      	bne.n	800e67e <_dtoa_r+0x9be>
 800e734:	f10b 0b01 	add.w	fp, fp, #1
 800e738:	2331      	movs	r3, #49	; 0x31
 800e73a:	e778      	b.n	800e62e <_dtoa_r+0x96e>
 800e73c:	4b14      	ldr	r3, [pc, #80]	; (800e790 <_dtoa_r+0xad0>)
 800e73e:	f7ff bb2a 	b.w	800dd96 <_dtoa_r+0xd6>
 800e742:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e744:	2b00      	cmp	r3, #0
 800e746:	f47f ab05 	bne.w	800dd54 <_dtoa_r+0x94>
 800e74a:	4b12      	ldr	r3, [pc, #72]	; (800e794 <_dtoa_r+0xad4>)
 800e74c:	f7ff bb23 	b.w	800dd96 <_dtoa_r+0xd6>
 800e750:	f1ba 0f00 	cmp.w	sl, #0
 800e754:	dc03      	bgt.n	800e75e <_dtoa_r+0xa9e>
 800e756:	9b06      	ldr	r3, [sp, #24]
 800e758:	2b02      	cmp	r3, #2
 800e75a:	f73f aec8 	bgt.w	800e4ee <_dtoa_r+0x82e>
 800e75e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e762:	4621      	mov	r1, r4
 800e764:	4628      	mov	r0, r5
 800e766:	f7ff fa20 	bl	800dbaa <quorem>
 800e76a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e76e:	f808 3b01 	strb.w	r3, [r8], #1
 800e772:	9a01      	ldr	r2, [sp, #4]
 800e774:	eba8 0202 	sub.w	r2, r8, r2
 800e778:	4592      	cmp	sl, r2
 800e77a:	ddb7      	ble.n	800e6ec <_dtoa_r+0xa2c>
 800e77c:	4629      	mov	r1, r5
 800e77e:	2300      	movs	r3, #0
 800e780:	220a      	movs	r2, #10
 800e782:	4630      	mov	r0, r6
 800e784:	f000 f96a 	bl	800ea5c <__multadd>
 800e788:	4605      	mov	r5, r0
 800e78a:	e7ea      	b.n	800e762 <_dtoa_r+0xaa2>
 800e78c:	0800fba8 	.word	0x0800fba8
 800e790:	0800fb08 	.word	0x0800fb08
 800e794:	0800fb2c 	.word	0x0800fb2c

0800e798 <_free_r>:
 800e798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e79a:	2900      	cmp	r1, #0
 800e79c:	d044      	beq.n	800e828 <_free_r+0x90>
 800e79e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7a2:	9001      	str	r0, [sp, #4]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	f1a1 0404 	sub.w	r4, r1, #4
 800e7aa:	bfb8      	it	lt
 800e7ac:	18e4      	addlt	r4, r4, r3
 800e7ae:	f000 f8e7 	bl	800e980 <__malloc_lock>
 800e7b2:	4a1e      	ldr	r2, [pc, #120]	; (800e82c <_free_r+0x94>)
 800e7b4:	9801      	ldr	r0, [sp, #4]
 800e7b6:	6813      	ldr	r3, [r2, #0]
 800e7b8:	b933      	cbnz	r3, 800e7c8 <_free_r+0x30>
 800e7ba:	6063      	str	r3, [r4, #4]
 800e7bc:	6014      	str	r4, [r2, #0]
 800e7be:	b003      	add	sp, #12
 800e7c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e7c4:	f000 b8e2 	b.w	800e98c <__malloc_unlock>
 800e7c8:	42a3      	cmp	r3, r4
 800e7ca:	d908      	bls.n	800e7de <_free_r+0x46>
 800e7cc:	6825      	ldr	r5, [r4, #0]
 800e7ce:	1961      	adds	r1, r4, r5
 800e7d0:	428b      	cmp	r3, r1
 800e7d2:	bf01      	itttt	eq
 800e7d4:	6819      	ldreq	r1, [r3, #0]
 800e7d6:	685b      	ldreq	r3, [r3, #4]
 800e7d8:	1949      	addeq	r1, r1, r5
 800e7da:	6021      	streq	r1, [r4, #0]
 800e7dc:	e7ed      	b.n	800e7ba <_free_r+0x22>
 800e7de:	461a      	mov	r2, r3
 800e7e0:	685b      	ldr	r3, [r3, #4]
 800e7e2:	b10b      	cbz	r3, 800e7e8 <_free_r+0x50>
 800e7e4:	42a3      	cmp	r3, r4
 800e7e6:	d9fa      	bls.n	800e7de <_free_r+0x46>
 800e7e8:	6811      	ldr	r1, [r2, #0]
 800e7ea:	1855      	adds	r5, r2, r1
 800e7ec:	42a5      	cmp	r5, r4
 800e7ee:	d10b      	bne.n	800e808 <_free_r+0x70>
 800e7f0:	6824      	ldr	r4, [r4, #0]
 800e7f2:	4421      	add	r1, r4
 800e7f4:	1854      	adds	r4, r2, r1
 800e7f6:	42a3      	cmp	r3, r4
 800e7f8:	6011      	str	r1, [r2, #0]
 800e7fa:	d1e0      	bne.n	800e7be <_free_r+0x26>
 800e7fc:	681c      	ldr	r4, [r3, #0]
 800e7fe:	685b      	ldr	r3, [r3, #4]
 800e800:	6053      	str	r3, [r2, #4]
 800e802:	440c      	add	r4, r1
 800e804:	6014      	str	r4, [r2, #0]
 800e806:	e7da      	b.n	800e7be <_free_r+0x26>
 800e808:	d902      	bls.n	800e810 <_free_r+0x78>
 800e80a:	230c      	movs	r3, #12
 800e80c:	6003      	str	r3, [r0, #0]
 800e80e:	e7d6      	b.n	800e7be <_free_r+0x26>
 800e810:	6825      	ldr	r5, [r4, #0]
 800e812:	1961      	adds	r1, r4, r5
 800e814:	428b      	cmp	r3, r1
 800e816:	bf04      	itt	eq
 800e818:	6819      	ldreq	r1, [r3, #0]
 800e81a:	685b      	ldreq	r3, [r3, #4]
 800e81c:	6063      	str	r3, [r4, #4]
 800e81e:	bf04      	itt	eq
 800e820:	1949      	addeq	r1, r1, r5
 800e822:	6021      	streq	r1, [r4, #0]
 800e824:	6054      	str	r4, [r2, #4]
 800e826:	e7ca      	b.n	800e7be <_free_r+0x26>
 800e828:	b003      	add	sp, #12
 800e82a:	bd30      	pop	{r4, r5, pc}
 800e82c:	24062080 	.word	0x24062080

0800e830 <malloc>:
 800e830:	4b02      	ldr	r3, [pc, #8]	; (800e83c <malloc+0xc>)
 800e832:	4601      	mov	r1, r0
 800e834:	6818      	ldr	r0, [r3, #0]
 800e836:	f000 b823 	b.w	800e880 <_malloc_r>
 800e83a:	bf00      	nop
 800e83c:	24000070 	.word	0x24000070

0800e840 <sbrk_aligned>:
 800e840:	b570      	push	{r4, r5, r6, lr}
 800e842:	4e0e      	ldr	r6, [pc, #56]	; (800e87c <sbrk_aligned+0x3c>)
 800e844:	460c      	mov	r4, r1
 800e846:	6831      	ldr	r1, [r6, #0]
 800e848:	4605      	mov	r5, r0
 800e84a:	b911      	cbnz	r1, 800e852 <sbrk_aligned+0x12>
 800e84c:	f001 f808 	bl	800f860 <_sbrk_r>
 800e850:	6030      	str	r0, [r6, #0]
 800e852:	4621      	mov	r1, r4
 800e854:	4628      	mov	r0, r5
 800e856:	f001 f803 	bl	800f860 <_sbrk_r>
 800e85a:	1c43      	adds	r3, r0, #1
 800e85c:	d00a      	beq.n	800e874 <sbrk_aligned+0x34>
 800e85e:	1cc4      	adds	r4, r0, #3
 800e860:	f024 0403 	bic.w	r4, r4, #3
 800e864:	42a0      	cmp	r0, r4
 800e866:	d007      	beq.n	800e878 <sbrk_aligned+0x38>
 800e868:	1a21      	subs	r1, r4, r0
 800e86a:	4628      	mov	r0, r5
 800e86c:	f000 fff8 	bl	800f860 <_sbrk_r>
 800e870:	3001      	adds	r0, #1
 800e872:	d101      	bne.n	800e878 <sbrk_aligned+0x38>
 800e874:	f04f 34ff 	mov.w	r4, #4294967295
 800e878:	4620      	mov	r0, r4
 800e87a:	bd70      	pop	{r4, r5, r6, pc}
 800e87c:	24062084 	.word	0x24062084

0800e880 <_malloc_r>:
 800e880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e884:	1ccd      	adds	r5, r1, #3
 800e886:	f025 0503 	bic.w	r5, r5, #3
 800e88a:	3508      	adds	r5, #8
 800e88c:	2d0c      	cmp	r5, #12
 800e88e:	bf38      	it	cc
 800e890:	250c      	movcc	r5, #12
 800e892:	2d00      	cmp	r5, #0
 800e894:	4607      	mov	r7, r0
 800e896:	db01      	blt.n	800e89c <_malloc_r+0x1c>
 800e898:	42a9      	cmp	r1, r5
 800e89a:	d905      	bls.n	800e8a8 <_malloc_r+0x28>
 800e89c:	230c      	movs	r3, #12
 800e89e:	603b      	str	r3, [r7, #0]
 800e8a0:	2600      	movs	r6, #0
 800e8a2:	4630      	mov	r0, r6
 800e8a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e97c <_malloc_r+0xfc>
 800e8ac:	f000 f868 	bl	800e980 <__malloc_lock>
 800e8b0:	f8d8 3000 	ldr.w	r3, [r8]
 800e8b4:	461c      	mov	r4, r3
 800e8b6:	bb5c      	cbnz	r4, 800e910 <_malloc_r+0x90>
 800e8b8:	4629      	mov	r1, r5
 800e8ba:	4638      	mov	r0, r7
 800e8bc:	f7ff ffc0 	bl	800e840 <sbrk_aligned>
 800e8c0:	1c43      	adds	r3, r0, #1
 800e8c2:	4604      	mov	r4, r0
 800e8c4:	d155      	bne.n	800e972 <_malloc_r+0xf2>
 800e8c6:	f8d8 4000 	ldr.w	r4, [r8]
 800e8ca:	4626      	mov	r6, r4
 800e8cc:	2e00      	cmp	r6, #0
 800e8ce:	d145      	bne.n	800e95c <_malloc_r+0xdc>
 800e8d0:	2c00      	cmp	r4, #0
 800e8d2:	d048      	beq.n	800e966 <_malloc_r+0xe6>
 800e8d4:	6823      	ldr	r3, [r4, #0]
 800e8d6:	4631      	mov	r1, r6
 800e8d8:	4638      	mov	r0, r7
 800e8da:	eb04 0903 	add.w	r9, r4, r3
 800e8de:	f000 ffbf 	bl	800f860 <_sbrk_r>
 800e8e2:	4581      	cmp	r9, r0
 800e8e4:	d13f      	bne.n	800e966 <_malloc_r+0xe6>
 800e8e6:	6821      	ldr	r1, [r4, #0]
 800e8e8:	1a6d      	subs	r5, r5, r1
 800e8ea:	4629      	mov	r1, r5
 800e8ec:	4638      	mov	r0, r7
 800e8ee:	f7ff ffa7 	bl	800e840 <sbrk_aligned>
 800e8f2:	3001      	adds	r0, #1
 800e8f4:	d037      	beq.n	800e966 <_malloc_r+0xe6>
 800e8f6:	6823      	ldr	r3, [r4, #0]
 800e8f8:	442b      	add	r3, r5
 800e8fa:	6023      	str	r3, [r4, #0]
 800e8fc:	f8d8 3000 	ldr.w	r3, [r8]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d038      	beq.n	800e976 <_malloc_r+0xf6>
 800e904:	685a      	ldr	r2, [r3, #4]
 800e906:	42a2      	cmp	r2, r4
 800e908:	d12b      	bne.n	800e962 <_malloc_r+0xe2>
 800e90a:	2200      	movs	r2, #0
 800e90c:	605a      	str	r2, [r3, #4]
 800e90e:	e00f      	b.n	800e930 <_malloc_r+0xb0>
 800e910:	6822      	ldr	r2, [r4, #0]
 800e912:	1b52      	subs	r2, r2, r5
 800e914:	d41f      	bmi.n	800e956 <_malloc_r+0xd6>
 800e916:	2a0b      	cmp	r2, #11
 800e918:	d917      	bls.n	800e94a <_malloc_r+0xca>
 800e91a:	1961      	adds	r1, r4, r5
 800e91c:	42a3      	cmp	r3, r4
 800e91e:	6025      	str	r5, [r4, #0]
 800e920:	bf18      	it	ne
 800e922:	6059      	strne	r1, [r3, #4]
 800e924:	6863      	ldr	r3, [r4, #4]
 800e926:	bf08      	it	eq
 800e928:	f8c8 1000 	streq.w	r1, [r8]
 800e92c:	5162      	str	r2, [r4, r5]
 800e92e:	604b      	str	r3, [r1, #4]
 800e930:	4638      	mov	r0, r7
 800e932:	f104 060b 	add.w	r6, r4, #11
 800e936:	f000 f829 	bl	800e98c <__malloc_unlock>
 800e93a:	f026 0607 	bic.w	r6, r6, #7
 800e93e:	1d23      	adds	r3, r4, #4
 800e940:	1af2      	subs	r2, r6, r3
 800e942:	d0ae      	beq.n	800e8a2 <_malloc_r+0x22>
 800e944:	1b9b      	subs	r3, r3, r6
 800e946:	50a3      	str	r3, [r4, r2]
 800e948:	e7ab      	b.n	800e8a2 <_malloc_r+0x22>
 800e94a:	42a3      	cmp	r3, r4
 800e94c:	6862      	ldr	r2, [r4, #4]
 800e94e:	d1dd      	bne.n	800e90c <_malloc_r+0x8c>
 800e950:	f8c8 2000 	str.w	r2, [r8]
 800e954:	e7ec      	b.n	800e930 <_malloc_r+0xb0>
 800e956:	4623      	mov	r3, r4
 800e958:	6864      	ldr	r4, [r4, #4]
 800e95a:	e7ac      	b.n	800e8b6 <_malloc_r+0x36>
 800e95c:	4634      	mov	r4, r6
 800e95e:	6876      	ldr	r6, [r6, #4]
 800e960:	e7b4      	b.n	800e8cc <_malloc_r+0x4c>
 800e962:	4613      	mov	r3, r2
 800e964:	e7cc      	b.n	800e900 <_malloc_r+0x80>
 800e966:	230c      	movs	r3, #12
 800e968:	603b      	str	r3, [r7, #0]
 800e96a:	4638      	mov	r0, r7
 800e96c:	f000 f80e 	bl	800e98c <__malloc_unlock>
 800e970:	e797      	b.n	800e8a2 <_malloc_r+0x22>
 800e972:	6025      	str	r5, [r4, #0]
 800e974:	e7dc      	b.n	800e930 <_malloc_r+0xb0>
 800e976:	605b      	str	r3, [r3, #4]
 800e978:	deff      	udf	#255	; 0xff
 800e97a:	bf00      	nop
 800e97c:	24062080 	.word	0x24062080

0800e980 <__malloc_lock>:
 800e980:	4801      	ldr	r0, [pc, #4]	; (800e988 <__malloc_lock+0x8>)
 800e982:	f7ff b910 	b.w	800dba6 <__retarget_lock_acquire_recursive>
 800e986:	bf00      	nop
 800e988:	2406207c 	.word	0x2406207c

0800e98c <__malloc_unlock>:
 800e98c:	4801      	ldr	r0, [pc, #4]	; (800e994 <__malloc_unlock+0x8>)
 800e98e:	f7ff b90b 	b.w	800dba8 <__retarget_lock_release_recursive>
 800e992:	bf00      	nop
 800e994:	2406207c 	.word	0x2406207c

0800e998 <_Balloc>:
 800e998:	b570      	push	{r4, r5, r6, lr}
 800e99a:	69c6      	ldr	r6, [r0, #28]
 800e99c:	4604      	mov	r4, r0
 800e99e:	460d      	mov	r5, r1
 800e9a0:	b976      	cbnz	r6, 800e9c0 <_Balloc+0x28>
 800e9a2:	2010      	movs	r0, #16
 800e9a4:	f7ff ff44 	bl	800e830 <malloc>
 800e9a8:	4602      	mov	r2, r0
 800e9aa:	61e0      	str	r0, [r4, #28]
 800e9ac:	b920      	cbnz	r0, 800e9b8 <_Balloc+0x20>
 800e9ae:	4b18      	ldr	r3, [pc, #96]	; (800ea10 <_Balloc+0x78>)
 800e9b0:	4818      	ldr	r0, [pc, #96]	; (800ea14 <_Balloc+0x7c>)
 800e9b2:	216b      	movs	r1, #107	; 0x6b
 800e9b4:	f000 ff72 	bl	800f89c <__assert_func>
 800e9b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e9bc:	6006      	str	r6, [r0, #0]
 800e9be:	60c6      	str	r6, [r0, #12]
 800e9c0:	69e6      	ldr	r6, [r4, #28]
 800e9c2:	68f3      	ldr	r3, [r6, #12]
 800e9c4:	b183      	cbz	r3, 800e9e8 <_Balloc+0x50>
 800e9c6:	69e3      	ldr	r3, [r4, #28]
 800e9c8:	68db      	ldr	r3, [r3, #12]
 800e9ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e9ce:	b9b8      	cbnz	r0, 800ea00 <_Balloc+0x68>
 800e9d0:	2101      	movs	r1, #1
 800e9d2:	fa01 f605 	lsl.w	r6, r1, r5
 800e9d6:	1d72      	adds	r2, r6, #5
 800e9d8:	0092      	lsls	r2, r2, #2
 800e9da:	4620      	mov	r0, r4
 800e9dc:	f000 ff7c 	bl	800f8d8 <_calloc_r>
 800e9e0:	b160      	cbz	r0, 800e9fc <_Balloc+0x64>
 800e9e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e9e6:	e00e      	b.n	800ea06 <_Balloc+0x6e>
 800e9e8:	2221      	movs	r2, #33	; 0x21
 800e9ea:	2104      	movs	r1, #4
 800e9ec:	4620      	mov	r0, r4
 800e9ee:	f000 ff73 	bl	800f8d8 <_calloc_r>
 800e9f2:	69e3      	ldr	r3, [r4, #28]
 800e9f4:	60f0      	str	r0, [r6, #12]
 800e9f6:	68db      	ldr	r3, [r3, #12]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d1e4      	bne.n	800e9c6 <_Balloc+0x2e>
 800e9fc:	2000      	movs	r0, #0
 800e9fe:	bd70      	pop	{r4, r5, r6, pc}
 800ea00:	6802      	ldr	r2, [r0, #0]
 800ea02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ea06:	2300      	movs	r3, #0
 800ea08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ea0c:	e7f7      	b.n	800e9fe <_Balloc+0x66>
 800ea0e:	bf00      	nop
 800ea10:	0800fb39 	.word	0x0800fb39
 800ea14:	0800fbb9 	.word	0x0800fbb9

0800ea18 <_Bfree>:
 800ea18:	b570      	push	{r4, r5, r6, lr}
 800ea1a:	69c6      	ldr	r6, [r0, #28]
 800ea1c:	4605      	mov	r5, r0
 800ea1e:	460c      	mov	r4, r1
 800ea20:	b976      	cbnz	r6, 800ea40 <_Bfree+0x28>
 800ea22:	2010      	movs	r0, #16
 800ea24:	f7ff ff04 	bl	800e830 <malloc>
 800ea28:	4602      	mov	r2, r0
 800ea2a:	61e8      	str	r0, [r5, #28]
 800ea2c:	b920      	cbnz	r0, 800ea38 <_Bfree+0x20>
 800ea2e:	4b09      	ldr	r3, [pc, #36]	; (800ea54 <_Bfree+0x3c>)
 800ea30:	4809      	ldr	r0, [pc, #36]	; (800ea58 <_Bfree+0x40>)
 800ea32:	218f      	movs	r1, #143	; 0x8f
 800ea34:	f000 ff32 	bl	800f89c <__assert_func>
 800ea38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea3c:	6006      	str	r6, [r0, #0]
 800ea3e:	60c6      	str	r6, [r0, #12]
 800ea40:	b13c      	cbz	r4, 800ea52 <_Bfree+0x3a>
 800ea42:	69eb      	ldr	r3, [r5, #28]
 800ea44:	6862      	ldr	r2, [r4, #4]
 800ea46:	68db      	ldr	r3, [r3, #12]
 800ea48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ea4c:	6021      	str	r1, [r4, #0]
 800ea4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ea52:	bd70      	pop	{r4, r5, r6, pc}
 800ea54:	0800fb39 	.word	0x0800fb39
 800ea58:	0800fbb9 	.word	0x0800fbb9

0800ea5c <__multadd>:
 800ea5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea60:	690d      	ldr	r5, [r1, #16]
 800ea62:	4607      	mov	r7, r0
 800ea64:	460c      	mov	r4, r1
 800ea66:	461e      	mov	r6, r3
 800ea68:	f101 0c14 	add.w	ip, r1, #20
 800ea6c:	2000      	movs	r0, #0
 800ea6e:	f8dc 3000 	ldr.w	r3, [ip]
 800ea72:	b299      	uxth	r1, r3
 800ea74:	fb02 6101 	mla	r1, r2, r1, r6
 800ea78:	0c1e      	lsrs	r6, r3, #16
 800ea7a:	0c0b      	lsrs	r3, r1, #16
 800ea7c:	fb02 3306 	mla	r3, r2, r6, r3
 800ea80:	b289      	uxth	r1, r1
 800ea82:	3001      	adds	r0, #1
 800ea84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ea88:	4285      	cmp	r5, r0
 800ea8a:	f84c 1b04 	str.w	r1, [ip], #4
 800ea8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ea92:	dcec      	bgt.n	800ea6e <__multadd+0x12>
 800ea94:	b30e      	cbz	r6, 800eada <__multadd+0x7e>
 800ea96:	68a3      	ldr	r3, [r4, #8]
 800ea98:	42ab      	cmp	r3, r5
 800ea9a:	dc19      	bgt.n	800ead0 <__multadd+0x74>
 800ea9c:	6861      	ldr	r1, [r4, #4]
 800ea9e:	4638      	mov	r0, r7
 800eaa0:	3101      	adds	r1, #1
 800eaa2:	f7ff ff79 	bl	800e998 <_Balloc>
 800eaa6:	4680      	mov	r8, r0
 800eaa8:	b928      	cbnz	r0, 800eab6 <__multadd+0x5a>
 800eaaa:	4602      	mov	r2, r0
 800eaac:	4b0c      	ldr	r3, [pc, #48]	; (800eae0 <__multadd+0x84>)
 800eaae:	480d      	ldr	r0, [pc, #52]	; (800eae4 <__multadd+0x88>)
 800eab0:	21ba      	movs	r1, #186	; 0xba
 800eab2:	f000 fef3 	bl	800f89c <__assert_func>
 800eab6:	6922      	ldr	r2, [r4, #16]
 800eab8:	3202      	adds	r2, #2
 800eaba:	f104 010c 	add.w	r1, r4, #12
 800eabe:	0092      	lsls	r2, r2, #2
 800eac0:	300c      	adds	r0, #12
 800eac2:	f000 fedd 	bl	800f880 <memcpy>
 800eac6:	4621      	mov	r1, r4
 800eac8:	4638      	mov	r0, r7
 800eaca:	f7ff ffa5 	bl	800ea18 <_Bfree>
 800eace:	4644      	mov	r4, r8
 800ead0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ead4:	3501      	adds	r5, #1
 800ead6:	615e      	str	r6, [r3, #20]
 800ead8:	6125      	str	r5, [r4, #16]
 800eada:	4620      	mov	r0, r4
 800eadc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eae0:	0800fba8 	.word	0x0800fba8
 800eae4:	0800fbb9 	.word	0x0800fbb9

0800eae8 <__hi0bits>:
 800eae8:	0c03      	lsrs	r3, r0, #16
 800eaea:	041b      	lsls	r3, r3, #16
 800eaec:	b9d3      	cbnz	r3, 800eb24 <__hi0bits+0x3c>
 800eaee:	0400      	lsls	r0, r0, #16
 800eaf0:	2310      	movs	r3, #16
 800eaf2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800eaf6:	bf04      	itt	eq
 800eaf8:	0200      	lsleq	r0, r0, #8
 800eafa:	3308      	addeq	r3, #8
 800eafc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800eb00:	bf04      	itt	eq
 800eb02:	0100      	lsleq	r0, r0, #4
 800eb04:	3304      	addeq	r3, #4
 800eb06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800eb0a:	bf04      	itt	eq
 800eb0c:	0080      	lsleq	r0, r0, #2
 800eb0e:	3302      	addeq	r3, #2
 800eb10:	2800      	cmp	r0, #0
 800eb12:	db05      	blt.n	800eb20 <__hi0bits+0x38>
 800eb14:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800eb18:	f103 0301 	add.w	r3, r3, #1
 800eb1c:	bf08      	it	eq
 800eb1e:	2320      	moveq	r3, #32
 800eb20:	4618      	mov	r0, r3
 800eb22:	4770      	bx	lr
 800eb24:	2300      	movs	r3, #0
 800eb26:	e7e4      	b.n	800eaf2 <__hi0bits+0xa>

0800eb28 <__lo0bits>:
 800eb28:	6803      	ldr	r3, [r0, #0]
 800eb2a:	f013 0207 	ands.w	r2, r3, #7
 800eb2e:	d00c      	beq.n	800eb4a <__lo0bits+0x22>
 800eb30:	07d9      	lsls	r1, r3, #31
 800eb32:	d422      	bmi.n	800eb7a <__lo0bits+0x52>
 800eb34:	079a      	lsls	r2, r3, #30
 800eb36:	bf49      	itett	mi
 800eb38:	085b      	lsrmi	r3, r3, #1
 800eb3a:	089b      	lsrpl	r3, r3, #2
 800eb3c:	6003      	strmi	r3, [r0, #0]
 800eb3e:	2201      	movmi	r2, #1
 800eb40:	bf5c      	itt	pl
 800eb42:	6003      	strpl	r3, [r0, #0]
 800eb44:	2202      	movpl	r2, #2
 800eb46:	4610      	mov	r0, r2
 800eb48:	4770      	bx	lr
 800eb4a:	b299      	uxth	r1, r3
 800eb4c:	b909      	cbnz	r1, 800eb52 <__lo0bits+0x2a>
 800eb4e:	0c1b      	lsrs	r3, r3, #16
 800eb50:	2210      	movs	r2, #16
 800eb52:	b2d9      	uxtb	r1, r3
 800eb54:	b909      	cbnz	r1, 800eb5a <__lo0bits+0x32>
 800eb56:	3208      	adds	r2, #8
 800eb58:	0a1b      	lsrs	r3, r3, #8
 800eb5a:	0719      	lsls	r1, r3, #28
 800eb5c:	bf04      	itt	eq
 800eb5e:	091b      	lsreq	r3, r3, #4
 800eb60:	3204      	addeq	r2, #4
 800eb62:	0799      	lsls	r1, r3, #30
 800eb64:	bf04      	itt	eq
 800eb66:	089b      	lsreq	r3, r3, #2
 800eb68:	3202      	addeq	r2, #2
 800eb6a:	07d9      	lsls	r1, r3, #31
 800eb6c:	d403      	bmi.n	800eb76 <__lo0bits+0x4e>
 800eb6e:	085b      	lsrs	r3, r3, #1
 800eb70:	f102 0201 	add.w	r2, r2, #1
 800eb74:	d003      	beq.n	800eb7e <__lo0bits+0x56>
 800eb76:	6003      	str	r3, [r0, #0]
 800eb78:	e7e5      	b.n	800eb46 <__lo0bits+0x1e>
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	e7e3      	b.n	800eb46 <__lo0bits+0x1e>
 800eb7e:	2220      	movs	r2, #32
 800eb80:	e7e1      	b.n	800eb46 <__lo0bits+0x1e>
	...

0800eb84 <__i2b>:
 800eb84:	b510      	push	{r4, lr}
 800eb86:	460c      	mov	r4, r1
 800eb88:	2101      	movs	r1, #1
 800eb8a:	f7ff ff05 	bl	800e998 <_Balloc>
 800eb8e:	4602      	mov	r2, r0
 800eb90:	b928      	cbnz	r0, 800eb9e <__i2b+0x1a>
 800eb92:	4b05      	ldr	r3, [pc, #20]	; (800eba8 <__i2b+0x24>)
 800eb94:	4805      	ldr	r0, [pc, #20]	; (800ebac <__i2b+0x28>)
 800eb96:	f240 1145 	movw	r1, #325	; 0x145
 800eb9a:	f000 fe7f 	bl	800f89c <__assert_func>
 800eb9e:	2301      	movs	r3, #1
 800eba0:	6144      	str	r4, [r0, #20]
 800eba2:	6103      	str	r3, [r0, #16]
 800eba4:	bd10      	pop	{r4, pc}
 800eba6:	bf00      	nop
 800eba8:	0800fba8 	.word	0x0800fba8
 800ebac:	0800fbb9 	.word	0x0800fbb9

0800ebb0 <__multiply>:
 800ebb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebb4:	4691      	mov	r9, r2
 800ebb6:	690a      	ldr	r2, [r1, #16]
 800ebb8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	bfb8      	it	lt
 800ebc0:	460b      	movlt	r3, r1
 800ebc2:	460c      	mov	r4, r1
 800ebc4:	bfbc      	itt	lt
 800ebc6:	464c      	movlt	r4, r9
 800ebc8:	4699      	movlt	r9, r3
 800ebca:	6927      	ldr	r7, [r4, #16]
 800ebcc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ebd0:	68a3      	ldr	r3, [r4, #8]
 800ebd2:	6861      	ldr	r1, [r4, #4]
 800ebd4:	eb07 060a 	add.w	r6, r7, sl
 800ebd8:	42b3      	cmp	r3, r6
 800ebda:	b085      	sub	sp, #20
 800ebdc:	bfb8      	it	lt
 800ebde:	3101      	addlt	r1, #1
 800ebe0:	f7ff feda 	bl	800e998 <_Balloc>
 800ebe4:	b930      	cbnz	r0, 800ebf4 <__multiply+0x44>
 800ebe6:	4602      	mov	r2, r0
 800ebe8:	4b44      	ldr	r3, [pc, #272]	; (800ecfc <__multiply+0x14c>)
 800ebea:	4845      	ldr	r0, [pc, #276]	; (800ed00 <__multiply+0x150>)
 800ebec:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ebf0:	f000 fe54 	bl	800f89c <__assert_func>
 800ebf4:	f100 0514 	add.w	r5, r0, #20
 800ebf8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ebfc:	462b      	mov	r3, r5
 800ebfe:	2200      	movs	r2, #0
 800ec00:	4543      	cmp	r3, r8
 800ec02:	d321      	bcc.n	800ec48 <__multiply+0x98>
 800ec04:	f104 0314 	add.w	r3, r4, #20
 800ec08:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ec0c:	f109 0314 	add.w	r3, r9, #20
 800ec10:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ec14:	9202      	str	r2, [sp, #8]
 800ec16:	1b3a      	subs	r2, r7, r4
 800ec18:	3a15      	subs	r2, #21
 800ec1a:	f022 0203 	bic.w	r2, r2, #3
 800ec1e:	3204      	adds	r2, #4
 800ec20:	f104 0115 	add.w	r1, r4, #21
 800ec24:	428f      	cmp	r7, r1
 800ec26:	bf38      	it	cc
 800ec28:	2204      	movcc	r2, #4
 800ec2a:	9201      	str	r2, [sp, #4]
 800ec2c:	9a02      	ldr	r2, [sp, #8]
 800ec2e:	9303      	str	r3, [sp, #12]
 800ec30:	429a      	cmp	r2, r3
 800ec32:	d80c      	bhi.n	800ec4e <__multiply+0x9e>
 800ec34:	2e00      	cmp	r6, #0
 800ec36:	dd03      	ble.n	800ec40 <__multiply+0x90>
 800ec38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d05b      	beq.n	800ecf8 <__multiply+0x148>
 800ec40:	6106      	str	r6, [r0, #16]
 800ec42:	b005      	add	sp, #20
 800ec44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec48:	f843 2b04 	str.w	r2, [r3], #4
 800ec4c:	e7d8      	b.n	800ec00 <__multiply+0x50>
 800ec4e:	f8b3 a000 	ldrh.w	sl, [r3]
 800ec52:	f1ba 0f00 	cmp.w	sl, #0
 800ec56:	d024      	beq.n	800eca2 <__multiply+0xf2>
 800ec58:	f104 0e14 	add.w	lr, r4, #20
 800ec5c:	46a9      	mov	r9, r5
 800ec5e:	f04f 0c00 	mov.w	ip, #0
 800ec62:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ec66:	f8d9 1000 	ldr.w	r1, [r9]
 800ec6a:	fa1f fb82 	uxth.w	fp, r2
 800ec6e:	b289      	uxth	r1, r1
 800ec70:	fb0a 110b 	mla	r1, sl, fp, r1
 800ec74:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ec78:	f8d9 2000 	ldr.w	r2, [r9]
 800ec7c:	4461      	add	r1, ip
 800ec7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ec82:	fb0a c20b 	mla	r2, sl, fp, ip
 800ec86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ec8a:	b289      	uxth	r1, r1
 800ec8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ec90:	4577      	cmp	r7, lr
 800ec92:	f849 1b04 	str.w	r1, [r9], #4
 800ec96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ec9a:	d8e2      	bhi.n	800ec62 <__multiply+0xb2>
 800ec9c:	9a01      	ldr	r2, [sp, #4]
 800ec9e:	f845 c002 	str.w	ip, [r5, r2]
 800eca2:	9a03      	ldr	r2, [sp, #12]
 800eca4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800eca8:	3304      	adds	r3, #4
 800ecaa:	f1b9 0f00 	cmp.w	r9, #0
 800ecae:	d021      	beq.n	800ecf4 <__multiply+0x144>
 800ecb0:	6829      	ldr	r1, [r5, #0]
 800ecb2:	f104 0c14 	add.w	ip, r4, #20
 800ecb6:	46ae      	mov	lr, r5
 800ecb8:	f04f 0a00 	mov.w	sl, #0
 800ecbc:	f8bc b000 	ldrh.w	fp, [ip]
 800ecc0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ecc4:	fb09 220b 	mla	r2, r9, fp, r2
 800ecc8:	4452      	add	r2, sl
 800ecca:	b289      	uxth	r1, r1
 800eccc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ecd0:	f84e 1b04 	str.w	r1, [lr], #4
 800ecd4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ecd8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ecdc:	f8be 1000 	ldrh.w	r1, [lr]
 800ece0:	fb09 110a 	mla	r1, r9, sl, r1
 800ece4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ece8:	4567      	cmp	r7, ip
 800ecea:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ecee:	d8e5      	bhi.n	800ecbc <__multiply+0x10c>
 800ecf0:	9a01      	ldr	r2, [sp, #4]
 800ecf2:	50a9      	str	r1, [r5, r2]
 800ecf4:	3504      	adds	r5, #4
 800ecf6:	e799      	b.n	800ec2c <__multiply+0x7c>
 800ecf8:	3e01      	subs	r6, #1
 800ecfa:	e79b      	b.n	800ec34 <__multiply+0x84>
 800ecfc:	0800fba8 	.word	0x0800fba8
 800ed00:	0800fbb9 	.word	0x0800fbb9

0800ed04 <__pow5mult>:
 800ed04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed08:	4615      	mov	r5, r2
 800ed0a:	f012 0203 	ands.w	r2, r2, #3
 800ed0e:	4606      	mov	r6, r0
 800ed10:	460f      	mov	r7, r1
 800ed12:	d007      	beq.n	800ed24 <__pow5mult+0x20>
 800ed14:	4c25      	ldr	r4, [pc, #148]	; (800edac <__pow5mult+0xa8>)
 800ed16:	3a01      	subs	r2, #1
 800ed18:	2300      	movs	r3, #0
 800ed1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ed1e:	f7ff fe9d 	bl	800ea5c <__multadd>
 800ed22:	4607      	mov	r7, r0
 800ed24:	10ad      	asrs	r5, r5, #2
 800ed26:	d03d      	beq.n	800eda4 <__pow5mult+0xa0>
 800ed28:	69f4      	ldr	r4, [r6, #28]
 800ed2a:	b97c      	cbnz	r4, 800ed4c <__pow5mult+0x48>
 800ed2c:	2010      	movs	r0, #16
 800ed2e:	f7ff fd7f 	bl	800e830 <malloc>
 800ed32:	4602      	mov	r2, r0
 800ed34:	61f0      	str	r0, [r6, #28]
 800ed36:	b928      	cbnz	r0, 800ed44 <__pow5mult+0x40>
 800ed38:	4b1d      	ldr	r3, [pc, #116]	; (800edb0 <__pow5mult+0xac>)
 800ed3a:	481e      	ldr	r0, [pc, #120]	; (800edb4 <__pow5mult+0xb0>)
 800ed3c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ed40:	f000 fdac 	bl	800f89c <__assert_func>
 800ed44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ed48:	6004      	str	r4, [r0, #0]
 800ed4a:	60c4      	str	r4, [r0, #12]
 800ed4c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ed50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ed54:	b94c      	cbnz	r4, 800ed6a <__pow5mult+0x66>
 800ed56:	f240 2171 	movw	r1, #625	; 0x271
 800ed5a:	4630      	mov	r0, r6
 800ed5c:	f7ff ff12 	bl	800eb84 <__i2b>
 800ed60:	2300      	movs	r3, #0
 800ed62:	f8c8 0008 	str.w	r0, [r8, #8]
 800ed66:	4604      	mov	r4, r0
 800ed68:	6003      	str	r3, [r0, #0]
 800ed6a:	f04f 0900 	mov.w	r9, #0
 800ed6e:	07eb      	lsls	r3, r5, #31
 800ed70:	d50a      	bpl.n	800ed88 <__pow5mult+0x84>
 800ed72:	4639      	mov	r1, r7
 800ed74:	4622      	mov	r2, r4
 800ed76:	4630      	mov	r0, r6
 800ed78:	f7ff ff1a 	bl	800ebb0 <__multiply>
 800ed7c:	4639      	mov	r1, r7
 800ed7e:	4680      	mov	r8, r0
 800ed80:	4630      	mov	r0, r6
 800ed82:	f7ff fe49 	bl	800ea18 <_Bfree>
 800ed86:	4647      	mov	r7, r8
 800ed88:	106d      	asrs	r5, r5, #1
 800ed8a:	d00b      	beq.n	800eda4 <__pow5mult+0xa0>
 800ed8c:	6820      	ldr	r0, [r4, #0]
 800ed8e:	b938      	cbnz	r0, 800eda0 <__pow5mult+0x9c>
 800ed90:	4622      	mov	r2, r4
 800ed92:	4621      	mov	r1, r4
 800ed94:	4630      	mov	r0, r6
 800ed96:	f7ff ff0b 	bl	800ebb0 <__multiply>
 800ed9a:	6020      	str	r0, [r4, #0]
 800ed9c:	f8c0 9000 	str.w	r9, [r0]
 800eda0:	4604      	mov	r4, r0
 800eda2:	e7e4      	b.n	800ed6e <__pow5mult+0x6a>
 800eda4:	4638      	mov	r0, r7
 800eda6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edaa:	bf00      	nop
 800edac:	0800fd08 	.word	0x0800fd08
 800edb0:	0800fb39 	.word	0x0800fb39
 800edb4:	0800fbb9 	.word	0x0800fbb9

0800edb8 <__lshift>:
 800edb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edbc:	460c      	mov	r4, r1
 800edbe:	6849      	ldr	r1, [r1, #4]
 800edc0:	6923      	ldr	r3, [r4, #16]
 800edc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800edc6:	68a3      	ldr	r3, [r4, #8]
 800edc8:	4607      	mov	r7, r0
 800edca:	4691      	mov	r9, r2
 800edcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800edd0:	f108 0601 	add.w	r6, r8, #1
 800edd4:	42b3      	cmp	r3, r6
 800edd6:	db0b      	blt.n	800edf0 <__lshift+0x38>
 800edd8:	4638      	mov	r0, r7
 800edda:	f7ff fddd 	bl	800e998 <_Balloc>
 800edde:	4605      	mov	r5, r0
 800ede0:	b948      	cbnz	r0, 800edf6 <__lshift+0x3e>
 800ede2:	4602      	mov	r2, r0
 800ede4:	4b28      	ldr	r3, [pc, #160]	; (800ee88 <__lshift+0xd0>)
 800ede6:	4829      	ldr	r0, [pc, #164]	; (800ee8c <__lshift+0xd4>)
 800ede8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800edec:	f000 fd56 	bl	800f89c <__assert_func>
 800edf0:	3101      	adds	r1, #1
 800edf2:	005b      	lsls	r3, r3, #1
 800edf4:	e7ee      	b.n	800edd4 <__lshift+0x1c>
 800edf6:	2300      	movs	r3, #0
 800edf8:	f100 0114 	add.w	r1, r0, #20
 800edfc:	f100 0210 	add.w	r2, r0, #16
 800ee00:	4618      	mov	r0, r3
 800ee02:	4553      	cmp	r3, sl
 800ee04:	db33      	blt.n	800ee6e <__lshift+0xb6>
 800ee06:	6920      	ldr	r0, [r4, #16]
 800ee08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ee0c:	f104 0314 	add.w	r3, r4, #20
 800ee10:	f019 091f 	ands.w	r9, r9, #31
 800ee14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ee18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ee1c:	d02b      	beq.n	800ee76 <__lshift+0xbe>
 800ee1e:	f1c9 0e20 	rsb	lr, r9, #32
 800ee22:	468a      	mov	sl, r1
 800ee24:	2200      	movs	r2, #0
 800ee26:	6818      	ldr	r0, [r3, #0]
 800ee28:	fa00 f009 	lsl.w	r0, r0, r9
 800ee2c:	4310      	orrs	r0, r2
 800ee2e:	f84a 0b04 	str.w	r0, [sl], #4
 800ee32:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee36:	459c      	cmp	ip, r3
 800ee38:	fa22 f20e 	lsr.w	r2, r2, lr
 800ee3c:	d8f3      	bhi.n	800ee26 <__lshift+0x6e>
 800ee3e:	ebac 0304 	sub.w	r3, ip, r4
 800ee42:	3b15      	subs	r3, #21
 800ee44:	f023 0303 	bic.w	r3, r3, #3
 800ee48:	3304      	adds	r3, #4
 800ee4a:	f104 0015 	add.w	r0, r4, #21
 800ee4e:	4584      	cmp	ip, r0
 800ee50:	bf38      	it	cc
 800ee52:	2304      	movcc	r3, #4
 800ee54:	50ca      	str	r2, [r1, r3]
 800ee56:	b10a      	cbz	r2, 800ee5c <__lshift+0xa4>
 800ee58:	f108 0602 	add.w	r6, r8, #2
 800ee5c:	3e01      	subs	r6, #1
 800ee5e:	4638      	mov	r0, r7
 800ee60:	612e      	str	r6, [r5, #16]
 800ee62:	4621      	mov	r1, r4
 800ee64:	f7ff fdd8 	bl	800ea18 <_Bfree>
 800ee68:	4628      	mov	r0, r5
 800ee6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee6e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ee72:	3301      	adds	r3, #1
 800ee74:	e7c5      	b.n	800ee02 <__lshift+0x4a>
 800ee76:	3904      	subs	r1, #4
 800ee78:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee7c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ee80:	459c      	cmp	ip, r3
 800ee82:	d8f9      	bhi.n	800ee78 <__lshift+0xc0>
 800ee84:	e7ea      	b.n	800ee5c <__lshift+0xa4>
 800ee86:	bf00      	nop
 800ee88:	0800fba8 	.word	0x0800fba8
 800ee8c:	0800fbb9 	.word	0x0800fbb9

0800ee90 <__mcmp>:
 800ee90:	b530      	push	{r4, r5, lr}
 800ee92:	6902      	ldr	r2, [r0, #16]
 800ee94:	690c      	ldr	r4, [r1, #16]
 800ee96:	1b12      	subs	r2, r2, r4
 800ee98:	d10e      	bne.n	800eeb8 <__mcmp+0x28>
 800ee9a:	f100 0314 	add.w	r3, r0, #20
 800ee9e:	3114      	adds	r1, #20
 800eea0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800eea4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800eea8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800eeac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800eeb0:	42a5      	cmp	r5, r4
 800eeb2:	d003      	beq.n	800eebc <__mcmp+0x2c>
 800eeb4:	d305      	bcc.n	800eec2 <__mcmp+0x32>
 800eeb6:	2201      	movs	r2, #1
 800eeb8:	4610      	mov	r0, r2
 800eeba:	bd30      	pop	{r4, r5, pc}
 800eebc:	4283      	cmp	r3, r0
 800eebe:	d3f3      	bcc.n	800eea8 <__mcmp+0x18>
 800eec0:	e7fa      	b.n	800eeb8 <__mcmp+0x28>
 800eec2:	f04f 32ff 	mov.w	r2, #4294967295
 800eec6:	e7f7      	b.n	800eeb8 <__mcmp+0x28>

0800eec8 <__mdiff>:
 800eec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eecc:	460c      	mov	r4, r1
 800eece:	4606      	mov	r6, r0
 800eed0:	4611      	mov	r1, r2
 800eed2:	4620      	mov	r0, r4
 800eed4:	4690      	mov	r8, r2
 800eed6:	f7ff ffdb 	bl	800ee90 <__mcmp>
 800eeda:	1e05      	subs	r5, r0, #0
 800eedc:	d110      	bne.n	800ef00 <__mdiff+0x38>
 800eede:	4629      	mov	r1, r5
 800eee0:	4630      	mov	r0, r6
 800eee2:	f7ff fd59 	bl	800e998 <_Balloc>
 800eee6:	b930      	cbnz	r0, 800eef6 <__mdiff+0x2e>
 800eee8:	4b3a      	ldr	r3, [pc, #232]	; (800efd4 <__mdiff+0x10c>)
 800eeea:	4602      	mov	r2, r0
 800eeec:	f240 2137 	movw	r1, #567	; 0x237
 800eef0:	4839      	ldr	r0, [pc, #228]	; (800efd8 <__mdiff+0x110>)
 800eef2:	f000 fcd3 	bl	800f89c <__assert_func>
 800eef6:	2301      	movs	r3, #1
 800eef8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eefc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef00:	bfa4      	itt	ge
 800ef02:	4643      	movge	r3, r8
 800ef04:	46a0      	movge	r8, r4
 800ef06:	4630      	mov	r0, r6
 800ef08:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ef0c:	bfa6      	itte	ge
 800ef0e:	461c      	movge	r4, r3
 800ef10:	2500      	movge	r5, #0
 800ef12:	2501      	movlt	r5, #1
 800ef14:	f7ff fd40 	bl	800e998 <_Balloc>
 800ef18:	b920      	cbnz	r0, 800ef24 <__mdiff+0x5c>
 800ef1a:	4b2e      	ldr	r3, [pc, #184]	; (800efd4 <__mdiff+0x10c>)
 800ef1c:	4602      	mov	r2, r0
 800ef1e:	f240 2145 	movw	r1, #581	; 0x245
 800ef22:	e7e5      	b.n	800eef0 <__mdiff+0x28>
 800ef24:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ef28:	6926      	ldr	r6, [r4, #16]
 800ef2a:	60c5      	str	r5, [r0, #12]
 800ef2c:	f104 0914 	add.w	r9, r4, #20
 800ef30:	f108 0514 	add.w	r5, r8, #20
 800ef34:	f100 0e14 	add.w	lr, r0, #20
 800ef38:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ef3c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ef40:	f108 0210 	add.w	r2, r8, #16
 800ef44:	46f2      	mov	sl, lr
 800ef46:	2100      	movs	r1, #0
 800ef48:	f859 3b04 	ldr.w	r3, [r9], #4
 800ef4c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ef50:	fa11 f88b 	uxtah	r8, r1, fp
 800ef54:	b299      	uxth	r1, r3
 800ef56:	0c1b      	lsrs	r3, r3, #16
 800ef58:	eba8 0801 	sub.w	r8, r8, r1
 800ef5c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ef60:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ef64:	fa1f f888 	uxth.w	r8, r8
 800ef68:	1419      	asrs	r1, r3, #16
 800ef6a:	454e      	cmp	r6, r9
 800ef6c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ef70:	f84a 3b04 	str.w	r3, [sl], #4
 800ef74:	d8e8      	bhi.n	800ef48 <__mdiff+0x80>
 800ef76:	1b33      	subs	r3, r6, r4
 800ef78:	3b15      	subs	r3, #21
 800ef7a:	f023 0303 	bic.w	r3, r3, #3
 800ef7e:	3304      	adds	r3, #4
 800ef80:	3415      	adds	r4, #21
 800ef82:	42a6      	cmp	r6, r4
 800ef84:	bf38      	it	cc
 800ef86:	2304      	movcc	r3, #4
 800ef88:	441d      	add	r5, r3
 800ef8a:	4473      	add	r3, lr
 800ef8c:	469e      	mov	lr, r3
 800ef8e:	462e      	mov	r6, r5
 800ef90:	4566      	cmp	r6, ip
 800ef92:	d30e      	bcc.n	800efb2 <__mdiff+0xea>
 800ef94:	f10c 0203 	add.w	r2, ip, #3
 800ef98:	1b52      	subs	r2, r2, r5
 800ef9a:	f022 0203 	bic.w	r2, r2, #3
 800ef9e:	3d03      	subs	r5, #3
 800efa0:	45ac      	cmp	ip, r5
 800efa2:	bf38      	it	cc
 800efa4:	2200      	movcc	r2, #0
 800efa6:	4413      	add	r3, r2
 800efa8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800efac:	b17a      	cbz	r2, 800efce <__mdiff+0x106>
 800efae:	6107      	str	r7, [r0, #16]
 800efb0:	e7a4      	b.n	800eefc <__mdiff+0x34>
 800efb2:	f856 8b04 	ldr.w	r8, [r6], #4
 800efb6:	fa11 f288 	uxtah	r2, r1, r8
 800efba:	1414      	asrs	r4, r2, #16
 800efbc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800efc0:	b292      	uxth	r2, r2
 800efc2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800efc6:	f84e 2b04 	str.w	r2, [lr], #4
 800efca:	1421      	asrs	r1, r4, #16
 800efcc:	e7e0      	b.n	800ef90 <__mdiff+0xc8>
 800efce:	3f01      	subs	r7, #1
 800efd0:	e7ea      	b.n	800efa8 <__mdiff+0xe0>
 800efd2:	bf00      	nop
 800efd4:	0800fba8 	.word	0x0800fba8
 800efd8:	0800fbb9 	.word	0x0800fbb9

0800efdc <__d2b>:
 800efdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800efe0:	460f      	mov	r7, r1
 800efe2:	2101      	movs	r1, #1
 800efe4:	ec59 8b10 	vmov	r8, r9, d0
 800efe8:	4616      	mov	r6, r2
 800efea:	f7ff fcd5 	bl	800e998 <_Balloc>
 800efee:	4604      	mov	r4, r0
 800eff0:	b930      	cbnz	r0, 800f000 <__d2b+0x24>
 800eff2:	4602      	mov	r2, r0
 800eff4:	4b24      	ldr	r3, [pc, #144]	; (800f088 <__d2b+0xac>)
 800eff6:	4825      	ldr	r0, [pc, #148]	; (800f08c <__d2b+0xb0>)
 800eff8:	f240 310f 	movw	r1, #783	; 0x30f
 800effc:	f000 fc4e 	bl	800f89c <__assert_func>
 800f000:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f004:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f008:	bb2d      	cbnz	r5, 800f056 <__d2b+0x7a>
 800f00a:	9301      	str	r3, [sp, #4]
 800f00c:	f1b8 0300 	subs.w	r3, r8, #0
 800f010:	d026      	beq.n	800f060 <__d2b+0x84>
 800f012:	4668      	mov	r0, sp
 800f014:	9300      	str	r3, [sp, #0]
 800f016:	f7ff fd87 	bl	800eb28 <__lo0bits>
 800f01a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f01e:	b1e8      	cbz	r0, 800f05c <__d2b+0x80>
 800f020:	f1c0 0320 	rsb	r3, r0, #32
 800f024:	fa02 f303 	lsl.w	r3, r2, r3
 800f028:	430b      	orrs	r3, r1
 800f02a:	40c2      	lsrs	r2, r0
 800f02c:	6163      	str	r3, [r4, #20]
 800f02e:	9201      	str	r2, [sp, #4]
 800f030:	9b01      	ldr	r3, [sp, #4]
 800f032:	61a3      	str	r3, [r4, #24]
 800f034:	2b00      	cmp	r3, #0
 800f036:	bf14      	ite	ne
 800f038:	2202      	movne	r2, #2
 800f03a:	2201      	moveq	r2, #1
 800f03c:	6122      	str	r2, [r4, #16]
 800f03e:	b1bd      	cbz	r5, 800f070 <__d2b+0x94>
 800f040:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f044:	4405      	add	r5, r0
 800f046:	603d      	str	r5, [r7, #0]
 800f048:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f04c:	6030      	str	r0, [r6, #0]
 800f04e:	4620      	mov	r0, r4
 800f050:	b003      	add	sp, #12
 800f052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f056:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f05a:	e7d6      	b.n	800f00a <__d2b+0x2e>
 800f05c:	6161      	str	r1, [r4, #20]
 800f05e:	e7e7      	b.n	800f030 <__d2b+0x54>
 800f060:	a801      	add	r0, sp, #4
 800f062:	f7ff fd61 	bl	800eb28 <__lo0bits>
 800f066:	9b01      	ldr	r3, [sp, #4]
 800f068:	6163      	str	r3, [r4, #20]
 800f06a:	3020      	adds	r0, #32
 800f06c:	2201      	movs	r2, #1
 800f06e:	e7e5      	b.n	800f03c <__d2b+0x60>
 800f070:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f074:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f078:	6038      	str	r0, [r7, #0]
 800f07a:	6918      	ldr	r0, [r3, #16]
 800f07c:	f7ff fd34 	bl	800eae8 <__hi0bits>
 800f080:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f084:	e7e2      	b.n	800f04c <__d2b+0x70>
 800f086:	bf00      	nop
 800f088:	0800fba8 	.word	0x0800fba8
 800f08c:	0800fbb9 	.word	0x0800fbb9

0800f090 <__ssputs_r>:
 800f090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f094:	688e      	ldr	r6, [r1, #8]
 800f096:	461f      	mov	r7, r3
 800f098:	42be      	cmp	r6, r7
 800f09a:	680b      	ldr	r3, [r1, #0]
 800f09c:	4682      	mov	sl, r0
 800f09e:	460c      	mov	r4, r1
 800f0a0:	4690      	mov	r8, r2
 800f0a2:	d82c      	bhi.n	800f0fe <__ssputs_r+0x6e>
 800f0a4:	898a      	ldrh	r2, [r1, #12]
 800f0a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f0aa:	d026      	beq.n	800f0fa <__ssputs_r+0x6a>
 800f0ac:	6965      	ldr	r5, [r4, #20]
 800f0ae:	6909      	ldr	r1, [r1, #16]
 800f0b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f0b4:	eba3 0901 	sub.w	r9, r3, r1
 800f0b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f0bc:	1c7b      	adds	r3, r7, #1
 800f0be:	444b      	add	r3, r9
 800f0c0:	106d      	asrs	r5, r5, #1
 800f0c2:	429d      	cmp	r5, r3
 800f0c4:	bf38      	it	cc
 800f0c6:	461d      	movcc	r5, r3
 800f0c8:	0553      	lsls	r3, r2, #21
 800f0ca:	d527      	bpl.n	800f11c <__ssputs_r+0x8c>
 800f0cc:	4629      	mov	r1, r5
 800f0ce:	f7ff fbd7 	bl	800e880 <_malloc_r>
 800f0d2:	4606      	mov	r6, r0
 800f0d4:	b360      	cbz	r0, 800f130 <__ssputs_r+0xa0>
 800f0d6:	6921      	ldr	r1, [r4, #16]
 800f0d8:	464a      	mov	r2, r9
 800f0da:	f000 fbd1 	bl	800f880 <memcpy>
 800f0de:	89a3      	ldrh	r3, [r4, #12]
 800f0e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f0e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0e8:	81a3      	strh	r3, [r4, #12]
 800f0ea:	6126      	str	r6, [r4, #16]
 800f0ec:	6165      	str	r5, [r4, #20]
 800f0ee:	444e      	add	r6, r9
 800f0f0:	eba5 0509 	sub.w	r5, r5, r9
 800f0f4:	6026      	str	r6, [r4, #0]
 800f0f6:	60a5      	str	r5, [r4, #8]
 800f0f8:	463e      	mov	r6, r7
 800f0fa:	42be      	cmp	r6, r7
 800f0fc:	d900      	bls.n	800f100 <__ssputs_r+0x70>
 800f0fe:	463e      	mov	r6, r7
 800f100:	6820      	ldr	r0, [r4, #0]
 800f102:	4632      	mov	r2, r6
 800f104:	4641      	mov	r1, r8
 800f106:	f000 fb6f 	bl	800f7e8 <memmove>
 800f10a:	68a3      	ldr	r3, [r4, #8]
 800f10c:	1b9b      	subs	r3, r3, r6
 800f10e:	60a3      	str	r3, [r4, #8]
 800f110:	6823      	ldr	r3, [r4, #0]
 800f112:	4433      	add	r3, r6
 800f114:	6023      	str	r3, [r4, #0]
 800f116:	2000      	movs	r0, #0
 800f118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f11c:	462a      	mov	r2, r5
 800f11e:	f000 fc03 	bl	800f928 <_realloc_r>
 800f122:	4606      	mov	r6, r0
 800f124:	2800      	cmp	r0, #0
 800f126:	d1e0      	bne.n	800f0ea <__ssputs_r+0x5a>
 800f128:	6921      	ldr	r1, [r4, #16]
 800f12a:	4650      	mov	r0, sl
 800f12c:	f7ff fb34 	bl	800e798 <_free_r>
 800f130:	230c      	movs	r3, #12
 800f132:	f8ca 3000 	str.w	r3, [sl]
 800f136:	89a3      	ldrh	r3, [r4, #12]
 800f138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f13c:	81a3      	strh	r3, [r4, #12]
 800f13e:	f04f 30ff 	mov.w	r0, #4294967295
 800f142:	e7e9      	b.n	800f118 <__ssputs_r+0x88>

0800f144 <_svfiprintf_r>:
 800f144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f148:	4698      	mov	r8, r3
 800f14a:	898b      	ldrh	r3, [r1, #12]
 800f14c:	061b      	lsls	r3, r3, #24
 800f14e:	b09d      	sub	sp, #116	; 0x74
 800f150:	4607      	mov	r7, r0
 800f152:	460d      	mov	r5, r1
 800f154:	4614      	mov	r4, r2
 800f156:	d50e      	bpl.n	800f176 <_svfiprintf_r+0x32>
 800f158:	690b      	ldr	r3, [r1, #16]
 800f15a:	b963      	cbnz	r3, 800f176 <_svfiprintf_r+0x32>
 800f15c:	2140      	movs	r1, #64	; 0x40
 800f15e:	f7ff fb8f 	bl	800e880 <_malloc_r>
 800f162:	6028      	str	r0, [r5, #0]
 800f164:	6128      	str	r0, [r5, #16]
 800f166:	b920      	cbnz	r0, 800f172 <_svfiprintf_r+0x2e>
 800f168:	230c      	movs	r3, #12
 800f16a:	603b      	str	r3, [r7, #0]
 800f16c:	f04f 30ff 	mov.w	r0, #4294967295
 800f170:	e0d0      	b.n	800f314 <_svfiprintf_r+0x1d0>
 800f172:	2340      	movs	r3, #64	; 0x40
 800f174:	616b      	str	r3, [r5, #20]
 800f176:	2300      	movs	r3, #0
 800f178:	9309      	str	r3, [sp, #36]	; 0x24
 800f17a:	2320      	movs	r3, #32
 800f17c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f180:	f8cd 800c 	str.w	r8, [sp, #12]
 800f184:	2330      	movs	r3, #48	; 0x30
 800f186:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f32c <_svfiprintf_r+0x1e8>
 800f18a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f18e:	f04f 0901 	mov.w	r9, #1
 800f192:	4623      	mov	r3, r4
 800f194:	469a      	mov	sl, r3
 800f196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f19a:	b10a      	cbz	r2, 800f1a0 <_svfiprintf_r+0x5c>
 800f19c:	2a25      	cmp	r2, #37	; 0x25
 800f19e:	d1f9      	bne.n	800f194 <_svfiprintf_r+0x50>
 800f1a0:	ebba 0b04 	subs.w	fp, sl, r4
 800f1a4:	d00b      	beq.n	800f1be <_svfiprintf_r+0x7a>
 800f1a6:	465b      	mov	r3, fp
 800f1a8:	4622      	mov	r2, r4
 800f1aa:	4629      	mov	r1, r5
 800f1ac:	4638      	mov	r0, r7
 800f1ae:	f7ff ff6f 	bl	800f090 <__ssputs_r>
 800f1b2:	3001      	adds	r0, #1
 800f1b4:	f000 80a9 	beq.w	800f30a <_svfiprintf_r+0x1c6>
 800f1b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1ba:	445a      	add	r2, fp
 800f1bc:	9209      	str	r2, [sp, #36]	; 0x24
 800f1be:	f89a 3000 	ldrb.w	r3, [sl]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	f000 80a1 	beq.w	800f30a <_svfiprintf_r+0x1c6>
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	f04f 32ff 	mov.w	r2, #4294967295
 800f1ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1d2:	f10a 0a01 	add.w	sl, sl, #1
 800f1d6:	9304      	str	r3, [sp, #16]
 800f1d8:	9307      	str	r3, [sp, #28]
 800f1da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f1de:	931a      	str	r3, [sp, #104]	; 0x68
 800f1e0:	4654      	mov	r4, sl
 800f1e2:	2205      	movs	r2, #5
 800f1e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1e8:	4850      	ldr	r0, [pc, #320]	; (800f32c <_svfiprintf_r+0x1e8>)
 800f1ea:	f7f1 f881 	bl	80002f0 <memchr>
 800f1ee:	9a04      	ldr	r2, [sp, #16]
 800f1f0:	b9d8      	cbnz	r0, 800f22a <_svfiprintf_r+0xe6>
 800f1f2:	06d0      	lsls	r0, r2, #27
 800f1f4:	bf44      	itt	mi
 800f1f6:	2320      	movmi	r3, #32
 800f1f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1fc:	0711      	lsls	r1, r2, #28
 800f1fe:	bf44      	itt	mi
 800f200:	232b      	movmi	r3, #43	; 0x2b
 800f202:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f206:	f89a 3000 	ldrb.w	r3, [sl]
 800f20a:	2b2a      	cmp	r3, #42	; 0x2a
 800f20c:	d015      	beq.n	800f23a <_svfiprintf_r+0xf6>
 800f20e:	9a07      	ldr	r2, [sp, #28]
 800f210:	4654      	mov	r4, sl
 800f212:	2000      	movs	r0, #0
 800f214:	f04f 0c0a 	mov.w	ip, #10
 800f218:	4621      	mov	r1, r4
 800f21a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f21e:	3b30      	subs	r3, #48	; 0x30
 800f220:	2b09      	cmp	r3, #9
 800f222:	d94d      	bls.n	800f2c0 <_svfiprintf_r+0x17c>
 800f224:	b1b0      	cbz	r0, 800f254 <_svfiprintf_r+0x110>
 800f226:	9207      	str	r2, [sp, #28]
 800f228:	e014      	b.n	800f254 <_svfiprintf_r+0x110>
 800f22a:	eba0 0308 	sub.w	r3, r0, r8
 800f22e:	fa09 f303 	lsl.w	r3, r9, r3
 800f232:	4313      	orrs	r3, r2
 800f234:	9304      	str	r3, [sp, #16]
 800f236:	46a2      	mov	sl, r4
 800f238:	e7d2      	b.n	800f1e0 <_svfiprintf_r+0x9c>
 800f23a:	9b03      	ldr	r3, [sp, #12]
 800f23c:	1d19      	adds	r1, r3, #4
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	9103      	str	r1, [sp, #12]
 800f242:	2b00      	cmp	r3, #0
 800f244:	bfbb      	ittet	lt
 800f246:	425b      	neglt	r3, r3
 800f248:	f042 0202 	orrlt.w	r2, r2, #2
 800f24c:	9307      	strge	r3, [sp, #28]
 800f24e:	9307      	strlt	r3, [sp, #28]
 800f250:	bfb8      	it	lt
 800f252:	9204      	strlt	r2, [sp, #16]
 800f254:	7823      	ldrb	r3, [r4, #0]
 800f256:	2b2e      	cmp	r3, #46	; 0x2e
 800f258:	d10c      	bne.n	800f274 <_svfiprintf_r+0x130>
 800f25a:	7863      	ldrb	r3, [r4, #1]
 800f25c:	2b2a      	cmp	r3, #42	; 0x2a
 800f25e:	d134      	bne.n	800f2ca <_svfiprintf_r+0x186>
 800f260:	9b03      	ldr	r3, [sp, #12]
 800f262:	1d1a      	adds	r2, r3, #4
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	9203      	str	r2, [sp, #12]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	bfb8      	it	lt
 800f26c:	f04f 33ff 	movlt.w	r3, #4294967295
 800f270:	3402      	adds	r4, #2
 800f272:	9305      	str	r3, [sp, #20]
 800f274:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f33c <_svfiprintf_r+0x1f8>
 800f278:	7821      	ldrb	r1, [r4, #0]
 800f27a:	2203      	movs	r2, #3
 800f27c:	4650      	mov	r0, sl
 800f27e:	f7f1 f837 	bl	80002f0 <memchr>
 800f282:	b138      	cbz	r0, 800f294 <_svfiprintf_r+0x150>
 800f284:	9b04      	ldr	r3, [sp, #16]
 800f286:	eba0 000a 	sub.w	r0, r0, sl
 800f28a:	2240      	movs	r2, #64	; 0x40
 800f28c:	4082      	lsls	r2, r0
 800f28e:	4313      	orrs	r3, r2
 800f290:	3401      	adds	r4, #1
 800f292:	9304      	str	r3, [sp, #16]
 800f294:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f298:	4825      	ldr	r0, [pc, #148]	; (800f330 <_svfiprintf_r+0x1ec>)
 800f29a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f29e:	2206      	movs	r2, #6
 800f2a0:	f7f1 f826 	bl	80002f0 <memchr>
 800f2a4:	2800      	cmp	r0, #0
 800f2a6:	d038      	beq.n	800f31a <_svfiprintf_r+0x1d6>
 800f2a8:	4b22      	ldr	r3, [pc, #136]	; (800f334 <_svfiprintf_r+0x1f0>)
 800f2aa:	bb1b      	cbnz	r3, 800f2f4 <_svfiprintf_r+0x1b0>
 800f2ac:	9b03      	ldr	r3, [sp, #12]
 800f2ae:	3307      	adds	r3, #7
 800f2b0:	f023 0307 	bic.w	r3, r3, #7
 800f2b4:	3308      	adds	r3, #8
 800f2b6:	9303      	str	r3, [sp, #12]
 800f2b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2ba:	4433      	add	r3, r6
 800f2bc:	9309      	str	r3, [sp, #36]	; 0x24
 800f2be:	e768      	b.n	800f192 <_svfiprintf_r+0x4e>
 800f2c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f2c4:	460c      	mov	r4, r1
 800f2c6:	2001      	movs	r0, #1
 800f2c8:	e7a6      	b.n	800f218 <_svfiprintf_r+0xd4>
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	3401      	adds	r4, #1
 800f2ce:	9305      	str	r3, [sp, #20]
 800f2d0:	4619      	mov	r1, r3
 800f2d2:	f04f 0c0a 	mov.w	ip, #10
 800f2d6:	4620      	mov	r0, r4
 800f2d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2dc:	3a30      	subs	r2, #48	; 0x30
 800f2de:	2a09      	cmp	r2, #9
 800f2e0:	d903      	bls.n	800f2ea <_svfiprintf_r+0x1a6>
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d0c6      	beq.n	800f274 <_svfiprintf_r+0x130>
 800f2e6:	9105      	str	r1, [sp, #20]
 800f2e8:	e7c4      	b.n	800f274 <_svfiprintf_r+0x130>
 800f2ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800f2ee:	4604      	mov	r4, r0
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	e7f0      	b.n	800f2d6 <_svfiprintf_r+0x192>
 800f2f4:	ab03      	add	r3, sp, #12
 800f2f6:	9300      	str	r3, [sp, #0]
 800f2f8:	462a      	mov	r2, r5
 800f2fa:	4b0f      	ldr	r3, [pc, #60]	; (800f338 <_svfiprintf_r+0x1f4>)
 800f2fc:	a904      	add	r1, sp, #16
 800f2fe:	4638      	mov	r0, r7
 800f300:	f7fd fe02 	bl	800cf08 <_printf_float>
 800f304:	1c42      	adds	r2, r0, #1
 800f306:	4606      	mov	r6, r0
 800f308:	d1d6      	bne.n	800f2b8 <_svfiprintf_r+0x174>
 800f30a:	89ab      	ldrh	r3, [r5, #12]
 800f30c:	065b      	lsls	r3, r3, #25
 800f30e:	f53f af2d 	bmi.w	800f16c <_svfiprintf_r+0x28>
 800f312:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f314:	b01d      	add	sp, #116	; 0x74
 800f316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f31a:	ab03      	add	r3, sp, #12
 800f31c:	9300      	str	r3, [sp, #0]
 800f31e:	462a      	mov	r2, r5
 800f320:	4b05      	ldr	r3, [pc, #20]	; (800f338 <_svfiprintf_r+0x1f4>)
 800f322:	a904      	add	r1, sp, #16
 800f324:	4638      	mov	r0, r7
 800f326:	f7fe f877 	bl	800d418 <_printf_i>
 800f32a:	e7eb      	b.n	800f304 <_svfiprintf_r+0x1c0>
 800f32c:	0800fd14 	.word	0x0800fd14
 800f330:	0800fd1e 	.word	0x0800fd1e
 800f334:	0800cf09 	.word	0x0800cf09
 800f338:	0800f091 	.word	0x0800f091
 800f33c:	0800fd1a 	.word	0x0800fd1a

0800f340 <__sfputc_r>:
 800f340:	6893      	ldr	r3, [r2, #8]
 800f342:	3b01      	subs	r3, #1
 800f344:	2b00      	cmp	r3, #0
 800f346:	b410      	push	{r4}
 800f348:	6093      	str	r3, [r2, #8]
 800f34a:	da08      	bge.n	800f35e <__sfputc_r+0x1e>
 800f34c:	6994      	ldr	r4, [r2, #24]
 800f34e:	42a3      	cmp	r3, r4
 800f350:	db01      	blt.n	800f356 <__sfputc_r+0x16>
 800f352:	290a      	cmp	r1, #10
 800f354:	d103      	bne.n	800f35e <__sfputc_r+0x1e>
 800f356:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f35a:	f7fe bb12 	b.w	800d982 <__swbuf_r>
 800f35e:	6813      	ldr	r3, [r2, #0]
 800f360:	1c58      	adds	r0, r3, #1
 800f362:	6010      	str	r0, [r2, #0]
 800f364:	7019      	strb	r1, [r3, #0]
 800f366:	4608      	mov	r0, r1
 800f368:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f36c:	4770      	bx	lr

0800f36e <__sfputs_r>:
 800f36e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f370:	4606      	mov	r6, r0
 800f372:	460f      	mov	r7, r1
 800f374:	4614      	mov	r4, r2
 800f376:	18d5      	adds	r5, r2, r3
 800f378:	42ac      	cmp	r4, r5
 800f37a:	d101      	bne.n	800f380 <__sfputs_r+0x12>
 800f37c:	2000      	movs	r0, #0
 800f37e:	e007      	b.n	800f390 <__sfputs_r+0x22>
 800f380:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f384:	463a      	mov	r2, r7
 800f386:	4630      	mov	r0, r6
 800f388:	f7ff ffda 	bl	800f340 <__sfputc_r>
 800f38c:	1c43      	adds	r3, r0, #1
 800f38e:	d1f3      	bne.n	800f378 <__sfputs_r+0xa>
 800f390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f394 <_vfiprintf_r>:
 800f394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f398:	460d      	mov	r5, r1
 800f39a:	b09d      	sub	sp, #116	; 0x74
 800f39c:	4614      	mov	r4, r2
 800f39e:	4698      	mov	r8, r3
 800f3a0:	4606      	mov	r6, r0
 800f3a2:	b118      	cbz	r0, 800f3ac <_vfiprintf_r+0x18>
 800f3a4:	6a03      	ldr	r3, [r0, #32]
 800f3a6:	b90b      	cbnz	r3, 800f3ac <_vfiprintf_r+0x18>
 800f3a8:	f7fe f9e4 	bl	800d774 <__sinit>
 800f3ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f3ae:	07d9      	lsls	r1, r3, #31
 800f3b0:	d405      	bmi.n	800f3be <_vfiprintf_r+0x2a>
 800f3b2:	89ab      	ldrh	r3, [r5, #12]
 800f3b4:	059a      	lsls	r2, r3, #22
 800f3b6:	d402      	bmi.n	800f3be <_vfiprintf_r+0x2a>
 800f3b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f3ba:	f7fe fbf4 	bl	800dba6 <__retarget_lock_acquire_recursive>
 800f3be:	89ab      	ldrh	r3, [r5, #12]
 800f3c0:	071b      	lsls	r3, r3, #28
 800f3c2:	d501      	bpl.n	800f3c8 <_vfiprintf_r+0x34>
 800f3c4:	692b      	ldr	r3, [r5, #16]
 800f3c6:	b99b      	cbnz	r3, 800f3f0 <_vfiprintf_r+0x5c>
 800f3c8:	4629      	mov	r1, r5
 800f3ca:	4630      	mov	r0, r6
 800f3cc:	f7fe fb16 	bl	800d9fc <__swsetup_r>
 800f3d0:	b170      	cbz	r0, 800f3f0 <_vfiprintf_r+0x5c>
 800f3d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f3d4:	07dc      	lsls	r4, r3, #31
 800f3d6:	d504      	bpl.n	800f3e2 <_vfiprintf_r+0x4e>
 800f3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800f3dc:	b01d      	add	sp, #116	; 0x74
 800f3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3e2:	89ab      	ldrh	r3, [r5, #12]
 800f3e4:	0598      	lsls	r0, r3, #22
 800f3e6:	d4f7      	bmi.n	800f3d8 <_vfiprintf_r+0x44>
 800f3e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f3ea:	f7fe fbdd 	bl	800dba8 <__retarget_lock_release_recursive>
 800f3ee:	e7f3      	b.n	800f3d8 <_vfiprintf_r+0x44>
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	9309      	str	r3, [sp, #36]	; 0x24
 800f3f4:	2320      	movs	r3, #32
 800f3f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f3fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3fe:	2330      	movs	r3, #48	; 0x30
 800f400:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f5b4 <_vfiprintf_r+0x220>
 800f404:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f408:	f04f 0901 	mov.w	r9, #1
 800f40c:	4623      	mov	r3, r4
 800f40e:	469a      	mov	sl, r3
 800f410:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f414:	b10a      	cbz	r2, 800f41a <_vfiprintf_r+0x86>
 800f416:	2a25      	cmp	r2, #37	; 0x25
 800f418:	d1f9      	bne.n	800f40e <_vfiprintf_r+0x7a>
 800f41a:	ebba 0b04 	subs.w	fp, sl, r4
 800f41e:	d00b      	beq.n	800f438 <_vfiprintf_r+0xa4>
 800f420:	465b      	mov	r3, fp
 800f422:	4622      	mov	r2, r4
 800f424:	4629      	mov	r1, r5
 800f426:	4630      	mov	r0, r6
 800f428:	f7ff ffa1 	bl	800f36e <__sfputs_r>
 800f42c:	3001      	adds	r0, #1
 800f42e:	f000 80a9 	beq.w	800f584 <_vfiprintf_r+0x1f0>
 800f432:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f434:	445a      	add	r2, fp
 800f436:	9209      	str	r2, [sp, #36]	; 0x24
 800f438:	f89a 3000 	ldrb.w	r3, [sl]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	f000 80a1 	beq.w	800f584 <_vfiprintf_r+0x1f0>
 800f442:	2300      	movs	r3, #0
 800f444:	f04f 32ff 	mov.w	r2, #4294967295
 800f448:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f44c:	f10a 0a01 	add.w	sl, sl, #1
 800f450:	9304      	str	r3, [sp, #16]
 800f452:	9307      	str	r3, [sp, #28]
 800f454:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f458:	931a      	str	r3, [sp, #104]	; 0x68
 800f45a:	4654      	mov	r4, sl
 800f45c:	2205      	movs	r2, #5
 800f45e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f462:	4854      	ldr	r0, [pc, #336]	; (800f5b4 <_vfiprintf_r+0x220>)
 800f464:	f7f0 ff44 	bl	80002f0 <memchr>
 800f468:	9a04      	ldr	r2, [sp, #16]
 800f46a:	b9d8      	cbnz	r0, 800f4a4 <_vfiprintf_r+0x110>
 800f46c:	06d1      	lsls	r1, r2, #27
 800f46e:	bf44      	itt	mi
 800f470:	2320      	movmi	r3, #32
 800f472:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f476:	0713      	lsls	r3, r2, #28
 800f478:	bf44      	itt	mi
 800f47a:	232b      	movmi	r3, #43	; 0x2b
 800f47c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f480:	f89a 3000 	ldrb.w	r3, [sl]
 800f484:	2b2a      	cmp	r3, #42	; 0x2a
 800f486:	d015      	beq.n	800f4b4 <_vfiprintf_r+0x120>
 800f488:	9a07      	ldr	r2, [sp, #28]
 800f48a:	4654      	mov	r4, sl
 800f48c:	2000      	movs	r0, #0
 800f48e:	f04f 0c0a 	mov.w	ip, #10
 800f492:	4621      	mov	r1, r4
 800f494:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f498:	3b30      	subs	r3, #48	; 0x30
 800f49a:	2b09      	cmp	r3, #9
 800f49c:	d94d      	bls.n	800f53a <_vfiprintf_r+0x1a6>
 800f49e:	b1b0      	cbz	r0, 800f4ce <_vfiprintf_r+0x13a>
 800f4a0:	9207      	str	r2, [sp, #28]
 800f4a2:	e014      	b.n	800f4ce <_vfiprintf_r+0x13a>
 800f4a4:	eba0 0308 	sub.w	r3, r0, r8
 800f4a8:	fa09 f303 	lsl.w	r3, r9, r3
 800f4ac:	4313      	orrs	r3, r2
 800f4ae:	9304      	str	r3, [sp, #16]
 800f4b0:	46a2      	mov	sl, r4
 800f4b2:	e7d2      	b.n	800f45a <_vfiprintf_r+0xc6>
 800f4b4:	9b03      	ldr	r3, [sp, #12]
 800f4b6:	1d19      	adds	r1, r3, #4
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	9103      	str	r1, [sp, #12]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	bfbb      	ittet	lt
 800f4c0:	425b      	neglt	r3, r3
 800f4c2:	f042 0202 	orrlt.w	r2, r2, #2
 800f4c6:	9307      	strge	r3, [sp, #28]
 800f4c8:	9307      	strlt	r3, [sp, #28]
 800f4ca:	bfb8      	it	lt
 800f4cc:	9204      	strlt	r2, [sp, #16]
 800f4ce:	7823      	ldrb	r3, [r4, #0]
 800f4d0:	2b2e      	cmp	r3, #46	; 0x2e
 800f4d2:	d10c      	bne.n	800f4ee <_vfiprintf_r+0x15a>
 800f4d4:	7863      	ldrb	r3, [r4, #1]
 800f4d6:	2b2a      	cmp	r3, #42	; 0x2a
 800f4d8:	d134      	bne.n	800f544 <_vfiprintf_r+0x1b0>
 800f4da:	9b03      	ldr	r3, [sp, #12]
 800f4dc:	1d1a      	adds	r2, r3, #4
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	9203      	str	r2, [sp, #12]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	bfb8      	it	lt
 800f4e6:	f04f 33ff 	movlt.w	r3, #4294967295
 800f4ea:	3402      	adds	r4, #2
 800f4ec:	9305      	str	r3, [sp, #20]
 800f4ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f5c4 <_vfiprintf_r+0x230>
 800f4f2:	7821      	ldrb	r1, [r4, #0]
 800f4f4:	2203      	movs	r2, #3
 800f4f6:	4650      	mov	r0, sl
 800f4f8:	f7f0 fefa 	bl	80002f0 <memchr>
 800f4fc:	b138      	cbz	r0, 800f50e <_vfiprintf_r+0x17a>
 800f4fe:	9b04      	ldr	r3, [sp, #16]
 800f500:	eba0 000a 	sub.w	r0, r0, sl
 800f504:	2240      	movs	r2, #64	; 0x40
 800f506:	4082      	lsls	r2, r0
 800f508:	4313      	orrs	r3, r2
 800f50a:	3401      	adds	r4, #1
 800f50c:	9304      	str	r3, [sp, #16]
 800f50e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f512:	4829      	ldr	r0, [pc, #164]	; (800f5b8 <_vfiprintf_r+0x224>)
 800f514:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f518:	2206      	movs	r2, #6
 800f51a:	f7f0 fee9 	bl	80002f0 <memchr>
 800f51e:	2800      	cmp	r0, #0
 800f520:	d03f      	beq.n	800f5a2 <_vfiprintf_r+0x20e>
 800f522:	4b26      	ldr	r3, [pc, #152]	; (800f5bc <_vfiprintf_r+0x228>)
 800f524:	bb1b      	cbnz	r3, 800f56e <_vfiprintf_r+0x1da>
 800f526:	9b03      	ldr	r3, [sp, #12]
 800f528:	3307      	adds	r3, #7
 800f52a:	f023 0307 	bic.w	r3, r3, #7
 800f52e:	3308      	adds	r3, #8
 800f530:	9303      	str	r3, [sp, #12]
 800f532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f534:	443b      	add	r3, r7
 800f536:	9309      	str	r3, [sp, #36]	; 0x24
 800f538:	e768      	b.n	800f40c <_vfiprintf_r+0x78>
 800f53a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f53e:	460c      	mov	r4, r1
 800f540:	2001      	movs	r0, #1
 800f542:	e7a6      	b.n	800f492 <_vfiprintf_r+0xfe>
 800f544:	2300      	movs	r3, #0
 800f546:	3401      	adds	r4, #1
 800f548:	9305      	str	r3, [sp, #20]
 800f54a:	4619      	mov	r1, r3
 800f54c:	f04f 0c0a 	mov.w	ip, #10
 800f550:	4620      	mov	r0, r4
 800f552:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f556:	3a30      	subs	r2, #48	; 0x30
 800f558:	2a09      	cmp	r2, #9
 800f55a:	d903      	bls.n	800f564 <_vfiprintf_r+0x1d0>
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d0c6      	beq.n	800f4ee <_vfiprintf_r+0x15a>
 800f560:	9105      	str	r1, [sp, #20]
 800f562:	e7c4      	b.n	800f4ee <_vfiprintf_r+0x15a>
 800f564:	fb0c 2101 	mla	r1, ip, r1, r2
 800f568:	4604      	mov	r4, r0
 800f56a:	2301      	movs	r3, #1
 800f56c:	e7f0      	b.n	800f550 <_vfiprintf_r+0x1bc>
 800f56e:	ab03      	add	r3, sp, #12
 800f570:	9300      	str	r3, [sp, #0]
 800f572:	462a      	mov	r2, r5
 800f574:	4b12      	ldr	r3, [pc, #72]	; (800f5c0 <_vfiprintf_r+0x22c>)
 800f576:	a904      	add	r1, sp, #16
 800f578:	4630      	mov	r0, r6
 800f57a:	f7fd fcc5 	bl	800cf08 <_printf_float>
 800f57e:	4607      	mov	r7, r0
 800f580:	1c78      	adds	r0, r7, #1
 800f582:	d1d6      	bne.n	800f532 <_vfiprintf_r+0x19e>
 800f584:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f586:	07d9      	lsls	r1, r3, #31
 800f588:	d405      	bmi.n	800f596 <_vfiprintf_r+0x202>
 800f58a:	89ab      	ldrh	r3, [r5, #12]
 800f58c:	059a      	lsls	r2, r3, #22
 800f58e:	d402      	bmi.n	800f596 <_vfiprintf_r+0x202>
 800f590:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f592:	f7fe fb09 	bl	800dba8 <__retarget_lock_release_recursive>
 800f596:	89ab      	ldrh	r3, [r5, #12]
 800f598:	065b      	lsls	r3, r3, #25
 800f59a:	f53f af1d 	bmi.w	800f3d8 <_vfiprintf_r+0x44>
 800f59e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f5a0:	e71c      	b.n	800f3dc <_vfiprintf_r+0x48>
 800f5a2:	ab03      	add	r3, sp, #12
 800f5a4:	9300      	str	r3, [sp, #0]
 800f5a6:	462a      	mov	r2, r5
 800f5a8:	4b05      	ldr	r3, [pc, #20]	; (800f5c0 <_vfiprintf_r+0x22c>)
 800f5aa:	a904      	add	r1, sp, #16
 800f5ac:	4630      	mov	r0, r6
 800f5ae:	f7fd ff33 	bl	800d418 <_printf_i>
 800f5b2:	e7e4      	b.n	800f57e <_vfiprintf_r+0x1ea>
 800f5b4:	0800fd14 	.word	0x0800fd14
 800f5b8:	0800fd1e 	.word	0x0800fd1e
 800f5bc:	0800cf09 	.word	0x0800cf09
 800f5c0:	0800f36f 	.word	0x0800f36f
 800f5c4:	0800fd1a 	.word	0x0800fd1a

0800f5c8 <__sflush_r>:
 800f5c8:	898a      	ldrh	r2, [r1, #12]
 800f5ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5ce:	4605      	mov	r5, r0
 800f5d0:	0710      	lsls	r0, r2, #28
 800f5d2:	460c      	mov	r4, r1
 800f5d4:	d458      	bmi.n	800f688 <__sflush_r+0xc0>
 800f5d6:	684b      	ldr	r3, [r1, #4]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	dc05      	bgt.n	800f5e8 <__sflush_r+0x20>
 800f5dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	dc02      	bgt.n	800f5e8 <__sflush_r+0x20>
 800f5e2:	2000      	movs	r0, #0
 800f5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f5ea:	2e00      	cmp	r6, #0
 800f5ec:	d0f9      	beq.n	800f5e2 <__sflush_r+0x1a>
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f5f4:	682f      	ldr	r7, [r5, #0]
 800f5f6:	6a21      	ldr	r1, [r4, #32]
 800f5f8:	602b      	str	r3, [r5, #0]
 800f5fa:	d032      	beq.n	800f662 <__sflush_r+0x9a>
 800f5fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f5fe:	89a3      	ldrh	r3, [r4, #12]
 800f600:	075a      	lsls	r2, r3, #29
 800f602:	d505      	bpl.n	800f610 <__sflush_r+0x48>
 800f604:	6863      	ldr	r3, [r4, #4]
 800f606:	1ac0      	subs	r0, r0, r3
 800f608:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f60a:	b10b      	cbz	r3, 800f610 <__sflush_r+0x48>
 800f60c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f60e:	1ac0      	subs	r0, r0, r3
 800f610:	2300      	movs	r3, #0
 800f612:	4602      	mov	r2, r0
 800f614:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f616:	6a21      	ldr	r1, [r4, #32]
 800f618:	4628      	mov	r0, r5
 800f61a:	47b0      	blx	r6
 800f61c:	1c43      	adds	r3, r0, #1
 800f61e:	89a3      	ldrh	r3, [r4, #12]
 800f620:	d106      	bne.n	800f630 <__sflush_r+0x68>
 800f622:	6829      	ldr	r1, [r5, #0]
 800f624:	291d      	cmp	r1, #29
 800f626:	d82b      	bhi.n	800f680 <__sflush_r+0xb8>
 800f628:	4a29      	ldr	r2, [pc, #164]	; (800f6d0 <__sflush_r+0x108>)
 800f62a:	410a      	asrs	r2, r1
 800f62c:	07d6      	lsls	r6, r2, #31
 800f62e:	d427      	bmi.n	800f680 <__sflush_r+0xb8>
 800f630:	2200      	movs	r2, #0
 800f632:	6062      	str	r2, [r4, #4]
 800f634:	04d9      	lsls	r1, r3, #19
 800f636:	6922      	ldr	r2, [r4, #16]
 800f638:	6022      	str	r2, [r4, #0]
 800f63a:	d504      	bpl.n	800f646 <__sflush_r+0x7e>
 800f63c:	1c42      	adds	r2, r0, #1
 800f63e:	d101      	bne.n	800f644 <__sflush_r+0x7c>
 800f640:	682b      	ldr	r3, [r5, #0]
 800f642:	b903      	cbnz	r3, 800f646 <__sflush_r+0x7e>
 800f644:	6560      	str	r0, [r4, #84]	; 0x54
 800f646:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f648:	602f      	str	r7, [r5, #0]
 800f64a:	2900      	cmp	r1, #0
 800f64c:	d0c9      	beq.n	800f5e2 <__sflush_r+0x1a>
 800f64e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f652:	4299      	cmp	r1, r3
 800f654:	d002      	beq.n	800f65c <__sflush_r+0x94>
 800f656:	4628      	mov	r0, r5
 800f658:	f7ff f89e 	bl	800e798 <_free_r>
 800f65c:	2000      	movs	r0, #0
 800f65e:	6360      	str	r0, [r4, #52]	; 0x34
 800f660:	e7c0      	b.n	800f5e4 <__sflush_r+0x1c>
 800f662:	2301      	movs	r3, #1
 800f664:	4628      	mov	r0, r5
 800f666:	47b0      	blx	r6
 800f668:	1c41      	adds	r1, r0, #1
 800f66a:	d1c8      	bne.n	800f5fe <__sflush_r+0x36>
 800f66c:	682b      	ldr	r3, [r5, #0]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d0c5      	beq.n	800f5fe <__sflush_r+0x36>
 800f672:	2b1d      	cmp	r3, #29
 800f674:	d001      	beq.n	800f67a <__sflush_r+0xb2>
 800f676:	2b16      	cmp	r3, #22
 800f678:	d101      	bne.n	800f67e <__sflush_r+0xb6>
 800f67a:	602f      	str	r7, [r5, #0]
 800f67c:	e7b1      	b.n	800f5e2 <__sflush_r+0x1a>
 800f67e:	89a3      	ldrh	r3, [r4, #12]
 800f680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f684:	81a3      	strh	r3, [r4, #12]
 800f686:	e7ad      	b.n	800f5e4 <__sflush_r+0x1c>
 800f688:	690f      	ldr	r7, [r1, #16]
 800f68a:	2f00      	cmp	r7, #0
 800f68c:	d0a9      	beq.n	800f5e2 <__sflush_r+0x1a>
 800f68e:	0793      	lsls	r3, r2, #30
 800f690:	680e      	ldr	r6, [r1, #0]
 800f692:	bf08      	it	eq
 800f694:	694b      	ldreq	r3, [r1, #20]
 800f696:	600f      	str	r7, [r1, #0]
 800f698:	bf18      	it	ne
 800f69a:	2300      	movne	r3, #0
 800f69c:	eba6 0807 	sub.w	r8, r6, r7
 800f6a0:	608b      	str	r3, [r1, #8]
 800f6a2:	f1b8 0f00 	cmp.w	r8, #0
 800f6a6:	dd9c      	ble.n	800f5e2 <__sflush_r+0x1a>
 800f6a8:	6a21      	ldr	r1, [r4, #32]
 800f6aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f6ac:	4643      	mov	r3, r8
 800f6ae:	463a      	mov	r2, r7
 800f6b0:	4628      	mov	r0, r5
 800f6b2:	47b0      	blx	r6
 800f6b4:	2800      	cmp	r0, #0
 800f6b6:	dc06      	bgt.n	800f6c6 <__sflush_r+0xfe>
 800f6b8:	89a3      	ldrh	r3, [r4, #12]
 800f6ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f6be:	81a3      	strh	r3, [r4, #12]
 800f6c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f6c4:	e78e      	b.n	800f5e4 <__sflush_r+0x1c>
 800f6c6:	4407      	add	r7, r0
 800f6c8:	eba8 0800 	sub.w	r8, r8, r0
 800f6cc:	e7e9      	b.n	800f6a2 <__sflush_r+0xda>
 800f6ce:	bf00      	nop
 800f6d0:	dfbffffe 	.word	0xdfbffffe

0800f6d4 <_fflush_r>:
 800f6d4:	b538      	push	{r3, r4, r5, lr}
 800f6d6:	690b      	ldr	r3, [r1, #16]
 800f6d8:	4605      	mov	r5, r0
 800f6da:	460c      	mov	r4, r1
 800f6dc:	b913      	cbnz	r3, 800f6e4 <_fflush_r+0x10>
 800f6de:	2500      	movs	r5, #0
 800f6e0:	4628      	mov	r0, r5
 800f6e2:	bd38      	pop	{r3, r4, r5, pc}
 800f6e4:	b118      	cbz	r0, 800f6ee <_fflush_r+0x1a>
 800f6e6:	6a03      	ldr	r3, [r0, #32]
 800f6e8:	b90b      	cbnz	r3, 800f6ee <_fflush_r+0x1a>
 800f6ea:	f7fe f843 	bl	800d774 <__sinit>
 800f6ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d0f3      	beq.n	800f6de <_fflush_r+0xa>
 800f6f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f6f8:	07d0      	lsls	r0, r2, #31
 800f6fa:	d404      	bmi.n	800f706 <_fflush_r+0x32>
 800f6fc:	0599      	lsls	r1, r3, #22
 800f6fe:	d402      	bmi.n	800f706 <_fflush_r+0x32>
 800f700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f702:	f7fe fa50 	bl	800dba6 <__retarget_lock_acquire_recursive>
 800f706:	4628      	mov	r0, r5
 800f708:	4621      	mov	r1, r4
 800f70a:	f7ff ff5d 	bl	800f5c8 <__sflush_r>
 800f70e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f710:	07da      	lsls	r2, r3, #31
 800f712:	4605      	mov	r5, r0
 800f714:	d4e4      	bmi.n	800f6e0 <_fflush_r+0xc>
 800f716:	89a3      	ldrh	r3, [r4, #12]
 800f718:	059b      	lsls	r3, r3, #22
 800f71a:	d4e1      	bmi.n	800f6e0 <_fflush_r+0xc>
 800f71c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f71e:	f7fe fa43 	bl	800dba8 <__retarget_lock_release_recursive>
 800f722:	e7dd      	b.n	800f6e0 <_fflush_r+0xc>

0800f724 <__swhatbuf_r>:
 800f724:	b570      	push	{r4, r5, r6, lr}
 800f726:	460c      	mov	r4, r1
 800f728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f72c:	2900      	cmp	r1, #0
 800f72e:	b096      	sub	sp, #88	; 0x58
 800f730:	4615      	mov	r5, r2
 800f732:	461e      	mov	r6, r3
 800f734:	da0d      	bge.n	800f752 <__swhatbuf_r+0x2e>
 800f736:	89a3      	ldrh	r3, [r4, #12]
 800f738:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f73c:	f04f 0100 	mov.w	r1, #0
 800f740:	bf0c      	ite	eq
 800f742:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f746:	2340      	movne	r3, #64	; 0x40
 800f748:	2000      	movs	r0, #0
 800f74a:	6031      	str	r1, [r6, #0]
 800f74c:	602b      	str	r3, [r5, #0]
 800f74e:	b016      	add	sp, #88	; 0x58
 800f750:	bd70      	pop	{r4, r5, r6, pc}
 800f752:	466a      	mov	r2, sp
 800f754:	f000 f862 	bl	800f81c <_fstat_r>
 800f758:	2800      	cmp	r0, #0
 800f75a:	dbec      	blt.n	800f736 <__swhatbuf_r+0x12>
 800f75c:	9901      	ldr	r1, [sp, #4]
 800f75e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f762:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f766:	4259      	negs	r1, r3
 800f768:	4159      	adcs	r1, r3
 800f76a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f76e:	e7eb      	b.n	800f748 <__swhatbuf_r+0x24>

0800f770 <__smakebuf_r>:
 800f770:	898b      	ldrh	r3, [r1, #12]
 800f772:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f774:	079d      	lsls	r5, r3, #30
 800f776:	4606      	mov	r6, r0
 800f778:	460c      	mov	r4, r1
 800f77a:	d507      	bpl.n	800f78c <__smakebuf_r+0x1c>
 800f77c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f780:	6023      	str	r3, [r4, #0]
 800f782:	6123      	str	r3, [r4, #16]
 800f784:	2301      	movs	r3, #1
 800f786:	6163      	str	r3, [r4, #20]
 800f788:	b002      	add	sp, #8
 800f78a:	bd70      	pop	{r4, r5, r6, pc}
 800f78c:	ab01      	add	r3, sp, #4
 800f78e:	466a      	mov	r2, sp
 800f790:	f7ff ffc8 	bl	800f724 <__swhatbuf_r>
 800f794:	9900      	ldr	r1, [sp, #0]
 800f796:	4605      	mov	r5, r0
 800f798:	4630      	mov	r0, r6
 800f79a:	f7ff f871 	bl	800e880 <_malloc_r>
 800f79e:	b948      	cbnz	r0, 800f7b4 <__smakebuf_r+0x44>
 800f7a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7a4:	059a      	lsls	r2, r3, #22
 800f7a6:	d4ef      	bmi.n	800f788 <__smakebuf_r+0x18>
 800f7a8:	f023 0303 	bic.w	r3, r3, #3
 800f7ac:	f043 0302 	orr.w	r3, r3, #2
 800f7b0:	81a3      	strh	r3, [r4, #12]
 800f7b2:	e7e3      	b.n	800f77c <__smakebuf_r+0xc>
 800f7b4:	89a3      	ldrh	r3, [r4, #12]
 800f7b6:	6020      	str	r0, [r4, #0]
 800f7b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7bc:	81a3      	strh	r3, [r4, #12]
 800f7be:	9b00      	ldr	r3, [sp, #0]
 800f7c0:	6163      	str	r3, [r4, #20]
 800f7c2:	9b01      	ldr	r3, [sp, #4]
 800f7c4:	6120      	str	r0, [r4, #16]
 800f7c6:	b15b      	cbz	r3, 800f7e0 <__smakebuf_r+0x70>
 800f7c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f7cc:	4630      	mov	r0, r6
 800f7ce:	f000 f837 	bl	800f840 <_isatty_r>
 800f7d2:	b128      	cbz	r0, 800f7e0 <__smakebuf_r+0x70>
 800f7d4:	89a3      	ldrh	r3, [r4, #12]
 800f7d6:	f023 0303 	bic.w	r3, r3, #3
 800f7da:	f043 0301 	orr.w	r3, r3, #1
 800f7de:	81a3      	strh	r3, [r4, #12]
 800f7e0:	89a3      	ldrh	r3, [r4, #12]
 800f7e2:	431d      	orrs	r5, r3
 800f7e4:	81a5      	strh	r5, [r4, #12]
 800f7e6:	e7cf      	b.n	800f788 <__smakebuf_r+0x18>

0800f7e8 <memmove>:
 800f7e8:	4288      	cmp	r0, r1
 800f7ea:	b510      	push	{r4, lr}
 800f7ec:	eb01 0402 	add.w	r4, r1, r2
 800f7f0:	d902      	bls.n	800f7f8 <memmove+0x10>
 800f7f2:	4284      	cmp	r4, r0
 800f7f4:	4623      	mov	r3, r4
 800f7f6:	d807      	bhi.n	800f808 <memmove+0x20>
 800f7f8:	1e43      	subs	r3, r0, #1
 800f7fa:	42a1      	cmp	r1, r4
 800f7fc:	d008      	beq.n	800f810 <memmove+0x28>
 800f7fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f802:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f806:	e7f8      	b.n	800f7fa <memmove+0x12>
 800f808:	4402      	add	r2, r0
 800f80a:	4601      	mov	r1, r0
 800f80c:	428a      	cmp	r2, r1
 800f80e:	d100      	bne.n	800f812 <memmove+0x2a>
 800f810:	bd10      	pop	{r4, pc}
 800f812:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f816:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f81a:	e7f7      	b.n	800f80c <memmove+0x24>

0800f81c <_fstat_r>:
 800f81c:	b538      	push	{r3, r4, r5, lr}
 800f81e:	4d07      	ldr	r5, [pc, #28]	; (800f83c <_fstat_r+0x20>)
 800f820:	2300      	movs	r3, #0
 800f822:	4604      	mov	r4, r0
 800f824:	4608      	mov	r0, r1
 800f826:	4611      	mov	r1, r2
 800f828:	602b      	str	r3, [r5, #0]
 800f82a:	f7f2 fd0c 	bl	8002246 <_fstat>
 800f82e:	1c43      	adds	r3, r0, #1
 800f830:	d102      	bne.n	800f838 <_fstat_r+0x1c>
 800f832:	682b      	ldr	r3, [r5, #0]
 800f834:	b103      	cbz	r3, 800f838 <_fstat_r+0x1c>
 800f836:	6023      	str	r3, [r4, #0]
 800f838:	bd38      	pop	{r3, r4, r5, pc}
 800f83a:	bf00      	nop
 800f83c:	24062078 	.word	0x24062078

0800f840 <_isatty_r>:
 800f840:	b538      	push	{r3, r4, r5, lr}
 800f842:	4d06      	ldr	r5, [pc, #24]	; (800f85c <_isatty_r+0x1c>)
 800f844:	2300      	movs	r3, #0
 800f846:	4604      	mov	r4, r0
 800f848:	4608      	mov	r0, r1
 800f84a:	602b      	str	r3, [r5, #0]
 800f84c:	f7f2 fd0b 	bl	8002266 <_isatty>
 800f850:	1c43      	adds	r3, r0, #1
 800f852:	d102      	bne.n	800f85a <_isatty_r+0x1a>
 800f854:	682b      	ldr	r3, [r5, #0]
 800f856:	b103      	cbz	r3, 800f85a <_isatty_r+0x1a>
 800f858:	6023      	str	r3, [r4, #0]
 800f85a:	bd38      	pop	{r3, r4, r5, pc}
 800f85c:	24062078 	.word	0x24062078

0800f860 <_sbrk_r>:
 800f860:	b538      	push	{r3, r4, r5, lr}
 800f862:	4d06      	ldr	r5, [pc, #24]	; (800f87c <_sbrk_r+0x1c>)
 800f864:	2300      	movs	r3, #0
 800f866:	4604      	mov	r4, r0
 800f868:	4608      	mov	r0, r1
 800f86a:	602b      	str	r3, [r5, #0]
 800f86c:	f7f2 fd14 	bl	8002298 <_sbrk>
 800f870:	1c43      	adds	r3, r0, #1
 800f872:	d102      	bne.n	800f87a <_sbrk_r+0x1a>
 800f874:	682b      	ldr	r3, [r5, #0]
 800f876:	b103      	cbz	r3, 800f87a <_sbrk_r+0x1a>
 800f878:	6023      	str	r3, [r4, #0]
 800f87a:	bd38      	pop	{r3, r4, r5, pc}
 800f87c:	24062078 	.word	0x24062078

0800f880 <memcpy>:
 800f880:	440a      	add	r2, r1
 800f882:	4291      	cmp	r1, r2
 800f884:	f100 33ff 	add.w	r3, r0, #4294967295
 800f888:	d100      	bne.n	800f88c <memcpy+0xc>
 800f88a:	4770      	bx	lr
 800f88c:	b510      	push	{r4, lr}
 800f88e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f892:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f896:	4291      	cmp	r1, r2
 800f898:	d1f9      	bne.n	800f88e <memcpy+0xe>
 800f89a:	bd10      	pop	{r4, pc}

0800f89c <__assert_func>:
 800f89c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f89e:	4614      	mov	r4, r2
 800f8a0:	461a      	mov	r2, r3
 800f8a2:	4b09      	ldr	r3, [pc, #36]	; (800f8c8 <__assert_func+0x2c>)
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	4605      	mov	r5, r0
 800f8a8:	68d8      	ldr	r0, [r3, #12]
 800f8aa:	b14c      	cbz	r4, 800f8c0 <__assert_func+0x24>
 800f8ac:	4b07      	ldr	r3, [pc, #28]	; (800f8cc <__assert_func+0x30>)
 800f8ae:	9100      	str	r1, [sp, #0]
 800f8b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f8b4:	4906      	ldr	r1, [pc, #24]	; (800f8d0 <__assert_func+0x34>)
 800f8b6:	462b      	mov	r3, r5
 800f8b8:	f000 f872 	bl	800f9a0 <fiprintf>
 800f8bc:	f000 f882 	bl	800f9c4 <abort>
 800f8c0:	4b04      	ldr	r3, [pc, #16]	; (800f8d4 <__assert_func+0x38>)
 800f8c2:	461c      	mov	r4, r3
 800f8c4:	e7f3      	b.n	800f8ae <__assert_func+0x12>
 800f8c6:	bf00      	nop
 800f8c8:	24000070 	.word	0x24000070
 800f8cc:	0800fd2f 	.word	0x0800fd2f
 800f8d0:	0800fd3c 	.word	0x0800fd3c
 800f8d4:	0800fd6a 	.word	0x0800fd6a

0800f8d8 <_calloc_r>:
 800f8d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f8da:	fba1 2402 	umull	r2, r4, r1, r2
 800f8de:	b94c      	cbnz	r4, 800f8f4 <_calloc_r+0x1c>
 800f8e0:	4611      	mov	r1, r2
 800f8e2:	9201      	str	r2, [sp, #4]
 800f8e4:	f7fe ffcc 	bl	800e880 <_malloc_r>
 800f8e8:	9a01      	ldr	r2, [sp, #4]
 800f8ea:	4605      	mov	r5, r0
 800f8ec:	b930      	cbnz	r0, 800f8fc <_calloc_r+0x24>
 800f8ee:	4628      	mov	r0, r5
 800f8f0:	b003      	add	sp, #12
 800f8f2:	bd30      	pop	{r4, r5, pc}
 800f8f4:	220c      	movs	r2, #12
 800f8f6:	6002      	str	r2, [r0, #0]
 800f8f8:	2500      	movs	r5, #0
 800f8fa:	e7f8      	b.n	800f8ee <_calloc_r+0x16>
 800f8fc:	4621      	mov	r1, r4
 800f8fe:	f7fe f8d5 	bl	800daac <memset>
 800f902:	e7f4      	b.n	800f8ee <_calloc_r+0x16>

0800f904 <__ascii_mbtowc>:
 800f904:	b082      	sub	sp, #8
 800f906:	b901      	cbnz	r1, 800f90a <__ascii_mbtowc+0x6>
 800f908:	a901      	add	r1, sp, #4
 800f90a:	b142      	cbz	r2, 800f91e <__ascii_mbtowc+0x1a>
 800f90c:	b14b      	cbz	r3, 800f922 <__ascii_mbtowc+0x1e>
 800f90e:	7813      	ldrb	r3, [r2, #0]
 800f910:	600b      	str	r3, [r1, #0]
 800f912:	7812      	ldrb	r2, [r2, #0]
 800f914:	1e10      	subs	r0, r2, #0
 800f916:	bf18      	it	ne
 800f918:	2001      	movne	r0, #1
 800f91a:	b002      	add	sp, #8
 800f91c:	4770      	bx	lr
 800f91e:	4610      	mov	r0, r2
 800f920:	e7fb      	b.n	800f91a <__ascii_mbtowc+0x16>
 800f922:	f06f 0001 	mvn.w	r0, #1
 800f926:	e7f8      	b.n	800f91a <__ascii_mbtowc+0x16>

0800f928 <_realloc_r>:
 800f928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f92c:	4680      	mov	r8, r0
 800f92e:	4614      	mov	r4, r2
 800f930:	460e      	mov	r6, r1
 800f932:	b921      	cbnz	r1, 800f93e <_realloc_r+0x16>
 800f934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f938:	4611      	mov	r1, r2
 800f93a:	f7fe bfa1 	b.w	800e880 <_malloc_r>
 800f93e:	b92a      	cbnz	r2, 800f94c <_realloc_r+0x24>
 800f940:	f7fe ff2a 	bl	800e798 <_free_r>
 800f944:	4625      	mov	r5, r4
 800f946:	4628      	mov	r0, r5
 800f948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f94c:	f000 f841 	bl	800f9d2 <_malloc_usable_size_r>
 800f950:	4284      	cmp	r4, r0
 800f952:	4607      	mov	r7, r0
 800f954:	d802      	bhi.n	800f95c <_realloc_r+0x34>
 800f956:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f95a:	d812      	bhi.n	800f982 <_realloc_r+0x5a>
 800f95c:	4621      	mov	r1, r4
 800f95e:	4640      	mov	r0, r8
 800f960:	f7fe ff8e 	bl	800e880 <_malloc_r>
 800f964:	4605      	mov	r5, r0
 800f966:	2800      	cmp	r0, #0
 800f968:	d0ed      	beq.n	800f946 <_realloc_r+0x1e>
 800f96a:	42bc      	cmp	r4, r7
 800f96c:	4622      	mov	r2, r4
 800f96e:	4631      	mov	r1, r6
 800f970:	bf28      	it	cs
 800f972:	463a      	movcs	r2, r7
 800f974:	f7ff ff84 	bl	800f880 <memcpy>
 800f978:	4631      	mov	r1, r6
 800f97a:	4640      	mov	r0, r8
 800f97c:	f7fe ff0c 	bl	800e798 <_free_r>
 800f980:	e7e1      	b.n	800f946 <_realloc_r+0x1e>
 800f982:	4635      	mov	r5, r6
 800f984:	e7df      	b.n	800f946 <_realloc_r+0x1e>

0800f986 <__ascii_wctomb>:
 800f986:	b149      	cbz	r1, 800f99c <__ascii_wctomb+0x16>
 800f988:	2aff      	cmp	r2, #255	; 0xff
 800f98a:	bf85      	ittet	hi
 800f98c:	238a      	movhi	r3, #138	; 0x8a
 800f98e:	6003      	strhi	r3, [r0, #0]
 800f990:	700a      	strbls	r2, [r1, #0]
 800f992:	f04f 30ff 	movhi.w	r0, #4294967295
 800f996:	bf98      	it	ls
 800f998:	2001      	movls	r0, #1
 800f99a:	4770      	bx	lr
 800f99c:	4608      	mov	r0, r1
 800f99e:	4770      	bx	lr

0800f9a0 <fiprintf>:
 800f9a0:	b40e      	push	{r1, r2, r3}
 800f9a2:	b503      	push	{r0, r1, lr}
 800f9a4:	4601      	mov	r1, r0
 800f9a6:	ab03      	add	r3, sp, #12
 800f9a8:	4805      	ldr	r0, [pc, #20]	; (800f9c0 <fiprintf+0x20>)
 800f9aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9ae:	6800      	ldr	r0, [r0, #0]
 800f9b0:	9301      	str	r3, [sp, #4]
 800f9b2:	f7ff fcef 	bl	800f394 <_vfiprintf_r>
 800f9b6:	b002      	add	sp, #8
 800f9b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f9bc:	b003      	add	sp, #12
 800f9be:	4770      	bx	lr
 800f9c0:	24000070 	.word	0x24000070

0800f9c4 <abort>:
 800f9c4:	b508      	push	{r3, lr}
 800f9c6:	2006      	movs	r0, #6
 800f9c8:	f000 f834 	bl	800fa34 <raise>
 800f9cc:	2001      	movs	r0, #1
 800f9ce:	f7f2 fbeb 	bl	80021a8 <_exit>

0800f9d2 <_malloc_usable_size_r>:
 800f9d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f9d6:	1f18      	subs	r0, r3, #4
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	bfbc      	itt	lt
 800f9dc:	580b      	ldrlt	r3, [r1, r0]
 800f9de:	18c0      	addlt	r0, r0, r3
 800f9e0:	4770      	bx	lr

0800f9e2 <_raise_r>:
 800f9e2:	291f      	cmp	r1, #31
 800f9e4:	b538      	push	{r3, r4, r5, lr}
 800f9e6:	4604      	mov	r4, r0
 800f9e8:	460d      	mov	r5, r1
 800f9ea:	d904      	bls.n	800f9f6 <_raise_r+0x14>
 800f9ec:	2316      	movs	r3, #22
 800f9ee:	6003      	str	r3, [r0, #0]
 800f9f0:	f04f 30ff 	mov.w	r0, #4294967295
 800f9f4:	bd38      	pop	{r3, r4, r5, pc}
 800f9f6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f9f8:	b112      	cbz	r2, 800fa00 <_raise_r+0x1e>
 800f9fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f9fe:	b94b      	cbnz	r3, 800fa14 <_raise_r+0x32>
 800fa00:	4620      	mov	r0, r4
 800fa02:	f000 f831 	bl	800fa68 <_getpid_r>
 800fa06:	462a      	mov	r2, r5
 800fa08:	4601      	mov	r1, r0
 800fa0a:	4620      	mov	r0, r4
 800fa0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa10:	f000 b818 	b.w	800fa44 <_kill_r>
 800fa14:	2b01      	cmp	r3, #1
 800fa16:	d00a      	beq.n	800fa2e <_raise_r+0x4c>
 800fa18:	1c59      	adds	r1, r3, #1
 800fa1a:	d103      	bne.n	800fa24 <_raise_r+0x42>
 800fa1c:	2316      	movs	r3, #22
 800fa1e:	6003      	str	r3, [r0, #0]
 800fa20:	2001      	movs	r0, #1
 800fa22:	e7e7      	b.n	800f9f4 <_raise_r+0x12>
 800fa24:	2400      	movs	r4, #0
 800fa26:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fa2a:	4628      	mov	r0, r5
 800fa2c:	4798      	blx	r3
 800fa2e:	2000      	movs	r0, #0
 800fa30:	e7e0      	b.n	800f9f4 <_raise_r+0x12>
	...

0800fa34 <raise>:
 800fa34:	4b02      	ldr	r3, [pc, #8]	; (800fa40 <raise+0xc>)
 800fa36:	4601      	mov	r1, r0
 800fa38:	6818      	ldr	r0, [r3, #0]
 800fa3a:	f7ff bfd2 	b.w	800f9e2 <_raise_r>
 800fa3e:	bf00      	nop
 800fa40:	24000070 	.word	0x24000070

0800fa44 <_kill_r>:
 800fa44:	b538      	push	{r3, r4, r5, lr}
 800fa46:	4d07      	ldr	r5, [pc, #28]	; (800fa64 <_kill_r+0x20>)
 800fa48:	2300      	movs	r3, #0
 800fa4a:	4604      	mov	r4, r0
 800fa4c:	4608      	mov	r0, r1
 800fa4e:	4611      	mov	r1, r2
 800fa50:	602b      	str	r3, [r5, #0]
 800fa52:	f7f2 fb99 	bl	8002188 <_kill>
 800fa56:	1c43      	adds	r3, r0, #1
 800fa58:	d102      	bne.n	800fa60 <_kill_r+0x1c>
 800fa5a:	682b      	ldr	r3, [r5, #0]
 800fa5c:	b103      	cbz	r3, 800fa60 <_kill_r+0x1c>
 800fa5e:	6023      	str	r3, [r4, #0]
 800fa60:	bd38      	pop	{r3, r4, r5, pc}
 800fa62:	bf00      	nop
 800fa64:	24062078 	.word	0x24062078

0800fa68 <_getpid_r>:
 800fa68:	f7f2 bb86 	b.w	8002178 <_getpid>

0800fa6c <_init>:
 800fa6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa6e:	bf00      	nop
 800fa70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa72:	bc08      	pop	{r3}
 800fa74:	469e      	mov	lr, r3
 800fa76:	4770      	bx	lr

0800fa78 <_fini>:
 800fa78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa7a:	bf00      	nop
 800fa7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa7e:	bc08      	pop	{r3}
 800fa80:	469e      	mov	lr, r3
 800fa82:	4770      	bx	lr
